Implementation smell,Namespace,Class,File,Method,Description
Long Method,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnPermaActive,The method has 120 lines of code.
Complex Method,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnCombo,Cyclomatic complexity of the method is 14
Complex Method,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnHarass,Cyclomatic complexity of the method is 15
Complex Method,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnWaveClear,Cyclomatic complexity of the method is 15
Complex Method,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnJungleClear,Cyclomatic complexity of the method is 11
Long Statement,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnPermaActive,The length of the statement  "            if (Config.BoolLinks["miscAlerter"].Value && (SpellManager.IsCastingUlt || R.IsReady()) && Environment.TickCount - lastAltert > 5000) " is 133.
Long Statement,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnPermaActive,The length of the statement  "                    .Where(h =>h.IsValidTarget(R.Range) && h.Health < (SpellManager.IsCastingUlt ? SpellManager.ChargesRemaining : 3) * R.GetRealDamage(h)) " is 135.
Long Statement,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnPermaActive,The length of the statement  "                    Game.PrintChat(string.Format("[{0}:{1:D2}] Targets killable: {2}"' Math.Floor(time.TotalMinutes)' time.Seconds' string.Join("' "' killableTargets.Select(t => t.ChampionName)))); " is 177.
Long Statement,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnPermaActive,The length of the statement  "                            if ((!targetWillDie || Environment.TickCount - SpellManager.LastChargeTime > R.Delay * 1000 + 100) && lastUltTarget.IsValidTarget(R.Range)) " is 139.
Long Statement,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnPermaActive,The length of the statement  "                        var targets = ObjectManager.Get<Obj_AI_Hero>().Where(h => h.IsValidTarget(R.Range) && h.Distance(Game.CursorPos' true) < 500 * 500); " is 132.
Long Statement,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnPermaActive,The length of the statement  "                            var killable = objAiHeroes.Where(t => t.Health < R.GetRealDamage(t) * SpellManager.ChargesRemaining).OrderByDescending(t => R.GetRealDamage(t)).FirstOrDefault(); " is 161.
Long Statement,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnCombo,The length of the statement  "                    if (target != null && (target.GetStunDuration() == 0 || target.GetStunDuration() < player.ServerPosition.Distance(target.ServerPosition) / E.Speed + E.Delay)) " is 158.
Long Statement,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnCombo,The length of the statement  "                                var preferredRange = player.ServerPosition.Distance(prediction.UnitPosition + Config.SliderLinks["comboExtraRangeQ"].Value.Value * (prediction.UnitPosition - player.ServerPosition).Normalized()' true); " is 201.
Long Statement,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnHarass,The length of the statement  "                            var preferredRange = player.ServerPosition.Distance(prediction.UnitPosition + Config.SliderLinks["harassExtraRangeQ"].Value.Value * (prediction.UnitPosition - player.ServerPosition).Normalized()' true); " is 202.
Long Statement,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnWaveClear,The length of the statement  "            var minions = MinionManager.GetMinions(Q.ChargedMaxRange' MinionTypes.All' MinionTeam.Enemy' MinionOrderTypes.MaxHealth); " is 121.
Long Statement,Xerath,Config,C:\repos\Hellsing_LeagueSharp\Xerath\Config.cs,Initialize,The length of the statement  "            ProcessLink("ultSettingsMode"' subMenu.AddLinkedStringList("Mode:"' new[] { "Smart targetting"' "Obvious scripting"' "Near mouse"' "On key press (auto)"' "On key press (near mouse)" })); " is 186.
Long Statement,Xerath,Config,C:\repos\Hellsing_LeagueSharp\Xerath\Config.cs,Initialize,The length of the statement  "            ProcessLink("drawRangeQ"' subMenu.AddLinkedCircle("Q range"' true' Color.FromArgb(150' Color.IndianRed)' SpellManager.Q.Range)); " is 128.
Long Statement,Xerath,Config,C:\repos\Hellsing_LeagueSharp\Xerath\Config.cs,Initialize,The length of the statement  "            ProcessLink("drawRangeW"' subMenu.AddLinkedCircle("W range"' true' Color.FromArgb(150' Color.PaleVioletRed)' SpellManager.W.Range)); " is 132.
Long Statement,Xerath,Config,C:\repos\Hellsing_LeagueSharp\Xerath\Config.cs,Initialize,The length of the statement  "            ProcessLink("drawRangeE"' subMenu.AddLinkedCircle("E range"' true' Color.FromArgb(150' Color.IndianRed)' SpellManager.E.Range)); " is 128.
Long Statement,Xerath,Config,C:\repos\Hellsing_LeagueSharp\Xerath\Config.cs,Initialize,The length of the statement  "            ProcessLink("drawRangeR"' subMenu.AddLinkedCircle("R range"' true' Color.FromArgb(150' Color.DarkRed)' SpellManager.R.Range)); " is 126.
Long Statement,Xerath,Damages,C:\repos\Hellsing_LeagueSharp\Xerath\Damages.cs,GetRealDamage,The length of the statement  "                    // While charging Arcanopulse' Xerath cannot attack or cast other spells. If Xerath does not fire the spell' half the Mana cost is refunded. " is 140.
Long Statement,Xerath,Damages,C:\repos\Hellsing_LeagueSharp\Xerath\Damages.cs,GetRealDamage,The length of the statement  "                    // Xerath calls down a blast of arcane energy' dealing 60/90/120/150/180 (+0.6) magic damage to all enemies within the target area' slowing them by 10% for 2.5 seconds. " is 168.
Long Statement,Xerath,Damages,C:\repos\Hellsing_LeagueSharp\Xerath\Damages.cs,GetRealDamage,The length of the statement  "                    // Enemies in the center of the blast take undefined (+undefined) magic damage and are slowed by 60/65/70/75/80%. This slow decays rapidly " is 138.
Long Statement,Xerath,Damages,C:\repos\Hellsing_LeagueSharp\Xerath\Damages.cs,GetRealDamage,The length of the statement  "                    // Xerath fires an orb of raw magic. The first enemy hit takes 80/110/140/170/200 (+0.45) magic damage and is stunned for between 0.75 and 2 seconds. " is 149.
Long Statement,Xerath,Damages,C:\repos\Hellsing_LeagueSharp\Xerath\Damages.cs,GetRealDamage,The length of the statement  "                    // Xerath ascends to his true form' becoming rooted in place and gaining 3 Arcane Barrages. This magic artillery deals 190/245/300 (+0.43) magic damage to all enemies hit. " is 171.
Long Statement,Xerath,Program,C:\repos\Hellsing_LeagueSharp\Xerath\Program.cs,Drawing_OnDraw,The length of the statement  "            if (Config.CircleLinks["drawRangeQ"].Value.Active && SpellManager.Q.IsCharging && SpellManager.Q.Range < SpellManager.Q.ChargedMaxRange) " is 136.
Long Statement,Xerath,Program,C:\repos\Hellsing_LeagueSharp\Xerath\Program.cs,OnInterruptableTarget,The length of the statement  "            if (args.DangerLevel == Interrupter2.DangerLevel.High && Config.BoolLinks["miscInterruptE"].Value && SpellManager.E.IsReady() && SpellManager.E.IsInRange(sender)) " is 162.
Long Statement,Xerath,SpellManager,C:\repos\Hellsing_LeagueSharp\Xerath\SpellManager.cs,Game_OnWndProc,The length of the statement  "            if (IsCastingUlt && args.Msg == (uint)WindowsMessages.WM_KEYUP && args.WParam == Config.KeyLinks["ultSettingsKeyPress"].Value.Key) " is 130.
Long Statement,Xerath,SpellManager,C:\repos\Hellsing_LeagueSharp\Xerath\SpellManager.cs,GetFarmLocation,The length of the statement  "            var positions = MinionManager.GetMinionsPredictedPositions(targets' spell.Delay' spell.Width' spell.Speed' spell.From' spell.Range' spell.Collision' spell.Type); " is 161.
Complex Conditional,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnPermaActive,The conditional expression  "Config.BoolLinks["miscAlerter"].Value && (SpellManager.IsCastingUlt || R.IsReady()) && Environment.TickCount - lastAltert > 5000"  is complex.
Complex Conditional,Xerath,Program,C:\repos\Hellsing_LeagueSharp\Xerath\Program.cs,OnInterruptableTarget,The conditional expression  "args.DangerLevel == Interrupter2.DangerLevel.High && Config.BoolLinks["miscInterruptE"].Value && SpellManager.E.IsReady() && SpellManager.E.IsInRange(sender)"  is complex.
Magic Number,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnPermaActive,The following statement contains a magic number: if (Config.BoolLinks["miscAlerter"].Value && (SpellManager.IsCastingUlt || R.IsReady()) && Environment.TickCount - lastAltert > 5000)              {                  // Get targets that can die with R                  var killableTargets = ObjectManager.Get<Obj_AI_Hero>()                      .Where(h =>h.IsValidTarget(R.Range) && h.Health < (SpellManager.IsCastingUlt ? SpellManager.ChargesRemaining : 3) * R.GetRealDamage(h))                      .OrderByDescending(h => R.GetRealDamage(h));                    if (killableTargets.Any())                  {                      lastAltert = Environment.TickCount;                      var time = TimeSpan.FromSeconds(Game.ClockTime);                      Game.PrintChat(string.Format("[{0}:{1:D2}] Targets killable: {2}"' Math.Floor(time.TotalMinutes)' time.Seconds' string.Join("' "' killableTargets.Select(t => t.ChampionName))));                  }              }
Magic Number,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnPermaActive,The following statement contains a magic number: if (Config.BoolLinks["miscAlerter"].Value && (SpellManager.IsCastingUlt || R.IsReady()) && Environment.TickCount - lastAltert > 5000)              {                  // Get targets that can die with R                  var killableTargets = ObjectManager.Get<Obj_AI_Hero>()                      .Where(h =>h.IsValidTarget(R.Range) && h.Health < (SpellManager.IsCastingUlt ? SpellManager.ChargesRemaining : 3) * R.GetRealDamage(h))                      .OrderByDescending(h => R.GetRealDamage(h));                    if (killableTargets.Any())                  {                      lastAltert = Environment.TickCount;                      var time = TimeSpan.FromSeconds(Game.ClockTime);                      Game.PrintChat(string.Format("[{0}:{1:D2}] Targets killable: {2}"' Math.Floor(time.TotalMinutes)' time.Seconds' string.Join("' "' killableTargets.Select(t => t.ChampionName))));                  }              }
Magic Number,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnPermaActive,The following statement contains a magic number: if (SpellManager.IsCastingUlt && Config.BoolLinks["ultSettingsEnabled"].Value)              {                  switch (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex)                  {                      #region Smart targetting & Obviously scripting & On key press (auto)                        // Smart targetting                      case 0:                      // Obviously scripting                      case 1:                      // On key press (auto)                      case 3:                            // Only for tap key                          if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 3 && !SpellManager.TapKeyPressed)                              break;                            // Get first time target                          if (lastUltTarget == null || SpellManager.ChargesRemaining == 3)                          {                              var target = R.GetTarget();                              if (target != null && R.Cast(target) == Spell.CastStates.SuccessfullyCasted)                              {                                  lastUltTarget = target;                                  targetWillDie = target.Health < R.GetRealDamage(target);                              }                          }                          // Next target                          else if (SpellManager.ChargesRemaining < 3)                          {                              // Shoot the same target again if in range                              if ((!targetWillDie || Environment.TickCount - SpellManager.LastChargeTime > R.Delay * 1000 + 100) && lastUltTarget.IsValidTarget(R.Range))                              {                                  if (R.Cast(lastUltTarget) == Spell.CastStates.SuccessfullyCasted)                                  {                                      targetWillDie = lastUltTarget.Health < R.GetRealDamage(lastUltTarget);                                  }                              }                              // Target died or is out of range' shoot new target                              else                              {                                  // Check if last target is still alive                                  if (!lastUltTarget.IsDead && ItemManager.UseRevealingOrb(lastUltTarget.ServerPosition))                                  {                                      orbUsedTime = Environment.TickCount;                                      break;                                  }                                    // Check if orb was used                                  if (Environment.TickCount - orbUsedTime < 250)                                      break;                                    // Get a new target                                  var target = R.GetTarget(new[] { lastUltTarget });                                  if (target != null)                                  {                                      // Only applies if smart targetting is enabled                                      if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 0)                                      {                                          // Calculate smart target change time                                          var waitTime = Math.Max(1500' target.Distance(SpellManager.LastChargePosition' false)) + R.Delay;                                          if (Environment.TickCount - SpellManager.LastChargeTime + waitTime < 0)                                              break;                                      }                                        if (R.Cast(target) == Spell.CastStates.SuccessfullyCasted)                                      {                                          lastUltTarget = target;                                          targetWillDie = target.Health < R.GetRealDamage(target);                                      }                                  }                                                              }                          }                            break;                        #endregion                        #region Near mouse & On key press (near mouse)                        // Near mouse                      case 2:                      // On key press (near mouse)                      case 4:                            // Only for tap key                          if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 4 && !SpellManager.TapKeyPressed)                              break;                            // Get all enemy heroes in a distance of 500 from the mouse                          var targets = ObjectManager.Get<Obj_AI_Hero>().Where(h => h.IsValidTarget(R.Range) && h.Distance(Game.CursorPos' true) < 500 * 500);                          var objAiHeroes = targets as Obj_AI_Hero[] ?? targets.ToArray();                          if (objAiHeroes.Any())                          {                              // Get a killable target                              var killable = objAiHeroes.Where(t => t.Health < R.GetRealDamage(t) * SpellManager.ChargesRemaining).OrderByDescending(t => R.GetRealDamage(t)).FirstOrDefault();                              if (killable != null)                              {                                  // Shoot on the killable target                                  R.Cast(killable);                              }                              else                              {                                  // Get the best target out of the found targets                                  var target = objAiHeroes.OrderByDescending(t => R.GetRealDamage(t)).FirstOrDefault();                                    // Shoot                                  R.Cast(target);                              }                          }                            break;                        #endregion                  }              }
Magic Number,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnPermaActive,The following statement contains a magic number: if (SpellManager.IsCastingUlt && Config.BoolLinks["ultSettingsEnabled"].Value)              {                  switch (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex)                  {                      #region Smart targetting & Obviously scripting & On key press (auto)                        // Smart targetting                      case 0:                      // Obviously scripting                      case 1:                      // On key press (auto)                      case 3:                            // Only for tap key                          if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 3 && !SpellManager.TapKeyPressed)                              break;                            // Get first time target                          if (lastUltTarget == null || SpellManager.ChargesRemaining == 3)                          {                              var target = R.GetTarget();                              if (target != null && R.Cast(target) == Spell.CastStates.SuccessfullyCasted)                              {                                  lastUltTarget = target;                                  targetWillDie = target.Health < R.GetRealDamage(target);                              }                          }                          // Next target                          else if (SpellManager.ChargesRemaining < 3)                          {                              // Shoot the same target again if in range                              if ((!targetWillDie || Environment.TickCount - SpellManager.LastChargeTime > R.Delay * 1000 + 100) && lastUltTarget.IsValidTarget(R.Range))                              {                                  if (R.Cast(lastUltTarget) == Spell.CastStates.SuccessfullyCasted)                                  {                                      targetWillDie = lastUltTarget.Health < R.GetRealDamage(lastUltTarget);                                  }                              }                              // Target died or is out of range' shoot new target                              else                              {                                  // Check if last target is still alive                                  if (!lastUltTarget.IsDead && ItemManager.UseRevealingOrb(lastUltTarget.ServerPosition))                                  {                                      orbUsedTime = Environment.TickCount;                                      break;                                  }                                    // Check if orb was used                                  if (Environment.TickCount - orbUsedTime < 250)                                      break;                                    // Get a new target                                  var target = R.GetTarget(new[] { lastUltTarget });                                  if (target != null)                                  {                                      // Only applies if smart targetting is enabled                                      if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 0)                                      {                                          // Calculate smart target change time                                          var waitTime = Math.Max(1500' target.Distance(SpellManager.LastChargePosition' false)) + R.Delay;                                          if (Environment.TickCount - SpellManager.LastChargeTime + waitTime < 0)                                              break;                                      }                                        if (R.Cast(target) == Spell.CastStates.SuccessfullyCasted)                                      {                                          lastUltTarget = target;                                          targetWillDie = target.Health < R.GetRealDamage(target);                                      }                                  }                                                              }                          }                            break;                        #endregion                        #region Near mouse & On key press (near mouse)                        // Near mouse                      case 2:                      // On key press (near mouse)                      case 4:                            // Only for tap key                          if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 4 && !SpellManager.TapKeyPressed)                              break;                            // Get all enemy heroes in a distance of 500 from the mouse                          var targets = ObjectManager.Get<Obj_AI_Hero>().Where(h => h.IsValidTarget(R.Range) && h.Distance(Game.CursorPos' true) < 500 * 500);                          var objAiHeroes = targets as Obj_AI_Hero[] ?? targets.ToArray();                          if (objAiHeroes.Any())                          {                              // Get a killable target                              var killable = objAiHeroes.Where(t => t.Health < R.GetRealDamage(t) * SpellManager.ChargesRemaining).OrderByDescending(t => R.GetRealDamage(t)).FirstOrDefault();                              if (killable != null)                              {                                  // Shoot on the killable target                                  R.Cast(killable);                              }                              else                              {                                  // Get the best target out of the found targets                                  var target = objAiHeroes.OrderByDescending(t => R.GetRealDamage(t)).FirstOrDefault();                                    // Shoot                                  R.Cast(target);                              }                          }                            break;                        #endregion                  }              }
Magic Number,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnPermaActive,The following statement contains a magic number: if (SpellManager.IsCastingUlt && Config.BoolLinks["ultSettingsEnabled"].Value)              {                  switch (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex)                  {                      #region Smart targetting & Obviously scripting & On key press (auto)                        // Smart targetting                      case 0:                      // Obviously scripting                      case 1:                      // On key press (auto)                      case 3:                            // Only for tap key                          if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 3 && !SpellManager.TapKeyPressed)                              break;                            // Get first time target                          if (lastUltTarget == null || SpellManager.ChargesRemaining == 3)                          {                              var target = R.GetTarget();                              if (target != null && R.Cast(target) == Spell.CastStates.SuccessfullyCasted)                              {                                  lastUltTarget = target;                                  targetWillDie = target.Health < R.GetRealDamage(target);                              }                          }                          // Next target                          else if (SpellManager.ChargesRemaining < 3)                          {                              // Shoot the same target again if in range                              if ((!targetWillDie || Environment.TickCount - SpellManager.LastChargeTime > R.Delay * 1000 + 100) && lastUltTarget.IsValidTarget(R.Range))                              {                                  if (R.Cast(lastUltTarget) == Spell.CastStates.SuccessfullyCasted)                                  {                                      targetWillDie = lastUltTarget.Health < R.GetRealDamage(lastUltTarget);                                  }                              }                              // Target died or is out of range' shoot new target                              else                              {                                  // Check if last target is still alive                                  if (!lastUltTarget.IsDead && ItemManager.UseRevealingOrb(lastUltTarget.ServerPosition))                                  {                                      orbUsedTime = Environment.TickCount;                                      break;                                  }                                    // Check if orb was used                                  if (Environment.TickCount - orbUsedTime < 250)                                      break;                                    // Get a new target                                  var target = R.GetTarget(new[] { lastUltTarget });                                  if (target != null)                                  {                                      // Only applies if smart targetting is enabled                                      if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 0)                                      {                                          // Calculate smart target change time                                          var waitTime = Math.Max(1500' target.Distance(SpellManager.LastChargePosition' false)) + R.Delay;                                          if (Environment.TickCount - SpellManager.LastChargeTime + waitTime < 0)                                              break;                                      }                                        if (R.Cast(target) == Spell.CastStates.SuccessfullyCasted)                                      {                                          lastUltTarget = target;                                          targetWillDie = target.Health < R.GetRealDamage(target);                                      }                                  }                                                              }                          }                            break;                        #endregion                        #region Near mouse & On key press (near mouse)                        // Near mouse                      case 2:                      // On key press (near mouse)                      case 4:                            // Only for tap key                          if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 4 && !SpellManager.TapKeyPressed)                              break;                            // Get all enemy heroes in a distance of 500 from the mouse                          var targets = ObjectManager.Get<Obj_AI_Hero>().Where(h => h.IsValidTarget(R.Range) && h.Distance(Game.CursorPos' true) < 500 * 500);                          var objAiHeroes = targets as Obj_AI_Hero[] ?? targets.ToArray();                          if (objAiHeroes.Any())                          {                              // Get a killable target                              var killable = objAiHeroes.Where(t => t.Health < R.GetRealDamage(t) * SpellManager.ChargesRemaining).OrderByDescending(t => R.GetRealDamage(t)).FirstOrDefault();                              if (killable != null)                              {                                  // Shoot on the killable target                                  R.Cast(killable);                              }                              else                              {                                  // Get the best target out of the found targets                                  var target = objAiHeroes.OrderByDescending(t => R.GetRealDamage(t)).FirstOrDefault();                                    // Shoot                                  R.Cast(target);                              }                          }                            break;                        #endregion                  }              }
Magic Number,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnPermaActive,The following statement contains a magic number: if (SpellManager.IsCastingUlt && Config.BoolLinks["ultSettingsEnabled"].Value)              {                  switch (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex)                  {                      #region Smart targetting & Obviously scripting & On key press (auto)                        // Smart targetting                      case 0:                      // Obviously scripting                      case 1:                      // On key press (auto)                      case 3:                            // Only for tap key                          if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 3 && !SpellManager.TapKeyPressed)                              break;                            // Get first time target                          if (lastUltTarget == null || SpellManager.ChargesRemaining == 3)                          {                              var target = R.GetTarget();                              if (target != null && R.Cast(target) == Spell.CastStates.SuccessfullyCasted)                              {                                  lastUltTarget = target;                                  targetWillDie = target.Health < R.GetRealDamage(target);                              }                          }                          // Next target                          else if (SpellManager.ChargesRemaining < 3)                          {                              // Shoot the same target again if in range                              if ((!targetWillDie || Environment.TickCount - SpellManager.LastChargeTime > R.Delay * 1000 + 100) && lastUltTarget.IsValidTarget(R.Range))                              {                                  if (R.Cast(lastUltTarget) == Spell.CastStates.SuccessfullyCasted)                                  {                                      targetWillDie = lastUltTarget.Health < R.GetRealDamage(lastUltTarget);                                  }                              }                              // Target died or is out of range' shoot new target                              else                              {                                  // Check if last target is still alive                                  if (!lastUltTarget.IsDead && ItemManager.UseRevealingOrb(lastUltTarget.ServerPosition))                                  {                                      orbUsedTime = Environment.TickCount;                                      break;                                  }                                    // Check if orb was used                                  if (Environment.TickCount - orbUsedTime < 250)                                      break;                                    // Get a new target                                  var target = R.GetTarget(new[] { lastUltTarget });                                  if (target != null)                                  {                                      // Only applies if smart targetting is enabled                                      if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 0)                                      {                                          // Calculate smart target change time                                          var waitTime = Math.Max(1500' target.Distance(SpellManager.LastChargePosition' false)) + R.Delay;                                          if (Environment.TickCount - SpellManager.LastChargeTime + waitTime < 0)                                              break;                                      }                                        if (R.Cast(target) == Spell.CastStates.SuccessfullyCasted)                                      {                                          lastUltTarget = target;                                          targetWillDie = target.Health < R.GetRealDamage(target);                                      }                                  }                                                              }                          }                            break;                        #endregion                        #region Near mouse & On key press (near mouse)                        // Near mouse                      case 2:                      // On key press (near mouse)                      case 4:                            // Only for tap key                          if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 4 && !SpellManager.TapKeyPressed)                              break;                            // Get all enemy heroes in a distance of 500 from the mouse                          var targets = ObjectManager.Get<Obj_AI_Hero>().Where(h => h.IsValidTarget(R.Range) && h.Distance(Game.CursorPos' true) < 500 * 500);                          var objAiHeroes = targets as Obj_AI_Hero[] ?? targets.ToArray();                          if (objAiHeroes.Any())                          {                              // Get a killable target                              var killable = objAiHeroes.Where(t => t.Health < R.GetRealDamage(t) * SpellManager.ChargesRemaining).OrderByDescending(t => R.GetRealDamage(t)).FirstOrDefault();                              if (killable != null)                              {                                  // Shoot on the killable target                                  R.Cast(killable);                              }                              else                              {                                  // Get the best target out of the found targets                                  var target = objAiHeroes.OrderByDescending(t => R.GetRealDamage(t)).FirstOrDefault();                                    // Shoot                                  R.Cast(target);                              }                          }                            break;                        #endregion                  }              }
Magic Number,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnPermaActive,The following statement contains a magic number: if (SpellManager.IsCastingUlt && Config.BoolLinks["ultSettingsEnabled"].Value)              {                  switch (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex)                  {                      #region Smart targetting & Obviously scripting & On key press (auto)                        // Smart targetting                      case 0:                      // Obviously scripting                      case 1:                      // On key press (auto)                      case 3:                            // Only for tap key                          if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 3 && !SpellManager.TapKeyPressed)                              break;                            // Get first time target                          if (lastUltTarget == null || SpellManager.ChargesRemaining == 3)                          {                              var target = R.GetTarget();                              if (target != null && R.Cast(target) == Spell.CastStates.SuccessfullyCasted)                              {                                  lastUltTarget = target;                                  targetWillDie = target.Health < R.GetRealDamage(target);                              }                          }                          // Next target                          else if (SpellManager.ChargesRemaining < 3)                          {                              // Shoot the same target again if in range                              if ((!targetWillDie || Environment.TickCount - SpellManager.LastChargeTime > R.Delay * 1000 + 100) && lastUltTarget.IsValidTarget(R.Range))                              {                                  if (R.Cast(lastUltTarget) == Spell.CastStates.SuccessfullyCasted)                                  {                                      targetWillDie = lastUltTarget.Health < R.GetRealDamage(lastUltTarget);                                  }                              }                              // Target died or is out of range' shoot new target                              else                              {                                  // Check if last target is still alive                                  if (!lastUltTarget.IsDead && ItemManager.UseRevealingOrb(lastUltTarget.ServerPosition))                                  {                                      orbUsedTime = Environment.TickCount;                                      break;                                  }                                    // Check if orb was used                                  if (Environment.TickCount - orbUsedTime < 250)                                      break;                                    // Get a new target                                  var target = R.GetTarget(new[] { lastUltTarget });                                  if (target != null)                                  {                                      // Only applies if smart targetting is enabled                                      if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 0)                                      {                                          // Calculate smart target change time                                          var waitTime = Math.Max(1500' target.Distance(SpellManager.LastChargePosition' false)) + R.Delay;                                          if (Environment.TickCount - SpellManager.LastChargeTime + waitTime < 0)                                              break;                                      }                                        if (R.Cast(target) == Spell.CastStates.SuccessfullyCasted)                                      {                                          lastUltTarget = target;                                          targetWillDie = target.Health < R.GetRealDamage(target);                                      }                                  }                                                              }                          }                            break;                        #endregion                        #region Near mouse & On key press (near mouse)                        // Near mouse                      case 2:                      // On key press (near mouse)                      case 4:                            // Only for tap key                          if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 4 && !SpellManager.TapKeyPressed)                              break;                            // Get all enemy heroes in a distance of 500 from the mouse                          var targets = ObjectManager.Get<Obj_AI_Hero>().Where(h => h.IsValidTarget(R.Range) && h.Distance(Game.CursorPos' true) < 500 * 500);                          var objAiHeroes = targets as Obj_AI_Hero[] ?? targets.ToArray();                          if (objAiHeroes.Any())                          {                              // Get a killable target                              var killable = objAiHeroes.Where(t => t.Health < R.GetRealDamage(t) * SpellManager.ChargesRemaining).OrderByDescending(t => R.GetRealDamage(t)).FirstOrDefault();                              if (killable != null)                              {                                  // Shoot on the killable target                                  R.Cast(killable);                              }                              else                              {                                  // Get the best target out of the found targets                                  var target = objAiHeroes.OrderByDescending(t => R.GetRealDamage(t)).FirstOrDefault();                                    // Shoot                                  R.Cast(target);                              }                          }                            break;                        #endregion                  }              }
Magic Number,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnPermaActive,The following statement contains a magic number: if (SpellManager.IsCastingUlt && Config.BoolLinks["ultSettingsEnabled"].Value)              {                  switch (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex)                  {                      #region Smart targetting & Obviously scripting & On key press (auto)                        // Smart targetting                      case 0:                      // Obviously scripting                      case 1:                      // On key press (auto)                      case 3:                            // Only for tap key                          if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 3 && !SpellManager.TapKeyPressed)                              break;                            // Get first time target                          if (lastUltTarget == null || SpellManager.ChargesRemaining == 3)                          {                              var target = R.GetTarget();                              if (target != null && R.Cast(target) == Spell.CastStates.SuccessfullyCasted)                              {                                  lastUltTarget = target;                                  targetWillDie = target.Health < R.GetRealDamage(target);                              }                          }                          // Next target                          else if (SpellManager.ChargesRemaining < 3)                          {                              // Shoot the same target again if in range                              if ((!targetWillDie || Environment.TickCount - SpellManager.LastChargeTime > R.Delay * 1000 + 100) && lastUltTarget.IsValidTarget(R.Range))                              {                                  if (R.Cast(lastUltTarget) == Spell.CastStates.SuccessfullyCasted)                                  {                                      targetWillDie = lastUltTarget.Health < R.GetRealDamage(lastUltTarget);                                  }                              }                              // Target died or is out of range' shoot new target                              else                              {                                  // Check if last target is still alive                                  if (!lastUltTarget.IsDead && ItemManager.UseRevealingOrb(lastUltTarget.ServerPosition))                                  {                                      orbUsedTime = Environment.TickCount;                                      break;                                  }                                    // Check if orb was used                                  if (Environment.TickCount - orbUsedTime < 250)                                      break;                                    // Get a new target                                  var target = R.GetTarget(new[] { lastUltTarget });                                  if (target != null)                                  {                                      // Only applies if smart targetting is enabled                                      if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 0)                                      {                                          // Calculate smart target change time                                          var waitTime = Math.Max(1500' target.Distance(SpellManager.LastChargePosition' false)) + R.Delay;                                          if (Environment.TickCount - SpellManager.LastChargeTime + waitTime < 0)                                              break;                                      }                                        if (R.Cast(target) == Spell.CastStates.SuccessfullyCasted)                                      {                                          lastUltTarget = target;                                          targetWillDie = target.Health < R.GetRealDamage(target);                                      }                                  }                                                              }                          }                            break;                        #endregion                        #region Near mouse & On key press (near mouse)                        // Near mouse                      case 2:                      // On key press (near mouse)                      case 4:                            // Only for tap key                          if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 4 && !SpellManager.TapKeyPressed)                              break;                            // Get all enemy heroes in a distance of 500 from the mouse                          var targets = ObjectManager.Get<Obj_AI_Hero>().Where(h => h.IsValidTarget(R.Range) && h.Distance(Game.CursorPos' true) < 500 * 500);                          var objAiHeroes = targets as Obj_AI_Hero[] ?? targets.ToArray();                          if (objAiHeroes.Any())                          {                              // Get a killable target                              var killable = objAiHeroes.Where(t => t.Health < R.GetRealDamage(t) * SpellManager.ChargesRemaining).OrderByDescending(t => R.GetRealDamage(t)).FirstOrDefault();                              if (killable != null)                              {                                  // Shoot on the killable target                                  R.Cast(killable);                              }                              else                              {                                  // Get the best target out of the found targets                                  var target = objAiHeroes.OrderByDescending(t => R.GetRealDamage(t)).FirstOrDefault();                                    // Shoot                                  R.Cast(target);                              }                          }                            break;                        #endregion                  }              }
Magic Number,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnPermaActive,The following statement contains a magic number: if (SpellManager.IsCastingUlt && Config.BoolLinks["ultSettingsEnabled"].Value)              {                  switch (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex)                  {                      #region Smart targetting & Obviously scripting & On key press (auto)                        // Smart targetting                      case 0:                      // Obviously scripting                      case 1:                      // On key press (auto)                      case 3:                            // Only for tap key                          if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 3 && !SpellManager.TapKeyPressed)                              break;                            // Get first time target                          if (lastUltTarget == null || SpellManager.ChargesRemaining == 3)                          {                              var target = R.GetTarget();                              if (target != null && R.Cast(target) == Spell.CastStates.SuccessfullyCasted)                              {                                  lastUltTarget = target;                                  targetWillDie = target.Health < R.GetRealDamage(target);                              }                          }                          // Next target                          else if (SpellManager.ChargesRemaining < 3)                          {                              // Shoot the same target again if in range                              if ((!targetWillDie || Environment.TickCount - SpellManager.LastChargeTime > R.Delay * 1000 + 100) && lastUltTarget.IsValidTarget(R.Range))                              {                                  if (R.Cast(lastUltTarget) == Spell.CastStates.SuccessfullyCasted)                                  {                                      targetWillDie = lastUltTarget.Health < R.GetRealDamage(lastUltTarget);                                  }                              }                              // Target died or is out of range' shoot new target                              else                              {                                  // Check if last target is still alive                                  if (!lastUltTarget.IsDead && ItemManager.UseRevealingOrb(lastUltTarget.ServerPosition))                                  {                                      orbUsedTime = Environment.TickCount;                                      break;                                  }                                    // Check if orb was used                                  if (Environment.TickCount - orbUsedTime < 250)                                      break;                                    // Get a new target                                  var target = R.GetTarget(new[] { lastUltTarget });                                  if (target != null)                                  {                                      // Only applies if smart targetting is enabled                                      if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 0)                                      {                                          // Calculate smart target change time                                          var waitTime = Math.Max(1500' target.Distance(SpellManager.LastChargePosition' false)) + R.Delay;                                          if (Environment.TickCount - SpellManager.LastChargeTime + waitTime < 0)                                              break;                                      }                                        if (R.Cast(target) == Spell.CastStates.SuccessfullyCasted)                                      {                                          lastUltTarget = target;                                          targetWillDie = target.Health < R.GetRealDamage(target);                                      }                                  }                                                              }                          }                            break;                        #endregion                        #region Near mouse & On key press (near mouse)                        // Near mouse                      case 2:                      // On key press (near mouse)                      case 4:                            // Only for tap key                          if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 4 && !SpellManager.TapKeyPressed)                              break;                            // Get all enemy heroes in a distance of 500 from the mouse                          var targets = ObjectManager.Get<Obj_AI_Hero>().Where(h => h.IsValidTarget(R.Range) && h.Distance(Game.CursorPos' true) < 500 * 500);                          var objAiHeroes = targets as Obj_AI_Hero[] ?? targets.ToArray();                          if (objAiHeroes.Any())                          {                              // Get a killable target                              var killable = objAiHeroes.Where(t => t.Health < R.GetRealDamage(t) * SpellManager.ChargesRemaining).OrderByDescending(t => R.GetRealDamage(t)).FirstOrDefault();                              if (killable != null)                              {                                  // Shoot on the killable target                                  R.Cast(killable);                              }                              else                              {                                  // Get the best target out of the found targets                                  var target = objAiHeroes.OrderByDescending(t => R.GetRealDamage(t)).FirstOrDefault();                                    // Shoot                                  R.Cast(target);                              }                          }                            break;                        #endregion                  }              }
Magic Number,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnPermaActive,The following statement contains a magic number: if (SpellManager.IsCastingUlt && Config.BoolLinks["ultSettingsEnabled"].Value)              {                  switch (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex)                  {                      #region Smart targetting & Obviously scripting & On key press (auto)                        // Smart targetting                      case 0:                      // Obviously scripting                      case 1:                      // On key press (auto)                      case 3:                            // Only for tap key                          if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 3 && !SpellManager.TapKeyPressed)                              break;                            // Get first time target                          if (lastUltTarget == null || SpellManager.ChargesRemaining == 3)                          {                              var target = R.GetTarget();                              if (target != null && R.Cast(target) == Spell.CastStates.SuccessfullyCasted)                              {                                  lastUltTarget = target;                                  targetWillDie = target.Health < R.GetRealDamage(target);                              }                          }                          // Next target                          else if (SpellManager.ChargesRemaining < 3)                          {                              // Shoot the same target again if in range                              if ((!targetWillDie || Environment.TickCount - SpellManager.LastChargeTime > R.Delay * 1000 + 100) && lastUltTarget.IsValidTarget(R.Range))                              {                                  if (R.Cast(lastUltTarget) == Spell.CastStates.SuccessfullyCasted)                                  {                                      targetWillDie = lastUltTarget.Health < R.GetRealDamage(lastUltTarget);                                  }                              }                              // Target died or is out of range' shoot new target                              else                              {                                  // Check if last target is still alive                                  if (!lastUltTarget.IsDead && ItemManager.UseRevealingOrb(lastUltTarget.ServerPosition))                                  {                                      orbUsedTime = Environment.TickCount;                                      break;                                  }                                    // Check if orb was used                                  if (Environment.TickCount - orbUsedTime < 250)                                      break;                                    // Get a new target                                  var target = R.GetTarget(new[] { lastUltTarget });                                  if (target != null)                                  {                                      // Only applies if smart targetting is enabled                                      if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 0)                                      {                                          // Calculate smart target change time                                          var waitTime = Math.Max(1500' target.Distance(SpellManager.LastChargePosition' false)) + R.Delay;                                          if (Environment.TickCount - SpellManager.LastChargeTime + waitTime < 0)                                              break;                                      }                                        if (R.Cast(target) == Spell.CastStates.SuccessfullyCasted)                                      {                                          lastUltTarget = target;                                          targetWillDie = target.Health < R.GetRealDamage(target);                                      }                                  }                                                              }                          }                            break;                        #endregion                        #region Near mouse & On key press (near mouse)                        // Near mouse                      case 2:                      // On key press (near mouse)                      case 4:                            // Only for tap key                          if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 4 && !SpellManager.TapKeyPressed)                              break;                            // Get all enemy heroes in a distance of 500 from the mouse                          var targets = ObjectManager.Get<Obj_AI_Hero>().Where(h => h.IsValidTarget(R.Range) && h.Distance(Game.CursorPos' true) < 500 * 500);                          var objAiHeroes = targets as Obj_AI_Hero[] ?? targets.ToArray();                          if (objAiHeroes.Any())                          {                              // Get a killable target                              var killable = objAiHeroes.Where(t => t.Health < R.GetRealDamage(t) * SpellManager.ChargesRemaining).OrderByDescending(t => R.GetRealDamage(t)).FirstOrDefault();                              if (killable != null)                              {                                  // Shoot on the killable target                                  R.Cast(killable);                              }                              else                              {                                  // Get the best target out of the found targets                                  var target = objAiHeroes.OrderByDescending(t => R.GetRealDamage(t)).FirstOrDefault();                                    // Shoot                                  R.Cast(target);                              }                          }                            break;                        #endregion                  }              }
Magic Number,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnPermaActive,The following statement contains a magic number: if (SpellManager.IsCastingUlt && Config.BoolLinks["ultSettingsEnabled"].Value)              {                  switch (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex)                  {                      #region Smart targetting & Obviously scripting & On key press (auto)                        // Smart targetting                      case 0:                      // Obviously scripting                      case 1:                      // On key press (auto)                      case 3:                            // Only for tap key                          if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 3 && !SpellManager.TapKeyPressed)                              break;                            // Get first time target                          if (lastUltTarget == null || SpellManager.ChargesRemaining == 3)                          {                              var target = R.GetTarget();                              if (target != null && R.Cast(target) == Spell.CastStates.SuccessfullyCasted)                              {                                  lastUltTarget = target;                                  targetWillDie = target.Health < R.GetRealDamage(target);                              }                          }                          // Next target                          else if (SpellManager.ChargesRemaining < 3)                          {                              // Shoot the same target again if in range                              if ((!targetWillDie || Environment.TickCount - SpellManager.LastChargeTime > R.Delay * 1000 + 100) && lastUltTarget.IsValidTarget(R.Range))                              {                                  if (R.Cast(lastUltTarget) == Spell.CastStates.SuccessfullyCasted)                                  {                                      targetWillDie = lastUltTarget.Health < R.GetRealDamage(lastUltTarget);                                  }                              }                              // Target died or is out of range' shoot new target                              else                              {                                  // Check if last target is still alive                                  if (!lastUltTarget.IsDead && ItemManager.UseRevealingOrb(lastUltTarget.ServerPosition))                                  {                                      orbUsedTime = Environment.TickCount;                                      break;                                  }                                    // Check if orb was used                                  if (Environment.TickCount - orbUsedTime < 250)                                      break;                                    // Get a new target                                  var target = R.GetTarget(new[] { lastUltTarget });                                  if (target != null)                                  {                                      // Only applies if smart targetting is enabled                                      if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 0)                                      {                                          // Calculate smart target change time                                          var waitTime = Math.Max(1500' target.Distance(SpellManager.LastChargePosition' false)) + R.Delay;                                          if (Environment.TickCount - SpellManager.LastChargeTime + waitTime < 0)                                              break;                                      }                                        if (R.Cast(target) == Spell.CastStates.SuccessfullyCasted)                                      {                                          lastUltTarget = target;                                          targetWillDie = target.Health < R.GetRealDamage(target);                                      }                                  }                                                              }                          }                            break;                        #endregion                        #region Near mouse & On key press (near mouse)                        // Near mouse                      case 2:                      // On key press (near mouse)                      case 4:                            // Only for tap key                          if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 4 && !SpellManager.TapKeyPressed)                              break;                            // Get all enemy heroes in a distance of 500 from the mouse                          var targets = ObjectManager.Get<Obj_AI_Hero>().Where(h => h.IsValidTarget(R.Range) && h.Distance(Game.CursorPos' true) < 500 * 500);                          var objAiHeroes = targets as Obj_AI_Hero[] ?? targets.ToArray();                          if (objAiHeroes.Any())                          {                              // Get a killable target                              var killable = objAiHeroes.Where(t => t.Health < R.GetRealDamage(t) * SpellManager.ChargesRemaining).OrderByDescending(t => R.GetRealDamage(t)).FirstOrDefault();                              if (killable != null)                              {                                  // Shoot on the killable target                                  R.Cast(killable);                              }                              else                              {                                  // Get the best target out of the found targets                                  var target = objAiHeroes.OrderByDescending(t => R.GetRealDamage(t)).FirstOrDefault();                                    // Shoot                                  R.Cast(target);                              }                          }                            break;                        #endregion                  }              }
Magic Number,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnPermaActive,The following statement contains a magic number: if (SpellManager.IsCastingUlt && Config.BoolLinks["ultSettingsEnabled"].Value)              {                  switch (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex)                  {                      #region Smart targetting & Obviously scripting & On key press (auto)                        // Smart targetting                      case 0:                      // Obviously scripting                      case 1:                      // On key press (auto)                      case 3:                            // Only for tap key                          if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 3 && !SpellManager.TapKeyPressed)                              break;                            // Get first time target                          if (lastUltTarget == null || SpellManager.ChargesRemaining == 3)                          {                              var target = R.GetTarget();                              if (target != null && R.Cast(target) == Spell.CastStates.SuccessfullyCasted)                              {                                  lastUltTarget = target;                                  targetWillDie = target.Health < R.GetRealDamage(target);                              }                          }                          // Next target                          else if (SpellManager.ChargesRemaining < 3)                          {                              // Shoot the same target again if in range                              if ((!targetWillDie || Environment.TickCount - SpellManager.LastChargeTime > R.Delay * 1000 + 100) && lastUltTarget.IsValidTarget(R.Range))                              {                                  if (R.Cast(lastUltTarget) == Spell.CastStates.SuccessfullyCasted)                                  {                                      targetWillDie = lastUltTarget.Health < R.GetRealDamage(lastUltTarget);                                  }                              }                              // Target died or is out of range' shoot new target                              else                              {                                  // Check if last target is still alive                                  if (!lastUltTarget.IsDead && ItemManager.UseRevealingOrb(lastUltTarget.ServerPosition))                                  {                                      orbUsedTime = Environment.TickCount;                                      break;                                  }                                    // Check if orb was used                                  if (Environment.TickCount - orbUsedTime < 250)                                      break;                                    // Get a new target                                  var target = R.GetTarget(new[] { lastUltTarget });                                  if (target != null)                                  {                                      // Only applies if smart targetting is enabled                                      if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 0)                                      {                                          // Calculate smart target change time                                          var waitTime = Math.Max(1500' target.Distance(SpellManager.LastChargePosition' false)) + R.Delay;                                          if (Environment.TickCount - SpellManager.LastChargeTime + waitTime < 0)                                              break;                                      }                                        if (R.Cast(target) == Spell.CastStates.SuccessfullyCasted)                                      {                                          lastUltTarget = target;                                          targetWillDie = target.Health < R.GetRealDamage(target);                                      }                                  }                                                              }                          }                            break;                        #endregion                        #region Near mouse & On key press (near mouse)                        // Near mouse                      case 2:                      // On key press (near mouse)                      case 4:                            // Only for tap key                          if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 4 && !SpellManager.TapKeyPressed)                              break;                            // Get all enemy heroes in a distance of 500 from the mouse                          var targets = ObjectManager.Get<Obj_AI_Hero>().Where(h => h.IsValidTarget(R.Range) && h.Distance(Game.CursorPos' true) < 500 * 500);                          var objAiHeroes = targets as Obj_AI_Hero[] ?? targets.ToArray();                          if (objAiHeroes.Any())                          {                              // Get a killable target                              var killable = objAiHeroes.Where(t => t.Health < R.GetRealDamage(t) * SpellManager.ChargesRemaining).OrderByDescending(t => R.GetRealDamage(t)).FirstOrDefault();                              if (killable != null)                              {                                  // Shoot on the killable target                                  R.Cast(killable);                              }                              else                              {                                  // Get the best target out of the found targets                                  var target = objAiHeroes.OrderByDescending(t => R.GetRealDamage(t)).FirstOrDefault();                                    // Shoot                                  R.Cast(target);                              }                          }                            break;                        #endregion                  }              }
Magic Number,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnPermaActive,The following statement contains a magic number: if (SpellManager.IsCastingUlt && Config.BoolLinks["ultSettingsEnabled"].Value)              {                  switch (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex)                  {                      #region Smart targetting & Obviously scripting & On key press (auto)                        // Smart targetting                      case 0:                      // Obviously scripting                      case 1:                      // On key press (auto)                      case 3:                            // Only for tap key                          if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 3 && !SpellManager.TapKeyPressed)                              break;                            // Get first time target                          if (lastUltTarget == null || SpellManager.ChargesRemaining == 3)                          {                              var target = R.GetTarget();                              if (target != null && R.Cast(target) == Spell.CastStates.SuccessfullyCasted)                              {                                  lastUltTarget = target;                                  targetWillDie = target.Health < R.GetRealDamage(target);                              }                          }                          // Next target                          else if (SpellManager.ChargesRemaining < 3)                          {                              // Shoot the same target again if in range                              if ((!targetWillDie || Environment.TickCount - SpellManager.LastChargeTime > R.Delay * 1000 + 100) && lastUltTarget.IsValidTarget(R.Range))                              {                                  if (R.Cast(lastUltTarget) == Spell.CastStates.SuccessfullyCasted)                                  {                                      targetWillDie = lastUltTarget.Health < R.GetRealDamage(lastUltTarget);                                  }                              }                              // Target died or is out of range' shoot new target                              else                              {                                  // Check if last target is still alive                                  if (!lastUltTarget.IsDead && ItemManager.UseRevealingOrb(lastUltTarget.ServerPosition))                                  {                                      orbUsedTime = Environment.TickCount;                                      break;                                  }                                    // Check if orb was used                                  if (Environment.TickCount - orbUsedTime < 250)                                      break;                                    // Get a new target                                  var target = R.GetTarget(new[] { lastUltTarget });                                  if (target != null)                                  {                                      // Only applies if smart targetting is enabled                                      if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 0)                                      {                                          // Calculate smart target change time                                          var waitTime = Math.Max(1500' target.Distance(SpellManager.LastChargePosition' false)) + R.Delay;                                          if (Environment.TickCount - SpellManager.LastChargeTime + waitTime < 0)                                              break;                                      }                                        if (R.Cast(target) == Spell.CastStates.SuccessfullyCasted)                                      {                                          lastUltTarget = target;                                          targetWillDie = target.Health < R.GetRealDamage(target);                                      }                                  }                                                              }                          }                            break;                        #endregion                        #region Near mouse & On key press (near mouse)                        // Near mouse                      case 2:                      // On key press (near mouse)                      case 4:                            // Only for tap key                          if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 4 && !SpellManager.TapKeyPressed)                              break;                            // Get all enemy heroes in a distance of 500 from the mouse                          var targets = ObjectManager.Get<Obj_AI_Hero>().Where(h => h.IsValidTarget(R.Range) && h.Distance(Game.CursorPos' true) < 500 * 500);                          var objAiHeroes = targets as Obj_AI_Hero[] ?? targets.ToArray();                          if (objAiHeroes.Any())                          {                              // Get a killable target                              var killable = objAiHeroes.Where(t => t.Health < R.GetRealDamage(t) * SpellManager.ChargesRemaining).OrderByDescending(t => R.GetRealDamage(t)).FirstOrDefault();                              if (killable != null)                              {                                  // Shoot on the killable target                                  R.Cast(killable);                              }                              else                              {                                  // Get the best target out of the found targets                                  var target = objAiHeroes.OrderByDescending(t => R.GetRealDamage(t)).FirstOrDefault();                                    // Shoot                                  R.Cast(target);                              }                          }                            break;                        #endregion                  }              }
Magic Number,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnPermaActive,The following statement contains a magic number: if (SpellManager.IsCastingUlt && Config.BoolLinks["ultSettingsEnabled"].Value)              {                  switch (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex)                  {                      #region Smart targetting & Obviously scripting & On key press (auto)                        // Smart targetting                      case 0:                      // Obviously scripting                      case 1:                      // On key press (auto)                      case 3:                            // Only for tap key                          if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 3 && !SpellManager.TapKeyPressed)                              break;                            // Get first time target                          if (lastUltTarget == null || SpellManager.ChargesRemaining == 3)                          {                              var target = R.GetTarget();                              if (target != null && R.Cast(target) == Spell.CastStates.SuccessfullyCasted)                              {                                  lastUltTarget = target;                                  targetWillDie = target.Health < R.GetRealDamage(target);                              }                          }                          // Next target                          else if (SpellManager.ChargesRemaining < 3)                          {                              // Shoot the same target again if in range                              if ((!targetWillDie || Environment.TickCount - SpellManager.LastChargeTime > R.Delay * 1000 + 100) && lastUltTarget.IsValidTarget(R.Range))                              {                                  if (R.Cast(lastUltTarget) == Spell.CastStates.SuccessfullyCasted)                                  {                                      targetWillDie = lastUltTarget.Health < R.GetRealDamage(lastUltTarget);                                  }                              }                              // Target died or is out of range' shoot new target                              else                              {                                  // Check if last target is still alive                                  if (!lastUltTarget.IsDead && ItemManager.UseRevealingOrb(lastUltTarget.ServerPosition))                                  {                                      orbUsedTime = Environment.TickCount;                                      break;                                  }                                    // Check if orb was used                                  if (Environment.TickCount - orbUsedTime < 250)                                      break;                                    // Get a new target                                  var target = R.GetTarget(new[] { lastUltTarget });                                  if (target != null)                                  {                                      // Only applies if smart targetting is enabled                                      if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 0)                                      {                                          // Calculate smart target change time                                          var waitTime = Math.Max(1500' target.Distance(SpellManager.LastChargePosition' false)) + R.Delay;                                          if (Environment.TickCount - SpellManager.LastChargeTime + waitTime < 0)                                              break;                                      }                                        if (R.Cast(target) == Spell.CastStates.SuccessfullyCasted)                                      {                                          lastUltTarget = target;                                          targetWillDie = target.Health < R.GetRealDamage(target);                                      }                                  }                                                              }                          }                            break;                        #endregion                        #region Near mouse & On key press (near mouse)                        // Near mouse                      case 2:                      // On key press (near mouse)                      case 4:                            // Only for tap key                          if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 4 && !SpellManager.TapKeyPressed)                              break;                            // Get all enemy heroes in a distance of 500 from the mouse                          var targets = ObjectManager.Get<Obj_AI_Hero>().Where(h => h.IsValidTarget(R.Range) && h.Distance(Game.CursorPos' true) < 500 * 500);                          var objAiHeroes = targets as Obj_AI_Hero[] ?? targets.ToArray();                          if (objAiHeroes.Any())                          {                              // Get a killable target                              var killable = objAiHeroes.Where(t => t.Health < R.GetRealDamage(t) * SpellManager.ChargesRemaining).OrderByDescending(t => R.GetRealDamage(t)).FirstOrDefault();                              if (killable != null)                              {                                  // Shoot on the killable target                                  R.Cast(killable);                              }                              else                              {                                  // Get the best target out of the found targets                                  var target = objAiHeroes.OrderByDescending(t => R.GetRealDamage(t)).FirstOrDefault();                                    // Shoot                                  R.Cast(target);                              }                          }                            break;                        #endregion                  }              }
Magic Number,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnPermaActive,The following statement contains a magic number: if (SpellManager.IsCastingUlt && Config.BoolLinks["ultSettingsEnabled"].Value)              {                  switch (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex)                  {                      #region Smart targetting & Obviously scripting & On key press (auto)                        // Smart targetting                      case 0:                      // Obviously scripting                      case 1:                      // On key press (auto)                      case 3:                            // Only for tap key                          if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 3 && !SpellManager.TapKeyPressed)                              break;                            // Get first time target                          if (lastUltTarget == null || SpellManager.ChargesRemaining == 3)                          {                              var target = R.GetTarget();                              if (target != null && R.Cast(target) == Spell.CastStates.SuccessfullyCasted)                              {                                  lastUltTarget = target;                                  targetWillDie = target.Health < R.GetRealDamage(target);                              }                          }                          // Next target                          else if (SpellManager.ChargesRemaining < 3)                          {                              // Shoot the same target again if in range                              if ((!targetWillDie || Environment.TickCount - SpellManager.LastChargeTime > R.Delay * 1000 + 100) && lastUltTarget.IsValidTarget(R.Range))                              {                                  if (R.Cast(lastUltTarget) == Spell.CastStates.SuccessfullyCasted)                                  {                                      targetWillDie = lastUltTarget.Health < R.GetRealDamage(lastUltTarget);                                  }                              }                              // Target died or is out of range' shoot new target                              else                              {                                  // Check if last target is still alive                                  if (!lastUltTarget.IsDead && ItemManager.UseRevealingOrb(lastUltTarget.ServerPosition))                                  {                                      orbUsedTime = Environment.TickCount;                                      break;                                  }                                    // Check if orb was used                                  if (Environment.TickCount - orbUsedTime < 250)                                      break;                                    // Get a new target                                  var target = R.GetTarget(new[] { lastUltTarget });                                  if (target != null)                                  {                                      // Only applies if smart targetting is enabled                                      if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 0)                                      {                                          // Calculate smart target change time                                          var waitTime = Math.Max(1500' target.Distance(SpellManager.LastChargePosition' false)) + R.Delay;                                          if (Environment.TickCount - SpellManager.LastChargeTime + waitTime < 0)                                              break;                                      }                                        if (R.Cast(target) == Spell.CastStates.SuccessfullyCasted)                                      {                                          lastUltTarget = target;                                          targetWillDie = target.Health < R.GetRealDamage(target);                                      }                                  }                                                              }                          }                            break;                        #endregion                        #region Near mouse & On key press (near mouse)                        // Near mouse                      case 2:                      // On key press (near mouse)                      case 4:                            // Only for tap key                          if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 4 && !SpellManager.TapKeyPressed)                              break;                            // Get all enemy heroes in a distance of 500 from the mouse                          var targets = ObjectManager.Get<Obj_AI_Hero>().Where(h => h.IsValidTarget(R.Range) && h.Distance(Game.CursorPos' true) < 500 * 500);                          var objAiHeroes = targets as Obj_AI_Hero[] ?? targets.ToArray();                          if (objAiHeroes.Any())                          {                              // Get a killable target                              var killable = objAiHeroes.Where(t => t.Health < R.GetRealDamage(t) * SpellManager.ChargesRemaining).OrderByDescending(t => R.GetRealDamage(t)).FirstOrDefault();                              if (killable != null)                              {                                  // Shoot on the killable target                                  R.Cast(killable);                              }                              else                              {                                  // Get the best target out of the found targets                                  var target = objAiHeroes.OrderByDescending(t => R.GetRealDamage(t)).FirstOrDefault();                                    // Shoot                                  R.Cast(target);                              }                          }                            break;                        #endregion                  }              }
Magic Number,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnCombo,The following statement contains a magic number: if (R.IsEnabledAndReady(Mode.COMBO) && !SpellManager.IsCastingUlt)              {                  var target = R.GetTarget();                  if (target != null && R.GetRealDamage(target) * 3 > target.Health)                  {                      // Only activate ult if the target can die from it                      R.Cast();                  }              }
Magic Number,Xerath,Config,C:\repos\Hellsing_LeagueSharp\Xerath\Config.cs,Initialize,The following statement contains a magic number: ProcessLink("comboExtraRangeQ"' subSubMenu.AddLinkedSlider("Extra range for Q"' 200' 0' 200));
Magic Number,Xerath,Config,C:\repos\Hellsing_LeagueSharp\Xerath\Config.cs,Initialize,The following statement contains a magic number: ProcessLink("comboExtraRangeQ"' subSubMenu.AddLinkedSlider("Extra range for Q"' 200' 0' 200));
Magic Number,Xerath,Config,C:\repos\Hellsing_LeagueSharp\Xerath\Config.cs,Initialize,The following statement contains a magic number: ProcessLink("comboActive"' subMenu.AddLinkedKeyBind("Combo active"' 32' KeyBindType.Press));
Magic Number,Xerath,Config,C:\repos\Hellsing_LeagueSharp\Xerath\Config.cs,Initialize,The following statement contains a magic number: ProcessLink("harassExtraRangeQ"' subSubMenu.AddLinkedSlider("Extra range for Q"' 200' 0' 200));
Magic Number,Xerath,Config,C:\repos\Hellsing_LeagueSharp\Xerath\Config.cs,Initialize,The following statement contains a magic number: ProcessLink("harassExtraRangeQ"' subSubMenu.AddLinkedSlider("Extra range for Q"' 200' 0' 200));
Magic Number,Xerath,Config,C:\repos\Hellsing_LeagueSharp\Xerath\Config.cs,Initialize,The following statement contains a magic number: ProcessLink("harassMana"' subMenu.AddLinkedSlider("Mana usage in percent (%)"' 30));
Magic Number,Xerath,Config,C:\repos\Hellsing_LeagueSharp\Xerath\Config.cs,Initialize,The following statement contains a magic number: ProcessLink("waveNumQ"' subMenu.AddLinkedSlider("Hit number for Q"' 3' 1' 10));
Magic Number,Xerath,Config,C:\repos\Hellsing_LeagueSharp\Xerath\Config.cs,Initialize,The following statement contains a magic number: ProcessLink("waveNumQ"' subMenu.AddLinkedSlider("Hit number for Q"' 3' 1' 10));
Magic Number,Xerath,Config,C:\repos\Hellsing_LeagueSharp\Xerath\Config.cs,Initialize,The following statement contains a magic number: ProcessLink("waveNumW"' subMenu.AddLinkedSlider("Hit number for W"' 3' 1' 10));
Magic Number,Xerath,Config,C:\repos\Hellsing_LeagueSharp\Xerath\Config.cs,Initialize,The following statement contains a magic number: ProcessLink("waveNumW"' subMenu.AddLinkedSlider("Hit number for W"' 3' 1' 10));
Magic Number,Xerath,Config,C:\repos\Hellsing_LeagueSharp\Xerath\Config.cs,Initialize,The following statement contains a magic number: ProcessLink("waveMana"' subMenu.AddLinkedSlider("Mana usage in percent (%)"' 30));
Magic Number,Xerath,Config,C:\repos\Hellsing_LeagueSharp\Xerath\Config.cs,Initialize,The following statement contains a magic number: ProcessLink("drawRangeQ"' subMenu.AddLinkedCircle("Q range"' true' Color.FromArgb(150' Color.IndianRed)' SpellManager.Q.Range));
Magic Number,Xerath,Config,C:\repos\Hellsing_LeagueSharp\Xerath\Config.cs,Initialize,The following statement contains a magic number: ProcessLink("drawRangeW"' subMenu.AddLinkedCircle("W range"' true' Color.FromArgb(150' Color.PaleVioletRed)' SpellManager.W.Range));
Magic Number,Xerath,Config,C:\repos\Hellsing_LeagueSharp\Xerath\Config.cs,Initialize,The following statement contains a magic number: ProcessLink("drawRangeE"' subMenu.AddLinkedCircle("E range"' true' Color.FromArgb(150' Color.IndianRed)' SpellManager.E.Range));
Magic Number,Xerath,Config,C:\repos\Hellsing_LeagueSharp\Xerath\Config.cs,Initialize,The following statement contains a magic number: ProcessLink("drawRangeR"' subMenu.AddLinkedCircle("R range"' true' Color.FromArgb(150' Color.DarkRed)' SpellManager.R.Range));
Magic Number,Xerath,Damages,C:\repos\Hellsing_LeagueSharp\Xerath\Damages.cs,GetTotalDamage,The following statement contains a magic number: if (SpellManager.R.IsReady() || SpellManager.IsCastingUlt)                  damage += SpellManager.R.GetRealDamage(target) * (SpellManager.IsCastingUlt ? SpellManager.ChargesRemaining : 3);
Magic Number,Xerath,Damages,C:\repos\Hellsing_LeagueSharp\Xerath\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        // First cast: Xerath charges Arcanopulse' gradually decreasing his Movement Speed while increasing the spell's range.                      // Second cast: Xerath fires Arcanopulse' dealing 80/120/160/200/240 (+0.75) magic damage to all enemies in a line.                      // While charging Arcanopulse' Xerath cannot attack or cast other spells. If Xerath does not fire the spell' half the Mana cost is refunded.                      damage = new float[] { 80' 120' 160' 200' 240 }[spellLevel] + 0.75f * player.TotalMagicalDamage();                      break;                    case SpellSlot.W:                        // Xerath calls down a blast of arcane energy' dealing 60/90/120/150/180 (+0.6) magic damage to all enemies within the target area' slowing them by 10% for 2.5 seconds.                      // Enemies in the center of the blast take undefined (+undefined) magic damage and are slowed by 60/65/70/75/80%. This slow decays rapidly                      damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                      break;                    case SpellSlot.E:                        // Xerath fires an orb of raw magic. The first enemy hit takes 80/110/140/170/200 (+0.45) magic damage and is stunned for between 0.75 and 2 seconds.                      // The stun duration lengthens based on how far the orb travels.                      damage = new float[] { 80' 110' 140' 170' 200 }[spellLevel] + 0.45f * player.TotalMagicalDamage();                      break;                    case SpellSlot.R:                        // Xerath ascends to his true form' becoming rooted in place and gaining 3 Arcane Barrages. This magic artillery deals 190/245/300 (+0.43) magic damage to all enemies hit.                      damage = new float[] { 190' 245' 300 }[spellLevel] + 0.43f * player.TotalMagicalDamage();                      break;              }
Magic Number,Xerath,Damages,C:\repos\Hellsing_LeagueSharp\Xerath\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        // First cast: Xerath charges Arcanopulse' gradually decreasing his Movement Speed while increasing the spell's range.                      // Second cast: Xerath fires Arcanopulse' dealing 80/120/160/200/240 (+0.75) magic damage to all enemies in a line.                      // While charging Arcanopulse' Xerath cannot attack or cast other spells. If Xerath does not fire the spell' half the Mana cost is refunded.                      damage = new float[] { 80' 120' 160' 200' 240 }[spellLevel] + 0.75f * player.TotalMagicalDamage();                      break;                    case SpellSlot.W:                        // Xerath calls down a blast of arcane energy' dealing 60/90/120/150/180 (+0.6) magic damage to all enemies within the target area' slowing them by 10% for 2.5 seconds.                      // Enemies in the center of the blast take undefined (+undefined) magic damage and are slowed by 60/65/70/75/80%. This slow decays rapidly                      damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                      break;                    case SpellSlot.E:                        // Xerath fires an orb of raw magic. The first enemy hit takes 80/110/140/170/200 (+0.45) magic damage and is stunned for between 0.75 and 2 seconds.                      // The stun duration lengthens based on how far the orb travels.                      damage = new float[] { 80' 110' 140' 170' 200 }[spellLevel] + 0.45f * player.TotalMagicalDamage();                      break;                    case SpellSlot.R:                        // Xerath ascends to his true form' becoming rooted in place and gaining 3 Arcane Barrages. This magic artillery deals 190/245/300 (+0.43) magic damage to all enemies hit.                      damage = new float[] { 190' 245' 300 }[spellLevel] + 0.43f * player.TotalMagicalDamage();                      break;              }
Magic Number,Xerath,Damages,C:\repos\Hellsing_LeagueSharp\Xerath\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        // First cast: Xerath charges Arcanopulse' gradually decreasing his Movement Speed while increasing the spell's range.                      // Second cast: Xerath fires Arcanopulse' dealing 80/120/160/200/240 (+0.75) magic damage to all enemies in a line.                      // While charging Arcanopulse' Xerath cannot attack or cast other spells. If Xerath does not fire the spell' half the Mana cost is refunded.                      damage = new float[] { 80' 120' 160' 200' 240 }[spellLevel] + 0.75f * player.TotalMagicalDamage();                      break;                    case SpellSlot.W:                        // Xerath calls down a blast of arcane energy' dealing 60/90/120/150/180 (+0.6) magic damage to all enemies within the target area' slowing them by 10% for 2.5 seconds.                      // Enemies in the center of the blast take undefined (+undefined) magic damage and are slowed by 60/65/70/75/80%. This slow decays rapidly                      damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                      break;                    case SpellSlot.E:                        // Xerath fires an orb of raw magic. The first enemy hit takes 80/110/140/170/200 (+0.45) magic damage and is stunned for between 0.75 and 2 seconds.                      // The stun duration lengthens based on how far the orb travels.                      damage = new float[] { 80' 110' 140' 170' 200 }[spellLevel] + 0.45f * player.TotalMagicalDamage();                      break;                    case SpellSlot.R:                        // Xerath ascends to his true form' becoming rooted in place and gaining 3 Arcane Barrages. This magic artillery deals 190/245/300 (+0.43) magic damage to all enemies hit.                      damage = new float[] { 190' 245' 300 }[spellLevel] + 0.43f * player.TotalMagicalDamage();                      break;              }
Magic Number,Xerath,Damages,C:\repos\Hellsing_LeagueSharp\Xerath\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        // First cast: Xerath charges Arcanopulse' gradually decreasing his Movement Speed while increasing the spell's range.                      // Second cast: Xerath fires Arcanopulse' dealing 80/120/160/200/240 (+0.75) magic damage to all enemies in a line.                      // While charging Arcanopulse' Xerath cannot attack or cast other spells. If Xerath does not fire the spell' half the Mana cost is refunded.                      damage = new float[] { 80' 120' 160' 200' 240 }[spellLevel] + 0.75f * player.TotalMagicalDamage();                      break;                    case SpellSlot.W:                        // Xerath calls down a blast of arcane energy' dealing 60/90/120/150/180 (+0.6) magic damage to all enemies within the target area' slowing them by 10% for 2.5 seconds.                      // Enemies in the center of the blast take undefined (+undefined) magic damage and are slowed by 60/65/70/75/80%. This slow decays rapidly                      damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                      break;                    case SpellSlot.E:                        // Xerath fires an orb of raw magic. The first enemy hit takes 80/110/140/170/200 (+0.45) magic damage and is stunned for between 0.75 and 2 seconds.                      // The stun duration lengthens based on how far the orb travels.                      damage = new float[] { 80' 110' 140' 170' 200 }[spellLevel] + 0.45f * player.TotalMagicalDamage();                      break;                    case SpellSlot.R:                        // Xerath ascends to his true form' becoming rooted in place and gaining 3 Arcane Barrages. This magic artillery deals 190/245/300 (+0.43) magic damage to all enemies hit.                      damage = new float[] { 190' 245' 300 }[spellLevel] + 0.43f * player.TotalMagicalDamage();                      break;              }
Magic Number,Xerath,Damages,C:\repos\Hellsing_LeagueSharp\Xerath\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        // First cast: Xerath charges Arcanopulse' gradually decreasing his Movement Speed while increasing the spell's range.                      // Second cast: Xerath fires Arcanopulse' dealing 80/120/160/200/240 (+0.75) magic damage to all enemies in a line.                      // While charging Arcanopulse' Xerath cannot attack or cast other spells. If Xerath does not fire the spell' half the Mana cost is refunded.                      damage = new float[] { 80' 120' 160' 200' 240 }[spellLevel] + 0.75f * player.TotalMagicalDamage();                      break;                    case SpellSlot.W:                        // Xerath calls down a blast of arcane energy' dealing 60/90/120/150/180 (+0.6) magic damage to all enemies within the target area' slowing them by 10% for 2.5 seconds.                      // Enemies in the center of the blast take undefined (+undefined) magic damage and are slowed by 60/65/70/75/80%. This slow decays rapidly                      damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                      break;                    case SpellSlot.E:                        // Xerath fires an orb of raw magic. The first enemy hit takes 80/110/140/170/200 (+0.45) magic damage and is stunned for between 0.75 and 2 seconds.                      // The stun duration lengthens based on how far the orb travels.                      damage = new float[] { 80' 110' 140' 170' 200 }[spellLevel] + 0.45f * player.TotalMagicalDamage();                      break;                    case SpellSlot.R:                        // Xerath ascends to his true form' becoming rooted in place and gaining 3 Arcane Barrages. This magic artillery deals 190/245/300 (+0.43) magic damage to all enemies hit.                      damage = new float[] { 190' 245' 300 }[spellLevel] + 0.43f * player.TotalMagicalDamage();                      break;              }
Magic Number,Xerath,Damages,C:\repos\Hellsing_LeagueSharp\Xerath\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        // First cast: Xerath charges Arcanopulse' gradually decreasing his Movement Speed while increasing the spell's range.                      // Second cast: Xerath fires Arcanopulse' dealing 80/120/160/200/240 (+0.75) magic damage to all enemies in a line.                      // While charging Arcanopulse' Xerath cannot attack or cast other spells. If Xerath does not fire the spell' half the Mana cost is refunded.                      damage = new float[] { 80' 120' 160' 200' 240 }[spellLevel] + 0.75f * player.TotalMagicalDamage();                      break;                    case SpellSlot.W:                        // Xerath calls down a blast of arcane energy' dealing 60/90/120/150/180 (+0.6) magic damage to all enemies within the target area' slowing them by 10% for 2.5 seconds.                      // Enemies in the center of the blast take undefined (+undefined) magic damage and are slowed by 60/65/70/75/80%. This slow decays rapidly                      damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                      break;                    case SpellSlot.E:                        // Xerath fires an orb of raw magic. The first enemy hit takes 80/110/140/170/200 (+0.45) magic damage and is stunned for between 0.75 and 2 seconds.                      // The stun duration lengthens based on how far the orb travels.                      damage = new float[] { 80' 110' 140' 170' 200 }[spellLevel] + 0.45f * player.TotalMagicalDamage();                      break;                    case SpellSlot.R:                        // Xerath ascends to his true form' becoming rooted in place and gaining 3 Arcane Barrages. This magic artillery deals 190/245/300 (+0.43) magic damage to all enemies hit.                      damage = new float[] { 190' 245' 300 }[spellLevel] + 0.43f * player.TotalMagicalDamage();                      break;              }
Magic Number,Xerath,Damages,C:\repos\Hellsing_LeagueSharp\Xerath\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        // First cast: Xerath charges Arcanopulse' gradually decreasing his Movement Speed while increasing the spell's range.                      // Second cast: Xerath fires Arcanopulse' dealing 80/120/160/200/240 (+0.75) magic damage to all enemies in a line.                      // While charging Arcanopulse' Xerath cannot attack or cast other spells. If Xerath does not fire the spell' half the Mana cost is refunded.                      damage = new float[] { 80' 120' 160' 200' 240 }[spellLevel] + 0.75f * player.TotalMagicalDamage();                      break;                    case SpellSlot.W:                        // Xerath calls down a blast of arcane energy' dealing 60/90/120/150/180 (+0.6) magic damage to all enemies within the target area' slowing them by 10% for 2.5 seconds.                      // Enemies in the center of the blast take undefined (+undefined) magic damage and are slowed by 60/65/70/75/80%. This slow decays rapidly                      damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                      break;                    case SpellSlot.E:                        // Xerath fires an orb of raw magic. The first enemy hit takes 80/110/140/170/200 (+0.45) magic damage and is stunned for between 0.75 and 2 seconds.                      // The stun duration lengthens based on how far the orb travels.                      damage = new float[] { 80' 110' 140' 170' 200 }[spellLevel] + 0.45f * player.TotalMagicalDamage();                      break;                    case SpellSlot.R:                        // Xerath ascends to his true form' becoming rooted in place and gaining 3 Arcane Barrages. This magic artillery deals 190/245/300 (+0.43) magic damage to all enemies hit.                      damage = new float[] { 190' 245' 300 }[spellLevel] + 0.43f * player.TotalMagicalDamage();                      break;              }
Magic Number,Xerath,Damages,C:\repos\Hellsing_LeagueSharp\Xerath\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        // First cast: Xerath charges Arcanopulse' gradually decreasing his Movement Speed while increasing the spell's range.                      // Second cast: Xerath fires Arcanopulse' dealing 80/120/160/200/240 (+0.75) magic damage to all enemies in a line.                      // While charging Arcanopulse' Xerath cannot attack or cast other spells. If Xerath does not fire the spell' half the Mana cost is refunded.                      damage = new float[] { 80' 120' 160' 200' 240 }[spellLevel] + 0.75f * player.TotalMagicalDamage();                      break;                    case SpellSlot.W:                        // Xerath calls down a blast of arcane energy' dealing 60/90/120/150/180 (+0.6) magic damage to all enemies within the target area' slowing them by 10% for 2.5 seconds.                      // Enemies in the center of the blast take undefined (+undefined) magic damage and are slowed by 60/65/70/75/80%. This slow decays rapidly                      damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                      break;                    case SpellSlot.E:                        // Xerath fires an orb of raw magic. The first enemy hit takes 80/110/140/170/200 (+0.45) magic damage and is stunned for between 0.75 and 2 seconds.                      // The stun duration lengthens based on how far the orb travels.                      damage = new float[] { 80' 110' 140' 170' 200 }[spellLevel] + 0.45f * player.TotalMagicalDamage();                      break;                    case SpellSlot.R:                        // Xerath ascends to his true form' becoming rooted in place and gaining 3 Arcane Barrages. This magic artillery deals 190/245/300 (+0.43) magic damage to all enemies hit.                      damage = new float[] { 190' 245' 300 }[spellLevel] + 0.43f * player.TotalMagicalDamage();                      break;              }
Magic Number,Xerath,Damages,C:\repos\Hellsing_LeagueSharp\Xerath\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        // First cast: Xerath charges Arcanopulse' gradually decreasing his Movement Speed while increasing the spell's range.                      // Second cast: Xerath fires Arcanopulse' dealing 80/120/160/200/240 (+0.75) magic damage to all enemies in a line.                      // While charging Arcanopulse' Xerath cannot attack or cast other spells. If Xerath does not fire the spell' half the Mana cost is refunded.                      damage = new float[] { 80' 120' 160' 200' 240 }[spellLevel] + 0.75f * player.TotalMagicalDamage();                      break;                    case SpellSlot.W:                        // Xerath calls down a blast of arcane energy' dealing 60/90/120/150/180 (+0.6) magic damage to all enemies within the target area' slowing them by 10% for 2.5 seconds.                      // Enemies in the center of the blast take undefined (+undefined) magic damage and are slowed by 60/65/70/75/80%. This slow decays rapidly                      damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                      break;                    case SpellSlot.E:                        // Xerath fires an orb of raw magic. The first enemy hit takes 80/110/140/170/200 (+0.45) magic damage and is stunned for between 0.75 and 2 seconds.                      // The stun duration lengthens based on how far the orb travels.                      damage = new float[] { 80' 110' 140' 170' 200 }[spellLevel] + 0.45f * player.TotalMagicalDamage();                      break;                    case SpellSlot.R:                        // Xerath ascends to his true form' becoming rooted in place and gaining 3 Arcane Barrages. This magic artillery deals 190/245/300 (+0.43) magic damage to all enemies hit.                      damage = new float[] { 190' 245' 300 }[spellLevel] + 0.43f * player.TotalMagicalDamage();                      break;              }
Magic Number,Xerath,Damages,C:\repos\Hellsing_LeagueSharp\Xerath\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        // First cast: Xerath charges Arcanopulse' gradually decreasing his Movement Speed while increasing the spell's range.                      // Second cast: Xerath fires Arcanopulse' dealing 80/120/160/200/240 (+0.75) magic damage to all enemies in a line.                      // While charging Arcanopulse' Xerath cannot attack or cast other spells. If Xerath does not fire the spell' half the Mana cost is refunded.                      damage = new float[] { 80' 120' 160' 200' 240 }[spellLevel] + 0.75f * player.TotalMagicalDamage();                      break;                    case SpellSlot.W:                        // Xerath calls down a blast of arcane energy' dealing 60/90/120/150/180 (+0.6) magic damage to all enemies within the target area' slowing them by 10% for 2.5 seconds.                      // Enemies in the center of the blast take undefined (+undefined) magic damage and are slowed by 60/65/70/75/80%. This slow decays rapidly                      damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                      break;                    case SpellSlot.E:                        // Xerath fires an orb of raw magic. The first enemy hit takes 80/110/140/170/200 (+0.45) magic damage and is stunned for between 0.75 and 2 seconds.                      // The stun duration lengthens based on how far the orb travels.                      damage = new float[] { 80' 110' 140' 170' 200 }[spellLevel] + 0.45f * player.TotalMagicalDamage();                      break;                    case SpellSlot.R:                        // Xerath ascends to his true form' becoming rooted in place and gaining 3 Arcane Barrages. This magic artillery deals 190/245/300 (+0.43) magic damage to all enemies hit.                      damage = new float[] { 190' 245' 300 }[spellLevel] + 0.43f * player.TotalMagicalDamage();                      break;              }
Magic Number,Xerath,Damages,C:\repos\Hellsing_LeagueSharp\Xerath\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        // First cast: Xerath charges Arcanopulse' gradually decreasing his Movement Speed while increasing the spell's range.                      // Second cast: Xerath fires Arcanopulse' dealing 80/120/160/200/240 (+0.75) magic damage to all enemies in a line.                      // While charging Arcanopulse' Xerath cannot attack or cast other spells. If Xerath does not fire the spell' half the Mana cost is refunded.                      damage = new float[] { 80' 120' 160' 200' 240 }[spellLevel] + 0.75f * player.TotalMagicalDamage();                      break;                    case SpellSlot.W:                        // Xerath calls down a blast of arcane energy' dealing 60/90/120/150/180 (+0.6) magic damage to all enemies within the target area' slowing them by 10% for 2.5 seconds.                      // Enemies in the center of the blast take undefined (+undefined) magic damage and are slowed by 60/65/70/75/80%. This slow decays rapidly                      damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                      break;                    case SpellSlot.E:                        // Xerath fires an orb of raw magic. The first enemy hit takes 80/110/140/170/200 (+0.45) magic damage and is stunned for between 0.75 and 2 seconds.                      // The stun duration lengthens based on how far the orb travels.                      damage = new float[] { 80' 110' 140' 170' 200 }[spellLevel] + 0.45f * player.TotalMagicalDamage();                      break;                    case SpellSlot.R:                        // Xerath ascends to his true form' becoming rooted in place and gaining 3 Arcane Barrages. This magic artillery deals 190/245/300 (+0.43) magic damage to all enemies hit.                      damage = new float[] { 190' 245' 300 }[spellLevel] + 0.43f * player.TotalMagicalDamage();                      break;              }
Magic Number,Xerath,Damages,C:\repos\Hellsing_LeagueSharp\Xerath\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        // First cast: Xerath charges Arcanopulse' gradually decreasing his Movement Speed while increasing the spell's range.                      // Second cast: Xerath fires Arcanopulse' dealing 80/120/160/200/240 (+0.75) magic damage to all enemies in a line.                      // While charging Arcanopulse' Xerath cannot attack or cast other spells. If Xerath does not fire the spell' half the Mana cost is refunded.                      damage = new float[] { 80' 120' 160' 200' 240 }[spellLevel] + 0.75f * player.TotalMagicalDamage();                      break;                    case SpellSlot.W:                        // Xerath calls down a blast of arcane energy' dealing 60/90/120/150/180 (+0.6) magic damage to all enemies within the target area' slowing them by 10% for 2.5 seconds.                      // Enemies in the center of the blast take undefined (+undefined) magic damage and are slowed by 60/65/70/75/80%. This slow decays rapidly                      damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                      break;                    case SpellSlot.E:                        // Xerath fires an orb of raw magic. The first enemy hit takes 80/110/140/170/200 (+0.45) magic damage and is stunned for between 0.75 and 2 seconds.                      // The stun duration lengthens based on how far the orb travels.                      damage = new float[] { 80' 110' 140' 170' 200 }[spellLevel] + 0.45f * player.TotalMagicalDamage();                      break;                    case SpellSlot.R:                        // Xerath ascends to his true form' becoming rooted in place and gaining 3 Arcane Barrages. This magic artillery deals 190/245/300 (+0.43) magic damage to all enemies hit.                      damage = new float[] { 190' 245' 300 }[spellLevel] + 0.43f * player.TotalMagicalDamage();                      break;              }
Magic Number,Xerath,Damages,C:\repos\Hellsing_LeagueSharp\Xerath\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        // First cast: Xerath charges Arcanopulse' gradually decreasing his Movement Speed while increasing the spell's range.                      // Second cast: Xerath fires Arcanopulse' dealing 80/120/160/200/240 (+0.75) magic damage to all enemies in a line.                      // While charging Arcanopulse' Xerath cannot attack or cast other spells. If Xerath does not fire the spell' half the Mana cost is refunded.                      damage = new float[] { 80' 120' 160' 200' 240 }[spellLevel] + 0.75f * player.TotalMagicalDamage();                      break;                    case SpellSlot.W:                        // Xerath calls down a blast of arcane energy' dealing 60/90/120/150/180 (+0.6) magic damage to all enemies within the target area' slowing them by 10% for 2.5 seconds.                      // Enemies in the center of the blast take undefined (+undefined) magic damage and are slowed by 60/65/70/75/80%. This slow decays rapidly                      damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                      break;                    case SpellSlot.E:                        // Xerath fires an orb of raw magic. The first enemy hit takes 80/110/140/170/200 (+0.45) magic damage and is stunned for between 0.75 and 2 seconds.                      // The stun duration lengthens based on how far the orb travels.                      damage = new float[] { 80' 110' 140' 170' 200 }[spellLevel] + 0.45f * player.TotalMagicalDamage();                      break;                    case SpellSlot.R:                        // Xerath ascends to his true form' becoming rooted in place and gaining 3 Arcane Barrages. This magic artillery deals 190/245/300 (+0.43) magic damage to all enemies hit.                      damage = new float[] { 190' 245' 300 }[spellLevel] + 0.43f * player.TotalMagicalDamage();                      break;              }
Magic Number,Xerath,Damages,C:\repos\Hellsing_LeagueSharp\Xerath\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        // First cast: Xerath charges Arcanopulse' gradually decreasing his Movement Speed while increasing the spell's range.                      // Second cast: Xerath fires Arcanopulse' dealing 80/120/160/200/240 (+0.75) magic damage to all enemies in a line.                      // While charging Arcanopulse' Xerath cannot attack or cast other spells. If Xerath does not fire the spell' half the Mana cost is refunded.                      damage = new float[] { 80' 120' 160' 200' 240 }[spellLevel] + 0.75f * player.TotalMagicalDamage();                      break;                    case SpellSlot.W:                        // Xerath calls down a blast of arcane energy' dealing 60/90/120/150/180 (+0.6) magic damage to all enemies within the target area' slowing them by 10% for 2.5 seconds.                      // Enemies in the center of the blast take undefined (+undefined) magic damage and are slowed by 60/65/70/75/80%. This slow decays rapidly                      damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                      break;                    case SpellSlot.E:                        // Xerath fires an orb of raw magic. The first enemy hit takes 80/110/140/170/200 (+0.45) magic damage and is stunned for between 0.75 and 2 seconds.                      // The stun duration lengthens based on how far the orb travels.                      damage = new float[] { 80' 110' 140' 170' 200 }[spellLevel] + 0.45f * player.TotalMagicalDamage();                      break;                    case SpellSlot.R:                        // Xerath ascends to his true form' becoming rooted in place and gaining 3 Arcane Barrages. This magic artillery deals 190/245/300 (+0.43) magic damage to all enemies hit.                      damage = new float[] { 190' 245' 300 }[spellLevel] + 0.43f * player.TotalMagicalDamage();                      break;              }
Magic Number,Xerath,Damages,C:\repos\Hellsing_LeagueSharp\Xerath\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        // First cast: Xerath charges Arcanopulse' gradually decreasing his Movement Speed while increasing the spell's range.                      // Second cast: Xerath fires Arcanopulse' dealing 80/120/160/200/240 (+0.75) magic damage to all enemies in a line.                      // While charging Arcanopulse' Xerath cannot attack or cast other spells. If Xerath does not fire the spell' half the Mana cost is refunded.                      damage = new float[] { 80' 120' 160' 200' 240 }[spellLevel] + 0.75f * player.TotalMagicalDamage();                      break;                    case SpellSlot.W:                        // Xerath calls down a blast of arcane energy' dealing 60/90/120/150/180 (+0.6) magic damage to all enemies within the target area' slowing them by 10% for 2.5 seconds.                      // Enemies in the center of the blast take undefined (+undefined) magic damage and are slowed by 60/65/70/75/80%. This slow decays rapidly                      damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                      break;                    case SpellSlot.E:                        // Xerath fires an orb of raw magic. The first enemy hit takes 80/110/140/170/200 (+0.45) magic damage and is stunned for between 0.75 and 2 seconds.                      // The stun duration lengthens based on how far the orb travels.                      damage = new float[] { 80' 110' 140' 170' 200 }[spellLevel] + 0.45f * player.TotalMagicalDamage();                      break;                    case SpellSlot.R:                        // Xerath ascends to his true form' becoming rooted in place and gaining 3 Arcane Barrages. This magic artillery deals 190/245/300 (+0.43) magic damage to all enemies hit.                      damage = new float[] { 190' 245' 300 }[spellLevel] + 0.43f * player.TotalMagicalDamage();                      break;              }
Magic Number,Xerath,Damages,C:\repos\Hellsing_LeagueSharp\Xerath\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        // First cast: Xerath charges Arcanopulse' gradually decreasing his Movement Speed while increasing the spell's range.                      // Second cast: Xerath fires Arcanopulse' dealing 80/120/160/200/240 (+0.75) magic damage to all enemies in a line.                      // While charging Arcanopulse' Xerath cannot attack or cast other spells. If Xerath does not fire the spell' half the Mana cost is refunded.                      damage = new float[] { 80' 120' 160' 200' 240 }[spellLevel] + 0.75f * player.TotalMagicalDamage();                      break;                    case SpellSlot.W:                        // Xerath calls down a blast of arcane energy' dealing 60/90/120/150/180 (+0.6) magic damage to all enemies within the target area' slowing them by 10% for 2.5 seconds.                      // Enemies in the center of the blast take undefined (+undefined) magic damage and are slowed by 60/65/70/75/80%. This slow decays rapidly                      damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                      break;                    case SpellSlot.E:                        // Xerath fires an orb of raw magic. The first enemy hit takes 80/110/140/170/200 (+0.45) magic damage and is stunned for between 0.75 and 2 seconds.                      // The stun duration lengthens based on how far the orb travels.                      damage = new float[] { 80' 110' 140' 170' 200 }[spellLevel] + 0.45f * player.TotalMagicalDamage();                      break;                    case SpellSlot.R:                        // Xerath ascends to his true form' becoming rooted in place and gaining 3 Arcane Barrages. This magic artillery deals 190/245/300 (+0.43) magic damage to all enemies hit.                      damage = new float[] { 190' 245' 300 }[spellLevel] + 0.43f * player.TotalMagicalDamage();                      break;              }
Magic Number,Xerath,Damages,C:\repos\Hellsing_LeagueSharp\Xerath\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        // First cast: Xerath charges Arcanopulse' gradually decreasing his Movement Speed while increasing the spell's range.                      // Second cast: Xerath fires Arcanopulse' dealing 80/120/160/200/240 (+0.75) magic damage to all enemies in a line.                      // While charging Arcanopulse' Xerath cannot attack or cast other spells. If Xerath does not fire the spell' half the Mana cost is refunded.                      damage = new float[] { 80' 120' 160' 200' 240 }[spellLevel] + 0.75f * player.TotalMagicalDamage();                      break;                    case SpellSlot.W:                        // Xerath calls down a blast of arcane energy' dealing 60/90/120/150/180 (+0.6) magic damage to all enemies within the target area' slowing them by 10% for 2.5 seconds.                      // Enemies in the center of the blast take undefined (+undefined) magic damage and are slowed by 60/65/70/75/80%. This slow decays rapidly                      damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                      break;                    case SpellSlot.E:                        // Xerath fires an orb of raw magic. The first enemy hit takes 80/110/140/170/200 (+0.45) magic damage and is stunned for between 0.75 and 2 seconds.                      // The stun duration lengthens based on how far the orb travels.                      damage = new float[] { 80' 110' 140' 170' 200 }[spellLevel] + 0.45f * player.TotalMagicalDamage();                      break;                    case SpellSlot.R:                        // Xerath ascends to his true form' becoming rooted in place and gaining 3 Arcane Barrages. This magic artillery deals 190/245/300 (+0.43) magic damage to all enemies hit.                      damage = new float[] { 190' 245' 300 }[spellLevel] + 0.43f * player.TotalMagicalDamage();                      break;              }
Magic Number,Xerath,Damages,C:\repos\Hellsing_LeagueSharp\Xerath\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        // First cast: Xerath charges Arcanopulse' gradually decreasing his Movement Speed while increasing the spell's range.                      // Second cast: Xerath fires Arcanopulse' dealing 80/120/160/200/240 (+0.75) magic damage to all enemies in a line.                      // While charging Arcanopulse' Xerath cannot attack or cast other spells. If Xerath does not fire the spell' half the Mana cost is refunded.                      damage = new float[] { 80' 120' 160' 200' 240 }[spellLevel] + 0.75f * player.TotalMagicalDamage();                      break;                    case SpellSlot.W:                        // Xerath calls down a blast of arcane energy' dealing 60/90/120/150/180 (+0.6) magic damage to all enemies within the target area' slowing them by 10% for 2.5 seconds.                      // Enemies in the center of the blast take undefined (+undefined) magic damage and are slowed by 60/65/70/75/80%. This slow decays rapidly                      damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                      break;                    case SpellSlot.E:                        // Xerath fires an orb of raw magic. The first enemy hit takes 80/110/140/170/200 (+0.45) magic damage and is stunned for between 0.75 and 2 seconds.                      // The stun duration lengthens based on how far the orb travels.                      damage = new float[] { 80' 110' 140' 170' 200 }[spellLevel] + 0.45f * player.TotalMagicalDamage();                      break;                    case SpellSlot.R:                        // Xerath ascends to his true form' becoming rooted in place and gaining 3 Arcane Barrages. This magic artillery deals 190/245/300 (+0.43) magic damage to all enemies hit.                      damage = new float[] { 190' 245' 300 }[spellLevel] + 0.43f * player.TotalMagicalDamage();                      break;              }
Magic Number,Xerath,Damages,C:\repos\Hellsing_LeagueSharp\Xerath\Damages.cs,GetRealDamage,The following statement contains a magic number: return (float)player.CalcDamage(target' damageType' damage) + extraDamage - 20;
Magic Number,Xerath,Program,C:\repos\Hellsing_LeagueSharp\Xerath\Program.cs,Drawing_OnEndScene,The following statement contains a magic number: if (Config.CircleLinks["drawRangeR"].Value.Active && SpellManager.R.Level > 0)                  Utility.DrawCircle(player.Position' SpellManager.R.Range' Config.CircleLinks["drawRangeR"].Value.Color' 5' 30' true);
Magic Number,Xerath,Program,C:\repos\Hellsing_LeagueSharp\Xerath\Program.cs,Drawing_OnEndScene,The following statement contains a magic number: if (Config.CircleLinks["drawRangeR"].Value.Active && SpellManager.R.Level > 0)                  Utility.DrawCircle(player.Position' SpellManager.R.Range' Config.CircleLinks["drawRangeR"].Value.Color' 5' 30' true);
Magic Number,Xerath,SpellManager,C:\repos\Hellsing_LeagueSharp\Xerath\SpellManager.cs,Initialize,The following statement contains a magic number: Q = new Spell(SpellSlot.Q' 1550);
Magic Number,Xerath,SpellManager,C:\repos\Hellsing_LeagueSharp\Xerath\SpellManager.cs,Initialize,The following statement contains a magic number: W = new Spell(SpellSlot.W' 1100);
Magic Number,Xerath,SpellManager,C:\repos\Hellsing_LeagueSharp\Xerath\SpellManager.cs,Initialize,The following statement contains a magic number: E = new Spell(SpellSlot.E' 1050);
Magic Number,Xerath,SpellManager,C:\repos\Hellsing_LeagueSharp\Xerath\SpellManager.cs,Initialize,The following statement contains a magic number: R = new Spell(SpellSlot.R' 3200);
Magic Number,Xerath,SpellManager,C:\repos\Hellsing_LeagueSharp\Xerath\SpellManager.cs,Initialize,The following statement contains a magic number: Q.SetSkillshot(0.6f' 100' float.MaxValue' false' SkillshotType.SkillshotLine);
Magic Number,Xerath,SpellManager,C:\repos\Hellsing_LeagueSharp\Xerath\SpellManager.cs,Initialize,The following statement contains a magic number: W.SetSkillshot(0.7f' 150' float.MaxValue' false' SkillshotType.SkillshotCircle);
Magic Number,Xerath,SpellManager,C:\repos\Hellsing_LeagueSharp\Xerath\SpellManager.cs,Initialize,The following statement contains a magic number: E.SetSkillshot(0.25f' 70' 1600' true' SkillshotType.SkillshotLine);
Magic Number,Xerath,SpellManager,C:\repos\Hellsing_LeagueSharp\Xerath\SpellManager.cs,Initialize,The following statement contains a magic number: E.SetSkillshot(0.25f' 70' 1600' true' SkillshotType.SkillshotLine);
Magic Number,Xerath,SpellManager,C:\repos\Hellsing_LeagueSharp\Xerath\SpellManager.cs,Initialize,The following statement contains a magic number: R.SetSkillshot(0.6f' 120' float.MaxValue' false' SkillshotType.SkillshotCircle);
Magic Number,Xerath,SpellManager,C:\repos\Hellsing_LeagueSharp\Xerath\SpellManager.cs,Initialize,The following statement contains a magic number: Q.SetCharged("XerathArcanopulseChargeUp"' "XerathArcanopulseChargeUp"' 750' 1550' 1.5f);
Magic Number,Xerath,SpellManager,C:\repos\Hellsing_LeagueSharp\Xerath\SpellManager.cs,Initialize,The following statement contains a magic number: Q.SetCharged("XerathArcanopulseChargeUp"' "XerathArcanopulseChargeUp"' 750' 1550' 1.5f);
Magic Number,Xerath,SpellManager,C:\repos\Hellsing_LeagueSharp\Xerath\SpellManager.cs,Game_OnWndProc,The following statement contains a magic number: if (IsCastingUlt && args.Msg == (uint)WindowsMessages.WM_KEYUP && args.WParam == Config.KeyLinks["ultSettingsKeyPress"].Value.Key)              {                  // Only handle the tap key if the mode is set to tap key                  switch (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex)                  {                      // Auto                      case 3:                      // Near mouse                      case 4:                            // Tap key has been pressed                          if (OnTapKeyPressed != null)                              OnTapKeyPressed();                          TapKeyPressed = true;                          break;                  }              }
Magic Number,Xerath,SpellManager,C:\repos\Hellsing_LeagueSharp\Xerath\SpellManager.cs,Game_OnWndProc,The following statement contains a magic number: if (IsCastingUlt && args.Msg == (uint)WindowsMessages.WM_KEYUP && args.WParam == Config.KeyLinks["ultSettingsKeyPress"].Value.Key)              {                  // Only handle the tap key if the mode is set to tap key                  switch (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex)                  {                      // Auto                      case 3:                      // Near mouse                      case 4:                            // Tap key has been pressed                          if (OnTapKeyPressed != null)                              OnTapKeyPressed();                          TapKeyPressed = true;                          break;                  }              }
Magic Number,Xerath,SpellManager,C:\repos\Hellsing_LeagueSharp\Xerath\SpellManager.cs,Game_OnGameUpdate,The following statement contains a magic number: if (previousLevel < R.Level)              {                  R.Range = 2000 + 1200 * R.Level;                  previousLevel = R.Level;              }
Magic Number,Xerath,SpellManager,C:\repos\Hellsing_LeagueSharp\Xerath\SpellManager.cs,Game_OnGameUpdate,The following statement contains a magic number: if (previousLevel < R.Level)              {                  R.Range = 2000 + 1200 * R.Level;                  previousLevel = R.Level;              }
Magic Number,Xerath,SpellManager,C:\repos\Hellsing_LeagueSharp\Xerath\SpellManager.cs,Obj_AI_Hero_OnProcessSpellCast,The following statement contains a magic number: if (sender.IsMe)              {                  // Ult activation                  if (args.SData.Name == "XerathLocusOfPower2")                  {                      LastChargePosition = Vector3.Zero;                      LastChargeTime = 0;                      ChargesRemaining = 3;                      TapKeyPressed = false;                  }                  // Ult charge usage                  else if (args.SData.Name == "xerathlocuspulse")                  {                      LastChargePosition = args.End;                      LastChargeTime = Environment.TickCount;                      ChargesRemaining--;                      TapKeyPressed = false;                  }              }
Missing Default,Xerath,ActiveModes,C:\repos\Hellsing_LeagueSharp\Xerath\ActiveModes.cs,OnPermaActive,The following switch statement is missing a default case: switch (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex)                  {                      #region Smart targetting & Obviously scripting & On key press (auto)                        // Smart targetting                      case 0:                      // Obviously scripting                      case 1:                      // On key press (auto)                      case 3:                            // Only for tap key                          if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 3 && !SpellManager.TapKeyPressed)                              break;                            // Get first time target                          if (lastUltTarget == null || SpellManager.ChargesRemaining == 3)                          {                              var target = R.GetTarget();                              if (target != null && R.Cast(target) == Spell.CastStates.SuccessfullyCasted)                              {                                  lastUltTarget = target;                                  targetWillDie = target.Health < R.GetRealDamage(target);                              }                          }                          // Next target                          else if (SpellManager.ChargesRemaining < 3)                          {                              // Shoot the same target again if in range                              if ((!targetWillDie || Environment.TickCount - SpellManager.LastChargeTime > R.Delay * 1000 + 100) && lastUltTarget.IsValidTarget(R.Range))                              {                                  if (R.Cast(lastUltTarget) == Spell.CastStates.SuccessfullyCasted)                                  {                                      targetWillDie = lastUltTarget.Health < R.GetRealDamage(lastUltTarget);                                  }                              }                              // Target died or is out of range' shoot new target                              else                              {                                  // Check if last target is still alive                                  if (!lastUltTarget.IsDead && ItemManager.UseRevealingOrb(lastUltTarget.ServerPosition))                                  {                                      orbUsedTime = Environment.TickCount;                                      break;                                  }                                    // Check if orb was used                                  if (Environment.TickCount - orbUsedTime < 250)                                      break;                                    // Get a new target                                  var target = R.GetTarget(new[] { lastUltTarget });                                  if (target != null)                                  {                                      // Only applies if smart targetting is enabled                                      if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 0)                                      {                                          // Calculate smart target change time                                          var waitTime = Math.Max(1500' target.Distance(SpellManager.LastChargePosition' false)) + R.Delay;                                          if (Environment.TickCount - SpellManager.LastChargeTime + waitTime < 0)                                              break;                                      }                                        if (R.Cast(target) == Spell.CastStates.SuccessfullyCasted)                                      {                                          lastUltTarget = target;                                          targetWillDie = target.Health < R.GetRealDamage(target);                                      }                                  }                                                              }                          }                            break;                        #endregion                        #region Near mouse & On key press (near mouse)                        // Near mouse                      case 2:                      // On key press (near mouse)                      case 4:                            // Only for tap key                          if (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex == 4 && !SpellManager.TapKeyPressed)                              break;                            // Get all enemy heroes in a distance of 500 from the mouse                          var targets = ObjectManager.Get<Obj_AI_Hero>().Where(h => h.IsValidTarget(R.Range) && h.Distance(Game.CursorPos' true) < 500 * 500);                          var objAiHeroes = targets as Obj_AI_Hero[] ?? targets.ToArray();                          if (objAiHeroes.Any())                          {                              // Get a killable target                              var killable = objAiHeroes.Where(t => t.Health < R.GetRealDamage(t) * SpellManager.ChargesRemaining).OrderByDescending(t => R.GetRealDamage(t)).FirstOrDefault();                              if (killable != null)                              {                                  // Shoot on the killable target                                  R.Cast(killable);                              }                              else                              {                                  // Get the best target out of the found targets                                  var target = objAiHeroes.OrderByDescending(t => R.GetRealDamage(t)).FirstOrDefault();                                    // Shoot                                  R.Cast(target);                              }                          }                            break;                        #endregion                  }
Missing Default,Xerath,Damages,C:\repos\Hellsing_LeagueSharp\Xerath\Damages.cs,GetRealDamage,The following switch statement is missing a default case: switch (slot)              {                  case SpellSlot.Q:                        // First cast: Xerath charges Arcanopulse' gradually decreasing his Movement Speed while increasing the spell's range.                      // Second cast: Xerath fires Arcanopulse' dealing 80/120/160/200/240 (+0.75) magic damage to all enemies in a line.                      // While charging Arcanopulse' Xerath cannot attack or cast other spells. If Xerath does not fire the spell' half the Mana cost is refunded.                      damage = new float[] { 80' 120' 160' 200' 240 }[spellLevel] + 0.75f * player.TotalMagicalDamage();                      break;                    case SpellSlot.W:                        // Xerath calls down a blast of arcane energy' dealing 60/90/120/150/180 (+0.6) magic damage to all enemies within the target area' slowing them by 10% for 2.5 seconds.                      // Enemies in the center of the blast take undefined (+undefined) magic damage and are slowed by 60/65/70/75/80%. This slow decays rapidly                      damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                      break;                    case SpellSlot.E:                        // Xerath fires an orb of raw magic. The first enemy hit takes 80/110/140/170/200 (+0.45) magic damage and is stunned for between 0.75 and 2 seconds.                      // The stun duration lengthens based on how far the orb travels.                      damage = new float[] { 80' 110' 140' 170' 200 }[spellLevel] + 0.45f * player.TotalMagicalDamage();                      break;                    case SpellSlot.R:                        // Xerath ascends to his true form' becoming rooted in place and gaining 3 Arcane Barrages. This magic artillery deals 190/245/300 (+0.43) magic damage to all enemies hit.                      damage = new float[] { 190' 245' 300 }[spellLevel] + 0.43f * player.TotalMagicalDamage();                      break;              }
Missing Default,Xerath,SpellManager,C:\repos\Hellsing_LeagueSharp\Xerath\SpellManager.cs,Game_OnWndProc,The following switch statement is missing a default case: switch (Config.StringListLinks["ultSettingsMode"].Value.SelectedIndex)                  {                      // Auto                      case 3:                      // Near mouse                      case 4:                            // Tap key has been pressed                          if (OnTapKeyPressed != null)                              OnTapKeyPressed();                          TapKeyPressed = true;                          break;                  }
