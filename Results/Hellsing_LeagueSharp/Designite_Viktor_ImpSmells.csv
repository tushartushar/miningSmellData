Implementation smell,Namespace,Class,File,Method,Description
Long Method,Viktor,Program,C:\repos\Hellsing_LeagueSharp\Viktor\Program.cs,PredictCastE,The method has 136 lines of code.
Complex Method,Viktor,Program,C:\repos\Hellsing_LeagueSharp\Viktor\Program.cs,PredictCastE,Cyclomatic complexity of the method is 14
Long Statement,Viktor,Program,C:\repos\Hellsing_LeagueSharp\Viktor\Program.cs,PredictCastMinionE,The length of the statement  "                var farmLocation = MinionManager.GetBestLineFarmLocation((from mnion in MinionManager.GetMinions(minion.Position' lengthE) select mnion.Position.To2D()).ToList<Vector2>()' E.Width' lengthE); " is 190.
Long Statement,Viktor,Program,C:\repos\Hellsing_LeagueSharp\Viktor\Program.cs,PredictCastMinionE,The length of the statement  "            var farmLocation = MinionManager.GetBestLineFarmLocation(MinionManager.GetMinionsPredictedPositions(MinionManager.GetMinions(fromPosition.To3D()' lengthE)' E.Delay' E.Width' speedE' fromPosition.To3D()' lengthE' false' SkillshotType.SkillshotLine)' E.Width' lengthE); " is 267.
Long Statement,Viktor,Program,C:\repos\Hellsing_LeagueSharp\Viktor\Program.cs,PredictCastE,The length of the statement  "            var nearChamps = (from champ in ObjectManager.Get<Obj_AI_Hero>() where champ.IsValidTarget(maxRangeE) && target != champ select champ).ToList(); " is 144.
Long Statement,Viktor,Program,C:\repos\Hellsing_LeagueSharp\Viktor\Program.cs,PredictCastE,The length of the statement  "                        if (prediction.Hitchance == HitChance.High && Vector2.DistanceSquared(pos1.To2D()' prediction.CastPosition.To2D()) < (E.Range * E.Range) * 0.8) " is 143.
Long Statement,Viktor,Program,C:\repos\Hellsing_LeagueSharp\Viktor\Program.cs,PredictCastE,The length of the statement  "                var targets = (from champ in nearChamps where Vector2.DistanceSquared(champ.ServerPosition.To2D()' startPoint.To2D()) < startPointRadius * startPointRadius && Vector2.DistanceSquared(player.Position.To2D()' champ.ServerPosition.To2D()) < rangeE * rangeE select champ).ToList(); " is 277.
Long Statement,Viktor,Program,C:\repos\Hellsing_LeagueSharp\Viktor\Program.cs,PredictCastE,The length of the statement  "                    var minionTargets = (from minion in nearMinions where Vector2.DistanceSquared(minion.ServerPosition.To2D()' startPoint.To2D()) < startPointRadius * startPointRadius && Vector2.DistanceSquared(player.Position.To2D()' minion.ServerPosition.To2D()) < rangeE * rangeE select minion).ToList(); " is 288.
Long Statement,Viktor,Program,C:\repos\Hellsing_LeagueSharp\Viktor\Program.cs,Interrupter_OnPossibleToInterrupt,The length of the statement  "            if (boolLinks["miscInterrupt"].Value && spell.DangerLevel == InterruptableDangerLevel.High && R.IsInRange(unit.ServerPosition)) " is 127.
Long Statement,Viktor,Program,C:\repos\Hellsing_LeagueSharp\Viktor\Program.cs,SetupMenu,The length of the statement  "            ProcessLink("drawRangeEMax"' subMenu.AddLinkedCircle("E max range"' true' Color.FromArgb(150' Color.OrangeRed)' maxRangeE)); " is 124.
Magic Number,Viktor,Program,C:\repos\Hellsing_LeagueSharp\Viktor\Program.cs,Game_OnGameLoad,The following statement contains a magic number: Q = new Spell(SpellSlot.Q' 600);
Magic Number,Viktor,Program,C:\repos\Hellsing_LeagueSharp\Viktor\Program.cs,Game_OnGameLoad,The following statement contains a magic number: W = new Spell(SpellSlot.W' 700);
Magic Number,Viktor,Program,C:\repos\Hellsing_LeagueSharp\Viktor\Program.cs,Game_OnGameLoad,The following statement contains a magic number: R = new Spell(SpellSlot.R' 700);
Magic Number,Viktor,Program,C:\repos\Hellsing_LeagueSharp\Viktor\Program.cs,Game_OnGameLoad,The following statement contains a magic number: Q.SetTargetted(0.25f' 2000);
Magic Number,Viktor,Program,C:\repos\Hellsing_LeagueSharp\Viktor\Program.cs,Game_OnGameLoad,The following statement contains a magic number: W.SetSkillshot(0.25f' 300' float.MaxValue' false' SkillshotType.SkillshotCircle);
Magic Number,Viktor,Program,C:\repos\Hellsing_LeagueSharp\Viktor\Program.cs,Game_OnGameLoad,The following statement contains a magic number: E.SetSkillshot(0' 90' speedE' false' SkillshotType.SkillshotLine);
Magic Number,Viktor,Program,C:\repos\Hellsing_LeagueSharp\Viktor\Program.cs,OnHarass,The following statement contains a magic number: if ((player.Mana / player.MaxMana) * 100 < sliderLinks["harassMana"].Value.Value)                  return;
Magic Number,Viktor,Program,C:\repos\Hellsing_LeagueSharp\Viktor\Program.cs,OnWaveClear,The following statement contains a magic number: if ((player.Mana / player.MaxMana) * 100 < sliderLinks["waveMana"].Value.Value)                  return;
Magic Number,Viktor,Program,C:\repos\Hellsing_LeagueSharp\Viktor\Program.cs,OnWaveClear,The following statement contains a magic number: if (useQ)              {                  foreach (var minion in MinionManager.GetMinions(player.Position' player.AttackRange))                  {                      if (Q.IsKillable(minion) && player.GetAutoAttackDamage(minion) * 2 < minion.Health)                      {                          Q.Cast(minion);                          break;                      }                  }              }
Magic Number,Viktor,Program,C:\repos\Hellsing_LeagueSharp\Viktor\Program.cs,PredictCastE,The following statement contains a magic number: if (inRange)              {                  // Get prediction reduced speed' adjusted sourcePosition                  E.Speed = speedE * 0.9f;                  E.From = target.ServerPosition + (Vector3.Normalize(player.Position - target.ServerPosition) * (lengthE * 0.1f));                  prediction = E.GetPrediction(target);                  E.From = player.Position;                    // Prediction in range' go on                  if (prediction.CastPosition.Distance(player.Position) < E.Range)                      pos1 = prediction.CastPosition;                  // Prediction not in range' use exact position                  else                  {                      pos1 = target.ServerPosition;                      E.Speed = speedE;                  }                    // Set new sourcePosition                  E.From = pos1;                  E.RangeCheckFrom = pos1;                    // Set new range                  E.Range = lengthE;                    // Get next target                  if (nearChamps.Count > 0)                  {                      // Get best champion around                      var closeToPrediction = new List<Obj_AI_Hero>();                      foreach (var enemy in nearChamps)                      {                          // Get prediction                          prediction = E.GetPrediction(enemy);                          // Validate target                          if (prediction.Hitchance == HitChance.High && Vector2.DistanceSquared(pos1.To2D()' prediction.CastPosition.To2D()) < (E.Range * E.Range) * 0.8)                              closeToPrediction.Add(enemy);                      }                        // Champ found                      if (closeToPrediction.Count > 0)                      {                          // Sort table by health DEC                          if (closeToPrediction.Count > 1)                              closeToPrediction.Sort((enemy1' enemy2) => enemy2.Health.CompareTo(enemy1.Health));                            // Set destination                          prediction = E.GetPrediction(closeToPrediction[0]);                          pos2 = prediction.CastPosition;                            // Cast spell                          CastE(pos1' pos2);                          spellCasted = true;                      }                  }                    // Spell not casted                  if (!spellCasted)                      // Try casting on minion                      if (!PredictCastMinionE(pos1.To2D()))                          // Cast it directly                          CastE(pos1' E.GetPrediction(target).CastPosition);                    // Reset spell                  E.Speed = speedE;                  E.Range = rangeE;                  E.From = player.Position;                  E.RangeCheckFrom = player.Position;              }                // Main target in extended range              else if (longRange)              {                  // Radius of the start point to search enemies in                  float startPointRadius = 150;                    // Get initial start point at the border of cast radius                  Vector3 startPoint = player.Position + Vector3.Normalize(target.ServerPosition - player.Position) * rangeE;                    // Potential start from postitions                  var targets = (from champ in nearChamps where Vector2.DistanceSquared(champ.ServerPosition.To2D()' startPoint.To2D()) < startPointRadius * startPointRadius && Vector2.DistanceSquared(player.Position.To2D()' champ.ServerPosition.To2D()) < rangeE * rangeE select champ).ToList();                  if (targets.Count > 0)                  {                      // Sort table by health DEC                      if (targets.Count > 1)                          targets.Sort((enemy1' enemy2) => enemy2.Health.CompareTo(enemy1.Health));                        // Set target                      pos1 = targets[0].ServerPosition;                  }                  else                  {                      var minionTargets = (from minion in nearMinions where Vector2.DistanceSquared(minion.ServerPosition.To2D()' startPoint.To2D()) < startPointRadius * startPointRadius && Vector2.DistanceSquared(player.Position.To2D()' minion.ServerPosition.To2D()) < rangeE * rangeE select minion).ToList();                      if (minionTargets.Count > 0)                      {                          // Sort table by health DEC                          if (minionTargets.Count > 1)                              minionTargets.Sort((enemy1' enemy2) => enemy2.Health.CompareTo(enemy1.Health));                            // Set target                          pos1 = minionTargets[0].ServerPosition;                      }                      else                          // Just the regular' calculated start pos                          pos1 = startPoint;                  }                    // Predict target position                  E.From = pos1;                  E.Range = lengthE;                  E.RangeCheckFrom = pos1;                  prediction = E.GetPrediction(target);                    // Cast the E                  if (prediction.Hitchance == HitChance.High)                      CastE(pos1' prediction.CastPosition);                    // Reset spell                  E.Range = rangeE;                  E.From = player.Position;                  E.RangeCheckFrom = player.Position;              }
Magic Number,Viktor,Program,C:\repos\Hellsing_LeagueSharp\Viktor\Program.cs,PredictCastE,The following statement contains a magic number: if (inRange)              {                  // Get prediction reduced speed' adjusted sourcePosition                  E.Speed = speedE * 0.9f;                  E.From = target.ServerPosition + (Vector3.Normalize(player.Position - target.ServerPosition) * (lengthE * 0.1f));                  prediction = E.GetPrediction(target);                  E.From = player.Position;                    // Prediction in range' go on                  if (prediction.CastPosition.Distance(player.Position) < E.Range)                      pos1 = prediction.CastPosition;                  // Prediction not in range' use exact position                  else                  {                      pos1 = target.ServerPosition;                      E.Speed = speedE;                  }                    // Set new sourcePosition                  E.From = pos1;                  E.RangeCheckFrom = pos1;                    // Set new range                  E.Range = lengthE;                    // Get next target                  if (nearChamps.Count > 0)                  {                      // Get best champion around                      var closeToPrediction = new List<Obj_AI_Hero>();                      foreach (var enemy in nearChamps)                      {                          // Get prediction                          prediction = E.GetPrediction(enemy);                          // Validate target                          if (prediction.Hitchance == HitChance.High && Vector2.DistanceSquared(pos1.To2D()' prediction.CastPosition.To2D()) < (E.Range * E.Range) * 0.8)                              closeToPrediction.Add(enemy);                      }                        // Champ found                      if (closeToPrediction.Count > 0)                      {                          // Sort table by health DEC                          if (closeToPrediction.Count > 1)                              closeToPrediction.Sort((enemy1' enemy2) => enemy2.Health.CompareTo(enemy1.Health));                            // Set destination                          prediction = E.GetPrediction(closeToPrediction[0]);                          pos2 = prediction.CastPosition;                            // Cast spell                          CastE(pos1' pos2);                          spellCasted = true;                      }                  }                    // Spell not casted                  if (!spellCasted)                      // Try casting on minion                      if (!PredictCastMinionE(pos1.To2D()))                          // Cast it directly                          CastE(pos1' E.GetPrediction(target).CastPosition);                    // Reset spell                  E.Speed = speedE;                  E.Range = rangeE;                  E.From = player.Position;                  E.RangeCheckFrom = player.Position;              }                // Main target in extended range              else if (longRange)              {                  // Radius of the start point to search enemies in                  float startPointRadius = 150;                    // Get initial start point at the border of cast radius                  Vector3 startPoint = player.Position + Vector3.Normalize(target.ServerPosition - player.Position) * rangeE;                    // Potential start from postitions                  var targets = (from champ in nearChamps where Vector2.DistanceSquared(champ.ServerPosition.To2D()' startPoint.To2D()) < startPointRadius * startPointRadius && Vector2.DistanceSquared(player.Position.To2D()' champ.ServerPosition.To2D()) < rangeE * rangeE select champ).ToList();                  if (targets.Count > 0)                  {                      // Sort table by health DEC                      if (targets.Count > 1)                          targets.Sort((enemy1' enemy2) => enemy2.Health.CompareTo(enemy1.Health));                        // Set target                      pos1 = targets[0].ServerPosition;                  }                  else                  {                      var minionTargets = (from minion in nearMinions where Vector2.DistanceSquared(minion.ServerPosition.To2D()' startPoint.To2D()) < startPointRadius * startPointRadius && Vector2.DistanceSquared(player.Position.To2D()' minion.ServerPosition.To2D()) < rangeE * rangeE select minion).ToList();                      if (minionTargets.Count > 0)                      {                          // Sort table by health DEC                          if (minionTargets.Count > 1)                              minionTargets.Sort((enemy1' enemy2) => enemy2.Health.CompareTo(enemy1.Health));                            // Set target                          pos1 = minionTargets[0].ServerPosition;                      }                      else                          // Just the regular' calculated start pos                          pos1 = startPoint;                  }                    // Predict target position                  E.From = pos1;                  E.Range = lengthE;                  E.RangeCheckFrom = pos1;                  prediction = E.GetPrediction(target);                    // Cast the E                  if (prediction.Hitchance == HitChance.High)                      CastE(pos1' prediction.CastPosition);                    // Reset spell                  E.Range = rangeE;                  E.From = player.Position;                  E.RangeCheckFrom = player.Position;              }
Magic Number,Viktor,Program,C:\repos\Hellsing_LeagueSharp\Viktor\Program.cs,SetupMenu,The following statement contains a magic number: ProcessLink("comboActive"' subMenu.AddLinkedKeyBind("Combo active"' 32' KeyBindType.Press));
Magic Number,Viktor,Program,C:\repos\Hellsing_LeagueSharp\Viktor\Program.cs,SetupMenu,The following statement contains a magic number: ProcessLink("harassMana"' subMenu.AddLinkedSlider("Mana usage in percent (%)"' 30));
Magic Number,Viktor,Program,C:\repos\Hellsing_LeagueSharp\Viktor\Program.cs,SetupMenu,The following statement contains a magic number: ProcessLink("waveNumE"' subMenu.AddLinkedSlider("Minions to hit with E"' 2' 1' 10));
Magic Number,Viktor,Program,C:\repos\Hellsing_LeagueSharp\Viktor\Program.cs,SetupMenu,The following statement contains a magic number: ProcessLink("waveNumE"' subMenu.AddLinkedSlider("Minions to hit with E"' 2' 1' 10));
Magic Number,Viktor,Program,C:\repos\Hellsing_LeagueSharp\Viktor\Program.cs,SetupMenu,The following statement contains a magic number: ProcessLink("waveMana"' subMenu.AddLinkedSlider("Mana usage in percent (%)"' 30));
Magic Number,Viktor,Program,C:\repos\Hellsing_LeagueSharp\Viktor\Program.cs,SetupMenu,The following statement contains a magic number: ProcessLink("drawRangeQ"' subMenu.AddLinkedCircle("Q range"' true' Color.FromArgb(150' Color.IndianRed)' Q.Range));
Magic Number,Viktor,Program,C:\repos\Hellsing_LeagueSharp\Viktor\Program.cs,SetupMenu,The following statement contains a magic number: ProcessLink("drawRangeW"' subMenu.AddLinkedCircle("W range"' true' Color.FromArgb(150' Color.IndianRed)' W.Range));
Magic Number,Viktor,Program,C:\repos\Hellsing_LeagueSharp\Viktor\Program.cs,SetupMenu,The following statement contains a magic number: ProcessLink("drawRangeE"' subMenu.AddLinkedCircle("E range"' false' Color.FromArgb(150' Color.DarkRed)' E.Range));
Magic Number,Viktor,Program,C:\repos\Hellsing_LeagueSharp\Viktor\Program.cs,SetupMenu,The following statement contains a magic number: ProcessLink("drawRangeEMax"' subMenu.AddLinkedCircle("E max range"' true' Color.FromArgb(150' Color.OrangeRed)' maxRangeE));
Magic Number,Viktor,Program,C:\repos\Hellsing_LeagueSharp\Viktor\Program.cs,SetupMenu,The following statement contains a magic number: ProcessLink("drawRangeR"' subMenu.AddLinkedCircle("R range"' false' Color.FromArgb(150' Color.Red)' R.Range));
