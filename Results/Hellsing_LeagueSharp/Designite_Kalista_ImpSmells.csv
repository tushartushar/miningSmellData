Implementation smell,Namespace,Class,File,Method,Description
Long Method,Kalista,ActiveModes,C:\repos\Hellsing_LeagueSharp\Kalista\ActiveModes.cs,OnWaveClear,The method has 108 lines of code.
Long Method,Kalista,ActiveModes,C:\repos\Hellsing_LeagueSharp\Kalista\ActiveModes.cs,OnFlee,The method has 129 lines of code.
Complex Method,Kalista,ActiveModes,C:\repos\Hellsing_LeagueSharp\Kalista\ActiveModes.cs,OnCombo,Cyclomatic complexity of the method is 8
Complex Method,Kalista,ActiveModes,C:\repos\Hellsing_LeagueSharp\Kalista\ActiveModes.cs,OnWaveClear,Cyclomatic complexity of the method is 20
Complex Method,Kalista,ActiveModes,C:\repos\Hellsing_LeagueSharp\Kalista\ActiveModes.cs,OnFlee,Cyclomatic complexity of the method is 18
Long Identifier,Kalista,Damages,C:\repos\Hellsing_LeagueSharp\Kalista\Damages.cs,,The length of the parameter rawRendDamagePerSpearMultiplier is 31.
Long Statement,Kalista,ActiveModes,C:\repos\Hellsing_LeagueSharp\Kalista\ActiveModes.cs,OnPermaActive,The length of the statement  "                    ObjectManager.Get<Obj_AI_Minion>().Any(m => m.IsValidTarget(E.Range) && (m.BaseSkinName.Contains("MinionSiege") || m.BaseSkinName.Contains("Dragon") || m.BaseSkinName.Contains("Baron")) && m.IsRendKillable())) " is 209.
Long Statement,Kalista,ActiveModes,C:\repos\Hellsing_LeagueSharp\Kalista\ActiveModes.cs,OnCombo,The length of the statement  "            var target = TargetSelector.GetTarget(Q.IsEnabledAndReady(Mode.COMBO) ? Q.Range : (E.Range * 1.2f)' TargetSelector.DamageType.Physical); " is 136.
Long Statement,Kalista,ActiveModes,C:\repos\Hellsing_LeagueSharp\Kalista\ActiveModes.cs,OnCombo,The length of the statement  "                if (E.IsEnabled(Mode.COMBO) && (E.Instance.State == SpellState.Ready || E.Instance.State == SpellState.Surpressed) && target.HasRendBuff()) " is 139.
Long Statement,Kalista,ActiveModes,C:\repos\Hellsing_LeagueSharp\Kalista\ActiveModes.cs,OnCombo,The length of the statement  "                            // Check if a minion can die with one AA and E. Also' the AA minion has be be behind the player direction for a further leap " is 124.
Long Statement,Kalista,ActiveModes,C:\repos\Hellsing_LeagueSharp\Kalista\ActiveModes.cs,OnCombo,The length of the statement  "                            var minion = VectorHelper.GetDashObjects(minions).Find(m => m.Health > player.GetAutoAttackDamage(m) && m.Health < player.GetAutoAttackDamage(m) + Damages.GetRendDamage(m' 1)); " is 176.
Long Statement,Kalista,ActiveModes,C:\repos\Hellsing_LeagueSharp\Kalista\ActiveModes.cs,OnWaveClear,The length of the statement  "                            var colliding = LeagueSharp.Common.Collision.GetCollision(new List<Vector3>() { player.ServerPosition.Extend(Prediction.GetPrediction(input).UnitPosition' Q.Range) }' input) " is 173.
Long Statement,Kalista,CustomDamageIndicator,C:\repos\Hellsing_LeagueSharp\Kalista\CustomDamageIndicator.cs,Drawing_OnDraw,The length of the statement  "                    var startPoint = new Vector2((int)(unit.HPBarPosition.X + BarOffset.X + damagePercentage * BAR_WIDTH)' (int)(unit.HPBarPosition.Y + BarOffset.Y) - 5); " is 150.
Long Statement,Kalista,CustomDamageIndicator,C:\repos\Hellsing_LeagueSharp\Kalista\CustomDamageIndicator.cs,Drawing_OnDraw,The length of the statement  "                    var endPoint = new Vector2((int)(unit.HPBarPosition.X + BarOffset.X + currentHealthPercentage * BAR_WIDTH) + 1' (int)(unit.HPBarPosition.Y + BarOffset.Y) - 5); " is 159.
Long Statement,Kalista,Damages,C:\repos\Hellsing_LeagueSharp\Kalista\Damages.cs,GetRendDamage,The length of the statement  "            return ((float)player.CalcDamage(target' Damage.DamageType.Physical' GetRawRendDamage(target' customStacks)) - Config.SliderLinks["spellReductionE"].Value.Value) * 0.98f; " is 170.
Long Statement,Kalista,Damages,C:\repos\Hellsing_LeagueSharp\Kalista\Damages.cs,GetRawRendDamage,The length of the statement  "                return (rawRendDamage[SpellManager.E.Level - 1] + rawRendDamageMultiplier[SpellManager.E.Level - 1] * player.TotalAttackDamage()) + // Base damage " is 146.
Long Statement,Kalista,Damages,C:\repos\Hellsing_LeagueSharp\Kalista\Damages.cs,GetRawRendDamage,The length of the statement  "                       (rawRendDamagePerSpear[SpellManager.E.Level - 1] + rawRendDamagePerSpearMultiplier[SpellManager.E.Level - 1] * player.TotalAttackDamage()); // Damage per spear " is 159.
Long Statement,Kalista,ItemManager,C:\repos\Hellsing_LeagueSharp\Kalista\ItemManager.cs,UseYoumuu,The length of the statement  "            if (Config.BoolLinks["itemsYoumuu"].Value && YOUMUU.IsReady() && target.IsValidTarget(Orbwalking.GetRealAutoAttackRange(player) + 50)) " is 134.
Long Statement,Kalista,Program,C:\repos\Hellsing_LeagueSharp\Kalista\Program.cs,Drawing_OnDraw,The length of the statement  "                Render.Circle.DrawCircle(ActiveModes.fleeTargetPosition.Value' 50' ActiveModes.wallJumpPossible ? Color.Green : SpellManager.Q.IsReady() ? Color.Red : Color.Teal' 10); " is 167.
Long Statement,Kalista,SoulBoundSaver,C:\repos\Hellsing_LeagueSharp\Kalista\SoulBoundSaver.cs,Obj_AI_Base_OnProcessSpellCast,The length of the statement  "                    if ((!(sender is Obj_AI_Hero) || args.SData.IsAutoAttack()) && args.Target != null && args.Target.NetworkId == SoulBound.NetworkId) " is 131.
Long Statement,Kalista,SoulBoundSaver,C:\repos\Hellsing_LeagueSharp\Kalista\SoulBoundSaver.cs,Obj_AI_Base_OnProcessSpellCast,The length of the statement  "                        _incomingDamage.Add(SoulBound.ServerPosition.Distance(sender.ServerPosition) / args.SData.MissileSpeed + Game.Time' (float)sender.GetAutoAttackDamage(SoulBound)); " is 162.
Long Statement,Kalista,SoulBoundSaver,C:\repos\Hellsing_LeagueSharp\Kalista\SoulBoundSaver.cs,Obj_AI_Base_OnProcessSpellCast,The length of the statement  "                            if (slot == attacker.GetSpellSlot("SummonerDot") && args.Target != null && args.Target.NetworkId == SoulBound.NetworkId) " is 120.
Long Statement,Kalista,UpdateChecker,C:\repos\Hellsing_LeagueSharp\Kalista\UpdateChecker.cs,Initialize,The length of the statement  "                        var data = await client.DownloadStringTaskAsync(string.Format("https://raw.github.com/{0}/Properties/AssemblyInfo.cs"' path)); " is 126.
Long Statement,Kalista,VectorHelper,C:\repos\Hellsing_LeagueSharp\Kalista\VectorHelper.cs,GetDashObjects,The length of the statement  "            var apexPoint = player.ServerPosition.To2D() + (player.ServerPosition.To2D() - Game.CursorPos.To2D()).Normalized() * Orbwalking.GetRealAutoAttackRange(player); " is 159.
Long Statement,Kalista,VectorHelper,C:\repos\Hellsing_LeagueSharp\Kalista\VectorHelper.cs,GetDashObjects,The length of the statement  "            return objects.Where(o => VectorHelper.IsLyingInCone(o.ServerPosition.To2D()' apexPoint' player.ServerPosition.To2D()' Math.PI)).OrderBy(o => o.Distance(apexPoint' true)).ToList(); " is 180.
Complex Conditional,Kalista,ActiveModes,C:\repos\Hellsing_LeagueSharp\Kalista\ActiveModes.cs,OnPermaActive,The conditional expression  "Config.BoolLinks["miscBigE"].Value &&                      ObjectManager.Get<Obj_AI_Minion>().Any(m => m.IsValidTarget(E.Range) && (m.BaseSkinName.Contains("MinionSiege") || m.BaseSkinName.Contains("Dragon") || m.BaseSkinName.Contains("Baron")) && m.IsRendKillable())"  is complex.
Complex Conditional,Kalista,ActiveModes,C:\repos\Hellsing_LeagueSharp\Kalista\ActiveModes.cs,OnCombo,The conditional expression  "E.IsEnabled(Mode.COMBO) && (E.Instance.State == SpellState.Ready || E.Instance.State == SpellState.Surpressed) && target.HasRendBuff()"  is complex.
Complex Conditional,Kalista,Extensions,C:\repos\Hellsing_LeagueSharp\Kalista\Extensions.cs,HasUndyingBuff,The conditional expression  "target.ChampionName == "Tryndamere" &&                  target.Buffs.Any(b => b.Caster.NetworkId == target.NetworkId && b.IsValidBuff() && b.DisplayName == "Undying Rage")"  is complex.
Complex Conditional,Kalista,Extensions,C:\repos\Hellsing_LeagueSharp\Kalista\Extensions.cs,HasUndyingBuff,The conditional expression  "HeroManager.Allies.Any(o =>                      !o.IsMe &&                      o.Buffs.Any(b => b.Caster.NetworkId == target.NetworkId && b.IsValidBuff() && b.DisplayName == "PoppyDITarget"))"  is complex.
Complex Conditional,Kalista,ItemManager,C:\repos\Hellsing_LeagueSharp\Kalista\ItemManager.cs,UseBotrk,The conditional expression  "Config.BoolLinks["itemsBotrk"].Value && BOTRK.IsReady() && target.IsValidTarget(BOTRK.Range) &&                  player.Health + player.GetItemDamage(target' Damage.DamageItems.Botrk) < player.MaxHealth"  is complex.
Complex Conditional,Kalista,SoulBoundSaver,C:\repos\Hellsing_LeagueSharp\Kalista\SoulBoundSaver.cs,Obj_AI_Base_OnProcessSpellCast,The conditional expression  "(!(sender is Obj_AI_Hero) || args.SData.IsAutoAttack()) && args.Target != null && args.Target.NetworkId == SoulBound.NetworkId"  is complex.
Complex Conditional,Kalista,SoulBoundSaver,C:\repos\Hellsing_LeagueSharp\Kalista\SoulBoundSaver.cs,Obj_AI_Base_OnProcessSpellCast,The conditional expression  "slot.HasFlag(SpellSlot.Q | SpellSlot.W | SpellSlot.E | SpellSlot.R) &&                                  ((args.Target != null && args.Target.NetworkId == SoulBound.NetworkId) ||                                  args.End.Distance(SoulBound.ServerPosition' true) < Math.Pow(args.SData.LineWidth' 2))"  is complex.
Magic Number,Kalista,ActiveModes,C:\repos\Hellsing_LeagueSharp\Kalista\ActiveModes.cs,OnPermaActive,The following statement contains a magic number: if (E.IsReady())              {                  #region Killsteal                    if (Config.BoolLinks["miscKillstealE"].Value &&                      HeroManager.Enemies.Any(h => h.IsValidTarget(E.Range) && h.IsRendKillable()))                  {                      E.Cast();                  }                    #endregion                    #region E on big mobs                    else if (Config.BoolLinks["miscBigE"].Value &&                      ObjectManager.Get<Obj_AI_Minion>().Any(m => m.IsValidTarget(E.Range) && (m.BaseSkinName.Contains("MinionSiege") || m.BaseSkinName.Contains("Dragon") || m.BaseSkinName.Contains("Baron")) && m.IsRendKillable()))                  {                      E.Cast();                  }                    #endregion                    #region E combo (minion + champ)                    else if (Config.BoolLinks["miscAutoEchamp"].Value)                  {                      var enemy = HeroManager.Enemies.Where(o => o.HasRendBuff()).MinOrDefault(o => o.Distance(player' true));                      if (enemy != null)                      {                          if (enemy.Distance(player' true) < Math.Pow(E.Range + 200' 2))                          {                              if (ObjectManager.Get<Obj_AI_Minion>().Any(o => E.IsInRange(o) && o.IsRendKillable()))                              {                                  E.Cast();                              }                          }                      }                  }                    #endregion              }
Magic Number,Kalista,ActiveModes,C:\repos\Hellsing_LeagueSharp\Kalista\ActiveModes.cs,OnPermaActive,The following statement contains a magic number: if (E.IsReady())              {                  #region Killsteal                    if (Config.BoolLinks["miscKillstealE"].Value &&                      HeroManager.Enemies.Any(h => h.IsValidTarget(E.Range) && h.IsRendKillable()))                  {                      E.Cast();                  }                    #endregion                    #region E on big mobs                    else if (Config.BoolLinks["miscBigE"].Value &&                      ObjectManager.Get<Obj_AI_Minion>().Any(m => m.IsValidTarget(E.Range) && (m.BaseSkinName.Contains("MinionSiege") || m.BaseSkinName.Contains("Dragon") || m.BaseSkinName.Contains("Baron")) && m.IsRendKillable()))                  {                      E.Cast();                  }                    #endregion                    #region E combo (minion + champ)                    else if (Config.BoolLinks["miscAutoEchamp"].Value)                  {                      var enemy = HeroManager.Enemies.Where(o => o.HasRendBuff()).MinOrDefault(o => o.Distance(player' true));                      if (enemy != null)                      {                          if (enemy.Distance(player' true) < Math.Pow(E.Range + 200' 2))                          {                              if (ObjectManager.Get<Obj_AI_Minion>().Any(o => E.IsInRange(o) && o.IsRendKillable()))                              {                                  E.Cast();                              }                          }                      }                  }                    #endregion              }
Magic Number,Kalista,ActiveModes,C:\repos\Hellsing_LeagueSharp\Kalista\ActiveModes.cs,OnCombo,The following statement contains a magic number: if (target != null)              {                  // Q usage                  if (Q.IsEnabledAndReady(Mode.COMBO) && !player.IsDashing())                      Q.Cast(target);                    // E usage                  if (E.IsEnabled(Mode.COMBO) && (E.Instance.State == SpellState.Ready || E.Instance.State == SpellState.Surpressed) && target.HasRendBuff())                  {                      // Target is not in range but has E stacks on                      if (player.Distance(target' true) > Math.Pow(Orbwalking.GetRealAutoAttackRange(target)' 2))                      {                          // Get minions around                          var minions = ObjectManager.Get<Obj_AI_Minion>().Where(m => m.IsValidTarget(Orbwalking.GetRealAutoAttackRange(m)));                            // Check if a minion can die with the current E stacks                          if (minions.Any(m => m.IsRendKillable()))                          {                              E.Cast(true);                          }                          else                          {                              // Check if a minion can die with one AA and E. Also' the AA minion has be be behind the player direction for a further leap                              var minion = VectorHelper.GetDashObjects(minions).Find(m => m.Health > player.GetAutoAttackDamage(m) && m.Health < player.GetAutoAttackDamage(m) + Damages.GetRendDamage(m' 1));                              if (minion != null)                              {                                  Config.Menu.Orbwalker.ForceTarget(minion);                              }                          }                      }                      // Target is in range and has at least the set amount of E stacks on                      else if (E.IsInRange(target) &&                          (target.IsRendKillable() || target.GetRendBuffCount() >= Config.SliderLinks["comboNumE"].Value.Value))                      {                          // Check if the target would die from E                          if (target.IsRendKillable())                          {                              E.Cast(true);                          }                          else                          {                              // Check if target is about to leave our E range or the buff is about to run out                              if (target.ServerPosition.Distance(player.ServerPosition' true) > Math.Pow(E.Range * 0.8' 2))                              {                                  E.Cast(true);                              }                          }                      }                  }              }
Magic Number,Kalista,ActiveModes,C:\repos\Hellsing_LeagueSharp\Kalista\ActiveModes.cs,OnCombo,The following statement contains a magic number: if (target != null)              {                  // Q usage                  if (Q.IsEnabledAndReady(Mode.COMBO) && !player.IsDashing())                      Q.Cast(target);                    // E usage                  if (E.IsEnabled(Mode.COMBO) && (E.Instance.State == SpellState.Ready || E.Instance.State == SpellState.Surpressed) && target.HasRendBuff())                  {                      // Target is not in range but has E stacks on                      if (player.Distance(target' true) > Math.Pow(Orbwalking.GetRealAutoAttackRange(target)' 2))                      {                          // Get minions around                          var minions = ObjectManager.Get<Obj_AI_Minion>().Where(m => m.IsValidTarget(Orbwalking.GetRealAutoAttackRange(m)));                            // Check if a minion can die with the current E stacks                          if (minions.Any(m => m.IsRendKillable()))                          {                              E.Cast(true);                          }                          else                          {                              // Check if a minion can die with one AA and E. Also' the AA minion has be be behind the player direction for a further leap                              var minion = VectorHelper.GetDashObjects(minions).Find(m => m.Health > player.GetAutoAttackDamage(m) && m.Health < player.GetAutoAttackDamage(m) + Damages.GetRendDamage(m' 1));                              if (minion != null)                              {                                  Config.Menu.Orbwalker.ForceTarget(minion);                              }                          }                      }                      // Target is in range and has at least the set amount of E stacks on                      else if (E.IsInRange(target) &&                          (target.IsRendKillable() || target.GetRendBuffCount() >= Config.SliderLinks["comboNumE"].Value.Value))                      {                          // Check if the target would die from E                          if (target.IsRendKillable())                          {                              E.Cast(true);                          }                          else                          {                              // Check if target is about to leave our E range or the buff is about to run out                              if (target.ServerPosition.Distance(player.ServerPosition' true) > Math.Pow(E.Range * 0.8' 2))                              {                                  E.Cast(true);                              }                          }                      }                  }              }
Magic Number,Kalista,ActiveModes,C:\repos\Hellsing_LeagueSharp\Kalista\ActiveModes.cs,OnCombo,The following statement contains a magic number: if (target != null)              {                  // Q usage                  if (Q.IsEnabledAndReady(Mode.COMBO) && !player.IsDashing())                      Q.Cast(target);                    // E usage                  if (E.IsEnabled(Mode.COMBO) && (E.Instance.State == SpellState.Ready || E.Instance.State == SpellState.Surpressed) && target.HasRendBuff())                  {                      // Target is not in range but has E stacks on                      if (player.Distance(target' true) > Math.Pow(Orbwalking.GetRealAutoAttackRange(target)' 2))                      {                          // Get minions around                          var minions = ObjectManager.Get<Obj_AI_Minion>().Where(m => m.IsValidTarget(Orbwalking.GetRealAutoAttackRange(m)));                            // Check if a minion can die with the current E stacks                          if (minions.Any(m => m.IsRendKillable()))                          {                              E.Cast(true);                          }                          else                          {                              // Check if a minion can die with one AA and E. Also' the AA minion has be be behind the player direction for a further leap                              var minion = VectorHelper.GetDashObjects(minions).Find(m => m.Health > player.GetAutoAttackDamage(m) && m.Health < player.GetAutoAttackDamage(m) + Damages.GetRendDamage(m' 1));                              if (minion != null)                              {                                  Config.Menu.Orbwalker.ForceTarget(minion);                              }                          }                      }                      // Target is in range and has at least the set amount of E stacks on                      else if (E.IsInRange(target) &&                          (target.IsRendKillable() || target.GetRendBuffCount() >= Config.SliderLinks["comboNumE"].Value.Value))                      {                          // Check if the target would die from E                          if (target.IsRendKillable())                          {                              E.Cast(true);                          }                          else                          {                              // Check if target is about to leave our E range or the buff is about to run out                              if (target.ServerPosition.Distance(player.ServerPosition' true) > Math.Pow(E.Range * 0.8' 2))                              {                                  E.Cast(true);                              }                          }                      }                  }              }
Magic Number,Kalista,ActiveModes,C:\repos\Hellsing_LeagueSharp\Kalista\ActiveModes.cs,OnFlee,The following statement contains a magic number: if (wallJumpTarget.HasValue)              {                  // Move to the target                  player.IssueOrder(GameObjectOrder.MoveTo' wallJumpTarget.Value);                    // This is only to validate when the jump get aborted by' for example' stuns                  if (Environment.TickCount - wallJumpInitTime > 500)                  {                      wallJumpTarget = null;                      wallJumpInitTime = null;                  }                  else                      return;              }
Magic Number,Kalista,ActiveModes,C:\repos\Hellsing_LeagueSharp\Kalista\ActiveModes.cs,OnFlee,The following statement contains a magic number: if (useWalljump)              {                  // We need to define a new move position since jumping over walls                  // requires you to be close to the specified wall. Therefore we set the move                  // point to be that specific piont. People will need to get used to it'                  // but this is how it works.                  var wallCheck = VectorHelper.GetFirstWallPoint(player.Position' Game.CursorPos);                    // Be more precise                  if (wallCheck != null)                      wallCheck = VectorHelper.GetFirstWallPoint((Vector3)wallCheck' Game.CursorPos' 5);                    // Define more position point                  Vector3 movePosition = wallCheck != null ? (Vector3)wallCheck : Game.CursorPos;                    // Update fleeTargetPosition                  var tempGrid = NavMesh.WorldToGrid(movePosition.X' movePosition.Y);                  fleeTargetPosition = NavMesh.GridToWorld((short)tempGrid.X' (short)tempGrid.Y);                    // Also check if we want to AA aswell                  Obj_AI_Base target = null;                  if (useAA)                  {                      var dashObjects = VectorHelper.GetDashObjects();                      if (dashObjects.Count > 0)                          target = dashObjects[0];                  }                    // Reset walljump indicators                  wallJumpPossible = false;                    // Only calculate stuff when our Q is up and there is a wall inbetween                  if (Q.IsReady() && wallCheck != null)                  {                      // Get our wall position to calculate from                      Vector3 wallPosition = movePosition;                        // Check 300 units to the cursor position in a 160 degree cone for a valid non-wall spot                      Vector2 direction = (Game.CursorPos.To2D() - wallPosition.To2D()).Normalized();                      float maxAngle = 80;                      float step = maxAngle / 20;                      float currentAngle = 0;                      float currentStep = 0;                      bool jumpTriggered = false;                      while (true)                      {                          // Validate the counter' break if no valid spot was found in previous loops                          if (currentStep > maxAngle && currentAngle < 0)                              break;                            // Check next angle                          if ((currentAngle == 0 || currentAngle < 0) && currentStep != 0)                          {                              currentAngle = (currentStep) * (float)Math.PI / 180;                              currentStep += step;                          }                          else if (currentAngle > 0)                              currentAngle = -currentAngle;                            Vector3 checkPoint;                            // One time only check for direct line of sight without rotating                          if (currentStep == 0)                          {                              currentStep = step;                              checkPoint = wallPosition + 300 * direction.To3D();                          }                          // Rotated check                          else                              checkPoint = wallPosition + 300 * direction.Rotated(currentAngle).To3D();                            // Check if the point is not a wall                          if (!checkPoint.IsWall())                          {                              // Check if there is a wall between the checkPoint and wallPosition                              wallCheck = VectorHelper.GetFirstWallPoint(checkPoint' wallPosition);                              if (wallCheck != null)                              {                                  // There is a wall inbetween' get the closes point to the wall' as precise as possible                                  Vector3 wallPositionOpposite = (Vector3)VectorHelper.GetFirstWallPoint((Vector3)wallCheck' wallPosition' 5);                                    // Check if it's worth to jump considering the path length                                  if (player.GetPath(wallPositionOpposite).ToList().To2D().PathLength() - player.Distance(wallPositionOpposite) > 200)                                  {                                      // Check the distance to the opposite side of the wall                                      if (player.Distance(wallPositionOpposite' true) < Math.Pow(300 - player.BoundingRadius / 2' 2))                                      {                                          // Make the jump happen                                          wallJumpInitTime = Environment.TickCount;                                          wallJumpTarget = wallPositionOpposite;                                          Q.Cast(wallPositionOpposite);                                            // Update jumpTriggered value to not orbwalk now since we want to jump                                          jumpTriggered = true;                                            // Break the loop                                          break;                                      }                                      // If we are not able to jump due to the distance' draw the spot to                                      // make the user notice the possibliy                                      else                                      {                                          // Update indicator values                                          wallJumpPossible = true;                                      }                                  }                              }                          }                      }                        // Check if the loop triggered the jump' if not just orbwalk                      if (!jumpTriggered)                          Orbwalking.Orbwalk(target' movePosition' 90f' 0f' false' false);                  }                  // Either no wall or Q on cooldown' just move towards to wall then                  else                      Orbwalking.Orbwalk(target' movePosition' 90f' 0f' false' false);              }
Magic Number,Kalista,ActiveModes,C:\repos\Hellsing_LeagueSharp\Kalista\ActiveModes.cs,OnFlee,The following statement contains a magic number: if (useWalljump)              {                  // We need to define a new move position since jumping over walls                  // requires you to be close to the specified wall. Therefore we set the move                  // point to be that specific piont. People will need to get used to it'                  // but this is how it works.                  var wallCheck = VectorHelper.GetFirstWallPoint(player.Position' Game.CursorPos);                    // Be more precise                  if (wallCheck != null)                      wallCheck = VectorHelper.GetFirstWallPoint((Vector3)wallCheck' Game.CursorPos' 5);                    // Define more position point                  Vector3 movePosition = wallCheck != null ? (Vector3)wallCheck : Game.CursorPos;                    // Update fleeTargetPosition                  var tempGrid = NavMesh.WorldToGrid(movePosition.X' movePosition.Y);                  fleeTargetPosition = NavMesh.GridToWorld((short)tempGrid.X' (short)tempGrid.Y);                    // Also check if we want to AA aswell                  Obj_AI_Base target = null;                  if (useAA)                  {                      var dashObjects = VectorHelper.GetDashObjects();                      if (dashObjects.Count > 0)                          target = dashObjects[0];                  }                    // Reset walljump indicators                  wallJumpPossible = false;                    // Only calculate stuff when our Q is up and there is a wall inbetween                  if (Q.IsReady() && wallCheck != null)                  {                      // Get our wall position to calculate from                      Vector3 wallPosition = movePosition;                        // Check 300 units to the cursor position in a 160 degree cone for a valid non-wall spot                      Vector2 direction = (Game.CursorPos.To2D() - wallPosition.To2D()).Normalized();                      float maxAngle = 80;                      float step = maxAngle / 20;                      float currentAngle = 0;                      float currentStep = 0;                      bool jumpTriggered = false;                      while (true)                      {                          // Validate the counter' break if no valid spot was found in previous loops                          if (currentStep > maxAngle && currentAngle < 0)                              break;                            // Check next angle                          if ((currentAngle == 0 || currentAngle < 0) && currentStep != 0)                          {                              currentAngle = (currentStep) * (float)Math.PI / 180;                              currentStep += step;                          }                          else if (currentAngle > 0)                              currentAngle = -currentAngle;                            Vector3 checkPoint;                            // One time only check for direct line of sight without rotating                          if (currentStep == 0)                          {                              currentStep = step;                              checkPoint = wallPosition + 300 * direction.To3D();                          }                          // Rotated check                          else                              checkPoint = wallPosition + 300 * direction.Rotated(currentAngle).To3D();                            // Check if the point is not a wall                          if (!checkPoint.IsWall())                          {                              // Check if there is a wall between the checkPoint and wallPosition                              wallCheck = VectorHelper.GetFirstWallPoint(checkPoint' wallPosition);                              if (wallCheck != null)                              {                                  // There is a wall inbetween' get the closes point to the wall' as precise as possible                                  Vector3 wallPositionOpposite = (Vector3)VectorHelper.GetFirstWallPoint((Vector3)wallCheck' wallPosition' 5);                                    // Check if it's worth to jump considering the path length                                  if (player.GetPath(wallPositionOpposite).ToList().To2D().PathLength() - player.Distance(wallPositionOpposite) > 200)                                  {                                      // Check the distance to the opposite side of the wall                                      if (player.Distance(wallPositionOpposite' true) < Math.Pow(300 - player.BoundingRadius / 2' 2))                                      {                                          // Make the jump happen                                          wallJumpInitTime = Environment.TickCount;                                          wallJumpTarget = wallPositionOpposite;                                          Q.Cast(wallPositionOpposite);                                            // Update jumpTriggered value to not orbwalk now since we want to jump                                          jumpTriggered = true;                                            // Break the loop                                          break;                                      }                                      // If we are not able to jump due to the distance' draw the spot to                                      // make the user notice the possibliy                                      else                                      {                                          // Update indicator values                                          wallJumpPossible = true;                                      }                                  }                              }                          }                      }                        // Check if the loop triggered the jump' if not just orbwalk                      if (!jumpTriggered)                          Orbwalking.Orbwalk(target' movePosition' 90f' 0f' false' false);                  }                  // Either no wall or Q on cooldown' just move towards to wall then                  else                      Orbwalking.Orbwalk(target' movePosition' 90f' 0f' false' false);              }
Magic Number,Kalista,ActiveModes,C:\repos\Hellsing_LeagueSharp\Kalista\ActiveModes.cs,OnFlee,The following statement contains a magic number: if (useWalljump)              {                  // We need to define a new move position since jumping over walls                  // requires you to be close to the specified wall. Therefore we set the move                  // point to be that specific piont. People will need to get used to it'                  // but this is how it works.                  var wallCheck = VectorHelper.GetFirstWallPoint(player.Position' Game.CursorPos);                    // Be more precise                  if (wallCheck != null)                      wallCheck = VectorHelper.GetFirstWallPoint((Vector3)wallCheck' Game.CursorPos' 5);                    // Define more position point                  Vector3 movePosition = wallCheck != null ? (Vector3)wallCheck : Game.CursorPos;                    // Update fleeTargetPosition                  var tempGrid = NavMesh.WorldToGrid(movePosition.X' movePosition.Y);                  fleeTargetPosition = NavMesh.GridToWorld((short)tempGrid.X' (short)tempGrid.Y);                    // Also check if we want to AA aswell                  Obj_AI_Base target = null;                  if (useAA)                  {                      var dashObjects = VectorHelper.GetDashObjects();                      if (dashObjects.Count > 0)                          target = dashObjects[0];                  }                    // Reset walljump indicators                  wallJumpPossible = false;                    // Only calculate stuff when our Q is up and there is a wall inbetween                  if (Q.IsReady() && wallCheck != null)                  {                      // Get our wall position to calculate from                      Vector3 wallPosition = movePosition;                        // Check 300 units to the cursor position in a 160 degree cone for a valid non-wall spot                      Vector2 direction = (Game.CursorPos.To2D() - wallPosition.To2D()).Normalized();                      float maxAngle = 80;                      float step = maxAngle / 20;                      float currentAngle = 0;                      float currentStep = 0;                      bool jumpTriggered = false;                      while (true)                      {                          // Validate the counter' break if no valid spot was found in previous loops                          if (currentStep > maxAngle && currentAngle < 0)                              break;                            // Check next angle                          if ((currentAngle == 0 || currentAngle < 0) && currentStep != 0)                          {                              currentAngle = (currentStep) * (float)Math.PI / 180;                              currentStep += step;                          }                          else if (currentAngle > 0)                              currentAngle = -currentAngle;                            Vector3 checkPoint;                            // One time only check for direct line of sight without rotating                          if (currentStep == 0)                          {                              currentStep = step;                              checkPoint = wallPosition + 300 * direction.To3D();                          }                          // Rotated check                          else                              checkPoint = wallPosition + 300 * direction.Rotated(currentAngle).To3D();                            // Check if the point is not a wall                          if (!checkPoint.IsWall())                          {                              // Check if there is a wall between the checkPoint and wallPosition                              wallCheck = VectorHelper.GetFirstWallPoint(checkPoint' wallPosition);                              if (wallCheck != null)                              {                                  // There is a wall inbetween' get the closes point to the wall' as precise as possible                                  Vector3 wallPositionOpposite = (Vector3)VectorHelper.GetFirstWallPoint((Vector3)wallCheck' wallPosition' 5);                                    // Check if it's worth to jump considering the path length                                  if (player.GetPath(wallPositionOpposite).ToList().To2D().PathLength() - player.Distance(wallPositionOpposite) > 200)                                  {                                      // Check the distance to the opposite side of the wall                                      if (player.Distance(wallPositionOpposite' true) < Math.Pow(300 - player.BoundingRadius / 2' 2))                                      {                                          // Make the jump happen                                          wallJumpInitTime = Environment.TickCount;                                          wallJumpTarget = wallPositionOpposite;                                          Q.Cast(wallPositionOpposite);                                            // Update jumpTriggered value to not orbwalk now since we want to jump                                          jumpTriggered = true;                                            // Break the loop                                          break;                                      }                                      // If we are not able to jump due to the distance' draw the spot to                                      // make the user notice the possibliy                                      else                                      {                                          // Update indicator values                                          wallJumpPossible = true;                                      }                                  }                              }                          }                      }                        // Check if the loop triggered the jump' if not just orbwalk                      if (!jumpTriggered)                          Orbwalking.Orbwalk(target' movePosition' 90f' 0f' false' false);                  }                  // Either no wall or Q on cooldown' just move towards to wall then                  else                      Orbwalking.Orbwalk(target' movePosition' 90f' 0f' false' false);              }
Magic Number,Kalista,ActiveModes,C:\repos\Hellsing_LeagueSharp\Kalista\ActiveModes.cs,OnFlee,The following statement contains a magic number: if (useWalljump)              {                  // We need to define a new move position since jumping over walls                  // requires you to be close to the specified wall. Therefore we set the move                  // point to be that specific piont. People will need to get used to it'                  // but this is how it works.                  var wallCheck = VectorHelper.GetFirstWallPoint(player.Position' Game.CursorPos);                    // Be more precise                  if (wallCheck != null)                      wallCheck = VectorHelper.GetFirstWallPoint((Vector3)wallCheck' Game.CursorPos' 5);                    // Define more position point                  Vector3 movePosition = wallCheck != null ? (Vector3)wallCheck : Game.CursorPos;                    // Update fleeTargetPosition                  var tempGrid = NavMesh.WorldToGrid(movePosition.X' movePosition.Y);                  fleeTargetPosition = NavMesh.GridToWorld((short)tempGrid.X' (short)tempGrid.Y);                    // Also check if we want to AA aswell                  Obj_AI_Base target = null;                  if (useAA)                  {                      var dashObjects = VectorHelper.GetDashObjects();                      if (dashObjects.Count > 0)                          target = dashObjects[0];                  }                    // Reset walljump indicators                  wallJumpPossible = false;                    // Only calculate stuff when our Q is up and there is a wall inbetween                  if (Q.IsReady() && wallCheck != null)                  {                      // Get our wall position to calculate from                      Vector3 wallPosition = movePosition;                        // Check 300 units to the cursor position in a 160 degree cone for a valid non-wall spot                      Vector2 direction = (Game.CursorPos.To2D() - wallPosition.To2D()).Normalized();                      float maxAngle = 80;                      float step = maxAngle / 20;                      float currentAngle = 0;                      float currentStep = 0;                      bool jumpTriggered = false;                      while (true)                      {                          // Validate the counter' break if no valid spot was found in previous loops                          if (currentStep > maxAngle && currentAngle < 0)                              break;                            // Check next angle                          if ((currentAngle == 0 || currentAngle < 0) && currentStep != 0)                          {                              currentAngle = (currentStep) * (float)Math.PI / 180;                              currentStep += step;                          }                          else if (currentAngle > 0)                              currentAngle = -currentAngle;                            Vector3 checkPoint;                            // One time only check for direct line of sight without rotating                          if (currentStep == 0)                          {                              currentStep = step;                              checkPoint = wallPosition + 300 * direction.To3D();                          }                          // Rotated check                          else                              checkPoint = wallPosition + 300 * direction.Rotated(currentAngle).To3D();                            // Check if the point is not a wall                          if (!checkPoint.IsWall())                          {                              // Check if there is a wall between the checkPoint and wallPosition                              wallCheck = VectorHelper.GetFirstWallPoint(checkPoint' wallPosition);                              if (wallCheck != null)                              {                                  // There is a wall inbetween' get the closes point to the wall' as precise as possible                                  Vector3 wallPositionOpposite = (Vector3)VectorHelper.GetFirstWallPoint((Vector3)wallCheck' wallPosition' 5);                                    // Check if it's worth to jump considering the path length                                  if (player.GetPath(wallPositionOpposite).ToList().To2D().PathLength() - player.Distance(wallPositionOpposite) > 200)                                  {                                      // Check the distance to the opposite side of the wall                                      if (player.Distance(wallPositionOpposite' true) < Math.Pow(300 - player.BoundingRadius / 2' 2))                                      {                                          // Make the jump happen                                          wallJumpInitTime = Environment.TickCount;                                          wallJumpTarget = wallPositionOpposite;                                          Q.Cast(wallPositionOpposite);                                            // Update jumpTriggered value to not orbwalk now since we want to jump                                          jumpTriggered = true;                                            // Break the loop                                          break;                                      }                                      // If we are not able to jump due to the distance' draw the spot to                                      // make the user notice the possibliy                                      else                                      {                                          // Update indicator values                                          wallJumpPossible = true;                                      }                                  }                              }                          }                      }                        // Check if the loop triggered the jump' if not just orbwalk                      if (!jumpTriggered)                          Orbwalking.Orbwalk(target' movePosition' 90f' 0f' false' false);                  }                  // Either no wall or Q on cooldown' just move towards to wall then                  else                      Orbwalking.Orbwalk(target' movePosition' 90f' 0f' false' false);              }
Magic Number,Kalista,ActiveModes,C:\repos\Hellsing_LeagueSharp\Kalista\ActiveModes.cs,OnFlee,The following statement contains a magic number: if (useWalljump)              {                  // We need to define a new move position since jumping over walls                  // requires you to be close to the specified wall. Therefore we set the move                  // point to be that specific piont. People will need to get used to it'                  // but this is how it works.                  var wallCheck = VectorHelper.GetFirstWallPoint(player.Position' Game.CursorPos);                    // Be more precise                  if (wallCheck != null)                      wallCheck = VectorHelper.GetFirstWallPoint((Vector3)wallCheck' Game.CursorPos' 5);                    // Define more position point                  Vector3 movePosition = wallCheck != null ? (Vector3)wallCheck : Game.CursorPos;                    // Update fleeTargetPosition                  var tempGrid = NavMesh.WorldToGrid(movePosition.X' movePosition.Y);                  fleeTargetPosition = NavMesh.GridToWorld((short)tempGrid.X' (short)tempGrid.Y);                    // Also check if we want to AA aswell                  Obj_AI_Base target = null;                  if (useAA)                  {                      var dashObjects = VectorHelper.GetDashObjects();                      if (dashObjects.Count > 0)                          target = dashObjects[0];                  }                    // Reset walljump indicators                  wallJumpPossible = false;                    // Only calculate stuff when our Q is up and there is a wall inbetween                  if (Q.IsReady() && wallCheck != null)                  {                      // Get our wall position to calculate from                      Vector3 wallPosition = movePosition;                        // Check 300 units to the cursor position in a 160 degree cone for a valid non-wall spot                      Vector2 direction = (Game.CursorPos.To2D() - wallPosition.To2D()).Normalized();                      float maxAngle = 80;                      float step = maxAngle / 20;                      float currentAngle = 0;                      float currentStep = 0;                      bool jumpTriggered = false;                      while (true)                      {                          // Validate the counter' break if no valid spot was found in previous loops                          if (currentStep > maxAngle && currentAngle < 0)                              break;                            // Check next angle                          if ((currentAngle == 0 || currentAngle < 0) && currentStep != 0)                          {                              currentAngle = (currentStep) * (float)Math.PI / 180;                              currentStep += step;                          }                          else if (currentAngle > 0)                              currentAngle = -currentAngle;                            Vector3 checkPoint;                            // One time only check for direct line of sight without rotating                          if (currentStep == 0)                          {                              currentStep = step;                              checkPoint = wallPosition + 300 * direction.To3D();                          }                          // Rotated check                          else                              checkPoint = wallPosition + 300 * direction.Rotated(currentAngle).To3D();                            // Check if the point is not a wall                          if (!checkPoint.IsWall())                          {                              // Check if there is a wall between the checkPoint and wallPosition                              wallCheck = VectorHelper.GetFirstWallPoint(checkPoint' wallPosition);                              if (wallCheck != null)                              {                                  // There is a wall inbetween' get the closes point to the wall' as precise as possible                                  Vector3 wallPositionOpposite = (Vector3)VectorHelper.GetFirstWallPoint((Vector3)wallCheck' wallPosition' 5);                                    // Check if it's worth to jump considering the path length                                  if (player.GetPath(wallPositionOpposite).ToList().To2D().PathLength() - player.Distance(wallPositionOpposite) > 200)                                  {                                      // Check the distance to the opposite side of the wall                                      if (player.Distance(wallPositionOpposite' true) < Math.Pow(300 - player.BoundingRadius / 2' 2))                                      {                                          // Make the jump happen                                          wallJumpInitTime = Environment.TickCount;                                          wallJumpTarget = wallPositionOpposite;                                          Q.Cast(wallPositionOpposite);                                            // Update jumpTriggered value to not orbwalk now since we want to jump                                          jumpTriggered = true;                                            // Break the loop                                          break;                                      }                                      // If we are not able to jump due to the distance' draw the spot to                                      // make the user notice the possibliy                                      else                                      {                                          // Update indicator values                                          wallJumpPossible = true;                                      }                                  }                              }                          }                      }                        // Check if the loop triggered the jump' if not just orbwalk                      if (!jumpTriggered)                          Orbwalking.Orbwalk(target' movePosition' 90f' 0f' false' false);                  }                  // Either no wall or Q on cooldown' just move towards to wall then                  else                      Orbwalking.Orbwalk(target' movePosition' 90f' 0f' false' false);              }
Magic Number,Kalista,ActiveModes,C:\repos\Hellsing_LeagueSharp\Kalista\ActiveModes.cs,OnFlee,The following statement contains a magic number: if (useWalljump)              {                  // We need to define a new move position since jumping over walls                  // requires you to be close to the specified wall. Therefore we set the move                  // point to be that specific piont. People will need to get used to it'                  // but this is how it works.                  var wallCheck = VectorHelper.GetFirstWallPoint(player.Position' Game.CursorPos);                    // Be more precise                  if (wallCheck != null)                      wallCheck = VectorHelper.GetFirstWallPoint((Vector3)wallCheck' Game.CursorPos' 5);                    // Define more position point                  Vector3 movePosition = wallCheck != null ? (Vector3)wallCheck : Game.CursorPos;                    // Update fleeTargetPosition                  var tempGrid = NavMesh.WorldToGrid(movePosition.X' movePosition.Y);                  fleeTargetPosition = NavMesh.GridToWorld((short)tempGrid.X' (short)tempGrid.Y);                    // Also check if we want to AA aswell                  Obj_AI_Base target = null;                  if (useAA)                  {                      var dashObjects = VectorHelper.GetDashObjects();                      if (dashObjects.Count > 0)                          target = dashObjects[0];                  }                    // Reset walljump indicators                  wallJumpPossible = false;                    // Only calculate stuff when our Q is up and there is a wall inbetween                  if (Q.IsReady() && wallCheck != null)                  {                      // Get our wall position to calculate from                      Vector3 wallPosition = movePosition;                        // Check 300 units to the cursor position in a 160 degree cone for a valid non-wall spot                      Vector2 direction = (Game.CursorPos.To2D() - wallPosition.To2D()).Normalized();                      float maxAngle = 80;                      float step = maxAngle / 20;                      float currentAngle = 0;                      float currentStep = 0;                      bool jumpTriggered = false;                      while (true)                      {                          // Validate the counter' break if no valid spot was found in previous loops                          if (currentStep > maxAngle && currentAngle < 0)                              break;                            // Check next angle                          if ((currentAngle == 0 || currentAngle < 0) && currentStep != 0)                          {                              currentAngle = (currentStep) * (float)Math.PI / 180;                              currentStep += step;                          }                          else if (currentAngle > 0)                              currentAngle = -currentAngle;                            Vector3 checkPoint;                            // One time only check for direct line of sight without rotating                          if (currentStep == 0)                          {                              currentStep = step;                              checkPoint = wallPosition + 300 * direction.To3D();                          }                          // Rotated check                          else                              checkPoint = wallPosition + 300 * direction.Rotated(currentAngle).To3D();                            // Check if the point is not a wall                          if (!checkPoint.IsWall())                          {                              // Check if there is a wall between the checkPoint and wallPosition                              wallCheck = VectorHelper.GetFirstWallPoint(checkPoint' wallPosition);                              if (wallCheck != null)                              {                                  // There is a wall inbetween' get the closes point to the wall' as precise as possible                                  Vector3 wallPositionOpposite = (Vector3)VectorHelper.GetFirstWallPoint((Vector3)wallCheck' wallPosition' 5);                                    // Check if it's worth to jump considering the path length                                  if (player.GetPath(wallPositionOpposite).ToList().To2D().PathLength() - player.Distance(wallPositionOpposite) > 200)                                  {                                      // Check the distance to the opposite side of the wall                                      if (player.Distance(wallPositionOpposite' true) < Math.Pow(300 - player.BoundingRadius / 2' 2))                                      {                                          // Make the jump happen                                          wallJumpInitTime = Environment.TickCount;                                          wallJumpTarget = wallPositionOpposite;                                          Q.Cast(wallPositionOpposite);                                            // Update jumpTriggered value to not orbwalk now since we want to jump                                          jumpTriggered = true;                                            // Break the loop                                          break;                                      }                                      // If we are not able to jump due to the distance' draw the spot to                                      // make the user notice the possibliy                                      else                                      {                                          // Update indicator values                                          wallJumpPossible = true;                                      }                                  }                              }                          }                      }                        // Check if the loop triggered the jump' if not just orbwalk                      if (!jumpTriggered)                          Orbwalking.Orbwalk(target' movePosition' 90f' 0f' false' false);                  }                  // Either no wall or Q on cooldown' just move towards to wall then                  else                      Orbwalking.Orbwalk(target' movePosition' 90f' 0f' false' false);              }
Magic Number,Kalista,ActiveModes,C:\repos\Hellsing_LeagueSharp\Kalista\ActiveModes.cs,OnFlee,The following statement contains a magic number: if (useWalljump)              {                  // We need to define a new move position since jumping over walls                  // requires you to be close to the specified wall. Therefore we set the move                  // point to be that specific piont. People will need to get used to it'                  // but this is how it works.                  var wallCheck = VectorHelper.GetFirstWallPoint(player.Position' Game.CursorPos);                    // Be more precise                  if (wallCheck != null)                      wallCheck = VectorHelper.GetFirstWallPoint((Vector3)wallCheck' Game.CursorPos' 5);                    // Define more position point                  Vector3 movePosition = wallCheck != null ? (Vector3)wallCheck : Game.CursorPos;                    // Update fleeTargetPosition                  var tempGrid = NavMesh.WorldToGrid(movePosition.X' movePosition.Y);                  fleeTargetPosition = NavMesh.GridToWorld((short)tempGrid.X' (short)tempGrid.Y);                    // Also check if we want to AA aswell                  Obj_AI_Base target = null;                  if (useAA)                  {                      var dashObjects = VectorHelper.GetDashObjects();                      if (dashObjects.Count > 0)                          target = dashObjects[0];                  }                    // Reset walljump indicators                  wallJumpPossible = false;                    // Only calculate stuff when our Q is up and there is a wall inbetween                  if (Q.IsReady() && wallCheck != null)                  {                      // Get our wall position to calculate from                      Vector3 wallPosition = movePosition;                        // Check 300 units to the cursor position in a 160 degree cone for a valid non-wall spot                      Vector2 direction = (Game.CursorPos.To2D() - wallPosition.To2D()).Normalized();                      float maxAngle = 80;                      float step = maxAngle / 20;                      float currentAngle = 0;                      float currentStep = 0;                      bool jumpTriggered = false;                      while (true)                      {                          // Validate the counter' break if no valid spot was found in previous loops                          if (currentStep > maxAngle && currentAngle < 0)                              break;                            // Check next angle                          if ((currentAngle == 0 || currentAngle < 0) && currentStep != 0)                          {                              currentAngle = (currentStep) * (float)Math.PI / 180;                              currentStep += step;                          }                          else if (currentAngle > 0)                              currentAngle = -currentAngle;                            Vector3 checkPoint;                            // One time only check for direct line of sight without rotating                          if (currentStep == 0)                          {                              currentStep = step;                              checkPoint = wallPosition + 300 * direction.To3D();                          }                          // Rotated check                          else                              checkPoint = wallPosition + 300 * direction.Rotated(currentAngle).To3D();                            // Check if the point is not a wall                          if (!checkPoint.IsWall())                          {                              // Check if there is a wall between the checkPoint and wallPosition                              wallCheck = VectorHelper.GetFirstWallPoint(checkPoint' wallPosition);                              if (wallCheck != null)                              {                                  // There is a wall inbetween' get the closes point to the wall' as precise as possible                                  Vector3 wallPositionOpposite = (Vector3)VectorHelper.GetFirstWallPoint((Vector3)wallCheck' wallPosition' 5);                                    // Check if it's worth to jump considering the path length                                  if (player.GetPath(wallPositionOpposite).ToList().To2D().PathLength() - player.Distance(wallPositionOpposite) > 200)                                  {                                      // Check the distance to the opposite side of the wall                                      if (player.Distance(wallPositionOpposite' true) < Math.Pow(300 - player.BoundingRadius / 2' 2))                                      {                                          // Make the jump happen                                          wallJumpInitTime = Environment.TickCount;                                          wallJumpTarget = wallPositionOpposite;                                          Q.Cast(wallPositionOpposite);                                            // Update jumpTriggered value to not orbwalk now since we want to jump                                          jumpTriggered = true;                                            // Break the loop                                          break;                                      }                                      // If we are not able to jump due to the distance' draw the spot to                                      // make the user notice the possibliy                                      else                                      {                                          // Update indicator values                                          wallJumpPossible = true;                                      }                                  }                              }                          }                      }                        // Check if the loop triggered the jump' if not just orbwalk                      if (!jumpTriggered)                          Orbwalking.Orbwalk(target' movePosition' 90f' 0f' false' false);                  }                  // Either no wall or Q on cooldown' just move towards to wall then                  else                      Orbwalking.Orbwalk(target' movePosition' 90f' 0f' false' false);              }
Magic Number,Kalista,ActiveModes,C:\repos\Hellsing_LeagueSharp\Kalista\ActiveModes.cs,OnFlee,The following statement contains a magic number: if (useWalljump)              {                  // We need to define a new move position since jumping over walls                  // requires you to be close to the specified wall. Therefore we set the move                  // point to be that specific piont. People will need to get used to it'                  // but this is how it works.                  var wallCheck = VectorHelper.GetFirstWallPoint(player.Position' Game.CursorPos);                    // Be more precise                  if (wallCheck != null)                      wallCheck = VectorHelper.GetFirstWallPoint((Vector3)wallCheck' Game.CursorPos' 5);                    // Define more position point                  Vector3 movePosition = wallCheck != null ? (Vector3)wallCheck : Game.CursorPos;                    // Update fleeTargetPosition                  var tempGrid = NavMesh.WorldToGrid(movePosition.X' movePosition.Y);                  fleeTargetPosition = NavMesh.GridToWorld((short)tempGrid.X' (short)tempGrid.Y);                    // Also check if we want to AA aswell                  Obj_AI_Base target = null;                  if (useAA)                  {                      var dashObjects = VectorHelper.GetDashObjects();                      if (dashObjects.Count > 0)                          target = dashObjects[0];                  }                    // Reset walljump indicators                  wallJumpPossible = false;                    // Only calculate stuff when our Q is up and there is a wall inbetween                  if (Q.IsReady() && wallCheck != null)                  {                      // Get our wall position to calculate from                      Vector3 wallPosition = movePosition;                        // Check 300 units to the cursor position in a 160 degree cone for a valid non-wall spot                      Vector2 direction = (Game.CursorPos.To2D() - wallPosition.To2D()).Normalized();                      float maxAngle = 80;                      float step = maxAngle / 20;                      float currentAngle = 0;                      float currentStep = 0;                      bool jumpTriggered = false;                      while (true)                      {                          // Validate the counter' break if no valid spot was found in previous loops                          if (currentStep > maxAngle && currentAngle < 0)                              break;                            // Check next angle                          if ((currentAngle == 0 || currentAngle < 0) && currentStep != 0)                          {                              currentAngle = (currentStep) * (float)Math.PI / 180;                              currentStep += step;                          }                          else if (currentAngle > 0)                              currentAngle = -currentAngle;                            Vector3 checkPoint;                            // One time only check for direct line of sight without rotating                          if (currentStep == 0)                          {                              currentStep = step;                              checkPoint = wallPosition + 300 * direction.To3D();                          }                          // Rotated check                          else                              checkPoint = wallPosition + 300 * direction.Rotated(currentAngle).To3D();                            // Check if the point is not a wall                          if (!checkPoint.IsWall())                          {                              // Check if there is a wall between the checkPoint and wallPosition                              wallCheck = VectorHelper.GetFirstWallPoint(checkPoint' wallPosition);                              if (wallCheck != null)                              {                                  // There is a wall inbetween' get the closes point to the wall' as precise as possible                                  Vector3 wallPositionOpposite = (Vector3)VectorHelper.GetFirstWallPoint((Vector3)wallCheck' wallPosition' 5);                                    // Check if it's worth to jump considering the path length                                  if (player.GetPath(wallPositionOpposite).ToList().To2D().PathLength() - player.Distance(wallPositionOpposite) > 200)                                  {                                      // Check the distance to the opposite side of the wall                                      if (player.Distance(wallPositionOpposite' true) < Math.Pow(300 - player.BoundingRadius / 2' 2))                                      {                                          // Make the jump happen                                          wallJumpInitTime = Environment.TickCount;                                          wallJumpTarget = wallPositionOpposite;                                          Q.Cast(wallPositionOpposite);                                            // Update jumpTriggered value to not orbwalk now since we want to jump                                          jumpTriggered = true;                                            // Break the loop                                          break;                                      }                                      // If we are not able to jump due to the distance' draw the spot to                                      // make the user notice the possibliy                                      else                                      {                                          // Update indicator values                                          wallJumpPossible = true;                                      }                                  }                              }                          }                      }                        // Check if the loop triggered the jump' if not just orbwalk                      if (!jumpTriggered)                          Orbwalking.Orbwalk(target' movePosition' 90f' 0f' false' false);                  }                  // Either no wall or Q on cooldown' just move towards to wall then                  else                      Orbwalking.Orbwalk(target' movePosition' 90f' 0f' false' false);              }
Magic Number,Kalista,ActiveModes,C:\repos\Hellsing_LeagueSharp\Kalista\ActiveModes.cs,OnFlee,The following statement contains a magic number: if (useWalljump)              {                  // We need to define a new move position since jumping over walls                  // requires you to be close to the specified wall. Therefore we set the move                  // point to be that specific piont. People will need to get used to it'                  // but this is how it works.                  var wallCheck = VectorHelper.GetFirstWallPoint(player.Position' Game.CursorPos);                    // Be more precise                  if (wallCheck != null)                      wallCheck = VectorHelper.GetFirstWallPoint((Vector3)wallCheck' Game.CursorPos' 5);                    // Define more position point                  Vector3 movePosition = wallCheck != null ? (Vector3)wallCheck : Game.CursorPos;                    // Update fleeTargetPosition                  var tempGrid = NavMesh.WorldToGrid(movePosition.X' movePosition.Y);                  fleeTargetPosition = NavMesh.GridToWorld((short)tempGrid.X' (short)tempGrid.Y);                    // Also check if we want to AA aswell                  Obj_AI_Base target = null;                  if (useAA)                  {                      var dashObjects = VectorHelper.GetDashObjects();                      if (dashObjects.Count > 0)                          target = dashObjects[0];                  }                    // Reset walljump indicators                  wallJumpPossible = false;                    // Only calculate stuff when our Q is up and there is a wall inbetween                  if (Q.IsReady() && wallCheck != null)                  {                      // Get our wall position to calculate from                      Vector3 wallPosition = movePosition;                        // Check 300 units to the cursor position in a 160 degree cone for a valid non-wall spot                      Vector2 direction = (Game.CursorPos.To2D() - wallPosition.To2D()).Normalized();                      float maxAngle = 80;                      float step = maxAngle / 20;                      float currentAngle = 0;                      float currentStep = 0;                      bool jumpTriggered = false;                      while (true)                      {                          // Validate the counter' break if no valid spot was found in previous loops                          if (currentStep > maxAngle && currentAngle < 0)                              break;                            // Check next angle                          if ((currentAngle == 0 || currentAngle < 0) && currentStep != 0)                          {                              currentAngle = (currentStep) * (float)Math.PI / 180;                              currentStep += step;                          }                          else if (currentAngle > 0)                              currentAngle = -currentAngle;                            Vector3 checkPoint;                            // One time only check for direct line of sight without rotating                          if (currentStep == 0)                          {                              currentStep = step;                              checkPoint = wallPosition + 300 * direction.To3D();                          }                          // Rotated check                          else                              checkPoint = wallPosition + 300 * direction.Rotated(currentAngle).To3D();                            // Check if the point is not a wall                          if (!checkPoint.IsWall())                          {                              // Check if there is a wall between the checkPoint and wallPosition                              wallCheck = VectorHelper.GetFirstWallPoint(checkPoint' wallPosition);                              if (wallCheck != null)                              {                                  // There is a wall inbetween' get the closes point to the wall' as precise as possible                                  Vector3 wallPositionOpposite = (Vector3)VectorHelper.GetFirstWallPoint((Vector3)wallCheck' wallPosition' 5);                                    // Check if it's worth to jump considering the path length                                  if (player.GetPath(wallPositionOpposite).ToList().To2D().PathLength() - player.Distance(wallPositionOpposite) > 200)                                  {                                      // Check the distance to the opposite side of the wall                                      if (player.Distance(wallPositionOpposite' true) < Math.Pow(300 - player.BoundingRadius / 2' 2))                                      {                                          // Make the jump happen                                          wallJumpInitTime = Environment.TickCount;                                          wallJumpTarget = wallPositionOpposite;                                          Q.Cast(wallPositionOpposite);                                            // Update jumpTriggered value to not orbwalk now since we want to jump                                          jumpTriggered = true;                                            // Break the loop                                          break;                                      }                                      // If we are not able to jump due to the distance' draw the spot to                                      // make the user notice the possibliy                                      else                                      {                                          // Update indicator values                                          wallJumpPossible = true;                                      }                                  }                              }                          }                      }                        // Check if the loop triggered the jump' if not just orbwalk                      if (!jumpTriggered)                          Orbwalking.Orbwalk(target' movePosition' 90f' 0f' false' false);                  }                  // Either no wall or Q on cooldown' just move towards to wall then                  else                      Orbwalking.Orbwalk(target' movePosition' 90f' 0f' false' false);              }
Magic Number,Kalista,ActiveModes,C:\repos\Hellsing_LeagueSharp\Kalista\ActiveModes.cs,OnFlee,The following statement contains a magic number: if (useWalljump)              {                  // We need to define a new move position since jumping over walls                  // requires you to be close to the specified wall. Therefore we set the move                  // point to be that specific piont. People will need to get used to it'                  // but this is how it works.                  var wallCheck = VectorHelper.GetFirstWallPoint(player.Position' Game.CursorPos);                    // Be more precise                  if (wallCheck != null)                      wallCheck = VectorHelper.GetFirstWallPoint((Vector3)wallCheck' Game.CursorPos' 5);                    // Define more position point                  Vector3 movePosition = wallCheck != null ? (Vector3)wallCheck : Game.CursorPos;                    // Update fleeTargetPosition                  var tempGrid = NavMesh.WorldToGrid(movePosition.X' movePosition.Y);                  fleeTargetPosition = NavMesh.GridToWorld((short)tempGrid.X' (short)tempGrid.Y);                    // Also check if we want to AA aswell                  Obj_AI_Base target = null;                  if (useAA)                  {                      var dashObjects = VectorHelper.GetDashObjects();                      if (dashObjects.Count > 0)                          target = dashObjects[0];                  }                    // Reset walljump indicators                  wallJumpPossible = false;                    // Only calculate stuff when our Q is up and there is a wall inbetween                  if (Q.IsReady() && wallCheck != null)                  {                      // Get our wall position to calculate from                      Vector3 wallPosition = movePosition;                        // Check 300 units to the cursor position in a 160 degree cone for a valid non-wall spot                      Vector2 direction = (Game.CursorPos.To2D() - wallPosition.To2D()).Normalized();                      float maxAngle = 80;                      float step = maxAngle / 20;                      float currentAngle = 0;                      float currentStep = 0;                      bool jumpTriggered = false;                      while (true)                      {                          // Validate the counter' break if no valid spot was found in previous loops                          if (currentStep > maxAngle && currentAngle < 0)                              break;                            // Check next angle                          if ((currentAngle == 0 || currentAngle < 0) && currentStep != 0)                          {                              currentAngle = (currentStep) * (float)Math.PI / 180;                              currentStep += step;                          }                          else if (currentAngle > 0)                              currentAngle = -currentAngle;                            Vector3 checkPoint;                            // One time only check for direct line of sight without rotating                          if (currentStep == 0)                          {                              currentStep = step;                              checkPoint = wallPosition + 300 * direction.To3D();                          }                          // Rotated check                          else                              checkPoint = wallPosition + 300 * direction.Rotated(currentAngle).To3D();                            // Check if the point is not a wall                          if (!checkPoint.IsWall())                          {                              // Check if there is a wall between the checkPoint and wallPosition                              wallCheck = VectorHelper.GetFirstWallPoint(checkPoint' wallPosition);                              if (wallCheck != null)                              {                                  // There is a wall inbetween' get the closes point to the wall' as precise as possible                                  Vector3 wallPositionOpposite = (Vector3)VectorHelper.GetFirstWallPoint((Vector3)wallCheck' wallPosition' 5);                                    // Check if it's worth to jump considering the path length                                  if (player.GetPath(wallPositionOpposite).ToList().To2D().PathLength() - player.Distance(wallPositionOpposite) > 200)                                  {                                      // Check the distance to the opposite side of the wall                                      if (player.Distance(wallPositionOpposite' true) < Math.Pow(300 - player.BoundingRadius / 2' 2))                                      {                                          // Make the jump happen                                          wallJumpInitTime = Environment.TickCount;                                          wallJumpTarget = wallPositionOpposite;                                          Q.Cast(wallPositionOpposite);                                            // Update jumpTriggered value to not orbwalk now since we want to jump                                          jumpTriggered = true;                                            // Break the loop                                          break;                                      }                                      // If we are not able to jump due to the distance' draw the spot to                                      // make the user notice the possibliy                                      else                                      {                                          // Update indicator values                                          wallJumpPossible = true;                                      }                                  }                              }                          }                      }                        // Check if the loop triggered the jump' if not just orbwalk                      if (!jumpTriggered)                          Orbwalking.Orbwalk(target' movePosition' 90f' 0f' false' false);                  }                  // Either no wall or Q on cooldown' just move towards to wall then                  else                      Orbwalking.Orbwalk(target' movePosition' 90f' 0f' false' false);              }
Magic Number,Kalista,ActiveModes,C:\repos\Hellsing_LeagueSharp\Kalista\ActiveModes.cs,OnFlee,The following statement contains a magic number: if (useWalljump)              {                  // We need to define a new move position since jumping over walls                  // requires you to be close to the specified wall. Therefore we set the move                  // point to be that specific piont. People will need to get used to it'                  // but this is how it works.                  var wallCheck = VectorHelper.GetFirstWallPoint(player.Position' Game.CursorPos);                    // Be more precise                  if (wallCheck != null)                      wallCheck = VectorHelper.GetFirstWallPoint((Vector3)wallCheck' Game.CursorPos' 5);                    // Define more position point                  Vector3 movePosition = wallCheck != null ? (Vector3)wallCheck : Game.CursorPos;                    // Update fleeTargetPosition                  var tempGrid = NavMesh.WorldToGrid(movePosition.X' movePosition.Y);                  fleeTargetPosition = NavMesh.GridToWorld((short)tempGrid.X' (short)tempGrid.Y);                    // Also check if we want to AA aswell                  Obj_AI_Base target = null;                  if (useAA)                  {                      var dashObjects = VectorHelper.GetDashObjects();                      if (dashObjects.Count > 0)                          target = dashObjects[0];                  }                    // Reset walljump indicators                  wallJumpPossible = false;                    // Only calculate stuff when our Q is up and there is a wall inbetween                  if (Q.IsReady() && wallCheck != null)                  {                      // Get our wall position to calculate from                      Vector3 wallPosition = movePosition;                        // Check 300 units to the cursor position in a 160 degree cone for a valid non-wall spot                      Vector2 direction = (Game.CursorPos.To2D() - wallPosition.To2D()).Normalized();                      float maxAngle = 80;                      float step = maxAngle / 20;                      float currentAngle = 0;                      float currentStep = 0;                      bool jumpTriggered = false;                      while (true)                      {                          // Validate the counter' break if no valid spot was found in previous loops                          if (currentStep > maxAngle && currentAngle < 0)                              break;                            // Check next angle                          if ((currentAngle == 0 || currentAngle < 0) && currentStep != 0)                          {                              currentAngle = (currentStep) * (float)Math.PI / 180;                              currentStep += step;                          }                          else if (currentAngle > 0)                              currentAngle = -currentAngle;                            Vector3 checkPoint;                            // One time only check for direct line of sight without rotating                          if (currentStep == 0)                          {                              currentStep = step;                              checkPoint = wallPosition + 300 * direction.To3D();                          }                          // Rotated check                          else                              checkPoint = wallPosition + 300 * direction.Rotated(currentAngle).To3D();                            // Check if the point is not a wall                          if (!checkPoint.IsWall())                          {                              // Check if there is a wall between the checkPoint and wallPosition                              wallCheck = VectorHelper.GetFirstWallPoint(checkPoint' wallPosition);                              if (wallCheck != null)                              {                                  // There is a wall inbetween' get the closes point to the wall' as precise as possible                                  Vector3 wallPositionOpposite = (Vector3)VectorHelper.GetFirstWallPoint((Vector3)wallCheck' wallPosition' 5);                                    // Check if it's worth to jump considering the path length                                  if (player.GetPath(wallPositionOpposite).ToList().To2D().PathLength() - player.Distance(wallPositionOpposite) > 200)                                  {                                      // Check the distance to the opposite side of the wall                                      if (player.Distance(wallPositionOpposite' true) < Math.Pow(300 - player.BoundingRadius / 2' 2))                                      {                                          // Make the jump happen                                          wallJumpInitTime = Environment.TickCount;                                          wallJumpTarget = wallPositionOpposite;                                          Q.Cast(wallPositionOpposite);                                            // Update jumpTriggered value to not orbwalk now since we want to jump                                          jumpTriggered = true;                                            // Break the loop                                          break;                                      }                                      // If we are not able to jump due to the distance' draw the spot to                                      // make the user notice the possibliy                                      else                                      {                                          // Update indicator values                                          wallJumpPossible = true;                                      }                                  }                              }                          }                      }                        // Check if the loop triggered the jump' if not just orbwalk                      if (!jumpTriggered)                          Orbwalking.Orbwalk(target' movePosition' 90f' 0f' false' false);                  }                  // Either no wall or Q on cooldown' just move towards to wall then                  else                      Orbwalking.Orbwalk(target' movePosition' 90f' 0f' false' false);              }
Magic Number,Kalista,Config,C:\repos\Hellsing_LeagueSharp\Kalista\Config.cs,Config,The following statement contains a magic number: ProcessLink("comboNumE"' subMenu.AddLinkedSlider("Stacks for E"' 5' 1' 20));
Magic Number,Kalista,Config,C:\repos\Hellsing_LeagueSharp\Kalista\Config.cs,Config,The following statement contains a magic number: ProcessLink("comboNumE"' subMenu.AddLinkedSlider("Stacks for E"' 5' 1' 20));
Magic Number,Kalista,Config,C:\repos\Hellsing_LeagueSharp\Kalista\Config.cs,Config,The following statement contains a magic number: ProcessLink("comboActive"' subMenu.AddLinkedKeyBind("Combo active"' 32' KeyBindType.Press));
Magic Number,Kalista,Config,C:\repos\Hellsing_LeagueSharp\Kalista\Config.cs,Config,The following statement contains a magic number: ProcessLink("harassMana"' subMenu.AddLinkedSlider("Mana usage in percent (%)"' 30));
Magic Number,Kalista,Config,C:\repos\Hellsing_LeagueSharp\Kalista\Config.cs,Config,The following statement contains a magic number: ProcessLink("waveNumQ"' subMenu.AddLinkedSlider("Minion kill number for Q"' 3' 1' 10));
Magic Number,Kalista,Config,C:\repos\Hellsing_LeagueSharp\Kalista\Config.cs,Config,The following statement contains a magic number: ProcessLink("waveNumQ"' subMenu.AddLinkedSlider("Minion kill number for Q"' 3' 1' 10));
Magic Number,Kalista,Config,C:\repos\Hellsing_LeagueSharp\Kalista\Config.cs,Config,The following statement contains a magic number: ProcessLink("waveNumE"' subMenu.AddLinkedSlider("Minion kill number for E"' 2' 1' 10));
Magic Number,Kalista,Config,C:\repos\Hellsing_LeagueSharp\Kalista\Config.cs,Config,The following statement contains a magic number: ProcessLink("waveNumE"' subMenu.AddLinkedSlider("Minion kill number for E"' 2' 1' 10));
Magic Number,Kalista,Config,C:\repos\Hellsing_LeagueSharp\Kalista\Config.cs,Config,The following statement contains a magic number: ProcessLink("waveMana"' subMenu.AddLinkedSlider("Mana usage in percent (%)"' 30));
Magic Number,Kalista,Config,C:\repos\Hellsing_LeagueSharp\Kalista\Config.cs,Config,The following statement contains a magic number: ProcessLink("spellReductionE"' subMenu.AddLinkedSlider("E damage reduction"' 20));
Magic Number,Kalista,Config,C:\repos\Hellsing_LeagueSharp\Kalista\Config.cs,Config,The following statement contains a magic number: ProcessLink("drawDamageE"' subMenu.AddLinkedCircle("E damage on healthbar"' true' Color.FromArgb(150' Color.Green)' 0));
Magic Number,Kalista,Config,C:\repos\Hellsing_LeagueSharp\Kalista\Config.cs,Config,The following statement contains a magic number: ProcessLink("drawRangeQ"' subMenu.AddLinkedCircle("Q range"' true' Color.FromArgb(150' Color.IndianRed)' SpellManager.Q.Range));
Magic Number,Kalista,Config,C:\repos\Hellsing_LeagueSharp\Kalista\Config.cs,Config,The following statement contains a magic number: ProcessLink("drawRangeW"' subMenu.AddLinkedCircle("W range"' true' Color.FromArgb(150' Color.MediumPurple)' SpellManager.W.Range));
Magic Number,Kalista,Config,C:\repos\Hellsing_LeagueSharp\Kalista\Config.cs,Config,The following statement contains a magic number: ProcessLink("drawRangeEsmall"' subMenu.AddLinkedCircle("E range (leaving)"' false' Color.FromArgb(150' Color.DarkRed)' SpellManager.E.Range - 200));
Magic Number,Kalista,Config,C:\repos\Hellsing_LeagueSharp\Kalista\Config.cs,Config,The following statement contains a magic number: ProcessLink("drawRangeEsmall"' subMenu.AddLinkedCircle("E range (leaving)"' false' Color.FromArgb(150' Color.DarkRed)' SpellManager.E.Range - 200));
Magic Number,Kalista,Config,C:\repos\Hellsing_LeagueSharp\Kalista\Config.cs,Config,The following statement contains a magic number: ProcessLink("drawRangeEactual"' subMenu.AddLinkedCircle("E range (actual)"' true' Color.FromArgb(150' Color.DarkRed)' SpellManager.E.Range));
Magic Number,Kalista,Config,C:\repos\Hellsing_LeagueSharp\Kalista\Config.cs,Config,The following statement contains a magic number: ProcessLink("drawRangeR"' subMenu.AddLinkedCircle("R range"' false' Color.FromArgb(150' Color.Red)' SpellManager.R.Range));
Magic Number,Kalista,CustomDamageIndicator,C:\repos\Hellsing_LeagueSharp\Kalista\CustomDamageIndicator.cs,Drawing_OnDraw,The following statement contains a magic number: if (Enabled)              {                  foreach (var unit in HeroManager.Enemies.Where(u => u.IsValidTarget() && u.IsHPBarRendered))                  {                      // Get damage to unit                      var damage = damageToUnit(unit);                        // Continue on 0 damage                      if (damage <= 0)                          continue;                        // Get remaining HP after damage applied in percent and the current percent of health                      var damagePercentage = ((unit.Health - damage) > 0 ? (unit.Health - damage) : 0) / unit.MaxHealth;                      var currentHealthPercentage = unit.Health / unit.MaxHealth;                        // Calculate start and end point of the bar indicator                      var startPoint = new Vector2((int)(unit.HPBarPosition.X + BarOffset.X + damagePercentage * BAR_WIDTH)' (int)(unit.HPBarPosition.Y + BarOffset.Y) - 5);                      var endPoint = new Vector2((int)(unit.HPBarPosition.X + BarOffset.X + currentHealthPercentage * BAR_WIDTH) + 1' (int)(unit.HPBarPosition.Y + BarOffset.Y) - 5);                        // Draw the line                      Drawing.DrawLine(startPoint' endPoint' LINE_THICKNESS' DrawingColor);                  }              }
Magic Number,Kalista,CustomDamageIndicator,C:\repos\Hellsing_LeagueSharp\Kalista\CustomDamageIndicator.cs,Drawing_OnDraw,The following statement contains a magic number: if (Enabled)              {                  foreach (var unit in HeroManager.Enemies.Where(u => u.IsValidTarget() && u.IsHPBarRendered))                  {                      // Get damage to unit                      var damage = damageToUnit(unit);                        // Continue on 0 damage                      if (damage <= 0)                          continue;                        // Get remaining HP after damage applied in percent and the current percent of health                      var damagePercentage = ((unit.Health - damage) > 0 ? (unit.Health - damage) : 0) / unit.MaxHealth;                      var currentHealthPercentage = unit.Health / unit.MaxHealth;                        // Calculate start and end point of the bar indicator                      var startPoint = new Vector2((int)(unit.HPBarPosition.X + BarOffset.X + damagePercentage * BAR_WIDTH)' (int)(unit.HPBarPosition.Y + BarOffset.Y) - 5);                      var endPoint = new Vector2((int)(unit.HPBarPosition.X + BarOffset.X + currentHealthPercentage * BAR_WIDTH) + 1' (int)(unit.HPBarPosition.Y + BarOffset.Y) - 5);                        // Draw the line                      Drawing.DrawLine(startPoint' endPoint' LINE_THICKNESS' DrawingColor);                  }              }
Magic Number,Kalista,ItemManager,C:\repos\Hellsing_LeagueSharp\Kalista\ItemManager.cs,UseYoumuu,The following statement contains a magic number: if (Config.BoolLinks["itemsYoumuu"].Value && YOUMUU.IsReady() && target.IsValidTarget(Orbwalking.GetRealAutoAttackRange(player) + 50))              {                  return YOUMUU.Cast();              }
Magic Number,Kalista,Program,C:\repos\Hellsing_LeagueSharp\Kalista\Program.cs,Obj_AI_Base_OnProcessSpellCast,The following statement contains a magic number: if (sender.IsMe)              {                  // Rend                  if (args.SData.Name == "KalistaExpungeWrapper")                  {                      // Make the orbwalker attack again' might get stuck after casting E                      Utility.DelayAction.Add(250' Orbwalking.ResetAutoAttackTimer);                  }              }
Magic Number,Kalista,Program,C:\repos\Hellsing_LeagueSharp\Kalista\Program.cs,Drawing_OnDraw,The following statement contains a magic number: if (ActiveModes.fleeTargetPosition.HasValue)                  Render.Circle.DrawCircle(ActiveModes.fleeTargetPosition.Value' 50' ActiveModes.wallJumpPossible ? Color.Green : SpellManager.Q.IsReady() ? Color.Red : Color.Teal' 10);
Magic Number,Kalista,Program,C:\repos\Hellsing_LeagueSharp\Kalista\Program.cs,Drawing_OnDraw,The following statement contains a magic number: if (ActiveModes.fleeTargetPosition.HasValue)                  Render.Circle.DrawCircle(ActiveModes.fleeTargetPosition.Value' 50' ActiveModes.wallJumpPossible ? Color.Green : SpellManager.Q.IsReady() ? Color.Red : Color.Teal' 10);
Magic Number,Kalista,SoulBoundSaver,C:\repos\Hellsing_LeagueSharp\Kalista\SoulBoundSaver.cs,Game_OnGameUpdate,The following statement contains a magic number: if (SoulBound == null)              {                  // TODO: Get the buff display name' I'm not at home so I needed to use xQx' method' which I don't like :D                  SoulBound = HeroManager.Allies.Find(h => h.Buffs.Any(b => b.Caster.IsMe && b.Name.Contains("kalistacoopstrikeally")));              }              else if (R.IsEnabledAndReady("misc"))              {                  // Ult casting                  if (SoulBound.HealthPercent < 5 && SoulBound.CountEnemiesInRange(500) > 0 ||                      IncomingDamage > SoulBound.Health)                      R.Cast();              }
Magic Number,Kalista,SoulBoundSaver,C:\repos\Hellsing_LeagueSharp\Kalista\SoulBoundSaver.cs,Game_OnGameUpdate,The following statement contains a magic number: if (SoulBound == null)              {                  // TODO: Get the buff display name' I'm not at home so I needed to use xQx' method' which I don't like :D                  SoulBound = HeroManager.Allies.Find(h => h.Buffs.Any(b => b.Caster.IsMe && b.Name.Contains("kalistacoopstrikeally")));              }              else if (R.IsEnabledAndReady("misc"))              {                  // Ult casting                  if (SoulBound.HealthPercent < 5 && SoulBound.CountEnemiesInRange(500) > 0 ||                      IncomingDamage > SoulBound.Health)                      R.Cast();              }
Magic Number,Kalista,SoulBoundSaver,C:\repos\Hellsing_LeagueSharp\Kalista\SoulBoundSaver.cs,Obj_AI_Base_OnProcessSpellCast,The following statement contains a magic number: if (sender.IsEnemy)              {                  // Calculations to save your souldbound                  if (SoulBound != null && R.IsEnabled("misc"))                  {                      // Auto attacks                      if ((!(sender is Obj_AI_Hero) || args.SData.IsAutoAttack()) && args.Target != null && args.Target.NetworkId == SoulBound.NetworkId)                      {                          // Calculate arrival time and damage                          _incomingDamage.Add(SoulBound.ServerPosition.Distance(sender.ServerPosition) / args.SData.MissileSpeed + Game.Time' (float)sender.GetAutoAttackDamage(SoulBound));                      }                      // Sender is a hero                      else if (sender is Obj_AI_Hero)                      {                          var attacker = (Obj_AI_Hero)sender;                          var slot = attacker.GetSpellSlot(args.SData.Name);                            if (slot != SpellSlot.Unknown)                          {                              if (slot == attacker.GetSpellSlot("SummonerDot") && args.Target != null && args.Target.NetworkId == SoulBound.NetworkId)                              {                                  // Ingite damage (dangerous)                                  _instantDamage.Add(Game.Time + 2' (float)attacker.GetSummonerSpellDamage(SoulBound' Damage.SummonerSpell.Ignite));                              }                              else if (slot.HasFlag(SpellSlot.Q | SpellSlot.W | SpellSlot.E | SpellSlot.R) &&                                  ((args.Target != null && args.Target.NetworkId == SoulBound.NetworkId) ||                                  args.End.Distance(SoulBound.ServerPosition' true) < Math.Pow(args.SData.LineWidth' 2)))                              {                                  // Instant damage to target                                  _instantDamage.Add(Game.Time + 2' (float)attacker.GetSpellDamage(SoulBound' slot));                              }                          }                      }                  }              }
Magic Number,Kalista,SoulBoundSaver,C:\repos\Hellsing_LeagueSharp\Kalista\SoulBoundSaver.cs,Obj_AI_Base_OnProcessSpellCast,The following statement contains a magic number: if (sender.IsEnemy)              {                  // Calculations to save your souldbound                  if (SoulBound != null && R.IsEnabled("misc"))                  {                      // Auto attacks                      if ((!(sender is Obj_AI_Hero) || args.SData.IsAutoAttack()) && args.Target != null && args.Target.NetworkId == SoulBound.NetworkId)                      {                          // Calculate arrival time and damage                          _incomingDamage.Add(SoulBound.ServerPosition.Distance(sender.ServerPosition) / args.SData.MissileSpeed + Game.Time' (float)sender.GetAutoAttackDamage(SoulBound));                      }                      // Sender is a hero                      else if (sender is Obj_AI_Hero)                      {                          var attacker = (Obj_AI_Hero)sender;                          var slot = attacker.GetSpellSlot(args.SData.Name);                            if (slot != SpellSlot.Unknown)                          {                              if (slot == attacker.GetSpellSlot("SummonerDot") && args.Target != null && args.Target.NetworkId == SoulBound.NetworkId)                              {                                  // Ingite damage (dangerous)                                  _instantDamage.Add(Game.Time + 2' (float)attacker.GetSummonerSpellDamage(SoulBound' Damage.SummonerSpell.Ignite));                              }                              else if (slot.HasFlag(SpellSlot.Q | SpellSlot.W | SpellSlot.E | SpellSlot.R) &&                                  ((args.Target != null && args.Target.NetworkId == SoulBound.NetworkId) ||                                  args.End.Distance(SoulBound.ServerPosition' true) < Math.Pow(args.SData.LineWidth' 2)))                              {                                  // Instant damage to target                                  _instantDamage.Add(Game.Time + 2' (float)attacker.GetSpellDamage(SoulBound' slot));                              }                          }                      }                  }              }
Magic Number,Kalista,SoulBoundSaver,C:\repos\Hellsing_LeagueSharp\Kalista\SoulBoundSaver.cs,Obj_AI_Base_OnProcessSpellCast,The following statement contains a magic number: if (sender.IsEnemy)              {                  // Calculations to save your souldbound                  if (SoulBound != null && R.IsEnabled("misc"))                  {                      // Auto attacks                      if ((!(sender is Obj_AI_Hero) || args.SData.IsAutoAttack()) && args.Target != null && args.Target.NetworkId == SoulBound.NetworkId)                      {                          // Calculate arrival time and damage                          _incomingDamage.Add(SoulBound.ServerPosition.Distance(sender.ServerPosition) / args.SData.MissileSpeed + Game.Time' (float)sender.GetAutoAttackDamage(SoulBound));                      }                      // Sender is a hero                      else if (sender is Obj_AI_Hero)                      {                          var attacker = (Obj_AI_Hero)sender;                          var slot = attacker.GetSpellSlot(args.SData.Name);                            if (slot != SpellSlot.Unknown)                          {                              if (slot == attacker.GetSpellSlot("SummonerDot") && args.Target != null && args.Target.NetworkId == SoulBound.NetworkId)                              {                                  // Ingite damage (dangerous)                                  _instantDamage.Add(Game.Time + 2' (float)attacker.GetSummonerSpellDamage(SoulBound' Damage.SummonerSpell.Ignite));                              }                              else if (slot.HasFlag(SpellSlot.Q | SpellSlot.W | SpellSlot.E | SpellSlot.R) &&                                  ((args.Target != null && args.Target.NetworkId == SoulBound.NetworkId) ||                                  args.End.Distance(SoulBound.ServerPosition' true) < Math.Pow(args.SData.LineWidth' 2)))                              {                                  // Instant damage to target                                  _instantDamage.Add(Game.Time + 2' (float)attacker.GetSpellDamage(SoulBound' slot));                              }                          }                      }                  }              }
Magic Number,Kalista,SpellManager,C:\repos\Hellsing_LeagueSharp\Kalista\SpellManager.cs,SpellManager,The following statement contains a magic number: Q = new Spell(SpellSlot.Q' 1150);
Magic Number,Kalista,SpellManager,C:\repos\Hellsing_LeagueSharp\Kalista\SpellManager.cs,SpellManager,The following statement contains a magic number: W = new Spell(SpellSlot.W' 5000);
Magic Number,Kalista,SpellManager,C:\repos\Hellsing_LeagueSharp\Kalista\SpellManager.cs,SpellManager,The following statement contains a magic number: E = new Spell(SpellSlot.E' 1000);
Magic Number,Kalista,SpellManager,C:\repos\Hellsing_LeagueSharp\Kalista\SpellManager.cs,SpellManager,The following statement contains a magic number: R = new Spell(SpellSlot.R' 1500);
Magic Number,Kalista,SpellManager,C:\repos\Hellsing_LeagueSharp\Kalista\SpellManager.cs,SpellManager,The following statement contains a magic number: Q.SetSkillshot(0.25f' 40' 2400' true' SkillshotType.SkillshotLine);
Magic Number,Kalista,SpellManager,C:\repos\Hellsing_LeagueSharp\Kalista\SpellManager.cs,SpellManager,The following statement contains a magic number: Q.SetSkillshot(0.25f' 40' 2400' true' SkillshotType.SkillshotLine);
Magic Number,Kalista,UpdateChecker,C:\repos\Hellsing_LeagueSharp\Kalista\UpdateChecker.cs,Initialize,The following statement contains a magic number: using (var client = new WebClient())              {                  new Thread(async () =>                  {                      try                      {                          var data = await client.DownloadStringTaskAsync(string.Format("https://raw.github.com/{0}/Properties/AssemblyInfo.cs"' path));                          foreach (var line in data.Split('\n'))                          {                              // Skip comments                              if (line.StartsWith("//"))                              {                                  continue;                              }                                // Search for AssemblyVersion                              if (line.StartsWith("[assembly: AssemblyVersion"))                              {                                  // TODO: Use Regex for this...                                  var serverVersion = new System.Version(line.Substring(28' (line.Length - 4) - 28 + 1));                                    // Compare both versions                                  var assemblyName = Assembly.GetExecutingAssembly().GetName();                                  if (serverVersion > assemblyName.Version)                                  {                                      Utility.DelayAction.Add(5000' () =>                                      {                                          Game.PrintChat("[{0}] Update available: {1} => {2}!"'                                              assemblyName.Name'                                              assemblyName.Version'                                              serverVersion);                                      });                                  }                              }                          }                      }                      catch (Exception e)                      {                          Console.WriteLine("An error occured while trying to check for an update:\n{0}"' e.Message);                      }                  }).Start();              }
Magic Number,Kalista,UpdateChecker,C:\repos\Hellsing_LeagueSharp\Kalista\UpdateChecker.cs,Initialize,The following statement contains a magic number: using (var client = new WebClient())              {                  new Thread(async () =>                  {                      try                      {                          var data = await client.DownloadStringTaskAsync(string.Format("https://raw.github.com/{0}/Properties/AssemblyInfo.cs"' path));                          foreach (var line in data.Split('\n'))                          {                              // Skip comments                              if (line.StartsWith("//"))                              {                                  continue;                              }                                // Search for AssemblyVersion                              if (line.StartsWith("[assembly: AssemblyVersion"))                              {                                  // TODO: Use Regex for this...                                  var serverVersion = new System.Version(line.Substring(28' (line.Length - 4) - 28 + 1));                                    // Compare both versions                                  var assemblyName = Assembly.GetExecutingAssembly().GetName();                                  if (serverVersion > assemblyName.Version)                                  {                                      Utility.DelayAction.Add(5000' () =>                                      {                                          Game.PrintChat("[{0}] Update available: {1} => {2}!"'                                              assemblyName.Name'                                              assemblyName.Version'                                              serverVersion);                                      });                                  }                              }                          }                      }                      catch (Exception e)                      {                          Console.WriteLine("An error occured while trying to check for an update:\n{0}"' e.Message);                      }                  }).Start();              }
Magic Number,Kalista,UpdateChecker,C:\repos\Hellsing_LeagueSharp\Kalista\UpdateChecker.cs,Initialize,The following statement contains a magic number: using (var client = new WebClient())              {                  new Thread(async () =>                  {                      try                      {                          var data = await client.DownloadStringTaskAsync(string.Format("https://raw.github.com/{0}/Properties/AssemblyInfo.cs"' path));                          foreach (var line in data.Split('\n'))                          {                              // Skip comments                              if (line.StartsWith("//"))                              {                                  continue;                              }                                // Search for AssemblyVersion                              if (line.StartsWith("[assembly: AssemblyVersion"))                              {                                  // TODO: Use Regex for this...                                  var serverVersion = new System.Version(line.Substring(28' (line.Length - 4) - 28 + 1));                                    // Compare both versions                                  var assemblyName = Assembly.GetExecutingAssembly().GetName();                                  if (serverVersion > assemblyName.Version)                                  {                                      Utility.DelayAction.Add(5000' () =>                                      {                                          Game.PrintChat("[{0}] Update available: {1} => {2}!"'                                              assemblyName.Name'                                              assemblyName.Version'                                              serverVersion);                                      });                                  }                              }                          }                      }                      catch (Exception e)                      {                          Console.WriteLine("An error occured while trying to check for an update:\n{0}"' e.Message);                      }                  }).Start();              }
Magic Number,Kalista,UpdateChecker,C:\repos\Hellsing_LeagueSharp\Kalista\UpdateChecker.cs,Initialize,The following statement contains a magic number: using (var client = new WebClient())              {                  new Thread(async () =>                  {                      try                      {                          var data = await client.DownloadStringTaskAsync(string.Format("https://raw.github.com/{0}/Properties/AssemblyInfo.cs"' path));                          foreach (var line in data.Split('\n'))                          {                              // Skip comments                              if (line.StartsWith("//"))                              {                                  continue;                              }                                // Search for AssemblyVersion                              if (line.StartsWith("[assembly: AssemblyVersion"))                              {                                  // TODO: Use Regex for this...                                  var serverVersion = new System.Version(line.Substring(28' (line.Length - 4) - 28 + 1));                                    // Compare both versions                                  var assemblyName = Assembly.GetExecutingAssembly().GetName();                                  if (serverVersion > assemblyName.Version)                                  {                                      Utility.DelayAction.Add(5000' () =>                                      {                                          Game.PrintChat("[{0}] Update available: {1} => {2}!"'                                              assemblyName.Name'                                              assemblyName.Version'                                              serverVersion);                                      });                                  }                              }                          }                      }                      catch (Exception e)                      {                          Console.WriteLine("An error occured while trying to check for an update:\n{0}"' e.Message);                      }                  }).Start();              }
Magic Number,Kalista,VectorHelper,C:\repos\Hellsing_LeagueSharp\Kalista\VectorHelper.cs,IsLyingInCone,The following statement contains a magic number: double halfAperture = aperture / 2;
Missing Default,Kalista,SpellQueue,C:\repos\Hellsing_LeagueSharp\Kalista\SpellQueue.cs,Spellbook_OnCastSpell,The following switch statement is missing a default case: switch (args.Slot)                  {                      case SpellSlot.Q:                      case SpellSlot.W:                      case SpellSlot.E:                      case SpellSlot.R:                            if (IsReady)                          {                              // We are safe to cast a spell                              sendTime = TickCount;                          }                          else                          {                              // Don't allow the spellcast                              args.Process = false;                          }                          break;                  }
