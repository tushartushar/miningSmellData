Implementation smell,Namespace,Class,File,Method,Description
Long Method,Gnar,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\ActiveModes.cs,OnCombo,The method has 165 lines of code.
Complex Method,Gnar,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\ActiveModes.cs,OnCombo,Cyclomatic complexity of the method is 32
Complex Method,Gnar,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\ActiveModes.cs,OnHarass,Cyclomatic complexity of the method is 9
Complex Method,Gnar,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\ActiveModes.cs,OnWaveClear,Cyclomatic complexity of the method is 11
Complex Method,Gnar,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\ActiveModes.cs,OnJungleClear,Cyclomatic complexity of the method is 11
Complex Method,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,Cyclomatic complexity of the method is 16
Long Parameter List,Gnar,Program,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Program.cs,DrawText,The method has 5 parameters. Parameters: aFont' aText' aPosX' aPosY' aColor
Long Statement,Gnar,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\ActiveModes.cs,OnCombo,The length of the statement  "                            var arrivalPoint = player.ServerPosition.Extend(prediction.CastPosition' player.ServerPosition.Distance(prediction.CastPosition) + E.Range); " is 140.
Long Statement,Gnar,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\ActiveModes.cs,OnCombo,The length of the statement  "                            if (!ObjectManager.Get<Obj_AI_Turret>().Any(t => t.Team != player.Team && !t.IsDead && t.Distance(arrivalPoint' true) < 775 * 775)) " is 131.
Long Statement,Gnar,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\ActiveModes.cs,OnHarass,The length of the statement  "            if (Q.IsEnabledAndReady(Mode.HARASS) && (player.IsMiniGnar() && (player.IsAboutToTransform() ? Config.BoolLinks["harassUseQMega"].Value : true))) " is 145.
Long Statement,Gnar,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\ActiveModes.cs,OnWaveClear,The length of the statement  "                    var minions = MinionManager.GetMinions(Q.Range' MinionTypes.All' MinionTeam.Enemy' MinionOrderTypes.MaxHealth).Where(m => " is 121.
Long Statement,Gnar,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\ActiveModes.cs,OnWaveClear,The length of the statement  "                    var minions = MinionManager.GetMinions(Q.Range' MinionTypes.All' MinionTeam.Enemy' MinionOrderTypes.MaxHealth).Where(m => " is 121.
Long Statement,Gnar,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\ActiveModes.cs,OnJungleClear,The length of the statement  "                if (Q.IsEnabledAndReady(Mode.JUNGLE) && (player.IsAboutToTransform() ? Config.BoolLinks["jungleUseQMega"].Value : true)) " is 120.
Long Statement,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The length of the statement  "                        // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds. " is 123.
Long Statement,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The length of the statement  "                        // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once. " is 136.
Long Statement,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The length of the statement  "                        // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage. " is 132.
Long Statement,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The length of the statement  "                        // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage " is 146.
Long Statement,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The length of the statement  "                        var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId); " is 155.
Long Statement,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The length of the statement  "                            damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth; " is 156.
Long Statement,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The length of the statement  "                        // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further. " is 141.
Long Statement,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The length of the statement  "                        // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy. " is 135.
Long Statement,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The length of the statement  "                        // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing. " is 139.
Long Statement,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The length of the statement  "                        // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds. " is 157.
Long Statement,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The length of the statement  "                        extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod); " is 128.
Long Statement,Gnar,Extensions,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Extensions.cs,IsAboutToTransform,The length of the statement  "            return target.IsMiniGnar() && (Math.Abs(target.Mana - target.MaxMana) < 0.00001 && (target.HasBuff("gnartransformsoon") || target.HasBuff("gnartransform"))) || // Mini to mega " is 175.
Long Statement,Gnar,ItemManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\ItemManager.cs,UseYoumuu,The length of the statement  "            if (Config.BoolLinks["itemsYoumuu"].Value && YOUMUU.IsReady() && target.IsValidTarget(Orbwalking.GetRealAutoAttackRange(player) + 50)) " is 134.
Long Statement,Gnar,Program,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Program.cs,Drawing_OnDraw,The length of the statement  "                var color = exTime > 4 ? System.Drawing.Color.Yellow : System.Drawing.Color.Red; Render.Circle.DrawCircle(gnarRock.Object.Position' 150' color' 6); " is 147.
Long Statement,Gnar,Program,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Program.cs,Drawing_OnDraw,The length of the statement  "                var line = new Geometry.Polygon.Line(ObjectManager.Player.Position' gnarRock.RockPos' ObjectManager.Player.Distance(gnarRock.RockPos)); " is 135.
Long Statement,Gnar,Program,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Program.cs,DrawText,The length of the statement  "            aFont.DrawText(null' aText' aPosX + 2' aPosY + 2' aColor != SharpDX.Color.Black ? SharpDX.Color.Black : SharpDX.Color.White); " is 125.
Long Statement,Gnar,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\SpellManager.cs,GetFarmLocation,The length of the statement  "            var positions = MinionManager.GetMinionsPredictedPositions(targets' spell.Delay' spell.Width' spell.Speed' spell.From' spell.Range' spell.Collision' spell.Type); " is 161.
Complex Conditional,Gnar,ItemManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\ItemManager.cs,UseBotrk,The conditional expression  "Config.BoolLinks["itemsBotrk"].Value && BOTRK.IsReady() && target.IsValidTarget(BOTRK.Range) &&                  player.Health + player.GetItemDamage(target' Damage.DamageItems.Botrk) < player.MaxHealth"  is complex.
Magic Number,Gnar,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\ActiveModes.cs,OnPermaActive,The following statement contains a magic number: ally.HealthPercent < 15 && ally.CountEnemiesInRange(700) > 0
Magic Number,Gnar,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\ActiveModes.cs,OnPermaActive,The following statement contains a magic number: ally.HealthPercent < 15 && ally.CountEnemiesInRange(700) > 0
Magic Number,Gnar,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\ActiveModes.cs,OnPermaActive,The following statement contains a magic number: ObjectManager.Get<Obj_AI_Hero>().Where(h => h.Team == player.Team && h.IsValidTarget(700' false))
Magic Number,Gnar,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\ActiveModes.cs,OnCombo,The following statement contains a magic number: var target = TargetSelector.GetTarget(600' TargetSelector.DamageType.True);
Magic Number,Gnar,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\ActiveModes.cs,OnCombo,The following statement contains a magic number: switch (prediction.Hitchance)                          {                              case HitChance.High:                              case HitChance.VeryHigh:                              case HitChance.Immobile:                                                                    // Regular Q cast                                  Q.Cast(prediction.CastPosition);                                  break;                                case HitChance.Collision:                                    // Special case for colliding enemies                                  var colliding = prediction.CollisionObjects.OrderBy(o => o.Distance(player' true)).ToList();                                  if (colliding.Count > 0)                                  {                                      // First colliding target is < 100 units away from our main target                                      if (colliding[0].Distance(target' true) < 10000)                                          Q.Cast(prediction.CastPosition);                                  }                                  break;                          }
Magic Number,Gnar,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\ActiveModes.cs,OnCombo,The following statement contains a magic number: var target = E.GetTarget(E.Width / 2);
Magic Number,Gnar,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\ActiveModes.cs,OnCombo,The following statement contains a magic number: !ObjectManager.Get<Obj_AI_Turret>().Any(t => t.Team != player.Team && !t.IsDead && t.Distance(arrivalPoint' true) < 775 * 775)
Magic Number,Gnar,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\ActiveModes.cs,OnCombo,The following statement contains a magic number: !ObjectManager.Get<Obj_AI_Turret>().Any(t => t.Team != player.Team && !t.IsDead && t.Distance(arrivalPoint' true) < 775 * 775)
Magic Number,Gnar,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\ActiveModes.cs,OnHarass,The following statement contains a magic number: switch (prediction.Hitchance)                      {                          case HitChance.High:                          case HitChance.VeryHigh:                          case HitChance.Immobile:                                // Regular Q cast                              Q.Cast(prediction.CastPosition);                              break;                            case HitChance.Collision:                                // Special case for colliding enemies                              var colliding = prediction.CollisionObjects.OrderBy(o => o.Distance(player' true)).ToList();                              if (colliding.Count > 0)                              {                                  // First colliding target is < 100 units away from our main target                                  if (colliding[0].Distance(target' true) < 10000)                                      Q.Cast(prediction.CastPosition);                              }                              break;                      }
Magic Number,Gnar,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\ActiveModes.cs,OnWaveClear,The following statement contains a magic number: var minions = MinionManager.GetMinions(Q.Range' MinionTypes.All' MinionTeam.Enemy' MinionOrderTypes.MaxHealth).Where(m =>                          m.Health > player.GetAutoAttackDamage(m) / 2 && m.Health < Q.GetRealDamage(m));
Magic Number,Gnar,Config,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Config.cs,Config,The following statement contains a magic number: ProcessLink("comboActive"' subMenu.AddLinkedKeyBind("Combo active"' 32' KeyBindType.Press));
Magic Number,Gnar,Config,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Config.cs,Config,The following statement contains a magic number: ProcessLink("drawRangeQ"' subSubMenu.AddLinkedCircle("Q range"' true' Color.FromArgb(150' Color.IndianRed)' SpellManager.QMini.Range));
Magic Number,Gnar,Config,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Config.cs,Config,The following statement contains a magic number: ProcessLink("drawRangeE"' subSubMenu.AddLinkedCircle("E range"' true' Color.FromArgb(150' Color.Azure)' SpellManager.EMini.Range));
Magic Number,Gnar,Config,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Config.cs,Config,The following statement contains a magic number: ProcessLink("drawRangeQMega"' subSubMenu.AddLinkedCircle("Q range"' true' Color.FromArgb(150' Color.IndianRed)' SpellManager.QMega.Range));
Magic Number,Gnar,Config,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Config.cs,Config,The following statement contains a magic number: ProcessLink("drawRangeWMega"' subSubMenu.AddLinkedCircle("W range"' false' Color.FromArgb(150' Color.Azure)' SpellManager.EMega.Range));
Magic Number,Gnar,Config,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Config.cs,Config,The following statement contains a magic number: ProcessLink("drawRangeEMega"' subSubMenu.AddLinkedCircle("E range"' true' Color.FromArgb(150' Color.IndianRed)' SpellManager.QMega.Range));
Magic Number,Gnar,Config,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Config.cs,Config,The following statement contains a magic number: ProcessLink("drawRangeRMega"' subSubMenu.AddLinkedCircle("R range"' true' Color.FromArgb(150' Color.Azure)' SpellManager.EMega.Range));
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Magic Number,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following statement contains a magic number: return (float)player.CalcDamage(target' damageType' damage) + extraDamage - 20;
Magic Number,Gnar,Extensions,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Extensions.cs,IsAboutToTransform,The following statement contains a magic number: return target.IsMiniGnar() && (Math.Abs(target.Mana - target.MaxMana) < 0.00001 && (target.HasBuff("gnartransformsoon") || target.HasBuff("gnartransform"))) || // Mini to mega                  target.IsMegaGnar() && target.ManaPercent <= 0.1;
Magic Number,Gnar,Extensions,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Extensions.cs,IsAboutToTransform,The following statement contains a magic number: return target.IsMiniGnar() && (Math.Abs(target.Mana - target.MaxMana) < 0.00001 && (target.HasBuff("gnartransformsoon") || target.HasBuff("gnartransform"))) || // Mini to mega                  target.IsMegaGnar() && target.ManaPercent <= 0.1;
Magic Number,Gnar,ItemManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\ItemManager.cs,UseYoumuu,The following statement contains a magic number: Config.BoolLinks["itemsYoumuu"].Value && YOUMUU.IsReady() && target.IsValidTarget(Orbwalking.GetRealAutoAttackRange(player) + 50)
Magic Number,Gnar,Program,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Program.cs,Game_OnGameLoad,The following statement contains a magic number: TextAxe = new Font(                  Drawing.Direct3DDevice'                  new FontDescription                  {                      FaceName = "Segoe UI"'                      Height = 39'                      OutputPrecision = FontPrecision.Default'                      Quality = FontQuality.ClearTypeNatural'                  });
Magic Number,Gnar,Program,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Program.cs,Game_OnGameLoad,The following statement contains a magic number: TextLittle = new Font(                  Drawing.Direct3DDevice'                  new FontDescription                  {                      FaceName = "Segoe UI"'                      Height = 15'                      OutputPrecision = FontPrecision.Default'                      Quality = FontQuality.ClearTypeNatural'                  });
Magic Number,Gnar,Program,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Program.cs,GameObject_OnCreate,The following statement contains a magic number: gnarRock.ExpireTime = Game.Time + 7;
Magic Number,Gnar,Program,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Program.cs,Drawing_OnDraw,The following statement contains a magic number: var color = exTime > 4 ? System.Drawing.Color.Yellow : System.Drawing.Color.Red;
Magic Number,Gnar,Program,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Program.cs,Drawing_OnDraw,The following statement contains a magic number: Render.Circle.DrawCircle(gnarRock.Object.Position' 150' color' 6);
Magic Number,Gnar,Program,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Program.cs,Drawing_OnDraw,The following statement contains a magic number: Render.Circle.DrawCircle(gnarRock.Object.Position' 150' color' 6);
Magic Number,Gnar,Program,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Program.cs,Drawing_OnDraw,The following statement contains a magic number: line.Draw(color' 2);
Magic Number,Gnar,Program,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Program.cs,Drawing_OnDraw,The following statement contains a magic number: Color vTimeColor = time.TotalSeconds > 4 ? Color.White : Color.Red;
Magic Number,Gnar,Program,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Program.cs,Drawing_OnDraw,The following statement contains a magic number: DrawText(TextAxe' display' (int)pos.X - display.Length * 3' (int)pos.Y - 65' vTimeColor);
Magic Number,Gnar,Program,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Program.cs,Drawing_OnDraw,The following statement contains a magic number: DrawText(TextAxe' display' (int)pos.X - display.Length * 3' (int)pos.Y - 65' vTimeColor);
Magic Number,Gnar,Program,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Program.cs,DrawText,The following statement contains a magic number: aFont.DrawText(null' aText' aPosX + 2' aPosY + 2' aColor != SharpDX.Color.Black ? SharpDX.Color.Black : SharpDX.Color.White);
Magic Number,Gnar,Program,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Program.cs,DrawText,The following statement contains a magic number: aFont.DrawText(null' aText' aPosX + 2' aPosY + 2' aColor != SharpDX.Color.Black ? SharpDX.Color.Black : SharpDX.Color.White);
Magic Number,Gnar,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\SpellManager.cs,SpellManager,The following statement contains a magic number: QMini = new Spell(SpellSlot.Q' 1100);
Magic Number,Gnar,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\SpellManager.cs,SpellManager,The following statement contains a magic number: EMini = new Spell(SpellSlot.E' 475);
Magic Number,Gnar,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\SpellManager.cs,SpellManager,The following statement contains a magic number: QMega = new Spell(SpellSlot.Q' 1100);
Magic Number,Gnar,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\SpellManager.cs,SpellManager,The following statement contains a magic number: WMega = new Spell(SpellSlot.W' 525);
Magic Number,Gnar,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\SpellManager.cs,SpellManager,The following statement contains a magic number: EMega = new Spell(SpellSlot.E' 475);
Magic Number,Gnar,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\SpellManager.cs,SpellManager,The following statement contains a magic number: RMega = new Spell(SpellSlot.R' 420);
Magic Number,Gnar,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\SpellManager.cs,SpellManager,The following statement contains a magic number: QMini.SetSkillshot(0.25f' 60' 1200' true' SkillshotType.SkillshotLine);
Magic Number,Gnar,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\SpellManager.cs,SpellManager,The following statement contains a magic number: QMini.SetSkillshot(0.25f' 60' 1200' true' SkillshotType.SkillshotLine);
Magic Number,Gnar,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\SpellManager.cs,SpellManager,The following statement contains a magic number: QMini.SetSkillshot(0.25f' 60' 1200' true' SkillshotType.SkillshotLine);
Magic Number,Gnar,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\SpellManager.cs,SpellManager,The following statement contains a magic number: EMini.SetSkillshot(0.5f' 150' float.MaxValue' false' SkillshotType.SkillshotCircle);
Magic Number,Gnar,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\SpellManager.cs,SpellManager,The following statement contains a magic number: EMini.SetSkillshot(0.5f' 150' float.MaxValue' false' SkillshotType.SkillshotCircle);
Magic Number,Gnar,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\SpellManager.cs,SpellManager,The following statement contains a magic number: QMega.SetSkillshot(0.25f' 80' 1200' true' SkillshotType.SkillshotLine);
Magic Number,Gnar,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\SpellManager.cs,SpellManager,The following statement contains a magic number: QMega.SetSkillshot(0.25f' 80' 1200' true' SkillshotType.SkillshotLine);
Magic Number,Gnar,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\SpellManager.cs,SpellManager,The following statement contains a magic number: QMega.SetSkillshot(0.25f' 80' 1200' true' SkillshotType.SkillshotLine);
Magic Number,Gnar,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\SpellManager.cs,SpellManager,The following statement contains a magic number: WMega.SetSkillshot(0.25f' 80' float.MaxValue' false' SkillshotType.SkillshotLine);
Magic Number,Gnar,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\SpellManager.cs,SpellManager,The following statement contains a magic number: WMega.SetSkillshot(0.25f' 80' float.MaxValue' false' SkillshotType.SkillshotLine);
Magic Number,Gnar,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\SpellManager.cs,SpellManager,The following statement contains a magic number: EMega.SetSkillshot(0.5f' 150' float.MaxValue' false' SkillshotType.SkillshotCircle);
Magic Number,Gnar,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\SpellManager.cs,SpellManager,The following statement contains a magic number: EMega.SetSkillshot(0.5f' 150' float.MaxValue' false' SkillshotType.SkillshotCircle);
Magic Number,Gnar,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\SpellManager.cs,SpellManager,The following statement contains a magic number: RMega.Delay = 0.25f;
Missing Default,Gnar,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\ActiveModes.cs,OnCombo,The following switch statement is missing a default case: switch (prediction.Hitchance)                          {                              case HitChance.High:                              case HitChance.VeryHigh:                              case HitChance.Immobile:                                                                    // Regular Q cast                                  Q.Cast(prediction.CastPosition);                                  break;                                case HitChance.Collision:                                    // Special case for colliding enemies                                  var colliding = prediction.CollisionObjects.OrderBy(o => o.Distance(player' true)).ToList();                                  if (colliding.Count > 0)                                  {                                      // First colliding target is < 100 units away from our main target                                      if (colliding[0].Distance(target' true) < 10000)                                          Q.Cast(prediction.CastPosition);                                  }                                  break;                          }
Missing Default,Gnar,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\ActiveModes.cs,OnHarass,The following switch statement is missing a default case: switch (prediction.Hitchance)                      {                          case HitChance.High:                          case HitChance.VeryHigh:                          case HitChance.Immobile:                                // Regular Q cast                              Q.Cast(prediction.CastPosition);                              break;                            case HitChance.Collision:                                // Special case for colliding enemies                              var colliding = prediction.CollisionObjects.OrderBy(o => o.Distance(player' true)).ToList();                              if (colliding.Count > 0)                              {                                  // First colliding target is < 100 units away from our main target                                  if (colliding[0].Distance(target' true) < 10000)                                      Q.Cast(prediction.CastPosition);                              }                              break;                      }
Missing Default,Gnar,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\Damages.cs,GetRealDamage,The following switch statement is missing a default case: switch (slot)              {                  case SpellSlot.Q:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Throws a boomerang that deals 5/35/65/95/125 (+1.15) physical damage and slows enemies by 15/20/25/30/35% for 2 seconds.                          // The boomerang returns towards Gnar after hitting an enemy' dealing 50% damage to subsequent targets. Each enemy can only be hit once.                          damage = new[] { 5' 35' 65' 95' 125 }[spellLevel] + 1.15f * player.TotalAttackDamage();                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Throws a boulder that stops when it hits an enemy' slowing all nearby enemies and dealing 5/45/85/125/165 (+1.2) physical damage.                          damage = new[] { 5' 45' 85' 125' 165 }[spellLevel] + 1.2f * (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.W:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Every 3rd attack or spell on the same target deals an additional 10/20/30/40/50 (+1) + 6/8/10/12/14% of the target's max Health as magic damage                          // and grants Gnar undefined% Movement Speed that decays over 3 seconds (max 100/150/200/250/300 damage vs. monsters).                           var buff = target.Buffs.FirstOrDefault(b => b.IsActive && Game.Time < b.EndTime && b.DisplayName == "GnarWProc" && b.Caster.NetworkId == player.NetworkId);                          if (buff != null && buff.Count == 2)                          {                              damageType = Damage.DamageType.Magical;                              damage = new[] { 10' 20' 30' 40' 50 }[spellLevel] + player.TotalMagicalDamage() + new[] { 0.06f' 0.08f' 0.1f' 0.12f' 0.14f }[spellLevel] * target.MaxHealth;                                // Special case for minions                              if (target is Obj_AI_Minion)                              {                                  var maxDamage = new[] { 100' 150' 200' 250' 300 }[spellLevel];                                  if (player.CalcDamage(target' damageType' damage) > maxDamage)                                  {                                      damageType = Damage.DamageType.True;                                      damage = maxDamage;                                  }                              }                          }                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Stuns enemies in an area for 1.25 seconds' dealing 25/45/65/85/105 (+1) physical damage.                          damage = new[] { 25' 45' 65' 85' 105 }[spellLevel] + (player.BaseAttackDamage + player.FlatPhysicalDamageMod);                      }                        break;                    case SpellSlot.E:                        if (state == TransformState.MINI || state == TransformState.AUTOMATIC && player.IsMiniGnar())                      {                          // Leaps to a location' gaining 20/30/40/50/60% Attack Speed for 3 seconds. If Gnar lands on a unit he will bounce off it' traveling further.                          // Deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage and slows briefly if the unit landed on was an enemy.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                      else if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Leaps to a location and deals 20/60/100/140/180 (+undefined) [6% of Gnar's Max Health] physical damage to all nearby enemies on landing.                          // Enemies Gnar lands directly on top of are slowed briefly.                          damage = new[] { 20' 60' 100' 140' 180 }[spellLevel] + 0.06f * player.MaxHealth;                      }                        break;                    case SpellSlot.R:                        if (state == TransformState.MEGA || state == TransformState.AUTOMATIC && player.IsMegaGnar())                      {                          // Knocks all nearby enemies in the specified direction' dealing 200/300/400 (+0.2) (+0.5) physical damage and slowing them by 45% for 1.25/1.5/1.75 seconds.                          // Any enemy that hits a wall takes 150% damage and is stunned instead of slowed.                          damage = new[] { 200' 300' 400 }[spellLevel] + 0.2f * player.TotalAttackDamage();                          extraDamage = (float)player.CalcDamage(target' Damage.DamageType.Magical' player.BaseAbilityDamage + player.FlatMagicDamageMod);                      }                        break;              }
Missing Default,Gnar,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\SpellManager.cs,Spellbook_OnCastSpell,The following switch statement is missing a default case: switch (args.Slot)                  {                      case SpellSlot.W:                      case SpellSlot.R:                            lastCastedStun = Game.Time;                          break;                  }
Missing Default,Gnar,SpellQueue,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\Gnar\SpellQueue.cs,Spellbook_OnCastSpell,The following switch statement is missing a default case: switch (args.Slot)                  {                      case SpellSlot.Q:                      case SpellSlot.W:                      case SpellSlot.E:                      case SpellSlot.R:                            if (IsReady)                          {                              // We are safe to cast a spell                              sendTime = TickCount;                          }                          else                          {                              // Don't allow the spellcast                              args.Process = false;                          }                          break;                  }
