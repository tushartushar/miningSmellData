Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Veigar,ActiveModes,C:\repos\Hellsing_LeagueSharp\Veigar\ActiveModes.cs,OnCombo,Cyclomatic complexity of the method is 12
Long Statement,Veigar,ActiveModes,C:\repos\Hellsing_LeagueSharp\Veigar\ActiveModes.cs,OnPermaActive,The length of the statement  "                    HealthPrediction.GetHealthPrediction(m' (int)(player.Distance(m' false) / Q.Speed)' (int)(Q.Delay * 1000 + Game.Ping / 2)) > 0); " is 128.
Long Statement,Veigar,ActiveModes,C:\repos\Hellsing_LeagueSharp\Veigar\ActiveModes.cs,OnPermaActive,The length of the statement  "                var target = ObjectManager.Get<Obj_AI_Hero>().FirstOrDefault(h => h.IsValidTarget(W.Range) && h.GetStunDuration() >= W.Delay); " is 126.
Long Statement,Veigar,ActiveModes,C:\repos\Hellsing_LeagueSharp\Veigar\ActiveModes.cs,OnCombo,The length of the statement  "            var target = TargetSelector.GetTarget(Q.Range' TargetSelector.DamageType.Magical' true' Environment.TickCount - comboInitialized < 1500 ? new[] { comboTarget } : null); " is 168.
Long Statement,Veigar,ActiveModes,C:\repos\Hellsing_LeagueSharp\Veigar\ActiveModes.cs,OnCombo,The length of the statement  "                target = TargetSelector.GetTarget(W.Range' TargetSelector.DamageType.Magical' true' Environment.TickCount - comboInitialized < 1500 ? new[] { comboTarget } : null); " is 164.
Long Statement,Veigar,ActiveModes,C:\repos\Hellsing_LeagueSharp\Veigar\ActiveModes.cs,OnWaveClear,The length of the statement  "                var farmLocation = MinionManager.GetBestCircularFarmLocation(MinionManager.GetMinions(W.Range).Select(m => m.ServerPosition.To2D()).ToList()' W.Width' W.Range); " is 160.
Long Statement,Veigar,ActiveModes,C:\repos\Hellsing_LeagueSharp\Veigar\ActiveModes.cs,OnJungleClear,The length of the statement  "                var target = MinionManager.GetMinions(Q.Range' MinionTypes.All' MinionTeam.Neutral' MinionOrderTypes.MaxHealth).FirstOrDefault(); " is 129.
Long Statement,Veigar,ActiveModes,C:\repos\Hellsing_LeagueSharp\Veigar\ActiveModes.cs,OnJungleClear,The length of the statement  "                var farmLocation = MinionManager.GetBestCircularFarmLocation(MinionManager.GetMinions(W.Range' MinionTypes.All' MinionTeam.Neutral).Select(m => m.ServerPosition.To2D()).ToList()' W.Width' W.Range); " is 197.
Long Statement,Veigar,Config,C:\repos\Hellsing_LeagueSharp\Veigar\Config.cs,Initialize,The length of the statement  "            ProcessLink("drawRangeQ"' subMenu.AddLinkedCircle("Q range"' true' Color.FromArgb(150' Color.IndianRed)' SpellManager.Q.Range)); " is 128.
Long Statement,Veigar,Config,C:\repos\Hellsing_LeagueSharp\Veigar\Config.cs,Initialize,The length of the statement  "            ProcessLink("drawRangeW"' subMenu.AddLinkedCircle("W range"' true' Color.FromArgb(150' Color.Azure)' SpellManager.W.Range)); " is 124.
Long Statement,Veigar,Config,C:\repos\Hellsing_LeagueSharp\Veigar\Config.cs,Initialize,The length of the statement  "            ProcessLink("drawRangeE"' subMenu.AddLinkedCircle("E range"' false' Color.FromArgb(150' Color.IndianRed)' SpellManager.E.Range)); " is 129.
Long Statement,Veigar,Config,C:\repos\Hellsing_LeagueSharp\Veigar\Config.cs,Initialize,The length of the statement  "            ProcessLink("drawRangeR"' subMenu.AddLinkedCircle("R range"' false' Color.FromArgb(150' Color.Azure)' SpellManager.R.Range)); " is 125.
Long Statement,Veigar,Damages,C:\repos\Hellsing_LeagueSharp\Veigar\Damages.cs,GetFullDamage,The length of the statement  "            return damage + (player.HasIgniteReady() ? (float)player.GetSummonerSpellDamage(target' Damage.SummonerSpell.Ignite) : 0); " is 122.
Complex Conditional,Veigar,ActiveModes,C:\repos\Hellsing_LeagueSharp\Veigar\ActiveModes.cs,OnPermaActive,The conditional expression  "Q.IsReady() &&                  (Config.KeyLinks["miscFarmQActive"].Value.Active && !Config.KeyLinks["miscFarmQ"].Value.Active || // Perma active Q                  (Config.KeyLinks["waveActive"].Value.Active && Config.BoolLinks["waveUseQ"].Value))"  is complex.
Magic Number,Veigar,ActiveModes,C:\repos\Hellsing_LeagueSharp\Veigar\ActiveModes.cs,OnPermaActive,The following statement contains a magic number: if (Q.IsReady() &&                  (Config.KeyLinks["miscFarmQActive"].Value.Active && !Config.KeyLinks["miscFarmQ"].Value.Active || // Perma active Q                  (Config.KeyLinks["waveActive"].Value.Active && Config.BoolLinks["waveUseQ"].Value))) // WaveClear Q              {                  // Get a target that would die with Q and won't die while the projectile is still flying                  var target = MinionManager.GetMinions(Q.Range' MinionTypes.All' MinionTeam.Enemy' MinionOrderTypes.MaxHealth)                      .FirstOrDefault(m => m.Health < Q.GetRealDamage(m) &&                      HealthPrediction.GetHealthPrediction(m' (int)(player.Distance(m' false) / Q.Speed)' (int)(Q.Delay * 1000 + Game.Ping / 2)) > 0);                    if (target != null)                      Q.Cast(target);              }
Magic Number,Veigar,ActiveModes,C:\repos\Hellsing_LeagueSharp\Veigar\ActiveModes.cs,OnPermaActive,The following statement contains a magic number: if (Q.IsReady() &&                  (Config.KeyLinks["miscFarmQActive"].Value.Active && !Config.KeyLinks["miscFarmQ"].Value.Active || // Perma active Q                  (Config.KeyLinks["waveActive"].Value.Active && Config.BoolLinks["waveUseQ"].Value))) // WaveClear Q              {                  // Get a target that would die with Q and won't die while the projectile is still flying                  var target = MinionManager.GetMinions(Q.Range' MinionTypes.All' MinionTeam.Enemy' MinionOrderTypes.MaxHealth)                      .FirstOrDefault(m => m.Health < Q.GetRealDamage(m) &&                      HealthPrediction.GetHealthPrediction(m' (int)(player.Distance(m' false) / Q.Speed)' (int)(Q.Delay * 1000 + Game.Ping / 2)) > 0);                    if (target != null)                      Q.Cast(target);              }
Magic Number,Veigar,ActiveModes,C:\repos\Hellsing_LeagueSharp\Veigar\ActiveModes.cs,OnCombo,The following statement contains a magic number: if (currentCombo != null && Environment.TickCount - comboInitialized < 1500)                  return;
Magic Number,Veigar,ActiveModes,C:\repos\Hellsing_LeagueSharp\Veigar\ActiveModes.cs,OnCombo,The following statement contains a magic number: var target = TargetSelector.GetTarget(Q.Range' TargetSelector.DamageType.Magical' true' Environment.TickCount - comboInitialized < 1500 ? new[] { comboTarget } : null);
Magic Number,Veigar,ActiveModes,C:\repos\Hellsing_LeagueSharp\Veigar\ActiveModes.cs,OnCombo,The following statement contains a magic number: if (Config.BoolLinks["comboUseE"].Value && E.IsReady())              {                  target = TargetSelector.GetTarget(W.Range' TargetSelector.DamageType.Magical' true' Environment.TickCount - comboInitialized < 1500 ? new[] { comboTarget } : null);                  if (target != null)                  {                      var castPosition = SpellManager.GetCageCastPosition(target);                        if (castPosition != null)                          E.Cast((Vector3)castPosition);                  }              }
Magic Number,Veigar,ActiveModes,C:\repos\Hellsing_LeagueSharp\Veigar\ActiveModes.cs,Obj_AI_Base_OnProcessSpellCast,The following statement contains a magic number: if (sender.IsMe && currentCombo != null)              {                  if (Environment.TickCount - comboInitialized > 1500 || currentCombo.Count == 0)                  {                      currentCombo = null;                      return;                  }                    // Compare if the spell was one of our combo spells                  var spell = currentCombo[0];                  var success = false;                  switch (spell)                  {                      case ComboSpell.Q:                      case ComboSpell.W:                      case ComboSpell.R:                          success = args.SData.Name == spell.GetSpell().Instance.SData.Name;                          break;                      case ComboSpell.IGNITE:                          success = args.SData.Name == "SummonerDot";                          break;                  }                    // Remove the casted spell on success                  if (success)                  {                      currentCombo.RemoveAt(0);                        // Get the next spell to cast                      var nextSpell = currentCombo[0];                      Utility.DelayAction.Add(nextSpell != ComboSpell.IGNITE ? 250 : 0' () =>                      {                          player.Spellbook.CastSpell(nextSpell.GetSpellSlots()[0]' comboTarget);                      });                        if (currentCombo.Count == 1)                          currentCombo = null;                  }              }
Magic Number,Veigar,ActiveModes,C:\repos\Hellsing_LeagueSharp\Veigar\ActiveModes.cs,Obj_AI_Base_OnProcessSpellCast,The following statement contains a magic number: if (sender.IsMe && currentCombo != null)              {                  if (Environment.TickCount - comboInitialized > 1500 || currentCombo.Count == 0)                  {                      currentCombo = null;                      return;                  }                    // Compare if the spell was one of our combo spells                  var spell = currentCombo[0];                  var success = false;                  switch (spell)                  {                      case ComboSpell.Q:                      case ComboSpell.W:                      case ComboSpell.R:                          success = args.SData.Name == spell.GetSpell().Instance.SData.Name;                          break;                      case ComboSpell.IGNITE:                          success = args.SData.Name == "SummonerDot";                          break;                  }                    // Remove the casted spell on success                  if (success)                  {                      currentCombo.RemoveAt(0);                        // Get the next spell to cast                      var nextSpell = currentCombo[0];                      Utility.DelayAction.Add(nextSpell != ComboSpell.IGNITE ? 250 : 0' () =>                      {                          player.Spellbook.CastSpell(nextSpell.GetSpellSlots()[0]' comboTarget);                      });                        if (currentCombo.Count == 1)                          currentCombo = null;                  }              }
Magic Number,Veigar,ActiveModes,C:\repos\Hellsing_LeagueSharp\Veigar\ActiveModes.cs,OnHarass,The following statement contains a magic number: if (player.ManaPercentage() < Config.SliderLinks["harassMana"].Value.Value / 100)                  return;
Magic Number,Veigar,ActiveModes,C:\repos\Hellsing_LeagueSharp\Veigar\ActiveModes.cs,OnWaveClear,The following statement contains a magic number: if (player.ManaPercentage() < Config.SliderLinks["waveMana"].Value.Value / 100)                  return;
Magic Number,Veigar,ActiveModes,C:\repos\Hellsing_LeagueSharp\Veigar\ActiveModes.cs,OnFlee,The following statement contains a magic number: if (Config.BoolLinks["fleeUseE"].Value && E.IsReady())              {                  // Get the enemies around                  var targets = ObjectManager.Get<Obj_AI_Hero>()                      .Where(h => h.IsValidTarget(E.Range + E.Width / 2))                          .OrderBy(h => h.Distance(player' true));                    if (targets.Count() > 0)                  {                      foreach (var target in targets)                      {                          // Get cage cast position                          var castPosition = SpellManager.GetCageCastPosition(target);                          if (castPosition != null)                          {                              // Cast if position was found                              E.Cast((Vector3)castPosition);                              break;                          }                      }                  }              }
Magic Number,Veigar,Config,C:\repos\Hellsing_LeagueSharp\Veigar\Config.cs,Initialize,The following statement contains a magic number: ProcessLink("comboActive"' subMenu.AddLinkedKeyBind("Combo active"' 32' KeyBindType.Press));
Magic Number,Veigar,Config,C:\repos\Hellsing_LeagueSharp\Veigar\Config.cs,Initialize,The following statement contains a magic number: ProcessLink("harassMana"' subMenu.AddLinkedSlider("Mana usage in percent (%)"' 30));
Magic Number,Veigar,Config,C:\repos\Hellsing_LeagueSharp\Veigar\Config.cs,Initialize,The following statement contains a magic number: ProcessLink("waveNumW"' subMenu.AddLinkedSlider("Minion hit number for W"' 3' 1' 10));
Magic Number,Veigar,Config,C:\repos\Hellsing_LeagueSharp\Veigar\Config.cs,Initialize,The following statement contains a magic number: ProcessLink("waveNumW"' subMenu.AddLinkedSlider("Minion hit number for W"' 3' 1' 10));
Magic Number,Veigar,Config,C:\repos\Hellsing_LeagueSharp\Veigar\Config.cs,Initialize,The following statement contains a magic number: ProcessLink("waveMana"' subMenu.AddLinkedSlider("Mana usage in percent (%)"' 30));
Magic Number,Veigar,Config,C:\repos\Hellsing_LeagueSharp\Veigar\Config.cs,Initialize,The following statement contains a magic number: ProcessLink("miscFarmQ"' subMenu.AddLinkedKeyBind("Don't farm Q stacks"' 32' KeyBindType.Press));
Magic Number,Veigar,Config,C:\repos\Hellsing_LeagueSharp\Veigar\Config.cs,Initialize,The following statement contains a magic number: ProcessLink("drawRangeQ"' subMenu.AddLinkedCircle("Q range"' true' Color.FromArgb(150' Color.IndianRed)' SpellManager.Q.Range));
Magic Number,Veigar,Config,C:\repos\Hellsing_LeagueSharp\Veigar\Config.cs,Initialize,The following statement contains a magic number: ProcessLink("drawRangeW"' subMenu.AddLinkedCircle("W range"' true' Color.FromArgb(150' Color.Azure)' SpellManager.W.Range));
Magic Number,Veigar,Config,C:\repos\Hellsing_LeagueSharp\Veigar\Config.cs,Initialize,The following statement contains a magic number: ProcessLink("drawRangeE"' subMenu.AddLinkedCircle("E range"' false' Color.FromArgb(150' Color.IndianRed)' SpellManager.E.Range));
Magic Number,Veigar,Config,C:\repos\Hellsing_LeagueSharp\Veigar\Config.cs,Initialize,The following statement contains a magic number: ProcessLink("drawRangeR"' subMenu.AddLinkedCircle("R range"' false' Color.FromArgb(150' Color.Azure)' SpellManager.R.Range));
Magic Number,Veigar,Damages,C:\repos\Hellsing_LeagueSharp\Veigar\Damages.cs,GetFullDamage,The following statement contains a magic number: if (SpellManager.W.IsReady() && target.GetStunDuration() > 1.2)                  damage += SpellManager.W.GetRealDamage(target);
Magic Number,Veigar,Damages,C:\repos\Hellsing_LeagueSharp\Veigar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        // Unleashes dark energy at target enemy' dealing 80/125/170/215/260 (+0.6) Magic Damage.                      damage = new float[] { 80' 125' 170' 215' 260 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                        break;                    case SpellSlot.W:                        // After 1.2 seconds' dark matter falls from the sky to the target location'                      // dealing 120/170/220/270/320 (+1) Magic Damage.                      damage = new float[] { 120' 170' 220' 270' 320 }[spellLevel] + player.TotalMagicalDamage();                        break;                    case SpellSlot.R:                        // Blasts an enemy champion' dealing 250/375/500 (+1.2) plus 80% of his target's Ability Power in Magic Damage.                      damage = new float[] { 250' 375' 500 }[spellLevel] + 1.2f * player.TotalMagicalDamage();                      damage += 0.8f * target.TotalMagicalDamage();                        break;              }
Magic Number,Veigar,Damages,C:\repos\Hellsing_LeagueSharp\Veigar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        // Unleashes dark energy at target enemy' dealing 80/125/170/215/260 (+0.6) Magic Damage.                      damage = new float[] { 80' 125' 170' 215' 260 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                        break;                    case SpellSlot.W:                        // After 1.2 seconds' dark matter falls from the sky to the target location'                      // dealing 120/170/220/270/320 (+1) Magic Damage.                      damage = new float[] { 120' 170' 220' 270' 320 }[spellLevel] + player.TotalMagicalDamage();                        break;                    case SpellSlot.R:                        // Blasts an enemy champion' dealing 250/375/500 (+1.2) plus 80% of his target's Ability Power in Magic Damage.                      damage = new float[] { 250' 375' 500 }[spellLevel] + 1.2f * player.TotalMagicalDamage();                      damage += 0.8f * target.TotalMagicalDamage();                        break;              }
Magic Number,Veigar,Damages,C:\repos\Hellsing_LeagueSharp\Veigar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        // Unleashes dark energy at target enemy' dealing 80/125/170/215/260 (+0.6) Magic Damage.                      damage = new float[] { 80' 125' 170' 215' 260 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                        break;                    case SpellSlot.W:                        // After 1.2 seconds' dark matter falls from the sky to the target location'                      // dealing 120/170/220/270/320 (+1) Magic Damage.                      damage = new float[] { 120' 170' 220' 270' 320 }[spellLevel] + player.TotalMagicalDamage();                        break;                    case SpellSlot.R:                        // Blasts an enemy champion' dealing 250/375/500 (+1.2) plus 80% of his target's Ability Power in Magic Damage.                      damage = new float[] { 250' 375' 500 }[spellLevel] + 1.2f * player.TotalMagicalDamage();                      damage += 0.8f * target.TotalMagicalDamage();                        break;              }
Magic Number,Veigar,Damages,C:\repos\Hellsing_LeagueSharp\Veigar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        // Unleashes dark energy at target enemy' dealing 80/125/170/215/260 (+0.6) Magic Damage.                      damage = new float[] { 80' 125' 170' 215' 260 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                        break;                    case SpellSlot.W:                        // After 1.2 seconds' dark matter falls from the sky to the target location'                      // dealing 120/170/220/270/320 (+1) Magic Damage.                      damage = new float[] { 120' 170' 220' 270' 320 }[spellLevel] + player.TotalMagicalDamage();                        break;                    case SpellSlot.R:                        // Blasts an enemy champion' dealing 250/375/500 (+1.2) plus 80% of his target's Ability Power in Magic Damage.                      damage = new float[] { 250' 375' 500 }[spellLevel] + 1.2f * player.TotalMagicalDamage();                      damage += 0.8f * target.TotalMagicalDamage();                        break;              }
Magic Number,Veigar,Damages,C:\repos\Hellsing_LeagueSharp\Veigar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        // Unleashes dark energy at target enemy' dealing 80/125/170/215/260 (+0.6) Magic Damage.                      damage = new float[] { 80' 125' 170' 215' 260 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                        break;                    case SpellSlot.W:                        // After 1.2 seconds' dark matter falls from the sky to the target location'                      // dealing 120/170/220/270/320 (+1) Magic Damage.                      damage = new float[] { 120' 170' 220' 270' 320 }[spellLevel] + player.TotalMagicalDamage();                        break;                    case SpellSlot.R:                        // Blasts an enemy champion' dealing 250/375/500 (+1.2) plus 80% of his target's Ability Power in Magic Damage.                      damage = new float[] { 250' 375' 500 }[spellLevel] + 1.2f * player.TotalMagicalDamage();                      damage += 0.8f * target.TotalMagicalDamage();                        break;              }
Magic Number,Veigar,Damages,C:\repos\Hellsing_LeagueSharp\Veigar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        // Unleashes dark energy at target enemy' dealing 80/125/170/215/260 (+0.6) Magic Damage.                      damage = new float[] { 80' 125' 170' 215' 260 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                        break;                    case SpellSlot.W:                        // After 1.2 seconds' dark matter falls from the sky to the target location'                      // dealing 120/170/220/270/320 (+1) Magic Damage.                      damage = new float[] { 120' 170' 220' 270' 320 }[spellLevel] + player.TotalMagicalDamage();                        break;                    case SpellSlot.R:                        // Blasts an enemy champion' dealing 250/375/500 (+1.2) plus 80% of his target's Ability Power in Magic Damage.                      damage = new float[] { 250' 375' 500 }[spellLevel] + 1.2f * player.TotalMagicalDamage();                      damage += 0.8f * target.TotalMagicalDamage();                        break;              }
Magic Number,Veigar,Damages,C:\repos\Hellsing_LeagueSharp\Veigar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        // Unleashes dark energy at target enemy' dealing 80/125/170/215/260 (+0.6) Magic Damage.                      damage = new float[] { 80' 125' 170' 215' 260 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                        break;                    case SpellSlot.W:                        // After 1.2 seconds' dark matter falls from the sky to the target location'                      // dealing 120/170/220/270/320 (+1) Magic Damage.                      damage = new float[] { 120' 170' 220' 270' 320 }[spellLevel] + player.TotalMagicalDamage();                        break;                    case SpellSlot.R:                        // Blasts an enemy champion' dealing 250/375/500 (+1.2) plus 80% of his target's Ability Power in Magic Damage.                      damage = new float[] { 250' 375' 500 }[spellLevel] + 1.2f * player.TotalMagicalDamage();                      damage += 0.8f * target.TotalMagicalDamage();                        break;              }
Magic Number,Veigar,Damages,C:\repos\Hellsing_LeagueSharp\Veigar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        // Unleashes dark energy at target enemy' dealing 80/125/170/215/260 (+0.6) Magic Damage.                      damage = new float[] { 80' 125' 170' 215' 260 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                        break;                    case SpellSlot.W:                        // After 1.2 seconds' dark matter falls from the sky to the target location'                      // dealing 120/170/220/270/320 (+1) Magic Damage.                      damage = new float[] { 120' 170' 220' 270' 320 }[spellLevel] + player.TotalMagicalDamage();                        break;                    case SpellSlot.R:                        // Blasts an enemy champion' dealing 250/375/500 (+1.2) plus 80% of his target's Ability Power in Magic Damage.                      damage = new float[] { 250' 375' 500 }[spellLevel] + 1.2f * player.TotalMagicalDamage();                      damage += 0.8f * target.TotalMagicalDamage();                        break;              }
Magic Number,Veigar,Damages,C:\repos\Hellsing_LeagueSharp\Veigar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        // Unleashes dark energy at target enemy' dealing 80/125/170/215/260 (+0.6) Magic Damage.                      damage = new float[] { 80' 125' 170' 215' 260 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                        break;                    case SpellSlot.W:                        // After 1.2 seconds' dark matter falls from the sky to the target location'                      // dealing 120/170/220/270/320 (+1) Magic Damage.                      damage = new float[] { 120' 170' 220' 270' 320 }[spellLevel] + player.TotalMagicalDamage();                        break;                    case SpellSlot.R:                        // Blasts an enemy champion' dealing 250/375/500 (+1.2) plus 80% of his target's Ability Power in Magic Damage.                      damage = new float[] { 250' 375' 500 }[spellLevel] + 1.2f * player.TotalMagicalDamage();                      damage += 0.8f * target.TotalMagicalDamage();                        break;              }
Magic Number,Veigar,Damages,C:\repos\Hellsing_LeagueSharp\Veigar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        // Unleashes dark energy at target enemy' dealing 80/125/170/215/260 (+0.6) Magic Damage.                      damage = new float[] { 80' 125' 170' 215' 260 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                        break;                    case SpellSlot.W:                        // After 1.2 seconds' dark matter falls from the sky to the target location'                      // dealing 120/170/220/270/320 (+1) Magic Damage.                      damage = new float[] { 120' 170' 220' 270' 320 }[spellLevel] + player.TotalMagicalDamage();                        break;                    case SpellSlot.R:                        // Blasts an enemy champion' dealing 250/375/500 (+1.2) plus 80% of his target's Ability Power in Magic Damage.                      damage = new float[] { 250' 375' 500 }[spellLevel] + 1.2f * player.TotalMagicalDamage();                      damage += 0.8f * target.TotalMagicalDamage();                        break;              }
Magic Number,Veigar,Damages,C:\repos\Hellsing_LeagueSharp\Veigar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        // Unleashes dark energy at target enemy' dealing 80/125/170/215/260 (+0.6) Magic Damage.                      damage = new float[] { 80' 125' 170' 215' 260 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                        break;                    case SpellSlot.W:                        // After 1.2 seconds' dark matter falls from the sky to the target location'                      // dealing 120/170/220/270/320 (+1) Magic Damage.                      damage = new float[] { 120' 170' 220' 270' 320 }[spellLevel] + player.TotalMagicalDamage();                        break;                    case SpellSlot.R:                        // Blasts an enemy champion' dealing 250/375/500 (+1.2) plus 80% of his target's Ability Power in Magic Damage.                      damage = new float[] { 250' 375' 500 }[spellLevel] + 1.2f * player.TotalMagicalDamage();                      damage += 0.8f * target.TotalMagicalDamage();                        break;              }
Magic Number,Veigar,Damages,C:\repos\Hellsing_LeagueSharp\Veigar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        // Unleashes dark energy at target enemy' dealing 80/125/170/215/260 (+0.6) Magic Damage.                      damage = new float[] { 80' 125' 170' 215' 260 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                        break;                    case SpellSlot.W:                        // After 1.2 seconds' dark matter falls from the sky to the target location'                      // dealing 120/170/220/270/320 (+1) Magic Damage.                      damage = new float[] { 120' 170' 220' 270' 320 }[spellLevel] + player.TotalMagicalDamage();                        break;                    case SpellSlot.R:                        // Blasts an enemy champion' dealing 250/375/500 (+1.2) plus 80% of his target's Ability Power in Magic Damage.                      damage = new float[] { 250' 375' 500 }[spellLevel] + 1.2f * player.TotalMagicalDamage();                      damage += 0.8f * target.TotalMagicalDamage();                        break;              }
Magic Number,Veigar,Damages,C:\repos\Hellsing_LeagueSharp\Veigar\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        // Unleashes dark energy at target enemy' dealing 80/125/170/215/260 (+0.6) Magic Damage.                      damage = new float[] { 80' 125' 170' 215' 260 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                        break;                    case SpellSlot.W:                        // After 1.2 seconds' dark matter falls from the sky to the target location'                      // dealing 120/170/220/270/320 (+1) Magic Damage.                      damage = new float[] { 120' 170' 220' 270' 320 }[spellLevel] + player.TotalMagicalDamage();                        break;                    case SpellSlot.R:                        // Blasts an enemy champion' dealing 250/375/500 (+1.2) plus 80% of his target's Ability Power in Magic Damage.                      damage = new float[] { 250' 375' 500 }[spellLevel] + 1.2f * player.TotalMagicalDamage();                      damage += 0.8f * target.TotalMagicalDamage();                        break;              }
Magic Number,Veigar,Damages,C:\repos\Hellsing_LeagueSharp\Veigar\Damages.cs,GetRealDamage,The following statement contains a magic number: return (float)player.CalcDamage(target' damageType' damage) + extraDamage - 20;
Magic Number,Veigar,SpellManager,C:\repos\Hellsing_LeagueSharp\Veigar\SpellManager.cs,Initialize,The following statement contains a magic number: _q = new Spell(SpellSlot.Q' 650);
Magic Number,Veigar,SpellManager,C:\repos\Hellsing_LeagueSharp\Veigar\SpellManager.cs,Initialize,The following statement contains a magic number: _w = new Spell(SpellSlot.W' 900);
Magic Number,Veigar,SpellManager,C:\repos\Hellsing_LeagueSharp\Veigar\SpellManager.cs,Initialize,The following statement contains a magic number: _e = new Spell(SpellSlot.E' 650);
Magic Number,Veigar,SpellManager,C:\repos\Hellsing_LeagueSharp\Veigar\SpellManager.cs,Initialize,The following statement contains a magic number: _r = new Spell(SpellSlot.R' 650);
Magic Number,Veigar,SpellManager,C:\repos\Hellsing_LeagueSharp\Veigar\SpellManager.cs,Initialize,The following statement contains a magic number: Q.SetTargetted(0.25f' 1500);
Magic Number,Veigar,SpellManager,C:\repos\Hellsing_LeagueSharp\Veigar\SpellManager.cs,Initialize,The following statement contains a magic number: W.SetSkillshot(1.25f' 225' float.MaxValue' false' SkillshotType.SkillshotCircle);
Magic Number,Veigar,SpellManager,C:\repos\Hellsing_LeagueSharp\Veigar\SpellManager.cs,Initialize,The following statement contains a magic number: E.Width = 700;
Magic Number,Veigar,SpellManager,C:\repos\Hellsing_LeagueSharp\Veigar\SpellManager.cs,Initialize,The following statement contains a magic number: _radius = E.Width / 2;
Magic Number,Veigar,SpellManager,C:\repos\Hellsing_LeagueSharp\Veigar\SpellManager.cs,Initialize,The following statement contains a magic number: R.SetTargetted(0.25f' 1400);
Magic Number,Veigar,SpellManager,C:\repos\Hellsing_LeagueSharp\Veigar\SpellManager.cs,GetCageCastPosition,The following statement contains a magic number: foreach (var target2 in nearTargets)              {                  // Get target2 position after 0.2 seconds                  var prediction2 = Prediction.GetPrediction(target2' 0.2f);                    // Validate second cast position                  if (prediction2.Hitchance < HitChance.High ||                      prediction.UnitPosition.Distance(prediction2.UnitPosition' true) > _widthSqr)                      continue;                    // Calculate middle point and perpendicular                  var distanceSqr = prediction.UnitPosition.Distance(prediction2.UnitPosition' true);                  var distance = Math.Sqrt(distanceSqr);                  var middlePoint = (prediction.UnitPosition + prediction2.UnitPosition) / 2;                  var perpendicular = (prediction.UnitPosition - prediction2.UnitPosition).Normalized().To2D().Perpendicular();                    // Calculate cast poistion                  var length = (float)Math.Sqrt(_radiusSqr - distanceSqr);                  var castPosition = middlePoint.To2D() + perpendicular * length;                    // Validate cast position                  if (castPosition.Distance(player.Position.To2D()' true) > _radiusSqr)                      castPosition = middlePoint.To2D() - perpendicular * length;                  // Validate again' if failed continue for loop                  if (castPosition.Distance(player.Position.To2D()' true) > _radiusSqr)                      continue;                    // Found valid second cast position                  return castPosition.To3D();              }
Missing Default,Veigar,ActiveModes,C:\repos\Hellsing_LeagueSharp\Veigar\ActiveModes.cs,OnCombo,The following switch statement is missing a default case: switch (spell)                          {                              case ComboSpell.Q:                              case ComboSpell.W:                              case ComboSpell.R:                                  damage = spell.GetSpell().GetRealDamage(target);                                  mana.Add(spell' spell.GetSpell().Instance.ManaCost);                                  break;                              case ComboSpell.IGNITE:                                  damage = (float)player.GetSummonerSpellDamage(target' Damage.SummonerSpell.Ignite);                                  break;                          }
Missing Default,Veigar,ActiveModes,C:\repos\Hellsing_LeagueSharp\Veigar\ActiveModes.cs,Obj_AI_Base_OnProcessSpellCast,The following switch statement is missing a default case: switch (spell)                  {                      case ComboSpell.Q:                      case ComboSpell.W:                      case ComboSpell.R:                          success = args.SData.Name == spell.GetSpell().Instance.SData.Name;                          break;                      case ComboSpell.IGNITE:                          success = args.SData.Name == "SummonerDot";                          break;                  }
Missing Default,Veigar,Damages,C:\repos\Hellsing_LeagueSharp\Veigar\Damages.cs,GetRealDamage,The following switch statement is missing a default case: switch (slot)              {                  case SpellSlot.Q:                        // Unleashes dark energy at target enemy' dealing 80/125/170/215/260 (+0.6) Magic Damage.                      damage = new float[] { 80' 125' 170' 215' 260 }[spellLevel] + 0.6f * player.TotalMagicalDamage();                        break;                    case SpellSlot.W:                        // After 1.2 seconds' dark matter falls from the sky to the target location'                      // dealing 120/170/220/270/320 (+1) Magic Damage.                      damage = new float[] { 120' 170' 220' 270' 320 }[spellLevel] + player.TotalMagicalDamage();                        break;                    case SpellSlot.R:                        // Blasts an enemy champion' dealing 250/375/500 (+1.2) plus 80% of his target's Ability Power in Magic Damage.                      damage = new float[] { 250' 375' 500 }[spellLevel] + 1.2f * player.TotalMagicalDamage();                      damage += 0.8f * target.TotalMagicalDamage();                        break;              }
Missing Default,Veigar,SpellManager,C:\repos\Hellsing_LeagueSharp\Veigar\SpellManager.cs,GetSpell,The following switch statement is missing a default case: switch (spell)              {                  case ComboSpell.Q:                      return Q;                  case ComboSpell.W:                      return W;                  case ComboSpell.E:                      return E;                  case ComboSpell.R:                      return R;              }
