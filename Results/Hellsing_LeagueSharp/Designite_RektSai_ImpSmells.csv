Implementation smell,Namespace,Class,File,Method,Description
Long Method,RektSai,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\ActiveModes.cs,OnCombo,The method has 113 lines of code.
Complex Method,RektSai,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\ActiveModes.cs,OnCombo,Cyclomatic complexity of the method is 27
Complex Method,RektSai,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\ActiveModes.cs,OnHarass,Cyclomatic complexity of the method is 11
Complex Method,RektSai,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\ActiveModes.cs,OnWaveClear,Cyclomatic complexity of the method is 14
Complex Method,RektSai,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\ActiveModes.cs,OnJungleClear,Cyclomatic complexity of the method is 18
Complex Method,RektSai,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Damages.cs,GetRealDamage,Cyclomatic complexity of the method is 10
Long Statement,RektSai,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\ActiveModes.cs,OnCombo,The length of the statement  "                            if (Math.Floor(player.AttackSpeed()) * player.GetAutoAttackDamage(target) < SpellManager.QBurrowed.GetRealDamage(target)) " is 121.
Long Statement,RektSai,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\ActiveModes.cs,OnCombo,The length of the statement  "                                (SpellManager.QNormal.IsReallyReady(1000) ? SpellManager.QNormal.GetRealDamage(h) * 3 + player.GetAutoAttackDamage(h) : player.GetAutoAttackDamage(h) * 2) + " is 156.
Long Statement,RektSai,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\ActiveModes.cs,OnCombo,The length of the statement  "                if (W.IsEnabledAndReady(Mode.COMBO) && ((Q.IsEnabled(Mode.COMBO) ? SpellManager.QNormal.IsReallyReady(250) : true) || (E.IsEnabled(Mode.COMBO) ? SpellManager.ENormal.IsReallyReady(250) : true))) " is 194.
Long Statement,RektSai,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\ActiveModes.cs,OnWaveClear,The length of the statement  "                    var location = MinionManager.GetBestCircularFarmLocation(MinionManager.GetMinions(Q.Range).Select(m => m.ServerPosition.To2D()).ToList()' Q.Width' Q.Range); " is 156.
Long Statement,RektSai,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\ActiveModes.cs,OnJungleClear,The length of the statement  "                        var jungleMobs = MinionManager.GetMinions(player.Position' E.Range' MinionTypes.All' MinionTeam.Neutral' MinionOrderTypes.MaxHealth); " is 133.
Long Statement,RektSai,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\ActiveModes.cs,OnJungleClear,The length of the statement  "                        if (SpellManager.QBurrowed.IsEnabledAndReady(Mode.JUNGLE' true) && MinionManager.GetMinions(SpellManager.QBurrowed.Range' MinionTypes.All' MinionTeam.Neutral).Count > 0) " is 169.
Long Statement,RektSai,Config,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Config.cs,SetupMenu,The length of the statement  "            ProcessLink("drawRangeQ"' subMenu.AddLinkedCircle("Q range (Burrowed)"' true' Color.FromArgb(150' Color.IndianRed)' SpellManager.QBurrowed.Range)); " is 147.
Long Statement,RektSai,Config,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Config.cs,SetupMenu,The length of the statement  "            ProcessLink("drawRangeE"' subMenu.AddLinkedCircle("E range (Burrowed)"' true' Color.FromArgb(150' Color.Azure)' SpellManager.EBurrowed.Range)); " is 143.
Long Statement,RektSai,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Damages.cs,GetRealDamage,The length of the statement  "            return GetRealDamage(spell.Slot' target' spell.Instance.Name.Contains("Burrowed") ? BurrowState.BURROWED : BurrowState.UNBURROWED); " is 131.
Long Statement,RektSai,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Damages.cs,GetRealDamage,The length of the statement  "                        // Rek'Sai launches a burst of void-charged earth that explodes on first unit hit' dealing 60/90/120/150/180 (+0.7) Magic Damage " is 128.
Long Statement,RektSai,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Damages.cs,GetRealDamage,The length of the statement  "                        // Un-burrow' dealing 40/80/120/160/200 (+0.4) Physical Damage and knocking up nearby enemies for up to 1 second based on their proximity to Rek'Sai. " is 149.
Long Statement,RektSai,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Damages.cs,GetRealDamage,The length of the statement  "                        // Rek'Sai bites a target dealing undefined Physical Damage' increasing by up to 100% at maximum Fury. If Rek'Sai has 100 Fury' Furious Bite deals True Damage. " is 159.
Long Statement,RektSai,Extensions,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Extensions.cs,HasQActive,The length of the statement  "            return target.Buffs.Any(b => b.Caster.NetworkId == target.NetworkId && b.IsValidBuff() && b.DisplayName == Q_ACTIVE_NAME); " is 122.
Long Statement,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,Obj_AI_Base_OnProcessSpellCast,The length of the statement  "                            cooldownExpires[spell] = Game.Time + cooldowns[spell.Instance.Name.ToLower()][spell.Level - 1] * (1 + player.PercentCooldownMod) + tweak; " is 137.
Complex Conditional,RektSai,ItemManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\ItemManager.cs,UseBotrkOrCutlass,The conditional expression  "Config.BoolLinks["itemsBotrk"].Value && BOTRK.IsReady() && target.IsValidTarget(BOTRK.Range) &&                  (player.Health + player.GetItemDamage(target' Damage.DamageItems.Botrk) < player.MaxHealth ||                  target.Health < player.GetItemDamage(target' Damage.DamageItems.Botrk))"  is complex.
Magic Number,RektSai,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\ActiveModes.cs,OnCombo,The following statement contains a magic number: var smiteTarget = TargetSelector.GetTarget(700' TargetSelector.DamageType.True);
Magic Number,RektSai,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\ActiveModes.cs,OnWaveClear,The following statement contains a magic number: minions.FindAll(m => m.Distance(player' true) < 450 * 450).Count >= Config.SliderLinks["waveNumQ"].Value.Value
Magic Number,RektSai,ActiveModes,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\ActiveModes.cs,OnWaveClear,The following statement contains a magic number: minions.FindAll(m => m.Distance(player' true) < 450 * 450).Count >= Config.SliderLinks["waveNumQ"].Value.Value
Magic Number,RektSai,Config,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Config.cs,SetupMenu,The following statement contains a magic number: ProcessLink("comboActive"' subMenu.AddLinkedKeyBind("Combo active"' 32' KeyBindType.Press));
Magic Number,RektSai,Config,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Config.cs,SetupMenu,The following statement contains a magic number: ProcessLink("waveNumQ"' subMenu.AddLinkedSlider("Surrounding minions for Q"' 2' 1' 10));
Magic Number,RektSai,Config,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Config.cs,SetupMenu,The following statement contains a magic number: ProcessLink("waveNumQ"' subMenu.AddLinkedSlider("Surrounding minions for Q"' 2' 1' 10));
Magic Number,RektSai,Config,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Config.cs,SetupMenu,The following statement contains a magic number: ProcessLink("drawRangeQ"' subMenu.AddLinkedCircle("Q range (Burrowed)"' true' Color.FromArgb(150' Color.IndianRed)' SpellManager.QBurrowed.Range));
Magic Number,RektSai,Config,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Config.cs,SetupMenu,The following statement contains a magic number: ProcessLink("drawRangeE"' subMenu.AddLinkedCircle("E range (Burrowed)"' true' Color.FromArgb(150' Color.Azure)' SpellManager.EBurrowed.Range));
Magic Number,RektSai,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai's next 3 basic attacks within 5 seconds deal 15/25/35/45/55 (+0.2) bonus Physical Damage to nearby enemies.                          damage = new float[] { 15' 25' 35' 45' 55 }[spellLevel] + 0.2f * player.TotalAttackDamage;                          extraDamage = (float)player.GetAutoAttackDamage(target);                      }                      else                      {                          // Rek'Sai launches a burst of void-charged earth that explodes on first unit hit' dealing 60/90/120/150/180 (+0.7) Magic Damage                          // and revealing non-stealthed enemies hit for 2.5 seconds.                          damageType = Damage.DamageType.Magical;                          damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.7f * player.TotalMagicalDamage;                      }                        break;                    case SpellSlot.W:                        if (state == BurrowState.BURROWED || state == BurrowState.AUTOMATIC && player.IsBurrowed())                      {                          // Un-burrow' dealing 40/80/120/160/200 (+0.4) Physical Damage and knocking up nearby enemies for up to 1 second based on their proximity to Rek'Sai.                          // A unit cannot be hit by Un-burrow more than once every 10 seconds.                          if (!target.HasBurrowBuff())                          {                              damage = new float[] { 40' 80' 120' 160' 200 }[spellLevel] + 0.4f * player.TotalAttackDamage;                          }                      }                        break;                    case SpellSlot.E:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai bites a target dealing undefined Physical Damage' increasing by up to 100% at maximum Fury. If Rek'Sai has 100 Fury' Furious Bite deals True Damage.                          // Maximum Damage: undefined                          damage = new float[] { 0.8f' 0.9f' 1' 1.1f' 1.2f }[spellLevel] * player.TotalAttackDamage;                          damage *= 1 + (player.Mana / player.MaxMana);                          // True damage on full                          if (player.HasMaxFury())                              damageType = Damage.DamageType.True;                      }                        break;              }
Magic Number,RektSai,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai's next 3 basic attacks within 5 seconds deal 15/25/35/45/55 (+0.2) bonus Physical Damage to nearby enemies.                          damage = new float[] { 15' 25' 35' 45' 55 }[spellLevel] + 0.2f * player.TotalAttackDamage;                          extraDamage = (float)player.GetAutoAttackDamage(target);                      }                      else                      {                          // Rek'Sai launches a burst of void-charged earth that explodes on first unit hit' dealing 60/90/120/150/180 (+0.7) Magic Damage                          // and revealing non-stealthed enemies hit for 2.5 seconds.                          damageType = Damage.DamageType.Magical;                          damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.7f * player.TotalMagicalDamage;                      }                        break;                    case SpellSlot.W:                        if (state == BurrowState.BURROWED || state == BurrowState.AUTOMATIC && player.IsBurrowed())                      {                          // Un-burrow' dealing 40/80/120/160/200 (+0.4) Physical Damage and knocking up nearby enemies for up to 1 second based on their proximity to Rek'Sai.                          // A unit cannot be hit by Un-burrow more than once every 10 seconds.                          if (!target.HasBurrowBuff())                          {                              damage = new float[] { 40' 80' 120' 160' 200 }[spellLevel] + 0.4f * player.TotalAttackDamage;                          }                      }                        break;                    case SpellSlot.E:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai bites a target dealing undefined Physical Damage' increasing by up to 100% at maximum Fury. If Rek'Sai has 100 Fury' Furious Bite deals True Damage.                          // Maximum Damage: undefined                          damage = new float[] { 0.8f' 0.9f' 1' 1.1f' 1.2f }[spellLevel] * player.TotalAttackDamage;                          damage *= 1 + (player.Mana / player.MaxMana);                          // True damage on full                          if (player.HasMaxFury())                              damageType = Damage.DamageType.True;                      }                        break;              }
Magic Number,RektSai,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai's next 3 basic attacks within 5 seconds deal 15/25/35/45/55 (+0.2) bonus Physical Damage to nearby enemies.                          damage = new float[] { 15' 25' 35' 45' 55 }[spellLevel] + 0.2f * player.TotalAttackDamage;                          extraDamage = (float)player.GetAutoAttackDamage(target);                      }                      else                      {                          // Rek'Sai launches a burst of void-charged earth that explodes on first unit hit' dealing 60/90/120/150/180 (+0.7) Magic Damage                          // and revealing non-stealthed enemies hit for 2.5 seconds.                          damageType = Damage.DamageType.Magical;                          damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.7f * player.TotalMagicalDamage;                      }                        break;                    case SpellSlot.W:                        if (state == BurrowState.BURROWED || state == BurrowState.AUTOMATIC && player.IsBurrowed())                      {                          // Un-burrow' dealing 40/80/120/160/200 (+0.4) Physical Damage and knocking up nearby enemies for up to 1 second based on their proximity to Rek'Sai.                          // A unit cannot be hit by Un-burrow more than once every 10 seconds.                          if (!target.HasBurrowBuff())                          {                              damage = new float[] { 40' 80' 120' 160' 200 }[spellLevel] + 0.4f * player.TotalAttackDamage;                          }                      }                        break;                    case SpellSlot.E:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai bites a target dealing undefined Physical Damage' increasing by up to 100% at maximum Fury. If Rek'Sai has 100 Fury' Furious Bite deals True Damage.                          // Maximum Damage: undefined                          damage = new float[] { 0.8f' 0.9f' 1' 1.1f' 1.2f }[spellLevel] * player.TotalAttackDamage;                          damage *= 1 + (player.Mana / player.MaxMana);                          // True damage on full                          if (player.HasMaxFury())                              damageType = Damage.DamageType.True;                      }                        break;              }
Magic Number,RektSai,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai's next 3 basic attacks within 5 seconds deal 15/25/35/45/55 (+0.2) bonus Physical Damage to nearby enemies.                          damage = new float[] { 15' 25' 35' 45' 55 }[spellLevel] + 0.2f * player.TotalAttackDamage;                          extraDamage = (float)player.GetAutoAttackDamage(target);                      }                      else                      {                          // Rek'Sai launches a burst of void-charged earth that explodes on first unit hit' dealing 60/90/120/150/180 (+0.7) Magic Damage                          // and revealing non-stealthed enemies hit for 2.5 seconds.                          damageType = Damage.DamageType.Magical;                          damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.7f * player.TotalMagicalDamage;                      }                        break;                    case SpellSlot.W:                        if (state == BurrowState.BURROWED || state == BurrowState.AUTOMATIC && player.IsBurrowed())                      {                          // Un-burrow' dealing 40/80/120/160/200 (+0.4) Physical Damage and knocking up nearby enemies for up to 1 second based on their proximity to Rek'Sai.                          // A unit cannot be hit by Un-burrow more than once every 10 seconds.                          if (!target.HasBurrowBuff())                          {                              damage = new float[] { 40' 80' 120' 160' 200 }[spellLevel] + 0.4f * player.TotalAttackDamage;                          }                      }                        break;                    case SpellSlot.E:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai bites a target dealing undefined Physical Damage' increasing by up to 100% at maximum Fury. If Rek'Sai has 100 Fury' Furious Bite deals True Damage.                          // Maximum Damage: undefined                          damage = new float[] { 0.8f' 0.9f' 1' 1.1f' 1.2f }[spellLevel] * player.TotalAttackDamage;                          damage *= 1 + (player.Mana / player.MaxMana);                          // True damage on full                          if (player.HasMaxFury())                              damageType = Damage.DamageType.True;                      }                        break;              }
Magic Number,RektSai,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai's next 3 basic attacks within 5 seconds deal 15/25/35/45/55 (+0.2) bonus Physical Damage to nearby enemies.                          damage = new float[] { 15' 25' 35' 45' 55 }[spellLevel] + 0.2f * player.TotalAttackDamage;                          extraDamage = (float)player.GetAutoAttackDamage(target);                      }                      else                      {                          // Rek'Sai launches a burst of void-charged earth that explodes on first unit hit' dealing 60/90/120/150/180 (+0.7) Magic Damage                          // and revealing non-stealthed enemies hit for 2.5 seconds.                          damageType = Damage.DamageType.Magical;                          damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.7f * player.TotalMagicalDamage;                      }                        break;                    case SpellSlot.W:                        if (state == BurrowState.BURROWED || state == BurrowState.AUTOMATIC && player.IsBurrowed())                      {                          // Un-burrow' dealing 40/80/120/160/200 (+0.4) Physical Damage and knocking up nearby enemies for up to 1 second based on their proximity to Rek'Sai.                          // A unit cannot be hit by Un-burrow more than once every 10 seconds.                          if (!target.HasBurrowBuff())                          {                              damage = new float[] { 40' 80' 120' 160' 200 }[spellLevel] + 0.4f * player.TotalAttackDamage;                          }                      }                        break;                    case SpellSlot.E:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai bites a target dealing undefined Physical Damage' increasing by up to 100% at maximum Fury. If Rek'Sai has 100 Fury' Furious Bite deals True Damage.                          // Maximum Damage: undefined                          damage = new float[] { 0.8f' 0.9f' 1' 1.1f' 1.2f }[spellLevel] * player.TotalAttackDamage;                          damage *= 1 + (player.Mana / player.MaxMana);                          // True damage on full                          if (player.HasMaxFury())                              damageType = Damage.DamageType.True;                      }                        break;              }
Magic Number,RektSai,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai's next 3 basic attacks within 5 seconds deal 15/25/35/45/55 (+0.2) bonus Physical Damage to nearby enemies.                          damage = new float[] { 15' 25' 35' 45' 55 }[spellLevel] + 0.2f * player.TotalAttackDamage;                          extraDamage = (float)player.GetAutoAttackDamage(target);                      }                      else                      {                          // Rek'Sai launches a burst of void-charged earth that explodes on first unit hit' dealing 60/90/120/150/180 (+0.7) Magic Damage                          // and revealing non-stealthed enemies hit for 2.5 seconds.                          damageType = Damage.DamageType.Magical;                          damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.7f * player.TotalMagicalDamage;                      }                        break;                    case SpellSlot.W:                        if (state == BurrowState.BURROWED || state == BurrowState.AUTOMATIC && player.IsBurrowed())                      {                          // Un-burrow' dealing 40/80/120/160/200 (+0.4) Physical Damage and knocking up nearby enemies for up to 1 second based on their proximity to Rek'Sai.                          // A unit cannot be hit by Un-burrow more than once every 10 seconds.                          if (!target.HasBurrowBuff())                          {                              damage = new float[] { 40' 80' 120' 160' 200 }[spellLevel] + 0.4f * player.TotalAttackDamage;                          }                      }                        break;                    case SpellSlot.E:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai bites a target dealing undefined Physical Damage' increasing by up to 100% at maximum Fury. If Rek'Sai has 100 Fury' Furious Bite deals True Damage.                          // Maximum Damage: undefined                          damage = new float[] { 0.8f' 0.9f' 1' 1.1f' 1.2f }[spellLevel] * player.TotalAttackDamage;                          damage *= 1 + (player.Mana / player.MaxMana);                          // True damage on full                          if (player.HasMaxFury())                              damageType = Damage.DamageType.True;                      }                        break;              }
Magic Number,RektSai,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai's next 3 basic attacks within 5 seconds deal 15/25/35/45/55 (+0.2) bonus Physical Damage to nearby enemies.                          damage = new float[] { 15' 25' 35' 45' 55 }[spellLevel] + 0.2f * player.TotalAttackDamage;                          extraDamage = (float)player.GetAutoAttackDamage(target);                      }                      else                      {                          // Rek'Sai launches a burst of void-charged earth that explodes on first unit hit' dealing 60/90/120/150/180 (+0.7) Magic Damage                          // and revealing non-stealthed enemies hit for 2.5 seconds.                          damageType = Damage.DamageType.Magical;                          damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.7f * player.TotalMagicalDamage;                      }                        break;                    case SpellSlot.W:                        if (state == BurrowState.BURROWED || state == BurrowState.AUTOMATIC && player.IsBurrowed())                      {                          // Un-burrow' dealing 40/80/120/160/200 (+0.4) Physical Damage and knocking up nearby enemies for up to 1 second based on their proximity to Rek'Sai.                          // A unit cannot be hit by Un-burrow more than once every 10 seconds.                          if (!target.HasBurrowBuff())                          {                              damage = new float[] { 40' 80' 120' 160' 200 }[spellLevel] + 0.4f * player.TotalAttackDamage;                          }                      }                        break;                    case SpellSlot.E:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai bites a target dealing undefined Physical Damage' increasing by up to 100% at maximum Fury. If Rek'Sai has 100 Fury' Furious Bite deals True Damage.                          // Maximum Damage: undefined                          damage = new float[] { 0.8f' 0.9f' 1' 1.1f' 1.2f }[spellLevel] * player.TotalAttackDamage;                          damage *= 1 + (player.Mana / player.MaxMana);                          // True damage on full                          if (player.HasMaxFury())                              damageType = Damage.DamageType.True;                      }                        break;              }
Magic Number,RektSai,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai's next 3 basic attacks within 5 seconds deal 15/25/35/45/55 (+0.2) bonus Physical Damage to nearby enemies.                          damage = new float[] { 15' 25' 35' 45' 55 }[spellLevel] + 0.2f * player.TotalAttackDamage;                          extraDamage = (float)player.GetAutoAttackDamage(target);                      }                      else                      {                          // Rek'Sai launches a burst of void-charged earth that explodes on first unit hit' dealing 60/90/120/150/180 (+0.7) Magic Damage                          // and revealing non-stealthed enemies hit for 2.5 seconds.                          damageType = Damage.DamageType.Magical;                          damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.7f * player.TotalMagicalDamage;                      }                        break;                    case SpellSlot.W:                        if (state == BurrowState.BURROWED || state == BurrowState.AUTOMATIC && player.IsBurrowed())                      {                          // Un-burrow' dealing 40/80/120/160/200 (+0.4) Physical Damage and knocking up nearby enemies for up to 1 second based on their proximity to Rek'Sai.                          // A unit cannot be hit by Un-burrow more than once every 10 seconds.                          if (!target.HasBurrowBuff())                          {                              damage = new float[] { 40' 80' 120' 160' 200 }[spellLevel] + 0.4f * player.TotalAttackDamage;                          }                      }                        break;                    case SpellSlot.E:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai bites a target dealing undefined Physical Damage' increasing by up to 100% at maximum Fury. If Rek'Sai has 100 Fury' Furious Bite deals True Damage.                          // Maximum Damage: undefined                          damage = new float[] { 0.8f' 0.9f' 1' 1.1f' 1.2f }[spellLevel] * player.TotalAttackDamage;                          damage *= 1 + (player.Mana / player.MaxMana);                          // True damage on full                          if (player.HasMaxFury())                              damageType = Damage.DamageType.True;                      }                        break;              }
Magic Number,RektSai,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai's next 3 basic attacks within 5 seconds deal 15/25/35/45/55 (+0.2) bonus Physical Damage to nearby enemies.                          damage = new float[] { 15' 25' 35' 45' 55 }[spellLevel] + 0.2f * player.TotalAttackDamage;                          extraDamage = (float)player.GetAutoAttackDamage(target);                      }                      else                      {                          // Rek'Sai launches a burst of void-charged earth that explodes on first unit hit' dealing 60/90/120/150/180 (+0.7) Magic Damage                          // and revealing non-stealthed enemies hit for 2.5 seconds.                          damageType = Damage.DamageType.Magical;                          damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.7f * player.TotalMagicalDamage;                      }                        break;                    case SpellSlot.W:                        if (state == BurrowState.BURROWED || state == BurrowState.AUTOMATIC && player.IsBurrowed())                      {                          // Un-burrow' dealing 40/80/120/160/200 (+0.4) Physical Damage and knocking up nearby enemies for up to 1 second based on their proximity to Rek'Sai.                          // A unit cannot be hit by Un-burrow more than once every 10 seconds.                          if (!target.HasBurrowBuff())                          {                              damage = new float[] { 40' 80' 120' 160' 200 }[spellLevel] + 0.4f * player.TotalAttackDamage;                          }                      }                        break;                    case SpellSlot.E:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai bites a target dealing undefined Physical Damage' increasing by up to 100% at maximum Fury. If Rek'Sai has 100 Fury' Furious Bite deals True Damage.                          // Maximum Damage: undefined                          damage = new float[] { 0.8f' 0.9f' 1' 1.1f' 1.2f }[spellLevel] * player.TotalAttackDamage;                          damage *= 1 + (player.Mana / player.MaxMana);                          // True damage on full                          if (player.HasMaxFury())                              damageType = Damage.DamageType.True;                      }                        break;              }
Magic Number,RektSai,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai's next 3 basic attacks within 5 seconds deal 15/25/35/45/55 (+0.2) bonus Physical Damage to nearby enemies.                          damage = new float[] { 15' 25' 35' 45' 55 }[spellLevel] + 0.2f * player.TotalAttackDamage;                          extraDamage = (float)player.GetAutoAttackDamage(target);                      }                      else                      {                          // Rek'Sai launches a burst of void-charged earth that explodes on first unit hit' dealing 60/90/120/150/180 (+0.7) Magic Damage                          // and revealing non-stealthed enemies hit for 2.5 seconds.                          damageType = Damage.DamageType.Magical;                          damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.7f * player.TotalMagicalDamage;                      }                        break;                    case SpellSlot.W:                        if (state == BurrowState.BURROWED || state == BurrowState.AUTOMATIC && player.IsBurrowed())                      {                          // Un-burrow' dealing 40/80/120/160/200 (+0.4) Physical Damage and knocking up nearby enemies for up to 1 second based on their proximity to Rek'Sai.                          // A unit cannot be hit by Un-burrow more than once every 10 seconds.                          if (!target.HasBurrowBuff())                          {                              damage = new float[] { 40' 80' 120' 160' 200 }[spellLevel] + 0.4f * player.TotalAttackDamage;                          }                      }                        break;                    case SpellSlot.E:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai bites a target dealing undefined Physical Damage' increasing by up to 100% at maximum Fury. If Rek'Sai has 100 Fury' Furious Bite deals True Damage.                          // Maximum Damage: undefined                          damage = new float[] { 0.8f' 0.9f' 1' 1.1f' 1.2f }[spellLevel] * player.TotalAttackDamage;                          damage *= 1 + (player.Mana / player.MaxMana);                          // True damage on full                          if (player.HasMaxFury())                              damageType = Damage.DamageType.True;                      }                        break;              }
Magic Number,RektSai,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai's next 3 basic attacks within 5 seconds deal 15/25/35/45/55 (+0.2) bonus Physical Damage to nearby enemies.                          damage = new float[] { 15' 25' 35' 45' 55 }[spellLevel] + 0.2f * player.TotalAttackDamage;                          extraDamage = (float)player.GetAutoAttackDamage(target);                      }                      else                      {                          // Rek'Sai launches a burst of void-charged earth that explodes on first unit hit' dealing 60/90/120/150/180 (+0.7) Magic Damage                          // and revealing non-stealthed enemies hit for 2.5 seconds.                          damageType = Damage.DamageType.Magical;                          damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.7f * player.TotalMagicalDamage;                      }                        break;                    case SpellSlot.W:                        if (state == BurrowState.BURROWED || state == BurrowState.AUTOMATIC && player.IsBurrowed())                      {                          // Un-burrow' dealing 40/80/120/160/200 (+0.4) Physical Damage and knocking up nearby enemies for up to 1 second based on their proximity to Rek'Sai.                          // A unit cannot be hit by Un-burrow more than once every 10 seconds.                          if (!target.HasBurrowBuff())                          {                              damage = new float[] { 40' 80' 120' 160' 200 }[spellLevel] + 0.4f * player.TotalAttackDamage;                          }                      }                        break;                    case SpellSlot.E:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai bites a target dealing undefined Physical Damage' increasing by up to 100% at maximum Fury. If Rek'Sai has 100 Fury' Furious Bite deals True Damage.                          // Maximum Damage: undefined                          damage = new float[] { 0.8f' 0.9f' 1' 1.1f' 1.2f }[spellLevel] * player.TotalAttackDamage;                          damage *= 1 + (player.Mana / player.MaxMana);                          // True damage on full                          if (player.HasMaxFury())                              damageType = Damage.DamageType.True;                      }                        break;              }
Magic Number,RektSai,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai's next 3 basic attacks within 5 seconds deal 15/25/35/45/55 (+0.2) bonus Physical Damage to nearby enemies.                          damage = new float[] { 15' 25' 35' 45' 55 }[spellLevel] + 0.2f * player.TotalAttackDamage;                          extraDamage = (float)player.GetAutoAttackDamage(target);                      }                      else                      {                          // Rek'Sai launches a burst of void-charged earth that explodes on first unit hit' dealing 60/90/120/150/180 (+0.7) Magic Damage                          // and revealing non-stealthed enemies hit for 2.5 seconds.                          damageType = Damage.DamageType.Magical;                          damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.7f * player.TotalMagicalDamage;                      }                        break;                    case SpellSlot.W:                        if (state == BurrowState.BURROWED || state == BurrowState.AUTOMATIC && player.IsBurrowed())                      {                          // Un-burrow' dealing 40/80/120/160/200 (+0.4) Physical Damage and knocking up nearby enemies for up to 1 second based on their proximity to Rek'Sai.                          // A unit cannot be hit by Un-burrow more than once every 10 seconds.                          if (!target.HasBurrowBuff())                          {                              damage = new float[] { 40' 80' 120' 160' 200 }[spellLevel] + 0.4f * player.TotalAttackDamage;                          }                      }                        break;                    case SpellSlot.E:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai bites a target dealing undefined Physical Damage' increasing by up to 100% at maximum Fury. If Rek'Sai has 100 Fury' Furious Bite deals True Damage.                          // Maximum Damage: undefined                          damage = new float[] { 0.8f' 0.9f' 1' 1.1f' 1.2f }[spellLevel] * player.TotalAttackDamage;                          damage *= 1 + (player.Mana / player.MaxMana);                          // True damage on full                          if (player.HasMaxFury())                              damageType = Damage.DamageType.True;                      }                        break;              }
Magic Number,RektSai,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai's next 3 basic attacks within 5 seconds deal 15/25/35/45/55 (+0.2) bonus Physical Damage to nearby enemies.                          damage = new float[] { 15' 25' 35' 45' 55 }[spellLevel] + 0.2f * player.TotalAttackDamage;                          extraDamage = (float)player.GetAutoAttackDamage(target);                      }                      else                      {                          // Rek'Sai launches a burst of void-charged earth that explodes on first unit hit' dealing 60/90/120/150/180 (+0.7) Magic Damage                          // and revealing non-stealthed enemies hit for 2.5 seconds.                          damageType = Damage.DamageType.Magical;                          damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.7f * player.TotalMagicalDamage;                      }                        break;                    case SpellSlot.W:                        if (state == BurrowState.BURROWED || state == BurrowState.AUTOMATIC && player.IsBurrowed())                      {                          // Un-burrow' dealing 40/80/120/160/200 (+0.4) Physical Damage and knocking up nearby enemies for up to 1 second based on their proximity to Rek'Sai.                          // A unit cannot be hit by Un-burrow more than once every 10 seconds.                          if (!target.HasBurrowBuff())                          {                              damage = new float[] { 40' 80' 120' 160' 200 }[spellLevel] + 0.4f * player.TotalAttackDamage;                          }                      }                        break;                    case SpellSlot.E:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai bites a target dealing undefined Physical Damage' increasing by up to 100% at maximum Fury. If Rek'Sai has 100 Fury' Furious Bite deals True Damage.                          // Maximum Damage: undefined                          damage = new float[] { 0.8f' 0.9f' 1' 1.1f' 1.2f }[spellLevel] * player.TotalAttackDamage;                          damage *= 1 + (player.Mana / player.MaxMana);                          // True damage on full                          if (player.HasMaxFury())                              damageType = Damage.DamageType.True;                      }                        break;              }
Magic Number,RektSai,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai's next 3 basic attacks within 5 seconds deal 15/25/35/45/55 (+0.2) bonus Physical Damage to nearby enemies.                          damage = new float[] { 15' 25' 35' 45' 55 }[spellLevel] + 0.2f * player.TotalAttackDamage;                          extraDamage = (float)player.GetAutoAttackDamage(target);                      }                      else                      {                          // Rek'Sai launches a burst of void-charged earth that explodes on first unit hit' dealing 60/90/120/150/180 (+0.7) Magic Damage                          // and revealing non-stealthed enemies hit for 2.5 seconds.                          damageType = Damage.DamageType.Magical;                          damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.7f * player.TotalMagicalDamage;                      }                        break;                    case SpellSlot.W:                        if (state == BurrowState.BURROWED || state == BurrowState.AUTOMATIC && player.IsBurrowed())                      {                          // Un-burrow' dealing 40/80/120/160/200 (+0.4) Physical Damage and knocking up nearby enemies for up to 1 second based on their proximity to Rek'Sai.                          // A unit cannot be hit by Un-burrow more than once every 10 seconds.                          if (!target.HasBurrowBuff())                          {                              damage = new float[] { 40' 80' 120' 160' 200 }[spellLevel] + 0.4f * player.TotalAttackDamage;                          }                      }                        break;                    case SpellSlot.E:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai bites a target dealing undefined Physical Damage' increasing by up to 100% at maximum Fury. If Rek'Sai has 100 Fury' Furious Bite deals True Damage.                          // Maximum Damage: undefined                          damage = new float[] { 0.8f' 0.9f' 1' 1.1f' 1.2f }[spellLevel] * player.TotalAttackDamage;                          damage *= 1 + (player.Mana / player.MaxMana);                          // True damage on full                          if (player.HasMaxFury())                              damageType = Damage.DamageType.True;                      }                        break;              }
Magic Number,RektSai,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai's next 3 basic attacks within 5 seconds deal 15/25/35/45/55 (+0.2) bonus Physical Damage to nearby enemies.                          damage = new float[] { 15' 25' 35' 45' 55 }[spellLevel] + 0.2f * player.TotalAttackDamage;                          extraDamage = (float)player.GetAutoAttackDamage(target);                      }                      else                      {                          // Rek'Sai launches a burst of void-charged earth that explodes on first unit hit' dealing 60/90/120/150/180 (+0.7) Magic Damage                          // and revealing non-stealthed enemies hit for 2.5 seconds.                          damageType = Damage.DamageType.Magical;                          damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.7f * player.TotalMagicalDamage;                      }                        break;                    case SpellSlot.W:                        if (state == BurrowState.BURROWED || state == BurrowState.AUTOMATIC && player.IsBurrowed())                      {                          // Un-burrow' dealing 40/80/120/160/200 (+0.4) Physical Damage and knocking up nearby enemies for up to 1 second based on their proximity to Rek'Sai.                          // A unit cannot be hit by Un-burrow more than once every 10 seconds.                          if (!target.HasBurrowBuff())                          {                              damage = new float[] { 40' 80' 120' 160' 200 }[spellLevel] + 0.4f * player.TotalAttackDamage;                          }                      }                        break;                    case SpellSlot.E:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai bites a target dealing undefined Physical Damage' increasing by up to 100% at maximum Fury. If Rek'Sai has 100 Fury' Furious Bite deals True Damage.                          // Maximum Damage: undefined                          damage = new float[] { 0.8f' 0.9f' 1' 1.1f' 1.2f }[spellLevel] * player.TotalAttackDamage;                          damage *= 1 + (player.Mana / player.MaxMana);                          // True damage on full                          if (player.HasMaxFury())                              damageType = Damage.DamageType.True;                      }                        break;              }
Magic Number,RektSai,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai's next 3 basic attacks within 5 seconds deal 15/25/35/45/55 (+0.2) bonus Physical Damage to nearby enemies.                          damage = new float[] { 15' 25' 35' 45' 55 }[spellLevel] + 0.2f * player.TotalAttackDamage;                          extraDamage = (float)player.GetAutoAttackDamage(target);                      }                      else                      {                          // Rek'Sai launches a burst of void-charged earth that explodes on first unit hit' dealing 60/90/120/150/180 (+0.7) Magic Damage                          // and revealing non-stealthed enemies hit for 2.5 seconds.                          damageType = Damage.DamageType.Magical;                          damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.7f * player.TotalMagicalDamage;                      }                        break;                    case SpellSlot.W:                        if (state == BurrowState.BURROWED || state == BurrowState.AUTOMATIC && player.IsBurrowed())                      {                          // Un-burrow' dealing 40/80/120/160/200 (+0.4) Physical Damage and knocking up nearby enemies for up to 1 second based on their proximity to Rek'Sai.                          // A unit cannot be hit by Un-burrow more than once every 10 seconds.                          if (!target.HasBurrowBuff())                          {                              damage = new float[] { 40' 80' 120' 160' 200 }[spellLevel] + 0.4f * player.TotalAttackDamage;                          }                      }                        break;                    case SpellSlot.E:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai bites a target dealing undefined Physical Damage' increasing by up to 100% at maximum Fury. If Rek'Sai has 100 Fury' Furious Bite deals True Damage.                          // Maximum Damage: undefined                          damage = new float[] { 0.8f' 0.9f' 1' 1.1f' 1.2f }[spellLevel] * player.TotalAttackDamage;                          damage *= 1 + (player.Mana / player.MaxMana);                          // True damage on full                          if (player.HasMaxFury())                              damageType = Damage.DamageType.True;                      }                        break;              }
Magic Number,RektSai,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai's next 3 basic attacks within 5 seconds deal 15/25/35/45/55 (+0.2) bonus Physical Damage to nearby enemies.                          damage = new float[] { 15' 25' 35' 45' 55 }[spellLevel] + 0.2f * player.TotalAttackDamage;                          extraDamage = (float)player.GetAutoAttackDamage(target);                      }                      else                      {                          // Rek'Sai launches a burst of void-charged earth that explodes on first unit hit' dealing 60/90/120/150/180 (+0.7) Magic Damage                          // and revealing non-stealthed enemies hit for 2.5 seconds.                          damageType = Damage.DamageType.Magical;                          damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.7f * player.TotalMagicalDamage;                      }                        break;                    case SpellSlot.W:                        if (state == BurrowState.BURROWED || state == BurrowState.AUTOMATIC && player.IsBurrowed())                      {                          // Un-burrow' dealing 40/80/120/160/200 (+0.4) Physical Damage and knocking up nearby enemies for up to 1 second based on their proximity to Rek'Sai.                          // A unit cannot be hit by Un-burrow more than once every 10 seconds.                          if (!target.HasBurrowBuff())                          {                              damage = new float[] { 40' 80' 120' 160' 200 }[spellLevel] + 0.4f * player.TotalAttackDamage;                          }                      }                        break;                    case SpellSlot.E:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai bites a target dealing undefined Physical Damage' increasing by up to 100% at maximum Fury. If Rek'Sai has 100 Fury' Furious Bite deals True Damage.                          // Maximum Damage: undefined                          damage = new float[] { 0.8f' 0.9f' 1' 1.1f' 1.2f }[spellLevel] * player.TotalAttackDamage;                          damage *= 1 + (player.Mana / player.MaxMana);                          // True damage on full                          if (player.HasMaxFury())                              damageType = Damage.DamageType.True;                      }                        break;              }
Magic Number,RektSai,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai's next 3 basic attacks within 5 seconds deal 15/25/35/45/55 (+0.2) bonus Physical Damage to nearby enemies.                          damage = new float[] { 15' 25' 35' 45' 55 }[spellLevel] + 0.2f * player.TotalAttackDamage;                          extraDamage = (float)player.GetAutoAttackDamage(target);                      }                      else                      {                          // Rek'Sai launches a burst of void-charged earth that explodes on first unit hit' dealing 60/90/120/150/180 (+0.7) Magic Damage                          // and revealing non-stealthed enemies hit for 2.5 seconds.                          damageType = Damage.DamageType.Magical;                          damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.7f * player.TotalMagicalDamage;                      }                        break;                    case SpellSlot.W:                        if (state == BurrowState.BURROWED || state == BurrowState.AUTOMATIC && player.IsBurrowed())                      {                          // Un-burrow' dealing 40/80/120/160/200 (+0.4) Physical Damage and knocking up nearby enemies for up to 1 second based on their proximity to Rek'Sai.                          // A unit cannot be hit by Un-burrow more than once every 10 seconds.                          if (!target.HasBurrowBuff())                          {                              damage = new float[] { 40' 80' 120' 160' 200 }[spellLevel] + 0.4f * player.TotalAttackDamage;                          }                      }                        break;                    case SpellSlot.E:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai bites a target dealing undefined Physical Damage' increasing by up to 100% at maximum Fury. If Rek'Sai has 100 Fury' Furious Bite deals True Damage.                          // Maximum Damage: undefined                          damage = new float[] { 0.8f' 0.9f' 1' 1.1f' 1.2f }[spellLevel] * player.TotalAttackDamage;                          damage *= 1 + (player.Mana / player.MaxMana);                          // True damage on full                          if (player.HasMaxFury())                              damageType = Damage.DamageType.True;                      }                        break;              }
Magic Number,RektSai,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai's next 3 basic attacks within 5 seconds deal 15/25/35/45/55 (+0.2) bonus Physical Damage to nearby enemies.                          damage = new float[] { 15' 25' 35' 45' 55 }[spellLevel] + 0.2f * player.TotalAttackDamage;                          extraDamage = (float)player.GetAutoAttackDamage(target);                      }                      else                      {                          // Rek'Sai launches a burst of void-charged earth that explodes on first unit hit' dealing 60/90/120/150/180 (+0.7) Magic Damage                          // and revealing non-stealthed enemies hit for 2.5 seconds.                          damageType = Damage.DamageType.Magical;                          damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.7f * player.TotalMagicalDamage;                      }                        break;                    case SpellSlot.W:                        if (state == BurrowState.BURROWED || state == BurrowState.AUTOMATIC && player.IsBurrowed())                      {                          // Un-burrow' dealing 40/80/120/160/200 (+0.4) Physical Damage and knocking up nearby enemies for up to 1 second based on their proximity to Rek'Sai.                          // A unit cannot be hit by Un-burrow more than once every 10 seconds.                          if (!target.HasBurrowBuff())                          {                              damage = new float[] { 40' 80' 120' 160' 200 }[spellLevel] + 0.4f * player.TotalAttackDamage;                          }                      }                        break;                    case SpellSlot.E:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai bites a target dealing undefined Physical Damage' increasing by up to 100% at maximum Fury. If Rek'Sai has 100 Fury' Furious Bite deals True Damage.                          // Maximum Damage: undefined                          damage = new float[] { 0.8f' 0.9f' 1' 1.1f' 1.2f }[spellLevel] * player.TotalAttackDamage;                          damage *= 1 + (player.Mana / player.MaxMana);                          // True damage on full                          if (player.HasMaxFury())                              damageType = Damage.DamageType.True;                      }                        break;              }
Magic Number,RektSai,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai's next 3 basic attacks within 5 seconds deal 15/25/35/45/55 (+0.2) bonus Physical Damage to nearby enemies.                          damage = new float[] { 15' 25' 35' 45' 55 }[spellLevel] + 0.2f * player.TotalAttackDamage;                          extraDamage = (float)player.GetAutoAttackDamage(target);                      }                      else                      {                          // Rek'Sai launches a burst of void-charged earth that explodes on first unit hit' dealing 60/90/120/150/180 (+0.7) Magic Damage                          // and revealing non-stealthed enemies hit for 2.5 seconds.                          damageType = Damage.DamageType.Magical;                          damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.7f * player.TotalMagicalDamage;                      }                        break;                    case SpellSlot.W:                        if (state == BurrowState.BURROWED || state == BurrowState.AUTOMATIC && player.IsBurrowed())                      {                          // Un-burrow' dealing 40/80/120/160/200 (+0.4) Physical Damage and knocking up nearby enemies for up to 1 second based on their proximity to Rek'Sai.                          // A unit cannot be hit by Un-burrow more than once every 10 seconds.                          if (!target.HasBurrowBuff())                          {                              damage = new float[] { 40' 80' 120' 160' 200 }[spellLevel] + 0.4f * player.TotalAttackDamage;                          }                      }                        break;                    case SpellSlot.E:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai bites a target dealing undefined Physical Damage' increasing by up to 100% at maximum Fury. If Rek'Sai has 100 Fury' Furious Bite deals True Damage.                          // Maximum Damage: undefined                          damage = new float[] { 0.8f' 0.9f' 1' 1.1f' 1.2f }[spellLevel] * player.TotalAttackDamage;                          damage *= 1 + (player.Mana / player.MaxMana);                          // True damage on full                          if (player.HasMaxFury())                              damageType = Damage.DamageType.True;                      }                        break;              }
Magic Number,RektSai,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai's next 3 basic attacks within 5 seconds deal 15/25/35/45/55 (+0.2) bonus Physical Damage to nearby enemies.                          damage = new float[] { 15' 25' 35' 45' 55 }[spellLevel] + 0.2f * player.TotalAttackDamage;                          extraDamage = (float)player.GetAutoAttackDamage(target);                      }                      else                      {                          // Rek'Sai launches a burst of void-charged earth that explodes on first unit hit' dealing 60/90/120/150/180 (+0.7) Magic Damage                          // and revealing non-stealthed enemies hit for 2.5 seconds.                          damageType = Damage.DamageType.Magical;                          damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.7f * player.TotalMagicalDamage;                      }                        break;                    case SpellSlot.W:                        if (state == BurrowState.BURROWED || state == BurrowState.AUTOMATIC && player.IsBurrowed())                      {                          // Un-burrow' dealing 40/80/120/160/200 (+0.4) Physical Damage and knocking up nearby enemies for up to 1 second based on their proximity to Rek'Sai.                          // A unit cannot be hit by Un-burrow more than once every 10 seconds.                          if (!target.HasBurrowBuff())                          {                              damage = new float[] { 40' 80' 120' 160' 200 }[spellLevel] + 0.4f * player.TotalAttackDamage;                          }                      }                        break;                    case SpellSlot.E:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai bites a target dealing undefined Physical Damage' increasing by up to 100% at maximum Fury. If Rek'Sai has 100 Fury' Furious Bite deals True Damage.                          // Maximum Damage: undefined                          damage = new float[] { 0.8f' 0.9f' 1' 1.1f' 1.2f }[spellLevel] * player.TotalAttackDamage;                          damage *= 1 + (player.Mana / player.MaxMana);                          // True damage on full                          if (player.HasMaxFury())                              damageType = Damage.DamageType.True;                      }                        break;              }
Magic Number,RektSai,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Damages.cs,GetRealDamage,The following statement contains a magic number: switch (slot)              {                  case SpellSlot.Q:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai's next 3 basic attacks within 5 seconds deal 15/25/35/45/55 (+0.2) bonus Physical Damage to nearby enemies.                          damage = new float[] { 15' 25' 35' 45' 55 }[spellLevel] + 0.2f * player.TotalAttackDamage;                          extraDamage = (float)player.GetAutoAttackDamage(target);                      }                      else                      {                          // Rek'Sai launches a burst of void-charged earth that explodes on first unit hit' dealing 60/90/120/150/180 (+0.7) Magic Damage                          // and revealing non-stealthed enemies hit for 2.5 seconds.                          damageType = Damage.DamageType.Magical;                          damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.7f * player.TotalMagicalDamage;                      }                        break;                    case SpellSlot.W:                        if (state == BurrowState.BURROWED || state == BurrowState.AUTOMATIC && player.IsBurrowed())                      {                          // Un-burrow' dealing 40/80/120/160/200 (+0.4) Physical Damage and knocking up nearby enemies for up to 1 second based on their proximity to Rek'Sai.                          // A unit cannot be hit by Un-burrow more than once every 10 seconds.                          if (!target.HasBurrowBuff())                          {                              damage = new float[] { 40' 80' 120' 160' 200 }[spellLevel] + 0.4f * player.TotalAttackDamage;                          }                      }                        break;                    case SpellSlot.E:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai bites a target dealing undefined Physical Damage' increasing by up to 100% at maximum Fury. If Rek'Sai has 100 Fury' Furious Bite deals True Damage.                          // Maximum Damage: undefined                          damage = new float[] { 0.8f' 0.9f' 1' 1.1f' 1.2f }[spellLevel] * player.TotalAttackDamage;                          damage *= 1 + (player.Mana / player.MaxMana);                          // True damage on full                          if (player.HasMaxFury())                              damageType = Damage.DamageType.True;                      }                        break;              }
Magic Number,RektSai,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Damages.cs,GetRealDamage,The following statement contains a magic number: return (float)player.CalcDamage(target' damageType' damage) + extraDamage - 20;
Magic Number,RektSai,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Damages.cs,GetStalkerSmiteDamage,The following statement contains a magic number: return 20 + 8 * player.Level;
Magic Number,RektSai,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Damages.cs,GetStalkerSmiteDamage,The following statement contains a magic number: return 20 + 8 * player.Level;
Magic Number,RektSai,Extensions,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Extensions.cs,IsLowHealth,The following statement contains a magic number: return target.HealthPercentage() < 10;
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: QNormal = new Spell(SpellSlot.Q' 300);
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: WNormal = new Spell(SpellSlot.W' 250);
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: ENormal = new Spell(SpellSlot.E' 250);
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: QBurrowed = new Spell(SpellSlot.Q' 1500' TargetSelector.DamageType.Magical);
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: WBurrowed = new Spell(SpellSlot.W' 250);
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: EBurrowed = new Spell(SpellSlot.E' 750);
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: QBurrowed.SetSkillshot(0.125f' 60' 4000' true' SkillshotType.SkillshotLine);
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: QBurrowed.SetSkillshot(0.125f' 60' 4000' true' SkillshotType.SkillshotLine);
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: QBurrowed.SetSkillshot(0.125f' 60' 4000' true' SkillshotType.SkillshotLine);
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: EBurrowed.SetSkillshot(0' 60' 1600' false' SkillshotType.SkillshotLine);
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: EBurrowed.SetSkillshot(0' 60' 1600' false' SkillshotType.SkillshotLine);
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: cooldowns = new Dictionary<string' float[]>()              {                  { "reksaiq"' new float[] { 4' 4' 4' 4' 4 } }'                  { "reksaie"' new float[] { 12' 12' 12' 12' 12 } }'                  { "reksair"' new float[] { 150' 110' 80 } }'                  { "reksaiqburrowed"' new float[] { 11' 10' 9' 8' 7 } }'                  { "reksaieburrowed"' new float[] { 20' 19.5f' 19' 18.5f' 18 } }'              };
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: cooldowns = new Dictionary<string' float[]>()              {                  { "reksaiq"' new float[] { 4' 4' 4' 4' 4 } }'                  { "reksaie"' new float[] { 12' 12' 12' 12' 12 } }'                  { "reksair"' new float[] { 150' 110' 80 } }'                  { "reksaiqburrowed"' new float[] { 11' 10' 9' 8' 7 } }'                  { "reksaieburrowed"' new float[] { 20' 19.5f' 19' 18.5f' 18 } }'              };
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: cooldowns = new Dictionary<string' float[]>()              {                  { "reksaiq"' new float[] { 4' 4' 4' 4' 4 } }'                  { "reksaie"' new float[] { 12' 12' 12' 12' 12 } }'                  { "reksair"' new float[] { 150' 110' 80 } }'                  { "reksaiqburrowed"' new float[] { 11' 10' 9' 8' 7 } }'                  { "reksaieburrowed"' new float[] { 20' 19.5f' 19' 18.5f' 18 } }'              };
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: cooldowns = new Dictionary<string' float[]>()              {                  { "reksaiq"' new float[] { 4' 4' 4' 4' 4 } }'                  { "reksaie"' new float[] { 12' 12' 12' 12' 12 } }'                  { "reksair"' new float[] { 150' 110' 80 } }'                  { "reksaiqburrowed"' new float[] { 11' 10' 9' 8' 7 } }'                  { "reksaieburrowed"' new float[] { 20' 19.5f' 19' 18.5f' 18 } }'              };
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: cooldowns = new Dictionary<string' float[]>()              {                  { "reksaiq"' new float[] { 4' 4' 4' 4' 4 } }'                  { "reksaie"' new float[] { 12' 12' 12' 12' 12 } }'                  { "reksair"' new float[] { 150' 110' 80 } }'                  { "reksaiqburrowed"' new float[] { 11' 10' 9' 8' 7 } }'                  { "reksaieburrowed"' new float[] { 20' 19.5f' 19' 18.5f' 18 } }'              };
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: cooldowns = new Dictionary<string' float[]>()              {                  { "reksaiq"' new float[] { 4' 4' 4' 4' 4 } }'                  { "reksaie"' new float[] { 12' 12' 12' 12' 12 } }'                  { "reksair"' new float[] { 150' 110' 80 } }'                  { "reksaiqburrowed"' new float[] { 11' 10' 9' 8' 7 } }'                  { "reksaieburrowed"' new float[] { 20' 19.5f' 19' 18.5f' 18 } }'              };
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: cooldowns = new Dictionary<string' float[]>()              {                  { "reksaiq"' new float[] { 4' 4' 4' 4' 4 } }'                  { "reksaie"' new float[] { 12' 12' 12' 12' 12 } }'                  { "reksair"' new float[] { 150' 110' 80 } }'                  { "reksaiqburrowed"' new float[] { 11' 10' 9' 8' 7 } }'                  { "reksaieburrowed"' new float[] { 20' 19.5f' 19' 18.5f' 18 } }'              };
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: cooldowns = new Dictionary<string' float[]>()              {                  { "reksaiq"' new float[] { 4' 4' 4' 4' 4 } }'                  { "reksaie"' new float[] { 12' 12' 12' 12' 12 } }'                  { "reksair"' new float[] { 150' 110' 80 } }'                  { "reksaiqburrowed"' new float[] { 11' 10' 9' 8' 7 } }'                  { "reksaieburrowed"' new float[] { 20' 19.5f' 19' 18.5f' 18 } }'              };
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: cooldowns = new Dictionary<string' float[]>()              {                  { "reksaiq"' new float[] { 4' 4' 4' 4' 4 } }'                  { "reksaie"' new float[] { 12' 12' 12' 12' 12 } }'                  { "reksair"' new float[] { 150' 110' 80 } }'                  { "reksaiqburrowed"' new float[] { 11' 10' 9' 8' 7 } }'                  { "reksaieburrowed"' new float[] { 20' 19.5f' 19' 18.5f' 18 } }'              };
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: cooldowns = new Dictionary<string' float[]>()              {                  { "reksaiq"' new float[] { 4' 4' 4' 4' 4 } }'                  { "reksaie"' new float[] { 12' 12' 12' 12' 12 } }'                  { "reksair"' new float[] { 150' 110' 80 } }'                  { "reksaiqburrowed"' new float[] { 11' 10' 9' 8' 7 } }'                  { "reksaieburrowed"' new float[] { 20' 19.5f' 19' 18.5f' 18 } }'              };
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: cooldowns = new Dictionary<string' float[]>()              {                  { "reksaiq"' new float[] { 4' 4' 4' 4' 4 } }'                  { "reksaie"' new float[] { 12' 12' 12' 12' 12 } }'                  { "reksair"' new float[] { 150' 110' 80 } }'                  { "reksaiqburrowed"' new float[] { 11' 10' 9' 8' 7 } }'                  { "reksaieburrowed"' new float[] { 20' 19.5f' 19' 18.5f' 18 } }'              };
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: cooldowns = new Dictionary<string' float[]>()              {                  { "reksaiq"' new float[] { 4' 4' 4' 4' 4 } }'                  { "reksaie"' new float[] { 12' 12' 12' 12' 12 } }'                  { "reksair"' new float[] { 150' 110' 80 } }'                  { "reksaiqburrowed"' new float[] { 11' 10' 9' 8' 7 } }'                  { "reksaieburrowed"' new float[] { 20' 19.5f' 19' 18.5f' 18 } }'              };
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: cooldowns = new Dictionary<string' float[]>()              {                  { "reksaiq"' new float[] { 4' 4' 4' 4' 4 } }'                  { "reksaie"' new float[] { 12' 12' 12' 12' 12 } }'                  { "reksair"' new float[] { 150' 110' 80 } }'                  { "reksaiqburrowed"' new float[] { 11' 10' 9' 8' 7 } }'                  { "reksaieburrowed"' new float[] { 20' 19.5f' 19' 18.5f' 18 } }'              };
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: cooldowns = new Dictionary<string' float[]>()              {                  { "reksaiq"' new float[] { 4' 4' 4' 4' 4 } }'                  { "reksaie"' new float[] { 12' 12' 12' 12' 12 } }'                  { "reksair"' new float[] { 150' 110' 80 } }'                  { "reksaiqburrowed"' new float[] { 11' 10' 9' 8' 7 } }'                  { "reksaieburrowed"' new float[] { 20' 19.5f' 19' 18.5f' 18 } }'              };
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: cooldowns = new Dictionary<string' float[]>()              {                  { "reksaiq"' new float[] { 4' 4' 4' 4' 4 } }'                  { "reksaie"' new float[] { 12' 12' 12' 12' 12 } }'                  { "reksair"' new float[] { 150' 110' 80 } }'                  { "reksaiqburrowed"' new float[] { 11' 10' 9' 8' 7 } }'                  { "reksaieburrowed"' new float[] { 20' 19.5f' 19' 18.5f' 18 } }'              };
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: cooldowns = new Dictionary<string' float[]>()              {                  { "reksaiq"' new float[] { 4' 4' 4' 4' 4 } }'                  { "reksaie"' new float[] { 12' 12' 12' 12' 12 } }'                  { "reksair"' new float[] { 150' 110' 80 } }'                  { "reksaiqburrowed"' new float[] { 11' 10' 9' 8' 7 } }'                  { "reksaieburrowed"' new float[] { 20' 19.5f' 19' 18.5f' 18 } }'              };
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: cooldowns = new Dictionary<string' float[]>()              {                  { "reksaiq"' new float[] { 4' 4' 4' 4' 4 } }'                  { "reksaie"' new float[] { 12' 12' 12' 12' 12 } }'                  { "reksair"' new float[] { 150' 110' 80 } }'                  { "reksaiqburrowed"' new float[] { 11' 10' 9' 8' 7 } }'                  { "reksaieburrowed"' new float[] { 20' 19.5f' 19' 18.5f' 18 } }'              };
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: cooldowns = new Dictionary<string' float[]>()              {                  { "reksaiq"' new float[] { 4' 4' 4' 4' 4 } }'                  { "reksaie"' new float[] { 12' 12' 12' 12' 12 } }'                  { "reksair"' new float[] { 150' 110' 80 } }'                  { "reksaiqburrowed"' new float[] { 11' 10' 9' 8' 7 } }'                  { "reksaieburrowed"' new float[] { 20' 19.5f' 19' 18.5f' 18 } }'              };
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: cooldowns = new Dictionary<string' float[]>()              {                  { "reksaiq"' new float[] { 4' 4' 4' 4' 4 } }'                  { "reksaie"' new float[] { 12' 12' 12' 12' 12 } }'                  { "reksair"' new float[] { 150' 110' 80 } }'                  { "reksaiqburrowed"' new float[] { 11' 10' 9' 8' 7 } }'                  { "reksaieburrowed"' new float[] { 20' 19.5f' 19' 18.5f' 18 } }'              };
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: cooldowns = new Dictionary<string' float[]>()              {                  { "reksaiq"' new float[] { 4' 4' 4' 4' 4 } }'                  { "reksaie"' new float[] { 12' 12' 12' 12' 12 } }'                  { "reksair"' new float[] { 150' 110' 80 } }'                  { "reksaiqburrowed"' new float[] { 11' 10' 9' 8' 7 } }'                  { "reksaieburrowed"' new float[] { 20' 19.5f' 19' 18.5f' 18 } }'              };
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: cooldowns = new Dictionary<string' float[]>()              {                  { "reksaiq"' new float[] { 4' 4' 4' 4' 4 } }'                  { "reksaie"' new float[] { 12' 12' 12' 12' 12 } }'                  { "reksair"' new float[] { 150' 110' 80 } }'                  { "reksaiqburrowed"' new float[] { 11' 10' 9' 8' 7 } }'                  { "reksaieburrowed"' new float[] { 20' 19.5f' 19' 18.5f' 18 } }'              };
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: cooldowns = new Dictionary<string' float[]>()              {                  { "reksaiq"' new float[] { 4' 4' 4' 4' 4 } }'                  { "reksaie"' new float[] { 12' 12' 12' 12' 12 } }'                  { "reksair"' new float[] { 150' 110' 80 } }'                  { "reksaiqburrowed"' new float[] { 11' 10' 9' 8' 7 } }'                  { "reksaieburrowed"' new float[] { 20' 19.5f' 19' 18.5f' 18 } }'              };
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,SpellManager,The following statement contains a magic number: cooldowns = new Dictionary<string' float[]>()              {                  { "reksaiq"' new float[] { 4' 4' 4' 4' 4 } }'                  { "reksaie"' new float[] { 12' 12' 12' 12' 12 } }'                  { "reksair"' new float[] { 150' 110' 80 } }'                  { "reksaiqburrowed"' new float[] { 11' 10' 9' 8' 7 } }'                  { "reksaieburrowed"' new float[] { 20' 19.5f' 19' 18.5f' 18 } }'              };
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,IsReallyReady,The following statement contains a magic number: return spell.Cooldown() - timeInMillis / 1000f <= 0;
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,Obj_AI_Base_OnProcessSpellCast,The following statement contains a magic number: var tweak = -((Game.Ping / 2) / 1000);
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,Obj_AI_Base_OnProcessSpellCast,The following statement contains a magic number: var tweak = -((Game.Ping / 2) / 1000);
Magic Number,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,Obj_AI_Base_OnProcessSpellCast,The following statement contains a magic number: switch (spell.Slot)                      {                          // Special cases for W' it has a fixed cooldown of 1 and 4                          case SpellSlot.W:                                if (player.IsBurrowed())                                  cooldownExpires[WNormal] = Game.Time + 4 + tweak;                              else                                  cooldownExpires[WBurrowed] = Game.Time + 1 + tweak;                              break;                            case SpellSlot.Q:                          case SpellSlot.E:                          case SpellSlot.R:                                cooldownExpires[spell] = Game.Time + cooldowns[spell.Instance.Name.ToLower()][spell.Level - 1] * (1 + player.PercentCooldownMod) + tweak;                              break;                      }
Missing Default,RektSai,Damages,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\Damages.cs,GetRealDamage,The following switch statement is missing a default case: switch (slot)              {                  case SpellSlot.Q:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai's next 3 basic attacks within 5 seconds deal 15/25/35/45/55 (+0.2) bonus Physical Damage to nearby enemies.                          damage = new float[] { 15' 25' 35' 45' 55 }[spellLevel] + 0.2f * player.TotalAttackDamage;                          extraDamage = (float)player.GetAutoAttackDamage(target);                      }                      else                      {                          // Rek'Sai launches a burst of void-charged earth that explodes on first unit hit' dealing 60/90/120/150/180 (+0.7) Magic Damage                          // and revealing non-stealthed enemies hit for 2.5 seconds.                          damageType = Damage.DamageType.Magical;                          damage = new float[] { 60' 90' 120' 150' 180 }[spellLevel] + 0.7f * player.TotalMagicalDamage;                      }                        break;                    case SpellSlot.W:                        if (state == BurrowState.BURROWED || state == BurrowState.AUTOMATIC && player.IsBurrowed())                      {                          // Un-burrow' dealing 40/80/120/160/200 (+0.4) Physical Damage and knocking up nearby enemies for up to 1 second based on their proximity to Rek'Sai.                          // A unit cannot be hit by Un-burrow more than once every 10 seconds.                          if (!target.HasBurrowBuff())                          {                              damage = new float[] { 40' 80' 120' 160' 200 }[spellLevel] + 0.4f * player.TotalAttackDamage;                          }                      }                        break;                    case SpellSlot.E:                        if (state == BurrowState.UNBURROWED || state == BurrowState.AUTOMATIC && !player.IsBurrowed())                      {                          // Rek'Sai bites a target dealing undefined Physical Damage' increasing by up to 100% at maximum Fury. If Rek'Sai has 100 Fury' Furious Bite deals True Damage.                          // Maximum Damage: undefined                          damage = new float[] { 0.8f' 0.9f' 1' 1.1f' 1.2f }[spellLevel] * player.TotalAttackDamage;                          damage *= 1 + (player.Mana / player.MaxMana);                          // True damage on full                          if (player.HasMaxFury())                              damageType = Damage.DamageType.True;                      }                        break;              }
Missing Default,RektSai,SpellManager,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellManager.cs,Obj_AI_Base_OnProcessSpellCast,The following switch statement is missing a default case: switch (spell.Slot)                      {                          // Special cases for W' it has a fixed cooldown of 1 and 4                          case SpellSlot.W:                                if (player.IsBurrowed())                                  cooldownExpires[WNormal] = Game.Time + 4 + tweak;                              else                                  cooldownExpires[WBurrowed] = Game.Time + 1 + tweak;                              break;                            case SpellSlot.Q:                          case SpellSlot.E:                          case SpellSlot.R:                                cooldownExpires[spell] = Game.Time + cooldowns[spell.Instance.Name.ToLower()][spell.Level - 1] * (1 + player.PercentCooldownMod) + tweak;                              break;                      }
Missing Default,RektSai,SpellQueue,D:\research\architectureSmells\repos\Hellsing_LeagueSharp\RektSai\SpellQueue.cs,Spellbook_OnCastSpell,The following switch statement is missing a default case: switch (args.Slot)                  {                      case SpellSlot.Q:                      case SpellSlot.W:                      case SpellSlot.E:                      case SpellSlot.R:                            if (IsReady)                          {                              // We are safe to cast a spell                              sendTime = TickCount;                          }                          else                          {                              // Don't allow the spellcast                              args.Process = false;                          }                          break;                  }
