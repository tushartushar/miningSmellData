Implementation smell,Namespace,Class,File,Method,Description
Long Statement,NMoneys.Exchange,ExchangeRate,C:\repos\dgg_nmoneys\src\NMoneys.Exchange\ExchangeRate.cs,Parse,The length of the statement  "				throw new FormatException("Input string was not in a correct format: {three_letter_isocode}/{three_letter_isocode} {rate}"' ex); " is 128.
Long Statement,NMoneys.Exchange,ExchangeRatePair,C:\repos\dgg_nmoneys\src\NMoneys.Exchange\TabulatedExchangeRateProvider.cs,AssertConsistentcy,The length of the statement  "				if (direct.From != inverse.To) throw new DifferentCurrencyException(direct.From.AlphabeticCode()' inverse.To.AlphabeticCode()); " is 127.
Long Statement,NMoneys.Exchange,ExchangeRatePair,C:\repos\dgg_nmoneys\src\NMoneys.Exchange\TabulatedExchangeRateProvider.cs,AssertConsistentcy,The length of the statement  "				if (direct.To != inverse.From) throw new DifferentCurrencyException(direct.To.AlphabeticCode()' inverse.From.AlphabeticCode()); " is 127.
Magic Number,NMoneys.Exchange,ExchangeRate,C:\repos\dgg_nmoneys\src\NMoneys.Exchange\ExchangeRate.cs,Parse,The following statement contains a magic number: try  			{  				string from = rateRepresentation.Substring(0' 3)'  					to = rateRepresentation.Substring(4' 3)'  					rate = rateRepresentation.Substring(8);    				return new ExchangeRate(  					Currency.Code.Parse(from)'  					Currency.Code.Parse(to)'  					decimal.Parse(rate' CultureInfo.InvariantCulture));  			}  			catch (Exception ex)  			{  				throw new FormatException("Input string was not in a correct format: {three_letter_isocode}/{three_letter_isocode} {rate}"' ex);  			}
Magic Number,NMoneys.Exchange,ExchangeRate,C:\repos\dgg_nmoneys\src\NMoneys.Exchange\ExchangeRate.cs,Parse,The following statement contains a magic number: try  			{  				string from = rateRepresentation.Substring(0' 3)'  					to = rateRepresentation.Substring(4' 3)'  					rate = rateRepresentation.Substring(8);    				return new ExchangeRate(  					Currency.Code.Parse(from)'  					Currency.Code.Parse(to)'  					decimal.Parse(rate' CultureInfo.InvariantCulture));  			}  			catch (Exception ex)  			{  				throw new FormatException("Input string was not in a correct format: {three_letter_isocode}/{three_letter_isocode} {rate}"' ex);  			}
Magic Number,NMoneys.Exchange,ExchangeRate,C:\repos\dgg_nmoneys\src\NMoneys.Exchange\ExchangeRate.cs,Parse,The following statement contains a magic number: try  			{  				string from = rateRepresentation.Substring(0' 3)'  					to = rateRepresentation.Substring(4' 3)'  					rate = rateRepresentation.Substring(8);    				return new ExchangeRate(  					Currency.Code.Parse(from)'  					Currency.Code.Parse(to)'  					decimal.Parse(rate' CultureInfo.InvariantCulture));  			}  			catch (Exception ex)  			{  				throw new FormatException("Input string was not in a correct format: {three_letter_isocode}/{three_letter_isocode} {rate}"' ex);  			}
Magic Number,NMoneys.Exchange,ExchangeRate,C:\repos\dgg_nmoneys\src\NMoneys.Exchange\ExchangeRate.cs,Parse,The following statement contains a magic number: try  			{  				string from = rateRepresentation.Substring(0' 3)'  					to = rateRepresentation.Substring(4' 3)'  					rate = rateRepresentation.Substring(8);    				return new ExchangeRate(  					Currency.Code.Parse(from)'  					Currency.Code.Parse(to)'  					decimal.Parse(rate' CultureInfo.InvariantCulture));  			}  			catch (Exception ex)  			{  				throw new FormatException("Input string was not in a correct format: {three_letter_isocode}/{three_letter_isocode} {rate}"' ex);  			}
Magic Number,NMoneys.Exchange,ExchangeRate,C:\repos\dgg_nmoneys\src\NMoneys.Exchange\ExchangeRate.cs,GetHashCode,The following statement contains a magic number: unchecked  			{  				int result = From.GetHashCode();  				result = (result*397) ^ To.GetHashCode();  				result = (result*397) ^ Rate.GetHashCode();  				return result;  			}
Magic Number,NMoneys.Exchange,ExchangeRate,C:\repos\dgg_nmoneys\src\NMoneys.Exchange\ExchangeRate.cs,GetHashCode,The following statement contains a magic number: unchecked  			{  				int result = From.GetHashCode();  				result = (result*397) ^ To.GetHashCode();  				result = (result*397) ^ Rate.GetHashCode();  				return result;  			}
