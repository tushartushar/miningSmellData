Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,NMoneys,Currency,C:\repos\dgg_nmoneys\src\NMoneys\Currency.Code.cs,Currency,The method has 12 parameters. Parameters: isoCode' englishName' nativeName' symbol' significantDecimalDigits' decimalSeparator' groupSeparator' groupSizes' positivePattern' negativePattern' isObsolete' entity
Long Parameter List,NMoneys,Currency,C:\repos\dgg_nmoneys\src\NMoneys\Currency.Code.cs,setAllFields,The method has 12 parameters. Parameters: isoCode' englishName' nativeName' symbol' significantDecimalDigits' decimalSeparator' groupSeparator' groupSizes' positivePattern' negativePattern' isObsolete' entity
Long Parameter List,NMoneys,CurrencyInfo,C:\repos\dgg_nmoneys\src\NMoneys\CurrencyInfo.cs,CurrencyInfo,The method has 12 parameters. Parameters: code' englishName' nativeName' tokenizedSymbol' significantDecimalDigits' decimalSeparator' groupSeparator' tokenizedGroupSizes' positivePattern' negativePattern' obsolete' entity
Long Parameter List,NMoneys,Money,C:\repos\dgg_nmoneys\src\NMoneys\Money.Arithmetic.cs,TryParse,The method has 5 parameters. Parameters: s' style' numberFormatInfo' currency' money
Long Statement,NMoneys,Money,C:\repos\dgg_nmoneys\src\NMoneys\Money.Arithmetic.cs,AssertSameCurrency,The length of the statement  "			if (!HasSameCurrencyAs(money)) throw new DifferentCurrencyException(CurrencyCode.ToString()' money.CurrencyCode.ToString()); " is 124.
Long Statement,NMoneys,Money,C:\repos\dgg_nmoneys\src\NMoneys\Money.Arithmetic.cs,AssertSameCurrency,The length of the statement  "				if (!HasSameCurrencyAs(money)) throw new DifferentCurrencyException(CurrencyCode.ToString()' money.CurrencyCode.ToString());	 " is 124.
Long Statement,NMoneys,Money,C:\repos\dgg_nmoneys\src\NMoneys\Money.Arithmetic.cs,Format,The length of the statement  "			return string.Format(currency' format' Amount' currency.Symbol' currency.IsoCode' currency.EnglishName' currency.NativeName); " is 125.
Long Statement,NMoneys,Money,C:\repos\dgg_nmoneys\src\NMoneys\Money.Arithmetic.cs,Format,The length of the statement  "			return string.Format(provider' format' Amount' currency.Symbol' currency.IsoCode' currency.EnglishName' currency.NativeName); " is 125.
Long Statement,NMoneys,EmbeddedXml,C:\repos\dgg_nmoneys\src\NMoneys\Providers.cs,ReadInfo,The length of the statement  "			XPathNavigator node = navigator.SelectSingleNode(string.Format(CultureInfo.InvariantCulture' "/currencies/currency[@code='{0}']"' code)); " is 137.
Long Statement,NMoneys.Support,Range,C:\repos\dgg_nmoneys\src\NMoneys\Support\Range.cs,AssertArgument,The length of the statement  "					$"The value must be between {_lowerBound.ToAssertion()} and {_upperBound.ToAssertion()}. That is' contained within {this}."); " is 125.
Empty Catch Block,NMoneys.Support,Enumeration,C:\repos\dgg_nmoneys\src\NMoneys\Support\Enumeration.cs,checkDefined,The method has an empty catch block.
Magic Number,NMoneys,CharacterReference,C:\repos\dgg_nmoneys\src\NMoneys\CharacterReference.cs,toSimpleName,The following statement contains a magic number: return lower(complexEntityName.Substring(1' complexEntityName.Length - 2));
Magic Number,NMoneys,CurrencyCache,C:\repos\dgg_nmoneys\src\NMoneys\CurrencyCache.cs,CurrencyCache,The following statement contains a magic number: int concurrency = Environment.ProcessorCount * 4;
Magic Number,NMoneys,CurrencyCharacterReferences,C:\repos\dgg_nmoneys\src\NMoneys\CurrencyCharacterReferences.cs,CurrencyCharacterReferences,The following statement contains a magic number: _currencyReferences = new Dictionary<string' CharacterReference>(6' StringComparer.OrdinalIgnoreCase)  			{  				{"cent"' Cent = new CharacterReference("cent")}'  				{"pound"' Pound = new CharacterReference("pound")}'  				{"curren"' Curren = new CharacterReference("curren")}'  				{"yen"' Yen = new CharacterReference("yen")}'  				{"fnof"' Fnof = new CharacterReference("fnof")}'  				{"euro"' Euro = new CharacterReference("euro")}  			};
Magic Number,NMoneys,Money,C:\repos\dgg_nmoneys\src\NMoneys\Money.Arithmetic.cs,GetHashCode,The following statement contains a magic number: unchecked  			{  				return (CurrencyCode.GetHashCode() * 397) ^ Amount.GetHashCode();  			}
Magic Number,NMoneys.Change,IntegralDenomination,C:\repos\dgg_nmoneys\src\NMoneys\Change\IntegralDenomination.cs,GetHashCode,The following statement contains a magic number: unchecked  			{  				return (Denomination.GetHashCode() * 397) ^ IntegralAmount.GetHashCode();  			}
Magic Number,NMoneys.Support,Range,C:\repos\dgg_nmoneys\src\NMoneys\Support\Range.cs,GetHashCode,The following statement contains a magic number: unchecked  			{  				return ((_lowerBound != null ? _lowerBound.GetHashCode() : 0) * 397) ^  					(_upperBound != null ? _upperBound.GetHashCode() : 0);  			}
Magic Number,NMoneys.Support.Ext,Extensions,C:\repos\dgg_nmoneys\src\NMoneys\Support\Extensions.cs,TranslateNegativePattern,The following statement contains a magic number: switch (currencyNegativePattern)  			{  				case 0:  				case 4:  				case 14:  				case 15:  					numberNegativePattern = 0;  					break;  				case 1:  				case 2:  				case 5:  				case 8:  				case 12:  					numberNegativePattern = 1;  					break;  				case 9:  					numberNegativePattern = 2;  					break;  				case 3:  				case 6:  				case 7:  				case 11:  				case 13:  					numberNegativePattern = 3;  					break;  				case 10:  					numberNegativePattern = 4;  					break;  				default:  					new Range<int>(0.Close()' 15.Close()).AssertArgument(nameof(currencyNegativePattern)' currencyNegativePattern);  					break;  			}
Magic Number,NMoneys.Support.Ext,Extensions,C:\repos\dgg_nmoneys\src\NMoneys\Support\Extensions.cs,TranslateNegativePattern,The following statement contains a magic number: switch (currencyNegativePattern)  			{  				case 0:  				case 4:  				case 14:  				case 15:  					numberNegativePattern = 0;  					break;  				case 1:  				case 2:  				case 5:  				case 8:  				case 12:  					numberNegativePattern = 1;  					break;  				case 9:  					numberNegativePattern = 2;  					break;  				case 3:  				case 6:  				case 7:  				case 11:  				case 13:  					numberNegativePattern = 3;  					break;  				case 10:  					numberNegativePattern = 4;  					break;  				default:  					new Range<int>(0.Close()' 15.Close()).AssertArgument(nameof(currencyNegativePattern)' currencyNegativePattern);  					break;  			}
Magic Number,NMoneys.Support.Ext,Extensions,C:\repos\dgg_nmoneys\src\NMoneys\Support\Extensions.cs,TranslateNegativePattern,The following statement contains a magic number: switch (currencyNegativePattern)  			{  				case 0:  				case 4:  				case 14:  				case 15:  					numberNegativePattern = 0;  					break;  				case 1:  				case 2:  				case 5:  				case 8:  				case 12:  					numberNegativePattern = 1;  					break;  				case 9:  					numberNegativePattern = 2;  					break;  				case 3:  				case 6:  				case 7:  				case 11:  				case 13:  					numberNegativePattern = 3;  					break;  				case 10:  					numberNegativePattern = 4;  					break;  				default:  					new Range<int>(0.Close()' 15.Close()).AssertArgument(nameof(currencyNegativePattern)' currencyNegativePattern);  					break;  			}
Magic Number,NMoneys.Support.Ext,Extensions,C:\repos\dgg_nmoneys\src\NMoneys\Support\Extensions.cs,TranslateNegativePattern,The following statement contains a magic number: switch (currencyNegativePattern)  			{  				case 0:  				case 4:  				case 14:  				case 15:  					numberNegativePattern = 0;  					break;  				case 1:  				case 2:  				case 5:  				case 8:  				case 12:  					numberNegativePattern = 1;  					break;  				case 9:  					numberNegativePattern = 2;  					break;  				case 3:  				case 6:  				case 7:  				case 11:  				case 13:  					numberNegativePattern = 3;  					break;  				case 10:  					numberNegativePattern = 4;  					break;  				default:  					new Range<int>(0.Close()' 15.Close()).AssertArgument(nameof(currencyNegativePattern)' currencyNegativePattern);  					break;  			}
Magic Number,NMoneys.Support.Ext,Extensions,C:\repos\dgg_nmoneys\src\NMoneys\Support\Extensions.cs,TranslateNegativePattern,The following statement contains a magic number: switch (currencyNegativePattern)  			{  				case 0:  				case 4:  				case 14:  				case 15:  					numberNegativePattern = 0;  					break;  				case 1:  				case 2:  				case 5:  				case 8:  				case 12:  					numberNegativePattern = 1;  					break;  				case 9:  					numberNegativePattern = 2;  					break;  				case 3:  				case 6:  				case 7:  				case 11:  				case 13:  					numberNegativePattern = 3;  					break;  				case 10:  					numberNegativePattern = 4;  					break;  				default:  					new Range<int>(0.Close()' 15.Close()).AssertArgument(nameof(currencyNegativePattern)' currencyNegativePattern);  					break;  			}
Magic Number,NMoneys.Support.Ext,Extensions,C:\repos\dgg_nmoneys\src\NMoneys\Support\Extensions.cs,TranslateNegativePattern,The following statement contains a magic number: switch (currencyNegativePattern)  			{  				case 0:  				case 4:  				case 14:  				case 15:  					numberNegativePattern = 0;  					break;  				case 1:  				case 2:  				case 5:  				case 8:  				case 12:  					numberNegativePattern = 1;  					break;  				case 9:  					numberNegativePattern = 2;  					break;  				case 3:  				case 6:  				case 7:  				case 11:  				case 13:  					numberNegativePattern = 3;  					break;  				case 10:  					numberNegativePattern = 4;  					break;  				default:  					new Range<int>(0.Close()' 15.Close()).AssertArgument(nameof(currencyNegativePattern)' currencyNegativePattern);  					break;  			}
Magic Number,NMoneys.Support.Ext,Extensions,C:\repos\dgg_nmoneys\src\NMoneys\Support\Extensions.cs,TranslateNegativePattern,The following statement contains a magic number: switch (currencyNegativePattern)  			{  				case 0:  				case 4:  				case 14:  				case 15:  					numberNegativePattern = 0;  					break;  				case 1:  				case 2:  				case 5:  				case 8:  				case 12:  					numberNegativePattern = 1;  					break;  				case 9:  					numberNegativePattern = 2;  					break;  				case 3:  				case 6:  				case 7:  				case 11:  				case 13:  					numberNegativePattern = 3;  					break;  				case 10:  					numberNegativePattern = 4;  					break;  				default:  					new Range<int>(0.Close()' 15.Close()).AssertArgument(nameof(currencyNegativePattern)' currencyNegativePattern);  					break;  			}
Magic Number,NMoneys.Support.Ext,Extensions,C:\repos\dgg_nmoneys\src\NMoneys\Support\Extensions.cs,TranslateNegativePattern,The following statement contains a magic number: switch (currencyNegativePattern)  			{  				case 0:  				case 4:  				case 14:  				case 15:  					numberNegativePattern = 0;  					break;  				case 1:  				case 2:  				case 5:  				case 8:  				case 12:  					numberNegativePattern = 1;  					break;  				case 9:  					numberNegativePattern = 2;  					break;  				case 3:  				case 6:  				case 7:  				case 11:  				case 13:  					numberNegativePattern = 3;  					break;  				case 10:  					numberNegativePattern = 4;  					break;  				default:  					new Range<int>(0.Close()' 15.Close()).AssertArgument(nameof(currencyNegativePattern)' currencyNegativePattern);  					break;  			}
Magic Number,NMoneys.Support.Ext,Extensions,C:\repos\dgg_nmoneys\src\NMoneys\Support\Extensions.cs,TranslateNegativePattern,The following statement contains a magic number: switch (currencyNegativePattern)  			{  				case 0:  				case 4:  				case 14:  				case 15:  					numberNegativePattern = 0;  					break;  				case 1:  				case 2:  				case 5:  				case 8:  				case 12:  					numberNegativePattern = 1;  					break;  				case 9:  					numberNegativePattern = 2;  					break;  				case 3:  				case 6:  				case 7:  				case 11:  				case 13:  					numberNegativePattern = 3;  					break;  				case 10:  					numberNegativePattern = 4;  					break;  				default:  					new Range<int>(0.Close()' 15.Close()).AssertArgument(nameof(currencyNegativePattern)' currencyNegativePattern);  					break;  			}
Magic Number,NMoneys.Support.Ext,Extensions,C:\repos\dgg_nmoneys\src\NMoneys\Support\Extensions.cs,TranslateNegativePattern,The following statement contains a magic number: switch (currencyNegativePattern)  			{  				case 0:  				case 4:  				case 14:  				case 15:  					numberNegativePattern = 0;  					break;  				case 1:  				case 2:  				case 5:  				case 8:  				case 12:  					numberNegativePattern = 1;  					break;  				case 9:  					numberNegativePattern = 2;  					break;  				case 3:  				case 6:  				case 7:  				case 11:  				case 13:  					numberNegativePattern = 3;  					break;  				case 10:  					numberNegativePattern = 4;  					break;  				default:  					new Range<int>(0.Close()' 15.Close()).AssertArgument(nameof(currencyNegativePattern)' currencyNegativePattern);  					break;  			}
Magic Number,NMoneys.Support.Ext,Extensions,C:\repos\dgg_nmoneys\src\NMoneys\Support\Extensions.cs,TranslateNegativePattern,The following statement contains a magic number: switch (currencyNegativePattern)  			{  				case 0:  				case 4:  				case 14:  				case 15:  					numberNegativePattern = 0;  					break;  				case 1:  				case 2:  				case 5:  				case 8:  				case 12:  					numberNegativePattern = 1;  					break;  				case 9:  					numberNegativePattern = 2;  					break;  				case 3:  				case 6:  				case 7:  				case 11:  				case 13:  					numberNegativePattern = 3;  					break;  				case 10:  					numberNegativePattern = 4;  					break;  				default:  					new Range<int>(0.Close()' 15.Close()).AssertArgument(nameof(currencyNegativePattern)' currencyNegativePattern);  					break;  			}
Magic Number,NMoneys.Support.Ext,Extensions,C:\repos\dgg_nmoneys\src\NMoneys\Support\Extensions.cs,TranslateNegativePattern,The following statement contains a magic number: switch (currencyNegativePattern)  			{  				case 0:  				case 4:  				case 14:  				case 15:  					numberNegativePattern = 0;  					break;  				case 1:  				case 2:  				case 5:  				case 8:  				case 12:  					numberNegativePattern = 1;  					break;  				case 9:  					numberNegativePattern = 2;  					break;  				case 3:  				case 6:  				case 7:  				case 11:  				case 13:  					numberNegativePattern = 3;  					break;  				case 10:  					numberNegativePattern = 4;  					break;  				default:  					new Range<int>(0.Close()' 15.Close()).AssertArgument(nameof(currencyNegativePattern)' currencyNegativePattern);  					break;  			}
Magic Number,NMoneys.Support.Ext,Extensions,C:\repos\dgg_nmoneys\src\NMoneys\Support\Extensions.cs,TranslateNegativePattern,The following statement contains a magic number: switch (currencyNegativePattern)  			{  				case 0:  				case 4:  				case 14:  				case 15:  					numberNegativePattern = 0;  					break;  				case 1:  				case 2:  				case 5:  				case 8:  				case 12:  					numberNegativePattern = 1;  					break;  				case 9:  					numberNegativePattern = 2;  					break;  				case 3:  				case 6:  				case 7:  				case 11:  				case 13:  					numberNegativePattern = 3;  					break;  				case 10:  					numberNegativePattern = 4;  					break;  				default:  					new Range<int>(0.Close()' 15.Close()).AssertArgument(nameof(currencyNegativePattern)' currencyNegativePattern);  					break;  			}
Magic Number,NMoneys.Support.Ext,Extensions,C:\repos\dgg_nmoneys\src\NMoneys\Support\Extensions.cs,TranslateNegativePattern,The following statement contains a magic number: switch (currencyNegativePattern)  			{  				case 0:  				case 4:  				case 14:  				case 15:  					numberNegativePattern = 0;  					break;  				case 1:  				case 2:  				case 5:  				case 8:  				case 12:  					numberNegativePattern = 1;  					break;  				case 9:  					numberNegativePattern = 2;  					break;  				case 3:  				case 6:  				case 7:  				case 11:  				case 13:  					numberNegativePattern = 3;  					break;  				case 10:  					numberNegativePattern = 4;  					break;  				default:  					new Range<int>(0.Close()' 15.Close()).AssertArgument(nameof(currencyNegativePattern)' currencyNegativePattern);  					break;  			}
Magic Number,NMoneys.Support.Ext,Extensions,C:\repos\dgg_nmoneys\src\NMoneys\Support\Extensions.cs,TranslateNegativePattern,The following statement contains a magic number: switch (currencyNegativePattern)  			{  				case 0:  				case 4:  				case 14:  				case 15:  					numberNegativePattern = 0;  					break;  				case 1:  				case 2:  				case 5:  				case 8:  				case 12:  					numberNegativePattern = 1;  					break;  				case 9:  					numberNegativePattern = 2;  					break;  				case 3:  				case 6:  				case 7:  				case 11:  				case 13:  					numberNegativePattern = 3;  					break;  				case 10:  					numberNegativePattern = 4;  					break;  				default:  					new Range<int>(0.Close()' 15.Close()).AssertArgument(nameof(currencyNegativePattern)' currencyNegativePattern);  					break;  			}
Magic Number,NMoneys.Support.Ext,Extensions,C:\repos\dgg_nmoneys\src\NMoneys\Support\Extensions.cs,TranslateNegativePattern,The following statement contains a magic number: switch (currencyNegativePattern)  			{  				case 0:  				case 4:  				case 14:  				case 15:  					numberNegativePattern = 0;  					break;  				case 1:  				case 2:  				case 5:  				case 8:  				case 12:  					numberNegativePattern = 1;  					break;  				case 9:  					numberNegativePattern = 2;  					break;  				case 3:  				case 6:  				case 7:  				case 11:  				case 13:  					numberNegativePattern = 3;  					break;  				case 10:  					numberNegativePattern = 4;  					break;  				default:  					new Range<int>(0.Close()' 15.Close()).AssertArgument(nameof(currencyNegativePattern)' currencyNegativePattern);  					break;  			}
Magic Number,NMoneys.Support.Ext,Extensions,C:\repos\dgg_nmoneys\src\NMoneys\Support\Extensions.cs,TranslateNegativePattern,The following statement contains a magic number: switch (currencyNegativePattern)  			{  				case 0:  				case 4:  				case 14:  				case 15:  					numberNegativePattern = 0;  					break;  				case 1:  				case 2:  				case 5:  				case 8:  				case 12:  					numberNegativePattern = 1;  					break;  				case 9:  					numberNegativePattern = 2;  					break;  				case 3:  				case 6:  				case 7:  				case 11:  				case 13:  					numberNegativePattern = 3;  					break;  				case 10:  					numberNegativePattern = 4;  					break;  				default:  					new Range<int>(0.Close()' 15.Close()).AssertArgument(nameof(currencyNegativePattern)' currencyNegativePattern);  					break;  			}
Magic Number,NMoneys.Support.Ext,Extensions,C:\repos\dgg_nmoneys\src\NMoneys\Support\Extensions.cs,TranslateNegativePattern,The following statement contains a magic number: switch (currencyNegativePattern)  			{  				case 0:  				case 4:  				case 14:  				case 15:  					numberNegativePattern = 0;  					break;  				case 1:  				case 2:  				case 5:  				case 8:  				case 12:  					numberNegativePattern = 1;  					break;  				case 9:  					numberNegativePattern = 2;  					break;  				case 3:  				case 6:  				case 7:  				case 11:  				case 13:  					numberNegativePattern = 3;  					break;  				case 10:  					numberNegativePattern = 4;  					break;  				default:  					new Range<int>(0.Close()' 15.Close()).AssertArgument(nameof(currencyNegativePattern)' currencyNegativePattern);  					break;  			}
