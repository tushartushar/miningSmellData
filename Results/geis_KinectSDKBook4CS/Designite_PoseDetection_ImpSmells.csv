Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,PoseDetection,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\PoseDetection\MainWindow.xaml.cs,GetFourSkeletonPosition,The method has 5 parameters. Parameters: skeletonFrame' pos1' pos2' pos3' pos4
Magic Number,PoseDetection,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\PoseDetection\MainWindow.xaml.cs,kinect_ColorFrameReady,The following statement contains a magic number: try {          // RGBカメラのフレームデータを取得する          using ( ColorImageFrame colorFrame = e.OpenColorImageFrame() ) {            if ( colorFrame != null ) {              // RGBカメラのピクセルデータを取得する              byte[] colorPixel = new byte[colorFrame.PixelDataLength];              colorFrame.CopyPixelDataTo( colorPixel );                // ピクセルデータをビットマップに変換する              RGBCameraImage.Source = BitmapSource.Create( colorFrame.Width' colorFrame.Height' 96' 96'                  PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel );            }          }        }        catch ( Exception ex ) {          MessageBox.Show( ex.Message );        }
Magic Number,PoseDetection,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\PoseDetection\MainWindow.xaml.cs,kinect_ColorFrameReady,The following statement contains a magic number: try {          // RGBカメラのフレームデータを取得する          using ( ColorImageFrame colorFrame = e.OpenColorImageFrame() ) {            if ( colorFrame != null ) {              // RGBカメラのピクセルデータを取得する              byte[] colorPixel = new byte[colorFrame.PixelDataLength];              colorFrame.CopyPixelDataTo( colorPixel );                // ピクセルデータをビットマップに変換する              RGBCameraImage.Source = BitmapSource.Create( colorFrame.Width' colorFrame.Height' 96' 96'                  PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel );            }          }        }        catch ( Exception ex ) {          MessageBox.Show( ex.Message );        }
Magic Number,PoseDetection,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\PoseDetection\MainWindow.xaml.cs,DrawCrossPoint,The following statement contains a magic number: const int R = 5;
Magic Number,PoseDetection,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\PoseDetection\MainWindow.xaml.cs,DrawCrossPoint,The following statement contains a magic number: ColorImagePoint[] jointImagePosition = new ColorImagePoint[4];
Magic Number,PoseDetection,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\PoseDetection\MainWindow.xaml.cs,DrawCrossPoint,The following statement contains a magic number: for ( int i = 0; i < 4; i++ ) {          jointImagePosition[i] =              kinect.MapSkeletonPointToColor( joints[i].Position' kinect.ColorStream.Format );            canvas.Children.Add( new Ellipse()          {            Fill = new SolidColorBrush( Colors.Yellow )'            Margin = new Thickness( jointImagePosition[i].X - R' jointImagePosition[i].Y - R' 0' 0 )'            Width = R * 2'            Height = R * 2'          } );        }
Magic Number,PoseDetection,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\PoseDetection\MainWindow.xaml.cs,DrawCrossPoint,The following statement contains a magic number: for ( int i = 0; i < 4; i++ ) {          jointImagePosition[i] =              kinect.MapSkeletonPointToColor( joints[i].Position' kinect.ColorStream.Format );            canvas.Children.Add( new Ellipse()          {            Fill = new SolidColorBrush( Colors.Yellow )'            Margin = new Thickness( jointImagePosition[i].X - R' jointImagePosition[i].Y - R' 0' 0 )'            Width = R * 2'            Height = R * 2'          } );        }
Magic Number,PoseDetection,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\PoseDetection\MainWindow.xaml.cs,DrawCrossPoint,The following statement contains a magic number: for ( int i = 0; i < 4; i++ ) {          jointImagePosition[i] =              kinect.MapSkeletonPointToColor( joints[i].Position' kinect.ColorStream.Format );            canvas.Children.Add( new Ellipse()          {            Fill = new SolidColorBrush( Colors.Yellow )'            Margin = new Thickness( jointImagePosition[i].X - R' jointImagePosition[i].Y - R' 0' 0 )'            Width = R * 2'            Height = R * 2'          } );        }
Magic Number,PoseDetection,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\PoseDetection\MainWindow.xaml.cs,DrawCrossPoint,The following statement contains a magic number: bool isCross = CrossHitCheck( joints[0].Position' joints[1].Position'          joints[2].Position' joints[3].Position );
Magic Number,PoseDetection,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\PoseDetection\MainWindow.xaml.cs,DrawCrossPoint,The following statement contains a magic number: bool isCross = CrossHitCheck( joints[0].Position' joints[1].Position'          joints[2].Position' joints[3].Position );
Magic Number,PoseDetection,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\PoseDetection\MainWindow.xaml.cs,DrawCrossPoint,The following statement contains a magic number: if ( isCross ) {          // クロスしている点を計算して円を表示する          ColorImagePoint crossPoint = GetCrossPoint( jointImagePosition[0]' jointImagePosition[1]'            jointImagePosition[2]' jointImagePosition[3] );            CrossEllipse.Margin = new Thickness( crossPoint.X - CrossEllipse.Width / 2'            crossPoint.Y - CrossEllipse.Height / 2' 0' 0 );          CrossEllipse.Visibility = System.Windows.Visibility.Visible;          canvas.Children.Add( CrossEllipse );        }        else {          CrossEllipse.Visibility = System.Windows.Visibility.Hidden;        }
Magic Number,PoseDetection,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\PoseDetection\MainWindow.xaml.cs,DrawCrossPoint,The following statement contains a magic number: if ( isCross ) {          // クロスしている点を計算して円を表示する          ColorImagePoint crossPoint = GetCrossPoint( jointImagePosition[0]' jointImagePosition[1]'            jointImagePosition[2]' jointImagePosition[3] );            CrossEllipse.Margin = new Thickness( crossPoint.X - CrossEllipse.Width / 2'            crossPoint.Y - CrossEllipse.Height / 2' 0' 0 );          CrossEllipse.Visibility = System.Windows.Visibility.Visible;          canvas.Children.Add( CrossEllipse );        }        else {          CrossEllipse.Visibility = System.Windows.Visibility.Hidden;        }
Magic Number,PoseDetection,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\PoseDetection\MainWindow.xaml.cs,DrawCrossPoint,The following statement contains a magic number: if ( isCross ) {          // クロスしている点を計算して円を表示する          ColorImagePoint crossPoint = GetCrossPoint( jointImagePosition[0]' jointImagePosition[1]'            jointImagePosition[2]' jointImagePosition[3] );            CrossEllipse.Margin = new Thickness( crossPoint.X - CrossEllipse.Width / 2'            crossPoint.Y - CrossEllipse.Height / 2' 0' 0 );          CrossEllipse.Visibility = System.Windows.Visibility.Visible;          canvas.Children.Add( CrossEllipse );        }        else {          CrossEllipse.Visibility = System.Windows.Visibility.Hidden;        }
Magic Number,PoseDetection,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\PoseDetection\MainWindow.xaml.cs,DrawCrossPoint,The following statement contains a magic number: if ( isCross ) {          // クロスしている点を計算して円を表示する          ColorImagePoint crossPoint = GetCrossPoint( jointImagePosition[0]' jointImagePosition[1]'            jointImagePosition[2]' jointImagePosition[3] );            CrossEllipse.Margin = new Thickness( crossPoint.X - CrossEllipse.Width / 2'            crossPoint.Y - CrossEllipse.Height / 2' 0' 0 );          CrossEllipse.Visibility = System.Windows.Visibility.Visible;          canvas.Children.Add( CrossEllipse );        }        else {          CrossEllipse.Visibility = System.Windows.Visibility.Hidden;        }
Magic Number,PoseDetection,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\PoseDetection\MainWindow.xaml.cs,GetFourSkeletonPosition,The following statement contains a magic number: JointType[] jointTypes = new JointType[4] {          pos1' pos2' pos3' pos4        };
Magic Number,PoseDetection,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\PoseDetection\MainWindow.xaml.cs,GetFourSkeletonPosition,The following statement contains a magic number: foreach ( Skeleton skeleton in skeletons ) {          // スケルトンがトラッキング状態(デフォルトモードの)の場合は、ジョイントを描画する          if ( skeleton.TrackingState == SkeletonTrackingState.Tracked ) {            // ジョイントを抽出する            Joint[] joints = new Joint[4];            for(int i =  0; i < 4; i++){              // 指定のジョイントがトラッキングされてない場合はnullを返す              if ( skeleton.Joints[jointTypes[i]].TrackingState == JointTrackingState.NotTracked ) {                return null;              }                joints[i] = skeleton.Joints[jointTypes[i]];            }              return joints;          }        }
Magic Number,PoseDetection,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\PoseDetection\MainWindow.xaml.cs,GetFourSkeletonPosition,The following statement contains a magic number: foreach ( Skeleton skeleton in skeletons ) {          // スケルトンがトラッキング状態(デフォルトモードの)の場合は、ジョイントを描画する          if ( skeleton.TrackingState == SkeletonTrackingState.Tracked ) {            // ジョイントを抽出する            Joint[] joints = new Joint[4];            for(int i =  0; i < 4; i++){              // 指定のジョイントがトラッキングされてない場合はnullを返す              if ( skeleton.Joints[jointTypes[i]].TrackingState == JointTrackingState.NotTracked ) {                return null;              }                joints[i] = skeleton.Joints[jointTypes[i]];            }              return joints;          }        }
Magic Number,PoseDetection,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\PoseDetection\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\MainWindow.xaml"              ((PoseDetection.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.RGBCameraImage = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.canvas = ((System.Windows.Controls.Canvas)(target));              return;              case 4:              this.CrossEllipse = ((System.Windows.Shapes.Ellipse)(target));              return;              }
Magic Number,PoseDetection,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\PoseDetection\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\MainWindow.xaml"              ((PoseDetection.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.RGBCameraImage = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.canvas = ((System.Windows.Controls.Canvas)(target));              return;              case 4:              this.CrossEllipse = ((System.Windows.Shapes.Ellipse)(target));              return;              }
Magic Number,PoseDetection,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\PoseDetection\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\MainWindow.xaml"              ((PoseDetection.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.RGBCameraImage = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.canvas = ((System.Windows.Controls.Canvas)(target));              return;              case 4:              this.CrossEllipse = ((System.Windows.Shapes.Ellipse)(target));              return;              }
Missing Default,PoseDetection,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\PoseDetection\MainWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\MainWindow.xaml"              ((PoseDetection.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.RGBCameraImage = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.canvas = ((System.Windows.Controls.Canvas)(target));              return;              case 4:              this.CrossEllipse = ((System.Windows.Shapes.Ellipse)(target));              return;              }
