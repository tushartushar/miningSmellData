Implementation smell,Namespace,Class,File,Method,Description
Complex Method,KinectPointCloud,PointCloudScene,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\KinectPointCloud\PointCloudScene.cs,GetPoint,Cyclomatic complexity of the method is 8
Magic Number,KinectPointCloud,Form1,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\KinectPointCloud\Form1.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (624' 442);  
Magic Number,KinectPointCloud,Form1,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\KinectPointCloud\Form1.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (624' 442);  
Magic Number,KinectPointCloud,PointCloudScene,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\KinectPointCloud\PointCloudScene.cs,GetPoint,The following statement contains a magic number: using (ColorImageFrame colorFrame = kinect.ColorStream.OpenNextFrame (100)) {  	using (DepthImageFrame depthFrame = kinect.DepthStream.OpenNextFrame (100)) {  		if (colorFrame == null || depthFrame == null) {  			return false;  		}  		// RGBカメラのデータを作成する  		byte[] colorPixel = new byte[colorFrame.PixelDataLength];  		colorFrame.CopyPixelDataTo (colorPixel);  		rgb = new RGB[colorFrame.Width * colorFrame.Height];  		for (int i = 0; i < rgb.Length; i++) {  			int colorIndex = i * 4;  			rgb [i] = new RGB (colorPixel [colorIndex + 2]' colorPixel [colorIndex + 1]' colorPixel [colorIndex]);  		}  		// 距離カメラのピクセルデータを取得する  		short[] depthPixel = new short[depthFrame.PixelDataLength];  		depthFrame.CopyPixelDataTo (depthPixel);  		// 距離カメラの座標に対応するRGBカメラの座標を取得する(座標合わせ)  		ColorImagePoint[] colorPoint = new ColorImagePoint[depthFrame.PixelDataLength];  		kinect.MapDepthFrameToColorFrame (depthStream.Format' depthPixel' colorStream.Format' colorPoint);  		// 距離データを作成する  		depth = new Depth[depthFrame.Width * depthFrame.Height];  		for (int i = 0; i < depth.Length; i++) {  			int x = Math.Min (colorPoint [i].X' colorStream.FrameWidth - 1);  			int y = Math.Min (colorPoint [i].Y' colorStream.FrameHeight - 1);  			int distance = depthPixel [i] >> DepthImageFrame.PlayerIndexBitmaskWidth;  			depth [i] = new Depth (x' y' distance);  		}  	}  }  
Magic Number,KinectPointCloud,PointCloudScene,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\KinectPointCloud\PointCloudScene.cs,GetPoint,The following statement contains a magic number: using (ColorImageFrame colorFrame = kinect.ColorStream.OpenNextFrame (100)) {  	using (DepthImageFrame depthFrame = kinect.DepthStream.OpenNextFrame (100)) {  		if (colorFrame == null || depthFrame == null) {  			return false;  		}  		// RGBカメラのデータを作成する  		byte[] colorPixel = new byte[colorFrame.PixelDataLength];  		colorFrame.CopyPixelDataTo (colorPixel);  		rgb = new RGB[colorFrame.Width * colorFrame.Height];  		for (int i = 0; i < rgb.Length; i++) {  			int colorIndex = i * 4;  			rgb [i] = new RGB (colorPixel [colorIndex + 2]' colorPixel [colorIndex + 1]' colorPixel [colorIndex]);  		}  		// 距離カメラのピクセルデータを取得する  		short[] depthPixel = new short[depthFrame.PixelDataLength];  		depthFrame.CopyPixelDataTo (depthPixel);  		// 距離カメラの座標に対応するRGBカメラの座標を取得する(座標合わせ)  		ColorImagePoint[] colorPoint = new ColorImagePoint[depthFrame.PixelDataLength];  		kinect.MapDepthFrameToColorFrame (depthStream.Format' depthPixel' colorStream.Format' colorPoint);  		// 距離データを作成する  		depth = new Depth[depthFrame.Width * depthFrame.Height];  		for (int i = 0; i < depth.Length; i++) {  			int x = Math.Min (colorPoint [i].X' colorStream.FrameWidth - 1);  			int y = Math.Min (colorPoint [i].Y' colorStream.FrameHeight - 1);  			int distance = depthPixel [i] >> DepthImageFrame.PlayerIndexBitmaskWidth;  			depth [i] = new Depth (x' y' distance);  		}  	}  }  
Magic Number,KinectPointCloud,PointCloudScene,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\KinectPointCloud\PointCloudScene.cs,GetPoint,The following statement contains a magic number: using (ColorImageFrame colorFrame = kinect.ColorStream.OpenNextFrame (100)) {  	using (DepthImageFrame depthFrame = kinect.DepthStream.OpenNextFrame (100)) {  		if (colorFrame == null || depthFrame == null) {  			return false;  		}  		// RGBカメラのデータを作成する  		byte[] colorPixel = new byte[colorFrame.PixelDataLength];  		colorFrame.CopyPixelDataTo (colorPixel);  		rgb = new RGB[colorFrame.Width * colorFrame.Height];  		for (int i = 0; i < rgb.Length; i++) {  			int colorIndex = i * 4;  			rgb [i] = new RGB (colorPixel [colorIndex + 2]' colorPixel [colorIndex + 1]' colorPixel [colorIndex]);  		}  		// 距離カメラのピクセルデータを取得する  		short[] depthPixel = new short[depthFrame.PixelDataLength];  		depthFrame.CopyPixelDataTo (depthPixel);  		// 距離カメラの座標に対応するRGBカメラの座標を取得する(座標合わせ)  		ColorImagePoint[] colorPoint = new ColorImagePoint[depthFrame.PixelDataLength];  		kinect.MapDepthFrameToColorFrame (depthStream.Format' depthPixel' colorStream.Format' colorPoint);  		// 距離データを作成する  		depth = new Depth[depthFrame.Width * depthFrame.Height];  		for (int i = 0; i < depth.Length; i++) {  			int x = Math.Min (colorPoint [i].X' colorStream.FrameWidth - 1);  			int y = Math.Min (colorPoint [i].Y' colorStream.FrameHeight - 1);  			int distance = depthPixel [i] >> DepthImageFrame.PlayerIndexBitmaskWidth;  			depth [i] = new Depth (x' y' distance);  		}  	}  }  
Magic Number,KinectPointCloud,PointCloudScene,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\KinectPointCloud\PointCloudScene.cs,GetPoint,The following statement contains a magic number: using (ColorImageFrame colorFrame = kinect.ColorStream.OpenNextFrame (100)) {  	using (DepthImageFrame depthFrame = kinect.DepthStream.OpenNextFrame (100)) {  		if (colorFrame == null || depthFrame == null) {  			return false;  		}  		// RGBカメラのデータを作成する  		byte[] colorPixel = new byte[colorFrame.PixelDataLength];  		colorFrame.CopyPixelDataTo (colorPixel);  		rgb = new RGB[colorFrame.Width * colorFrame.Height];  		for (int i = 0; i < rgb.Length; i++) {  			int colorIndex = i * 4;  			rgb [i] = new RGB (colorPixel [colorIndex + 2]' colorPixel [colorIndex + 1]' colorPixel [colorIndex]);  		}  		// 距離カメラのピクセルデータを取得する  		short[] depthPixel = new short[depthFrame.PixelDataLength];  		depthFrame.CopyPixelDataTo (depthPixel);  		// 距離カメラの座標に対応するRGBカメラの座標を取得する(座標合わせ)  		ColorImagePoint[] colorPoint = new ColorImagePoint[depthFrame.PixelDataLength];  		kinect.MapDepthFrameToColorFrame (depthStream.Format' depthPixel' colorStream.Format' colorPoint);  		// 距離データを作成する  		depth = new Depth[depthFrame.Width * depthFrame.Height];  		for (int i = 0; i < depth.Length; i++) {  			int x = Math.Min (colorPoint [i].X' colorStream.FrameWidth - 1);  			int y = Math.Min (colorPoint [i].Y' colorStream.FrameHeight - 1);  			int distance = depthPixel [i] >> DepthImageFrame.PlayerIndexBitmaskWidth;  			depth [i] = new Depth (x' y' distance);  		}  	}  }  
Magic Number,KinectPointCloud,PointCloudScene,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\KinectPointCloud\PointCloudScene.cs,GetPoint,The following statement contains a magic number: using (DepthImageFrame depthFrame = kinect.DepthStream.OpenNextFrame (100)) {  	if (colorFrame == null || depthFrame == null) {  		return false;  	}  	// RGBカメラのデータを作成する  	byte[] colorPixel = new byte[colorFrame.PixelDataLength];  	colorFrame.CopyPixelDataTo (colorPixel);  	rgb = new RGB[colorFrame.Width * colorFrame.Height];  	for (int i = 0; i < rgb.Length; i++) {  		int colorIndex = i * 4;  		rgb [i] = new RGB (colorPixel [colorIndex + 2]' colorPixel [colorIndex + 1]' colorPixel [colorIndex]);  	}  	// 距離カメラのピクセルデータを取得する  	short[] depthPixel = new short[depthFrame.PixelDataLength];  	depthFrame.CopyPixelDataTo (depthPixel);  	// 距離カメラの座標に対応するRGBカメラの座標を取得する(座標合わせ)  	ColorImagePoint[] colorPoint = new ColorImagePoint[depthFrame.PixelDataLength];  	kinect.MapDepthFrameToColorFrame (depthStream.Format' depthPixel' colorStream.Format' colorPoint);  	// 距離データを作成する  	depth = new Depth[depthFrame.Width * depthFrame.Height];  	for (int i = 0; i < depth.Length; i++) {  		int x = Math.Min (colorPoint [i].X' colorStream.FrameWidth - 1);  		int y = Math.Min (colorPoint [i].Y' colorStream.FrameHeight - 1);  		int distance = depthPixel [i] >> DepthImageFrame.PlayerIndexBitmaskWidth;  		depth [i] = new Depth (x' y' distance);  	}  }  
Magic Number,KinectPointCloud,PointCloudScene,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\KinectPointCloud\PointCloudScene.cs,GetPoint,The following statement contains a magic number: using (DepthImageFrame depthFrame = kinect.DepthStream.OpenNextFrame (100)) {  	if (colorFrame == null || depthFrame == null) {  		return false;  	}  	// RGBカメラのデータを作成する  	byte[] colorPixel = new byte[colorFrame.PixelDataLength];  	colorFrame.CopyPixelDataTo (colorPixel);  	rgb = new RGB[colorFrame.Width * colorFrame.Height];  	for (int i = 0; i < rgb.Length; i++) {  		int colorIndex = i * 4;  		rgb [i] = new RGB (colorPixel [colorIndex + 2]' colorPixel [colorIndex + 1]' colorPixel [colorIndex]);  	}  	// 距離カメラのピクセルデータを取得する  	short[] depthPixel = new short[depthFrame.PixelDataLength];  	depthFrame.CopyPixelDataTo (depthPixel);  	// 距離カメラの座標に対応するRGBカメラの座標を取得する(座標合わせ)  	ColorImagePoint[] colorPoint = new ColorImagePoint[depthFrame.PixelDataLength];  	kinect.MapDepthFrameToColorFrame (depthStream.Format' depthPixel' colorStream.Format' colorPoint);  	// 距離データを作成する  	depth = new Depth[depthFrame.Width * depthFrame.Height];  	for (int i = 0; i < depth.Length; i++) {  		int x = Math.Min (colorPoint [i].X' colorStream.FrameWidth - 1);  		int y = Math.Min (colorPoint [i].Y' colorStream.FrameHeight - 1);  		int distance = depthPixel [i] >> DepthImageFrame.PlayerIndexBitmaskWidth;  		depth [i] = new Depth (x' y' distance);  	}  }  
Magic Number,KinectPointCloud,PointCloudScene,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\KinectPointCloud\PointCloudScene.cs,GetPoint,The following statement contains a magic number: using (DepthImageFrame depthFrame = kinect.DepthStream.OpenNextFrame (100)) {  	if (colorFrame == null || depthFrame == null) {  		return false;  	}  	// RGBカメラのデータを作成する  	byte[] colorPixel = new byte[colorFrame.PixelDataLength];  	colorFrame.CopyPixelDataTo (colorPixel);  	rgb = new RGB[colorFrame.Width * colorFrame.Height];  	for (int i = 0; i < rgb.Length; i++) {  		int colorIndex = i * 4;  		rgb [i] = new RGB (colorPixel [colorIndex + 2]' colorPixel [colorIndex + 1]' colorPixel [colorIndex]);  	}  	// 距離カメラのピクセルデータを取得する  	short[] depthPixel = new short[depthFrame.PixelDataLength];  	depthFrame.CopyPixelDataTo (depthPixel);  	// 距離カメラの座標に対応するRGBカメラの座標を取得する(座標合わせ)  	ColorImagePoint[] colorPoint = new ColorImagePoint[depthFrame.PixelDataLength];  	kinect.MapDepthFrameToColorFrame (depthStream.Format' depthPixel' colorStream.Format' colorPoint);  	// 距離データを作成する  	depth = new Depth[depthFrame.Width * depthFrame.Height];  	for (int i = 0; i < depth.Length; i++) {  		int x = Math.Min (colorPoint [i].X' colorStream.FrameWidth - 1);  		int y = Math.Min (colorPoint [i].Y' colorStream.FrameHeight - 1);  		int distance = depthPixel [i] >> DepthImageFrame.PlayerIndexBitmaskWidth;  		depth [i] = new Depth (x' y' distance);  	}  }  
Magic Number,KinectPointCloud,PointCloudScene,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\KinectPointCloud\PointCloudScene.cs,GetPoint,The following statement contains a magic number: for (int i = 0; i < rgb.Length; i++) {  	int colorIndex = i * 4;  	rgb [i] = new RGB (colorPixel [colorIndex + 2]' colorPixel [colorIndex + 1]' colorPixel [colorIndex]);  }  
Magic Number,KinectPointCloud,PointCloudScene,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\KinectPointCloud\PointCloudScene.cs,GetPoint,The following statement contains a magic number: for (int i = 0; i < rgb.Length; i++) {  	int colorIndex = i * 4;  	rgb [i] = new RGB (colorPixel [colorIndex + 2]' colorPixel [colorIndex + 1]' colorPixel [colorIndex]);  }  
Magic Number,KinectPointCloud,PointCloudScene,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\KinectPointCloud\PointCloudScene.cs,GetPoint,The following statement contains a magic number: rgb [i] = new RGB (colorPixel [colorIndex + 2]' colorPixel [colorIndex + 1]' colorPixel [colorIndex]);  
