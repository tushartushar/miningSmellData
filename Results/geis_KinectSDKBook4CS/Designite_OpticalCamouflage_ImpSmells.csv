Implementation smell,Namespace,Class,File,Method,Description
Complex Method,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,kinect_AllFramesReady,Cyclomatic complexity of the method is 9
Long Statement,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,kinect_AllFramesReady,The length of the statement  "					imageRgb.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' bits' colorFrame.Width * colorFrame.BytesPerPixel); " is 161.
Magic Number,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: try {  	// Kinectのインスタンスを取得する  	KinectSensor kinect = sender as KinectSensor;  	if (kinect == null) {  		return;  	}  	// ラジオボタンによって、背景をマスクするか、光学迷彩するかを決める  	using (ColorImageFrame colorFrame = e.OpenColorImageFrame ()) {  		using (DepthImageFrame depthFrame = e.OpenDepthImageFrame ()) {  			if ((colorFrame != null) && (depthFrame != null)) {  				byte[] bits;  				if (radioButtonOpticalCamouflage.IsChecked == true) {  					bits = OpticalCamouflage (kinect' colorFrame' depthFrame);  				} else {  					bits = BackgroundMask (kinect' colorFrame' depthFrame);  				}  				imageRgb.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' bits' colorFrame.Width * colorFrame.BytesPerPixel);  			}  		}  	}  } catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: try {  	// Kinectのインスタンスを取得する  	KinectSensor kinect = sender as KinectSensor;  	if (kinect == null) {  		return;  	}  	// ラジオボタンによって、背景をマスクするか、光学迷彩するかを決める  	using (ColorImageFrame colorFrame = e.OpenColorImageFrame ()) {  		using (DepthImageFrame depthFrame = e.OpenDepthImageFrame ()) {  			if ((colorFrame != null) && (depthFrame != null)) {  				byte[] bits;  				if (radioButtonOpticalCamouflage.IsChecked == true) {  					bits = OpticalCamouflage (kinect' colorFrame' depthFrame);  				} else {  					bits = BackgroundMask (kinect' colorFrame' depthFrame);  				}  				imageRgb.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' bits' colorFrame.Width * colorFrame.BytesPerPixel);  			}  		}  	}  } catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: using (ColorImageFrame colorFrame = e.OpenColorImageFrame ()) {  	using (DepthImageFrame depthFrame = e.OpenDepthImageFrame ()) {  		if ((colorFrame != null) && (depthFrame != null)) {  			byte[] bits;  			if (radioButtonOpticalCamouflage.IsChecked == true) {  				bits = OpticalCamouflage (kinect' colorFrame' depthFrame);  			} else {  				bits = BackgroundMask (kinect' colorFrame' depthFrame);  			}  			imageRgb.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' bits' colorFrame.Width * colorFrame.BytesPerPixel);  		}  	}  }  
Magic Number,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: using (ColorImageFrame colorFrame = e.OpenColorImageFrame ()) {  	using (DepthImageFrame depthFrame = e.OpenDepthImageFrame ()) {  		if ((colorFrame != null) && (depthFrame != null)) {  			byte[] bits;  			if (radioButtonOpticalCamouflage.IsChecked == true) {  				bits = OpticalCamouflage (kinect' colorFrame' depthFrame);  			} else {  				bits = BackgroundMask (kinect' colorFrame' depthFrame);  			}  			imageRgb.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' bits' colorFrame.Width * colorFrame.BytesPerPixel);  		}  	}  }  
Magic Number,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: using (DepthImageFrame depthFrame = e.OpenDepthImageFrame ()) {  	if ((colorFrame != null) && (depthFrame != null)) {  		byte[] bits;  		if (radioButtonOpticalCamouflage.IsChecked == true) {  			bits = OpticalCamouflage (kinect' colorFrame' depthFrame);  		} else {  			bits = BackgroundMask (kinect' colorFrame' depthFrame);  		}  		imageRgb.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' bits' colorFrame.Width * colorFrame.BytesPerPixel);  	}  }  
Magic Number,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: using (DepthImageFrame depthFrame = e.OpenDepthImageFrame ()) {  	if ((colorFrame != null) && (depthFrame != null)) {  		byte[] bits;  		if (radioButtonOpticalCamouflage.IsChecked == true) {  			bits = OpticalCamouflage (kinect' colorFrame' depthFrame);  		} else {  			bits = BackgroundMask (kinect' colorFrame' depthFrame);  		}  		imageRgb.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' bits' colorFrame.Width * colorFrame.BytesPerPixel);  	}  }  
Magic Number,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: if ((colorFrame != null) && (depthFrame != null)) {  	byte[] bits;  	if (radioButtonOpticalCamouflage.IsChecked == true) {  		bits = OpticalCamouflage (kinect' colorFrame' depthFrame);  	} else {  		bits = BackgroundMask (kinect' colorFrame' depthFrame);  	}  	imageRgb.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' bits' colorFrame.Width * colorFrame.BytesPerPixel);  }  
Magic Number,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: if ((colorFrame != null) && (depthFrame != null)) {  	byte[] bits;  	if (radioButtonOpticalCamouflage.IsChecked == true) {  		bits = OpticalCamouflage (kinect' colorFrame' depthFrame);  	} else {  		bits = BackgroundMask (kinect' colorFrame' depthFrame);  	}  	imageRgb.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' bits' colorFrame.Width * colorFrame.BytesPerPixel);  }  
Magic Number,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: imageRgb.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' bits' colorFrame.Width * colorFrame.BytesPerPixel);  
Magic Number,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: imageRgb.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' bits' colorFrame.Width * colorFrame.BytesPerPixel);  
Magic Number,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,BackgroundMask,The following statement contains a magic number: for (int i = 0; i < outputColor.Length; i += Bgr32BytesPerPixel) {  	outputColor [i] = 255;  	outputColor [i + 1] = 255;  	outputColor [i + 2] = 255;  }  
Magic Number,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,BackgroundMask,The following statement contains a magic number: for (int i = 0; i < outputColor.Length; i += Bgr32BytesPerPixel) {  	outputColor [i] = 255;  	outputColor [i + 1] = 255;  	outputColor [i + 2] = 255;  }  
Magic Number,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,BackgroundMask,The following statement contains a magic number: for (int i = 0; i < outputColor.Length; i += Bgr32BytesPerPixel) {  	outputColor [i] = 255;  	outputColor [i + 1] = 255;  	outputColor [i + 2] = 255;  }  
Magic Number,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,BackgroundMask,The following statement contains a magic number: for (int i = 0; i < outputColor.Length; i += Bgr32BytesPerPixel) {  	outputColor [i] = 255;  	outputColor [i + 1] = 255;  	outputColor [i + 2] = 255;  }  
Magic Number,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,BackgroundMask,The following statement contains a magic number: outputColor [i] = 255;  
Magic Number,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,BackgroundMask,The following statement contains a magic number: outputColor [i + 1] = 255;  
Magic Number,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,BackgroundMask,The following statement contains a magic number: outputColor [i + 2] = 255;  
Magic Number,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,BackgroundMask,The following statement contains a magic number: outputColor [i + 2] = 255;  
Magic Number,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,BackgroundMask,The following statement contains a magic number: for (int index = 0; index < depthPixel.Length; index++) {  	// プレイヤーを取得する  	int player = depthPixel [index] & DepthImageFrame.PlayerIndexBitmask;  	// 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う  	int x = Math.Min (colorPoint [index].X' colorStream.FrameWidth - 1);  	int y = Math.Min (colorPoint [index].Y' colorStream.FrameHeight - 1);  	int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;  	// プレーヤーを検出した座標だけ、RGBカメラの画像を使う  	if (player != 0) {  		outputColor [colorIndex] = colorPixel [colorIndex];  		outputColor [colorIndex + 1] = colorPixel [colorIndex + 1];  		outputColor [colorIndex + 2] = colorPixel [colorIndex + 2];  	}  }  
Magic Number,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,BackgroundMask,The following statement contains a magic number: for (int index = 0; index < depthPixel.Length; index++) {  	// プレイヤーを取得する  	int player = depthPixel [index] & DepthImageFrame.PlayerIndexBitmask;  	// 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う  	int x = Math.Min (colorPoint [index].X' colorStream.FrameWidth - 1);  	int y = Math.Min (colorPoint [index].Y' colorStream.FrameHeight - 1);  	int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;  	// プレーヤーを検出した座標だけ、RGBカメラの画像を使う  	if (player != 0) {  		outputColor [colorIndex] = colorPixel [colorIndex];  		outputColor [colorIndex + 1] = colorPixel [colorIndex + 1];  		outputColor [colorIndex + 2] = colorPixel [colorIndex + 2];  	}  }  
Magic Number,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,BackgroundMask,The following statement contains a magic number: if (player != 0) {  	outputColor [colorIndex] = colorPixel [colorIndex];  	outputColor [colorIndex + 1] = colorPixel [colorIndex + 1];  	outputColor [colorIndex + 2] = colorPixel [colorIndex + 2];  }  
Magic Number,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,BackgroundMask,The following statement contains a magic number: if (player != 0) {  	outputColor [colorIndex] = colorPixel [colorIndex];  	outputColor [colorIndex + 1] = colorPixel [colorIndex + 1];  	outputColor [colorIndex + 2] = colorPixel [colorIndex + 2];  }  
Magic Number,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,BackgroundMask,The following statement contains a magic number: outputColor [colorIndex + 2] = colorPixel [colorIndex + 2];  
Magic Number,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,BackgroundMask,The following statement contains a magic number: outputColor [colorIndex + 2] = colorPixel [colorIndex + 2];  
Magic Number,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,OpticalCamouflage,The following statement contains a magic number: for (int index = 0; index < depthPixel.Length; index++) {  	// プレイヤーを取得する  	int player = depthPixel [index] & DepthImageFrame.PlayerIndexBitmask;  	// 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う  	int x = Math.Min (colorPoint [index].X' colorStream.FrameWidth - 1);  	int y = Math.Min (colorPoint [index].Y' colorStream.FrameHeight - 1);  	int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;  	// プレーヤーを検出した座標は、背景画像を使う  	if (player != 0) {  		outputColor [colorIndex] = backPixel [colorIndex];  		outputColor [colorIndex + 1] = backPixel [colorIndex + 1];  		outputColor [colorIndex + 2] = backPixel [colorIndex + 2];  	}  }  
Magic Number,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,OpticalCamouflage,The following statement contains a magic number: for (int index = 0; index < depthPixel.Length; index++) {  	// プレイヤーを取得する  	int player = depthPixel [index] & DepthImageFrame.PlayerIndexBitmask;  	// 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う  	int x = Math.Min (colorPoint [index].X' colorStream.FrameWidth - 1);  	int y = Math.Min (colorPoint [index].Y' colorStream.FrameHeight - 1);  	int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;  	// プレーヤーを検出した座標は、背景画像を使う  	if (player != 0) {  		outputColor [colorIndex] = backPixel [colorIndex];  		outputColor [colorIndex + 1] = backPixel [colorIndex + 1];  		outputColor [colorIndex + 2] = backPixel [colorIndex + 2];  	}  }  
Magic Number,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,OpticalCamouflage,The following statement contains a magic number: if (player != 0) {  	outputColor [colorIndex] = backPixel [colorIndex];  	outputColor [colorIndex + 1] = backPixel [colorIndex + 1];  	outputColor [colorIndex + 2] = backPixel [colorIndex + 2];  }  
Magic Number,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,OpticalCamouflage,The following statement contains a magic number: if (player != 0) {  	outputColor [colorIndex] = backPixel [colorIndex];  	outputColor [colorIndex + 1] = backPixel [colorIndex + 1];  	outputColor [colorIndex + 2] = backPixel [colorIndex + 2];  }  
Magic Number,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,OpticalCamouflage,The following statement contains a magic number: outputColor [colorIndex + 2] = backPixel [colorIndex + 2];  
Magic Number,OpticalCamouflage,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\OpticalCamouflage\MainWindow.xaml.cs,OpticalCamouflage,The following statement contains a magic number: outputColor [colorIndex + 2] = backPixel [colorIndex + 2];  
