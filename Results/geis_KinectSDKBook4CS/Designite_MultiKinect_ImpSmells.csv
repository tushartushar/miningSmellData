Implementation smell,Namespace,Class,File,Method,Description
Complex Method,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,kinect_AllFramesReady,Cyclomatic complexity of the method is 9
Long Statement,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,StartKinect,The length of the statement  "	Kinect.AudioSource.SoundSourceAngleChanged += new EventHandler<SoundSourceAngleChangedEventArgs> (AudioSource_SoundSourceAngleChanged); " is 135.
Long Statement,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,kinect_AllFramesReady,The length of the statement  "				imageRgb.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel); " is 167.
Long Statement,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,DrawSkeleton,The length of the statement  "				drawingContext.DrawEllipse (new SolidColorBrush (Colors.Red)' new Pen (Brushes.Red' 1)' new Point (point.X' point.Y)' R' R); " is 124.
Long Statement,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,DrawSkeleton,The length of the statement  "	RenderTargetBitmap bitmap = new RenderTargetBitmap ((int)source.Width' (int)source.Height' 96' 96' PixelFormats.Default); " is 121.
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: try {  	// Kinectのインスタンスを取得する  	KinectSensor kinect = sender as KinectSensor;  	if (kinect == null) {  		return;  	}  	// RGBカメラのフレームデータを取得する  	using (ColorImageFrame colorFrame = e.OpenColorImageFrame ()) {  		if (colorFrame != null) {  			// RGBカメラのピクセルデータを取得する  			byte[] colorPixel = new byte[colorFrame.PixelDataLength];  			colorFrame.CopyPixelDataTo (colorPixel);  			// ピクセルデータをビットマップに変換する  			imageRgb.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel);  		}  	}  	//// 距離カメラのフレームデータを取得する  	//using ( DepthImageFrame depthFrame = e.OpenDepthImageFrame() ) {  	//  if ( depthFrame != null ) {  	//    // 距離データを画像化して表示  	//    imageDepth.Source = BitmapSource.Create( depthFrame.Width' depthFrame.Height' 96' 96'  	//        PixelFormats.Bgr32' null' ConvertDepthColor( kinect' depthFrame )'  	//        depthFrame.Width * Bgr32BytesPerPixel );  	//  }  	//}  	// スケルトンのフレームを取得する  	using (SkeletonFrame skeletonFrame = e.OpenSkeletonFrame ()) {  		if (skeletonFrame != null) {  			imageRgb.Source = DrawSkeleton (kinect' skeletonFrame' imageRgb.Source);  		}  	}  } catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: try {  	// Kinectのインスタンスを取得する  	KinectSensor kinect = sender as KinectSensor;  	if (kinect == null) {  		return;  	}  	// RGBカメラのフレームデータを取得する  	using (ColorImageFrame colorFrame = e.OpenColorImageFrame ()) {  		if (colorFrame != null) {  			// RGBカメラのピクセルデータを取得する  			byte[] colorPixel = new byte[colorFrame.PixelDataLength];  			colorFrame.CopyPixelDataTo (colorPixel);  			// ピクセルデータをビットマップに変換する  			imageRgb.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel);  		}  	}  	//// 距離カメラのフレームデータを取得する  	//using ( DepthImageFrame depthFrame = e.OpenDepthImageFrame() ) {  	//  if ( depthFrame != null ) {  	//    // 距離データを画像化して表示  	//    imageDepth.Source = BitmapSource.Create( depthFrame.Width' depthFrame.Height' 96' 96'  	//        PixelFormats.Bgr32' null' ConvertDepthColor( kinect' depthFrame )'  	//        depthFrame.Width * Bgr32BytesPerPixel );  	//  }  	//}  	// スケルトンのフレームを取得する  	using (SkeletonFrame skeletonFrame = e.OpenSkeletonFrame ()) {  		if (skeletonFrame != null) {  			imageRgb.Source = DrawSkeleton (kinect' skeletonFrame' imageRgb.Source);  		}  	}  } catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: using (ColorImageFrame colorFrame = e.OpenColorImageFrame ()) {  	if (colorFrame != null) {  		// RGBカメラのピクセルデータを取得する  		byte[] colorPixel = new byte[colorFrame.PixelDataLength];  		colorFrame.CopyPixelDataTo (colorPixel);  		// ピクセルデータをビットマップに変換する  		imageRgb.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel);  	}  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: using (ColorImageFrame colorFrame = e.OpenColorImageFrame ()) {  	if (colorFrame != null) {  		// RGBカメラのピクセルデータを取得する  		byte[] colorPixel = new byte[colorFrame.PixelDataLength];  		colorFrame.CopyPixelDataTo (colorPixel);  		// ピクセルデータをビットマップに変換する  		imageRgb.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel);  	}  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: if (colorFrame != null) {  	// RGBカメラのピクセルデータを取得する  	byte[] colorPixel = new byte[colorFrame.PixelDataLength];  	colorFrame.CopyPixelDataTo (colorPixel);  	// ピクセルデータをビットマップに変換する  	imageRgb.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel);  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: if (colorFrame != null) {  	// RGBカメラのピクセルデータを取得する  	byte[] colorPixel = new byte[colorFrame.PixelDataLength];  	colorFrame.CopyPixelDataTo (colorPixel);  	// ピクセルデータをビットマップに変換する  	imageRgb.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel);  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: imageRgb.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel);  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: imageRgb.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel);  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,DrawSkeleton,The following statement contains a magic number: using (DrawingContext drawingContext = drawingVisual.RenderOpen ()) {  	// ImageSourceを描画する  	drawingContext.DrawImage (source' new Rect (0' 0' source.Width' source.Height));  	// トラッキングされているスケルトンのジョイントを描画する  	const int R = 5;  	foreach (var skeleton in skeletons) {  		// スケルトンがトラッキングされていなければ次へ  		if (skeleton.TrackingState != SkeletonTrackingState.Tracked) {  			continue;  		}  		// ジョイントを描画する  		foreach (Joint joint in skeleton.Joints) {  			// ジョイントがトラッキングされていなければ次へ  			if (joint.TrackingState != JointTrackingState.Tracked) {  				continue;  			}  			// スケルトンの座標を、RGBカメラの座標に変換して円を書く  			ColorImagePoint point = kinect.MapSkeletonPointToColor (joint.Position' kinect.ColorStream.Format);  			drawingContext.DrawEllipse (new SolidColorBrush (Colors.Red)' new Pen (Brushes.Red' 1)' new Point (point.X' point.Y)' R' R);  		}  	}  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for (int index = 0; index < depthPixel.Length; index++) {  	// 距離カメラのデータから、プレイヤーIDと距離を取得する  	int player = depthPixel [index] & DepthImageFrame.PlayerIndexBitmask;  	int distance = depthPixel [index] >> DepthImageFrame.PlayerIndexBitmaskWidth;  	// 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う  	int x = Math.Min (colorPoint [index].X' colorStream.FrameWidth - 1);  	int y = Math.Min (colorPoint [index].Y' colorStream.FrameHeight - 1);  	int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;  	// プレイヤーがいるピクセルの場合  	if (player != 0) {  		depthColor [colorIndex] = 255;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 255;  	} // プレイヤーではないピクセルの場合  	else {  		// サポート外 0-40cm  		if (distance == depthStream.UnknownDepth) {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 0;  			depthColor [colorIndex + 2] = 255;  		} // 近すぎ 40cm-80cm(default mode)  		else if (distance == depthStream.TooNearDepth) {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 255;  			depthColor [colorIndex + 2] = 0;  		} // 遠すぎ 3m(Near)'4m(Default)-8m  		else if (distance == depthStream.TooFarDepth) {  			depthColor [colorIndex] = 255;  			depthColor [colorIndex + 1] = 0;  			depthColor [colorIndex + 2] = 0;  		} // 有効な距離データ  		else {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 255;  			depthColor [colorIndex + 2] = 255;  		}  	}  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for (int index = 0; index < depthPixel.Length; index++) {  	// 距離カメラのデータから、プレイヤーIDと距離を取得する  	int player = depthPixel [index] & DepthImageFrame.PlayerIndexBitmask;  	int distance = depthPixel [index] >> DepthImageFrame.PlayerIndexBitmaskWidth;  	// 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う  	int x = Math.Min (colorPoint [index].X' colorStream.FrameWidth - 1);  	int y = Math.Min (colorPoint [index].Y' colorStream.FrameHeight - 1);  	int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;  	// プレイヤーがいるピクセルの場合  	if (player != 0) {  		depthColor [colorIndex] = 255;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 255;  	} // プレイヤーではないピクセルの場合  	else {  		// サポート外 0-40cm  		if (distance == depthStream.UnknownDepth) {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 0;  			depthColor [colorIndex + 2] = 255;  		} // 近すぎ 40cm-80cm(default mode)  		else if (distance == depthStream.TooNearDepth) {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 255;  			depthColor [colorIndex + 2] = 0;  		} // 遠すぎ 3m(Near)'4m(Default)-8m  		else if (distance == depthStream.TooFarDepth) {  			depthColor [colorIndex] = 255;  			depthColor [colorIndex + 1] = 0;  			depthColor [colorIndex + 2] = 0;  		} // 有効な距離データ  		else {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 255;  			depthColor [colorIndex + 2] = 255;  		}  	}  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for (int index = 0; index < depthPixel.Length; index++) {  	// 距離カメラのデータから、プレイヤーIDと距離を取得する  	int player = depthPixel [index] & DepthImageFrame.PlayerIndexBitmask;  	int distance = depthPixel [index] >> DepthImageFrame.PlayerIndexBitmaskWidth;  	// 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う  	int x = Math.Min (colorPoint [index].X' colorStream.FrameWidth - 1);  	int y = Math.Min (colorPoint [index].Y' colorStream.FrameHeight - 1);  	int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;  	// プレイヤーがいるピクセルの場合  	if (player != 0) {  		depthColor [colorIndex] = 255;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 255;  	} // プレイヤーではないピクセルの場合  	else {  		// サポート外 0-40cm  		if (distance == depthStream.UnknownDepth) {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 0;  			depthColor [colorIndex + 2] = 255;  		} // 近すぎ 40cm-80cm(default mode)  		else if (distance == depthStream.TooNearDepth) {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 255;  			depthColor [colorIndex + 2] = 0;  		} // 遠すぎ 3m(Near)'4m(Default)-8m  		else if (distance == depthStream.TooFarDepth) {  			depthColor [colorIndex] = 255;  			depthColor [colorIndex + 1] = 0;  			depthColor [colorIndex + 2] = 0;  		} // 有効な距離データ  		else {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 255;  			depthColor [colorIndex + 2] = 255;  		}  	}  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for (int index = 0; index < depthPixel.Length; index++) {  	// 距離カメラのデータから、プレイヤーIDと距離を取得する  	int player = depthPixel [index] & DepthImageFrame.PlayerIndexBitmask;  	int distance = depthPixel [index] >> DepthImageFrame.PlayerIndexBitmaskWidth;  	// 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う  	int x = Math.Min (colorPoint [index].X' colorStream.FrameWidth - 1);  	int y = Math.Min (colorPoint [index].Y' colorStream.FrameHeight - 1);  	int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;  	// プレイヤーがいるピクセルの場合  	if (player != 0) {  		depthColor [colorIndex] = 255;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 255;  	} // プレイヤーではないピクセルの場合  	else {  		// サポート外 0-40cm  		if (distance == depthStream.UnknownDepth) {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 0;  			depthColor [colorIndex + 2] = 255;  		} // 近すぎ 40cm-80cm(default mode)  		else if (distance == depthStream.TooNearDepth) {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 255;  			depthColor [colorIndex + 2] = 0;  		} // 遠すぎ 3m(Near)'4m(Default)-8m  		else if (distance == depthStream.TooFarDepth) {  			depthColor [colorIndex] = 255;  			depthColor [colorIndex + 1] = 0;  			depthColor [colorIndex + 2] = 0;  		} // 有効な距離データ  		else {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 255;  			depthColor [colorIndex + 2] = 255;  		}  	}  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for (int index = 0; index < depthPixel.Length; index++) {  	// 距離カメラのデータから、プレイヤーIDと距離を取得する  	int player = depthPixel [index] & DepthImageFrame.PlayerIndexBitmask;  	int distance = depthPixel [index] >> DepthImageFrame.PlayerIndexBitmaskWidth;  	// 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う  	int x = Math.Min (colorPoint [index].X' colorStream.FrameWidth - 1);  	int y = Math.Min (colorPoint [index].Y' colorStream.FrameHeight - 1);  	int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;  	// プレイヤーがいるピクセルの場合  	if (player != 0) {  		depthColor [colorIndex] = 255;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 255;  	} // プレイヤーではないピクセルの場合  	else {  		// サポート外 0-40cm  		if (distance == depthStream.UnknownDepth) {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 0;  			depthColor [colorIndex + 2] = 255;  		} // 近すぎ 40cm-80cm(default mode)  		else if (distance == depthStream.TooNearDepth) {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 255;  			depthColor [colorIndex + 2] = 0;  		} // 遠すぎ 3m(Near)'4m(Default)-8m  		else if (distance == depthStream.TooFarDepth) {  			depthColor [colorIndex] = 255;  			depthColor [colorIndex + 1] = 0;  			depthColor [colorIndex + 2] = 0;  		} // 有効な距離データ  		else {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 255;  			depthColor [colorIndex + 2] = 255;  		}  	}  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for (int index = 0; index < depthPixel.Length; index++) {  	// 距離カメラのデータから、プレイヤーIDと距離を取得する  	int player = depthPixel [index] & DepthImageFrame.PlayerIndexBitmask;  	int distance = depthPixel [index] >> DepthImageFrame.PlayerIndexBitmaskWidth;  	// 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う  	int x = Math.Min (colorPoint [index].X' colorStream.FrameWidth - 1);  	int y = Math.Min (colorPoint [index].Y' colorStream.FrameHeight - 1);  	int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;  	// プレイヤーがいるピクセルの場合  	if (player != 0) {  		depthColor [colorIndex] = 255;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 255;  	} // プレイヤーではないピクセルの場合  	else {  		// サポート外 0-40cm  		if (distance == depthStream.UnknownDepth) {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 0;  			depthColor [colorIndex + 2] = 255;  		} // 近すぎ 40cm-80cm(default mode)  		else if (distance == depthStream.TooNearDepth) {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 255;  			depthColor [colorIndex + 2] = 0;  		} // 遠すぎ 3m(Near)'4m(Default)-8m  		else if (distance == depthStream.TooFarDepth) {  			depthColor [colorIndex] = 255;  			depthColor [colorIndex + 1] = 0;  			depthColor [colorIndex + 2] = 0;  		} // 有効な距離データ  		else {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 255;  			depthColor [colorIndex + 2] = 255;  		}  	}  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for (int index = 0; index < depthPixel.Length; index++) {  	// 距離カメラのデータから、プレイヤーIDと距離を取得する  	int player = depthPixel [index] & DepthImageFrame.PlayerIndexBitmask;  	int distance = depthPixel [index] >> DepthImageFrame.PlayerIndexBitmaskWidth;  	// 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う  	int x = Math.Min (colorPoint [index].X' colorStream.FrameWidth - 1);  	int y = Math.Min (colorPoint [index].Y' colorStream.FrameHeight - 1);  	int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;  	// プレイヤーがいるピクセルの場合  	if (player != 0) {  		depthColor [colorIndex] = 255;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 255;  	} // プレイヤーではないピクセルの場合  	else {  		// サポート外 0-40cm  		if (distance == depthStream.UnknownDepth) {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 0;  			depthColor [colorIndex + 2] = 255;  		} // 近すぎ 40cm-80cm(default mode)  		else if (distance == depthStream.TooNearDepth) {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 255;  			depthColor [colorIndex + 2] = 0;  		} // 遠すぎ 3m(Near)'4m(Default)-8m  		else if (distance == depthStream.TooFarDepth) {  			depthColor [colorIndex] = 255;  			depthColor [colorIndex + 1] = 0;  			depthColor [colorIndex + 2] = 0;  		} // 有効な距離データ  		else {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 255;  			depthColor [colorIndex + 2] = 255;  		}  	}  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for (int index = 0; index < depthPixel.Length; index++) {  	// 距離カメラのデータから、プレイヤーIDと距離を取得する  	int player = depthPixel [index] & DepthImageFrame.PlayerIndexBitmask;  	int distance = depthPixel [index] >> DepthImageFrame.PlayerIndexBitmaskWidth;  	// 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う  	int x = Math.Min (colorPoint [index].X' colorStream.FrameWidth - 1);  	int y = Math.Min (colorPoint [index].Y' colorStream.FrameHeight - 1);  	int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;  	// プレイヤーがいるピクセルの場合  	if (player != 0) {  		depthColor [colorIndex] = 255;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 255;  	} // プレイヤーではないピクセルの場合  	else {  		// サポート外 0-40cm  		if (distance == depthStream.UnknownDepth) {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 0;  			depthColor [colorIndex + 2] = 255;  		} // 近すぎ 40cm-80cm(default mode)  		else if (distance == depthStream.TooNearDepth) {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 255;  			depthColor [colorIndex + 2] = 0;  		} // 遠すぎ 3m(Near)'4m(Default)-8m  		else if (distance == depthStream.TooFarDepth) {  			depthColor [colorIndex] = 255;  			depthColor [colorIndex + 1] = 0;  			depthColor [colorIndex + 2] = 0;  		} // 有効な距離データ  		else {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 255;  			depthColor [colorIndex + 2] = 255;  		}  	}  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for (int index = 0; index < depthPixel.Length; index++) {  	// 距離カメラのデータから、プレイヤーIDと距離を取得する  	int player = depthPixel [index] & DepthImageFrame.PlayerIndexBitmask;  	int distance = depthPixel [index] >> DepthImageFrame.PlayerIndexBitmaskWidth;  	// 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う  	int x = Math.Min (colorPoint [index].X' colorStream.FrameWidth - 1);  	int y = Math.Min (colorPoint [index].Y' colorStream.FrameHeight - 1);  	int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;  	// プレイヤーがいるピクセルの場合  	if (player != 0) {  		depthColor [colorIndex] = 255;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 255;  	} // プレイヤーではないピクセルの場合  	else {  		// サポート外 0-40cm  		if (distance == depthStream.UnknownDepth) {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 0;  			depthColor [colorIndex + 2] = 255;  		} // 近すぎ 40cm-80cm(default mode)  		else if (distance == depthStream.TooNearDepth) {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 255;  			depthColor [colorIndex + 2] = 0;  		} // 遠すぎ 3m(Near)'4m(Default)-8m  		else if (distance == depthStream.TooFarDepth) {  			depthColor [colorIndex] = 255;  			depthColor [colorIndex + 1] = 0;  			depthColor [colorIndex + 2] = 0;  		} // 有効な距離データ  		else {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 255;  			depthColor [colorIndex + 2] = 255;  		}  	}  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for (int index = 0; index < depthPixel.Length; index++) {  	// 距離カメラのデータから、プレイヤーIDと距離を取得する  	int player = depthPixel [index] & DepthImageFrame.PlayerIndexBitmask;  	int distance = depthPixel [index] >> DepthImageFrame.PlayerIndexBitmaskWidth;  	// 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う  	int x = Math.Min (colorPoint [index].X' colorStream.FrameWidth - 1);  	int y = Math.Min (colorPoint [index].Y' colorStream.FrameHeight - 1);  	int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;  	// プレイヤーがいるピクセルの場合  	if (player != 0) {  		depthColor [colorIndex] = 255;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 255;  	} // プレイヤーではないピクセルの場合  	else {  		// サポート外 0-40cm  		if (distance == depthStream.UnknownDepth) {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 0;  			depthColor [colorIndex + 2] = 255;  		} // 近すぎ 40cm-80cm(default mode)  		else if (distance == depthStream.TooNearDepth) {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 255;  			depthColor [colorIndex + 2] = 0;  		} // 遠すぎ 3m(Near)'4m(Default)-8m  		else if (distance == depthStream.TooFarDepth) {  			depthColor [colorIndex] = 255;  			depthColor [colorIndex + 1] = 0;  			depthColor [colorIndex + 2] = 0;  		} // 有効な距離データ  		else {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 255;  			depthColor [colorIndex + 2] = 255;  		}  	}  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for (int index = 0; index < depthPixel.Length; index++) {  	// 距離カメラのデータから、プレイヤーIDと距離を取得する  	int player = depthPixel [index] & DepthImageFrame.PlayerIndexBitmask;  	int distance = depthPixel [index] >> DepthImageFrame.PlayerIndexBitmaskWidth;  	// 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う  	int x = Math.Min (colorPoint [index].X' colorStream.FrameWidth - 1);  	int y = Math.Min (colorPoint [index].Y' colorStream.FrameHeight - 1);  	int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;  	// プレイヤーがいるピクセルの場合  	if (player != 0) {  		depthColor [colorIndex] = 255;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 255;  	} // プレイヤーではないピクセルの場合  	else {  		// サポート外 0-40cm  		if (distance == depthStream.UnknownDepth) {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 0;  			depthColor [colorIndex + 2] = 255;  		} // 近すぎ 40cm-80cm(default mode)  		else if (distance == depthStream.TooNearDepth) {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 255;  			depthColor [colorIndex + 2] = 0;  		} // 遠すぎ 3m(Near)'4m(Default)-8m  		else if (distance == depthStream.TooFarDepth) {  			depthColor [colorIndex] = 255;  			depthColor [colorIndex + 1] = 0;  			depthColor [colorIndex + 2] = 0;  		} // 有効な距離データ  		else {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 255;  			depthColor [colorIndex + 2] = 255;  		}  	}  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for (int index = 0; index < depthPixel.Length; index++) {  	// 距離カメラのデータから、プレイヤーIDと距離を取得する  	int player = depthPixel [index] & DepthImageFrame.PlayerIndexBitmask;  	int distance = depthPixel [index] >> DepthImageFrame.PlayerIndexBitmaskWidth;  	// 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う  	int x = Math.Min (colorPoint [index].X' colorStream.FrameWidth - 1);  	int y = Math.Min (colorPoint [index].Y' colorStream.FrameHeight - 1);  	int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;  	// プレイヤーがいるピクセルの場合  	if (player != 0) {  		depthColor [colorIndex] = 255;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 255;  	} // プレイヤーではないピクセルの場合  	else {  		// サポート外 0-40cm  		if (distance == depthStream.UnknownDepth) {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 0;  			depthColor [colorIndex + 2] = 255;  		} // 近すぎ 40cm-80cm(default mode)  		else if (distance == depthStream.TooNearDepth) {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 255;  			depthColor [colorIndex + 2] = 0;  		} // 遠すぎ 3m(Near)'4m(Default)-8m  		else if (distance == depthStream.TooFarDepth) {  			depthColor [colorIndex] = 255;  			depthColor [colorIndex + 1] = 0;  			depthColor [colorIndex + 2] = 0;  		} // 有効な距離データ  		else {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 255;  			depthColor [colorIndex + 2] = 255;  		}  	}  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for (int index = 0; index < depthPixel.Length; index++) {  	// 距離カメラのデータから、プレイヤーIDと距離を取得する  	int player = depthPixel [index] & DepthImageFrame.PlayerIndexBitmask;  	int distance = depthPixel [index] >> DepthImageFrame.PlayerIndexBitmaskWidth;  	// 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う  	int x = Math.Min (colorPoint [index].X' colorStream.FrameWidth - 1);  	int y = Math.Min (colorPoint [index].Y' colorStream.FrameHeight - 1);  	int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;  	// プレイヤーがいるピクセルの場合  	if (player != 0) {  		depthColor [colorIndex] = 255;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 255;  	} // プレイヤーではないピクセルの場合  	else {  		// サポート外 0-40cm  		if (distance == depthStream.UnknownDepth) {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 0;  			depthColor [colorIndex + 2] = 255;  		} // 近すぎ 40cm-80cm(default mode)  		else if (distance == depthStream.TooNearDepth) {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 255;  			depthColor [colorIndex + 2] = 0;  		} // 遠すぎ 3m(Near)'4m(Default)-8m  		else if (distance == depthStream.TooFarDepth) {  			depthColor [colorIndex] = 255;  			depthColor [colorIndex + 1] = 0;  			depthColor [colorIndex + 2] = 0;  		} // 有効な距離データ  		else {  			depthColor [colorIndex] = 0;  			depthColor [colorIndex + 1] = 255;  			depthColor [colorIndex + 2] = 255;  		}  	}  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (player != 0) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  } // プレイヤーではないピクセルの場合  else {  	// サポート外 0-40cm  	if (distance == depthStream.UnknownDepth) {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 0;  		depthColor [colorIndex + 2] = 255;  	} // 近すぎ 40cm-80cm(default mode)  	else if (distance == depthStream.TooNearDepth) {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 0;  	} // 遠すぎ 3m(Near)'4m(Default)-8m  	else if (distance == depthStream.TooFarDepth) {  		depthColor [colorIndex] = 255;  		depthColor [colorIndex + 1] = 0;  		depthColor [colorIndex + 2] = 0;  	} // 有効な距離データ  	else {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 255;  	}  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (player != 0) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  } // プレイヤーではないピクセルの場合  else {  	// サポート外 0-40cm  	if (distance == depthStream.UnknownDepth) {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 0;  		depthColor [colorIndex + 2] = 255;  	} // 近すぎ 40cm-80cm(default mode)  	else if (distance == depthStream.TooNearDepth) {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 0;  	} // 遠すぎ 3m(Near)'4m(Default)-8m  	else if (distance == depthStream.TooFarDepth) {  		depthColor [colorIndex] = 255;  		depthColor [colorIndex + 1] = 0;  		depthColor [colorIndex + 2] = 0;  	} // 有効な距離データ  	else {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 255;  	}  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (player != 0) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  } // プレイヤーではないピクセルの場合  else {  	// サポート外 0-40cm  	if (distance == depthStream.UnknownDepth) {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 0;  		depthColor [colorIndex + 2] = 255;  	} // 近すぎ 40cm-80cm(default mode)  	else if (distance == depthStream.TooNearDepth) {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 0;  	} // 遠すぎ 3m(Near)'4m(Default)-8m  	else if (distance == depthStream.TooFarDepth) {  		depthColor [colorIndex] = 255;  		depthColor [colorIndex + 1] = 0;  		depthColor [colorIndex + 2] = 0;  	} // 有効な距離データ  	else {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 255;  	}  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (player != 0) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  } // プレイヤーではないピクセルの場合  else {  	// サポート外 0-40cm  	if (distance == depthStream.UnknownDepth) {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 0;  		depthColor [colorIndex + 2] = 255;  	} // 近すぎ 40cm-80cm(default mode)  	else if (distance == depthStream.TooNearDepth) {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 0;  	} // 遠すぎ 3m(Near)'4m(Default)-8m  	else if (distance == depthStream.TooFarDepth) {  		depthColor [colorIndex] = 255;  		depthColor [colorIndex + 1] = 0;  		depthColor [colorIndex + 2] = 0;  	} // 有効な距離データ  	else {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 255;  	}  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (player != 0) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  } // プレイヤーではないピクセルの場合  else {  	// サポート外 0-40cm  	if (distance == depthStream.UnknownDepth) {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 0;  		depthColor [colorIndex + 2] = 255;  	} // 近すぎ 40cm-80cm(default mode)  	else if (distance == depthStream.TooNearDepth) {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 0;  	} // 遠すぎ 3m(Near)'4m(Default)-8m  	else if (distance == depthStream.TooFarDepth) {  		depthColor [colorIndex] = 255;  		depthColor [colorIndex + 1] = 0;  		depthColor [colorIndex + 2] = 0;  	} // 有効な距離データ  	else {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 255;  	}  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (player != 0) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  } // プレイヤーではないピクセルの場合  else {  	// サポート外 0-40cm  	if (distance == depthStream.UnknownDepth) {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 0;  		depthColor [colorIndex + 2] = 255;  	} // 近すぎ 40cm-80cm(default mode)  	else if (distance == depthStream.TooNearDepth) {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 0;  	} // 遠すぎ 3m(Near)'4m(Default)-8m  	else if (distance == depthStream.TooFarDepth) {  		depthColor [colorIndex] = 255;  		depthColor [colorIndex + 1] = 0;  		depthColor [colorIndex + 2] = 0;  	} // 有効な距離データ  	else {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 255;  	}  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (player != 0) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  } // プレイヤーではないピクセルの場合  else {  	// サポート外 0-40cm  	if (distance == depthStream.UnknownDepth) {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 0;  		depthColor [colorIndex + 2] = 255;  	} // 近すぎ 40cm-80cm(default mode)  	else if (distance == depthStream.TooNearDepth) {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 0;  	} // 遠すぎ 3m(Near)'4m(Default)-8m  	else if (distance == depthStream.TooFarDepth) {  		depthColor [colorIndex] = 255;  		depthColor [colorIndex + 1] = 0;  		depthColor [colorIndex + 2] = 0;  	} // 有効な距離データ  	else {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 255;  	}  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (player != 0) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  } // プレイヤーではないピクセルの場合  else {  	// サポート外 0-40cm  	if (distance == depthStream.UnknownDepth) {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 0;  		depthColor [colorIndex + 2] = 255;  	} // 近すぎ 40cm-80cm(default mode)  	else if (distance == depthStream.TooNearDepth) {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 0;  	} // 遠すぎ 3m(Near)'4m(Default)-8m  	else if (distance == depthStream.TooFarDepth) {  		depthColor [colorIndex] = 255;  		depthColor [colorIndex + 1] = 0;  		depthColor [colorIndex + 2] = 0;  	} // 有効な距離データ  	else {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 255;  	}  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (player != 0) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  } // プレイヤーではないピクセルの場合  else {  	// サポート外 0-40cm  	if (distance == depthStream.UnknownDepth) {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 0;  		depthColor [colorIndex + 2] = 255;  	} // 近すぎ 40cm-80cm(default mode)  	else if (distance == depthStream.TooNearDepth) {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 0;  	} // 遠すぎ 3m(Near)'4m(Default)-8m  	else if (distance == depthStream.TooFarDepth) {  		depthColor [colorIndex] = 255;  		depthColor [colorIndex + 1] = 0;  		depthColor [colorIndex + 2] = 0;  	} // 有効な距離データ  	else {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 255;  	}  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (player != 0) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  } // プレイヤーではないピクセルの場合  else {  	// サポート外 0-40cm  	if (distance == depthStream.UnknownDepth) {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 0;  		depthColor [colorIndex + 2] = 255;  	} // 近すぎ 40cm-80cm(default mode)  	else if (distance == depthStream.TooNearDepth) {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 0;  	} // 遠すぎ 3m(Near)'4m(Default)-8m  	else if (distance == depthStream.TooFarDepth) {  		depthColor [colorIndex] = 255;  		depthColor [colorIndex + 1] = 0;  		depthColor [colorIndex + 2] = 0;  	} // 有効な距離データ  	else {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 255;  	}  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (player != 0) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  } // プレイヤーではないピクセルの場合  else {  	// サポート外 0-40cm  	if (distance == depthStream.UnknownDepth) {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 0;  		depthColor [colorIndex + 2] = 255;  	} // 近すぎ 40cm-80cm(default mode)  	else if (distance == depthStream.TooNearDepth) {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 0;  	} // 遠すぎ 3m(Near)'4m(Default)-8m  	else if (distance == depthStream.TooFarDepth) {  		depthColor [colorIndex] = 255;  		depthColor [colorIndex + 1] = 0;  		depthColor [colorIndex + 2] = 0;  	} // 有効な距離データ  	else {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 255;  	}  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (player != 0) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  } // プレイヤーではないピクセルの場合  else {  	// サポート外 0-40cm  	if (distance == depthStream.UnknownDepth) {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 0;  		depthColor [colorIndex + 2] = 255;  	} // 近すぎ 40cm-80cm(default mode)  	else if (distance == depthStream.TooNearDepth) {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 0;  	} // 遠すぎ 3m(Near)'4m(Default)-8m  	else if (distance == depthStream.TooFarDepth) {  		depthColor [colorIndex] = 255;  		depthColor [colorIndex + 1] = 0;  		depthColor [colorIndex + 2] = 0;  	} // 有効な距離データ  	else {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 255;  	}  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (player != 0) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  } // プレイヤーではないピクセルの場合  else {  	// サポート外 0-40cm  	if (distance == depthStream.UnknownDepth) {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 0;  		depthColor [colorIndex + 2] = 255;  	} // 近すぎ 40cm-80cm(default mode)  	else if (distance == depthStream.TooNearDepth) {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 0;  	} // 遠すぎ 3m(Near)'4m(Default)-8m  	else if (distance == depthStream.TooFarDepth) {  		depthColor [colorIndex] = 255;  		depthColor [colorIndex + 1] = 0;  		depthColor [colorIndex + 2] = 0;  	} // 有効な距離データ  	else {  		depthColor [colorIndex] = 0;  		depthColor [colorIndex + 1] = 255;  		depthColor [colorIndex + 2] = 255;  	}  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: depthColor [colorIndex] = 255;  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: depthColor [colorIndex + 1] = 255;  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: depthColor [colorIndex + 2] = 255;  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: depthColor [colorIndex + 2] = 255;  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (distance == depthStream.UnknownDepth) {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 0;  	depthColor [colorIndex + 2] = 255;  } // 近すぎ 40cm-80cm(default mode)  else if (distance == depthStream.TooNearDepth) {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 0;  } // 遠すぎ 3m(Near)'4m(Default)-8m  else if (distance == depthStream.TooFarDepth) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 0;  	depthColor [colorIndex + 2] = 0;  } // 有効な距離データ  else {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (distance == depthStream.UnknownDepth) {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 0;  	depthColor [colorIndex + 2] = 255;  } // 近すぎ 40cm-80cm(default mode)  else if (distance == depthStream.TooNearDepth) {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 0;  } // 遠すぎ 3m(Near)'4m(Default)-8m  else if (distance == depthStream.TooFarDepth) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 0;  	depthColor [colorIndex + 2] = 0;  } // 有効な距離データ  else {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (distance == depthStream.UnknownDepth) {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 0;  	depthColor [colorIndex + 2] = 255;  } // 近すぎ 40cm-80cm(default mode)  else if (distance == depthStream.TooNearDepth) {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 0;  } // 遠すぎ 3m(Near)'4m(Default)-8m  else if (distance == depthStream.TooFarDepth) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 0;  	depthColor [colorIndex + 2] = 0;  } // 有効な距離データ  else {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (distance == depthStream.UnknownDepth) {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 0;  	depthColor [colorIndex + 2] = 255;  } // 近すぎ 40cm-80cm(default mode)  else if (distance == depthStream.TooNearDepth) {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 0;  } // 遠すぎ 3m(Near)'4m(Default)-8m  else if (distance == depthStream.TooFarDepth) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 0;  	depthColor [colorIndex + 2] = 0;  } // 有効な距離データ  else {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (distance == depthStream.UnknownDepth) {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 0;  	depthColor [colorIndex + 2] = 255;  } // 近すぎ 40cm-80cm(default mode)  else if (distance == depthStream.TooNearDepth) {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 0;  } // 遠すぎ 3m(Near)'4m(Default)-8m  else if (distance == depthStream.TooFarDepth) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 0;  	depthColor [colorIndex + 2] = 0;  } // 有効な距離データ  else {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (distance == depthStream.UnknownDepth) {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 0;  	depthColor [colorIndex + 2] = 255;  } // 近すぎ 40cm-80cm(default mode)  else if (distance == depthStream.TooNearDepth) {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 0;  } // 遠すぎ 3m(Near)'4m(Default)-8m  else if (distance == depthStream.TooFarDepth) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 0;  	depthColor [colorIndex + 2] = 0;  } // 有効な距離データ  else {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (distance == depthStream.UnknownDepth) {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 0;  	depthColor [colorIndex + 2] = 255;  } // 近すぎ 40cm-80cm(default mode)  else if (distance == depthStream.TooNearDepth) {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 0;  } // 遠すぎ 3m(Near)'4m(Default)-8m  else if (distance == depthStream.TooFarDepth) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 0;  	depthColor [colorIndex + 2] = 0;  } // 有効な距離データ  else {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (distance == depthStream.UnknownDepth) {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 0;  	depthColor [colorIndex + 2] = 255;  } // 近すぎ 40cm-80cm(default mode)  else if (distance == depthStream.TooNearDepth) {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 0;  } // 遠すぎ 3m(Near)'4m(Default)-8m  else if (distance == depthStream.TooFarDepth) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 0;  	depthColor [colorIndex + 2] = 0;  } // 有効な距離データ  else {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (distance == depthStream.UnknownDepth) {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 0;  	depthColor [colorIndex + 2] = 255;  } // 近すぎ 40cm-80cm(default mode)  else if (distance == depthStream.TooNearDepth) {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 0;  } // 遠すぎ 3m(Near)'4m(Default)-8m  else if (distance == depthStream.TooFarDepth) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 0;  	depthColor [colorIndex + 2] = 0;  } // 有効な距離データ  else {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: depthColor [colorIndex + 2] = 255;  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: depthColor [colorIndex + 2] = 255;  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (distance == depthStream.TooNearDepth) {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 0;  } // 遠すぎ 3m(Near)'4m(Default)-8m  else if (distance == depthStream.TooFarDepth) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 0;  	depthColor [colorIndex + 2] = 0;  } // 有効な距離データ  else {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (distance == depthStream.TooNearDepth) {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 0;  } // 遠すぎ 3m(Near)'4m(Default)-8m  else if (distance == depthStream.TooFarDepth) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 0;  	depthColor [colorIndex + 2] = 0;  } // 有効な距離データ  else {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (distance == depthStream.TooNearDepth) {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 0;  } // 遠すぎ 3m(Near)'4m(Default)-8m  else if (distance == depthStream.TooFarDepth) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 0;  	depthColor [colorIndex + 2] = 0;  } // 有効な距離データ  else {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (distance == depthStream.TooNearDepth) {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 0;  } // 遠すぎ 3m(Near)'4m(Default)-8m  else if (distance == depthStream.TooFarDepth) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 0;  	depthColor [colorIndex + 2] = 0;  } // 有効な距離データ  else {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (distance == depthStream.TooNearDepth) {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 0;  } // 遠すぎ 3m(Near)'4m(Default)-8m  else if (distance == depthStream.TooFarDepth) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 0;  	depthColor [colorIndex + 2] = 0;  } // 有効な距離データ  else {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (distance == depthStream.TooNearDepth) {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 0;  } // 遠すぎ 3m(Near)'4m(Default)-8m  else if (distance == depthStream.TooFarDepth) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 0;  	depthColor [colorIndex + 2] = 0;  } // 有効な距離データ  else {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (distance == depthStream.TooNearDepth) {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 0;  } // 遠すぎ 3m(Near)'4m(Default)-8m  else if (distance == depthStream.TooFarDepth) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 0;  	depthColor [colorIndex + 2] = 0;  } // 有効な距離データ  else {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: depthColor [colorIndex + 1] = 255;  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: depthColor [colorIndex + 2] = 0;  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (distance == depthStream.TooFarDepth) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 0;  	depthColor [colorIndex + 2] = 0;  } // 有効な距離データ  else {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (distance == depthStream.TooFarDepth) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 0;  	depthColor [colorIndex + 2] = 0;  } // 有効な距離データ  else {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (distance == depthStream.TooFarDepth) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 0;  	depthColor [colorIndex + 2] = 0;  } // 有効な距離データ  else {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (distance == depthStream.TooFarDepth) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 0;  	depthColor [colorIndex + 2] = 0;  } // 有効な距離データ  else {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: if (distance == depthStream.TooFarDepth) {  	depthColor [colorIndex] = 255;  	depthColor [colorIndex + 1] = 0;  	depthColor [colorIndex + 2] = 0;  } // 有効な距離データ  else {  	depthColor [colorIndex] = 0;  	depthColor [colorIndex + 1] = 255;  	depthColor [colorIndex + 2] = 255;  }  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: depthColor [colorIndex] = 255;  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: depthColor [colorIndex + 2] = 0;  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: depthColor [colorIndex + 1] = 255;  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: depthColor [colorIndex + 2] = 255;  
Magic Number,MultiKinect,KinectWindow,F:\newReposMay17\geis_KinectSDKBook4CS\1_basic\MultiKinect\KinectWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: depthColor [colorIndex + 2] = 255;  
