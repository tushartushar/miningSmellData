Implementation smell,Namespace,Class,File,Method,Description
Long Statement,AudioOutput,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\AudioOutput\MainWindow.xaml.cs,Connect,The length of the statement  "            this.comboBoxRange.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBoxRange_SelectionChanged); " is 133.
Magic Number,AudioOutput,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\AudioOutput\MainWindow.xaml.cs,StartKinect,The following statement contains a magic number: Thread thread = new Thread( new ThreadStart( () =>        {          // ストリーミングプレイヤー          StreamingWavePlayer player = new StreamingWavePlayer( 16000' 16' 1' 100 );          // 音声入力用のバッファ          byte[] buffer = new byte[1024];            // エコーのキャンセルと抑制を有効にする          kinect.AudioSource.EchoCancellationMode = EchoCancellationMode.CancellationAndSuppression;            // 音声の入力を開始する          using ( Stream stream = kinect.AudioSource.Start() ) {            while ( isContinue ) {              // 音声を入力し、スピーカーに出力する              stream.Read( buffer' 0' buffer.Length );              player.Output( buffer );            }          }        } ) );
Magic Number,AudioOutput,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\AudioOutput\MainWindow.xaml.cs,StartKinect,The following statement contains a magic number: Thread thread = new Thread( new ThreadStart( () =>        {          // ストリーミングプレイヤー          StreamingWavePlayer player = new StreamingWavePlayer( 16000' 16' 1' 100 );          // 音声入力用のバッファ          byte[] buffer = new byte[1024];            // エコーのキャンセルと抑制を有効にする          kinect.AudioSource.EchoCancellationMode = EchoCancellationMode.CancellationAndSuppression;            // 音声の入力を開始する          using ( Stream stream = kinect.AudioSource.Start() ) {            while ( isContinue ) {              // 音声を入力し、スピーカーに出力する              stream.Read( buffer' 0' buffer.Length );              player.Output( buffer );            }          }        } ) );
Magic Number,AudioOutput,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\AudioOutput\MainWindow.xaml.cs,StartKinect,The following statement contains a magic number: Thread thread = new Thread( new ThreadStart( () =>        {          // ストリーミングプレイヤー          StreamingWavePlayer player = new StreamingWavePlayer( 16000' 16' 1' 100 );          // 音声入力用のバッファ          byte[] buffer = new byte[1024];            // エコーのキャンセルと抑制を有効にする          kinect.AudioSource.EchoCancellationMode = EchoCancellationMode.CancellationAndSuppression;            // 音声の入力を開始する          using ( Stream stream = kinect.AudioSource.Start() ) {            while ( isContinue ) {              // 音声を入力し、スピーカーに出力する              stream.Read( buffer' 0' buffer.Length );              player.Output( buffer );            }          }        } ) );
Magic Number,AudioOutput,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\AudioOutput\MainWindow.xaml.cs,StartKinect,The following statement contains a magic number: Thread thread = new Thread( new ThreadStart( () =>        {          // ストリーミングプレイヤー          StreamingWavePlayer player = new StreamingWavePlayer( 16000' 16' 1' 100 );          // 音声入力用のバッファ          byte[] buffer = new byte[1024];            // エコーのキャンセルと抑制を有効にする          kinect.AudioSource.EchoCancellationMode = EchoCancellationMode.CancellationAndSuppression;            // 音声の入力を開始する          using ( Stream stream = kinect.AudioSource.Start() ) {            while ( isContinue ) {              // 音声を入力し、スピーカーに出力する              stream.Read( buffer' 0' buffer.Length );              player.Output( buffer );            }          }        } ) );
Magic Number,AudioOutput,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\AudioOutput\MainWindow.xaml.cs,kinect_ColorFrameReady,The following statement contains a magic number: try {          // RGBカメラのフレームデータを取得する          using ( ColorImageFrame colorFrame = e.OpenColorImageFrame() ) {            if ( colorFrame != null ) {              // RGBカメラのピクセルデータを取得する              byte[] colorPixel = new byte[colorFrame.PixelDataLength];              colorFrame.CopyPixelDataTo( colorPixel );                // ピクセルデータをビットマップに変換する              imageRgb.Source = BitmapSource.Create( colorFrame.Width' colorFrame.Height' 96' 96'                  PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel );            }          }        }        catch ( Exception ex ) {          MessageBox.Show( ex.Message );        }
Magic Number,AudioOutput,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\AudioOutput\MainWindow.xaml.cs,kinect_ColorFrameReady,The following statement contains a magic number: try {          // RGBカメラのフレームデータを取得する          using ( ColorImageFrame colorFrame = e.OpenColorImageFrame() ) {            if ( colorFrame != null ) {              // RGBカメラのピクセルデータを取得する              byte[] colorPixel = new byte[colorFrame.PixelDataLength];              colorFrame.CopyPixelDataTo( colorPixel );                // ピクセルデータをビットマップに変換する              imageRgb.Source = BitmapSource.Create( colorFrame.Width' colorFrame.Height' 96' 96'                  PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel );            }          }        }        catch ( Exception ex ) {          MessageBox.Show( ex.Message );        }
Magic Number,AudioOutput,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\AudioOutput\MainWindow.xaml.cs,kinect_DepthFrameReady,The following statement contains a magic number: try {          // センサーのインスタンスを取得する          KinectSensor kinect = sender as KinectSensor;          if ( kinect == null ) {            return;          }            // 距離カメラのフレームデータを取得する          using ( DepthImageFrame depthFrame = e.OpenDepthImageFrame() ) {            if ( depthFrame != null ) {              // 距離データを画像化して表示              imageDepth.Source = BitmapSource.Create( depthFrame.Width' depthFrame.Height' 96' 96'                  PixelFormats.Bgr32' null' ConvertDepthColor( kinect' depthFrame )'                  depthFrame.Width * Bgr32BytesPerPixel );            }          }        }        catch ( Exception ex ) {          MessageBox.Show( ex.Message );        }
Magic Number,AudioOutput,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\AudioOutput\MainWindow.xaml.cs,kinect_DepthFrameReady,The following statement contains a magic number: try {          // センサーのインスタンスを取得する          KinectSensor kinect = sender as KinectSensor;          if ( kinect == null ) {            return;          }            // 距離カメラのフレームデータを取得する          using ( DepthImageFrame depthFrame = e.OpenDepthImageFrame() ) {            if ( depthFrame != null ) {              // 距離データを画像化して表示              imageDepth.Source = BitmapSource.Create( depthFrame.Width' depthFrame.Height' 96' 96'                  PixelFormats.Bgr32' null' ConvertDepthColor( kinect' depthFrame )'                  depthFrame.Width * Bgr32BytesPerPixel );            }          }        }        catch ( Exception ex ) {          MessageBox.Show( ex.Message );        }
Magic Number,AudioOutput,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\AudioOutput\MainWindow.xaml.cs,DrawEllipse,The following statement contains a magic number: const int R = 5;
Magic Number,AudioOutput,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\AudioOutput\MainWindow.xaml.cs,DrawEllipse,The following statement contains a magic number: canvasSkeleton.Children.Add( new Ellipse()        {          Fill = new SolidColorBrush( Colors.Red )'          Margin = new Thickness( point.X - R' point.Y - R' 0' 0 )'          Width = R * 2'          Height = R * 2'        } );
Magic Number,AudioOutput,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\AudioOutput\MainWindow.xaml.cs,DrawEllipse,The following statement contains a magic number: canvasSkeleton.Children.Add( new Ellipse()        {          Fill = new SolidColorBrush( Colors.Red )'          Margin = new Thickness( point.X - R' point.Y - R' 0' 0 )'          Width = R * 2'          Height = R * 2'        } );
Magic Number,AudioOutput,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\AudioOutput\MainWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,AudioOutput,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\AudioOutput\MainWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,AudioOutput,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\AudioOutput\MainWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,AudioOutput,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\AudioOutput\MainWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,AudioOutput,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\AudioOutput\MainWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,AudioOutput,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\AudioOutput\MainWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,AudioOutput,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\AudioOutput\MainWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,AudioOutput,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\AudioOutput\MainWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,AudioOutput,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\AudioOutput\MainWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,AudioOutput,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\AudioOutput\MainWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,AudioOutput,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\AudioOutput\MainWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,AudioOutput,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\AudioOutput\MainWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,AudioOutput,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\AudioOutput\MainWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,AudioOutput,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\AudioOutput\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 5 "..\..\..\MainWindow.xaml"              ((AudioOutput.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.imageRgb = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.imageDepth = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.canvasSkeleton = ((System.Windows.Controls.Canvas)(target));              return;              case 5:              this.comboBoxRange = ((System.Windows.Controls.ComboBox)(target));                            #line 10 "..\..\..\MainWindow.xaml"              this.comboBoxRange.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBoxRange_SelectionChanged);                            #line default              #line hidden              return;              }
Magic Number,AudioOutput,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\AudioOutput\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 5 "..\..\..\MainWindow.xaml"              ((AudioOutput.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.imageRgb = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.imageDepth = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.canvasSkeleton = ((System.Windows.Controls.Canvas)(target));              return;              case 5:              this.comboBoxRange = ((System.Windows.Controls.ComboBox)(target));                            #line 10 "..\..\..\MainWindow.xaml"              this.comboBoxRange.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBoxRange_SelectionChanged);                            #line default              #line hidden              return;              }
Magic Number,AudioOutput,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\AudioOutput\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 5 "..\..\..\MainWindow.xaml"              ((AudioOutput.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.imageRgb = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.imageDepth = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.canvasSkeleton = ((System.Windows.Controls.Canvas)(target));              return;              case 5:              this.comboBoxRange = ((System.Windows.Controls.ComboBox)(target));                            #line 10 "..\..\..\MainWindow.xaml"              this.comboBoxRange.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBoxRange_SelectionChanged);                            #line default              #line hidden              return;              }
Magic Number,AudioOutput,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\AudioOutput\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 5 "..\..\..\MainWindow.xaml"              ((AudioOutput.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.imageRgb = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.imageDepth = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.canvasSkeleton = ((System.Windows.Controls.Canvas)(target));              return;              case 5:              this.comboBoxRange = ((System.Windows.Controls.ComboBox)(target));                            #line 10 "..\..\..\MainWindow.xaml"              this.comboBoxRange.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBoxRange_SelectionChanged);                            #line default              #line hidden              return;              }
Missing Default,AudioOutput,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\AudioOutput\MainWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 5 "..\..\..\MainWindow.xaml"              ((AudioOutput.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.imageRgb = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.imageDepth = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.canvasSkeleton = ((System.Windows.Controls.Canvas)(target));              return;              case 5:              this.comboBoxRange = ((System.Windows.Controls.ComboBox)(target));                            #line 10 "..\..\..\MainWindow.xaml"              this.comboBoxRange.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBoxRange_SelectionChanged);                            #line default              #line hidden              return;              }
