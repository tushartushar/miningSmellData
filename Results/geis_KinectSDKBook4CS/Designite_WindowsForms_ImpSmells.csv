Implementation smell,Namespace,Class,File,Method,Description
Magic Number,WindowsForms,Form1,C:\repos\geis_KinectSDKBook4CS\1_basic\WindowsForms\Form1.cs,DrawEllipse,The following statement contains a magic number: const int R = 5;
Magic Number,WindowsForms,Form1,C:\repos\geis_KinectSDKBook4CS\1_basic\WindowsForms\Form1.cs,DrawEllipse,The following statement contains a magic number: g.DrawEllipse( new Pen( Brushes.Red' R )'          new Rectangle( point.X - R' point.Y - R' R * 2' R * 2 ) );
Magic Number,WindowsForms,Form1,C:\repos\geis_KinectSDKBook4CS\1_basic\WindowsForms\Form1.cs,DrawEllipse,The following statement contains a magic number: g.DrawEllipse( new Pen( Brushes.Red' R )'          new Rectangle( point.X - R' point.Y - R' R * 2' R * 2 ) );
Magic Number,WindowsForms,Form1,C:\repos\geis_KinectSDKBook4CS\1_basic\WindowsForms\Form1.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            // プレイヤーがいるピクセルの場合          if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          // プレイヤーではないピクセルの場合          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,WindowsForms,Form1,C:\repos\geis_KinectSDKBook4CS\1_basic\WindowsForms\Form1.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            // プレイヤーがいるピクセルの場合          if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          // プレイヤーではないピクセルの場合          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,WindowsForms,Form1,C:\repos\geis_KinectSDKBook4CS\1_basic\WindowsForms\Form1.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            // プレイヤーがいるピクセルの場合          if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          // プレイヤーではないピクセルの場合          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,WindowsForms,Form1,C:\repos\geis_KinectSDKBook4CS\1_basic\WindowsForms\Form1.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            // プレイヤーがいるピクセルの場合          if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          // プレイヤーではないピクセルの場合          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,WindowsForms,Form1,C:\repos\geis_KinectSDKBook4CS\1_basic\WindowsForms\Form1.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            // プレイヤーがいるピクセルの場合          if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          // プレイヤーではないピクセルの場合          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,WindowsForms,Form1,C:\repos\geis_KinectSDKBook4CS\1_basic\WindowsForms\Form1.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            // プレイヤーがいるピクセルの場合          if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          // プレイヤーではないピクセルの場合          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,WindowsForms,Form1,C:\repos\geis_KinectSDKBook4CS\1_basic\WindowsForms\Form1.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            // プレイヤーがいるピクセルの場合          if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          // プレイヤーではないピクセルの場合          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,WindowsForms,Form1,C:\repos\geis_KinectSDKBook4CS\1_basic\WindowsForms\Form1.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            // プレイヤーがいるピクセルの場合          if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          // プレイヤーではないピクセルの場合          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,WindowsForms,Form1,C:\repos\geis_KinectSDKBook4CS\1_basic\WindowsForms\Form1.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            // プレイヤーがいるピクセルの場合          if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          // プレイヤーではないピクセルの場合          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,WindowsForms,Form1,C:\repos\geis_KinectSDKBook4CS\1_basic\WindowsForms\Form1.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            // プレイヤーがいるピクセルの場合          if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          // プレイヤーではないピクセルの場合          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,WindowsForms,Form1,C:\repos\geis_KinectSDKBook4CS\1_basic\WindowsForms\Form1.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            // プレイヤーがいるピクセルの場合          if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          // プレイヤーではないピクセルの場合          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,WindowsForms,Form1,C:\repos\geis_KinectSDKBook4CS\1_basic\WindowsForms\Form1.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            // プレイヤーがいるピクセルの場合          if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          // プレイヤーではないピクセルの場合          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,WindowsForms,Form1,C:\repos\geis_KinectSDKBook4CS\1_basic\WindowsForms\Form1.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            // プレイヤーがいるピクセルの場合          if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          // プレイヤーではないピクセルの場合          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,WindowsForms,Form1,C:\repos\geis_KinectSDKBook4CS\1_basic\WindowsForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxRgb.Location = new System.Drawing.Point(12' 51);
Magic Number,WindowsForms,Form1,C:\repos\geis_KinectSDKBook4CS\1_basic\WindowsForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxRgb.Location = new System.Drawing.Point(12' 51);
Magic Number,WindowsForms,Form1,C:\repos\geis_KinectSDKBook4CS\1_basic\WindowsForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxRgb.Size = new System.Drawing.Size(640' 480);
Magic Number,WindowsForms,Form1,C:\repos\geis_KinectSDKBook4CS\1_basic\WindowsForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxRgb.Size = new System.Drawing.Size(640' 480);
Magic Number,WindowsForms,Form1,C:\repos\geis_KinectSDKBook4CS\1_basic\WindowsForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxDepth.Location = new System.Drawing.Point(658' 51);
Magic Number,WindowsForms,Form1,C:\repos\geis_KinectSDKBook4CS\1_basic\WindowsForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxDepth.Location = new System.Drawing.Point(658' 51);
Magic Number,WindowsForms,Form1,C:\repos\geis_KinectSDKBook4CS\1_basic\WindowsForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxDepth.Size = new System.Drawing.Size(640' 480);
Magic Number,WindowsForms,Form1,C:\repos\geis_KinectSDKBook4CS\1_basic\WindowsForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxDepth.Size = new System.Drawing.Size(640' 480);
Magic Number,WindowsForms,Form1,C:\repos\geis_KinectSDKBook4CS\1_basic\WindowsForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxRange.Location = new System.Drawing.Point(12' 12);
Magic Number,WindowsForms,Form1,C:\repos\geis_KinectSDKBook4CS\1_basic\WindowsForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxRange.Location = new System.Drawing.Point(12' 12);
Magic Number,WindowsForms,Form1,C:\repos\geis_KinectSDKBook4CS\1_basic\WindowsForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxRange.Size = new System.Drawing.Size(121' 20);
Magic Number,WindowsForms,Form1,C:\repos\geis_KinectSDKBook4CS\1_basic\WindowsForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxRange.Size = new System.Drawing.Size(121' 20);
Magic Number,WindowsForms,Form1,C:\repos\geis_KinectSDKBook4CS\1_basic\WindowsForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxRange.TabIndex = 2;
Magic Number,WindowsForms,Form1,C:\repos\geis_KinectSDKBook4CS\1_basic\WindowsForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(1317' 543);
Magic Number,WindowsForms,Form1,C:\repos\geis_KinectSDKBook4CS\1_basic\WindowsForms\Form1.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(1317' 543);
