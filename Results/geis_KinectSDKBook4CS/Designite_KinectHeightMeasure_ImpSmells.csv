Implementation smell,Namespace,Class,File,Method,Description
Complex Method,KinectHeightMeasure,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\KinectHeightMeasure\MainWindow.xaml.cs,kinect_AllFramesReady,Cyclomatic complexity of the method is 11
Long Statement,KinectHeightMeasure,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\KinectHeightMeasure\MainWindow.xaml.cs,kinect_AllFramesReady,The length of the statement  "				imageRgb.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel); " is 167.
Long Statement,KinectHeightMeasure,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\KinectHeightMeasure\MainWindow.xaml.cs,HeightMeasure,The length of the statement  "	if ((head.TrackingState != JointTrackingState.Tracked) || (leftFoot.TrackingState != JointTrackingState.Tracked) || (rightFoot.TrackingState != JointTrackingState.Tracked)) { " is 174.
Long Statement,KinectHeightMeasure,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\KinectHeightMeasure\MainWindow.xaml.cs,DrawMeasure,The length of the statement  "	Point headScalePoint = new Point (ScaleTo (headColor.X' colorStream.FrameWidth' canvasMeasure.Width)' ScaleTo (headColor.Y' colorStream.FrameHeight' canvasMeasure.Height)); " is 172.
Long Statement,KinectHeightMeasure,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\KinectHeightMeasure\MainWindow.xaml.cs,DrawMeasure,The length of the statement  "	Point footScalePoint = new Point (ScaleTo (footColor.X' colorStream.FrameWidth' canvasMeasure.Width)' ScaleTo (footColor.Y' colorStream.FrameHeight' canvasMeasure.Height)); " is 172.
Magic Number,KinectHeightMeasure,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\KinectHeightMeasure\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: try {  	// Kinectのインスタンスを取得する  	KinectSensor kinect = sender as KinectSensor;  	if (kinect == null) {  		return;  	}  	// RGBカメラのフレームデータを取得する  	using (ColorImageFrame colorFrame = e.OpenColorImageFrame ()) {  		if (colorFrame != null) {  			// RGBカメラの画像を表示する  			byte[] colorPixel = new byte[colorFrame.PixelDataLength];  			colorFrame.CopyPixelDataTo (colorPixel);  			imageRgb.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel);  		}  	}  	// 距離カメラのフレームデータを取得する  	using (DepthImageFrame depthFrame = e.OpenDepthImageFrame ()) {  		// スケルトンのフレームを取得する  		using (SkeletonFrame skeletonFrame = e.OpenSkeletonFrame ()) {  			if ((depthFrame != null) && (skeletonFrame != null)) {  				// 身長を表示する  				HeightMeasure (kinect' depthFrame' skeletonFrame);  			}  		}  	}  } catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,KinectHeightMeasure,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\KinectHeightMeasure\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: try {  	// Kinectのインスタンスを取得する  	KinectSensor kinect = sender as KinectSensor;  	if (kinect == null) {  		return;  	}  	// RGBカメラのフレームデータを取得する  	using (ColorImageFrame colorFrame = e.OpenColorImageFrame ()) {  		if (colorFrame != null) {  			// RGBカメラの画像を表示する  			byte[] colorPixel = new byte[colorFrame.PixelDataLength];  			colorFrame.CopyPixelDataTo (colorPixel);  			imageRgb.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel);  		}  	}  	// 距離カメラのフレームデータを取得する  	using (DepthImageFrame depthFrame = e.OpenDepthImageFrame ()) {  		// スケルトンのフレームを取得する  		using (SkeletonFrame skeletonFrame = e.OpenSkeletonFrame ()) {  			if ((depthFrame != null) && (skeletonFrame != null)) {  				// 身長を表示する  				HeightMeasure (kinect' depthFrame' skeletonFrame);  			}  		}  	}  } catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,KinectHeightMeasure,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\KinectHeightMeasure\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: using (ColorImageFrame colorFrame = e.OpenColorImageFrame ()) {  	if (colorFrame != null) {  		// RGBカメラの画像を表示する  		byte[] colorPixel = new byte[colorFrame.PixelDataLength];  		colorFrame.CopyPixelDataTo (colorPixel);  		imageRgb.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel);  	}  }  
Magic Number,KinectHeightMeasure,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\KinectHeightMeasure\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: using (ColorImageFrame colorFrame = e.OpenColorImageFrame ()) {  	if (colorFrame != null) {  		// RGBカメラの画像を表示する  		byte[] colorPixel = new byte[colorFrame.PixelDataLength];  		colorFrame.CopyPixelDataTo (colorPixel);  		imageRgb.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel);  	}  }  
Magic Number,KinectHeightMeasure,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\KinectHeightMeasure\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: if (colorFrame != null) {  	// RGBカメラの画像を表示する  	byte[] colorPixel = new byte[colorFrame.PixelDataLength];  	colorFrame.CopyPixelDataTo (colorPixel);  	imageRgb.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel);  }  
Magic Number,KinectHeightMeasure,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\KinectHeightMeasure\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: if (colorFrame != null) {  	// RGBカメラの画像を表示する  	byte[] colorPixel = new byte[colorFrame.PixelDataLength];  	colorFrame.CopyPixelDataTo (colorPixel);  	imageRgb.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel);  }  
Magic Number,KinectHeightMeasure,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\KinectHeightMeasure\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: imageRgb.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel);  
Magic Number,KinectHeightMeasure,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\KinectHeightMeasure\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: imageRgb.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel);  
Magic Number,KinectHeightMeasure,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\KinectHeightMeasure\MainWindow.xaml.cs,DrawMeasure,The following statement contains a magic number: canvasMeasure.Children.Add (new TextBlock () {  	Margin = new Thickness (headScalePoint.X + lineLength' Y' 0' 0)'  	Text = height.ToString ()'  	Height = 36'  	Width = 60'  	FontSize = 24'  	FontWeight = FontWeights.Bold'  	Background = new SolidColorBrush (Colors.White)'  });  
Magic Number,KinectHeightMeasure,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\KinectHeightMeasure\MainWindow.xaml.cs,DrawMeasure,The following statement contains a magic number: canvasMeasure.Children.Add (new TextBlock () {  	Margin = new Thickness (headScalePoint.X + lineLength' Y' 0' 0)'  	Text = height.ToString ()'  	Height = 36'  	Width = 60'  	FontSize = 24'  	FontWeight = FontWeights.Bold'  	Background = new SolidColorBrush (Colors.White)'  });  
Magic Number,KinectHeightMeasure,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\KinectHeightMeasure\MainWindow.xaml.cs,DrawMeasure,The following statement contains a magic number: canvasMeasure.Children.Add (new TextBlock () {  	Margin = new Thickness (headScalePoint.X + lineLength' Y' 0' 0)'  	Text = height.ToString ()'  	Height = 36'  	Width = 60'  	FontSize = 24'  	FontWeight = FontWeights.Bold'  	Background = new SolidColorBrush (Colors.White)'  });  
