Implementation smell,Namespace,Class,File,Method,Description
Long Statement,KinectHeightMeasure,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\KinectHeightMeasure\MainWindow.xaml.cs,Connect,The length of the statement  "            ((KinectHeightMeasure.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing); " is 120.
Magic Number,KinectHeightMeasure,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\KinectHeightMeasure\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: try {          // Kinectのインスタンスを取得する          KinectSensor kinect = sender as KinectSensor;          if ( kinect == null ) {            return;          }            // RGBカメラのフレームデータを取得する          using ( ColorImageFrame colorFrame = e.OpenColorImageFrame() ) {            if ( colorFrame != null ) {              // RGBカメラの画像を表示する              byte[] colorPixel = new byte[colorFrame.PixelDataLength];              colorFrame.CopyPixelDataTo( colorPixel );              imageRgb.Source = BitmapSource.Create( colorFrame.Width' colorFrame.Height' 96' 96'                  PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel );            }          }            // 距離カメラのフレームデータを取得する          using ( DepthImageFrame depthFrame = e.OpenDepthImageFrame() ) {            // スケルトンのフレームを取得する            using ( SkeletonFrame skeletonFrame = e.OpenSkeletonFrame() ) {              if ( (depthFrame != null) && (skeletonFrame != null) ) {                // 身長を表示する                HeightMeasure( kinect' depthFrame' skeletonFrame );              }            }          }        }        catch ( Exception ex ) {          MessageBox.Show( ex.Message );        }
Magic Number,KinectHeightMeasure,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\KinectHeightMeasure\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: try {          // Kinectのインスタンスを取得する          KinectSensor kinect = sender as KinectSensor;          if ( kinect == null ) {            return;          }            // RGBカメラのフレームデータを取得する          using ( ColorImageFrame colorFrame = e.OpenColorImageFrame() ) {            if ( colorFrame != null ) {              // RGBカメラの画像を表示する              byte[] colorPixel = new byte[colorFrame.PixelDataLength];              colorFrame.CopyPixelDataTo( colorPixel );              imageRgb.Source = BitmapSource.Create( colorFrame.Width' colorFrame.Height' 96' 96'                  PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel );            }          }            // 距離カメラのフレームデータを取得する          using ( DepthImageFrame depthFrame = e.OpenDepthImageFrame() ) {            // スケルトンのフレームを取得する            using ( SkeletonFrame skeletonFrame = e.OpenSkeletonFrame() ) {              if ( (depthFrame != null) && (skeletonFrame != null) ) {                // 身長を表示する                HeightMeasure( kinect' depthFrame' skeletonFrame );              }            }          }        }        catch ( Exception ex ) {          MessageBox.Show( ex.Message );        }
Magic Number,KinectHeightMeasure,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\KinectHeightMeasure\MainWindow.xaml.cs,DrawMeasure,The following statement contains a magic number: int height = (int)(Math.Abs( head.Position.Y - foot.Position.Y ) * 100);
Magic Number,KinectHeightMeasure,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\KinectHeightMeasure\MainWindow.xaml.cs,DrawMeasure,The following statement contains a magic number: const int lineLength = 50;
Magic Number,KinectHeightMeasure,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\KinectHeightMeasure\MainWindow.xaml.cs,DrawMeasure,The following statement contains a magic number: const int thickness = 10;
Magic Number,KinectHeightMeasure,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\KinectHeightMeasure\MainWindow.xaml.cs,DrawMeasure,The following statement contains a magic number: double Y = Math.Abs( headScalePoint.Y + footScalePoint.Y ) / 2;
Magic Number,KinectHeightMeasure,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\KinectHeightMeasure\MainWindow.xaml.cs,DrawMeasure,The following statement contains a magic number: canvasMeasure.Children.Add( new TextBlock()        {          Margin = new Thickness( headScalePoint.X + lineLength' Y' 0' 0 )'          Text = height.ToString()'          Height = 36'          Width = 60'          FontSize = 24'          FontWeight = FontWeights.Bold'          Background = new SolidColorBrush( Colors.White )'        } );
Magic Number,KinectHeightMeasure,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\KinectHeightMeasure\MainWindow.xaml.cs,DrawMeasure,The following statement contains a magic number: canvasMeasure.Children.Add( new TextBlock()        {          Margin = new Thickness( headScalePoint.X + lineLength' Y' 0' 0 )'          Text = height.ToString()'          Height = 36'          Width = 60'          FontSize = 24'          FontWeight = FontWeights.Bold'          Background = new SolidColorBrush( Colors.White )'        } );
Magic Number,KinectHeightMeasure,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\KinectHeightMeasure\MainWindow.xaml.cs,DrawMeasure,The following statement contains a magic number: canvasMeasure.Children.Add( new TextBlock()        {          Margin = new Thickness( headScalePoint.X + lineLength' Y' 0' 0 )'          Text = height.ToString()'          Height = 36'          Width = 60'          FontSize = 24'          FontWeight = FontWeights.Bold'          Background = new SolidColorBrush( Colors.White )'        } );
Magic Number,KinectHeightMeasure,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\KinectHeightMeasure\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\MainWindow.xaml"              ((KinectHeightMeasure.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.imageRgb = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.canvasMeasure = ((System.Windows.Controls.Canvas)(target));              return;              }
Magic Number,KinectHeightMeasure,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\KinectHeightMeasure\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\MainWindow.xaml"              ((KinectHeightMeasure.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.imageRgb = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.canvasMeasure = ((System.Windows.Controls.Canvas)(target));              return;              }
Missing Default,KinectHeightMeasure,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\KinectHeightMeasure\MainWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\MainWindow.xaml"              ((KinectHeightMeasure.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.imageRgb = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.canvasMeasure = ((System.Windows.Controls.Canvas)(target));              return;              }
