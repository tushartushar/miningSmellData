Implementation smell,Namespace,Class,File,Method,Description
Magic Number,BackgroundMask,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\BackgroundMask\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: try {          // Kinectのインスタンスを取得する          KinectSensor kinect = sender as KinectSensor;          if ( kinect == null ) {            return;          }            // 背景をマスクした画像を描画する          using ( ColorImageFrame colorFrame = e.OpenColorImageFrame() ) {            using ( DepthImageFrame depthFrame = e.OpenDepthImageFrame() ) {              if ( (colorFrame != null) && (depthFrame != null) ) {                imageRgb.Source = BitmapSource.Create( colorFrame.Width' colorFrame.Height' 96' 96'                    PixelFormats.Bgr32' null' BackgroundMask( kinect' colorFrame' depthFrame )'                    colorFrame.Width * colorFrame.BytesPerPixel );              }            }          }        }        catch ( Exception ex ) {          MessageBox.Show( ex.Message );        }
Magic Number,BackgroundMask,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\BackgroundMask\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: try {          // Kinectのインスタンスを取得する          KinectSensor kinect = sender as KinectSensor;          if ( kinect == null ) {            return;          }            // 背景をマスクした画像を描画する          using ( ColorImageFrame colorFrame = e.OpenColorImageFrame() ) {            using ( DepthImageFrame depthFrame = e.OpenDepthImageFrame() ) {              if ( (colorFrame != null) && (depthFrame != null) ) {                imageRgb.Source = BitmapSource.Create( colorFrame.Width' colorFrame.Height' 96' 96'                    PixelFormats.Bgr32' null' BackgroundMask( kinect' colorFrame' depthFrame )'                    colorFrame.Width * colorFrame.BytesPerPixel );              }            }          }        }        catch ( Exception ex ) {          MessageBox.Show( ex.Message );        }
Magic Number,BackgroundMask,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\BackgroundMask\MainWindow.xaml.cs,BackgroundMask,The following statement contains a magic number: for ( int i = 0; i < outputColor.Length; i += Bgr32BytesPerPixel ) {          outputColor[i] = 255;          outputColor[i + 1] = 255;          outputColor[i + 2] = 255;        }
Magic Number,BackgroundMask,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\BackgroundMask\MainWindow.xaml.cs,BackgroundMask,The following statement contains a magic number: for ( int i = 0; i < outputColor.Length; i += Bgr32BytesPerPixel ) {          outputColor[i] = 255;          outputColor[i + 1] = 255;          outputColor[i + 2] = 255;        }
Magic Number,BackgroundMask,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\BackgroundMask\MainWindow.xaml.cs,BackgroundMask,The following statement contains a magic number: for ( int i = 0; i < outputColor.Length; i += Bgr32BytesPerPixel ) {          outputColor[i] = 255;          outputColor[i + 1] = 255;          outputColor[i + 2] = 255;        }
Magic Number,BackgroundMask,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\BackgroundMask\MainWindow.xaml.cs,BackgroundMask,The following statement contains a magic number: for ( int i = 0; i < outputColor.Length; i += Bgr32BytesPerPixel ) {          outputColor[i] = 255;          outputColor[i + 1] = 255;          outputColor[i + 2] = 255;        }
Magic Number,BackgroundMask,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\BackgroundMask\MainWindow.xaml.cs,BackgroundMask,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // プレイヤーを取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            // プレーヤーを検出した座標だけ、RGBカメラの画像を使う          if ( player != 0 ) {            outputColor[colorIndex] = colorPixel[colorIndex];            outputColor[colorIndex + 1] = colorPixel[colorIndex + 1];            outputColor[colorIndex + 2] = colorPixel[colorIndex + 2];          }        }
Magic Number,BackgroundMask,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\BackgroundMask\MainWindow.xaml.cs,BackgroundMask,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // プレイヤーを取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            // プレーヤーを検出した座標だけ、RGBカメラの画像を使う          if ( player != 0 ) {            outputColor[colorIndex] = colorPixel[colorIndex];            outputColor[colorIndex + 1] = colorPixel[colorIndex + 1];            outputColor[colorIndex + 2] = colorPixel[colorIndex + 2];          }        }
Magic Number,BackgroundMask,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\BackgroundMask\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\MainWindow.xaml"              ((BackgroundMask.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.imageRgb = ((System.Windows.Controls.Image)(target));              return;              }
Missing Default,BackgroundMask,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\BackgroundMask\MainWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\MainWindow.xaml"              ((BackgroundMask.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.imageRgb = ((System.Windows.Controls.Image)(target));              return;              }
