Implementation smell,Namespace,Class,File,Method,Description
Complex Method,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,kinect_AllFramesReady,Cyclomatic complexity of the method is 15
Long Statement,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,kinect_AllFramesReady,The length of the statement  "					kinect.MapDepthFrameToColorFrame (kinect.DepthStream.Format' depthPixel' kinect.ColorStream.Format' colorImagePixelPoint); " is 122.
Long Statement,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,kinect_AllFramesReady,The length of the statement  "					CameraImage.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel); " is 170.
Long Statement,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,UpdateRectPosition,The length of the statement  "		rect = new Rect (currentPoint.X' currentPoint.Y' Math.Abs (startPointOfRect.X - currentPoint.X)' Math.Abs (startPointOfRect.Y - currentPoint.Y)); " is 145.
Long Statement,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,UpdateRectPosition,The length of the statement  "		rect = new Rect (currentPoint.X' startPointOfRect.Y' Math.Abs (startPointOfRect.X - currentPoint.X)' Math.Abs (startPointOfRect.Y - currentPoint.Y)); " is 149.
Long Statement,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,UpdateRectPosition,The length of the statement  "		rect = new Rect (startPointOfRect.X' currentPoint.Y' Math.Abs (startPointOfRect.X - currentPoint.X)' Math.Abs (startPointOfRect.Y - currentPoint.Y)); " is 149.
Long Statement,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,UpdateRectPosition,The length of the statement  "		rect = new Rect (startPointOfRect.X' startPointOfRect.Y' Math.Abs (startPointOfRect.X - currentPoint.X)' Math.Abs (startPointOfRect.Y - currentPoint.Y)); " is 153.
Long Statement,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,SaveBackgroundDepth,The length of the statement  "			backgroundDepthData [counter] = (short)(depthPixel [y * depthStream.FrameWidth + x] >> DepthImageFrame.PlayerIndexBitmaskWidth); " is 128.
Long Statement,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,CheckThePointTouchingTheRegion,The length of the statement  "			short currentDepthVal = (short)(depthPixel [y * depthStream.FrameWidth + x] >> DepthImageFrame.PlayerIndexBitmaskWidth); " is 120.
Long Statement,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,CheckThePointTouchingTheRegion,The length of the statement  "			if (backgroundDepthData [counter] > currentDepthVal && (backgroundDepthData [counter] - currentDepthVal) < distanceThreshold && (backgroundDepthData [counter] - currentDepthVal) > distanceBetweenWallThreshold) { " is 211.
Complex Conditional,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,UpdatePaintCanvas,The conditional expression  "(p.X == ERROR_OF_POINT && p.Y == ERROR_OF_POINT) || // 現在のフレームでタッチはされていない  (preTouchPoint.X == ERROR_OF_POINT && preTouchPoint.Y == ERROR_OF_POINT)"  is complex.
Magic Number,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: try {  	using (ColorImageFrame colorFrame = e.OpenColorImageFrame ()) {  		using (DepthImageFrame depthFrame = e.OpenDepthImageFrame ()) {  			if (depthFrame != null && colorFrame != null && kinect.IsRunning) {  				if (depthPixel == null) {  					depthPixel = new short[depthFrame.PixelDataLength];  					colorImagePixelPoint = new ColorImagePoint[depthFrame.PixelDataLength];  				}  				// 描画を3フレームに1回にする  				if (depthFrame.FrameNumber % 3 != 0)  					return;  				depthFrame.CopyPixelDataTo (depthPixel);  				// Depthデータの座標をRGB画像の座標に変換する  				kinect.MapDepthFrameToColorFrame (kinect.DepthStream.Format' depthPixel' kinect.ColorStream.Format' colorImagePixelPoint);  				// カメラ画像の描画  				byte[] colorPixel = new byte[colorFrame.PixelDataLength];  				colorFrame.CopyPixelDataTo (colorPixel);  				// RGB画像の位置を距離画像の位置に補正  				colorPixel = CoordinateColorImage (colorImagePixelPoint' colorPixel);  				CameraImage.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel);  			}  		}  	}  } catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: try {  	using (ColorImageFrame colorFrame = e.OpenColorImageFrame ()) {  		using (DepthImageFrame depthFrame = e.OpenDepthImageFrame ()) {  			if (depthFrame != null && colorFrame != null && kinect.IsRunning) {  				if (depthPixel == null) {  					depthPixel = new short[depthFrame.PixelDataLength];  					colorImagePixelPoint = new ColorImagePoint[depthFrame.PixelDataLength];  				}  				// 描画を3フレームに1回にする  				if (depthFrame.FrameNumber % 3 != 0)  					return;  				depthFrame.CopyPixelDataTo (depthPixel);  				// Depthデータの座標をRGB画像の座標に変換する  				kinect.MapDepthFrameToColorFrame (kinect.DepthStream.Format' depthPixel' kinect.ColorStream.Format' colorImagePixelPoint);  				// カメラ画像の描画  				byte[] colorPixel = new byte[colorFrame.PixelDataLength];  				colorFrame.CopyPixelDataTo (colorPixel);  				// RGB画像の位置を距離画像の位置に補正  				colorPixel = CoordinateColorImage (colorImagePixelPoint' colorPixel);  				CameraImage.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel);  			}  		}  	}  } catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: try {  	using (ColorImageFrame colorFrame = e.OpenColorImageFrame ()) {  		using (DepthImageFrame depthFrame = e.OpenDepthImageFrame ()) {  			if (depthFrame != null && colorFrame != null && kinect.IsRunning) {  				if (depthPixel == null) {  					depthPixel = new short[depthFrame.PixelDataLength];  					colorImagePixelPoint = new ColorImagePoint[depthFrame.PixelDataLength];  				}  				// 描画を3フレームに1回にする  				if (depthFrame.FrameNumber % 3 != 0)  					return;  				depthFrame.CopyPixelDataTo (depthPixel);  				// Depthデータの座標をRGB画像の座標に変換する  				kinect.MapDepthFrameToColorFrame (kinect.DepthStream.Format' depthPixel' kinect.ColorStream.Format' colorImagePixelPoint);  				// カメラ画像の描画  				byte[] colorPixel = new byte[colorFrame.PixelDataLength];  				colorFrame.CopyPixelDataTo (colorPixel);  				// RGB画像の位置を距離画像の位置に補正  				colorPixel = CoordinateColorImage (colorImagePixelPoint' colorPixel);  				CameraImage.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel);  			}  		}  	}  } catch (Exception ex) {  	MessageBox.Show (ex.Message);  }  
Magic Number,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: using (ColorImageFrame colorFrame = e.OpenColorImageFrame ()) {  	using (DepthImageFrame depthFrame = e.OpenDepthImageFrame ()) {  		if (depthFrame != null && colorFrame != null && kinect.IsRunning) {  			if (depthPixel == null) {  				depthPixel = new short[depthFrame.PixelDataLength];  				colorImagePixelPoint = new ColorImagePoint[depthFrame.PixelDataLength];  			}  			// 描画を3フレームに1回にする  			if (depthFrame.FrameNumber % 3 != 0)  				return;  			depthFrame.CopyPixelDataTo (depthPixel);  			// Depthデータの座標をRGB画像の座標に変換する  			kinect.MapDepthFrameToColorFrame (kinect.DepthStream.Format' depthPixel' kinect.ColorStream.Format' colorImagePixelPoint);  			// カメラ画像の描画  			byte[] colorPixel = new byte[colorFrame.PixelDataLength];  			colorFrame.CopyPixelDataTo (colorPixel);  			// RGB画像の位置を距離画像の位置に補正  			colorPixel = CoordinateColorImage (colorImagePixelPoint' colorPixel);  			CameraImage.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel);  		}  	}  }  
Magic Number,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: using (ColorImageFrame colorFrame = e.OpenColorImageFrame ()) {  	using (DepthImageFrame depthFrame = e.OpenDepthImageFrame ()) {  		if (depthFrame != null && colorFrame != null && kinect.IsRunning) {  			if (depthPixel == null) {  				depthPixel = new short[depthFrame.PixelDataLength];  				colorImagePixelPoint = new ColorImagePoint[depthFrame.PixelDataLength];  			}  			// 描画を3フレームに1回にする  			if (depthFrame.FrameNumber % 3 != 0)  				return;  			depthFrame.CopyPixelDataTo (depthPixel);  			// Depthデータの座標をRGB画像の座標に変換する  			kinect.MapDepthFrameToColorFrame (kinect.DepthStream.Format' depthPixel' kinect.ColorStream.Format' colorImagePixelPoint);  			// カメラ画像の描画  			byte[] colorPixel = new byte[colorFrame.PixelDataLength];  			colorFrame.CopyPixelDataTo (colorPixel);  			// RGB画像の位置を距離画像の位置に補正  			colorPixel = CoordinateColorImage (colorImagePixelPoint' colorPixel);  			CameraImage.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel);  		}  	}  }  
Magic Number,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: using (ColorImageFrame colorFrame = e.OpenColorImageFrame ()) {  	using (DepthImageFrame depthFrame = e.OpenDepthImageFrame ()) {  		if (depthFrame != null && colorFrame != null && kinect.IsRunning) {  			if (depthPixel == null) {  				depthPixel = new short[depthFrame.PixelDataLength];  				colorImagePixelPoint = new ColorImagePoint[depthFrame.PixelDataLength];  			}  			// 描画を3フレームに1回にする  			if (depthFrame.FrameNumber % 3 != 0)  				return;  			depthFrame.CopyPixelDataTo (depthPixel);  			// Depthデータの座標をRGB画像の座標に変換する  			kinect.MapDepthFrameToColorFrame (kinect.DepthStream.Format' depthPixel' kinect.ColorStream.Format' colorImagePixelPoint);  			// カメラ画像の描画  			byte[] colorPixel = new byte[colorFrame.PixelDataLength];  			colorFrame.CopyPixelDataTo (colorPixel);  			// RGB画像の位置を距離画像の位置に補正  			colorPixel = CoordinateColorImage (colorImagePixelPoint' colorPixel);  			CameraImage.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel);  		}  	}  }  
Magic Number,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: using (DepthImageFrame depthFrame = e.OpenDepthImageFrame ()) {  	if (depthFrame != null && colorFrame != null && kinect.IsRunning) {  		if (depthPixel == null) {  			depthPixel = new short[depthFrame.PixelDataLength];  			colorImagePixelPoint = new ColorImagePoint[depthFrame.PixelDataLength];  		}  		// 描画を3フレームに1回にする  		if (depthFrame.FrameNumber % 3 != 0)  			return;  		depthFrame.CopyPixelDataTo (depthPixel);  		// Depthデータの座標をRGB画像の座標に変換する  		kinect.MapDepthFrameToColorFrame (kinect.DepthStream.Format' depthPixel' kinect.ColorStream.Format' colorImagePixelPoint);  		// カメラ画像の描画  		byte[] colorPixel = new byte[colorFrame.PixelDataLength];  		colorFrame.CopyPixelDataTo (colorPixel);  		// RGB画像の位置を距離画像の位置に補正  		colorPixel = CoordinateColorImage (colorImagePixelPoint' colorPixel);  		CameraImage.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel);  	}  }  
Magic Number,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: using (DepthImageFrame depthFrame = e.OpenDepthImageFrame ()) {  	if (depthFrame != null && colorFrame != null && kinect.IsRunning) {  		if (depthPixel == null) {  			depthPixel = new short[depthFrame.PixelDataLength];  			colorImagePixelPoint = new ColorImagePoint[depthFrame.PixelDataLength];  		}  		// 描画を3フレームに1回にする  		if (depthFrame.FrameNumber % 3 != 0)  			return;  		depthFrame.CopyPixelDataTo (depthPixel);  		// Depthデータの座標をRGB画像の座標に変換する  		kinect.MapDepthFrameToColorFrame (kinect.DepthStream.Format' depthPixel' kinect.ColorStream.Format' colorImagePixelPoint);  		// カメラ画像の描画  		byte[] colorPixel = new byte[colorFrame.PixelDataLength];  		colorFrame.CopyPixelDataTo (colorPixel);  		// RGB画像の位置を距離画像の位置に補正  		colorPixel = CoordinateColorImage (colorImagePixelPoint' colorPixel);  		CameraImage.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel);  	}  }  
Magic Number,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: using (DepthImageFrame depthFrame = e.OpenDepthImageFrame ()) {  	if (depthFrame != null && colorFrame != null && kinect.IsRunning) {  		if (depthPixel == null) {  			depthPixel = new short[depthFrame.PixelDataLength];  			colorImagePixelPoint = new ColorImagePoint[depthFrame.PixelDataLength];  		}  		// 描画を3フレームに1回にする  		if (depthFrame.FrameNumber % 3 != 0)  			return;  		depthFrame.CopyPixelDataTo (depthPixel);  		// Depthデータの座標をRGB画像の座標に変換する  		kinect.MapDepthFrameToColorFrame (kinect.DepthStream.Format' depthPixel' kinect.ColorStream.Format' colorImagePixelPoint);  		// カメラ画像の描画  		byte[] colorPixel = new byte[colorFrame.PixelDataLength];  		colorFrame.CopyPixelDataTo (colorPixel);  		// RGB画像の位置を距離画像の位置に補正  		colorPixel = CoordinateColorImage (colorImagePixelPoint' colorPixel);  		CameraImage.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel);  	}  }  
Magic Number,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: if (depthFrame != null && colorFrame != null && kinect.IsRunning) {  	if (depthPixel == null) {  		depthPixel = new short[depthFrame.PixelDataLength];  		colorImagePixelPoint = new ColorImagePoint[depthFrame.PixelDataLength];  	}  	// 描画を3フレームに1回にする  	if (depthFrame.FrameNumber % 3 != 0)  		return;  	depthFrame.CopyPixelDataTo (depthPixel);  	// Depthデータの座標をRGB画像の座標に変換する  	kinect.MapDepthFrameToColorFrame (kinect.DepthStream.Format' depthPixel' kinect.ColorStream.Format' colorImagePixelPoint);  	// カメラ画像の描画  	byte[] colorPixel = new byte[colorFrame.PixelDataLength];  	colorFrame.CopyPixelDataTo (colorPixel);  	// RGB画像の位置を距離画像の位置に補正  	colorPixel = CoordinateColorImage (colorImagePixelPoint' colorPixel);  	CameraImage.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel);  }  
Magic Number,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: if (depthFrame != null && colorFrame != null && kinect.IsRunning) {  	if (depthPixel == null) {  		depthPixel = new short[depthFrame.PixelDataLength];  		colorImagePixelPoint = new ColorImagePoint[depthFrame.PixelDataLength];  	}  	// 描画を3フレームに1回にする  	if (depthFrame.FrameNumber % 3 != 0)  		return;  	depthFrame.CopyPixelDataTo (depthPixel);  	// Depthデータの座標をRGB画像の座標に変換する  	kinect.MapDepthFrameToColorFrame (kinect.DepthStream.Format' depthPixel' kinect.ColorStream.Format' colorImagePixelPoint);  	// カメラ画像の描画  	byte[] colorPixel = new byte[colorFrame.PixelDataLength];  	colorFrame.CopyPixelDataTo (colorPixel);  	// RGB画像の位置を距離画像の位置に補正  	colorPixel = CoordinateColorImage (colorImagePixelPoint' colorPixel);  	CameraImage.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel);  }  
Magic Number,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: if (depthFrame != null && colorFrame != null && kinect.IsRunning) {  	if (depthPixel == null) {  		depthPixel = new short[depthFrame.PixelDataLength];  		colorImagePixelPoint = new ColorImagePoint[depthFrame.PixelDataLength];  	}  	// 描画を3フレームに1回にする  	if (depthFrame.FrameNumber % 3 != 0)  		return;  	depthFrame.CopyPixelDataTo (depthPixel);  	// Depthデータの座標をRGB画像の座標に変換する  	kinect.MapDepthFrameToColorFrame (kinect.DepthStream.Format' depthPixel' kinect.ColorStream.Format' colorImagePixelPoint);  	// カメラ画像の描画  	byte[] colorPixel = new byte[colorFrame.PixelDataLength];  	colorFrame.CopyPixelDataTo (colorPixel);  	// RGB画像の位置を距離画像の位置に補正  	colorPixel = CoordinateColorImage (colorImagePixelPoint' colorPixel);  	CameraImage.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel);  }  
Magic Number,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: if (depthFrame.FrameNumber % 3 != 0)  	return;  
Magic Number,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: CameraImage.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel);  
Magic Number,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: CameraImage.Source = BitmapSource.Create (colorFrame.Width' colorFrame.Height' 96' 96' PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel);  
Magic Number,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,UpdateTouchingPointEllipse,The following statement contains a magic number: TouchPoint.Width = 20;  
Magic Number,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,UpdateTouchingPointEllipse,The following statement contains a magic number: TouchPoint.Height = 20;  
Magic Number,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,UpdateTouchingPointEllipse,The following statement contains a magic number: Canvas.SetLeft (TouchPoint' p.X - TouchPoint.Width / 2);  
Magic Number,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,UpdateTouchingPointEllipse,The following statement contains a magic number: Canvas.SetTop (TouchPoint' p.Y - TouchPoint.Height / 2);  
Magic Number,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,CoordinateColorImage,The following statement contains a magic number: for (int i = 0; i < outputColor.Length; i += Bgr32BytesPerPixel) {  	outputColor [i] = colorPixels [i];  	outputColor [i + 1] = colorPixels [i + 1];  	outputColor [i + 2] = colorPixels [i + 2];  }  
Magic Number,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,CoordinateColorImage,The following statement contains a magic number: for (int i = 0; i < outputColor.Length; i += Bgr32BytesPerPixel) {  	outputColor [i] = colorPixels [i];  	outputColor [i + 1] = colorPixels [i + 1];  	outputColor [i + 2] = colorPixels [i + 2];  }  
Magic Number,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,CoordinateColorImage,The following statement contains a magic number: outputColor [i + 2] = colorPixels [i + 2];  
Magic Number,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,CoordinateColorImage,The following statement contains a magic number: outputColor [i + 2] = colorPixels [i + 2];  
Magic Number,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,CoordinateColorImage,The following statement contains a magic number: for (int index = 0; index < depthPixel.Length; index++) {  	// 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う  	int x = Math.Min (points [index].X' colorStream.FrameWidth - 1);  	int y = Math.Min (points [index].Y' colorStream.FrameHeight - 1);  	int colorIndex = ((y * kinect.DepthStream.FrameWidth) + x) * Bgr32BytesPerPixel;  	int outputIndex = index * Bgr32BytesPerPixel;  	// カラー画像のピクセルを調整された座標値に変換する  	outputColor [outputIndex] = colorPixels [colorIndex];  	outputColor [outputIndex + 1] = colorPixels [colorIndex + 1];  	outputColor [outputIndex + 2] = colorPixels [colorIndex + 2];  }  
Magic Number,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,CoordinateColorImage,The following statement contains a magic number: for (int index = 0; index < depthPixel.Length; index++) {  	// 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う  	int x = Math.Min (points [index].X' colorStream.FrameWidth - 1);  	int y = Math.Min (points [index].Y' colorStream.FrameHeight - 1);  	int colorIndex = ((y * kinect.DepthStream.FrameWidth) + x) * Bgr32BytesPerPixel;  	int outputIndex = index * Bgr32BytesPerPixel;  	// カラー画像のピクセルを調整された座標値に変換する  	outputColor [outputIndex] = colorPixels [colorIndex];  	outputColor [outputIndex + 1] = colorPixels [colorIndex + 1];  	outputColor [outputIndex + 2] = colorPixels [colorIndex + 2];  }  
Magic Number,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,CoordinateColorImage,The following statement contains a magic number: outputColor [outputIndex + 2] = colorPixels [colorIndex + 2];  
Magic Number,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,CoordinateColorImage,The following statement contains a magic number: outputColor [outputIndex + 2] = colorPixels [colorIndex + 2];  
Magic Number,TouchApplication,PaintWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\PaintWindow.xaml.cs,DrawLine,The following statement contains a magic number: line.Stroke = new SolidColorBrush (Color.FromRgb (220' 220' 220));  
Magic Number,TouchApplication,PaintWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\PaintWindow.xaml.cs,DrawLine,The following statement contains a magic number: line.Stroke = new SolidColorBrush (Color.FromRgb (220' 220' 220));  
Magic Number,TouchApplication,PaintWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\PaintWindow.xaml.cs,DrawLine,The following statement contains a magic number: line.Stroke = new SolidColorBrush (Color.FromRgb (220' 220' 220));  
Magic Number,TouchApplication,PaintWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\PaintWindow.xaml.cs,DrawLine,The following statement contains a magic number: line.StrokeThickness = 70;  
Missing Default,TouchApplication,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\TouchApplication\MainWindow.xaml.cs,kinect_AllFramesReady,The following switch statement is missing a default case: switch (currentMode) {  case SelectMode.SELECTING:  	// 領域を指定中ならば描画も更新  	UpdateRectPosition ();  	break;  case SelectMode.SELECTED:  	// 領域内を触っているかチェック  	Point point = CheckThePointTouchingTheRegion ();  	UpdateTouchingPointEllipse (point);  	UpdatePaintCanvas (point);  	break;  }  
