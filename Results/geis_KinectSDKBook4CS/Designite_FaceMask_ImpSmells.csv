Implementation smell,Namespace,Class,File,Method,Description
Complex Method,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,kinect_AllFramesReady,Cyclomatic complexity of the method is 10
Long Statement,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,ConvertToBitmap,The length of the statement  "	this.outputImage.WritePixels (new Int32Rect (0' 0' cif.Width' cif.Height)' this.RGB24PixelData' outputImage.BackBufferStride' 0); " is 129.
Complex Conditional,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,kinect_AllFramesReady,The conditional expression  "colorFrame != null && (point.X != 0 || point.Y != 0) && colorFrame.FrameNumber % 6 == 0"  is complex.
Empty Catch Block,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,CheckFacePosition,The method has an empty catch block.
Magic Number,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,InitOpenCV,The following statement contains a magic number: openCVImage = new IplImage (kinect.ColorStream.FrameWidth' kinect.ColorStream.FrameHeight' BitDepth.U8' 3);  
Magic Number,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: using (ColorImageFrame colorFrame = e.OpenColorImageFrame ()) {  	if (colorFrame != null) {  		// ColorImageFrame -> ImageSource (WriteableBitmap)　変換  		image1.Source = ConvertToBitmap (colorFrame);  		// スケルトンフレームデータを取得する  		using (SkeletonFrame skeletonFrame = e.OpenSkeletonFrame ()) {  			if (skeletonFrame != null) {  				// スケルトンデータを取得する  				Skeleton[] skeletonData = new Skeleton[skeletonFrame.SkeletonArrayLength];  				skeletonFrame.CopySkeletonDataTo (skeletonData);  				var point = new ColorImagePoint ();  				// プレーヤーごとのスケルトンから頭の位置を取得  				foreach (var skeleton in skeletonData) {  					var head = skeleton.Joints [JointType.Head];  					if (head.TrackingState == JointTrackingState.Tracked) {  						point = kinect.MapSkeletonPointToColor (head.Position' kinect.ColorStream.Format);  					}  				}  				// 鼻眼鏡の描画  				// ・スケルトンが認識出来なかった場合は処理をしない  				// ・6フレーム毎に顔検出を行う  				if (colorFrame != null && (point.X != 0 || point.Y != 0) && colorFrame.FrameNumber % 6 == 0) {  					Rect rect = CheckFacePosition (point);  					image2.Margin = new Thickness (rect.X' rect.Y' 0' 0);  					image2.Width = rect.Width;  					image2.Height = rect.Height;  					image2.Visibility = System.Windows.Visibility.Visible;  				}  			}  		}  	}  }  
Magic Number,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: if (colorFrame != null) {  	// ColorImageFrame -> ImageSource (WriteableBitmap)　変換  	image1.Source = ConvertToBitmap (colorFrame);  	// スケルトンフレームデータを取得する  	using (SkeletonFrame skeletonFrame = e.OpenSkeletonFrame ()) {  		if (skeletonFrame != null) {  			// スケルトンデータを取得する  			Skeleton[] skeletonData = new Skeleton[skeletonFrame.SkeletonArrayLength];  			skeletonFrame.CopySkeletonDataTo (skeletonData);  			var point = new ColorImagePoint ();  			// プレーヤーごとのスケルトンから頭の位置を取得  			foreach (var skeleton in skeletonData) {  				var head = skeleton.Joints [JointType.Head];  				if (head.TrackingState == JointTrackingState.Tracked) {  					point = kinect.MapSkeletonPointToColor (head.Position' kinect.ColorStream.Format);  				}  			}  			// 鼻眼鏡の描画  			// ・スケルトンが認識出来なかった場合は処理をしない  			// ・6フレーム毎に顔検出を行う  			if (colorFrame != null && (point.X != 0 || point.Y != 0) && colorFrame.FrameNumber % 6 == 0) {  				Rect rect = CheckFacePosition (point);  				image2.Margin = new Thickness (rect.X' rect.Y' 0' 0);  				image2.Width = rect.Width;  				image2.Height = rect.Height;  				image2.Visibility = System.Windows.Visibility.Visible;  			}  		}  	}  }  
Magic Number,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: using (SkeletonFrame skeletonFrame = e.OpenSkeletonFrame ()) {  	if (skeletonFrame != null) {  		// スケルトンデータを取得する  		Skeleton[] skeletonData = new Skeleton[skeletonFrame.SkeletonArrayLength];  		skeletonFrame.CopySkeletonDataTo (skeletonData);  		var point = new ColorImagePoint ();  		// プレーヤーごとのスケルトンから頭の位置を取得  		foreach (var skeleton in skeletonData) {  			var head = skeleton.Joints [JointType.Head];  			if (head.TrackingState == JointTrackingState.Tracked) {  				point = kinect.MapSkeletonPointToColor (head.Position' kinect.ColorStream.Format);  			}  		}  		// 鼻眼鏡の描画  		// ・スケルトンが認識出来なかった場合は処理をしない  		// ・6フレーム毎に顔検出を行う  		if (colorFrame != null && (point.X != 0 || point.Y != 0) && colorFrame.FrameNumber % 6 == 0) {  			Rect rect = CheckFacePosition (point);  			image2.Margin = new Thickness (rect.X' rect.Y' 0' 0);  			image2.Width = rect.Width;  			image2.Height = rect.Height;  			image2.Visibility = System.Windows.Visibility.Visible;  		}  	}  }  
Magic Number,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: if (skeletonFrame != null) {  	// スケルトンデータを取得する  	Skeleton[] skeletonData = new Skeleton[skeletonFrame.SkeletonArrayLength];  	skeletonFrame.CopySkeletonDataTo (skeletonData);  	var point = new ColorImagePoint ();  	// プレーヤーごとのスケルトンから頭の位置を取得  	foreach (var skeleton in skeletonData) {  		var head = skeleton.Joints [JointType.Head];  		if (head.TrackingState == JointTrackingState.Tracked) {  			point = kinect.MapSkeletonPointToColor (head.Position' kinect.ColorStream.Format);  		}  	}  	// 鼻眼鏡の描画  	// ・スケルトンが認識出来なかった場合は処理をしない  	// ・6フレーム毎に顔検出を行う  	if (colorFrame != null && (point.X != 0 || point.Y != 0) && colorFrame.FrameNumber % 6 == 0) {  		Rect rect = CheckFacePosition (point);  		image2.Margin = new Thickness (rect.X' rect.Y' 0' 0);  		image2.Width = rect.Width;  		image2.Height = rect.Height;  		image2.Visibility = System.Windows.Visibility.Visible;  	}  }  
Magic Number,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: if (colorFrame != null && (point.X != 0 || point.Y != 0) && colorFrame.FrameNumber % 6 == 0) {  	Rect rect = CheckFacePosition (point);  	image2.Margin = new Thickness (rect.X' rect.Y' 0' 0);  	image2.Width = rect.Width;  	image2.Height = rect.Height;  	image2.Visibility = System.Windows.Visibility.Visible;  }  
Magic Number,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,ConvertToBitmap,The following statement contains a magic number: if (outputImage == null || BGR32PixelData == null) {  	this.BGR32PixelData = new byte[cif.PixelDataLength];  	this.outputImage = new WriteableBitmap (cif.Width' cif.Height' 96' 96' PixelFormats.Rgb24' null);  }  
Magic Number,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,ConvertToBitmap,The following statement contains a magic number: if (outputImage == null || BGR32PixelData == null) {  	this.BGR32PixelData = new byte[cif.PixelDataLength];  	this.outputImage = new WriteableBitmap (cif.Width' cif.Height' 96' 96' PixelFormats.Rgb24' null);  }  
Magic Number,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,ConvertToBitmap,The following statement contains a magic number: this.outputImage = new WriteableBitmap (cif.Width' cif.Height' 96' 96' PixelFormats.Rgb24' null);  
Magic Number,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,ConvertToBitmap,The following statement contains a magic number: this.outputImage = new WriteableBitmap (cif.Width' cif.Height' 96' 96' PixelFormats.Rgb24' null);  
Magic Number,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,ConvertBGR32toRGB24,The following statement contains a magic number: for (int i = 0; i < pixels.Length / BGR32Bits; i++) {  	// BGR32bitからRGB24に変換  	bytes [i * RGB24Bits] = pixels [i * BGR32Bits + 2];  	// R  	bytes [i * RGB24Bits + 1] = pixels [i * BGR32Bits + 1];  	// G  	bytes [i * RGB24Bits + 2] = pixels [i * BGR32Bits];  	// B  }  
Magic Number,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,ConvertBGR32toRGB24,The following statement contains a magic number: for (int i = 0; i < pixels.Length / BGR32Bits; i++) {  	// BGR32bitからRGB24に変換  	bytes [i * RGB24Bits] = pixels [i * BGR32Bits + 2];  	// R  	bytes [i * RGB24Bits + 1] = pixels [i * BGR32Bits + 1];  	// G  	bytes [i * RGB24Bits + 2] = pixels [i * BGR32Bits];  	// B  }  
Magic Number,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,ConvertBGR32toRGB24,The following statement contains a magic number: bytes [i * RGB24Bits] = pixels [i * BGR32Bits + 2];  
Magic Number,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,ConvertBGR32toRGB24,The following statement contains a magic number: bytes [i * RGB24Bits + 2] = pixels [i * BGR32Bits];  
Magic Number,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,CheckFacePosition,The following statement contains a magic number: try {  	// 画像の切り取り  	var snipImage = SnipFaceImage (openCVGrayImage' headPosition' snipWidth' snipHeight);  	if (snipImage != null) {  		CvSeq<CvAvgComp> faces = Cv.HaarDetectObjects (snipImage' cascade' storage);  		// 顔を検出した場合  		if (faces.Total > 0) {  			reRect.X = faces [0].Value.Rect.X + (headPosition.X - snipWidth / 2);  			reRect.Y = faces [0].Value.Rect.Y + (headPosition.Y - snipHeight / 2);  			reRect.Width = faces [0].Value.Rect.Width;  			reRect.Height = faces [0].Value.Rect.Height;  		}  	}  } catch (Exception) {  }  
Magic Number,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,CheckFacePosition,The following statement contains a magic number: try {  	// 画像の切り取り  	var snipImage = SnipFaceImage (openCVGrayImage' headPosition' snipWidth' snipHeight);  	if (snipImage != null) {  		CvSeq<CvAvgComp> faces = Cv.HaarDetectObjects (snipImage' cascade' storage);  		// 顔を検出した場合  		if (faces.Total > 0) {  			reRect.X = faces [0].Value.Rect.X + (headPosition.X - snipWidth / 2);  			reRect.Y = faces [0].Value.Rect.Y + (headPosition.Y - snipHeight / 2);  			reRect.Width = faces [0].Value.Rect.Width;  			reRect.Height = faces [0].Value.Rect.Height;  		}  	}  } catch (Exception) {  }  
Magic Number,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,CheckFacePosition,The following statement contains a magic number: if (snipImage != null) {  	CvSeq<CvAvgComp> faces = Cv.HaarDetectObjects (snipImage' cascade' storage);  	// 顔を検出した場合  	if (faces.Total > 0) {  		reRect.X = faces [0].Value.Rect.X + (headPosition.X - snipWidth / 2);  		reRect.Y = faces [0].Value.Rect.Y + (headPosition.Y - snipHeight / 2);  		reRect.Width = faces [0].Value.Rect.Width;  		reRect.Height = faces [0].Value.Rect.Height;  	}  }  
Magic Number,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,CheckFacePosition,The following statement contains a magic number: if (snipImage != null) {  	CvSeq<CvAvgComp> faces = Cv.HaarDetectObjects (snipImage' cascade' storage);  	// 顔を検出した場合  	if (faces.Total > 0) {  		reRect.X = faces [0].Value.Rect.X + (headPosition.X - snipWidth / 2);  		reRect.Y = faces [0].Value.Rect.Y + (headPosition.Y - snipHeight / 2);  		reRect.Width = faces [0].Value.Rect.Width;  		reRect.Height = faces [0].Value.Rect.Height;  	}  }  
Magic Number,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,CheckFacePosition,The following statement contains a magic number: if (faces.Total > 0) {  	reRect.X = faces [0].Value.Rect.X + (headPosition.X - snipWidth / 2);  	reRect.Y = faces [0].Value.Rect.Y + (headPosition.Y - snipHeight / 2);  	reRect.Width = faces [0].Value.Rect.Width;  	reRect.Height = faces [0].Value.Rect.Height;  }  
Magic Number,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,CheckFacePosition,The following statement contains a magic number: if (faces.Total > 0) {  	reRect.X = faces [0].Value.Rect.X + (headPosition.X - snipWidth / 2);  	reRect.Y = faces [0].Value.Rect.Y + (headPosition.Y - snipHeight / 2);  	reRect.Width = faces [0].Value.Rect.Width;  	reRect.Height = faces [0].Value.Rect.Height;  }  
Magic Number,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,CheckFacePosition,The following statement contains a magic number: reRect.X = faces [0].Value.Rect.X + (headPosition.X - snipWidth / 2);  
Magic Number,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,CheckFacePosition,The following statement contains a magic number: reRect.Y = faces [0].Value.Rect.Y + (headPosition.Y - snipHeight / 2);  
Magic Number,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,SnipFaceImage,The following statement contains a magic number: if (centerPosition.X - snipWidth / 2 < 0 || centerPosition.Y - snipHeight / 2 < 0) {  	return null;  } else {  	faceX = centerPosition.X - snipWidth / 2;  	faceY = centerPosition.Y - snipHeight / 2;  }  
Magic Number,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,SnipFaceImage,The following statement contains a magic number: if (centerPosition.X - snipWidth / 2 < 0 || centerPosition.Y - snipHeight / 2 < 0) {  	return null;  } else {  	faceX = centerPosition.X - snipWidth / 2;  	faceY = centerPosition.Y - snipHeight / 2;  }  
Magic Number,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,SnipFaceImage,The following statement contains a magic number: if (centerPosition.X - snipWidth / 2 < 0 || centerPosition.Y - snipHeight / 2 < 0) {  	return null;  } else {  	faceX = centerPosition.X - snipWidth / 2;  	faceY = centerPosition.Y - snipHeight / 2;  }  
Magic Number,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,SnipFaceImage,The following statement contains a magic number: if (centerPosition.X - snipWidth / 2 < 0 || centerPosition.Y - snipHeight / 2 < 0) {  	return null;  } else {  	faceX = centerPosition.X - snipWidth / 2;  	faceY = centerPosition.Y - snipHeight / 2;  }  
Magic Number,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,SnipFaceImage,The following statement contains a magic number: faceX = centerPosition.X - snipWidth / 2;  
Magic Number,FaceMask,MainWindow,F:\newReposMay17\geis_KinectSDKBook4CS\2_apply\FaceMask\MainWindow.xaml.cs,SnipFaceImage,The following statement contains a magic number: faceY = centerPosition.Y - snipHeight / 2;  
