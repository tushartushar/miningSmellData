Implementation smell,Namespace,Class,File,Method,Description
Magic Number,KinectMouse,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\KinectMouse\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: try {          KinectSensor kinect = sender as KinectSensor;            using ( ColorImageFrame colorFrame = e.OpenColorImageFrame() ) {            if ( colorFrame != null ) {              byte[] colorPixel = new byte[colorFrame.PixelDataLength];              colorFrame.CopyPixelDataTo( colorPixel );              imageRgb.Source = BitmapSource.Create( colorFrame.Width' colorFrame.Height' 96' 96'                  PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel );            }          }            using ( SkeletonFrame skeletonFrame = e.OpenSkeletonFrame() ) {            if ( skeletonFrame != null ) {              // トラッキングされているスケルトンのジョイントを描画する              Skeleton skeleton = skeletonFrame.GetFirstTrackedSkeleton();                            if ( (skeleton != null) && (skeleton.TrackingState == SkeletonTrackingState.Tracked) ) {                Joint hand = skeleton.Joints[JointType.HandRight];                if ( hand.TrackingState == JointTrackingState.Tracked ) {                  ImageSource source = imageRgb.Source;                  DrawingVisual drawingVisual = new DrawingVisual();                                    using ( DrawingContext drawingContext = drawingVisual.RenderOpen() ) {                    //バイト列をビットマップに展開                    //描画可能なビットマップを作る                    drawingContext.DrawImage( imageRgb.Source'                      new Rect( 0' 0' source.Width' source.Height ) );                      // 手の位置に円を描画                    DrawSkeletonPoint( drawingContext' hand );                  }                    // 描画可能なビットマップを作る                  // http://stackoverflow.com/questions/831860/generate-bitmapsource-from-uielement                  RenderTargetBitmap bitmap = new RenderTargetBitmap( (int)source.Width'                    (int)source.Height' 96' 96' PixelFormats.Default );                  bitmap.Render( drawingVisual );                    imageRgb.Source = bitmap;                    // Frame中の手の位置をディスプレイの位置に対応付ける                  ColorImagePoint point = kinect.MapSkeletonPointToColor( hand.Position'        // スケルトン座標 → RGB画像座標                    kinect.ColorStream.Format );                                                                  System.Windows.Forms.Screen screen = System.Windows.Forms.Screen.AllScreens[0];   // メインディスプレイの情報を取得                  point.X = (point.X * screen.Bounds.Width) / kinect.ColorStream.FrameWidth;                  point.Y = (point.Y * screen.Bounds.Height) / kinect.ColorStream.FrameHeight;                    // マウスカーソルの移動                  SendInput.MouseMove( point.X' point.Y' screen );                    // クリック動作                  if ( IsClicked( skeletonFrame' point ) ) {                    SendInput.LeftClick();                  }                }              }            }          }        }        catch ( Exception ex ) {          MessageBox.Show( ex.Message );        }
Magic Number,KinectMouse,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\KinectMouse\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: try {          KinectSensor kinect = sender as KinectSensor;            using ( ColorImageFrame colorFrame = e.OpenColorImageFrame() ) {            if ( colorFrame != null ) {              byte[] colorPixel = new byte[colorFrame.PixelDataLength];              colorFrame.CopyPixelDataTo( colorPixel );              imageRgb.Source = BitmapSource.Create( colorFrame.Width' colorFrame.Height' 96' 96'                  PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel );            }          }            using ( SkeletonFrame skeletonFrame = e.OpenSkeletonFrame() ) {            if ( skeletonFrame != null ) {              // トラッキングされているスケルトンのジョイントを描画する              Skeleton skeleton = skeletonFrame.GetFirstTrackedSkeleton();                            if ( (skeleton != null) && (skeleton.TrackingState == SkeletonTrackingState.Tracked) ) {                Joint hand = skeleton.Joints[JointType.HandRight];                if ( hand.TrackingState == JointTrackingState.Tracked ) {                  ImageSource source = imageRgb.Source;                  DrawingVisual drawingVisual = new DrawingVisual();                                    using ( DrawingContext drawingContext = drawingVisual.RenderOpen() ) {                    //バイト列をビットマップに展開                    //描画可能なビットマップを作る                    drawingContext.DrawImage( imageRgb.Source'                      new Rect( 0' 0' source.Width' source.Height ) );                      // 手の位置に円を描画                    DrawSkeletonPoint( drawingContext' hand );                  }                    // 描画可能なビットマップを作る                  // http://stackoverflow.com/questions/831860/generate-bitmapsource-from-uielement                  RenderTargetBitmap bitmap = new RenderTargetBitmap( (int)source.Width'                    (int)source.Height' 96' 96' PixelFormats.Default );                  bitmap.Render( drawingVisual );                    imageRgb.Source = bitmap;                    // Frame中の手の位置をディスプレイの位置に対応付ける                  ColorImagePoint point = kinect.MapSkeletonPointToColor( hand.Position'        // スケルトン座標 → RGB画像座標                    kinect.ColorStream.Format );                                                                  System.Windows.Forms.Screen screen = System.Windows.Forms.Screen.AllScreens[0];   // メインディスプレイの情報を取得                  point.X = (point.X * screen.Bounds.Width) / kinect.ColorStream.FrameWidth;                  point.Y = (point.Y * screen.Bounds.Height) / kinect.ColorStream.FrameHeight;                    // マウスカーソルの移動                  SendInput.MouseMove( point.X' point.Y' screen );                    // クリック動作                  if ( IsClicked( skeletonFrame' point ) ) {                    SendInput.LeftClick();                  }                }              }            }          }        }        catch ( Exception ex ) {          MessageBox.Show( ex.Message );        }
Magic Number,KinectMouse,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\KinectMouse\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: try {          KinectSensor kinect = sender as KinectSensor;            using ( ColorImageFrame colorFrame = e.OpenColorImageFrame() ) {            if ( colorFrame != null ) {              byte[] colorPixel = new byte[colorFrame.PixelDataLength];              colorFrame.CopyPixelDataTo( colorPixel );              imageRgb.Source = BitmapSource.Create( colorFrame.Width' colorFrame.Height' 96' 96'                  PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel );            }          }            using ( SkeletonFrame skeletonFrame = e.OpenSkeletonFrame() ) {            if ( skeletonFrame != null ) {              // トラッキングされているスケルトンのジョイントを描画する              Skeleton skeleton = skeletonFrame.GetFirstTrackedSkeleton();                            if ( (skeleton != null) && (skeleton.TrackingState == SkeletonTrackingState.Tracked) ) {                Joint hand = skeleton.Joints[JointType.HandRight];                if ( hand.TrackingState == JointTrackingState.Tracked ) {                  ImageSource source = imageRgb.Source;                  DrawingVisual drawingVisual = new DrawingVisual();                                    using ( DrawingContext drawingContext = drawingVisual.RenderOpen() ) {                    //バイト列をビットマップに展開                    //描画可能なビットマップを作る                    drawingContext.DrawImage( imageRgb.Source'                      new Rect( 0' 0' source.Width' source.Height ) );                      // 手の位置に円を描画                    DrawSkeletonPoint( drawingContext' hand );                  }                    // 描画可能なビットマップを作る                  // http://stackoverflow.com/questions/831860/generate-bitmapsource-from-uielement                  RenderTargetBitmap bitmap = new RenderTargetBitmap( (int)source.Width'                    (int)source.Height' 96' 96' PixelFormats.Default );                  bitmap.Render( drawingVisual );                    imageRgb.Source = bitmap;                    // Frame中の手の位置をディスプレイの位置に対応付ける                  ColorImagePoint point = kinect.MapSkeletonPointToColor( hand.Position'        // スケルトン座標 → RGB画像座標                    kinect.ColorStream.Format );                                                                  System.Windows.Forms.Screen screen = System.Windows.Forms.Screen.AllScreens[0];   // メインディスプレイの情報を取得                  point.X = (point.X * screen.Bounds.Width) / kinect.ColorStream.FrameWidth;                  point.Y = (point.Y * screen.Bounds.Height) / kinect.ColorStream.FrameHeight;                    // マウスカーソルの移動                  SendInput.MouseMove( point.X' point.Y' screen );                    // クリック動作                  if ( IsClicked( skeletonFrame' point ) ) {                    SendInput.LeftClick();                  }                }              }            }          }        }        catch ( Exception ex ) {          MessageBox.Show( ex.Message );        }
Magic Number,KinectMouse,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\KinectMouse\MainWindow.xaml.cs,kinect_AllFramesReady,The following statement contains a magic number: try {          KinectSensor kinect = sender as KinectSensor;            using ( ColorImageFrame colorFrame = e.OpenColorImageFrame() ) {            if ( colorFrame != null ) {              byte[] colorPixel = new byte[colorFrame.PixelDataLength];              colorFrame.CopyPixelDataTo( colorPixel );              imageRgb.Source = BitmapSource.Create( colorFrame.Width' colorFrame.Height' 96' 96'                  PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel );            }          }            using ( SkeletonFrame skeletonFrame = e.OpenSkeletonFrame() ) {            if ( skeletonFrame != null ) {              // トラッキングされているスケルトンのジョイントを描画する              Skeleton skeleton = skeletonFrame.GetFirstTrackedSkeleton();                            if ( (skeleton != null) && (skeleton.TrackingState == SkeletonTrackingState.Tracked) ) {                Joint hand = skeleton.Joints[JointType.HandRight];                if ( hand.TrackingState == JointTrackingState.Tracked ) {                  ImageSource source = imageRgb.Source;                  DrawingVisual drawingVisual = new DrawingVisual();                                    using ( DrawingContext drawingContext = drawingVisual.RenderOpen() ) {                    //バイト列をビットマップに展開                    //描画可能なビットマップを作る                    drawingContext.DrawImage( imageRgb.Source'                      new Rect( 0' 0' source.Width' source.Height ) );                      // 手の位置に円を描画                    DrawSkeletonPoint( drawingContext' hand );                  }                    // 描画可能なビットマップを作る                  // http://stackoverflow.com/questions/831860/generate-bitmapsource-from-uielement                  RenderTargetBitmap bitmap = new RenderTargetBitmap( (int)source.Width'                    (int)source.Height' 96' 96' PixelFormats.Default );                  bitmap.Render( drawingVisual );                    imageRgb.Source = bitmap;                    // Frame中の手の位置をディスプレイの位置に対応付ける                  ColorImagePoint point = kinect.MapSkeletonPointToColor( hand.Position'        // スケルトン座標 → RGB画像座標                    kinect.ColorStream.Format );                                                                  System.Windows.Forms.Screen screen = System.Windows.Forms.Screen.AllScreens[0];   // メインディスプレイの情報を取得                  point.X = (point.X * screen.Bounds.Width) / kinect.ColorStream.FrameWidth;                  point.Y = (point.Y * screen.Bounds.Height) / kinect.ColorStream.FrameHeight;                    // マウスカーソルの移動                  SendInput.MouseMove( point.X' point.Y' screen );                    // クリック動作                  if ( IsClicked( skeletonFrame' point ) ) {                    SendInput.LeftClick();                  }                }              }            }          }        }        catch ( Exception ex ) {          MessageBox.Show( ex.Message );        }
Magic Number,KinectMouse,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\KinectMouse\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\MainWindow.xaml"              ((KinectMouse.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.imageRgb = ((System.Windows.Controls.Image)(target));              return;              }
Missing Default,KinectMouse,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\KinectMouse\MainWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\MainWindow.xaml"              ((KinectMouse.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.imageRgb = ((System.Windows.Controls.Image)(target));              return;              }
