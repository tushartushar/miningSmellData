Implementation smell,Namespace,Class,File,Method,Description
Magic Number,KinectSpeechRecognize,Program,C:\repos\geis_KinectSDKBook4CS\2_apply\KinectSpeechRecognize\Program.cs,Main,The following statement contains a magic number: try {          // Kinectが接続されているかどうかを確認する          if ( KinectSensor.KinectSensors.Count == 0 ) {            throw new Exception( "Kinectを接続してください" );          }            // 認識器の一覧を表示し、使用する認識器を取得する          ShowRecognizer();          //RecognizerInfo info = GetRecognizer( "en-US" );          RecognizerInfo info = GetRecognizer( "ja-JP" );          Console.WriteLine( "Using: {0}"' info.Name );            // 認識させる単語を登録する          Choices colors = new Choices();          colors.Add( "red" );          colors.Add( "green" );          colors.Add( "blue" );          colors.Add( "赤" );          colors.Add( "ミドリ" );          colors.Add( "あお" );            // 文法の設定を行う          GrammarBuilder builder = new GrammarBuilder();          builder.Culture = info.Culture;          builder.Append( colors );          Grammar grammar = new Grammar( builder );            // 認識エンジンの設定と、単語が認識されたときの通知先の登録を行う          SpeechRecognitionEngine engine = new SpeechRecognitionEngine( info.Id );          engine.LoadGrammar( grammar );          engine.SpeechRecognized +=            new EventHandler<SpeechRecognizedEventArgs>( engine_SpeechRecognized );            // Kinectの動作を開始する          KinectSensor kinect = KinectSensor.KinectSensors[0];          kinect.Start();            // 音声のインタフェースを取得し、動作を開始する          KinectAudioSource audio = kinect.AudioSource;          using ( Stream s = audio.Start() ) {            // 認識エンジンに音声ストリームを設定する            engine.SetInputToAudioStream( s' new SpeechAudioFormatInfo(                                            EncodingFormat.Pcm' 16000' 16' 1'                                            32000' 2' null ) );              Console.WriteLine( "Recognizing. Press ENTER to stop" );              // 非同期で、音声認識を開始する            engine.RecognizeAsync( RecognizeMode.Multiple );            Console.ReadLine();            Console.WriteLine( "Stopping recognizer ..." );              // 音声認識を停止する            engine.RecognizeAsyncStop();          }        }        catch ( Exception ex ) {          Console.WriteLine( ex.Message );        }
Magic Number,KinectSpeechRecognize,Program,C:\repos\geis_KinectSDKBook4CS\2_apply\KinectSpeechRecognize\Program.cs,Main,The following statement contains a magic number: try {          // Kinectが接続されているかどうかを確認する          if ( KinectSensor.KinectSensors.Count == 0 ) {            throw new Exception( "Kinectを接続してください" );          }            // 認識器の一覧を表示し、使用する認識器を取得する          ShowRecognizer();          //RecognizerInfo info = GetRecognizer( "en-US" );          RecognizerInfo info = GetRecognizer( "ja-JP" );          Console.WriteLine( "Using: {0}"' info.Name );            // 認識させる単語を登録する          Choices colors = new Choices();          colors.Add( "red" );          colors.Add( "green" );          colors.Add( "blue" );          colors.Add( "赤" );          colors.Add( "ミドリ" );          colors.Add( "あお" );            // 文法の設定を行う          GrammarBuilder builder = new GrammarBuilder();          builder.Culture = info.Culture;          builder.Append( colors );          Grammar grammar = new Grammar( builder );            // 認識エンジンの設定と、単語が認識されたときの通知先の登録を行う          SpeechRecognitionEngine engine = new SpeechRecognitionEngine( info.Id );          engine.LoadGrammar( grammar );          engine.SpeechRecognized +=            new EventHandler<SpeechRecognizedEventArgs>( engine_SpeechRecognized );            // Kinectの動作を開始する          KinectSensor kinect = KinectSensor.KinectSensors[0];          kinect.Start();            // 音声のインタフェースを取得し、動作を開始する          KinectAudioSource audio = kinect.AudioSource;          using ( Stream s = audio.Start() ) {            // 認識エンジンに音声ストリームを設定する            engine.SetInputToAudioStream( s' new SpeechAudioFormatInfo(                                            EncodingFormat.Pcm' 16000' 16' 1'                                            32000' 2' null ) );              Console.WriteLine( "Recognizing. Press ENTER to stop" );              // 非同期で、音声認識を開始する            engine.RecognizeAsync( RecognizeMode.Multiple );            Console.ReadLine();            Console.WriteLine( "Stopping recognizer ..." );              // 音声認識を停止する            engine.RecognizeAsyncStop();          }        }        catch ( Exception ex ) {          Console.WriteLine( ex.Message );        }
Magic Number,KinectSpeechRecognize,Program,C:\repos\geis_KinectSDKBook4CS\2_apply\KinectSpeechRecognize\Program.cs,Main,The following statement contains a magic number: try {          // Kinectが接続されているかどうかを確認する          if ( KinectSensor.KinectSensors.Count == 0 ) {            throw new Exception( "Kinectを接続してください" );          }            // 認識器の一覧を表示し、使用する認識器を取得する          ShowRecognizer();          //RecognizerInfo info = GetRecognizer( "en-US" );          RecognizerInfo info = GetRecognizer( "ja-JP" );          Console.WriteLine( "Using: {0}"' info.Name );            // 認識させる単語を登録する          Choices colors = new Choices();          colors.Add( "red" );          colors.Add( "green" );          colors.Add( "blue" );          colors.Add( "赤" );          colors.Add( "ミドリ" );          colors.Add( "あお" );            // 文法の設定を行う          GrammarBuilder builder = new GrammarBuilder();          builder.Culture = info.Culture;          builder.Append( colors );          Grammar grammar = new Grammar( builder );            // 認識エンジンの設定と、単語が認識されたときの通知先の登録を行う          SpeechRecognitionEngine engine = new SpeechRecognitionEngine( info.Id );          engine.LoadGrammar( grammar );          engine.SpeechRecognized +=            new EventHandler<SpeechRecognizedEventArgs>( engine_SpeechRecognized );            // Kinectの動作を開始する          KinectSensor kinect = KinectSensor.KinectSensors[0];          kinect.Start();            // 音声のインタフェースを取得し、動作を開始する          KinectAudioSource audio = kinect.AudioSource;          using ( Stream s = audio.Start() ) {            // 認識エンジンに音声ストリームを設定する            engine.SetInputToAudioStream( s' new SpeechAudioFormatInfo(                                            EncodingFormat.Pcm' 16000' 16' 1'                                            32000' 2' null ) );              Console.WriteLine( "Recognizing. Press ENTER to stop" );              // 非同期で、音声認識を開始する            engine.RecognizeAsync( RecognizeMode.Multiple );            Console.ReadLine();            Console.WriteLine( "Stopping recognizer ..." );              // 音声認識を停止する            engine.RecognizeAsyncStop();          }        }        catch ( Exception ex ) {          Console.WriteLine( ex.Message );        }
Magic Number,KinectSpeechRecognize,Program,C:\repos\geis_KinectSDKBook4CS\2_apply\KinectSpeechRecognize\Program.cs,Main,The following statement contains a magic number: try {          // Kinectが接続されているかどうかを確認する          if ( KinectSensor.KinectSensors.Count == 0 ) {            throw new Exception( "Kinectを接続してください" );          }            // 認識器の一覧を表示し、使用する認識器を取得する          ShowRecognizer();          //RecognizerInfo info = GetRecognizer( "en-US" );          RecognizerInfo info = GetRecognizer( "ja-JP" );          Console.WriteLine( "Using: {0}"' info.Name );            // 認識させる単語を登録する          Choices colors = new Choices();          colors.Add( "red" );          colors.Add( "green" );          colors.Add( "blue" );          colors.Add( "赤" );          colors.Add( "ミドリ" );          colors.Add( "あお" );            // 文法の設定を行う          GrammarBuilder builder = new GrammarBuilder();          builder.Culture = info.Culture;          builder.Append( colors );          Grammar grammar = new Grammar( builder );            // 認識エンジンの設定と、単語が認識されたときの通知先の登録を行う          SpeechRecognitionEngine engine = new SpeechRecognitionEngine( info.Id );          engine.LoadGrammar( grammar );          engine.SpeechRecognized +=            new EventHandler<SpeechRecognizedEventArgs>( engine_SpeechRecognized );            // Kinectの動作を開始する          KinectSensor kinect = KinectSensor.KinectSensors[0];          kinect.Start();            // 音声のインタフェースを取得し、動作を開始する          KinectAudioSource audio = kinect.AudioSource;          using ( Stream s = audio.Start() ) {            // 認識エンジンに音声ストリームを設定する            engine.SetInputToAudioStream( s' new SpeechAudioFormatInfo(                                            EncodingFormat.Pcm' 16000' 16' 1'                                            32000' 2' null ) );              Console.WriteLine( "Recognizing. Press ENTER to stop" );              // 非同期で、音声認識を開始する            engine.RecognizeAsync( RecognizeMode.Multiple );            Console.ReadLine();            Console.WriteLine( "Stopping recognizer ..." );              // 音声認識を停止する            engine.RecognizeAsyncStop();          }        }        catch ( Exception ex ) {          Console.WriteLine( ex.Message );        }
