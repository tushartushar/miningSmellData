Implementation smell,Namespace,Class,File,Method,Description
Magic Number,VoiceUserRecognize,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\VoiceUserRecognize\MainWindow.xaml.cs,AudioSource_SoundSourceAngleChanged,The following statement contains a magic number: if ( e.ConfidenceLevel > 0.5 ) {          const int Range = 5;  // 誤差範囲          soundSourceAngle = (int)e.Angle;            for ( int i = 1; i < playerAngles.Length; i++ ) {            // 無効なプレイヤー            if ( playerAngles[i] == -1 ) {              continue;            }              // 音源と頭の角度が一定範囲内にあれば、その人の音とみなす            if ( ((soundSourceAngle - Range) <= playerAngles[i]) &&                  (playerAngles[i] <= (soundSourceAngle + Range)) ) {              enablePlayer[i] = true;            }              // ユーザーの位置を表示する            labelSoundSource.Content = string.Format( "音源方向:{0}' プレイヤー方向:{1}"'              soundSourceAngle.ToString()' playerAngles[i] );          }        }
Magic Number,VoiceUserRecognize,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\VoiceUserRecognize\MainWindow.xaml.cs,AudioSource_SoundSourceAngleChanged,The following statement contains a magic number: if ( e.ConfidenceLevel > 0.5 ) {          const int Range = 5;  // 誤差範囲          soundSourceAngle = (int)e.Angle;            for ( int i = 1; i < playerAngles.Length; i++ ) {            // 無効なプレイヤー            if ( playerAngles[i] == -1 ) {              continue;            }              // 音源と頭の角度が一定範囲内にあれば、その人の音とみなす            if ( ((soundSourceAngle - Range) <= playerAngles[i]) &&                  (playerAngles[i] <= (soundSourceAngle + Range)) ) {              enablePlayer[i] = true;            }              // ユーザーの位置を表示する            labelSoundSource.Content = string.Format( "音源方向:{0}' プレイヤー方向:{1}"'              soundSourceAngle.ToString()' playerAngles[i] );          }        }
Magic Number,VoiceUserRecognize,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\VoiceUserRecognize\MainWindow.xaml.cs,GetPlayerAngle,The following statement contains a magic number: var a = Math.Abs( joint.Position.X * 100 );
Magic Number,VoiceUserRecognize,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\VoiceUserRecognize\MainWindow.xaml.cs,GetPlayerAngle,The following statement contains a magic number: var b = Math.Abs( joint.Position.Z * 100 );
Magic Number,VoiceUserRecognize,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\VoiceUserRecognize\MainWindow.xaml.cs,GetPlayerAngle,The following statement contains a magic number: var c = Math.Sqrt( Math.Pow( a' 2 ) + Math.Pow( b' 2 ) );
Magic Number,VoiceUserRecognize,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\VoiceUserRecognize\MainWindow.xaml.cs,GetPlayerAngle,The following statement contains a magic number: var c = Math.Sqrt( Math.Pow( a' 2 ) + Math.Pow( b' 2 ) );
Magic Number,VoiceUserRecognize,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\VoiceUserRecognize\MainWindow.xaml.cs,GetPlayerAngle,The following statement contains a magic number: int theta = (int)(Math.Acos( a / c ) * 180 / Math.PI);
Magic Number,VoiceUserRecognize,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\VoiceUserRecognize\MainWindow.xaml.cs,GetPlayerAngle,The following statement contains a magic number: theta = (int)Math.Abs( theta - 90 );
Magic Number,VoiceUserRecognize,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\VoiceUserRecognize\MainWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            // プレイヤーがいるピクセルの場合          if ( player != 0 ) {            // 有効なプレーヤーに色付けする            if ( enablePlayer[player] ) {              depthColor[colorIndex] = playerColor[player].B;              depthColor[colorIndex + 1] = playerColor[player].G;              depthColor[colorIndex + 2] = playerColor[player].R;            }          }        }
Magic Number,VoiceUserRecognize,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\VoiceUserRecognize\MainWindow.xaml.cs,kinect_ColorFrameReady,The following statement contains a magic number: try {          // RGBカメラのフレームデータを取得する          using ( ColorImageFrame colorFrame = e.OpenColorImageFrame() ) {            if ( colorFrame != null ) {              // RGBカメラのピクセルデータを取得する              byte[] colorPixel = new byte[colorFrame.PixelDataLength];              colorFrame.CopyPixelDataTo( colorPixel );                // ピクセルデータをビットマップに変換する              imageRgb.Source = BitmapSource.Create( colorFrame.Width' colorFrame.Height' 96' 96'                  PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel );            }          }        }        catch ( Exception ex ) {          MessageBox.Show( ex.Message );        }
Magic Number,VoiceUserRecognize,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\VoiceUserRecognize\MainWindow.xaml.cs,kinect_ColorFrameReady,The following statement contains a magic number: try {          // RGBカメラのフレームデータを取得する          using ( ColorImageFrame colorFrame = e.OpenColorImageFrame() ) {            if ( colorFrame != null ) {              // RGBカメラのピクセルデータを取得する              byte[] colorPixel = new byte[colorFrame.PixelDataLength];              colorFrame.CopyPixelDataTo( colorPixel );                // ピクセルデータをビットマップに変換する              imageRgb.Source = BitmapSource.Create( colorFrame.Width' colorFrame.Height' 96' 96'                  PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel );            }          }        }        catch ( Exception ex ) {          MessageBox.Show( ex.Message );        }
Magic Number,VoiceUserRecognize,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\VoiceUserRecognize\MainWindow.xaml.cs,kinect_DepthFrameReady,The following statement contains a magic number: try {          // センサーのインスタンスを取得する          KinectSensor kinect = sender as KinectSensor;          if ( kinect == null ) {            return;          }            // 距離カメラのフレームデータを取得する          using ( DepthImageFrame depthFrame = e.OpenDepthImageFrame() ) {            if ( depthFrame != null ) {              // 距離データを画像化して表示              imageDepth.Source = BitmapSource.Create( depthFrame.Width' depthFrame.Height' 96' 96'                  PixelFormats.Bgr32' null' ConvertDepthColor( kinect' depthFrame )'                  depthFrame.Width * Bgr32BytesPerPixel );            }          }        }        catch ( Exception ex ) {          MessageBox.Show( ex.Message );        }
Magic Number,VoiceUserRecognize,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\VoiceUserRecognize\MainWindow.xaml.cs,kinect_DepthFrameReady,The following statement contains a magic number: try {          // センサーのインスタンスを取得する          KinectSensor kinect = sender as KinectSensor;          if ( kinect == null ) {            return;          }            // 距離カメラのフレームデータを取得する          using ( DepthImageFrame depthFrame = e.OpenDepthImageFrame() ) {            if ( depthFrame != null ) {              // 距離データを画像化して表示              imageDepth.Source = BitmapSource.Create( depthFrame.Width' depthFrame.Height' 96' 96'                  PixelFormats.Bgr32' null' ConvertDepthColor( kinect' depthFrame )'                  depthFrame.Width * Bgr32BytesPerPixel );            }          }        }        catch ( Exception ex ) {          MessageBox.Show( ex.Message );        }
Magic Number,VoiceUserRecognize,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\VoiceUserRecognize\MainWindow.xaml.cs,DrawEllipse,The following statement contains a magic number: const int R = 5;
Magic Number,VoiceUserRecognize,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\VoiceUserRecognize\MainWindow.xaml.cs,DrawEllipse,The following statement contains a magic number: canvasSkeleton.Children.Add( new Ellipse()        {          Fill = new SolidColorBrush( Colors.Red )'          Margin = new Thickness( point.X - R' point.Y - R' 0' 0 )'          Width = R * 2'          Height = R * 2'        } );
Magic Number,VoiceUserRecognize,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\VoiceUserRecognize\MainWindow.xaml.cs,DrawEllipse,The following statement contains a magic number: canvasSkeleton.Children.Add( new Ellipse()        {          Fill = new SolidColorBrush( Colors.Red )'          Margin = new Thickness( point.X - R' point.Y - R' 0' 0 )'          Width = R * 2'          Height = R * 2'        } );
Magic Number,VoiceUserRecognize,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\VoiceUserRecognize\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\MainWindow.xaml"              ((VoiceUserRecognize.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.imageRgb = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.imageDepth = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.canvasSkeleton = ((System.Windows.Controls.Canvas)(target));              return;              case 5:              this.labelSoundSource = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,VoiceUserRecognize,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\VoiceUserRecognize\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\MainWindow.xaml"              ((VoiceUserRecognize.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.imageRgb = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.imageDepth = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.canvasSkeleton = ((System.Windows.Controls.Canvas)(target));              return;              case 5:              this.labelSoundSource = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,VoiceUserRecognize,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\VoiceUserRecognize\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\MainWindow.xaml"              ((VoiceUserRecognize.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.imageRgb = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.imageDepth = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.canvasSkeleton = ((System.Windows.Controls.Canvas)(target));              return;              case 5:              this.labelSoundSource = ((System.Windows.Controls.Label)(target));              return;              }
Magic Number,VoiceUserRecognize,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\VoiceUserRecognize\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\MainWindow.xaml"              ((VoiceUserRecognize.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.imageRgb = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.imageDepth = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.canvasSkeleton = ((System.Windows.Controls.Canvas)(target));              return;              case 5:              this.labelSoundSource = ((System.Windows.Controls.Label)(target));              return;              }
Missing Default,VoiceUserRecognize,MainWindow,C:\repos\geis_KinectSDKBook4CS\2_apply\VoiceUserRecognize\MainWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 4 "..\..\..\MainWindow.xaml"              ((VoiceUserRecognize.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.imageRgb = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.imageDepth = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.canvasSkeleton = ((System.Windows.Controls.Canvas)(target));              return;              case 5:              this.labelSoundSource = ((System.Windows.Controls.Label)(target));              return;              }
