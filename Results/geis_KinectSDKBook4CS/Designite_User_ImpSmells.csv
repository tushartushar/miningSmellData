Implementation smell,Namespace,Class,File,Method,Description
Long Statement,User,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\User\MainWindow.xaml.cs,Connect,The length of the statement  "            this.comboBoxRange.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBoxRange_SelectionChanged); " is 133.
Magic Number,User,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\User\MainWindow.xaml.cs,kinect_ColorFrameReady,The following statement contains a magic number: try {          // RGBカメラのフレームデータを取得する          using ( ColorImageFrame colorFrame = e.OpenColorImageFrame() ) {            if ( colorFrame != null ) {              // RGBカメラのピクセルデータを取得する              byte[] colorPixel = new byte[colorFrame.PixelDataLength];              colorFrame.CopyPixelDataTo( colorPixel );                // ピクセルデータをビットマップに変換する              imageRgb.Source = BitmapSource.Create( colorFrame.Width' colorFrame.Height' 96' 96'                  PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel );            }          }        }        catch ( Exception ex ) {          MessageBox.Show( ex.Message );        }
Magic Number,User,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\User\MainWindow.xaml.cs,kinect_ColorFrameReady,The following statement contains a magic number: try {          // RGBカメラのフレームデータを取得する          using ( ColorImageFrame colorFrame = e.OpenColorImageFrame() ) {            if ( colorFrame != null ) {              // RGBカメラのピクセルデータを取得する              byte[] colorPixel = new byte[colorFrame.PixelDataLength];              colorFrame.CopyPixelDataTo( colorPixel );                // ピクセルデータをビットマップに変換する              imageRgb.Source = BitmapSource.Create( colorFrame.Width' colorFrame.Height' 96' 96'                  PixelFormats.Bgr32' null' colorPixel' colorFrame.Width * colorFrame.BytesPerPixel );            }          }        }        catch ( Exception ex ) {          MessageBox.Show( ex.Message );        }
Magic Number,User,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\User\MainWindow.xaml.cs,kinect_DepthFrameReady,The following statement contains a magic number: try {          // センサーのインスタンスを取得する          KinectSensor kinect = sender as KinectSensor;          if ( kinect == null ) {            return;          }            // 距離カメラのフレームデータを取得する          using ( DepthImageFrame depthFrame = e.OpenDepthImageFrame() ) {            if ( depthFrame != null ) {              // 距離データを画像化して表示              imageDepth.Source = BitmapSource.Create( depthFrame.Width' depthFrame.Height' 96' 96'                  PixelFormats.Bgr32' null' ConvertDepthColor( kinect' depthFrame )'                  depthFrame.Width * Bgr32BytesPerPixel );            }          }        }        catch ( Exception ex ) {          MessageBox.Show( ex.Message );        }
Magic Number,User,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\User\MainWindow.xaml.cs,kinect_DepthFrameReady,The following statement contains a magic number: try {          // センサーのインスタンスを取得する          KinectSensor kinect = sender as KinectSensor;          if ( kinect == null ) {            return;          }            // 距離カメラのフレームデータを取得する          using ( DepthImageFrame depthFrame = e.OpenDepthImageFrame() ) {            if ( depthFrame != null ) {              // 距離データを画像化して表示              imageDepth.Source = BitmapSource.Create( depthFrame.Width' depthFrame.Height' 96' 96'                  PixelFormats.Bgr32' null' ConvertDepthColor( kinect' depthFrame )'                  depthFrame.Width * Bgr32BytesPerPixel );            }          }        }        catch ( Exception ex ) {          MessageBox.Show( ex.Message );        }
Magic Number,User,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\User\MainWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            // プレイヤーがいるピクセルの場合          if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          // プレイヤーではないピクセルの場合          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,User,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\User\MainWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            // プレイヤーがいるピクセルの場合          if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          // プレイヤーではないピクセルの場合          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,User,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\User\MainWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            // プレイヤーがいるピクセルの場合          if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          // プレイヤーではないピクセルの場合          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,User,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\User\MainWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            // プレイヤーがいるピクセルの場合          if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          // プレイヤーではないピクセルの場合          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,User,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\User\MainWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            // プレイヤーがいるピクセルの場合          if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          // プレイヤーではないピクセルの場合          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,User,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\User\MainWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            // プレイヤーがいるピクセルの場合          if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          // プレイヤーではないピクセルの場合          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,User,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\User\MainWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            // プレイヤーがいるピクセルの場合          if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          // プレイヤーではないピクセルの場合          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,User,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\User\MainWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            // プレイヤーがいるピクセルの場合          if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          // プレイヤーではないピクセルの場合          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,User,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\User\MainWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            // プレイヤーがいるピクセルの場合          if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          // プレイヤーではないピクセルの場合          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,User,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\User\MainWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            // プレイヤーがいるピクセルの場合          if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          // プレイヤーではないピクセルの場合          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,User,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\User\MainWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            // プレイヤーがいるピクセルの場合          if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          // プレイヤーではないピクセルの場合          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,User,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\User\MainWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            // プレイヤーがいるピクセルの場合          if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          // プレイヤーではないピクセルの場合          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,User,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\User\MainWindow.xaml.cs,ConvertDepthColor,The following statement contains a magic number: for ( int index = 0; index < depthPixel.Length; index++ ) {          // 距離カメラのデータから、プレイヤーIDと距離を取得する          int player = depthPixel[index] & DepthImageFrame.PlayerIndexBitmask;          int distance = depthPixel[index] >> DepthImageFrame.PlayerIndexBitmaskWidth;            // 変換した結果が、フレームサイズを超えることがあるため、小さいほうを使う          int x = Math.Min( colorPoint[index].X' colorStream.FrameWidth - 1 );          int y = Math.Min( colorPoint[index].Y' colorStream.FrameHeight - 1 );          int colorIndex = ((y * depthFrame.Width) + x) * Bgr32BytesPerPixel;            // プレイヤーがいるピクセルの場合          if ( player != 0 ) {            depthColor[colorIndex] = 255;            depthColor[colorIndex + 1] = 255;            depthColor[colorIndex + 2] = 255;          }          // プレイヤーではないピクセルの場合          else {            // サポート外 0-40cm            if ( distance == depthStream.UnknownDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 255;            }            // 近すぎ 40cm-80cm(default mode)            else if ( distance == depthStream.TooNearDepth ) {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 0;            }            // 遠すぎ 3m(Near)'4m(Default)-8m            else if ( distance == depthStream.TooFarDepth ) {              depthColor[colorIndex] = 255;              depthColor[colorIndex + 1] = 0;              depthColor[colorIndex + 2] = 0;            }            // 有効な距離データ            else {              depthColor[colorIndex] = 0;              depthColor[colorIndex + 1] = 255;              depthColor[colorIndex + 2] = 255;            }          }        }
Magic Number,User,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\User\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 5 "..\..\..\MainWindow.xaml"              ((User.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.imageRgb = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.imageDepth = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.comboBoxRange = ((System.Windows.Controls.ComboBox)(target));                            #line 9 "..\..\..\MainWindow.xaml"              this.comboBoxRange.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBoxRange_SelectionChanged);                            #line default              #line hidden              return;              }
Magic Number,User,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\User\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 5 "..\..\..\MainWindow.xaml"              ((User.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.imageRgb = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.imageDepth = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.comboBoxRange = ((System.Windows.Controls.ComboBox)(target));                            #line 9 "..\..\..\MainWindow.xaml"              this.comboBoxRange.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBoxRange_SelectionChanged);                            #line default              #line hidden              return;              }
Magic Number,User,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\User\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 5 "..\..\..\MainWindow.xaml"              ((User.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.imageRgb = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.imageDepth = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.comboBoxRange = ((System.Windows.Controls.ComboBox)(target));                            #line 9 "..\..\..\MainWindow.xaml"              this.comboBoxRange.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBoxRange_SelectionChanged);                            #line default              #line hidden              return;              }
Missing Default,User,MainWindow,C:\repos\geis_KinectSDKBook4CS\1_basic\User\MainWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 5 "..\..\..\MainWindow.xaml"              ((User.MainWindow)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.Window_Closing);                            #line default              #line hidden              return;              case 2:              this.imageRgb = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.imageDepth = ((System.Windows.Controls.Image)(target));              return;              case 4:              this.comboBoxRange = ((System.Windows.Controls.ComboBox)(target));                            #line 9 "..\..\..\MainWindow.xaml"              this.comboBoxRange.SelectionChanged += new System.Windows.Controls.SelectionChangedEventHandler(this.comboBoxRange_SelectionChanged);                            #line default              #line hidden              return;              }
