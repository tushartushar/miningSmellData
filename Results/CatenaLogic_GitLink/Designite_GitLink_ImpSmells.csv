Implementation smell,Namespace,Class,File,Method,Description
Complex Method,GitLink.Pdb,PdbFile,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Pdb\PdbFile.cs,InternalInfo,Cyclomatic complexity of the method is 12
Complex Method,GitLink.Pdb,SrcSrv,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Pdb\SrcSrv.cs,CreateVsts,Cyclomatic complexity of the method is 9
Long Parameter List,GitLink.Logging,OutputLogListener,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Logging\OutputLogListener.cs,FormatLogEvent,The method has 6 parameters.
Long Statement,GitLink,RepositoryExtensions,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Extensions\RepositoryExtensions.cs,GetNormalizedPath,The length of the statement  "		TreeEntry entry = tree [segment] ?? tree.FirstOrDefault (te => string.Equals (te.Name' segment' StringComparison.OrdinalIgnoreCase)); " is 133.
Long Statement,GitLink,RepositoryExtensions,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Extensions\RepositoryExtensions.cs,GetRelativePath,The length of the statement  "	target = string.Join (Path.DirectorySeparatorChar.ToString ()' target.Split (PathSeparators' StringSplitOptions.RemoveEmptyEntries)); " is 133.
Long Statement,GitLink,PdbStrHelper,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Helpers\PdbStrHelper.cs,Execute,The length of the statement  "		throw Log.ErrorAndCreateException<GitLinkException> ("PdbStr exited with unexpected error code '{0}'"' processExitCode); " is 120.
Long Statement,GitLink,Program,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Program.cs,Main,The length of the statement  "		syntax.DefineOption ("m|method"' ref method' v => (LinkMethod)Enum.Parse (typeof(LinkMethod)' v' true)' "The method for SRCSRV to retrieve source code. One of <" + string.Join ("|"' Enum.GetNames (typeof(LinkMethod))) + ">. Default is " + method + "."); " is 253.
Long Statement,GitLink.Pdb,PdbFile,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Pdb\PdbFile.cs,CheckPdb,The length of the statement  "		throw Log.ErrorAndCreateException<GitLinkException> ("pdb length {0} bytes per page <> 0' {1}' {2}"' length' _pageByteCount' PageCount); " is 136.
Long Statement,GitLink.Pdb,PdbFile,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Pdb\PdbFile.cs,CheckPdb,The length of the statement  "		throw Log.ErrorAndCreateException<GitLinkException> ("pdb length does not match page count' length: {0}' bytes per page: {1}' page count: {2}"' length' _pageByteCount' PageCount); " is 179.
Long Statement,GitLink.Pdb,PdbFile,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Pdb\PdbFile.cs,ReadPage,The length of the statement  "		throw Log.ErrorAndCreateException<GitLinkException> ("tried reading {0} bytes at offset {1}' but only read {2}"' count' offset' read); " is 134.
Long Statement,GitLink.Pdb,PdbFile,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Pdb\PdbFile.cs,InternalInfo,The length of the statement  "		throw Log.ErrorAndCreateException<GitLinkException> ("Expected at least 2 streams inside the pdb root' but only found '{0}'' cannot read pdb info"' root.Streams.Count); " is 168.
Long Statement,GitLink.Pdb,SrcSrv,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Pdb\SrcSrv.cs,Create,The length of the statement  "				sw.WriteLine ("SRCSRVCMD=powershell invoke-command -scriptblock {$webClient = New-Object System.Net.WebClient; $webClient.UseDefaultCredentials = $true; $webClient.DownloadFile('%RAWURL%'' '%TRGFILE%');}"); " is 206.
Long Statement,GitLink.Pdb,SrcSrv,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Pdb\SrcSrv.cs,CreateVsts,The length of the statement  "			sw.WriteLine ("TFS_EXTRACT_CMD=tf.exe git view /collection:%fnvar%(%var2%) /teamproject:\"%fnvar%(%var3%)\" /repository:\"%fnvar%(%var4%)\" /commitId:%fnvar%(%var5%) /path:\"%var7%\" /output:%SRCSRVTRG% %fnvar%(%var8%)"); " is 221.
Long Statement,GitLink.Pdb,SrcSrv,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Pdb\SrcSrv.cs,CreateVsts,The length of the statement  "				sw.WriteLine ("{0}*TFS_COLLECTION*TFS_TEAM_PROJECT*TFS_REPO*TFS_COMMIT*TFS_SHORT_COMMIT*{1}*TFS_APPLY_FILTERS"' tuple.Item1' tuple.Item2); " is 138.
Long Statement,GitLink.Providers,CustomUrlProvider,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Providers\CustomUrlProvider.cs,Initialize,The length of the statement  "	if (string.IsNullOrEmpty (url) || !HostingUrlPattern.IsMatch (url) || (!url.Contains (FileNamePlaceHolder) && !url.Contains (RevisionPlaceHolder))) { " is 149.
Long Statement,GitLink.Providers,ProviderManager,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Providers\ProviderManager.cs,GetProvider,The length of the statement  "	var providerTypes = TypeCache.GetTypes (x => typeof(ProviderBase).IsAssignableFromEx (x) && !x.IsAbstract && x != typeof(CustomRawUrlProvider)); " is 144.
Complex Conditional,GitLink.Providers,CustomUrlProvider,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Providers\CustomUrlProvider.cs,Initialize,The conditional expression  "string.IsNullOrEmpty (url) || !HostingUrlPattern.IsMatch (url) || (!url.Contains (FileNamePlaceHolder) && !url.Contains (RevisionPlaceHolder))"  is complex.
Magic Number,GitLink,PdbExtensions,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Extensions\PdbExtensions.cs,FindMissingOrChangedSourceFiles,The following statement contains a magic number: foreach (var checksumInfo in pdbFile.GetFilesAndChecksums ()) {  	string file = checksumInfo.Key;  	byte[] expectedChecksum = checksumInfo.Value;  	HashAlgorithm hasher = expectedChecksum.Length == 16 ? (HashAlgorithm)MD5.Create () : SHA1.Create ();  	byte[] actualChecksum = File.Exists (file) ? HashFile (hasher' file) : null;  	if (!AreEqualBuffers (expectedChecksum' actualChecksum)) {  		yield return file;  	}  }  
Magic Number,GitLink,PdbExtensions,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Extensions\PdbExtensions.cs,GetFilesAndChecksums,The following statement contains a magic number: foreach (var value in values) {  	if (!value.Name.StartsWith (FileIndicator)) {  		continue;  	}  	var num = value.Stream;  	var name = value.Name.Substring (FileIndicator.Length);  	// Get last bytes for checksum (it may be MD5 or SHA1)  	var bytes = pdbFile.ReadStreamBytes (num);  	int hashLength = bytes.Length - 72;  	var checksum = new byte[hashLength];  	Array.Copy (bytes' bytes.Length - hashLength' checksum' 0' hashLength);  	results.Add (name' checksum);  }  
Magic Number,GitLink.Pdb,PdbFile,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Pdb\PdbFile.cs,CheckPdbHeader,The following statement contains a magic number: if (!bytes.SequenceEqual (_br.ReadBytes (32))) {  	throw Log.ErrorAndCreateException<GitLinkException> ("Pdb header didn't match");  }  
Magic Number,GitLink.Pdb,PdbFile,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Pdb\PdbFile.cs,ReadPdbHeader,The following statement contains a magic number: _br.BaseStream.Position += 4;  
Magic Number,GitLink.Pdb,PdbFile,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Pdb\PdbFile.cs,InternalInfo,The following statement contains a magic number: using (var ms = new MemoryStream (ReadStreamBytes (root.Streams [1]))) {  	using (var br = new BinaryReader (ms)) {  		info.Version = br.ReadInt32 ();  		// 0x00 of stream  		info.Signature = br.ReadInt32 ();  		// 0x04  		info.Age = br.ReadInt32 ();  		// 0x08  		info.Guid = new Guid (br.ReadBytes (16));  		// 0x0C  		var namesByteCount = br.ReadInt32 ();  		// 0x16  		var namesByteStart = br.BaseStream.Position;  		// 0x20  		br.BaseStream.Position = namesByteStart + namesByteCount;  		var nameCount = br.ReadInt32 ();  		info.FlagIndexMax = br.ReadInt32 ();  		info.FlagCount = br.ReadInt32 ();  		var flags = new int[info.FlagCount];  		// bit flags for each nameCountMax  		for (var i = 0; i < flags.Length; i++) {  			flags [i] = br.ReadInt32 ();  		}  		br.BaseStream.Position += 4;  		// 0  		var positions = new List<Tuple<int' PdbName>> (nameCount);  		for (var i = 0; i < info.FlagIndexMax; i++) {  			var flagIndex = i / 32;  			if (flagIndex >= flags.Length) {  				break;  			}  			var flag = flags [flagIndex];  			if ((flag & (1 << (i % 32))) != 0) {  				var position = br.ReadInt32 ();  				var name = new PdbName ();  				name.FlagIndex = i;  				name.Stream = br.ReadInt32 ();  				positions.Add (new Tuple<int' PdbName> (position' name));  			}  		}  		if (positions.Count != nameCount) {  			throw Log.ErrorAndCreateException<GitLinkException> ("names count' {0} <> {1}"' positions.Count' nameCount);  		}  		var tailByteCount = GetRoot ().Streams [1].ByteCount - br.BaseStream.Position;  		info.Tail = br.ReadBytes ((int)tailByteCount);  		foreach (var tuple in positions) {  			br.BaseStream.Position = namesByteStart + tuple.Item1;  			tuple.Item2.Name = br.ReadCString ();  			info.AddName (tuple.Item2);  		}  		return info;  	}  }  
Magic Number,GitLink.Pdb,PdbFile,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Pdb\PdbFile.cs,InternalInfo,The following statement contains a magic number: using (var ms = new MemoryStream (ReadStreamBytes (root.Streams [1]))) {  	using (var br = new BinaryReader (ms)) {  		info.Version = br.ReadInt32 ();  		// 0x00 of stream  		info.Signature = br.ReadInt32 ();  		// 0x04  		info.Age = br.ReadInt32 ();  		// 0x08  		info.Guid = new Guid (br.ReadBytes (16));  		// 0x0C  		var namesByteCount = br.ReadInt32 ();  		// 0x16  		var namesByteStart = br.BaseStream.Position;  		// 0x20  		br.BaseStream.Position = namesByteStart + namesByteCount;  		var nameCount = br.ReadInt32 ();  		info.FlagIndexMax = br.ReadInt32 ();  		info.FlagCount = br.ReadInt32 ();  		var flags = new int[info.FlagCount];  		// bit flags for each nameCountMax  		for (var i = 0; i < flags.Length; i++) {  			flags [i] = br.ReadInt32 ();  		}  		br.BaseStream.Position += 4;  		// 0  		var positions = new List<Tuple<int' PdbName>> (nameCount);  		for (var i = 0; i < info.FlagIndexMax; i++) {  			var flagIndex = i / 32;  			if (flagIndex >= flags.Length) {  				break;  			}  			var flag = flags [flagIndex];  			if ((flag & (1 << (i % 32))) != 0) {  				var position = br.ReadInt32 ();  				var name = new PdbName ();  				name.FlagIndex = i;  				name.Stream = br.ReadInt32 ();  				positions.Add (new Tuple<int' PdbName> (position' name));  			}  		}  		if (positions.Count != nameCount) {  			throw Log.ErrorAndCreateException<GitLinkException> ("names count' {0} <> {1}"' positions.Count' nameCount);  		}  		var tailByteCount = GetRoot ().Streams [1].ByteCount - br.BaseStream.Position;  		info.Tail = br.ReadBytes ((int)tailByteCount);  		foreach (var tuple in positions) {  			br.BaseStream.Position = namesByteStart + tuple.Item1;  			tuple.Item2.Name = br.ReadCString ();  			info.AddName (tuple.Item2);  		}  		return info;  	}  }  
Magic Number,GitLink.Pdb,PdbFile,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Pdb\PdbFile.cs,InternalInfo,The following statement contains a magic number: using (var ms = new MemoryStream (ReadStreamBytes (root.Streams [1]))) {  	using (var br = new BinaryReader (ms)) {  		info.Version = br.ReadInt32 ();  		// 0x00 of stream  		info.Signature = br.ReadInt32 ();  		// 0x04  		info.Age = br.ReadInt32 ();  		// 0x08  		info.Guid = new Guid (br.ReadBytes (16));  		// 0x0C  		var namesByteCount = br.ReadInt32 ();  		// 0x16  		var namesByteStart = br.BaseStream.Position;  		// 0x20  		br.BaseStream.Position = namesByteStart + namesByteCount;  		var nameCount = br.ReadInt32 ();  		info.FlagIndexMax = br.ReadInt32 ();  		info.FlagCount = br.ReadInt32 ();  		var flags = new int[info.FlagCount];  		// bit flags for each nameCountMax  		for (var i = 0; i < flags.Length; i++) {  			flags [i] = br.ReadInt32 ();  		}  		br.BaseStream.Position += 4;  		// 0  		var positions = new List<Tuple<int' PdbName>> (nameCount);  		for (var i = 0; i < info.FlagIndexMax; i++) {  			var flagIndex = i / 32;  			if (flagIndex >= flags.Length) {  				break;  			}  			var flag = flags [flagIndex];  			if ((flag & (1 << (i % 32))) != 0) {  				var position = br.ReadInt32 ();  				var name = new PdbName ();  				name.FlagIndex = i;  				name.Stream = br.ReadInt32 ();  				positions.Add (new Tuple<int' PdbName> (position' name));  			}  		}  		if (positions.Count != nameCount) {  			throw Log.ErrorAndCreateException<GitLinkException> ("names count' {0} <> {1}"' positions.Count' nameCount);  		}  		var tailByteCount = GetRoot ().Streams [1].ByteCount - br.BaseStream.Position;  		info.Tail = br.ReadBytes ((int)tailByteCount);  		foreach (var tuple in positions) {  			br.BaseStream.Position = namesByteStart + tuple.Item1;  			tuple.Item2.Name = br.ReadCString ();  			info.AddName (tuple.Item2);  		}  		return info;  	}  }  
Magic Number,GitLink.Pdb,PdbFile,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Pdb\PdbFile.cs,InternalInfo,The following statement contains a magic number: using (var ms = new MemoryStream (ReadStreamBytes (root.Streams [1]))) {  	using (var br = new BinaryReader (ms)) {  		info.Version = br.ReadInt32 ();  		// 0x00 of stream  		info.Signature = br.ReadInt32 ();  		// 0x04  		info.Age = br.ReadInt32 ();  		// 0x08  		info.Guid = new Guid (br.ReadBytes (16));  		// 0x0C  		var namesByteCount = br.ReadInt32 ();  		// 0x16  		var namesByteStart = br.BaseStream.Position;  		// 0x20  		br.BaseStream.Position = namesByteStart + namesByteCount;  		var nameCount = br.ReadInt32 ();  		info.FlagIndexMax = br.ReadInt32 ();  		info.FlagCount = br.ReadInt32 ();  		var flags = new int[info.FlagCount];  		// bit flags for each nameCountMax  		for (var i = 0; i < flags.Length; i++) {  			flags [i] = br.ReadInt32 ();  		}  		br.BaseStream.Position += 4;  		// 0  		var positions = new List<Tuple<int' PdbName>> (nameCount);  		for (var i = 0; i < info.FlagIndexMax; i++) {  			var flagIndex = i / 32;  			if (flagIndex >= flags.Length) {  				break;  			}  			var flag = flags [flagIndex];  			if ((flag & (1 << (i % 32))) != 0) {  				var position = br.ReadInt32 ();  				var name = new PdbName ();  				name.FlagIndex = i;  				name.Stream = br.ReadInt32 ();  				positions.Add (new Tuple<int' PdbName> (position' name));  			}  		}  		if (positions.Count != nameCount) {  			throw Log.ErrorAndCreateException<GitLinkException> ("names count' {0} <> {1}"' positions.Count' nameCount);  		}  		var tailByteCount = GetRoot ().Streams [1].ByteCount - br.BaseStream.Position;  		info.Tail = br.ReadBytes ((int)tailByteCount);  		foreach (var tuple in positions) {  			br.BaseStream.Position = namesByteStart + tuple.Item1;  			tuple.Item2.Name = br.ReadCString ();  			info.AddName (tuple.Item2);  		}  		return info;  	}  }  
Magic Number,GitLink.Pdb,PdbFile,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Pdb\PdbFile.cs,InternalInfo,The following statement contains a magic number: using (var br = new BinaryReader (ms)) {  	info.Version = br.ReadInt32 ();  	// 0x00 of stream  	info.Signature = br.ReadInt32 ();  	// 0x04  	info.Age = br.ReadInt32 ();  	// 0x08  	info.Guid = new Guid (br.ReadBytes (16));  	// 0x0C  	var namesByteCount = br.ReadInt32 ();  	// 0x16  	var namesByteStart = br.BaseStream.Position;  	// 0x20  	br.BaseStream.Position = namesByteStart + namesByteCount;  	var nameCount = br.ReadInt32 ();  	info.FlagIndexMax = br.ReadInt32 ();  	info.FlagCount = br.ReadInt32 ();  	var flags = new int[info.FlagCount];  	// bit flags for each nameCountMax  	for (var i = 0; i < flags.Length; i++) {  		flags [i] = br.ReadInt32 ();  	}  	br.BaseStream.Position += 4;  	// 0  	var positions = new List<Tuple<int' PdbName>> (nameCount);  	for (var i = 0; i < info.FlagIndexMax; i++) {  		var flagIndex = i / 32;  		if (flagIndex >= flags.Length) {  			break;  		}  		var flag = flags [flagIndex];  		if ((flag & (1 << (i % 32))) != 0) {  			var position = br.ReadInt32 ();  			var name = new PdbName ();  			name.FlagIndex = i;  			name.Stream = br.ReadInt32 ();  			positions.Add (new Tuple<int' PdbName> (position' name));  		}  	}  	if (positions.Count != nameCount) {  		throw Log.ErrorAndCreateException<GitLinkException> ("names count' {0} <> {1}"' positions.Count' nameCount);  	}  	var tailByteCount = GetRoot ().Streams [1].ByteCount - br.BaseStream.Position;  	info.Tail = br.ReadBytes ((int)tailByteCount);  	foreach (var tuple in positions) {  		br.BaseStream.Position = namesByteStart + tuple.Item1;  		tuple.Item2.Name = br.ReadCString ();  		info.AddName (tuple.Item2);  	}  	return info;  }  
Magic Number,GitLink.Pdb,PdbFile,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Pdb\PdbFile.cs,InternalInfo,The following statement contains a magic number: using (var br = new BinaryReader (ms)) {  	info.Version = br.ReadInt32 ();  	// 0x00 of stream  	info.Signature = br.ReadInt32 ();  	// 0x04  	info.Age = br.ReadInt32 ();  	// 0x08  	info.Guid = new Guid (br.ReadBytes (16));  	// 0x0C  	var namesByteCount = br.ReadInt32 ();  	// 0x16  	var namesByteStart = br.BaseStream.Position;  	// 0x20  	br.BaseStream.Position = namesByteStart + namesByteCount;  	var nameCount = br.ReadInt32 ();  	info.FlagIndexMax = br.ReadInt32 ();  	info.FlagCount = br.ReadInt32 ();  	var flags = new int[info.FlagCount];  	// bit flags for each nameCountMax  	for (var i = 0; i < flags.Length; i++) {  		flags [i] = br.ReadInt32 ();  	}  	br.BaseStream.Position += 4;  	// 0  	var positions = new List<Tuple<int' PdbName>> (nameCount);  	for (var i = 0; i < info.FlagIndexMax; i++) {  		var flagIndex = i / 32;  		if (flagIndex >= flags.Length) {  			break;  		}  		var flag = flags [flagIndex];  		if ((flag & (1 << (i % 32))) != 0) {  			var position = br.ReadInt32 ();  			var name = new PdbName ();  			name.FlagIndex = i;  			name.Stream = br.ReadInt32 ();  			positions.Add (new Tuple<int' PdbName> (position' name));  		}  	}  	if (positions.Count != nameCount) {  		throw Log.ErrorAndCreateException<GitLinkException> ("names count' {0} <> {1}"' positions.Count' nameCount);  	}  	var tailByteCount = GetRoot ().Streams [1].ByteCount - br.BaseStream.Position;  	info.Tail = br.ReadBytes ((int)tailByteCount);  	foreach (var tuple in positions) {  		br.BaseStream.Position = namesByteStart + tuple.Item1;  		tuple.Item2.Name = br.ReadCString ();  		info.AddName (tuple.Item2);  	}  	return info;  }  
Magic Number,GitLink.Pdb,PdbFile,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Pdb\PdbFile.cs,InternalInfo,The following statement contains a magic number: using (var br = new BinaryReader (ms)) {  	info.Version = br.ReadInt32 ();  	// 0x00 of stream  	info.Signature = br.ReadInt32 ();  	// 0x04  	info.Age = br.ReadInt32 ();  	// 0x08  	info.Guid = new Guid (br.ReadBytes (16));  	// 0x0C  	var namesByteCount = br.ReadInt32 ();  	// 0x16  	var namesByteStart = br.BaseStream.Position;  	// 0x20  	br.BaseStream.Position = namesByteStart + namesByteCount;  	var nameCount = br.ReadInt32 ();  	info.FlagIndexMax = br.ReadInt32 ();  	info.FlagCount = br.ReadInt32 ();  	var flags = new int[info.FlagCount];  	// bit flags for each nameCountMax  	for (var i = 0; i < flags.Length; i++) {  		flags [i] = br.ReadInt32 ();  	}  	br.BaseStream.Position += 4;  	// 0  	var positions = new List<Tuple<int' PdbName>> (nameCount);  	for (var i = 0; i < info.FlagIndexMax; i++) {  		var flagIndex = i / 32;  		if (flagIndex >= flags.Length) {  			break;  		}  		var flag = flags [flagIndex];  		if ((flag & (1 << (i % 32))) != 0) {  			var position = br.ReadInt32 ();  			var name = new PdbName ();  			name.FlagIndex = i;  			name.Stream = br.ReadInt32 ();  			positions.Add (new Tuple<int' PdbName> (position' name));  		}  	}  	if (positions.Count != nameCount) {  		throw Log.ErrorAndCreateException<GitLinkException> ("names count' {0} <> {1}"' positions.Count' nameCount);  	}  	var tailByteCount = GetRoot ().Streams [1].ByteCount - br.BaseStream.Position;  	info.Tail = br.ReadBytes ((int)tailByteCount);  	foreach (var tuple in positions) {  		br.BaseStream.Position = namesByteStart + tuple.Item1;  		tuple.Item2.Name = br.ReadCString ();  		info.AddName (tuple.Item2);  	}  	return info;  }  
Magic Number,GitLink.Pdb,PdbFile,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Pdb\PdbFile.cs,InternalInfo,The following statement contains a magic number: using (var br = new BinaryReader (ms)) {  	info.Version = br.ReadInt32 ();  	// 0x00 of stream  	info.Signature = br.ReadInt32 ();  	// 0x04  	info.Age = br.ReadInt32 ();  	// 0x08  	info.Guid = new Guid (br.ReadBytes (16));  	// 0x0C  	var namesByteCount = br.ReadInt32 ();  	// 0x16  	var namesByteStart = br.BaseStream.Position;  	// 0x20  	br.BaseStream.Position = namesByteStart + namesByteCount;  	var nameCount = br.ReadInt32 ();  	info.FlagIndexMax = br.ReadInt32 ();  	info.FlagCount = br.ReadInt32 ();  	var flags = new int[info.FlagCount];  	// bit flags for each nameCountMax  	for (var i = 0; i < flags.Length; i++) {  		flags [i] = br.ReadInt32 ();  	}  	br.BaseStream.Position += 4;  	// 0  	var positions = new List<Tuple<int' PdbName>> (nameCount);  	for (var i = 0; i < info.FlagIndexMax; i++) {  		var flagIndex = i / 32;  		if (flagIndex >= flags.Length) {  			break;  		}  		var flag = flags [flagIndex];  		if ((flag & (1 << (i % 32))) != 0) {  			var position = br.ReadInt32 ();  			var name = new PdbName ();  			name.FlagIndex = i;  			name.Stream = br.ReadInt32 ();  			positions.Add (new Tuple<int' PdbName> (position' name));  		}  	}  	if (positions.Count != nameCount) {  		throw Log.ErrorAndCreateException<GitLinkException> ("names count' {0} <> {1}"' positions.Count' nameCount);  	}  	var tailByteCount = GetRoot ().Streams [1].ByteCount - br.BaseStream.Position;  	info.Tail = br.ReadBytes ((int)tailByteCount);  	foreach (var tuple in positions) {  		br.BaseStream.Position = namesByteStart + tuple.Item1;  		tuple.Item2.Name = br.ReadCString ();  		info.AddName (tuple.Item2);  	}  	return info;  }  
Magic Number,GitLink.Pdb,PdbFile,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Pdb\PdbFile.cs,InternalInfo,The following statement contains a magic number: info.Guid = new Guid (br.ReadBytes (16));  
Magic Number,GitLink.Pdb,PdbFile,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Pdb\PdbFile.cs,InternalInfo,The following statement contains a magic number: br.BaseStream.Position += 4;  
Magic Number,GitLink.Pdb,PdbFile,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Pdb\PdbFile.cs,InternalInfo,The following statement contains a magic number: for (var i = 0; i < info.FlagIndexMax; i++) {  	var flagIndex = i / 32;  	if (flagIndex >= flags.Length) {  		break;  	}  	var flag = flags [flagIndex];  	if ((flag & (1 << (i % 32))) != 0) {  		var position = br.ReadInt32 ();  		var name = new PdbName ();  		name.FlagIndex = i;  		name.Stream = br.ReadInt32 ();  		positions.Add (new Tuple<int' PdbName> (position' name));  	}  }  
Magic Number,GitLink.Pdb,PdbFile,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Pdb\PdbFile.cs,InternalInfo,The following statement contains a magic number: for (var i = 0; i < info.FlagIndexMax; i++) {  	var flagIndex = i / 32;  	if (flagIndex >= flags.Length) {  		break;  	}  	var flag = flags [flagIndex];  	if ((flag & (1 << (i % 32))) != 0) {  		var position = br.ReadInt32 ();  		var name = new PdbName ();  		name.FlagIndex = i;  		name.Stream = br.ReadInt32 ();  		positions.Add (new Tuple<int' PdbName> (position' name));  	}  }  
Magic Number,GitLink.Pdb,PdbFile,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Pdb\PdbFile.cs,InternalInfo,The following statement contains a magic number: if ((flag & (1 << (i % 32))) != 0) {  	var position = br.ReadInt32 ();  	var name = new PdbName ();  	name.FlagIndex = i;  	name.Stream = br.ReadInt32 ();  	positions.Add (new Tuple<int' PdbName> (position' name));  }  
Magic Number,GitLink.Pdb,SrcSrv,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Pdb\SrcSrv.cs,CreateVsts,The following statement contains a magic number: using (var ms = new MemoryStream ()) {  	using (var sw = new StreamWriter (ms)) {  		sw.WriteLine ("SRCSRV: ini ------------------------------------------------");  		sw.WriteLine ("VERSION=3");  		sw.WriteLine ("INDEXVERSION=2");  		sw.WriteLine ("VERCTRL=Team Foundation Server");  		sw.WriteLine ("DATETIME={0}"' string.Format ("{0:ddd MMM hh:mm:ss yyyy}"' DateTime.Now));  		sw.WriteLine ("INDEXER=TFSTB");  		sw.WriteLine ("SRCSRV: variables ------------------------------------------");  		sw.WriteLine ("TFS_EXTRACT_TARGET=%targ%\\%var5%\\%fnvar%(%var6%)\\%fnbksl%(%var7%)");  		sw.WriteLine ("TFS_EXTRACT_CMD=tf.exe git view /collection:%fnvar%(%var2%) /teamproject:\"%fnvar%(%var3%)\" /repository:\"%fnvar%(%var4%)\" /commitId:%fnvar%(%var5%) /path:\"%var7%\" /output:%SRCSRVTRG% %fnvar%(%var8%)");  		string tfs_collection;  		if (vstsData.TryGetValue ("TFS_COLLECTION"' out tfs_collection)) {  			sw.WriteLine ("TFS_COLLECTION={0}"' tfs_collection);  		}  		string tfs_team_project;  		if (vstsData.TryGetValue ("TFS_TEAM_PROJECT"' out tfs_team_project)) {  			sw.WriteLine ("TFS_TEAM_PROJECT={0}"' tfs_team_project);  		}  		string tfs_repo;  		if (vstsData.TryGetValue ("TFS_REPO"' out tfs_repo)) {  			sw.WriteLine ("TFS_REPO={0}"' tfs_repo);  		}  		sw.WriteLine ("TFS_COMMIT={0}"' revision);  		sw.WriteLine ("TFS_SHORT_COMMIT={0}"' revision.Substring (0' 8));  		sw.WriteLine ("TFS_APPLY_FILTERS=/applyfilters");  		sw.WriteLine ("SRCSRVVERCTRL=git");  		sw.WriteLine ("SRCSRVERRDESC=access");  		sw.WriteLine ("SRCSRVERRVAR=var2");  		sw.WriteLine ("SRCSRVTRG=%TFS_EXTRACT_TARGET%");  		sw.WriteLine ("SRCSRVCMD=%TFS_EXTRACT_CMD%");  		sw.WriteLine ("SRCSRV: source files ---------------------------------------");  		foreach (var tuple in paths) {  			sw.WriteLine ("{0}*TFS_COLLECTION*TFS_TEAM_PROJECT*TFS_REPO*TFS_COMMIT*TFS_SHORT_COMMIT*{1}*TFS_APPLY_FILTERS"' tuple.Item1' tuple.Item2);  		}  		sw.WriteLine ("SRCSRV: end ------------------------------------------------");  		sw.Flush ();  		return ms.ToArray ();  	}  }  
Magic Number,GitLink.Pdb,SrcSrv,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Pdb\SrcSrv.cs,CreateVsts,The following statement contains a magic number: using (var sw = new StreamWriter (ms)) {  	sw.WriteLine ("SRCSRV: ini ------------------------------------------------");  	sw.WriteLine ("VERSION=3");  	sw.WriteLine ("INDEXVERSION=2");  	sw.WriteLine ("VERCTRL=Team Foundation Server");  	sw.WriteLine ("DATETIME={0}"' string.Format ("{0:ddd MMM hh:mm:ss yyyy}"' DateTime.Now));  	sw.WriteLine ("INDEXER=TFSTB");  	sw.WriteLine ("SRCSRV: variables ------------------------------------------");  	sw.WriteLine ("TFS_EXTRACT_TARGET=%targ%\\%var5%\\%fnvar%(%var6%)\\%fnbksl%(%var7%)");  	sw.WriteLine ("TFS_EXTRACT_CMD=tf.exe git view /collection:%fnvar%(%var2%) /teamproject:\"%fnvar%(%var3%)\" /repository:\"%fnvar%(%var4%)\" /commitId:%fnvar%(%var5%) /path:\"%var7%\" /output:%SRCSRVTRG% %fnvar%(%var8%)");  	string tfs_collection;  	if (vstsData.TryGetValue ("TFS_COLLECTION"' out tfs_collection)) {  		sw.WriteLine ("TFS_COLLECTION={0}"' tfs_collection);  	}  	string tfs_team_project;  	if (vstsData.TryGetValue ("TFS_TEAM_PROJECT"' out tfs_team_project)) {  		sw.WriteLine ("TFS_TEAM_PROJECT={0}"' tfs_team_project);  	}  	string tfs_repo;  	if (vstsData.TryGetValue ("TFS_REPO"' out tfs_repo)) {  		sw.WriteLine ("TFS_REPO={0}"' tfs_repo);  	}  	sw.WriteLine ("TFS_COMMIT={0}"' revision);  	sw.WriteLine ("TFS_SHORT_COMMIT={0}"' revision.Substring (0' 8));  	sw.WriteLine ("TFS_APPLY_FILTERS=/applyfilters");  	sw.WriteLine ("SRCSRVVERCTRL=git");  	sw.WriteLine ("SRCSRVERRDESC=access");  	sw.WriteLine ("SRCSRVERRVAR=var2");  	sw.WriteLine ("SRCSRVTRG=%TFS_EXTRACT_TARGET%");  	sw.WriteLine ("SRCSRVCMD=%TFS_EXTRACT_CMD%");  	sw.WriteLine ("SRCSRV: source files ---------------------------------------");  	foreach (var tuple in paths) {  		sw.WriteLine ("{0}*TFS_COLLECTION*TFS_TEAM_PROJECT*TFS_REPO*TFS_COMMIT*TFS_SHORT_COMMIT*{1}*TFS_APPLY_FILTERS"' tuple.Item1' tuple.Item2);  	}  	sw.WriteLine ("SRCSRV: end ------------------------------------------------");  	sw.Flush ();  	return ms.ToArray ();  }  
Magic Number,GitLink.Pdb,SrcSrv,F:\newReposMay17\CatenaLogic_GitLink\src\GitLink\Pdb\SrcSrv.cs,CreateVsts,The following statement contains a magic number: sw.WriteLine ("TFS_SHORT_COMMIT={0}"' revision.Substring (0' 8));  
