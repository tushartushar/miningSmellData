Implementation smell,Namespace,Class,File,Method,Description
Complex Method,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,ToBitmap,Cyclomatic complexity of the method is 8
Complex Method,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,Cyclomatic complexity of the method is 8
Complex Method,apnConverter,ApnDataRow,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\ApnDataRow.cs,ApnDataRow,Cyclomatic complexity of the method is 14
Complex Method,apnConverter,Program,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Program.cs,parseArgs,Cyclomatic complexity of the method is 23
Long Statement,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,Load,The length of the statement  "		Console.WriteLine ("An error was encountered while trying to load apn-file: " + file + " : File not found." + "\nOperation will be aborted.."); " is 143.
Long Statement,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,ToBitmap,The length of the statement  "                            (int)(((double)pixelsRows[x' y].Red / (double)32) * 256)*/pixelsRows [x' y].Red << 3' pixelsRows [x' y].Green << 2' pixelsRows [x' y].Blue << 3)); " is 146.
Long Statement,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The length of the statement  "		Console.WriteLine ("warning: bitmap dimension does not exactly match expected dimensions:" + "\nExpected: 320x240 px" + "\nFile was: " + bmp.Size.Width + "x" + bmp.Size.Height + " px." + "\nWill continue omitting picture content beyond max. size."); " is 249.
Magic Number,apnConverter.gui,Helper,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\Helper.cs,VerifyBitmap,The following statement contains a magic number: return bmp.Width >= 320 && bmp.Height >= 240;  
Magic Number,apnConverter.gui,Helper,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\Helper.cs,VerifyBitmap,The following statement contains a magic number: return bmp.Width >= 320 && bmp.Height >= 240;  
Magic Number,apnConverter.gui,ToApnCompo,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\ToApnCompo.cs,destinationFileTextBox_TextChanged,The following statement contains a magic number: if (fileStr.ToUpper ().EndsWith (".APN")) {  	//test whether path is valid..  	try {  		FileInfo f = new FileInfo (fileStr);  		DirectoryInfo di = f.Directory;  		//verify path is valid..  		setDestinationFileStatus (f.Name.Length == 6 + 4);  	}  	catch (Exception)//exception not of interest  	 {  		//oops' path is invalid  		setDestinationFileStatus (false);  	}  }  else  	setDestinationFileStatus (false);  
Magic Number,apnConverter.gui,ToApnCompo,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\ToApnCompo.cs,destinationFileTextBox_TextChanged,The following statement contains a magic number: if (fileStr.ToUpper ().EndsWith (".APN")) {  	//test whether path is valid..  	try {  		FileInfo f = new FileInfo (fileStr);  		DirectoryInfo di = f.Directory;  		//verify path is valid..  		setDestinationFileStatus (f.Name.Length == 6 + 4);  	}  	catch (Exception)//exception not of interest  	 {  		//oops' path is invalid  		setDestinationFileStatus (false);  	}  }  else  	setDestinationFileStatus (false);  
Magic Number,apnConverter.gui,ToApnCompo,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\ToApnCompo.cs,destinationFileTextBox_TextChanged,The following statement contains a magic number: try {  	FileInfo f = new FileInfo (fileStr);  	DirectoryInfo di = f.Directory;  	//verify path is valid..  	setDestinationFileStatus (f.Name.Length == 6 + 4);  }  catch (Exception)//exception not of interest   {  	//oops' path is invalid  	setDestinationFileStatus (false);  }  
Magic Number,apnConverter.gui,ToApnCompo,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\ToApnCompo.cs,destinationFileTextBox_TextChanged,The following statement contains a magic number: try {  	FileInfo f = new FileInfo (fileStr);  	DirectoryInfo di = f.Directory;  	//verify path is valid..  	setDestinationFileStatus (f.Name.Length == 6 + 4);  }  catch (Exception)//exception not of interest   {  	//oops' path is invalid  	setDestinationFileStatus (false);  }  
Magic Number,apnConverter.gui,ToApnCompo,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\ToApnCompo.cs,destinationFileTextBox_TextChanged,The following statement contains a magic number: setDestinationFileStatus (f.Name.Length == 6 + 4);  
Magic Number,apnConverter.gui,ToApnCompo,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\ToApnCompo.cs,destinationFileTextBox_TextChanged,The following statement contains a magic number: setDestinationFileStatus (f.Name.Length == 6 + 4);  
Magic Number,apnConverter.gui,ToApnCompo,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\ToApnCompo.cs,browseDestinationButton_Click,The following statement contains a magic number: switch (dr) {  case DialogResult.Yes: {  	string fileStr = sfd.FileName;  	fileStr = fileStr ?? "";  	if (fileStr.Contains ("/") || fileStr.Contains (@"\")) {  		int lastIndex = fileStr.LastIndexOfAny (new char[] {  			'/''  			'\\'  		});  		//make filename uppercase  		int size = fileStr.Length;  		fileStr = fileStr.Substring (0' lastIndex) + fileStr.Substring (lastIndex).ToUpper ();  		//if filename is too short' fill it up with zeros..  		for (int i = -1; (size - lastIndex) + i < 6 + 4; i++) {  			fileStr = fileStr.Insert (fileStr.Length - 4' "0");  		}  		//else if filename too long' shorten it  		for (int i = 1; (size - lastIndex) - i > 6 + 4; i++) {  			fileStr = fileStr.Remove (fileStr.Length - 5' 1);  		}  	}  	destinationFileTextBox.Text = fileStr;  	break;  }  case DialogResult.OK: {  	goto case DialogResult.Yes;  }  }  
Magic Number,apnConverter.gui,ToApnCompo,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\ToApnCompo.cs,browseDestinationButton_Click,The following statement contains a magic number: switch (dr) {  case DialogResult.Yes: {  	string fileStr = sfd.FileName;  	fileStr = fileStr ?? "";  	if (fileStr.Contains ("/") || fileStr.Contains (@"\")) {  		int lastIndex = fileStr.LastIndexOfAny (new char[] {  			'/''  			'\\'  		});  		//make filename uppercase  		int size = fileStr.Length;  		fileStr = fileStr.Substring (0' lastIndex) + fileStr.Substring (lastIndex).ToUpper ();  		//if filename is too short' fill it up with zeros..  		for (int i = -1; (size - lastIndex) + i < 6 + 4; i++) {  			fileStr = fileStr.Insert (fileStr.Length - 4' "0");  		}  		//else if filename too long' shorten it  		for (int i = 1; (size - lastIndex) - i > 6 + 4; i++) {  			fileStr = fileStr.Remove (fileStr.Length - 5' 1);  		}  	}  	destinationFileTextBox.Text = fileStr;  	break;  }  case DialogResult.OK: {  	goto case DialogResult.Yes;  }  }  
Magic Number,apnConverter.gui,ToApnCompo,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\ToApnCompo.cs,browseDestinationButton_Click,The following statement contains a magic number: switch (dr) {  case DialogResult.Yes: {  	string fileStr = sfd.FileName;  	fileStr = fileStr ?? "";  	if (fileStr.Contains ("/") || fileStr.Contains (@"\")) {  		int lastIndex = fileStr.LastIndexOfAny (new char[] {  			'/''  			'\\'  		});  		//make filename uppercase  		int size = fileStr.Length;  		fileStr = fileStr.Substring (0' lastIndex) + fileStr.Substring (lastIndex).ToUpper ();  		//if filename is too short' fill it up with zeros..  		for (int i = -1; (size - lastIndex) + i < 6 + 4; i++) {  			fileStr = fileStr.Insert (fileStr.Length - 4' "0");  		}  		//else if filename too long' shorten it  		for (int i = 1; (size - lastIndex) - i > 6 + 4; i++) {  			fileStr = fileStr.Remove (fileStr.Length - 5' 1);  		}  	}  	destinationFileTextBox.Text = fileStr;  	break;  }  case DialogResult.OK: {  	goto case DialogResult.Yes;  }  }  
Magic Number,apnConverter.gui,ToApnCompo,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\ToApnCompo.cs,browseDestinationButton_Click,The following statement contains a magic number: switch (dr) {  case DialogResult.Yes: {  	string fileStr = sfd.FileName;  	fileStr = fileStr ?? "";  	if (fileStr.Contains ("/") || fileStr.Contains (@"\")) {  		int lastIndex = fileStr.LastIndexOfAny (new char[] {  			'/''  			'\\'  		});  		//make filename uppercase  		int size = fileStr.Length;  		fileStr = fileStr.Substring (0' lastIndex) + fileStr.Substring (lastIndex).ToUpper ();  		//if filename is too short' fill it up with zeros..  		for (int i = -1; (size - lastIndex) + i < 6 + 4; i++) {  			fileStr = fileStr.Insert (fileStr.Length - 4' "0");  		}  		//else if filename too long' shorten it  		for (int i = 1; (size - lastIndex) - i > 6 + 4; i++) {  			fileStr = fileStr.Remove (fileStr.Length - 5' 1);  		}  	}  	destinationFileTextBox.Text = fileStr;  	break;  }  case DialogResult.OK: {  	goto case DialogResult.Yes;  }  }  
Magic Number,apnConverter.gui,ToApnCompo,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\ToApnCompo.cs,browseDestinationButton_Click,The following statement contains a magic number: switch (dr) {  case DialogResult.Yes: {  	string fileStr = sfd.FileName;  	fileStr = fileStr ?? "";  	if (fileStr.Contains ("/") || fileStr.Contains (@"\")) {  		int lastIndex = fileStr.LastIndexOfAny (new char[] {  			'/''  			'\\'  		});  		//make filename uppercase  		int size = fileStr.Length;  		fileStr = fileStr.Substring (0' lastIndex) + fileStr.Substring (lastIndex).ToUpper ();  		//if filename is too short' fill it up with zeros..  		for (int i = -1; (size - lastIndex) + i < 6 + 4; i++) {  			fileStr = fileStr.Insert (fileStr.Length - 4' "0");  		}  		//else if filename too long' shorten it  		for (int i = 1; (size - lastIndex) - i > 6 + 4; i++) {  			fileStr = fileStr.Remove (fileStr.Length - 5' 1);  		}  	}  	destinationFileTextBox.Text = fileStr;  	break;  }  case DialogResult.OK: {  	goto case DialogResult.Yes;  }  }  
Magic Number,apnConverter.gui,ToApnCompo,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\ToApnCompo.cs,browseDestinationButton_Click,The following statement contains a magic number: switch (dr) {  case DialogResult.Yes: {  	string fileStr = sfd.FileName;  	fileStr = fileStr ?? "";  	if (fileStr.Contains ("/") || fileStr.Contains (@"\")) {  		int lastIndex = fileStr.LastIndexOfAny (new char[] {  			'/''  			'\\'  		});  		//make filename uppercase  		int size = fileStr.Length;  		fileStr = fileStr.Substring (0' lastIndex) + fileStr.Substring (lastIndex).ToUpper ();  		//if filename is too short' fill it up with zeros..  		for (int i = -1; (size - lastIndex) + i < 6 + 4; i++) {  			fileStr = fileStr.Insert (fileStr.Length - 4' "0");  		}  		//else if filename too long' shorten it  		for (int i = 1; (size - lastIndex) - i > 6 + 4; i++) {  			fileStr = fileStr.Remove (fileStr.Length - 5' 1);  		}  	}  	destinationFileTextBox.Text = fileStr;  	break;  }  case DialogResult.OK: {  	goto case DialogResult.Yes;  }  }  
Magic Number,apnConverter.gui,ToApnCompo,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\ToApnCompo.cs,browseDestinationButton_Click,The following statement contains a magic number: if (fileStr.Contains ("/") || fileStr.Contains (@"\")) {  	int lastIndex = fileStr.LastIndexOfAny (new char[] {  		'/''  		'\\'  	});  	//make filename uppercase  	int size = fileStr.Length;  	fileStr = fileStr.Substring (0' lastIndex) + fileStr.Substring (lastIndex).ToUpper ();  	//if filename is too short' fill it up with zeros..  	for (int i = -1; (size - lastIndex) + i < 6 + 4; i++) {  		fileStr = fileStr.Insert (fileStr.Length - 4' "0");  	}  	//else if filename too long' shorten it  	for (int i = 1; (size - lastIndex) - i > 6 + 4; i++) {  		fileStr = fileStr.Remove (fileStr.Length - 5' 1);  	}  }  
Magic Number,apnConverter.gui,ToApnCompo,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\ToApnCompo.cs,browseDestinationButton_Click,The following statement contains a magic number: if (fileStr.Contains ("/") || fileStr.Contains (@"\")) {  	int lastIndex = fileStr.LastIndexOfAny (new char[] {  		'/''  		'\\'  	});  	//make filename uppercase  	int size = fileStr.Length;  	fileStr = fileStr.Substring (0' lastIndex) + fileStr.Substring (lastIndex).ToUpper ();  	//if filename is too short' fill it up with zeros..  	for (int i = -1; (size - lastIndex) + i < 6 + 4; i++) {  		fileStr = fileStr.Insert (fileStr.Length - 4' "0");  	}  	//else if filename too long' shorten it  	for (int i = 1; (size - lastIndex) - i > 6 + 4; i++) {  		fileStr = fileStr.Remove (fileStr.Length - 5' 1);  	}  }  
Magic Number,apnConverter.gui,ToApnCompo,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\ToApnCompo.cs,browseDestinationButton_Click,The following statement contains a magic number: if (fileStr.Contains ("/") || fileStr.Contains (@"\")) {  	int lastIndex = fileStr.LastIndexOfAny (new char[] {  		'/''  		'\\'  	});  	//make filename uppercase  	int size = fileStr.Length;  	fileStr = fileStr.Substring (0' lastIndex) + fileStr.Substring (lastIndex).ToUpper ();  	//if filename is too short' fill it up with zeros..  	for (int i = -1; (size - lastIndex) + i < 6 + 4; i++) {  		fileStr = fileStr.Insert (fileStr.Length - 4' "0");  	}  	//else if filename too long' shorten it  	for (int i = 1; (size - lastIndex) - i > 6 + 4; i++) {  		fileStr = fileStr.Remove (fileStr.Length - 5' 1);  	}  }  
Magic Number,apnConverter.gui,ToApnCompo,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\ToApnCompo.cs,browseDestinationButton_Click,The following statement contains a magic number: if (fileStr.Contains ("/") || fileStr.Contains (@"\")) {  	int lastIndex = fileStr.LastIndexOfAny (new char[] {  		'/''  		'\\'  	});  	//make filename uppercase  	int size = fileStr.Length;  	fileStr = fileStr.Substring (0' lastIndex) + fileStr.Substring (lastIndex).ToUpper ();  	//if filename is too short' fill it up with zeros..  	for (int i = -1; (size - lastIndex) + i < 6 + 4; i++) {  		fileStr = fileStr.Insert (fileStr.Length - 4' "0");  	}  	//else if filename too long' shorten it  	for (int i = 1; (size - lastIndex) - i > 6 + 4; i++) {  		fileStr = fileStr.Remove (fileStr.Length - 5' 1);  	}  }  
Magic Number,apnConverter.gui,ToApnCompo,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\ToApnCompo.cs,browseDestinationButton_Click,The following statement contains a magic number: if (fileStr.Contains ("/") || fileStr.Contains (@"\")) {  	int lastIndex = fileStr.LastIndexOfAny (new char[] {  		'/''  		'\\'  	});  	//make filename uppercase  	int size = fileStr.Length;  	fileStr = fileStr.Substring (0' lastIndex) + fileStr.Substring (lastIndex).ToUpper ();  	//if filename is too short' fill it up with zeros..  	for (int i = -1; (size - lastIndex) + i < 6 + 4; i++) {  		fileStr = fileStr.Insert (fileStr.Length - 4' "0");  	}  	//else if filename too long' shorten it  	for (int i = 1; (size - lastIndex) - i > 6 + 4; i++) {  		fileStr = fileStr.Remove (fileStr.Length - 5' 1);  	}  }  
Magic Number,apnConverter.gui,ToApnCompo,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\ToApnCompo.cs,browseDestinationButton_Click,The following statement contains a magic number: if (fileStr.Contains ("/") || fileStr.Contains (@"\")) {  	int lastIndex = fileStr.LastIndexOfAny (new char[] {  		'/''  		'\\'  	});  	//make filename uppercase  	int size = fileStr.Length;  	fileStr = fileStr.Substring (0' lastIndex) + fileStr.Substring (lastIndex).ToUpper ();  	//if filename is too short' fill it up with zeros..  	for (int i = -1; (size - lastIndex) + i < 6 + 4; i++) {  		fileStr = fileStr.Insert (fileStr.Length - 4' "0");  	}  	//else if filename too long' shorten it  	for (int i = 1; (size - lastIndex) - i > 6 + 4; i++) {  		fileStr = fileStr.Remove (fileStr.Length - 5' 1);  	}  }  
Magic Number,apnConverter.gui,ToApnCompo,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\ToApnCompo.cs,browseDestinationButton_Click,The following statement contains a magic number: for (int i = -1; (size - lastIndex) + i < 6 + 4; i++) {  	fileStr = fileStr.Insert (fileStr.Length - 4' "0");  }  
Magic Number,apnConverter.gui,ToApnCompo,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\ToApnCompo.cs,browseDestinationButton_Click,The following statement contains a magic number: for (int i = -1; (size - lastIndex) + i < 6 + 4; i++) {  	fileStr = fileStr.Insert (fileStr.Length - 4' "0");  }  
Magic Number,apnConverter.gui,ToApnCompo,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\ToApnCompo.cs,browseDestinationButton_Click,The following statement contains a magic number: for (int i = -1; (size - lastIndex) + i < 6 + 4; i++) {  	fileStr = fileStr.Insert (fileStr.Length - 4' "0");  }  
Magic Number,apnConverter.gui,ToApnCompo,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\ToApnCompo.cs,browseDestinationButton_Click,The following statement contains a magic number: fileStr = fileStr.Insert (fileStr.Length - 4' "0");  
Magic Number,apnConverter.gui,ToApnCompo,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\ToApnCompo.cs,browseDestinationButton_Click,The following statement contains a magic number: for (int i = 1; (size - lastIndex) - i > 6 + 4; i++) {  	fileStr = fileStr.Remove (fileStr.Length - 5' 1);  }  
Magic Number,apnConverter.gui,ToApnCompo,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\ToApnCompo.cs,browseDestinationButton_Click,The following statement contains a magic number: for (int i = 1; (size - lastIndex) - i > 6 + 4; i++) {  	fileStr = fileStr.Remove (fileStr.Length - 5' 1);  }  
Magic Number,apnConverter.gui,ToApnCompo,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\ToApnCompo.cs,browseDestinationButton_Click,The following statement contains a magic number: for (int i = 1; (size - lastIndex) - i > 6 + 4; i++) {  	fileStr = fileStr.Remove (fileStr.Length - 5' 1);  }  
Magic Number,apnConverter.gui,ToApnCompo,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\ToApnCompo.cs,browseDestinationButton_Click,The following statement contains a magic number: fileStr = fileStr.Remove (fileStr.Length - 5' 1);  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,Load,The following statement contains a magic number: rows = new ApnDataRow[lines.Length - 3];  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,Load,The following statement contains a magic number: for (short i = 1; i < lines.Length - 2; i++) {  	rows [i - 1] = new ApnDataRow (lines [i]);  	if (!lines [i].EndsWith (rows [i - 1].Checksum))  		Console.WriteLine ("missmatch:" + lines [i] + "-" + rows [i - 1].Checksum);  	fullsum += rows [i - 1].ByteSum;  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,Load,The following statement contains a magic number: Console.WriteLine ("full checksum== " + Convert.ToString (fullChecksum' 16).ToUpper ());  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,ToBitmap,The following statement contains a magic number: for (byte b = 0; b < 240; b++) {  	for (ushort x = 0; x < 320; x += 16) {  		ApnDataRow current = rows [((b * 320) + x) / 16];  		ApnPixel[] pixels = current.Pixels;  		for (byte i = 0; i < 16; i++) {  			pixelsRows [x + i' b] = pixels [i];  		}  	}  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,ToBitmap,The following statement contains a magic number: for (byte b = 0; b < 240; b++) {  	for (ushort x = 0; x < 320; x += 16) {  		ApnDataRow current = rows [((b * 320) + x) / 16];  		ApnPixel[] pixels = current.Pixels;  		for (byte i = 0; i < 16; i++) {  			pixelsRows [x + i' b] = pixels [i];  		}  	}  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,ToBitmap,The following statement contains a magic number: for (byte b = 0; b < 240; b++) {  	for (ushort x = 0; x < 320; x += 16) {  		ApnDataRow current = rows [((b * 320) + x) / 16];  		ApnPixel[] pixels = current.Pixels;  		for (byte i = 0; i < 16; i++) {  			pixelsRows [x + i' b] = pixels [i];  		}  	}  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,ToBitmap,The following statement contains a magic number: for (byte b = 0; b < 240; b++) {  	for (ushort x = 0; x < 320; x += 16) {  		ApnDataRow current = rows [((b * 320) + x) / 16];  		ApnPixel[] pixels = current.Pixels;  		for (byte i = 0; i < 16; i++) {  			pixelsRows [x + i' b] = pixels [i];  		}  	}  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,ToBitmap,The following statement contains a magic number: for (byte b = 0; b < 240; b++) {  	for (ushort x = 0; x < 320; x += 16) {  		ApnDataRow current = rows [((b * 320) + x) / 16];  		ApnPixel[] pixels = current.Pixels;  		for (byte i = 0; i < 16; i++) {  			pixelsRows [x + i' b] = pixels [i];  		}  	}  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,ToBitmap,The following statement contains a magic number: for (byte b = 0; b < 240; b++) {  	for (ushort x = 0; x < 320; x += 16) {  		ApnDataRow current = rows [((b * 320) + x) / 16];  		ApnPixel[] pixels = current.Pixels;  		for (byte i = 0; i < 16; i++) {  			pixelsRows [x + i' b] = pixels [i];  		}  	}  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,ToBitmap,The following statement contains a magic number: for (ushort x = 0; x < 320; x += 16) {  	ApnDataRow current = rows [((b * 320) + x) / 16];  	ApnPixel[] pixels = current.Pixels;  	for (byte i = 0; i < 16; i++) {  		pixelsRows [x + i' b] = pixels [i];  	}  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,ToBitmap,The following statement contains a magic number: for (ushort x = 0; x < 320; x += 16) {  	ApnDataRow current = rows [((b * 320) + x) / 16];  	ApnPixel[] pixels = current.Pixels;  	for (byte i = 0; i < 16; i++) {  		pixelsRows [x + i' b] = pixels [i];  	}  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,ToBitmap,The following statement contains a magic number: for (ushort x = 0; x < 320; x += 16) {  	ApnDataRow current = rows [((b * 320) + x) / 16];  	ApnPixel[] pixels = current.Pixels;  	for (byte i = 0; i < 16; i++) {  		pixelsRows [x + i' b] = pixels [i];  	}  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,ToBitmap,The following statement contains a magic number: for (ushort x = 0; x < 320; x += 16) {  	ApnDataRow current = rows [((b * 320) + x) / 16];  	ApnPixel[] pixels = current.Pixels;  	for (byte i = 0; i < 16; i++) {  		pixelsRows [x + i' b] = pixels [i];  	}  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,ToBitmap,The following statement contains a magic number: for (ushort x = 0; x < 320; x += 16) {  	ApnDataRow current = rows [((b * 320) + x) / 16];  	ApnPixel[] pixels = current.Pixels;  	for (byte i = 0; i < 16; i++) {  		pixelsRows [x + i' b] = pixels [i];  	}  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,ToBitmap,The following statement contains a magic number: x += 16
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,ToBitmap,The following statement contains a magic number: for (byte i = 0; i < 16; i++) {  	pixelsRows [x + i' b] = pixels [i];  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,ToBitmap,The following statement contains a magic number: for (byte y = 0; y < 240; y++)  	for (ushort x = 0; x < 320; x++)  		bmp.SetPixel (x' y' Color.FromArgb (/*    (int) (((double)pixelsRows[x' y].Blue / (double)32) * 256)'                            (int)(((double)pixelsRows[x' y].Green / (double)64 )* 256)'                             (int)(((double)pixelsRows[x' y].Red / (double)32) * 256)*/pixelsRows [x' y].Red << 3' pixelsRows [x' y].Green << 2' pixelsRows [x' y].Blue << 3));  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,ToBitmap,The following statement contains a magic number: for (byte y = 0; y < 240; y++)  	for (ushort x = 0; x < 320; x++)  		bmp.SetPixel (x' y' Color.FromArgb (/*    (int) (((double)pixelsRows[x' y].Blue / (double)32) * 256)'                            (int)(((double)pixelsRows[x' y].Green / (double)64 )* 256)'                             (int)(((double)pixelsRows[x' y].Red / (double)32) * 256)*/pixelsRows [x' y].Red << 3' pixelsRows [x' y].Green << 2' pixelsRows [x' y].Blue << 3));  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,ToBitmap,The following statement contains a magic number: for (byte y = 0; y < 240; y++)  	for (ushort x = 0; x < 320; x++)  		bmp.SetPixel (x' y' Color.FromArgb (/*    (int) (((double)pixelsRows[x' y].Blue / (double)32) * 256)'                            (int)(((double)pixelsRows[x' y].Green / (double)64 )* 256)'                             (int)(((double)pixelsRows[x' y].Red / (double)32) * 256)*/pixelsRows [x' y].Red << 3' pixelsRows [x' y].Green << 2' pixelsRows [x' y].Blue << 3));  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,ToBitmap,The following statement contains a magic number: for (byte y = 0; y < 240; y++)  	for (ushort x = 0; x < 320; x++)  		bmp.SetPixel (x' y' Color.FromArgb (/*    (int) (((double)pixelsRows[x' y].Blue / (double)32) * 256)'                            (int)(((double)pixelsRows[x' y].Green / (double)64 )* 256)'                             (int)(((double)pixelsRows[x' y].Red / (double)32) * 256)*/pixelsRows [x' y].Red << 3' pixelsRows [x' y].Green << 2' pixelsRows [x' y].Blue << 3));  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,ToBitmap,The following statement contains a magic number: for (byte y = 0; y < 240; y++)  	for (ushort x = 0; x < 320; x++)  		bmp.SetPixel (x' y' Color.FromArgb (/*    (int) (((double)pixelsRows[x' y].Blue / (double)32) * 256)'                            (int)(((double)pixelsRows[x' y].Green / (double)64 )* 256)'                             (int)(((double)pixelsRows[x' y].Red / (double)32) * 256)*/pixelsRows [x' y].Red << 3' pixelsRows [x' y].Green << 2' pixelsRows [x' y].Blue << 3));  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,ToBitmap,The following statement contains a magic number: for (ushort x = 0; x < 320; x++)  	bmp.SetPixel (x' y' Color.FromArgb (/*    (int) (((double)pixelsRows[x' y].Blue / (double)32) * 256)'                            (int)(((double)pixelsRows[x' y].Green / (double)64 )* 256)'                             (int)(((double)pixelsRows[x' y].Red / (double)32) * 256)*/pixelsRows [x' y].Red << 3' pixelsRows [x' y].Green << 2' pixelsRows [x' y].Blue << 3));  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,ToBitmap,The following statement contains a magic number: for (ushort x = 0; x < 320; x++)  	bmp.SetPixel (x' y' Color.FromArgb (/*    (int) (((double)pixelsRows[x' y].Blue / (double)32) * 256)'                            (int)(((double)pixelsRows[x' y].Green / (double)64 )* 256)'                             (int)(((double)pixelsRows[x' y].Red / (double)32) * 256)*/pixelsRows [x' y].Red << 3' pixelsRows [x' y].Green << 2' pixelsRows [x' y].Blue << 3));  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,ToBitmap,The following statement contains a magic number: for (ushort x = 0; x < 320; x++)  	bmp.SetPixel (x' y' Color.FromArgb (/*    (int) (((double)pixelsRows[x' y].Blue / (double)32) * 256)'                            (int)(((double)pixelsRows[x' y].Green / (double)64 )* 256)'                             (int)(((double)pixelsRows[x' y].Red / (double)32) * 256)*/pixelsRows [x' y].Red << 3' pixelsRows [x' y].Green << 2' pixelsRows [x' y].Blue << 3));  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,ToBitmap,The following statement contains a magic number: for (ushort x = 0; x < 320; x++)  	bmp.SetPixel (x' y' Color.FromArgb (/*    (int) (((double)pixelsRows[x' y].Blue / (double)32) * 256)'                            (int)(((double)pixelsRows[x' y].Green / (double)64 )* 256)'                             (int)(((double)pixelsRows[x' y].Red / (double)32) * 256)*/pixelsRows [x' y].Red << 3' pixelsRows [x' y].Green << 2' pixelsRows [x' y].Blue << 3));  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,ToBitmap,The following statement contains a magic number: bmp.SetPixel (x' y' Color.FromArgb (/*    (int) (((double)pixelsRows[x' y].Blue / (double)32) * 256)'                            (int)(((double)pixelsRows[x' y].Green / (double)64 )* 256)'                             (int)(((double)pixelsRows[x' y].Red / (double)32) * 256)*/pixelsRows [x' y].Red << 3' pixelsRows [x' y].Green << 2' pixelsRows [x' y].Blue << 3));  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,ToBitmap,The following statement contains a magic number: bmp.SetPixel (x' y' Color.FromArgb (/*    (int) (((double)pixelsRows[x' y].Blue / (double)32) * 256)'                            (int)(((double)pixelsRows[x' y].Green / (double)64 )* 256)'                             (int)(((double)pixelsRows[x' y].Red / (double)32) * 256)*/pixelsRows [x' y].Red << 3' pixelsRows [x' y].Green << 2' pixelsRows [x' y].Blue << 3));  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,ToBitmap,The following statement contains a magic number: bmp.SetPixel (x' y' Color.FromArgb (/*    (int) (((double)pixelsRows[x' y].Blue / (double)32) * 256)'                            (int)(((double)pixelsRows[x' y].Green / (double)64 )* 256)'                             (int)(((double)pixelsRows[x' y].Red / (double)32) * 256)*/pixelsRows [x' y].Red << 3' pixelsRows [x' y].Green << 2' pixelsRows [x' y].Blue << 3));  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: if (bmp.Size.Width < 320 || bmp.Size.Height < 240) {  	Console.WriteLine ("error: bitmap does not match required dimensions (320x240)");  	return false;  }  else if (bmp.Size.Width > 320 || bmp.Size.Height > 240) {  	Console.WriteLine ("warning: bitmap dimension does not exactly match expected dimensions:" + "\nExpected: 320x240 px" + "\nFile was: " + bmp.Size.Width + "x" + bmp.Size.Height + " px." + "\nWill continue omitting picture content beyond max. size.");  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: if (bmp.Size.Width < 320 || bmp.Size.Height < 240) {  	Console.WriteLine ("error: bitmap does not match required dimensions (320x240)");  	return false;  }  else if (bmp.Size.Width > 320 || bmp.Size.Height > 240) {  	Console.WriteLine ("warning: bitmap dimension does not exactly match expected dimensions:" + "\nExpected: 320x240 px" + "\nFile was: " + bmp.Size.Width + "x" + bmp.Size.Height + " px." + "\nWill continue omitting picture content beyond max. size.");  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: if (bmp.Size.Width < 320 || bmp.Size.Height < 240) {  	Console.WriteLine ("error: bitmap does not match required dimensions (320x240)");  	return false;  }  else if (bmp.Size.Width > 320 || bmp.Size.Height > 240) {  	Console.WriteLine ("warning: bitmap dimension does not exactly match expected dimensions:" + "\nExpected: 320x240 px" + "\nFile was: " + bmp.Size.Width + "x" + bmp.Size.Height + " px." + "\nWill continue omitting picture content beyond max. size.");  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: if (bmp.Size.Width < 320 || bmp.Size.Height < 240) {  	Console.WriteLine ("error: bitmap does not match required dimensions (320x240)");  	return false;  }  else if (bmp.Size.Width > 320 || bmp.Size.Height > 240) {  	Console.WriteLine ("warning: bitmap dimension does not exactly match expected dimensions:" + "\nExpected: 320x240 px" + "\nFile was: " + bmp.Size.Width + "x" + bmp.Size.Height + " px." + "\nWill continue omitting picture content beyond max. size.");  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: if (bmp.Size.Width > 320 || bmp.Size.Height > 240) {  	Console.WriteLine ("warning: bitmap dimension does not exactly match expected dimensions:" + "\nExpected: 320x240 px" + "\nFile was: " + bmp.Size.Width + "x" + bmp.Size.Height + " px." + "\nWill continue omitting picture content beyond max. size.");  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: if (bmp.Size.Width > 320 || bmp.Size.Height > 240) {  	Console.WriteLine ("warning: bitmap dimension does not exactly match expected dimensions:" + "\nExpected: 320x240 px" + "\nFile was: " + bmp.Size.Width + "x" + bmp.Size.Height + " px." + "\nWill continue omitting picture content beyond max. size.");  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: for (ushort y = 0; y < 240; y++) {  	for (ushort x = 0; x < 320; x++) {  		Color px = bmp.GetPixel (x' y);  		pixels [320 * y + x] = new ApnPixel ((byte)(px.R >> 3)' //WAS: 3  		(byte)(px.G >> 2)' //WAS: 2   		(byte)(px.B >> 3));  		//was: 3    		/*     new ApnPixel(                                  (byte) Math.Round((((float) px.R / 256)*32))'                                  (byte) Math.Round((((float)px.G / 256)*64))'                                  (byte) Math.Round((((float)px.B / 256)*32))); */}  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: for (ushort y = 0; y < 240; y++) {  	for (ushort x = 0; x < 320; x++) {  		Color px = bmp.GetPixel (x' y);  		pixels [320 * y + x] = new ApnPixel ((byte)(px.R >> 3)' //WAS: 3  		(byte)(px.G >> 2)' //WAS: 2   		(byte)(px.B >> 3));  		//was: 3    		/*     new ApnPixel(                                  (byte) Math.Round((((float) px.R / 256)*32))'                                  (byte) Math.Round((((float)px.G / 256)*64))'                                  (byte) Math.Round((((float)px.B / 256)*32))); */}  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: for (ushort y = 0; y < 240; y++) {  	for (ushort x = 0; x < 320; x++) {  		Color px = bmp.GetPixel (x' y);  		pixels [320 * y + x] = new ApnPixel ((byte)(px.R >> 3)' //WAS: 3  		(byte)(px.G >> 2)' //WAS: 2   		(byte)(px.B >> 3));  		//was: 3    		/*     new ApnPixel(                                  (byte) Math.Round((((float) px.R / 256)*32))'                                  (byte) Math.Round((((float)px.G / 256)*64))'                                  (byte) Math.Round((((float)px.B / 256)*32))); */}  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: for (ushort y = 0; y < 240; y++) {  	for (ushort x = 0; x < 320; x++) {  		Color px = bmp.GetPixel (x' y);  		pixels [320 * y + x] = new ApnPixel ((byte)(px.R >> 3)' //WAS: 3  		(byte)(px.G >> 2)' //WAS: 2   		(byte)(px.B >> 3));  		//was: 3    		/*     new ApnPixel(                                  (byte) Math.Round((((float) px.R / 256)*32))'                                  (byte) Math.Round((((float)px.G / 256)*64))'                                  (byte) Math.Round((((float)px.B / 256)*32))); */}  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: for (ushort y = 0; y < 240; y++) {  	for (ushort x = 0; x < 320; x++) {  		Color px = bmp.GetPixel (x' y);  		pixels [320 * y + x] = new ApnPixel ((byte)(px.R >> 3)' //WAS: 3  		(byte)(px.G >> 2)' //WAS: 2   		(byte)(px.B >> 3));  		//was: 3    		/*     new ApnPixel(                                  (byte) Math.Round((((float) px.R / 256)*32))'                                  (byte) Math.Round((((float)px.G / 256)*64))'                                  (byte) Math.Round((((float)px.B / 256)*32))); */}  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: for (ushort y = 0; y < 240; y++) {  	for (ushort x = 0; x < 320; x++) {  		Color px = bmp.GetPixel (x' y);  		pixels [320 * y + x] = new ApnPixel ((byte)(px.R >> 3)' //WAS: 3  		(byte)(px.G >> 2)' //WAS: 2   		(byte)(px.B >> 3));  		//was: 3    		/*     new ApnPixel(                                  (byte) Math.Round((((float) px.R / 256)*32))'                                  (byte) Math.Round((((float)px.G / 256)*64))'                                  (byte) Math.Round((((float)px.B / 256)*32))); */}  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: for (ushort x = 0; x < 320; x++) {  	Color px = bmp.GetPixel (x' y);  	pixels [320 * y + x] = new ApnPixel ((byte)(px.R >> 3)' //WAS: 3  	(byte)(px.G >> 2)' //WAS: 2   	(byte)(px.B >> 3));  	//was: 3    	/*     new ApnPixel(                                  (byte) Math.Round((((float) px.R / 256)*32))'                                  (byte) Math.Round((((float)px.G / 256)*64))'                                  (byte) Math.Round((((float)px.B / 256)*32))); */}  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: for (ushort x = 0; x < 320; x++) {  	Color px = bmp.GetPixel (x' y);  	pixels [320 * y + x] = new ApnPixel ((byte)(px.R >> 3)' //WAS: 3  	(byte)(px.G >> 2)' //WAS: 2   	(byte)(px.B >> 3));  	//was: 3    	/*     new ApnPixel(                                  (byte) Math.Round((((float) px.R / 256)*32))'                                  (byte) Math.Round((((float)px.G / 256)*64))'                                  (byte) Math.Round((((float)px.B / 256)*32))); */}  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: for (ushort x = 0; x < 320; x++) {  	Color px = bmp.GetPixel (x' y);  	pixels [320 * y + x] = new ApnPixel ((byte)(px.R >> 3)' //WAS: 3  	(byte)(px.G >> 2)' //WAS: 2   	(byte)(px.B >> 3));  	//was: 3    	/*     new ApnPixel(                                  (byte) Math.Round((((float) px.R / 256)*32))'                                  (byte) Math.Round((((float)px.G / 256)*64))'                                  (byte) Math.Round((((float)px.B / 256)*32))); */}  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: for (ushort x = 0; x < 320; x++) {  	Color px = bmp.GetPixel (x' y);  	pixels [320 * y + x] = new ApnPixel ((byte)(px.R >> 3)' //WAS: 3  	(byte)(px.G >> 2)' //WAS: 2   	(byte)(px.B >> 3));  	//was: 3    	/*     new ApnPixel(                                  (byte) Math.Round((((float) px.R / 256)*32))'                                  (byte) Math.Round((((float)px.G / 256)*64))'                                  (byte) Math.Round((((float)px.B / 256)*32))); */}  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: for (ushort x = 0; x < 320; x++) {  	Color px = bmp.GetPixel (x' y);  	pixels [320 * y + x] = new ApnPixel ((byte)(px.R >> 3)' //WAS: 3  	(byte)(px.G >> 2)' //WAS: 2   	(byte)(px.B >> 3));  	//was: 3    	/*     new ApnPixel(                                  (byte) Math.Round((((float) px.R / 256)*32))'                                  (byte) Math.Round((((float)px.G / 256)*64))'                                  (byte) Math.Round((((float)px.B / 256)*32))); */}  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: pixels [320 * y + x] = new ApnPixel ((byte)(px.R >> 3)' //WAS: 3  (byte)(px.G >> 2)' //WAS: 2   (byte)(px.B >> 3));  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: pixels [320 * y + x] = new ApnPixel ((byte)(px.R >> 3)' //WAS: 3  (byte)(px.G >> 2)' //WAS: 2   (byte)(px.B >> 3));  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: pixels [320 * y + x] = new ApnPixel ((byte)(px.R >> 3)' //WAS: 3  (byte)(px.G >> 2)' //WAS: 2   (byte)(px.B >> 3));  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: pixels [320 * y + x] = new ApnPixel ((byte)(px.R >> 3)' //WAS: 3  (byte)(px.G >> 2)' //WAS: 2   (byte)(px.B >> 3));  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: for (int i = 0; i < 320 * 240; i += 16) {  	ApnPixel[] tmppx = new ApnPixel[16];  	for (byte b = 0; b < 16; b++) {  		tmppx [b] = pixels [i + b];  	}  	rows [i / 16] = new ApnDataRow (tmppx' (int)(0x20 * (i / 16)));  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: for (int i = 0; i < 320 * 240; i += 16) {  	ApnPixel[] tmppx = new ApnPixel[16];  	for (byte b = 0; b < 16; b++) {  		tmppx [b] = pixels [i + b];  	}  	rows [i / 16] = new ApnDataRow (tmppx' (int)(0x20 * (i / 16)));  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: for (int i = 0; i < 320 * 240; i += 16) {  	ApnPixel[] tmppx = new ApnPixel[16];  	for (byte b = 0; b < 16; b++) {  		tmppx [b] = pixels [i + b];  	}  	rows [i / 16] = new ApnDataRow (tmppx' (int)(0x20 * (i / 16)));  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: for (int i = 0; i < 320 * 240; i += 16) {  	ApnPixel[] tmppx = new ApnPixel[16];  	for (byte b = 0; b < 16; b++) {  		tmppx [b] = pixels [i + b];  	}  	rows [i / 16] = new ApnDataRow (tmppx' (int)(0x20 * (i / 16)));  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: for (int i = 0; i < 320 * 240; i += 16) {  	ApnPixel[] tmppx = new ApnPixel[16];  	for (byte b = 0; b < 16; b++) {  		tmppx [b] = pixels [i + b];  	}  	rows [i / 16] = new ApnDataRow (tmppx' (int)(0x20 * (i / 16)));  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: for (int i = 0; i < 320 * 240; i += 16) {  	ApnPixel[] tmppx = new ApnPixel[16];  	for (byte b = 0; b < 16; b++) {  		tmppx [b] = pixels [i + b];  	}  	rows [i / 16] = new ApnDataRow (tmppx' (int)(0x20 * (i / 16)));  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: for (int i = 0; i < 320 * 240; i += 16) {  	ApnPixel[] tmppx = new ApnPixel[16];  	for (byte b = 0; b < 16; b++) {  		tmppx [b] = pixels [i + b];  	}  	rows [i / 16] = new ApnDataRow (tmppx' (int)(0x20 * (i / 16)));  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: i += 16
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: for (byte b = 0; b < 16; b++) {  	tmppx [b] = pixels [i + b];  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: rows [i / 16] = new ApnDataRow (tmppx' (int)(0x20 * (i / 16)));  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: rows [i / 16] = new ApnDataRow (tmppx' (int)(0x20 * (i / 16)));  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: for (int i = 0; i < rows.Length; i++) {  	Array.Copy (rows [i].RawEncoded.ToCharArray ()' 0' rowBuffer' i * 80' 80);  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: for (int i = 0; i < rows.Length; i++) {  	Array.Copy (rows [i].RawEncoded.ToCharArray ()' 0' rowBuffer' i * 80' 80);  }  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: Array.Copy (rows [i].RawEncoded.ToCharArray ()' 0' rowBuffer' i * 80' 80);  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: Array.Copy (rows [i].RawEncoded.ToCharArray ()' 0' rowBuffer' i * 80' 80);  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: output += Convert.ToString (fullChecksum' 16).ToUpper ();  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,FromBitmap,The following statement contains a magic number: output += Convert.ToString (footerChecksum' 16).ToUpper ();  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,CalculateFooterChecksum,The following statement contains a magic number: offset += Convert.ToByte (LAST_OFFSET.Substring (1' 2)' 16);  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,CalculateFooterChecksum,The following statement contains a magic number: offset += Convert.ToByte (LAST_OFFSET.Substring (1' 2)' 16);  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,CalculateFooterChecksum,The following statement contains a magic number: offset += Convert.ToByte (LAST_OFFSET.Substring (0' 1)' 16);  
Magic Number,apnConverter,Apn,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Apn.cs,VerifyApnHeuristically,The following statement contains a magic number: if (f.Length != 384067)  	return false;  
Magic Number,apnConverter,ApnDataRow,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\ApnDataRow.cs,ApnDataRow,The following statement contains a magic number: if (pixels.Length != 16)  	throw new Exception (String.Format ("ApnDataRow (constructor): invalid parameter: expected pixels-count: 16' given count: {0}"' pixels.Length));  
Magic Number,apnConverter,ApnDataRow,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\ApnDataRow.cs,ApnDataRow,The following statement contains a magic number: for (int b = 5 - offsetString.Length; b > 0; b--)  	//prepend leading zeros..  	offsetString = "0" + offsetString;  
Magic Number,apnConverter,ApnDataRow,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\ApnDataRow.cs,ApnDataRow,The following statement contains a magic number: foreach (ApnPixel px in pixels) {  	string pxString = Convert.ToString (px.RawValue' 16).ToUpper ();  	switch (pxString.Length) //prepend leading zeros  	{  	case 3:  		pxString = "0" + pxString;  		break;  	case 2:  		pxString = "00" + pxString;  		break;  	case 1:  		pxString = "000" + pxString;  		break;  	}  	encoded += pxString;  }  
Magic Number,apnConverter,ApnDataRow,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\ApnDataRow.cs,ApnDataRow,The following statement contains a magic number: foreach (ApnPixel px in pixels) {  	string pxString = Convert.ToString (px.RawValue' 16).ToUpper ();  	switch (pxString.Length) //prepend leading zeros  	{  	case 3:  		pxString = "0" + pxString;  		break;  	case 2:  		pxString = "00" + pxString;  		break;  	case 1:  		pxString = "000" + pxString;  		break;  	}  	encoded += pxString;  }  
Magic Number,apnConverter,ApnDataRow,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\ApnDataRow.cs,ApnDataRow,The following statement contains a magic number: foreach (ApnPixel px in pixels) {  	string pxString = Convert.ToString (px.RawValue' 16).ToUpper ();  	switch (pxString.Length) //prepend leading zeros  	{  	case 3:  		pxString = "0" + pxString;  		break;  	case 2:  		pxString = "00" + pxString;  		break;  	case 1:  		pxString = "000" + pxString;  		break;  	}  	encoded += pxString;  }  
Magic Number,apnConverter,ApnDataRow,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\ApnDataRow.cs,ApnDataRow,The following statement contains a magic number: switch (pxString.Length) //prepend leading zeros  {  case 3:  	pxString = "0" + pxString;  	break;  case 2:  	pxString = "00" + pxString;  	break;  case 1:  	pxString = "000" + pxString;  	break;  }  
Magic Number,apnConverter,ApnDataRow,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\ApnDataRow.cs,ApnDataRow,The following statement contains a magic number: switch (pxString.Length) //prepend leading zeros  {  case 3:  	pxString = "0" + pxString;  	break;  case 2:  	pxString = "00" + pxString;  	break;  case 1:  	pxString = "000" + pxString;  	break;  }  
Magic Number,apnConverter,ApnDataRow,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\ApnDataRow.cs,_constructFromRaw,The following statement contains a magic number: dataBytes = new byte[data.Length / 2];  
Magic Number,apnConverter,ApnDataRow,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\ApnDataRow.cs,_constructFromRaw,The following statement contains a magic number: for (byte b = 0; b < data.Length; b += 2) {  	dataBytes [b / 2] = Convert.ToByte (data.Substring (b' 2)' 16);  }  
Magic Number,apnConverter,ApnDataRow,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\ApnDataRow.cs,_constructFromRaw,The following statement contains a magic number: for (byte b = 0; b < data.Length; b += 2) {  	dataBytes [b / 2] = Convert.ToByte (data.Substring (b' 2)' 16);  }  
Magic Number,apnConverter,ApnDataRow,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\ApnDataRow.cs,_constructFromRaw,The following statement contains a magic number: for (byte b = 0; b < data.Length; b += 2) {  	dataBytes [b / 2] = Convert.ToByte (data.Substring (b' 2)' 16);  }  
Magic Number,apnConverter,ApnDataRow,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\ApnDataRow.cs,_constructFromRaw,The following statement contains a magic number: for (byte b = 0; b < data.Length; b += 2) {  	dataBytes [b / 2] = Convert.ToByte (data.Substring (b' 2)' 16);  }  
Magic Number,apnConverter,ApnDataRow,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\ApnDataRow.cs,_constructFromRaw,The following statement contains a magic number: b += 2
Magic Number,apnConverter,ApnDataRow,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\ApnDataRow.cs,_constructFromRaw,The following statement contains a magic number: dataBytes [b / 2] = Convert.ToByte (data.Substring (b' 2)' 16);  
Magic Number,apnConverter,ApnDataRow,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\ApnDataRow.cs,_constructFromRaw,The following statement contains a magic number: dataBytes [b / 2] = Convert.ToByte (data.Substring (b' 2)' 16);  
Magic Number,apnConverter,ApnDataRow,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\ApnDataRow.cs,_constructFromRaw,The following statement contains a magic number: dataBytes [b / 2] = Convert.ToByte (data.Substring (b' 2)' 16);  
Magic Number,apnConverter,ApnDataRow,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\ApnDataRow.cs,CalculateChecksum,The following statement contains a magic number: offset += Convert.ToByte (Offset.Substring (1' 2)' 16);  
Magic Number,apnConverter,ApnDataRow,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\ApnDataRow.cs,CalculateChecksum,The following statement contains a magic number: offset += Convert.ToByte (Offset.Substring (1' 2)' 16);  
Magic Number,apnConverter,ApnDataRow,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\ApnDataRow.cs,CalculateChecksum,The following statement contains a magic number: offset += Convert.ToByte (Offset.Substring (0' 1)' 16);  
Magic Number,apnConverter,ApnHeader,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\ApnHeader.cs,ApnHeader,The following statement contains a magic number: titleBytes = writeRawBytes (RawTitle.Substring (0' 12));  
Magic Number,apnConverter,ApnHeader,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\ApnHeader.cs,writeRawBytes,The following statement contains a magic number: for (int i = 0; i < encodedTitle.Length; i = i + 2) {  	rawBytes [i / 2] = Convert.ToByte (encodedTitle.Substring (i' 2)' 16);  }  
Magic Number,apnConverter,ApnHeader,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\ApnHeader.cs,writeRawBytes,The following statement contains a magic number: for (int i = 0; i < encodedTitle.Length; i = i + 2) {  	rawBytes [i / 2] = Convert.ToByte (encodedTitle.Substring (i' 2)' 16);  }  
Magic Number,apnConverter,ApnHeader,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\ApnHeader.cs,writeRawBytes,The following statement contains a magic number: for (int i = 0; i < encodedTitle.Length; i = i + 2) {  	rawBytes [i / 2] = Convert.ToByte (encodedTitle.Substring (i' 2)' 16);  }  
Magic Number,apnConverter,ApnHeader,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\ApnHeader.cs,writeRawBytes,The following statement contains a magic number: for (int i = 0; i < encodedTitle.Length; i = i + 2) {  	rawBytes [i / 2] = Convert.ToByte (encodedTitle.Substring (i' 2)' 16);  }  
Magic Number,apnConverter,ApnHeader,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\ApnHeader.cs,writeRawBytes,The following statement contains a magic number: i = i + 2
Magic Number,apnConverter,ApnHeader,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\ApnHeader.cs,writeRawBytes,The following statement contains a magic number: rawBytes [i / 2] = Convert.ToByte (encodedTitle.Substring (i' 2)' 16);  
Magic Number,apnConverter,ApnHeader,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\ApnHeader.cs,writeRawBytes,The following statement contains a magic number: rawBytes [i / 2] = Convert.ToByte (encodedTitle.Substring (i' 2)' 16);  
Magic Number,apnConverter,ApnHeader,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\ApnHeader.cs,writeRawBytes,The following statement contains a magic number: rawBytes [i / 2] = Convert.ToByte (encodedTitle.Substring (i' 2)' 16);  
Magic Number,apnConverter,Program,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Program.cs,parseArgs,The following statement contains a magic number: switch (args.Length) {  case 0:  	DisplayHelp ();  	break;  case 1:  	switch (args [0].ToLower ()) {  	case "tobmp":  		Console.WriteLine ("Usage: APNCONV toBmp source destination");  		break;  	case "toapn":  		Console.WriteLine ("Usage: APNCONV toApn source name destination");  		break;  	default:  		Console.WriteLine ("argument not recognised: {0}\ntry APNCONV without arguments for help."' args [0]);  		break;  	}  	break;  case 2:  	switch (args [1].ToLower ()) {  	case "tobmp":  		Console.WriteLine ("Usage: APNCONV toBmp source destination");  		break;  	case "toapn":  		Console.WriteLine ("Usage: APNCONV toApn source name destination");  		break;  	default:  		Console.WriteLine ("argument not recognised: {0}\ntry APNCONV without arguments for help."' args [0]);  		break;  	}  	break;  case 3:  	switch (args [0].ToLower ()) {  	case "tobmp":  		ToBitmap (args [1]' args [2]);  		break;  	case "toapn":  		Console.WriteLine ("Usage: APNCONV toApn source name destination");  		break;  	default:  		Console.WriteLine ("argument not recognised: {0}\ntry APNCONV without arguments for help."' args [0]);  		break;  	}  	break;  default: {  	switch (args [0].ToLower ()) {  	case "tobmp":  		Console.WriteLine ("WARNING: too many parameters specified. Ommitting surplus parameters.");  		ToBitmap (args [1]' args [2]);  		break;  	case "toapn":  		CreateApn (args [1]' args [2]' args [3]);  		break;  	default:  		Console.WriteLine ("argument not recognised: {0}\ntry APNCONV without arguments for help."' args [0]);  		break;  	}  	break;  }  }  
Magic Number,apnConverter,Program,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Program.cs,parseArgs,The following statement contains a magic number: switch (args.Length) {  case 0:  	DisplayHelp ();  	break;  case 1:  	switch (args [0].ToLower ()) {  	case "tobmp":  		Console.WriteLine ("Usage: APNCONV toBmp source destination");  		break;  	case "toapn":  		Console.WriteLine ("Usage: APNCONV toApn source name destination");  		break;  	default:  		Console.WriteLine ("argument not recognised: {0}\ntry APNCONV without arguments for help."' args [0]);  		break;  	}  	break;  case 2:  	switch (args [1].ToLower ()) {  	case "tobmp":  		Console.WriteLine ("Usage: APNCONV toBmp source destination");  		break;  	case "toapn":  		Console.WriteLine ("Usage: APNCONV toApn source name destination");  		break;  	default:  		Console.WriteLine ("argument not recognised: {0}\ntry APNCONV without arguments for help."' args [0]);  		break;  	}  	break;  case 3:  	switch (args [0].ToLower ()) {  	case "tobmp":  		ToBitmap (args [1]' args [2]);  		break;  	case "toapn":  		Console.WriteLine ("Usage: APNCONV toApn source name destination");  		break;  	default:  		Console.WriteLine ("argument not recognised: {0}\ntry APNCONV without arguments for help."' args [0]);  		break;  	}  	break;  default: {  	switch (args [0].ToLower ()) {  	case "tobmp":  		Console.WriteLine ("WARNING: too many parameters specified. Ommitting surplus parameters.");  		ToBitmap (args [1]' args [2]);  		break;  	case "toapn":  		CreateApn (args [1]' args [2]' args [3]);  		break;  	default:  		Console.WriteLine ("argument not recognised: {0}\ntry APNCONV without arguments for help."' args [0]);  		break;  	}  	break;  }  }  
Magic Number,apnConverter,Program,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Program.cs,parseArgs,The following statement contains a magic number: switch (args.Length) {  case 0:  	DisplayHelp ();  	break;  case 1:  	switch (args [0].ToLower ()) {  	case "tobmp":  		Console.WriteLine ("Usage: APNCONV toBmp source destination");  		break;  	case "toapn":  		Console.WriteLine ("Usage: APNCONV toApn source name destination");  		break;  	default:  		Console.WriteLine ("argument not recognised: {0}\ntry APNCONV without arguments for help."' args [0]);  		break;  	}  	break;  case 2:  	switch (args [1].ToLower ()) {  	case "tobmp":  		Console.WriteLine ("Usage: APNCONV toBmp source destination");  		break;  	case "toapn":  		Console.WriteLine ("Usage: APNCONV toApn source name destination");  		break;  	default:  		Console.WriteLine ("argument not recognised: {0}\ntry APNCONV without arguments for help."' args [0]);  		break;  	}  	break;  case 3:  	switch (args [0].ToLower ()) {  	case "tobmp":  		ToBitmap (args [1]' args [2]);  		break;  	case "toapn":  		Console.WriteLine ("Usage: APNCONV toApn source name destination");  		break;  	default:  		Console.WriteLine ("argument not recognised: {0}\ntry APNCONV without arguments for help."' args [0]);  		break;  	}  	break;  default: {  	switch (args [0].ToLower ()) {  	case "tobmp":  		Console.WriteLine ("WARNING: too many parameters specified. Ommitting surplus parameters.");  		ToBitmap (args [1]' args [2]);  		break;  	case "toapn":  		CreateApn (args [1]' args [2]' args [3]);  		break;  	default:  		Console.WriteLine ("argument not recognised: {0}\ntry APNCONV without arguments for help."' args [0]);  		break;  	}  	break;  }  }  
Magic Number,apnConverter,Program,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Program.cs,parseArgs,The following statement contains a magic number: switch (args.Length) {  case 0:  	DisplayHelp ();  	break;  case 1:  	switch (args [0].ToLower ()) {  	case "tobmp":  		Console.WriteLine ("Usage: APNCONV toBmp source destination");  		break;  	case "toapn":  		Console.WriteLine ("Usage: APNCONV toApn source name destination");  		break;  	default:  		Console.WriteLine ("argument not recognised: {0}\ntry APNCONV without arguments for help."' args [0]);  		break;  	}  	break;  case 2:  	switch (args [1].ToLower ()) {  	case "tobmp":  		Console.WriteLine ("Usage: APNCONV toBmp source destination");  		break;  	case "toapn":  		Console.WriteLine ("Usage: APNCONV toApn source name destination");  		break;  	default:  		Console.WriteLine ("argument not recognised: {0}\ntry APNCONV without arguments for help."' args [0]);  		break;  	}  	break;  case 3:  	switch (args [0].ToLower ()) {  	case "tobmp":  		ToBitmap (args [1]' args [2]);  		break;  	case "toapn":  		Console.WriteLine ("Usage: APNCONV toApn source name destination");  		break;  	default:  		Console.WriteLine ("argument not recognised: {0}\ntry APNCONV without arguments for help."' args [0]);  		break;  	}  	break;  default: {  	switch (args [0].ToLower ()) {  	case "tobmp":  		Console.WriteLine ("WARNING: too many parameters specified. Ommitting surplus parameters.");  		ToBitmap (args [1]' args [2]);  		break;  	case "toapn":  		CreateApn (args [1]' args [2]' args [3]);  		break;  	default:  		Console.WriteLine ("argument not recognised: {0}\ntry APNCONV without arguments for help."' args [0]);  		break;  	}  	break;  }  }  
Magic Number,apnConverter,Program,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Program.cs,parseArgs,The following statement contains a magic number: switch (args.Length) {  case 0:  	DisplayHelp ();  	break;  case 1:  	switch (args [0].ToLower ()) {  	case "tobmp":  		Console.WriteLine ("Usage: APNCONV toBmp source destination");  		break;  	case "toapn":  		Console.WriteLine ("Usage: APNCONV toApn source name destination");  		break;  	default:  		Console.WriteLine ("argument not recognised: {0}\ntry APNCONV without arguments for help."' args [0]);  		break;  	}  	break;  case 2:  	switch (args [1].ToLower ()) {  	case "tobmp":  		Console.WriteLine ("Usage: APNCONV toBmp source destination");  		break;  	case "toapn":  		Console.WriteLine ("Usage: APNCONV toApn source name destination");  		break;  	default:  		Console.WriteLine ("argument not recognised: {0}\ntry APNCONV without arguments for help."' args [0]);  		break;  	}  	break;  case 3:  	switch (args [0].ToLower ()) {  	case "tobmp":  		ToBitmap (args [1]' args [2]);  		break;  	case "toapn":  		Console.WriteLine ("Usage: APNCONV toApn source name destination");  		break;  	default:  		Console.WriteLine ("argument not recognised: {0}\ntry APNCONV without arguments for help."' args [0]);  		break;  	}  	break;  default: {  	switch (args [0].ToLower ()) {  	case "tobmp":  		Console.WriteLine ("WARNING: too many parameters specified. Ommitting surplus parameters.");  		ToBitmap (args [1]' args [2]);  		break;  	case "toapn":  		CreateApn (args [1]' args [2]' args [3]);  		break;  	default:  		Console.WriteLine ("argument not recognised: {0}\ntry APNCONV without arguments for help."' args [0]);  		break;  	}  	break;  }  }  
Magic Number,apnConverter,Program,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Program.cs,parseArgs,The following statement contains a magic number: switch (args.Length) {  case 0:  	DisplayHelp ();  	break;  case 1:  	switch (args [0].ToLower ()) {  	case "tobmp":  		Console.WriteLine ("Usage: APNCONV toBmp source destination");  		break;  	case "toapn":  		Console.WriteLine ("Usage: APNCONV toApn source name destination");  		break;  	default:  		Console.WriteLine ("argument not recognised: {0}\ntry APNCONV without arguments for help."' args [0]);  		break;  	}  	break;  case 2:  	switch (args [1].ToLower ()) {  	case "tobmp":  		Console.WriteLine ("Usage: APNCONV toBmp source destination");  		break;  	case "toapn":  		Console.WriteLine ("Usage: APNCONV toApn source name destination");  		break;  	default:  		Console.WriteLine ("argument not recognised: {0}\ntry APNCONV without arguments for help."' args [0]);  		break;  	}  	break;  case 3:  	switch (args [0].ToLower ()) {  	case "tobmp":  		ToBitmap (args [1]' args [2]);  		break;  	case "toapn":  		Console.WriteLine ("Usage: APNCONV toApn source name destination");  		break;  	default:  		Console.WriteLine ("argument not recognised: {0}\ntry APNCONV without arguments for help."' args [0]);  		break;  	}  	break;  default: {  	switch (args [0].ToLower ()) {  	case "tobmp":  		Console.WriteLine ("WARNING: too many parameters specified. Ommitting surplus parameters.");  		ToBitmap (args [1]' args [2]);  		break;  	case "toapn":  		CreateApn (args [1]' args [2]' args [3]);  		break;  	default:  		Console.WriteLine ("argument not recognised: {0}\ntry APNCONV without arguments for help."' args [0]);  		break;  	}  	break;  }  }  
Magic Number,apnConverter,Program,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Program.cs,parseArgs,The following statement contains a magic number: switch (args [0].ToLower ()) {  case "tobmp":  	ToBitmap (args [1]' args [2]);  	break;  case "toapn":  	Console.WriteLine ("Usage: APNCONV toApn source name destination");  	break;  default:  	Console.WriteLine ("argument not recognised: {0}\ntry APNCONV without arguments for help."' args [0]);  	break;  }  
Magic Number,apnConverter,Program,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Program.cs,parseArgs,The following statement contains a magic number: ToBitmap (args [1]' args [2]);  
Magic Number,apnConverter,Program,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Program.cs,parseArgs,The following statement contains a magic number: switch (args [0].ToLower ()) {  case "tobmp":  	Console.WriteLine ("WARNING: too many parameters specified. Ommitting surplus parameters.");  	ToBitmap (args [1]' args [2]);  	break;  case "toapn":  	CreateApn (args [1]' args [2]' args [3]);  	break;  default:  	Console.WriteLine ("argument not recognised: {0}\ntry APNCONV without arguments for help."' args [0]);  	break;  }  
Magic Number,apnConverter,Program,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Program.cs,parseArgs,The following statement contains a magic number: switch (args [0].ToLower ()) {  case "tobmp":  	Console.WriteLine ("WARNING: too many parameters specified. Ommitting surplus parameters.");  	ToBitmap (args [1]' args [2]);  	break;  case "toapn":  	CreateApn (args [1]' args [2]' args [3]);  	break;  default:  	Console.WriteLine ("argument not recognised: {0}\ntry APNCONV without arguments for help."' args [0]);  	break;  }  
Magic Number,apnConverter,Program,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Program.cs,parseArgs,The following statement contains a magic number: switch (args [0].ToLower ()) {  case "tobmp":  	Console.WriteLine ("WARNING: too many parameters specified. Ommitting surplus parameters.");  	ToBitmap (args [1]' args [2]);  	break;  case "toapn":  	CreateApn (args [1]' args [2]' args [3]);  	break;  default:  	Console.WriteLine ("argument not recognised: {0}\ntry APNCONV without arguments for help."' args [0]);  	break;  }  
Magic Number,apnConverter,Program,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Program.cs,parseArgs,The following statement contains a magic number: ToBitmap (args [1]' args [2]);  
Magic Number,apnConverter,Program,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Program.cs,parseArgs,The following statement contains a magic number: CreateApn (args [1]' args [2]' args [3]);  
Magic Number,apnConverter,Program,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\Program.cs,parseArgs,The following statement contains a magic number: CreateApn (args [1]' args [2]' args [3]);  
Missing Default,apnConverter.gui,ToApnCompo,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\ToApnCompo.cs,browseSourceButton_Click,The following switch statement is missing a default case: switch (dr) {  case DialogResult.Yes: {  	string fileStr = ofd.FileName ?? "";  	sourceFileTextBox.Text = fileStr;  	break;  }  case DialogResult.OK: {  	goto case DialogResult.Yes;  }  }  
Missing Default,apnConverter.gui,ToApnCompo,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\ToApnCompo.cs,checkConvertPossible,The following switch statement is missing a default case: switch (sourceValid && destinationValid) {  case true:  	//enable "convert"-button etc.  	writeApnFileButton.Enabled = true;  	break;  case false:  	//disable "convert"-button etc.  	writeApnFileButton.Enabled = false;  	break;  }  
Missing Default,apnConverter.gui,ToApnCompo,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\ToApnCompo.cs,browseDestinationButton_Click,The following switch statement is missing a default case: switch (dr) {  case DialogResult.Yes: {  	string fileStr = sfd.FileName;  	fileStr = fileStr ?? "";  	if (fileStr.Contains ("/") || fileStr.Contains (@"\")) {  		int lastIndex = fileStr.LastIndexOfAny (new char[] {  			'/''  			'\\'  		});  		//make filename uppercase  		int size = fileStr.Length;  		fileStr = fileStr.Substring (0' lastIndex) + fileStr.Substring (lastIndex).ToUpper ();  		//if filename is too short' fill it up with zeros..  		for (int i = -1; (size - lastIndex) + i < 6 + 4; i++) {  			fileStr = fileStr.Insert (fileStr.Length - 4' "0");  		}  		//else if filename too long' shorten it  		for (int i = 1; (size - lastIndex) - i > 6 + 4; i++) {  			fileStr = fileStr.Remove (fileStr.Length - 5' 1);  		}  	}  	destinationFileTextBox.Text = fileStr;  	break;  }  case DialogResult.OK: {  	goto case DialogResult.Yes;  }  }  
Missing Default,apnConverter.gui,ToBmpCompo,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\ToBmpCompo.cs,browseSourceButton_Click,The following switch statement is missing a default case: switch (dr) {  case DialogResult.OK: {  	string fileStr = ofd.FileName ?? "";  	sourceFileTextBox.Text = fileStr;  	break;  }  case DialogResult.Yes: {  	goto case DialogResult.OK;  }  }  
Missing Default,apnConverter.gui,ToBmpCompo,C:\repos\dr1fter_apn-converter\src\apnConverter\gui\ToBmpCompo.cs,browseDestinationButton_Click,The following switch statement is missing a default case: switch (result) {  case DialogResult.OK:  	destinationFileTextBox.Text = sfd.FileName;  	break;  case DialogResult.Yes:  	goto case DialogResult.OK;  }  
Missing Default,apnConverter,ApnDataRow,C:\repos\dr1fter_apn-converter\src\apnConverter\logic\ApnDataRow.cs,ApnDataRow,The following switch statement is missing a default case: switch (pxString.Length) //prepend leading zeros  {  case 3:  	pxString = "0" + pxString;  	break;  case 2:  	pxString = "00" + pxString;  	break;  case 1:  	pxString = "000" + pxString;  	break;  }  
