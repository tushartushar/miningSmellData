Implementation smell,Namespace,Class,File,Method,Description
Long Method,SceneNavi.ActorRendering,MIPSEvaluator,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPSEvaluator.cs,Evaluate,The method has 154 lines of code.
Long Method,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The method has 283 lines of code.
Long Method,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,RefreshCurrentData,The method has 156 lines of code.
Long Method,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_Paint,The method has 158 lines of code.
Long Method,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,TryPickObject,The method has 110 lines of code.
Long Method,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The method has 1670 lines of code.
Long Method,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The method has 134 lines of code.
Long Method,SceneNavi,XMLActorDefinitionReader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\XMLActorDefinitionReader.cs,XMLActorDefinitionReader,The method has 128 lines of code.
Long Method,SceneNavi,XMLActorDefinitionReader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\XMLActorDefinitionReader.cs,CreateActorEditingControls,The method has 138 lines of code.
Long Method,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,ROMHandler,The method has 100 lines of code.
Long Method,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The method has 130 lines of code.
Long Method,SceneNavi.SimpleF3DEX2,General,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\General.cs,PerformModeChanges,The method has 114 lines of code.
Long Method,SceneNavi.SimpleF3DEX2.CombinerEmulation,ArbCombineProgram,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\CombinerEmulation\ArbCombineProgram.cs,ArbCombineProgram,The method has 429 lines of code.
Long Method,SceneNavi.SimpleF3DEX2.CombinerEmulation,GLSLShaders,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\CombinerEmulation\GLSLShaders.cs,GLSLShaders,The method has 351 lines of code.
Complex Method,SceneNavi.ActorRendering,MIPSEvaluator,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPSEvaluator.cs,Evaluate,Cyclomatic complexity of the method is 32
Complex Method,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,CreateSceneTree,Cyclomatic complexity of the method is 17
Complex Method,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,CreateStatusString,Cyclomatic complexity of the method is 11
Complex Method,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,RefreshCurrentData,Cyclomatic complexity of the method is 18
Complex Method,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,tvScenes_AfterSelect,Cyclomatic complexity of the method is 9
Complex Method,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,StartupExtensionChecks,Cyclomatic complexity of the method is 10
Complex Method,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_Paint,Cyclomatic complexity of the method is 35
Complex Method,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,TryPickObject,Cyclomatic complexity of the method is 27
Complex Method,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_MouseDown,Cyclomatic complexity of the method is 12
Complex Method,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_MouseMove,Cyclomatic complexity of the method is 19
Complex Method,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeDataGridViews,Cyclomatic complexity of the method is 8
Complex Method,SceneNavi,XMLActorDefinitionReader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\XMLActorDefinitionReader.cs,XMLActorDefinitionReader,Cyclomatic complexity of the method is 35
Complex Method,SceneNavi,XMLActorDefinitionReader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\XMLActorDefinitionReader.cs,CreateActorEditingControls,Cyclomatic complexity of the method is 13
Complex Method,SceneNavi.Controls,ToolStripRadioButtonMenuItem,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\Controls\ToolStripRadioButtonMenuItem.cs,OnPaint,Cyclomatic complexity of the method is 9
Complex Method,SceneNavi.HeaderCommands,Collision,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Collision.cs,Collision,Cyclomatic complexity of the method is 10
Complex Method,SceneNavi.OpenGLHelpers,Triangle,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\DisplayListEx.cs,Render,Cyclomatic complexity of the method is 10
Complex Method,SceneNavi.OpenGLHelpers,Camera,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\Camera.cs,MouseMove,Cyclomatic complexity of the method is 10
Complex Method,SceneNavi.OpenGLHelpers,Camera,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\Camera.cs,KeyUpdate,Cyclomatic complexity of the method is 9
Complex Method,SceneNavi.ROMHandler,SceneTableEntryMajora,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryMajora.cs,ReadScene,Cyclomatic complexity of the method is 11
Complex Method,SceneNavi.ROMHandler,DMATableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\DMATableEntry.cs,Identify,Cyclomatic complexity of the method is 23
Complex Method,SceneNavi.ROMHandler,SceneTableEntryOcarina,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryOcarina.cs,ReadScene,Cyclomatic complexity of the method is 11
Complex Method,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,ROMHandler,Cyclomatic complexity of the method is 11
Complex Method,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindSceneTable,Cyclomatic complexity of the method is 10
Complex Method,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindActorTable,Cyclomatic complexity of the method is 8
Complex Method,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindObjectTable,Cyclomatic complexity of the method is 10
Complex Method,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,Convert,Cyclomatic complexity of the method is 11
Complex Method,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,Render,Cyclomatic complexity of the method is 16
Complex Method,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,Cyclomatic complexity of the method is 33
Complex Method,SceneNavi.SimpleF3DEX2,General,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\General.cs,PerformModeChanges,Cyclomatic complexity of the method is 17
Complex Method,SceneNavi.SimpleF3DEX2.CombinerEmulation,ArbCombineProgram,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\CombinerEmulation\ArbCombineProgram.cs,ArbCombineProgram,Cyclomatic complexity of the method is 113
Complex Method,SceneNavi.SimpleF3DEX2.CombinerEmulation,GLSLShaders,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\CombinerEmulation\GLSLShaders.cs,GLSLShaders,Cyclomatic complexity of the method is 86
Long Parameter List,SceneNavi.ActorRendering,MIPSEvaluator,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPSEvaluator.cs,MIPSEvaluator,The method has 5 parameters. Parameters: rom' dma' ramadr' reghook' var
Long Parameter List,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,ScaleRange,The method has 5 parameters. Parameters: value' minValue' maxValue' minScaleValue' maxScaleValue
Long Parameter List,SceneNavi,ExtensionMethods,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ExtensionMethods.cs,Scale,The method has 5 parameters. Parameters: val' min' max' minScale' maxScale
Long Parameter List,SceneNavi,ExtensionMethods,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ExtensionMethods.cs,Scale,The method has 5 parameters. Parameters: val' min' max' minScale' maxScale
Long Parameter List,SceneNavi,XMLActorDefinitionReader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\XMLActorDefinitionReader.cs,CreateActorEditingControls,The method has 5 parameters. Parameters: ac' tlpex' numberchanged' tag' individual
Long Parameter List,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Entry,The method has 5 parameters. Parameters: rom' adr' no' isspawn' istrans
Long Parameter List,SceneNavi.HeaderCommands,RoomInfoClass,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Rooms.cs,RoomInfoClass,The method has 5 parameters. Parameters: rom' parent' num' s' e
Long Parameter List,SceneNavi.OpenGLHelpers,ScreenWorldConversion,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\ScreenWorldConversion.cs,Project,The method has 5 parameters. Parameters: world' modelviewMatrix' projectionMatrix' viewport' screen
Long Parameter List,SceneNavi.ROMHandler,HeaderLoader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\HeaderLoader.cs,HeaderLoader,The method has 5 parameters. Parameters: rom' parent' seg' ofs' number
Long Parameter List,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,RGBA16,The method has 6 parameters. Parameters: Width' Height' LineSize' Source' SourceOffset' Target
Long Parameter List,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,CI4,The method has 8 parameters. Parameters: Width' Height' LineSize' Source' SourceOffset' Target' Palette' PalColors
Long Parameter List,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,CI8,The method has 7 parameters. Parameters: Width' Height' LineSize' Source' SourceOffset' Target' PalColors
Long Parameter List,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA4,The method has 6 parameters. Parameters: Width' Height' LineSize' Source' SourceOffset' Target
Long Parameter List,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA8,The method has 6 parameters. Parameters: Width' Height' LineSize' Source' SourceOffset' Target
Long Parameter List,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA16,The method has 6 parameters. Parameters: Width' Height' LineSize' Source' SourceOffset' Target
Long Parameter List,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,I4,The method has 6 parameters. Parameters: Width' Height' LineSize' Source' SourceOffset' Target
Long Parameter List,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,I8,The method has 6 parameters. Parameters: Width' Height' LineSize' Source' SourceOffset' Target
Long Parameter List,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,Convert,The method has 9 parameters. Parameters: Format' Source' SourceOffset' Target' Width' Height' LineSize' Palette' PalColors
Long Parameter List,SceneNavi.SimpleF3DEX2.CombinerEmulation,GLSLShaders,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\CombinerEmulation\GLSLShaders.cs,CreateShaders,The method has 5 parameters. Parameters: vs' fs' vertexObject' fragmentObject' program
Long Identifier,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,,The length of the parameter requiredOglExtensionsCombinerGeneral is 36.
Long Identifier,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,,The length of the parameter requiredOglExtensionsARBCombiner is 32.
Long Identifier,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,,The length of the parameter requiredOglExtensionsGLSLCombiner is 33.
Long Identifier,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,,The length of the parameter renderRoomActorsToolStripMenuItem is 33.
Long Identifier,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,,The length of the parameter renderSpawnPointsToolStripMenuItem is 34.
Long Identifier,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,,The length of the parameter renderTransitionsToolStripMenuItem is 34.
Long Identifier,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,,The length of the parameter rOMInformationToolStripMenuItem is 31.
Long Identifier,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,,The length of the parameter editDataTablesToolStripMenuItem is 31.
Long Identifier,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,,The length of the parameter renderPathWaypointsToolStripMenuItem is 36.
Long Identifier,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,,The length of the parameter linkAllWaypointsInPathToolStripMenuItem is 39.
Long Identifier,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,,The length of the parameter enableTexturesToolStripMenuItem is 31.
Long Identifier,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,,The length of the parameter renderCollisionToolStripMenuItem is 32.
Long Identifier,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,,The length of the parameter collisionHighlightToolStripMenuItem is 35.
Long Identifier,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,,The length of the parameter xPlus45DegreesToolStripMenuItem is 31.
Long Identifier,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,,The length of the parameter xMinus45DegreesToolStripMenuItem is 32.
Long Identifier,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,,The length of the parameter yPlus45DegreesToolStripMenuItem is 31.
Long Identifier,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,,The length of the parameter yMinus45DegreesToolStripMenuItem is 32.
Long Identifier,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,,The length of the parameter zPlus45DegreesToolStripMenuItem is 31.
Long Identifier,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,,The length of the parameter zMinus45DegreesToolStripMenuItem is 32.
Long Identifier,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,,The length of the parameter resetCameraPositionToolStripMenuItem is 36.
Long Identifier,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,,The length of the parameter checkForUpdateToolStripMenuItem is 31.
Long Identifier,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,,The length of the parameter renderElementsToolStripMenuItem is 31.
Long Identifier,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,,The length of the parameter editAreaTitleCardToolStripMenuItem is 34.
Long Identifier,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,,The length of the parameter renderWaterboxesToolStripMenuItem is 33.
Long Identifier,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,,The length of the parameter showWaterboxesPerRoomToolStripMenuItem is 38.
Long Identifier,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,,The length of the parameter enableAntiAliasingToolStripMenuItem is 35.
Long Identifier,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,,The length of the parameter enableMipmapsToolStripMenuItem is 30.
Long Identifier,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,,The length of the parameter openGLInformationToolStripMenuItem is 34.
Long Statement,SceneNavi.ActorRendering,Result,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPSEvaluator.cs,ToString,The length of the statement  "                return string.Format("(Loc: {0:X8} Tgt: {1:X8} Args: {2:X8} {3:X8} {4:X8} {5:X8})"' OpcodeAddress' TargetAddress' Arguments[0]' Arguments[1]' Arguments[2]' Arguments[3]); " is 170.
Long Statement,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,DrawGradient,The length of the statement  "            using (LinearGradientBrush lgb = new LinearGradientBrush(e.ClipRectangle' startColor' gradientColor' LinearGradientMode.Horizontal)) " is 132.
Long Statement,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,DrawMarker,The length of the statement  "            using (Pen pen = new Pen((colorComponent == ColorComponents.Alpha ? Color.Black : Color.FromArgb((-orgValue + 255)' (-orgValue + 255)' (-orgValue + 255)))' 4.0f)) " is 162.
Long Statement,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The length of the statement  "            this.btnOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The length of the statement  "            this.btnCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 148.
Long Statement,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The length of the statement  "            this.nudRed.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 142.
Long Statement,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The length of the statement  "            this.nudGreen.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The length of the statement  "            this.nudBlue.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 143.
Long Statement,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The length of the statement  "            this.nudAlpha.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 144.
Long Statement,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The length of the statement  "            this.pbColorGradientAlpha.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 153.
Long Statement,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The length of the statement  "            this.pbPreview.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 142.
Long Statement,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The length of the statement  "            this.pbColorGradientBlue.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 152.
Long Statement,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The length of the statement  "            this.pbColorGradientGreen.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 153.
Long Statement,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The length of the statement  "            this.pbColorGradientRed.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 151.
Long Statement,SceneNavi,Configuration,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\Configuration.cs,PrepareConfig,The length of the statement  "            configPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)' System.Windows.Forms.Application.ProductName); " is 142.
Long Statement,SceneNavi,ExtensionMethods,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ExtensionMethods.cs,FlattenMenu,The length of the statement  "            return coll.OfType<Controls.ToolStripHintMenuItem>().Concat(coll.OfType<Controls.ToolStripHintMenuItem>().SelectMany(x => FlattenMenu(x.DropDownItems))); " is 153.
Long Statement,SceneNavi,ExtensionMethods,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ExtensionMethods.cs,SetCommonImageFilter,The length of the statement  "            foreach (ImageCodecInfo codec in codecs) separateFilters.Add(string.Format("{0} Files ({1})|{1}"' codec.FormatDescription' codec.FilenameExtension.ToLowerInvariant())); " is 168.
Long Statement,SceneNavi,ExtensionMethods,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ExtensionMethods.cs,SetCommonImageFilter,The length of the statement  "            fileDialog.Filter = string.Format("{0}|Image Files ({1})|{1}|All Files (*.*)|*.*"' string.Join("|"' separateFilters)' imageExtensions.ToLowerInvariant()); " is 154.
Long Statement,SceneNavi,ExtensionMethods,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ExtensionMethods.cs,SetCommonImageFilter,The length of the statement  "            if (defaultExtension != null) fileDialog.FilterIndex = (codecs.IndexOf(codecs.FirstOrDefault(x => x.FormatDescription.ToLowerInvariant().Contains(defaultExtension.ToLowerInvariant()))) + 1); " is 190.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,SetFormTitle,The length of the statement  "            string filenamePart = ((rom != null && rom.Loaded) ? string.Format(" - [{0}]"' Path.GetFileName(rom.Filename)) : string.Empty); " is 127.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,SetFormTitle,The length of the statement  "            string scenePart = (individualFileMode ? string.Format(" ({0})"' Path.GetFileName(Configuration.LastSceneFile)) : string.Empty); " is 128.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,Application_Idle,The length of the statement  "                bsiCamCoords.Text = string.Format(System.Globalization.CultureInfo.InvariantCulture' "Cam X: {0:00.000}' Y: {1:00.000}' Z: {2:00.000}"' camera.Pos.X' camera.Pos.Y' camera.Pos.Z); " is 178.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,SettingsGUIInit,The length of the statement  "                Controls.ToolStripRadioButtonMenuItem tsmi = new Controls.ToolStripRadioButtonMenuItem(kvp.Value[0]) { Tag = kvp.Key' CheckOnClick = true' HelpText = kvp.Value[1] }; " is 165.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,SettingsGUIInit,The length of the statement  "                Controls.ToolStripRadioButtonMenuItem tsmi = new Controls.ToolStripRadioButtonMenuItem(kvp.Value[0]) { Tag = kvp.Key' CheckOnClick = true' HelpText = kvp.Value[1] }; " is 165.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,CreateSceneTree,The length of the statement  "                root = new TreeNode(string.Format("{0} ({1}' v1.{2}; {3} scenes)"' rom.Title' rom.GameID' rom.Version' rom.Scenes.Count)) { Tag = rom }; " is 136.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,CreateSceneTree,The length of the statement  "                        HeaderCommands.Rooms rooms = ste.GetSceneHeaders()[0].Commands.FirstOrDefault(x => x.Command == HeaderLoader.CommandTypeIDs.Rooms) as HeaderCommands.Rooms; " is 155.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,CreateSceneTree,The length of the statement  "                            TreeNode sheadnode = new TreeNode((de.Value == null ? string.Format("Stage #{0}"' shead.Number) : (string)de.Value)) { Tag = hp }; " is 130.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,CreateSceneTree,The length of the statement  "                HeaderCommands.Rooms rooms = tempScene.GetSceneHeaders()[0].Commands.FirstOrDefault(x => x.Command == HeaderLoader.CommandTypeIDs.Rooms) as HeaderCommands.Rooms; " is 161.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,openROMToolStripMenuItem_Click,The length of the statement  "                                //if (!((cmd.Data >> 56) == (byte)HeaderLoader.CommandTypeIDs.SubHeaders) && !(cmd is HeaderCommands.Actors) && !(cmd is HeaderCommands.Collision) && " is 149.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,openROMToolStripMenuItem_Click,The length of the statement  "                                //    !(cmd is HeaderCommands.MeshHeader) && !(cmd is HeaderCommands.Objects) && !(cmd is HeaderCommands.Rooms) && !(cmd is HeaderCommands.SpecialObjects) && " is 157.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,openROMToolStripMenuItem_Click,The length of the statement  "                                        //if (!((cmd.Data >> 56) == (byte)HeaderLoader.CommandTypeIDs.SubHeaders) && !(cmd is HeaderCommands.Actors) && !(cmd is HeaderCommands.Collision) && " is 149.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,openROMToolStripMenuItem_Click,The length of the statement  "                                        //    !(cmd is HeaderCommands.MeshHeader) && !(cmd is HeaderCommands.Objects) && !(cmd is HeaderCommands.Rooms) && !(cmd is HeaderCommands.SpecialObjects) && " is 157.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,openROMToolStripMenuItem_Click,The length of the statement  "                editDataTablesToolStripMenuItem.Enabled = saveToolStripMenuItem.Enabled = openSceneToolStripMenuItem.Enabled = rOMInformationToolStripMenuItem.Enabled = customGLControl.Enabled = rom.Loaded; " is 190.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,openSceneToolStripMenuItem_Click,The length of the statement  "                if ((tempScene = (!rom.IsMajora ? (ISceneTableEntry)new SceneTableEntryOcarina(rom' ofdOpenScene.FileName) : (ISceneTableEntry)new SceneTableEntryMajora(rom' ofdOpenScene.FileName))) != null) " is 191.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,SaveAllData,The length of the statement  "                if (tempRooms.RoomInformation.Count != 1) throw new Exception("Zero or more than one individual room file loaded; this should not happen!"); " is 140.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,SaveAllData,The length of the statement  "                BinaryWriter bwScene = new BinaryWriter(File.Open(Configuration.LastSceneFile' FileMode.Open' FileAccess.ReadWrite' FileShare.ReadWrite)); " is 138.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,SaveAllData,The length of the statement  "                BinaryWriter bwRoom = new BinaryWriter(File.Open(Configuration.LastRoomFile' FileMode.Open' FileAccess.ReadWrite' FileShare.ReadWrite)); " is 136.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,ParseStoreHeaders,The length of the statement  "                    HeaderCommands.Rooms rooms = (hl.Commands.FirstOrDefault(x => x.Command == HeaderLoader.CommandTypeIDs.Rooms) as HeaderCommands.Rooms); " is 135.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,ParseStoreHeaders,The length of the statement  "                        foreach (HeaderCommands.Rooms.RoomInfoClass ric in rooms.RoomInformation) ParseStoreHeaders(ric.Headers' databuf' (int)ric.Start); " is 130.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,CreateStatusString,The length of the statement  "                    HeaderCommands.Rooms rooms = (currentScene.GetCurrentSceneHeader().Commands.FirstOrDefault(x => x.Command == HeaderLoader.CommandTypeIDs.Rooms) as HeaderCommands.Rooms); " is 169.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,CreateStatusString,The length of the statement  "                    if (rooms != null) infostrs.Add(string.Format("{0} room{1}"' rooms.RoomInformation.Count' (rooms.RoomInformation.Count != 1 ? "s" : ""))); " is 138.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,CreateStatusString,The length of the statement  "                infostrs.Add(string.Format("Ready{0}"' ((Configuration.ShownIntelWarning || Configuration.ShownExtensionWarning) ? " (limited combiner)" : string.Empty))); " is 155.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,CreateStatusString,The length of the statement  "                if (rom != null && rom.Scenes != null) infostrs.Add(string.Format("{0} ({1}' v1.{2}; {3} scenes)"' rom.Title' rom.GameID' rom.Version' rom.Scenes.Count)); " is 154.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,CreateStatusString,The length of the statement  "                infostrs.Add(string.Format("{0} room actor{1}"' currentRoom.ActiveRoomActorData.ActorList.Count' (currentRoom.ActiveRoomActorData.ActorList.Count != 1 ? "s" : ""))); " is 165.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,CreateStatusString,The length of the statement  "                infostrs.Add(string.Format("{0} transition actor{1}"' currentScene.GetActiveTransitionData().ActorList.Count' (currentScene.GetActiveTransitionData().ActorList.Count != 1 ? "s" : ""))); " is 185.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,CreateStatusString,The length of the statement  "                infostrs.Add(string.Format("{0} spawn point{1}"' currentScene.GetActiveSpawnPointData().ActorList.Count' (currentScene.GetActiveSpawnPointData().ActorList.Count != 1 ? "s" : ""))); " is 180.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,CreateStatusString,The length of the statement  "                infostrs.Add(string.Format("{0} object{1}"' currentRoom.ActiveObjects.ObjectList.Count' (currentRoom.ActiveObjects.ObjectList.Count != 1 ? "s" : ""))); " is 151.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,CreateStatusString,The length of the statement  "                infostrs.Add(string.Format("{0} path{1}"' currentScene.GetActiveWaypoints().Paths.Count' (currentScene.GetActiveWaypoints().Paths.Count != 1 ? "s" : ""))); " is 155.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,RefreshCurrentData,The length of the statement  "                    editAreaTitleCardToolStripMenuItem.Enabled = (!rom.IsMajora && steOcarina.LabelStartAddress != 0 && steOcarina.LabelEndAddress != 0); " is 133.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,RefreshCurrentData,The length of the statement  "                HeaderCommands.Rooms rooms = (currentScene.GetCurrentSceneHeader().Commands.FirstOrDefault(x => x.Command == HeaderLoader.CommandTypeIDs.Rooms) as HeaderCommands.Rooms); " is 169.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,RefreshCurrentData,The length of the statement  "                    roomsForWaterboxSelection.Add(new XMLActorDefinitionReader.Definition.Item.Option() { Description = "(All Rooms)"' Value = 0x3F }); " is 131.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,RefreshCurrentData,The length of the statement  "                        roomsForWaterboxSelection.Add(new XMLActorDefinitionReader.Definition.Item.Option() { Description = ric.Description' Value = ric.Number }); " is 139.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,RefreshCurrentData,The length of the statement  "                            allMeshHeaders.Add(hl.Commands.FirstOrDefault(x => x.Command == HeaderLoader.CommandTypeIDs.MeshHeader) as HeaderCommands.MeshHeader); " is 134.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,RefreshCurrentData,The length of the statement  "                cbCollisionPolys.Enabled = cbCollisionPolyTypes.Enabled = txtColPolyRawData.Enabled = nudColPolyType.Enabled = cbColPolyGroundTypes.Enabled = false; " is 148.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,RefreshCurrentData,The length of the statement  "            if (currentScene != null && currentScene.GetActiveCollision() != null && currentScene.GetActiveCollision().Waterboxes.Count > 0) " is 128.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,dgvObjects_CellParsing,The length of the statement  "                    if (ushort.TryParse((ishex ? str.Substring(2) : str)' (ishex ? System.Globalization.NumberStyles.AllowHexSpecifier : System.Globalization.NumberStyles.None)' " is 157.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,propertiesToolStripMenuItem_Click,The length of the statement  "                    string.Format("Stage: {0}\nScene header: #{1} (0x{2:X})\n"' hp.Description' hp.SceneHeader.Number' hp.SceneHeader.Offset)' " is 122.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,propertiesToolStripMenuItem_Click,The length of the statement  "                    string.Format("Filename: {0}\nROM location: 0x{1:X} - 0x{2:X}\nRoom headers: {3} headers"' ric.DMAFilename' ric.Start' ric.End' ric.Headers.Count)' " is 147.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,StartupExtensionChecks,The length of the statement  "            // ex.    bool hasActiveTexture = ((GraphicsContext.CurrentContext as IGraphicsContextInternal).GetAddress("glActiveTexture") != IntPtr.Zero); " is 142.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,StartupExtensionChecks,The length of the statement  "            // might help with intel support? at least on more modern intel chipsets? dunno' whatever' might be something to do for the future " is 130.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,StartupExtensionChecks,The length of the statement  "            /* Check for those damn Intel chips and their shitty drivers(?)' then disable combiner emulation if found. I'm sick of bug reports I can't fix because Intel is dumb. */ " is 168.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,StartupExtensionChecks,The length of the statement  "                        "Your graphics hardware has been detected as being Intel-based. Because of known problems with Intel hardware and proper OpenGL support' " + " is 140.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,StartupExtensionChecks,The length of the statement  "                        "combiner emulation has been disabled and correct graphics rendering cannot be guaranteed."' "Intel Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 156.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,StartupExtensionChecks,The length of the statement  "                extErrorMessages.AppendLine("Multitexturing is not supported. Combiner emulation has been disabled and correct graphics rendering cannot be guaranteed."); " is 154.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,StartupExtensionChecks,The length of the statement  "                        sb.AppendFormat("The following OpenGL Extension{0} not supported by your hardware:\n"' ((extMissAll.Count - 1) > 0 ? "s are" : " is")); " is 135.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,DisableCombiner,The length of the statement  "            if ((arb && currentCombinerType == CombinerTypes.ArbCombiner) || (glsl && currentCombinerType == CombinerTypes.GLSLCombiner)) " is 125.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_Paint,The length of the statement  "                                    cbSpawnPoints.Visible ? HeaderCommands.PickableObjectRenderType.Selected : HeaderCommands.PickableObjectRenderType.Normal); " is 123.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_Paint,The length of the statement  "                                    cbTransitions.Visible ? HeaderCommands.PickableObjectRenderType.Selected : HeaderCommands.PickableObjectRenderType.Normal); " is 123.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_Paint,The length of the statement  "                            HeaderCommands.Waypoints.Waypoint selwp = (dgvPathWaypoints.SelectedCells.Count != 0 ? dgvPathWaypoints.SelectedCells[0].OwningRow.DataBoundItem as HeaderCommands.Waypoints.Waypoint : null); " is 190.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_Paint,The length of the statement  "                                wp.Render(wp == selwp && cbPathHeaders.Visible ? HeaderCommands.PickableObjectRenderType.Selected : HeaderCommands.PickableObjectRenderType.Normal); " is 148.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_Paint,The length of the statement  "                            foreach (HeaderCommands.Collision.Polygon poly in currentScene.GetActiveCollision().Polygons) poly.Render(HeaderCommands.PickableObjectRenderType.NoColor); " is 155.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_Paint,The length of the statement  "                                double alpha = ((Configuration.ShowWaterboxesPerRoom && currentRoom != null && (wb.RoomNumber != currentRoom.Number && wb.RoomNumber != 0x3F)) ? 0.1 : 0.5); " is 156.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_Paint,The length of the statement  "                                double alpha = ((Configuration.ShowWaterboxesPerRoom && currentRoom != null && (wb.RoomNumber != currentRoom.Number && wb.RoomNumber != 0x3F)) ? 0.1 : 0.5); " is 156.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,RenderInit,The length of the statement  "            Initialization.CreateViewportAndProjection(Initialization.ProjectionTypes.Perspective' rect' 0.001f' (currentEnvSettings != null ? ((float)currentEnvSettings.DrawDistance / 50.0f) : 300.0f)); " is 191.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,RenderScene,The length of the statement  "                    (currentScene.GetCurrentSceneHeader().Commands.FirstOrDefault(x => x.Command == HeaderLoader.CommandTypeIDs.Rooms) as HeaderCommands.Rooms).RoomInformation) " is 156.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,RenderScene,The length of the statement  "                    HeaderCommands.MeshHeader mh = (ric.Headers[0].Commands.FirstOrDefault(x => x.Command == HeaderLoader.CommandTypeIDs.MeshHeader) as HeaderCommands.MeshHeader); " is 159.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,RenderMeshHeader,The length of the statement  "            if (mh.DLs == null || displayListsDirty || mh.CachedWithTextures != Configuration.RenderTextures || mh.CachedWithCombinerType != Configuration.CombinerType) " is 156.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,RenderTextOverlay,The length of the statement  "            if (!Configuration.OGLVSync) glText.Print(string.Format(System.Globalization.CultureInfo.InvariantCulture' "{0:0.00} FPS"' fpsMonitor.Value)' new Vector2d(10.0' 10.0)' Color.FromArgb(128' Color.Black)); " is 202.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,TryPickObject,The length of the statement  "            if (allMeshHeaders != null && currentRoom == null && !Configuration.RenderCollision && allMeshHeaders.Count > 0 && allMeshHeaders[0].IsMoveable == moveable) " is 156.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,TryPickObject,The length of the statement  "            if (currentRoom != null && currentRoom.ActiveRoomActorData != null && Configuration.RenderRoomActors && currentRoom.ActiveRoomActorData.ActorList.Count > 0 && " is 158.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,TryPickObject,The length of the statement  "            if (currentScene.GetActiveSpawnPointData() != null && Configuration.RenderSpawnPoints && currentScene.GetActiveSpawnPointData().ActorList.Count > 0 && " is 150.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,TryPickObject,The length of the statement  "            if (currentScene.GetActiveTransitionData() != null && Configuration.RenderTransitions && currentScene.GetActiveTransitionData().ActorList.Count > 0 && " is 150.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,TryPickObject,The length of the statement  "            if (activePathHeader != null && activePathHeader.Points != null && Configuration.RenderPathWaypoints && activePathHeader.Points.Count > 0 && " is 140.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,TryPickObject,The length of the statement  "            if (currentScene.GetActiveCollision() != null && Configuration.RenderWaterboxes && currentScene.GetActiveCollision().Waterboxes.Count > 0 && " is 140.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,TryPickObject,The length of the statement  "            if (currentScene.GetActiveCollision() != null && Configuration.RenderCollision && currentScene.GetActiveCollision().Polygons.Count > 0 && " is 137.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,TryPickObject,The length of the statement  "                    DataGridViewRow row = dgvPathWaypoints.Rows.OfType<DataGridViewRow>().FirstOrDefault(xx => xx.DataBoundItem == picked as HeaderCommands.Waypoints.Waypoint); " is 156.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_MouseDown,The length of the statement  "                        if (Convert.ToBoolean(camera.ButtonsDown & MouseButtons.Left) || Convert.ToBoolean(camera.ButtonsDown & MouseButtons.Middle)) " is 125.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_MouseDown,The length of the statement  "                                        xAxisToolStripMenuItem.Enabled = !(ac.Definition.Items.FirstOrDefault(x => x.Usage == XMLActorDefinitionReader.Definition.Item.Usages.RotationX) == null); " is 154.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_MouseDown,The length of the statement  "                                        yAxisToolStripMenuItem.Enabled = !(ac.Definition.Items.FirstOrDefault(x => x.Usage == XMLActorDefinitionReader.Definition.Item.Usages.RotationY) == null); " is 154.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_MouseDown,The length of the statement  "                                        zAxisToolStripMenuItem.Enabled = !(ac.Definition.Items.FirstOrDefault(x => x.Usage == XMLActorDefinitionReader.Definition.Item.Usages.RotationZ) == null); " is 154.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_MouseDown,The length of the statement  "                                        rotateToolStripMenuItem.Enabled = (xAxisToolStripMenuItem.Enabled || yAxisToolStripMenuItem.Enabled || zAxisToolStripMenuItem.Enabled); " is 135.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_MouseMove,The length of the statement  "                            if (Convert.ToBoolean(e.Button & MouseButtons.Middle) || (Convert.ToBoolean(e.Button & MouseButtons.Left) && keysDown[(ushort)Keys.ControlKey])) " is 144.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,EditVertexColor,The length of the statement  "            ColorPickerDialog cdlg = new ColorPickerDialog(Color.FromArgb(vertex.Colors[3]' vertex.Colors[0]' vertex.Colors[1]' vertex.Colors[2])); " is 135.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,EditVertexColor,The length of the statement  "                // KLUDGE! Write to local room data HERE for rendering' write to ROM in SimpleF3DEX2.Vertex' the vertex.Store(...) below " is 120.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,nudSceneMetaReverb_ValueChanged,The length of the statement  "            if (currentScene != null && currentScene.GetActiveSettingsSoundScene() != null) currentScene.GetActiveSettingsSoundScene().Reverb = (byte)((NumericUpDown)sender).Value; " is 168.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,nudSceneMetaNightSFX_ValueChanged,The length of the statement  "            if (currentScene != null && currentScene.GetActiveSettingsSoundScene() != null) currentScene.GetActiveSettingsSoundScene().NightSfxID = (byte)((NumericUpDown)sender).Value; " is 172.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,cbTransitions_SelectedIndexChanged,The length of the statement  "                rooms = currentScene.GetCurrentSceneHeader().Commands.FirstOrDefault(x => x.Command == HeaderLoader.CommandTypeIDs.Rooms) as HeaderCommands.Rooms; " is 146.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,dgvPathWaypoints_RowPostPaint,The length of the statement  "                e.Graphics.DrawString((e.RowIndex + 1).ToString()' e.InheritedRowStyle.Font' b' e.RowBounds.Location.X + 18' e.RowBounds.Location.Y + 4); " is 137.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,dgvPathWaypoints_SelectionChanged,The length of the statement  "            HeaderCommands.Waypoints.Waypoint selwp = (dgvPathWaypoints.SelectedCells.Count != 0 ? dgvPathWaypoints.SelectedCells[0].OwningRow.DataBoundItem as HeaderCommands.Waypoints.Waypoint : null); " is 190.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,btnJumpToPolyType_Click,The length of the statement  "                cbCollisionPolyTypes.SelectedItem = (colPolyTypeDataBinding.List as List<HeaderCommands.Collision.PolygonType>).FirstOrDefault(x => x.Number == currentCollisionPolygon.PolygonType); " is 181.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,RefreshColPolyTypeControls,The length of the statement  "            cbColPolyGroundTypes.SelectedItem = HeaderCommands.Collision.PolygonType.GroundTypes.FirstOrDefault(x => x.Value == currentColPolygonType.GroundTypeID); " is 152.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,txtColPolyRawData_TextChanged,The length of the statement  "            System.Globalization.NumberStyles ns = (txt.Text.StartsWith("0x") ? System.Globalization.NumberStyles.HexNumber : System.Globalization.NumberStyles.Integer); " is 157.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,cbColPolyGroundTypes_SelectedIndexChanged,The length of the statement  "            currentColPolygonType.GroundTypeID = (((ComboBox)sender).SelectedItem as HeaderCommands.Collision.PolygonType.GroundType).Value; " is 128.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,cbWaterboxes_SelectedIndexChanged,The length of the statement  "                txtWaterboxPositionX.Enabled = txtWaterboxPositionY.Enabled = txtWaterboxPositionZ.Enabled = txtWaterboxSizeX.Enabled = txtWaterboxSizeZ.Enabled = txtWaterboxProperties.Enabled " is 176.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,ModifyCurrentWaterbox,The length of the statement  "                currentWaterbox.Position = new Vector3d(double.Parse(txtWaterboxPositionX.Text)' double.Parse(txtWaterboxPositionY.Text)' double.Parse(txtWaterboxPositionZ.Text)); " is 163.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,ModifyCurrentWaterbox,The length of the statement  "                currentWaterbox.RoomNumber = (ushort)(cbWaterboxRoom.SelectedItem as XMLActorDefinitionReader.Definition.Item.Option).Value; " is 124.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,ModifyCurrentWaterbox,The length of the statement  "                    currentWaterbox.Properties = ushort.Parse(txtWaterboxProperties.Text.Substring(2)' System.Globalization.NumberStyles.HexNumber); " is 128.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,propertiesToolStripMenuItem1_Click,The length of the statement  "            vertexInfo.AppendFormat("Colors: ({0}' {1}' {2}' {3})\n"' currentRoomVertex.Colors[0]' currentRoomVertex.Colors[1]' currentRoomVertex.Colors[2]' currentRoomVertex.Colors[3]); " is 174.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,propertiesToolStripMenuItem1_Click,The length of the statement  "            vertexInfo.AppendFormat("Normals: ({0}' {1}' {2})\n"' currentRoomVertex.Normals[0]' currentRoomVertex.Normals[1]' currentRoomVertex.Normals[2]); " is 144.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,enableAntiAliasingToolStripMenuItem_Click,The length of the statement  "            if (MessageBox.Show(string.Format("{0}abling anti-aliasing requires restarting SceneNavi.\n\nDo you want to restart the program now?"' (Configuration.EnableAntiAliasing ? "En" : "Dis"))' " is 186.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,enableMipmapsToolStripMenuItem_Click,The length of the statement  "            /* Destroy' destroy! Kill all the display lists! ...or should I say "Exterminate!"? Then again' I'm not a Doctor Who fan... */ " is 126.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,enableMipmapsToolStripMenuItem_Click,The length of the statement  "                HeaderCommands.Rooms rooms = (sh.Commands.FirstOrDefault(x => x.Command == HeaderLoader.CommandTypeIDs.Rooms)) as HeaderCommands.Rooms; " is 135.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,enableMipmapsToolStripMenuItem_Click,The length of the statement  "                    HeaderCommands.MeshHeader mh = (rh.Commands.FirstOrDefault(x => x.Command == HeaderLoader.CommandTypeIDs.MeshHeader)) as HeaderCommands.MeshHeader; " is 147.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,rOMInformationToolStripMenuItem_Click,The length of the statement  "                "{0} ({1}' v1.{2})' {3} MB ({4} Mbit)\n{5}\nCreated by {6}' built on {7:F}\n\nCode file at 0x{8:X} - 0x{9:X} ({10})\n- DMA table address: 0x{11:X}\n- File name table address: {12}\n" + " is 184.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,rOMInformationToolStripMenuItem_Click,The length of the statement  "                "- Scene table address: {13}\n- Actor table address: {14}\n- Object table address: {15}\n- Entrance table address: {16}"' " is 121.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,rOMInformationToolStripMenuItem_Click,The length of the statement  "                rom.Title' rom.GameID' rom.Version' (rom.Size / 0x100000)' (rom.Size / 0x20000)' (rom.HasZ64TablesHack ? "(uses 'z64tables' extended tables)\n" : "")' " is 150.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,rOMInformationToolStripMenuItem_Click,The length of the statement  "                (rom.Code.IsCompressed ? "compressed" : "uncompressed")' rom.DMATableAddress' (rom.HasFileNameTable ? ("0x" + rom.FileNameTableAddress.ToString("X")) : "none")' " is 160.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,rOMInformationToolStripMenuItem_Click,The length of the statement  "                (rom.HasZ64TablesHack ? ("0x" + rom.SceneTableAddress.ToString("X") + " (in ROM)") : ("0x" + rom.SceneTableAddress.ToString("X")))' " is 131.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,rOMInformationToolStripMenuItem_Click,The length of the statement  "                (rom.HasZ64TablesHack ? ("0x" + rom.ActorTableAddress.ToString("X") + " (in ROM)") : ("0x" + rom.ActorTableAddress.ToString("X")))' " is 131.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,rOMInformationToolStripMenuItem_Click,The length of the statement  "                (rom.HasZ64TablesHack ? ("0x" + rom.ObjectTableAddress.ToString("X") + " (in ROM)") : ("0x" + rom.ObjectTableAddress.ToString("X")))' " is 133.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,rOMInformationToolStripMenuItem_Click,The length of the statement  "                (rom.HasZ64TablesHack ? ("0x" + rom.EntranceTableAddress.ToString("X") + " (in ROM)") : ("0x" + rom.EntranceTableAddress.ToString("X")))); " is 138.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,openGLInformationToolStripMenuItem_Click,The length of the statement  "            foreach (string extension in allRequiredOglExtensions) oglInfoString.AppendFormat("* {0}\t{1}\n"' extension.PadRight(40)' Initialization.CheckForExtension(extension) ? "supported" : "not supported"); " is 199.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,aboutToolStripMenuItem_Click,The length of the statement  "            string buildString = string.Format("(Build: {0})"' linkerTimestamp.ToString("MM/dd/yyyy HH:mm:ss UTCzzz"' System.Globalization.CultureInfo.InvariantCulture)); " is 158.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,aboutToolStripMenuItem_Click,The length of the statement  "            string yearString = (linkerTimestamp.Year == 2013 ? "2013" : string.Format("2013-{0}"' linkerTimestamp.ToString("yyyy"))); " is 122.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,aboutToolStripMenuItem_Click,The length of the statement  "            MessageBox.Show(string.Format("{0} {1}\n\nScene/room actor editor for The Legend of Zelda: Ocarina of Time\n\nWritten {2} by xdaniel / http://magicstone.de/dzd/"' Program.AppNameVer' buildString' yearString)' " is 208.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MainForm)); " is 128.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.openROMToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.O))); " is 142.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.saveToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.S))); " is 139.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.rOMInformationToolStripMenuItem.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.I))); " is 149.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.editAreaTitleCardToolStripMenuItem.Click += new System.EventHandler(this.editAreaTitleCardToolStripMenuItem_Click); " is 120.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.resetCameraPositionToolStripMenuItem.Click += new System.EventHandler(this.resetCameraPositionToolStripMenuItem_Click); " is 124.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.renderSpawnPointsToolStripMenuItem.Click += new System.EventHandler(this.renderSpawnPointsToolStripMenuItem_Click); " is 120.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.renderTransitionsToolStripMenuItem.Click += new System.EventHandler(this.renderTransitionsToolStripMenuItem_Click); " is 120.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.renderPathWaypointsToolStripMenuItem.Click += new System.EventHandler(this.renderPathWaypointsToolStripMenuItem_Click); " is 124.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.linkAllWaypointsInPathToolStripMenuItem.Click += new System.EventHandler(this.linkAllWaypointsInPathToolStripMenuItem_Click); " is 130.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.showWaterboxesPerRoomToolStripMenuItem.Click += new System.EventHandler(this.showWaterboxesPerRoomToolStripMenuItem_Click); " is 128.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.enableAntiAliasingToolStripMenuItem.Click += new System.EventHandler(this.enableAntiAliasingToolStripMenuItem_Click); " is 122.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.openGLInformationToolStripMenuItem.Click += new System.EventHandler(this.openGLInformationToolStripMenuItem_Click); " is 120.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.tlpExRoomActors.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 35F)); " is 120.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.tlpExRoomActors.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 65F)); " is 120.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 40F)); " is 122.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 60F)); " is 122.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.dgvObjects.CellFormatting += new System.Windows.Forms.DataGridViewCellFormattingEventHandler(this.dgvObjects_CellFormatting); " is 130.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.dgvObjects.CellParsing += new System.Windows.Forms.DataGridViewCellParsingEventHandler(this.dgvObjects_CellParsing); " is 121.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.dgvObjects.EditingControlShowing += new System.Windows.Forms.DataGridViewEditingControlShowingEventHandler(this.dgvObjects_EditingControlShowing); " is 151.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.tlpExSpawnPoints.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 35F)); " is 121.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.tlpExSpawnPoints.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 65F)); " is 121.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.tlpExTransitions.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 35F)); " is 121.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.tlpExTransitions.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 65F)); " is 121.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel2.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 100F)); " is 123.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel2.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute' 20F)); " is 123.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.dgvPathWaypoints.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 122.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.dgvPathWaypoints.RowHeadersWidthSizeMode = System.Windows.Forms.DataGridViewRowHeadersWidthSizeMode.AutoSizeToAllHeaders; " is 126.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.dgvPathWaypoints.RowPostPaint += new System.Windows.Forms.DataGridViewRowPostPaintEventHandler(this.dgvPathWaypoints_RowPostPaint); " is 136.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.cbCollisionPolyTypes.SelectedIndexChanged += new System.EventHandler(this.cbCollisionPolyTypes_SelectedIndexChanged); " is 122.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.cbColPolyGroundTypes.SelectedIndexChanged += new System.EventHandler(this.cbColPolyGroundTypes_SelectedIndexChanged); " is 122.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.txtColPolyRawData.Font = new System.Drawing.Font("Courier New"' 9F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 155.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.tlpExWaterboxes.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 35F)); " is 120.
Long Statement,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The length of the statement  "            this.tlpExWaterboxes.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 65F)); " is 120.
Long Statement,SceneNavi,Program,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\Program.cs,Main,The length of the statement  "                MessageBox.Show("Critical error occured: " + ex.GetType().FullName + " - " + ex.Message + "\nTarget site: " + ex.TargetSite' "Exception"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 188.
Long Statement,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeDataGridViews,The length of the statement  "            dgvEntranceTable.Columns["SceneNumber"].ToolTipText = typeof(ROMHandler.EntranceTableEntry).GetDescription("SceneNumber"); " is 122.
Long Statement,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeDataGridViews,The length of the statement  "            dgvEntranceTable.Columns["EntranceNumber"].ToolTipText = typeof(ROMHandler.EntranceTableEntry).GetDescription("EntranceNumber"); " is 128.
Long Statement,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeDataGridViews,The length of the statement  "            foreach (DataGridViewColumn dcc in dgvEntranceTable.Columns) if (dcc.ReadOnly) dcc.DefaultCellStyle.ForeColor = SystemColors.GrayText; " is 134.
Long Statement,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeDataGridViews,The length of the statement  "                dgvSceneTable.DataSource = new BindingSource() { DataSource = ROM.Scenes.ConvertAll(x => (ROMHandler.SceneTableEntryOcarina)x) }; " is 129.
Long Statement,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeDataGridViews,The length of the statement  "                dgvSceneTable.Columns["LabelStartAddress"].ToolTipText = typeof(ROMHandler.SceneTableEntryOcarina).GetDescription("LabelStartAddress"); " is 135.
Long Statement,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeDataGridViews,The length of the statement  "                dgvSceneTable.Columns["LabelEndAddress"].ToolTipText = typeof(ROMHandler.SceneTableEntryOcarina).GetDescription("LabelEndAddress"); " is 131.
Long Statement,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeDataGridViews,The length of the statement  "                dgvSceneTable.Columns["ConfigurationNo"].ToolTipText = typeof(ROMHandler.SceneTableEntryOcarina).GetDescription("ConfigurationNo"); " is 131.
Long Statement,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeDataGridViews,The length of the statement  "                foreach (DataGridViewColumn dcc in dgvSceneTable.Columns) if (dcc.ReadOnly) dcc.DefaultCellStyle.ForeColor = SystemColors.GrayText; " is 131.
Long Statement,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeDataGridViews,The length of the statement  "                dgvSceneTable.DataSource = new BindingSource() { DataSource = ROM.Scenes.ConvertAll(x => (ROMHandler.SceneTableEntryMajora)x) }; " is 128.
Long Statement,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeDataGridViews,The length of the statement  "                dgvSceneTable.Columns["PresumedPadding"].ToolTipText = typeof(ROMHandler.SceneTableEntryMajora).GetDescription("PresumedPadding"); " is 130.
Long Statement,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeDataGridViews,The length of the statement  "                foreach (DataGridViewColumn dcc in dgvSceneTable.Columns) if (dcc.ReadOnly) dcc.DefaultCellStyle.ForeColor = SystemColors.GrayText; " is 131.
Long Statement,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,dgvEntranceTable_CellFormatting,The length of the statement  "            if (dgv.Columns[e.ColumnIndex].Name == "Number" || dgv.Columns[e.ColumnIndex].Name == "SceneNumber" || dgv.Columns[e.ColumnIndex].Name == "EntranceNumber" || " is 157.
Long Statement,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,dgvEntranceTable_CellFormatting,The length of the statement  "                        e.Value = (dgv.Columns[e.ColumnIndex].Name == "Number" ? string.Format("0x{0:X4}"' e.Value) : string.Format("0x{0:X2}"' e.Value)); " is 130.
Long Statement,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,dgvEntranceTable_CellParsing,The length of the statement  "            if (dgv.Columns[e.ColumnIndex].Name == "SceneNumber" || dgv.Columns[e.ColumnIndex].Name == "EntranceNumber" || dgv.Columns[e.ColumnIndex].Name == "Variable" || dgv.Columns[e.ColumnIndex].Name == "Fade") " is 202.
Long Statement,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,dgvEntranceTable_CellParsing,The length of the statement  "                    if (byte.TryParse((ishex ? str.Substring(2) : str)' (ishex ? System.Globalization.NumberStyles.AllowHexSpecifier : System.Globalization.NumberStyles.None)' " is 155.
Long Statement,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,dgvSceneTable_CellFormatting,The length of the statement  "            if (dgv.Columns[e.ColumnIndex].Name == "Number" || dgv.Columns[e.ColumnIndex].Name == "LabelStartAddress" || dgv.Columns[e.ColumnIndex].Name == "LabelEndAddress" || " is 164.
Long Statement,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,dgvSceneTable_CellParsing,The length of the statement  "                        if (byte.TryParse((ishex ? str.Substring(2) : str)' (ishex ? System.Globalization.NumberStyles.AllowHexSpecifier : System.Globalization.NumberStyles.None)' " is 155.
Long Statement,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,dgvSceneTable_CellParsing,The length of the statement  "                        if (uint.TryParse((ishex ? str.Substring(2) : str)' (ishex ? System.Globalization.NumberStyles.AllowHexSpecifier : System.Globalization.NumberStyles.None)' " is 155.
Long Statement,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The length of the statement  "            this.dgvEntranceTable.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 122.
Long Statement,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The length of the statement  "            this.dgvEntranceTable.CellFormatting += new System.Windows.Forms.DataGridViewCellFormattingEventHandler(this.dgvEntranceTable_CellFormatting); " is 142.
Long Statement,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The length of the statement  "            this.dgvEntranceTable.CellParsing += new System.Windows.Forms.DataGridViewCellParsingEventHandler(this.dgvEntranceTable_CellParsing); " is 133.
Long Statement,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The length of the statement  "            this.dgvEntranceTable.DataError += new System.Windows.Forms.DataGridViewDataErrorEventHandler(this.dgvEntranceTable_DataError); " is 127.
Long Statement,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The length of the statement  "            this.dgvEntranceTable.EditingControlShowing += new System.Windows.Forms.DataGridViewEditingControlShowingEventHandler(this.dgvEntranceTable_EditingControlShowing); " is 163.
Long Statement,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The length of the statement  "            this.tabControl1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 147.
Long Statement,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The length of the statement  "            this.dgvSceneTable.CellFormatting += new System.Windows.Forms.DataGridViewCellFormattingEventHandler(this.dgvSceneTable_CellFormatting); " is 136.
Long Statement,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The length of the statement  "            this.dgvSceneTable.CellParsing += new System.Windows.Forms.DataGridViewCellParsingEventHandler(this.dgvSceneTable_CellParsing); " is 127.
Long Statement,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The length of the statement  "            this.dgvSceneTable.DataError += new System.Windows.Forms.DataGridViewDataErrorEventHandler(this.dgvSceneTable_DataError); " is 121.
Long Statement,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The length of the statement  "            this.dgvSceneTable.EditingControlShowing += new System.Windows.Forms.DataGridViewEditingControlShowingEventHandler(this.dgvSceneTable_EditingControlShowing); " is 157.
Long Statement,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The length of the statement  "            this.btnClose.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The length of the statement  "            this.label1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 139.
Long Statement,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,ReadImageFromROM,The length of the statement  "            SimpleF3DEX2.ImageHelper.IA8(titleCardWidth' titleCardHeight' (titleCardWidth / 8)' ROM.Data' (int)Scene.LabelStartAddress' ref textureBuffer); " is 143.
Long Statement,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,pbTitleCard_Paint,The length of the statement  "            e.Graphics.DrawImage(output' new Rectangle(outputRect.X' outputRect.Y' outputRect.Width * 2' outputRect.Height * 2)' outputRect' GraphicsUnit.Pixel); " is 149.
Long Statement,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,ImportImage,The length of the statement  "                MessageBox.Show("Selected image has wrong size; image cannot be used."' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 125.
Long Statement,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,InitializeComponent,The length of the statement  "            this.btnClose.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,InitializeComponent,The length of the statement  "            this.btnExport.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 145.
Long Statement,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,InitializeComponent,The length of the statement  "            this.btnImport.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 145.
Long Statement,SceneNavi,UpdateCheckDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\UpdateCheckDialog.cs,tmr_Elapsed,The length of the statement  "                        finalStatusMsg = string.Format("You are already using the most recent version {0}.\n"' VersionManagement.CreateVersionString(localVersion)); " is 140.
Long Statement,SceneNavi,UpdateCheckDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\UpdateCheckDialog.cs,tmr_Elapsed,The length of the statement  "                if (w32ex.ErrorCode == -2147467259) MessageBox.Show(w32ex.Message' "Process Error"' MessageBoxButtons.OK' MessageBoxIcon.Exclamation); " is 134.
Long Statement,SceneNavi,UpdateCheckDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\UpdateCheckDialog.cs,InitializeComponent,The length of the statement  "            this.btnClose.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,SceneNavi,UpdateCheckDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\UpdateCheckDialog.cs,InitializeComponent,The length of the statement  "            this.lblStatus.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 147.
Long Statement,SceneNavi,UpdateCheckDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\UpdateCheckDialog.cs,InitializeComponent,The length of the statement  "            this.btnDownload.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 150.
Long Statement,SceneNavi,UpdateCheckDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\UpdateCheckDialog.cs,InitializeComponent,The length of the statement  "            this.rlblChangelog.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 149.
Long Statement,SceneNavi,XMLActorDefinitionReader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\XMLActorDefinitionReader.cs,ThrowVersionError,The length of the statement  "            throw new XMLActorDefinitionReaderException(string.Format("Program version mismatch; expected {0}' found {1}. Please make sure your XML folder is up-to-date."' Application.ProductVersion' ProgramVersion)); " is 205.
Long Statement,SceneNavi,XMLActorDefinitionReader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\XMLActorDefinitionReader.cs,RefreshActorPositionRotation,The length of the statement  "                    if (item.Usage == Definition.Item.Usages.PositionX || item.Usage == Definition.Item.Usages.PositionY || item.Usage == Definition.Item.Usages.PositionZ || " is 153.
Long Statement,SceneNavi,XMLActorDefinitionReader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\XMLActorDefinitionReader.cs,RefreshActorPositionRotation,The length of the statement  "                        item.Usage == Definition.Item.Usages.RotationX || item.Usage == Definition.Item.Usages.RotationY || item.Usage == Definition.Item.Usages.RotationZ) " is 147.
Long Statement,SceneNavi,XMLActorDefinitionReader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\XMLActorDefinitionReader.cs,CreateActorEditingControls,The length of the statement  "                    Label lbl = new Label() { Text = string.Format("{0}:"' item.Description)' TextAlign = ContentAlignment.MiddleLeft' Dock = DockStyle.Fill }; " is 139.
Long Statement,SceneNavi,XMLActorDefinitionReader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\XMLActorDefinitionReader.cs,CreateActorEditingControls,The length of the statement  "                    if (!individual && (item.Usage == Definition.Item.Usages.NextRoomBack || item.Usage == Definition.Item.Usages.NextRoomFront) && (tag is List<HeaderCommands.Rooms.RoomInfoClass>)) " is 178.
Long Statement,SceneNavi,XMLActorDefinitionReader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\XMLActorDefinitionReader.cs,CreateActorEditingControls,The length of the statement  "                        item.ControlType.GetProperty("SelectedItem").SetValue(ctrl' item.Options.Find(x => x.Value == (Convert.ToUInt64(val) & item.Mask))' null); " is 138.
Long Statement,SceneNavi,XMLActorDefinitionReader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\XMLActorDefinitionReader.cs,CreateActorEditingControls,The length of the statement  "                            System.Reflection.MethodInfo mi = item.ValueType.GetMethod("Parse"' new Type[] { typeof(string)' typeof(System.Globalization.NumberStyles) }); " is 142.
Long Statement,SceneNavi,XMLActorDefinitionReader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\XMLActorDefinitionReader.cs,CreateActorEditingControls,The length of the statement  "                                    (item.DisplayStyle == Definition.Item.DisplayStyles.Hexadecimal ? System.Globalization.NumberStyles.HexNumber : System.Globalization.NumberStyles.Integer); " is 155.
Long Statement,SceneNavi,XMLActorDefinitionReader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\XMLActorDefinitionReader.cs,CreateActorEditingControls,The length of the statement  "                                string valstr = (ns == System.Globalization.NumberStyles.HexNumber ? ((Control)s).Text.Substring(2) : ((Control)s).Text); " is 121.
Long Statement,SceneNavi.HeaderCommands,MeshHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\MeshHeader.cs,CreateDisplayLists,The length of the statement  "            Program.Status.Message = string.Format("Rendering room '{0}'..."' (this.Parent as HeaderCommands.Rooms.RoomInfoClass).Description); " is 131.
Long Statement,SceneNavi.HeaderCommands,RoomInfoClass,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Rooms.cs,Load,The length of the statement  "                if (Data[0] == (byte)HeaderLoader.CommandTypeIDs.SettingsSoundRoom || Data[0] == (byte)HeaderLoader.CommandTypeIDs.RoomBehavior || " is 130.
Long Statement,SceneNavi.HeaderCommands,RoomInfoClass,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Rooms.cs,Load,The length of the statement  "                            uint rofs = Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)0x03])' (int)(aofs & 0x00FFFFFF))); " is 121.
Long Statement,SceneNavi.OpenGLHelpers,TextPrinter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\TextPrinter.cs,Begin,The length of the statement  "            Initialization.CreateViewportAndProjection(Initialization.ProjectionTypes.Orthographic' glControl.ClientRectangle' 0.0f' 300.0f); " is 129.
Long Statement,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,GetDisplayList,The length of the statement  "            System.Reflection.PropertyInfo propinfo = tp.GetProperty(prop' System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static); " is 185.
Long Statement,SceneNavi.OpenGLHelpers,Initialization,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\Initialization.cs,CreateViewportAndProjection,The length of the statement  "                    projectionMatrix = Matrix4.CreateOrthographicOffCenter(clientRectangle.Left' clientRectangle.Right' clientRectangle.Bottom' clientRectangle.Top' near' far); " is 156.
Long Statement,SceneNavi.ROMHandler,SceneTableEntryMajora,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryMajora.cs,IsValid,The length of the statement  "            return ((sceneStartAddress < ROM.Size) && (sceneEndAddress < ROM.Size) && ((sceneStartAddress & 0xF) == 0) && ((sceneEndAddress & 0xF) == 0) && " is 143.
Long Statement,SceneNavi.ROMHandler,SceneTableEntryMajora,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryMajora.cs,GetActiveTransitionData,The length of the statement  "            return (currentSceneHeader == null ? null : currentSceneHeader.Commands.FirstOrDefault(x => x.Command == HeaderLoader.CommandTypeIDs.Transitions) as HeaderCommands.Actors); " is 172.
Long Statement,SceneNavi.ROMHandler,SceneTableEntryMajora,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryMajora.cs,GetActiveSpawnPointData,The length of the statement  "            return (currentSceneHeader == null ? null : currentSceneHeader.Commands.FirstOrDefault(x => x.Command == HeaderLoader.CommandTypeIDs.Spawns) as HeaderCommands.Actors); " is 167.
Long Statement,SceneNavi.ROMHandler,SceneTableEntryMajora,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryMajora.cs,GetActiveSpecialObjs,The length of the statement  "            return (currentSceneHeader == null ? null : currentSceneHeader.Commands.FirstOrDefault(x => x.Command == HeaderLoader.CommandTypeIDs.SpecialObjects) as HeaderCommands.SpecialObjects); " is 183.
Long Statement,SceneNavi.ROMHandler,SceneTableEntryMajora,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryMajora.cs,GetActiveWaypoints,The length of the statement  "            return (currentSceneHeader == null ? null : currentSceneHeader.Commands.FirstOrDefault(x => x.Command == HeaderLoader.CommandTypeIDs.Waypoints) as HeaderCommands.Waypoints); " is 173.
Long Statement,SceneNavi.ROMHandler,SceneTableEntryMajora,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryMajora.cs,GetActiveCollision,The length of the statement  "            return (currentSceneHeader == null ? null : currentSceneHeader.Commands.FirstOrDefault(x => x.Command == HeaderLoader.CommandTypeIDs.Collision) as HeaderCommands.Collision); " is 173.
Long Statement,SceneNavi.ROMHandler,SceneTableEntryMajora,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryMajora.cs,GetActiveSettingsSoundScene,The length of the statement  "            return (currentSceneHeader == null ? null : currentSceneHeader.Commands.FirstOrDefault(x => x.Command == HeaderLoader.CommandTypeIDs.SettingsSoundScene) as HeaderCommands.SettingsSoundScene); " is 191.
Long Statement,SceneNavi.ROMHandler,SceneTableEntryMajora,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryMajora.cs,GetActiveEnvSettings,The length of the statement  "            return (currentSceneHeader == null ? null : currentSceneHeader.Commands.FirstOrDefault(x => x.Command == HeaderLoader.CommandTypeIDs.EnvironmentSettings) as HeaderCommands.EnvironmentSettings); " is 193.
Long Statement,SceneNavi.ROMHandler,SceneTableEntryMajora,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryMajora.cs,ReadScene,The length of the statement  "            if (data[0] == (byte)HeaderLoader.CommandTypeIDs.SettingsSoundScene || data[0] == (byte)HeaderLoader.CommandTypeIDs.Rooms || " is 124.
Long Statement,SceneNavi.ROMHandler,SceneTableEntryMajora,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryMajora.cs,ReadScene,The length of the statement  "                coll = newheader.Commands.FirstOrDefault(x => x.Command == HeaderLoader.CommandTypeIDs.Collision) as HeaderCommands.Collision; " is 126.
Long Statement,SceneNavi.ROMHandler,SceneTableEntryMajora,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryMajora.cs,ReadScene,The length of the statement  "                        uint rofs = Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)0x02])' (int)(aofs & 0x00FFFFFF))); " is 121.
Long Statement,SceneNavi.ROMHandler,DMATableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\DMATableEntry.cs,Identify,The length of the statement  "                if (BitConverter.ToUInt32(data' (int)0) == 0x16 || ((BitConverter.ToUInt32(data' (int)0) == 0x18) && data[4] == 0x03 && BitConverter.ToUInt32(data' (int)8) == 0x16)) " is 165.
Long Statement,SceneNavi.ROMHandler,DMATableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\DMATableEntry.cs,Identify,The length of the statement  "                if ((BitConverter.ToUInt32(data' (int)0) & 0xFFFF00FF) == 0x15 || ((BitConverter.ToUInt32(data' (int)0) == 0x18) && data[4] == 0x02 && (BitConverter.ToUInt32(data' (int)8) & 0xFFFF00FF) == 0x15)) " is 195.
Long Statement,SceneNavi.ROMHandler,DMATableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\DMATableEntry.cs,Identify,The length of the statement  "                    if ((btext + bdata + brodata == data.Length || btext + bdata + brodata == ovlheader) && (fnassumed == FileTypes.General || fnassumed == FileTypes.Overlay)) " is 155.
Long Statement,SceneNavi.ROMHandler,SceneTableEntryOcarina,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryOcarina.cs,IsValid,The length of the statement  "                (sceneStartAddress < ROM.Size) && (sceneEndAddress < ROM.Size) && (LabelStartAddress < ROM.Size) && (LabelEndAddress < ROM.Size) && " is 131.
Long Statement,SceneNavi.ROMHandler,SceneTableEntryOcarina,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryOcarina.cs,IsValid,The length of the statement  "                ((sceneStartAddress & 0xF) == 0) && ((sceneEndAddress & 0xF) == 0) && ((LabelStartAddress & 0xF) == 0) && ((LabelEndAddress & 0xF) == 0) && " is 139.
Long Statement,SceneNavi.ROMHandler,SceneTableEntryOcarina,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryOcarina.cs,IsValid,The length of the statement  "                (LabelEndAddress == LabelStartAddress + 0x2880 || LabelEndAddress == LabelStartAddress + 0x1B00)) || (LabelStartAddress == 0 && LabelEndAddress == 0)); " is 151.
Long Statement,SceneNavi.ROMHandler,SceneTableEntryOcarina,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryOcarina.cs,GetActiveTransitionData,The length of the statement  "            return (currentSceneHeader == null ? null : currentSceneHeader.Commands.FirstOrDefault(x => x.Command == HeaderLoader.CommandTypeIDs.Transitions) as HeaderCommands.Actors); " is 172.
Long Statement,SceneNavi.ROMHandler,SceneTableEntryOcarina,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryOcarina.cs,GetActiveSpawnPointData,The length of the statement  "            return (currentSceneHeader == null ? null : currentSceneHeader.Commands.FirstOrDefault(x => x.Command == HeaderLoader.CommandTypeIDs.Spawns) as HeaderCommands.Actors); " is 167.
Long Statement,SceneNavi.ROMHandler,SceneTableEntryOcarina,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryOcarina.cs,GetActiveSpecialObjs,The length of the statement  "            return (currentSceneHeader == null ? null : currentSceneHeader.Commands.FirstOrDefault(x => x.Command == HeaderLoader.CommandTypeIDs.SpecialObjects) as HeaderCommands.SpecialObjects); " is 183.
Long Statement,SceneNavi.ROMHandler,SceneTableEntryOcarina,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryOcarina.cs,GetActiveWaypoints,The length of the statement  "            return (currentSceneHeader == null ? null : currentSceneHeader.Commands.FirstOrDefault(x => x.Command == HeaderLoader.CommandTypeIDs.Waypoints) as HeaderCommands.Waypoints); " is 173.
Long Statement,SceneNavi.ROMHandler,SceneTableEntryOcarina,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryOcarina.cs,GetActiveCollision,The length of the statement  "            return (currentSceneHeader == null ? null : currentSceneHeader.Commands.FirstOrDefault(x => x.Command == HeaderLoader.CommandTypeIDs.Collision) as HeaderCommands.Collision); " is 173.
Long Statement,SceneNavi.ROMHandler,SceneTableEntryOcarina,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryOcarina.cs,GetActiveSettingsSoundScene,The length of the statement  "            return (currentSceneHeader == null ? null : currentSceneHeader.Commands.FirstOrDefault(x => x.Command == HeaderLoader.CommandTypeIDs.SettingsSoundScene) as HeaderCommands.SettingsSoundScene); " is 191.
Long Statement,SceneNavi.ROMHandler,SceneTableEntryOcarina,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryOcarina.cs,GetActiveEnvSettings,The length of the statement  "            return (currentSceneHeader == null ? null : currentSceneHeader.Commands.FirstOrDefault(x => x.Command == HeaderLoader.CommandTypeIDs.EnvironmentSettings) as HeaderCommands.EnvironmentSettings); " is 193.
Long Statement,SceneNavi.ROMHandler,SceneTableEntryOcarina,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryOcarina.cs,ReadScene,The length of the statement  "            if (data[0] == (byte)HeaderLoader.CommandTypeIDs.SettingsSoundScene || data[0] == (byte)HeaderLoader.CommandTypeIDs.Rooms || " is 124.
Long Statement,SceneNavi.ROMHandler,SceneTableEntryOcarina,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryOcarina.cs,ReadScene,The length of the statement  "                coll = newheader.Commands.FirstOrDefault(x => x.Command == HeaderLoader.CommandTypeIDs.Collision) as HeaderCommands.Collision; " is 126.
Long Statement,SceneNavi.ROMHandler,SceneTableEntryOcarina,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryOcarina.cs,ReadScene,The length of the statement  "                        uint rofs = Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)0x02])' (int)(aofs & 0x00FFFFFF))); " is 121.
Long Statement,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,IsAddressSupported,The length of the statement  "                if ((address & 0xFFFFFF) > ((byte[])SegmentMapping[(byte)(address >> 24)]).Length && ((byte[])SegmentMapping[(byte)(address >> 24)]).Length != 0) return false; " is 159.
Long Statement,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,ReadDMATable,The length of the statement  "                if (DMATableAddress + (idx * 0x10) > Data.Length) throw new ROMHandlerException("Went out of range while reading DMA table."); " is 126.
Long Statement,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindSceneTable,The length of the statement  "                    ISceneTableEntry entry = (!IsMajora ? (ISceneTableEntry)new SceneTableEntryOcarina(this' i' true) : (ISceneTableEntry)new SceneTableEntryMajora(this' i' true)); " is 160.
Long Statement,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindSceneTable,The length of the statement  "                        ISceneTableEntry scn1 = (!IsMajora ? (ISceneTableEntry)new SceneTableEntryOcarina(this' i' true) : (ISceneTableEntry)new SceneTableEntryMajora(this' i' true)); " is 159.
Long Statement,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindActorTable,The length of the statement  "                    if (act1.IsComplete == false && act1.IsEmpty == false && act2.IsComplete == false && act2.IsEmpty == false && Actors.Count > 0) break; " is 134.
Long Statement,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindActorTable,The length of the statement  "                    if ((act1.IsValid == true && act1.IsIncomplete == true) && (act2.IsComplete == true || act2.IsEmpty == true) && Actors.Count == 0) " is 130.
Long Statement,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,InitializeMacros,The length of the statement  "                General.UcodeCmds.SETTIMG' General.UcodeCmds.SETTILE' General.UcodeCmds.RDPLOADSYNC' General.UcodeCmds.LOADBLOCK' General.UcodeCmds.RDPPIPESYNC' General.UcodeCmds.SETTILE' General.UcodeCmds.SETTILESIZE " is 201.
Long Statement,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,InitializeMacros,The length of the statement  "                General.UcodeCmds.SETTIMG' General.UcodeCmds.RDPTILESYNC' General.UcodeCmds.SETTILE' General.UcodeCmds.RDPLOADSYNC' General.UcodeCmds.LOADTLUT' General.UcodeCmds.RDPPIPESYNC " is 173.
Long Statement,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,Render,The length of the statement  "                        GL.Arb.ProgramEnvParameter4(AssemblyProgramTargetArb.FragmentProgram' 0' PrimColor.R' PrimColor.G' PrimColor.B' PrimColor.A); " is 125.
Long Statement,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,Render,The length of the statement  "                        GL.Arb.ProgramEnvParameter4(AssemblyProgramTargetArb.FragmentProgram' 1' EnvColor.R' EnvColor.G' EnvColor.B' EnvColor.A); " is 121.
Long Statement,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,Render,The length of the statement  "                        ucodecmds[cmd](Endian.SwapUInt32(BitConverter.ToUInt32(segdata' (int)adr))' Endian.SwapUInt32(BitConverter.ToUInt32(segdata' (int)adr + 4))); " is 141.
Long Statement,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,Render,The length of the statement  "                        /* Texture loading hack; if SetCombine OR LoadBlock command detected' try loading textures again (fixes Water Temple 1st room' borked walls; SM64toZ64 conversions?) */ " is 167.
Long Statement,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,Render,The length of the statement  "                        if (Configuration.RenderTextures && (cmd == (byte)General.UcodeCmds.SETCOMBINE || cmd == (byte)General.UcodeCmds.LOADBLOCK) && Textures[0] != null) LoadTextures(); " is 163.
Long Statement,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandVtx,The length of the statement  "            for (int i = 0; i < N; i++) VertexBuffer[V0 + i] = new Vertex(ROM' (byte[])ROM.SegmentMapping[(byte)(w1 >> 24)]' (uint)(w1 + i * 16)' mtxstack.Peek()); " is 151.
Long Statement,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandTri1,The length of the statement  "            int[] idxs = new int[] { (int)((w0 & 0x00FF0000) >> 16) >> 1' (int)((w0 & 0x0000FF00) >> 8) >> 1' (int)(w0 & 0x000000FF) >> 1 }; " is 128.
Long Statement,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandTri1,The length of the statement  "            if (ActiveGLDL.Peek() != null) ActiveGLDL.Peek().Triangles.Add(new OpenGLHelpers.DisplayListEx.Triangle(VertexBuffer[idxs[0]]' VertexBuffer[idxs[1]]' VertexBuffer[idxs[2]])); " is 174.
Long Statement,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandTri1,The length of the statement  "            LastTriList.Add(new SimpleTriangle(VertexBuffer[idxs[0]].Position' VertexBuffer[idxs[1]].Position' VertexBuffer[idxs[2]].Position)); " is 132.
Long Statement,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandTri2,The length of the statement  "                if (ActiveGLDL.Peek() != null) ActiveGLDL.Peek().Triangles.Add(new OpenGLHelpers.DisplayListEx.Triangle(VertexBuffer[idxs[0]]' VertexBuffer[idxs[1]]' VertexBuffer[idxs[2]])); " is 174.
Long Statement,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandTri2,The length of the statement  "                if (ActiveGLDL.Peek() != null) ActiveGLDL.Peek().Triangles.Add(new OpenGLHelpers.DisplayListEx.Triangle(VertexBuffer[idxs[3]]' VertexBuffer[idxs[4]]' VertexBuffer[idxs[5]])); " is 174.
Long Statement,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandTri2,The length of the statement  "            LastTriList.Add(new SimpleTriangle(VertexBuffer[idxs[0]].Position' VertexBuffer[idxs[1]].Position' VertexBuffer[idxs[2]].Position)); " is 132.
Long Statement,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandTri2,The length of the statement  "            LastTriList.Add(new SimpleTriangle(VertexBuffer[idxs[3]].Position' VertexBuffer[idxs[4]].Position' VertexBuffer[idxs[5]].Position)); " is 132.
Long Statement,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandGeometryMode,The length of the statement  "            if (Configuration.CombinerType == CombinerTypes.GLSLCombiner && glslCombiner != null) glslCombiner.BindCombiner(LastComb0' LastComb1' Configuration.RenderTextures); " is 164.
Long Statement,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetOtherModeH,The length of the statement  "            if (Configuration.CombinerType == CombinerTypes.GLSLCombiner && glslCombiner != null) glslCombiner.BindCombiner(LastComb0' LastComb1' Configuration.RenderTextures); " is 164.
Long Statement,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetOtherModeL,The length of the statement  "                if (Configuration.CombinerType == CombinerTypes.GLSLCombiner && glslCombiner != null) glslCombiner.BindCombiner(LastComb0' LastComb1' Configuration.RenderTextures); " is 164.
Long Statement,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetPrimColor,The length of the statement  "                GL.Arb.ProgramEnvParameter4(AssemblyProgramTargetArb.FragmentProgram' 0' PrimColor.R' PrimColor.G' PrimColor.B' PrimColor.A); " is 125.
Long Statement,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetPrimColor,The length of the statement  "                GL.Material(MaterialFace.FrontAndBack' MaterialParameter.Diffuse' new Color4(PrimColor.R' PrimColor.G' PrimColor.B' PrimColor.A)); " is 130.
Long Statement,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetEnvColor,The length of the statement  "                GL.Arb.ProgramEnvParameter4(AssemblyProgramTargetArb.FragmentProgram' 1' EnvColor.R' EnvColor.G' EnvColor.B' EnvColor.A); " is 121.
Long Statement,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,LoadTexture,The length of the statement  "            GL.TexImage2D(TextureTarget.Texture2D' 0' PixelInternalFormat.Rgba' (int)Textures[tx].RealWidth' (int)Textures[tx].RealHeight' 0' PixelFormat.Rgba' PixelType.UnsignedByte' texbuf); " is 180.
Long Statement,SceneNavi.SimpleF3DEX2,General,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\General.cs,RenderTriangles,The length of the statement  "                for (int j = 0; j < (OpenGLHelpers.Initialization.SupportsFunction("glActiveTextureARB") ? f3dex2.Textures.Length : 1); j++) " is 124.
Long Statement,SceneNavi.SimpleF3DEX2,General,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\General.cs,RenderTriangles,The length of the statement  "                            ((f3dex2.Textures[j].ULS * General.Fixed2Float[2]) % (float)(1 << f3dex2.Textures[j].MaskS))) * f3dex2.Textures[j].ScaleS; " is 122.
Long Statement,SceneNavi.SimpleF3DEX2,General,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\General.cs,RenderTriangles,The length of the statement  "                            ((f3dex2.Textures[j].ULT * General.Fixed2Float[2]) % (float)(1 << f3dex2.Textures[j].MaskT))) * f3dex2.Textures[j].ScaleT; " is 122.
Long Statement,SceneNavi.SimpleF3DEX2,General,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\General.cs,RenderTriangles,The length of the statement  "                if (!Convert.ToBoolean(f3dex2.GeometryMode & (uint)General.GeometryMode.LIGHTING)) GL.Color4(f3dex2.VertexBuffer[i].Colors); " is 124.
Long Statement,SceneNavi.SimpleF3DEX2.CombinerEmulation,ArbCombineManager,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\CombinerEmulation\ArbCombineManager.cs,ResetFragmentCache,The length of the statement  "                foreach (ArbCombineProgram fc in fragcache) if (GL.Arb.IsProgram(fc.GLID)) { int glid = fc.GLID; GL.Arb.DeleteProgram(1' ref glid); } " is 133.
Complex Conditional,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,DisableCombiner,The conditional expression  "(arb && currentCombinerType == CombinerTypes.ArbCombiner) || (glsl && currentCombinerType == CombinerTypes.GLSLCombiner)"  is complex.
Complex Conditional,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,DisableCombiner,The conditional expression  "tsmi.Tag is CombinerTypes &&                      ((((CombinerTypes)tsmi.Tag) == CombinerTypes.ArbCombiner && arb) ||                      (((CombinerTypes)tsmi.Tag) == CombinerTypes.GLSLCombiner && glsl))"  is complex.
Complex Conditional,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,RenderMeshHeader,The conditional expression  "mh.DLs == null || displayListsDirty || mh.CachedWithTextures != Configuration.RenderTextures || mh.CachedWithCombinerType != Configuration.CombinerType"  is complex.
Complex Conditional,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,TryPickObject,The conditional expression  "currentRoom != null && currentRoom.ActiveMeshHeader != null && !Configuration.RenderCollision &&                  currentRoom.ActiveMeshHeader.DLs.Count > 0 && currentRoom.ActiveMeshHeader.DLs[0].Triangles.Count > 0"  is complex.
Complex Conditional,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,TryPickObject,The conditional expression  "allMeshHeaders != null && currentRoom == null && !Configuration.RenderCollision && allMeshHeaders.Count > 0 && allMeshHeaders[0].IsMoveable == moveable"  is complex.
Complex Conditional,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,TryPickObject,The conditional expression  "currentRoom != null && currentRoom.ActiveRoomActorData != null && Configuration.RenderRoomActors && currentRoom.ActiveRoomActorData.ActorList.Count > 0 &&                  currentRoom.ActiveRoomActorData.ActorList[0].IsMoveable == moveable"  is complex.
Complex Conditional,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,TryPickObject,The conditional expression  "currentScene.GetActiveSpawnPointData() != null && Configuration.RenderSpawnPoints && currentScene.GetActiveSpawnPointData().ActorList.Count > 0 &&                  currentScene.GetActiveSpawnPointData().ActorList[0].IsMoveable == moveable"  is complex.
Complex Conditional,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,TryPickObject,The conditional expression  "currentScene.GetActiveTransitionData() != null && Configuration.RenderTransitions && currentScene.GetActiveTransitionData().ActorList.Count > 0 &&                  currentScene.GetActiveTransitionData().ActorList[0].IsMoveable == moveable"  is complex.
Complex Conditional,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,TryPickObject,The conditional expression  "activePathHeader != null && activePathHeader.Points != null && Configuration.RenderPathWaypoints && activePathHeader.Points.Count > 0 &&                  activePathHeader.Points[0].IsMoveable == moveable"  is complex.
Complex Conditional,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,TryPickObject,The conditional expression  "currentScene.GetActiveCollision() != null && Configuration.RenderWaterboxes && currentScene.GetActiveCollision().Waterboxes.Count > 0 &&                  currentScene.GetActiveCollision().Waterboxes[0].IsMoveable == moveable"  is complex.
Complex Conditional,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,TryPickObject,The conditional expression  "currentScene.GetActiveCollision() != null && Configuration.RenderCollision && currentScene.GetActiveCollision().Polygons.Count > 0 &&                  currentScene.GetActiveCollision().Polygons[0].IsMoveable == moveable"  is complex.
Complex Conditional,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,dgvEntranceTable_CellFormatting,The conditional expression  "dgv.Columns[e.ColumnIndex].Name == "Number" || dgv.Columns[e.ColumnIndex].Name == "SceneNumber" || dgv.Columns[e.ColumnIndex].Name == "EntranceNumber" ||                  dgv.Columns[e.ColumnIndex].Name == "Variable" || dgv.Columns[e.ColumnIndex].Name == "Fade""  is complex.
Complex Conditional,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,dgvEntranceTable_CellParsing,The conditional expression  "dgv.Columns[e.ColumnIndex].Name == "SceneNumber" || dgv.Columns[e.ColumnIndex].Name == "EntranceNumber" || dgv.Columns[e.ColumnIndex].Name == "Variable" || dgv.Columns[e.ColumnIndex].Name == "Fade""  is complex.
Complex Conditional,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,dgvSceneTable_CellFormatting,The conditional expression  "dgv.Columns[e.ColumnIndex].Name == "Number" || dgv.Columns[e.ColumnIndex].Name == "LabelStartAddress" || dgv.Columns[e.ColumnIndex].Name == "LabelEndAddress" ||                  dgv.Columns[e.ColumnIndex].Name == "Unknown1" || dgv.Columns[e.ColumnIndex].Name == "ConfigurationNo" ||                  dgv.Columns[e.ColumnIndex].Name == "Unknown3" || dgv.Columns[e.ColumnIndex].Name == "Unknown4" ||                  dgv.Columns[e.ColumnIndex].Name == "Unknown2" || dgv.Columns[e.ColumnIndex].Name == "PresumedPadding""  is complex.
Complex Conditional,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,dgvSceneTable_CellParsing,The conditional expression  "dgv.Columns[e.ColumnIndex].Name == "LabelStartAddress" || dgv.Columns[e.ColumnIndex].Name == "LabelEndAddress" ||                  dgv.Columns[e.ColumnIndex].Name == "Unknown1" || dgv.Columns[e.ColumnIndex].Name == "ConfigurationNo" ||                  dgv.Columns[e.ColumnIndex].Name == "Unknown3" || dgv.Columns[e.ColumnIndex].Name == "Unknown4" ||                  dgv.Columns[e.ColumnIndex].Name == "Unknown2" || dgv.Columns[e.ColumnIndex].Name == "PresumedPadding""  is complex.
Complex Conditional,SceneNavi,XMLActorDefinitionReader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\XMLActorDefinitionReader.cs,RefreshActorPositionRotation,The conditional expression  "item.Usage == Definition.Item.Usages.PositionX || item.Usage == Definition.Item.Usages.PositionY || item.Usage == Definition.Item.Usages.PositionZ ||                          item.Usage == Definition.Item.Usages.RotationX || item.Usage == Definition.Item.Usages.RotationY || item.Usage == Definition.Item.Usages.RotationZ"  is complex.
Complex Conditional,SceneNavi,XMLActorDefinitionReader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\XMLActorDefinitionReader.cs,CreateActorEditingControls,The conditional expression  "!individual && (item.Usage == Definition.Item.Usages.NextRoomBack || item.Usage == Definition.Item.Usages.NextRoomFront) && (tag is List<HeaderCommands.Rooms.RoomInfoClass>)"  is complex.
Complex Conditional,SceneNavi.HeaderCommands,PathHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Waypoints.cs,PathHeader,The conditional expression  "WaypointCount == 0 || WaypointCount > 0xFF || psegdata == null || (WaypointAddress & 0xFFFFFF) >= psegdata.Length"  is complex.
Complex Conditional,SceneNavi.HeaderCommands,RoomInfoClass,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Rooms.cs,RoomInfoClass,The conditional expression  "Start != 0 && End != 0 && Start < rom.Data.Length && End < rom.Data.Length"  is complex.
Complex Conditional,SceneNavi.ROMHandler,DMATableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\DMATableEntry.cs,Identify,The conditional expression  "BitConverter.ToUInt32(data' (int)0) == 0x16 || ((BitConverter.ToUInt32(data' (int)0) == 0x18) && data[4] == 0x03 && BitConverter.ToUInt32(data' (int)8) == 0x16)"  is complex.
Complex Conditional,SceneNavi.ROMHandler,DMATableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\DMATableEntry.cs,Identify,The conditional expression  "(BitConverter.ToUInt32(data' (int)0) & 0xFFFF00FF) == 0x15 || ((BitConverter.ToUInt32(data' (int)0) == 0x18) && data[4] == 0x02 && (BitConverter.ToUInt32(data' (int)8) & 0xFFFF00FF) == 0x15)"  is complex.
Complex Conditional,SceneNavi.ROMHandler,DMATableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\DMATableEntry.cs,Identify,The conditional expression  "(btext + bdata + brodata == data.Length || btext + bdata + brodata == ovlheader) && (fnassumed == FileTypes.General || fnassumed == FileTypes.Overlay)"  is complex.
Complex Conditional,SceneNavi.ROMHandler,DMATableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\DMATableEntry.cs,Identify,The conditional expression  "hassync && hasvtx && hasdlend && (fnassumed == FileTypes.General || fnassumed == FileTypes.Object)"  is complex.
Complex Conditional,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindActorTable,The conditional expression  "act1.IsComplete == false && act1.IsEmpty == false && act2.IsComplete == false && act2.IsEmpty == false && Actors.Count > 0"  is complex.
Complex Conditional,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindActorTable,The conditional expression  "(act1.IsValid == true && act1.IsIncomplete == true) && (act2.IsComplete == true || act2.IsEmpty == true) && Actors.Count == 0"  is complex.
Complex Conditional,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindObjectTable,The conditional expression  "obj1.IsEmpty == true && obj2.IsValid == true && obj3.IsValid == true && Objects.Count == 0"  is complex.
Complex Conditional,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,Render,The conditional expression  "Configuration.RenderTextures && (cmd == (byte)General.UcodeCmds.SETCOMBINE || cmd == (byte)General.UcodeCmds.LOADBLOCK) && Textures[0] != null"  is complex.
Complex Conditional,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,MacroLoadTextureBlock,The conditional expression  "(Textures[activetex].Format == 0x40 || Textures[activetex].Format == 0x48 || Textures[activetex].Format == 0x50) &&                  ((w0[7] >> 24) == (byte)General.UcodeCmds.SETTIMG) || ((w0[8] >> 24) == (byte)General.UcodeCmds.SETTIMG)"  is complex.
Complex Conditional,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CheckTextureCache,The conditional expression  "cached.Tag == tag && cached.Format == Textures[tx].Format && cached.Address == Textures[tx].Address &&                      cached.RealHeight == Textures[tx].RealHeight && cached.RealWidth == Textures[tx].RealWidth"  is complex.
Empty Catch Block,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,dgvObjects_CellFormatting,The method has an empty catch block.
Empty Catch Block,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_Paint,The method has an empty catch block.
Empty Catch Block,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,dgvEntranceTable_CellFormatting,The method has an empty catch block.
Empty Catch Block,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,dgvSceneTable_CellFormatting,The method has an empty catch block.
Empty Catch Block,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,Render,The method has an empty catch block.
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,OP,The following statement contains a magic number: return ((x) << 26);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,OF,The following statement contains a magic number: return (((uint)(x) >> 2) & 0xFFFF);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,SA,The following statement contains a magic number: return (((x) & 0x1F) << 6);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,RD,The following statement contains a magic number: return (((x) & 0x1F) << 11);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,RT,The following statement contains a magic number: return (((x) & 0x1F) << 16);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,RS,The following statement contains a magic number: return (((x) & 0x1F) << 21);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,JT,The following statement contains a magic number: return (((uint)(x) >> 2) & 0x3FFFFFF);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,BREAK,The following statement contains a magic number: return ((code) << 6 | 0x0D);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,COP1,The following statement contains a magic number: return (OP(0x11) | (1 << 25) | ((cofun) & 0x1FFFFFF));
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,ERET,The following statement contains a magic number: return (OP(0x10) | 1 << 25 | 0x18);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,SYSCALL,The following statement contains a magic number: return ((code) << 6 | 0x0C);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,TEQ,The following statement contains a magic number: return (OP(0x00) | RS(rs) | RT(rt) | ((code) & 0x3FF) << 6 | 0x34);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,TGE,The following statement contains a magic number: return (OP(0x00) | RS(rs) | RT(rt) | ((code) & 0x3FF) << 6 | 0x34);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,TGEU,The following statement contains a magic number: return (OP(0x00) | RS(rs) | RT(rt) | ((code) & 0x3FF) << 6 | 0x31);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,TLBP,The following statement contains a magic number: return (OP(0x10) | 1 << 25 | 0x08);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,TLBR,The following statement contains a magic number: return (OP(0x10) | 1 << 25 | 0x01);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,TLBWI,The following statement contains a magic number: return (OP(0x10) | 1 << 25 | 0x02);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,TLBWR,The following statement contains a magic number: return (OP(0x10) | 1 << 25 | 0x06);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,TLT,The following statement contains a magic number: return (OP(0x00) | RS(rs) | RT(rt) | ((code) & 0x3FF) << 6 | 0x32);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,TLTU,The following statement contains a magic number: return (OP(0x00) | RS(rs) | RT(rt) | ((code) & 0x3FF) << 6 | 0x33);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,TNE,The following statement contains a magic number: return (OP(0x00) | RS(rs) | RT(rt) | ((code) & 0x3FF) << 6 | 0x36);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,GetRS,The following statement contains a magic number: return (uint)(uint)((word >> 21) & 31);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,GetRS,The following statement contains a magic number: return (uint)(uint)((word >> 21) & 31);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,GetRT,The following statement contains a magic number: return (uint)((word >> 16) & 31);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,GetRT,The following statement contains a magic number: return (uint)((word >> 16) & 31);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,GetRD,The following statement contains a magic number: return (uint)((word >> 11) & 31);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,GetRD,The following statement contains a magic number: return (uint)((word >> 11) & 31);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,GetSA,The following statement contains a magic number: return (uint)((word >> 6) & 31);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,GetSA,The following statement contains a magic number: return (uint)((word >> 6) & 31);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,GetFT,The following statement contains a magic number: return (uint)(uint)((word >> 21) & 31);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,GetFT,The following statement contains a magic number: return (uint)(uint)((word >> 21) & 31);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,GetFS,The following statement contains a magic number: return (uint)((word >> 16) & 31);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,GetFS,The following statement contains a magic number: return (uint)((word >> 16) & 31);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,GetFD,The following statement contains a magic number: return (uint)((word >> 11) & 31);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,GetFD,The following statement contains a magic number: return (uint)((word >> 11) & 31);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,GetBASE,The following statement contains a magic number: return (uint)((word >> 21) & 31);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,GetBASE,The following statement contains a magic number: return (uint)((word >> 21) & 31);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,GetOFFSET,The following statement contains a magic number: return ((short)((word & 0xFFFF)) * 4);
Magic Number,SceneNavi.ActorRendering,MIPS,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPS.cs,GetTARGET,The following statement contains a magic number: return (uint)((word & 0x3FFFFFF) << 2);
Magic Number,SceneNavi.ActorRendering,MIPSEvaluator,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPSEvaluator.cs,MIPSEvaluator,The following statement contains a magic number: Registers = new uint[32];
Magic Number,SceneNavi.ActorRendering,MIPSEvaluator,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPSEvaluator.cs,MIPSEvaluator,The following statement contains a magic number: Stack = new uint[256 * MIPS.SafetyVal];
Magic Number,SceneNavi.ActorRendering,MIPSEvaluator,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPSEvaluator.cs,MIPSEvaluator,The following statement contains a magic number: StackPos = (int)(128 * MIPS.SafetyVal);
Magic Number,SceneNavi.ActorRendering,MIPSEvaluator,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPSEvaluator.cs,Evaluate,The following statement contains a magic number: switch ((MIPS.Opcode)((word >> 26) & 0x3F))              {                  case MIPS.Opcode.JAL:                      target = MIPS.GetTARGET(word);                      Evaluate(words' pos + 4);                      ReportResult(target' pos);                      Array.Clear(Registers' 1' 15);                      Array.Clear(Registers' 24' 4);                        Registers[(int)MIPS.Register.RA] = (BaseAddress & 0xFFFFFF) + (uint)(pos + 4);                        foreach (MemoryRegion mem in MemoryMap)                      {                          if (target > (mem.Address & 0xFFFFFF) && mem.Data.Length + (mem.Address & 0xFFFFFF) > target)                          {                              pos = (int)(target - (BaseAddress & 0xFFFFFF));                              break;                          }                      }                      break;                    case MIPS.Opcode.SLLV:                      Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] << (int)MIPS.GetRS(word);                      break;                    case MIPS.Opcode.ADDIU:                      imm = MIPS.GetIMM(word);                      if ((imm & 0x8000) != 0) imm |= 0xFFFF0000;                      Registers[MIPS.GetRT(word)] = Registers[MIPS.GetRS(word)] + imm;                      if (MIPS.GetRT(word) == MIPS.GetRS(word) && MIPS.GetRT(word) == (uint)MIPS.Register.SP) StackPos += (short)imm;                      break;                    case MIPS.Opcode.LUI:                      Registers[MIPS.GetRT(word)] = MIPS.GetIMM(word) << 16;                      break;                    case MIPS.Opcode.ANDI:                      Registers[MIPS.GetRT(word)] = Registers[MIPS.GetRS(word)] & MIPS.GetIMM(word);                      break;                    case MIPS.Opcode.ORI:                      Registers[MIPS.GetRT(word)] = Registers[MIPS.GetRS(word)] | MIPS.GetIMM(word);                      break;                    case MIPS.Opcode.SW:                      if (MIPS.GetRS(word) == (uint)MIPS.Register.SP) Stack[StackPos + MIPS.GetIMM(word)] = Registers[MIPS.GetRT(word)];                      break;                  /*              case MIPS.Opcode.LH:                  imm = MIPS.GetIMM(word);                  calcadr = imm + Registers[MIPS.GetRS(word)];                    if (MIPS.GetRS(word) == (uint)MIPS.Register.SP)                  {                      Registers[MIPS.GetRT(word)] = Stack[StackPos + imm];                      break;                  }                    foreach (MemoryRegion mem in MemoryMap)                  {                      if (calcadr > mem.Address && mem.Data.Length + mem.Address > calcadr)                      {                          Registers[MIPS.GetRT(word)] = (uint)Endian.SwapInt16(BitConverter.ToInt16(mem.Data' (int)(calcadr - mem.Address)));                          break;                      }                  }                  break;                  */                  case MIPS.Opcode.LW:                      imm = MIPS.GetIMM(word);                      if ((imm & 0x8000) != 0) imm |= 0xFFFF0000;                      calcadr = imm + Registers[MIPS.GetRS(word)];                        if (MIPS.GetRS(word) == (uint)MIPS.Register.SP)                      {                          Registers[MIPS.GetRT(word)] = Stack[StackPos + imm];                          break;                      }                        foreach (MemoryRegion mem in MemoryMap)                      {                          if (calcadr > mem.Address && mem.Data.Length + mem.Address > calcadr)                          {                              Registers[MIPS.GetRT(word)] = Endian.SwapUInt32(BitConverter.ToUInt32(mem.Data' (int)(calcadr - mem.Address)));                              break;                          }                      }                      break;                  /*              case MIPS.Opcode.LHU:                  imm = MIPS.GetIMM(word);                  if ((imm & 0x8000) != 0) imm |= 0xFFFF0000; //????                  calcadr = imm + Registers[MIPS.GetRS(word)];                    if (MIPS.GetRS(word) == (uint)MIPS.Register.SP)                  {                      Registers[MIPS.GetRT(word)] = Stack[StackPos + imm];                      break;                  }                    foreach (MemoryRegion mem in MemoryMap)                  {                      if (calcadr > mem.Address && mem.Data.Length + mem.Address > calcadr)                      {                          Registers[MIPS.GetRT(word)] = Endian.SwapUInt16(BitConverter.ToUInt16(mem.Data' (int)(calcadr - mem.Address)));                          break;                      }                  }                  break;                  */                  case MIPS.Opcode.TYPE_R:                      {                          switch ((MIPS.Opcode_R)(word & 0x3F))                          {                              case MIPS.Opcode_R.SLL:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] << (int)MIPS.GetSA(word);                                  break;                              case MIPS.Opcode_R.SRA:                              case MIPS.Opcode_R.SRL: /*test!*/                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] >> (int)MIPS.GetSA(word);                                  break;                              case MIPS.Opcode_R.ADDU:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] + Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.SUBU:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] - Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.AND:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] & Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.OR:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] | Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.XOR:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] ^ Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.JR:                                  if (MIPS.GetRS(word) == (uint)MIPS.Register.RA)                                  {                                      Array.Clear(Registers' 1' 15);                                      Array.Clear(Registers' 24' 4);                                      pos = (int)Registers[(int)MIPS.Register.RA];                                  }                                  break;                              default:                                  break;                          }                      }                      break;                    default:                      break;              }
Magic Number,SceneNavi.ActorRendering,MIPSEvaluator,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPSEvaluator.cs,Evaluate,The following statement contains a magic number: switch ((MIPS.Opcode)((word >> 26) & 0x3F))              {                  case MIPS.Opcode.JAL:                      target = MIPS.GetTARGET(word);                      Evaluate(words' pos + 4);                      ReportResult(target' pos);                      Array.Clear(Registers' 1' 15);                      Array.Clear(Registers' 24' 4);                        Registers[(int)MIPS.Register.RA] = (BaseAddress & 0xFFFFFF) + (uint)(pos + 4);                        foreach (MemoryRegion mem in MemoryMap)                      {                          if (target > (mem.Address & 0xFFFFFF) && mem.Data.Length + (mem.Address & 0xFFFFFF) > target)                          {                              pos = (int)(target - (BaseAddress & 0xFFFFFF));                              break;                          }                      }                      break;                    case MIPS.Opcode.SLLV:                      Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] << (int)MIPS.GetRS(word);                      break;                    case MIPS.Opcode.ADDIU:                      imm = MIPS.GetIMM(word);                      if ((imm & 0x8000) != 0) imm |= 0xFFFF0000;                      Registers[MIPS.GetRT(word)] = Registers[MIPS.GetRS(word)] + imm;                      if (MIPS.GetRT(word) == MIPS.GetRS(word) && MIPS.GetRT(word) == (uint)MIPS.Register.SP) StackPos += (short)imm;                      break;                    case MIPS.Opcode.LUI:                      Registers[MIPS.GetRT(word)] = MIPS.GetIMM(word) << 16;                      break;                    case MIPS.Opcode.ANDI:                      Registers[MIPS.GetRT(word)] = Registers[MIPS.GetRS(word)] & MIPS.GetIMM(word);                      break;                    case MIPS.Opcode.ORI:                      Registers[MIPS.GetRT(word)] = Registers[MIPS.GetRS(word)] | MIPS.GetIMM(word);                      break;                    case MIPS.Opcode.SW:                      if (MIPS.GetRS(word) == (uint)MIPS.Register.SP) Stack[StackPos + MIPS.GetIMM(word)] = Registers[MIPS.GetRT(word)];                      break;                  /*              case MIPS.Opcode.LH:                  imm = MIPS.GetIMM(word);                  calcadr = imm + Registers[MIPS.GetRS(word)];                    if (MIPS.GetRS(word) == (uint)MIPS.Register.SP)                  {                      Registers[MIPS.GetRT(word)] = Stack[StackPos + imm];                      break;                  }                    foreach (MemoryRegion mem in MemoryMap)                  {                      if (calcadr > mem.Address && mem.Data.Length + mem.Address > calcadr)                      {                          Registers[MIPS.GetRT(word)] = (uint)Endian.SwapInt16(BitConverter.ToInt16(mem.Data' (int)(calcadr - mem.Address)));                          break;                      }                  }                  break;                  */                  case MIPS.Opcode.LW:                      imm = MIPS.GetIMM(word);                      if ((imm & 0x8000) != 0) imm |= 0xFFFF0000;                      calcadr = imm + Registers[MIPS.GetRS(word)];                        if (MIPS.GetRS(word) == (uint)MIPS.Register.SP)                      {                          Registers[MIPS.GetRT(word)] = Stack[StackPos + imm];                          break;                      }                        foreach (MemoryRegion mem in MemoryMap)                      {                          if (calcadr > mem.Address && mem.Data.Length + mem.Address > calcadr)                          {                              Registers[MIPS.GetRT(word)] = Endian.SwapUInt32(BitConverter.ToUInt32(mem.Data' (int)(calcadr - mem.Address)));                              break;                          }                      }                      break;                  /*              case MIPS.Opcode.LHU:                  imm = MIPS.GetIMM(word);                  if ((imm & 0x8000) != 0) imm |= 0xFFFF0000; //????                  calcadr = imm + Registers[MIPS.GetRS(word)];                    if (MIPS.GetRS(word) == (uint)MIPS.Register.SP)                  {                      Registers[MIPS.GetRT(word)] = Stack[StackPos + imm];                      break;                  }                    foreach (MemoryRegion mem in MemoryMap)                  {                      if (calcadr > mem.Address && mem.Data.Length + mem.Address > calcadr)                      {                          Registers[MIPS.GetRT(word)] = Endian.SwapUInt16(BitConverter.ToUInt16(mem.Data' (int)(calcadr - mem.Address)));                          break;                      }                  }                  break;                  */                  case MIPS.Opcode.TYPE_R:                      {                          switch ((MIPS.Opcode_R)(word & 0x3F))                          {                              case MIPS.Opcode_R.SLL:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] << (int)MIPS.GetSA(word);                                  break;                              case MIPS.Opcode_R.SRA:                              case MIPS.Opcode_R.SRL: /*test!*/                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] >> (int)MIPS.GetSA(word);                                  break;                              case MIPS.Opcode_R.ADDU:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] + Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.SUBU:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] - Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.AND:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] & Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.OR:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] | Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.XOR:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] ^ Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.JR:                                  if (MIPS.GetRS(word) == (uint)MIPS.Register.RA)                                  {                                      Array.Clear(Registers' 1' 15);                                      Array.Clear(Registers' 24' 4);                                      pos = (int)Registers[(int)MIPS.Register.RA];                                  }                                  break;                              default:                                  break;                          }                      }                      break;                    default:                      break;              }
Magic Number,SceneNavi.ActorRendering,MIPSEvaluator,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPSEvaluator.cs,Evaluate,The following statement contains a magic number: switch ((MIPS.Opcode)((word >> 26) & 0x3F))              {                  case MIPS.Opcode.JAL:                      target = MIPS.GetTARGET(word);                      Evaluate(words' pos + 4);                      ReportResult(target' pos);                      Array.Clear(Registers' 1' 15);                      Array.Clear(Registers' 24' 4);                        Registers[(int)MIPS.Register.RA] = (BaseAddress & 0xFFFFFF) + (uint)(pos + 4);                        foreach (MemoryRegion mem in MemoryMap)                      {                          if (target > (mem.Address & 0xFFFFFF) && mem.Data.Length + (mem.Address & 0xFFFFFF) > target)                          {                              pos = (int)(target - (BaseAddress & 0xFFFFFF));                              break;                          }                      }                      break;                    case MIPS.Opcode.SLLV:                      Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] << (int)MIPS.GetRS(word);                      break;                    case MIPS.Opcode.ADDIU:                      imm = MIPS.GetIMM(word);                      if ((imm & 0x8000) != 0) imm |= 0xFFFF0000;                      Registers[MIPS.GetRT(word)] = Registers[MIPS.GetRS(word)] + imm;                      if (MIPS.GetRT(word) == MIPS.GetRS(word) && MIPS.GetRT(word) == (uint)MIPS.Register.SP) StackPos += (short)imm;                      break;                    case MIPS.Opcode.LUI:                      Registers[MIPS.GetRT(word)] = MIPS.GetIMM(word) << 16;                      break;                    case MIPS.Opcode.ANDI:                      Registers[MIPS.GetRT(word)] = Registers[MIPS.GetRS(word)] & MIPS.GetIMM(word);                      break;                    case MIPS.Opcode.ORI:                      Registers[MIPS.GetRT(word)] = Registers[MIPS.GetRS(word)] | MIPS.GetIMM(word);                      break;                    case MIPS.Opcode.SW:                      if (MIPS.GetRS(word) == (uint)MIPS.Register.SP) Stack[StackPos + MIPS.GetIMM(word)] = Registers[MIPS.GetRT(word)];                      break;                  /*              case MIPS.Opcode.LH:                  imm = MIPS.GetIMM(word);                  calcadr = imm + Registers[MIPS.GetRS(word)];                    if (MIPS.GetRS(word) == (uint)MIPS.Register.SP)                  {                      Registers[MIPS.GetRT(word)] = Stack[StackPos + imm];                      break;                  }                    foreach (MemoryRegion mem in MemoryMap)                  {                      if (calcadr > mem.Address && mem.Data.Length + mem.Address > calcadr)                      {                          Registers[MIPS.GetRT(word)] = (uint)Endian.SwapInt16(BitConverter.ToInt16(mem.Data' (int)(calcadr - mem.Address)));                          break;                      }                  }                  break;                  */                  case MIPS.Opcode.LW:                      imm = MIPS.GetIMM(word);                      if ((imm & 0x8000) != 0) imm |= 0xFFFF0000;                      calcadr = imm + Registers[MIPS.GetRS(word)];                        if (MIPS.GetRS(word) == (uint)MIPS.Register.SP)                      {                          Registers[MIPS.GetRT(word)] = Stack[StackPos + imm];                          break;                      }                        foreach (MemoryRegion mem in MemoryMap)                      {                          if (calcadr > mem.Address && mem.Data.Length + mem.Address > calcadr)                          {                              Registers[MIPS.GetRT(word)] = Endian.SwapUInt32(BitConverter.ToUInt32(mem.Data' (int)(calcadr - mem.Address)));                              break;                          }                      }                      break;                  /*              case MIPS.Opcode.LHU:                  imm = MIPS.GetIMM(word);                  if ((imm & 0x8000) != 0) imm |= 0xFFFF0000; //????                  calcadr = imm + Registers[MIPS.GetRS(word)];                    if (MIPS.GetRS(word) == (uint)MIPS.Register.SP)                  {                      Registers[MIPS.GetRT(word)] = Stack[StackPos + imm];                      break;                  }                    foreach (MemoryRegion mem in MemoryMap)                  {                      if (calcadr > mem.Address && mem.Data.Length + mem.Address > calcadr)                      {                          Registers[MIPS.GetRT(word)] = Endian.SwapUInt16(BitConverter.ToUInt16(mem.Data' (int)(calcadr - mem.Address)));                          break;                      }                  }                  break;                  */                  case MIPS.Opcode.TYPE_R:                      {                          switch ((MIPS.Opcode_R)(word & 0x3F))                          {                              case MIPS.Opcode_R.SLL:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] << (int)MIPS.GetSA(word);                                  break;                              case MIPS.Opcode_R.SRA:                              case MIPS.Opcode_R.SRL: /*test!*/                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] >> (int)MIPS.GetSA(word);                                  break;                              case MIPS.Opcode_R.ADDU:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] + Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.SUBU:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] - Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.AND:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] & Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.OR:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] | Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.XOR:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] ^ Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.JR:                                  if (MIPS.GetRS(word) == (uint)MIPS.Register.RA)                                  {                                      Array.Clear(Registers' 1' 15);                                      Array.Clear(Registers' 24' 4);                                      pos = (int)Registers[(int)MIPS.Register.RA];                                  }                                  break;                              default:                                  break;                          }                      }                      break;                    default:                      break;              }
Magic Number,SceneNavi.ActorRendering,MIPSEvaluator,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPSEvaluator.cs,Evaluate,The following statement contains a magic number: switch ((MIPS.Opcode)((word >> 26) & 0x3F))              {                  case MIPS.Opcode.JAL:                      target = MIPS.GetTARGET(word);                      Evaluate(words' pos + 4);                      ReportResult(target' pos);                      Array.Clear(Registers' 1' 15);                      Array.Clear(Registers' 24' 4);                        Registers[(int)MIPS.Register.RA] = (BaseAddress & 0xFFFFFF) + (uint)(pos + 4);                        foreach (MemoryRegion mem in MemoryMap)                      {                          if (target > (mem.Address & 0xFFFFFF) && mem.Data.Length + (mem.Address & 0xFFFFFF) > target)                          {                              pos = (int)(target - (BaseAddress & 0xFFFFFF));                              break;                          }                      }                      break;                    case MIPS.Opcode.SLLV:                      Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] << (int)MIPS.GetRS(word);                      break;                    case MIPS.Opcode.ADDIU:                      imm = MIPS.GetIMM(word);                      if ((imm & 0x8000) != 0) imm |= 0xFFFF0000;                      Registers[MIPS.GetRT(word)] = Registers[MIPS.GetRS(word)] + imm;                      if (MIPS.GetRT(word) == MIPS.GetRS(word) && MIPS.GetRT(word) == (uint)MIPS.Register.SP) StackPos += (short)imm;                      break;                    case MIPS.Opcode.LUI:                      Registers[MIPS.GetRT(word)] = MIPS.GetIMM(word) << 16;                      break;                    case MIPS.Opcode.ANDI:                      Registers[MIPS.GetRT(word)] = Registers[MIPS.GetRS(word)] & MIPS.GetIMM(word);                      break;                    case MIPS.Opcode.ORI:                      Registers[MIPS.GetRT(word)] = Registers[MIPS.GetRS(word)] | MIPS.GetIMM(word);                      break;                    case MIPS.Opcode.SW:                      if (MIPS.GetRS(word) == (uint)MIPS.Register.SP) Stack[StackPos + MIPS.GetIMM(word)] = Registers[MIPS.GetRT(word)];                      break;                  /*              case MIPS.Opcode.LH:                  imm = MIPS.GetIMM(word);                  calcadr = imm + Registers[MIPS.GetRS(word)];                    if (MIPS.GetRS(word) == (uint)MIPS.Register.SP)                  {                      Registers[MIPS.GetRT(word)] = Stack[StackPos + imm];                      break;                  }                    foreach (MemoryRegion mem in MemoryMap)                  {                      if (calcadr > mem.Address && mem.Data.Length + mem.Address > calcadr)                      {                          Registers[MIPS.GetRT(word)] = (uint)Endian.SwapInt16(BitConverter.ToInt16(mem.Data' (int)(calcadr - mem.Address)));                          break;                      }                  }                  break;                  */                  case MIPS.Opcode.LW:                      imm = MIPS.GetIMM(word);                      if ((imm & 0x8000) != 0) imm |= 0xFFFF0000;                      calcadr = imm + Registers[MIPS.GetRS(word)];                        if (MIPS.GetRS(word) == (uint)MIPS.Register.SP)                      {                          Registers[MIPS.GetRT(word)] = Stack[StackPos + imm];                          break;                      }                        foreach (MemoryRegion mem in MemoryMap)                      {                          if (calcadr > mem.Address && mem.Data.Length + mem.Address > calcadr)                          {                              Registers[MIPS.GetRT(word)] = Endian.SwapUInt32(BitConverter.ToUInt32(mem.Data' (int)(calcadr - mem.Address)));                              break;                          }                      }                      break;                  /*              case MIPS.Opcode.LHU:                  imm = MIPS.GetIMM(word);                  if ((imm & 0x8000) != 0) imm |= 0xFFFF0000; //????                  calcadr = imm + Registers[MIPS.GetRS(word)];                    if (MIPS.GetRS(word) == (uint)MIPS.Register.SP)                  {                      Registers[MIPS.GetRT(word)] = Stack[StackPos + imm];                      break;                  }                    foreach (MemoryRegion mem in MemoryMap)                  {                      if (calcadr > mem.Address && mem.Data.Length + mem.Address > calcadr)                      {                          Registers[MIPS.GetRT(word)] = Endian.SwapUInt16(BitConverter.ToUInt16(mem.Data' (int)(calcadr - mem.Address)));                          break;                      }                  }                  break;                  */                  case MIPS.Opcode.TYPE_R:                      {                          switch ((MIPS.Opcode_R)(word & 0x3F))                          {                              case MIPS.Opcode_R.SLL:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] << (int)MIPS.GetSA(word);                                  break;                              case MIPS.Opcode_R.SRA:                              case MIPS.Opcode_R.SRL: /*test!*/                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] >> (int)MIPS.GetSA(word);                                  break;                              case MIPS.Opcode_R.ADDU:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] + Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.SUBU:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] - Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.AND:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] & Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.OR:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] | Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.XOR:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] ^ Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.JR:                                  if (MIPS.GetRS(word) == (uint)MIPS.Register.RA)                                  {                                      Array.Clear(Registers' 1' 15);                                      Array.Clear(Registers' 24' 4);                                      pos = (int)Registers[(int)MIPS.Register.RA];                                  }                                  break;                              default:                                  break;                          }                      }                      break;                    default:                      break;              }
Magic Number,SceneNavi.ActorRendering,MIPSEvaluator,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPSEvaluator.cs,Evaluate,The following statement contains a magic number: switch ((MIPS.Opcode)((word >> 26) & 0x3F))              {                  case MIPS.Opcode.JAL:                      target = MIPS.GetTARGET(word);                      Evaluate(words' pos + 4);                      ReportResult(target' pos);                      Array.Clear(Registers' 1' 15);                      Array.Clear(Registers' 24' 4);                        Registers[(int)MIPS.Register.RA] = (BaseAddress & 0xFFFFFF) + (uint)(pos + 4);                        foreach (MemoryRegion mem in MemoryMap)                      {                          if (target > (mem.Address & 0xFFFFFF) && mem.Data.Length + (mem.Address & 0xFFFFFF) > target)                          {                              pos = (int)(target - (BaseAddress & 0xFFFFFF));                              break;                          }                      }                      break;                    case MIPS.Opcode.SLLV:                      Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] << (int)MIPS.GetRS(word);                      break;                    case MIPS.Opcode.ADDIU:                      imm = MIPS.GetIMM(word);                      if ((imm & 0x8000) != 0) imm |= 0xFFFF0000;                      Registers[MIPS.GetRT(word)] = Registers[MIPS.GetRS(word)] + imm;                      if (MIPS.GetRT(word) == MIPS.GetRS(word) && MIPS.GetRT(word) == (uint)MIPS.Register.SP) StackPos += (short)imm;                      break;                    case MIPS.Opcode.LUI:                      Registers[MIPS.GetRT(word)] = MIPS.GetIMM(word) << 16;                      break;                    case MIPS.Opcode.ANDI:                      Registers[MIPS.GetRT(word)] = Registers[MIPS.GetRS(word)] & MIPS.GetIMM(word);                      break;                    case MIPS.Opcode.ORI:                      Registers[MIPS.GetRT(word)] = Registers[MIPS.GetRS(word)] | MIPS.GetIMM(word);                      break;                    case MIPS.Opcode.SW:                      if (MIPS.GetRS(word) == (uint)MIPS.Register.SP) Stack[StackPos + MIPS.GetIMM(word)] = Registers[MIPS.GetRT(word)];                      break;                  /*              case MIPS.Opcode.LH:                  imm = MIPS.GetIMM(word);                  calcadr = imm + Registers[MIPS.GetRS(word)];                    if (MIPS.GetRS(word) == (uint)MIPS.Register.SP)                  {                      Registers[MIPS.GetRT(word)] = Stack[StackPos + imm];                      break;                  }                    foreach (MemoryRegion mem in MemoryMap)                  {                      if (calcadr > mem.Address && mem.Data.Length + mem.Address > calcadr)                      {                          Registers[MIPS.GetRT(word)] = (uint)Endian.SwapInt16(BitConverter.ToInt16(mem.Data' (int)(calcadr - mem.Address)));                          break;                      }                  }                  break;                  */                  case MIPS.Opcode.LW:                      imm = MIPS.GetIMM(word);                      if ((imm & 0x8000) != 0) imm |= 0xFFFF0000;                      calcadr = imm + Registers[MIPS.GetRS(word)];                        if (MIPS.GetRS(word) == (uint)MIPS.Register.SP)                      {                          Registers[MIPS.GetRT(word)] = Stack[StackPos + imm];                          break;                      }                        foreach (MemoryRegion mem in MemoryMap)                      {                          if (calcadr > mem.Address && mem.Data.Length + mem.Address > calcadr)                          {                              Registers[MIPS.GetRT(word)] = Endian.SwapUInt32(BitConverter.ToUInt32(mem.Data' (int)(calcadr - mem.Address)));                              break;                          }                      }                      break;                  /*              case MIPS.Opcode.LHU:                  imm = MIPS.GetIMM(word);                  if ((imm & 0x8000) != 0) imm |= 0xFFFF0000; //????                  calcadr = imm + Registers[MIPS.GetRS(word)];                    if (MIPS.GetRS(word) == (uint)MIPS.Register.SP)                  {                      Registers[MIPS.GetRT(word)] = Stack[StackPos + imm];                      break;                  }                    foreach (MemoryRegion mem in MemoryMap)                  {                      if (calcadr > mem.Address && mem.Data.Length + mem.Address > calcadr)                      {                          Registers[MIPS.GetRT(word)] = Endian.SwapUInt16(BitConverter.ToUInt16(mem.Data' (int)(calcadr - mem.Address)));                          break;                      }                  }                  break;                  */                  case MIPS.Opcode.TYPE_R:                      {                          switch ((MIPS.Opcode_R)(word & 0x3F))                          {                              case MIPS.Opcode_R.SLL:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] << (int)MIPS.GetSA(word);                                  break;                              case MIPS.Opcode_R.SRA:                              case MIPS.Opcode_R.SRL: /*test!*/                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] >> (int)MIPS.GetSA(word);                                  break;                              case MIPS.Opcode_R.ADDU:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] + Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.SUBU:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] - Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.AND:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] & Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.OR:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] | Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.XOR:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] ^ Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.JR:                                  if (MIPS.GetRS(word) == (uint)MIPS.Register.RA)                                  {                                      Array.Clear(Registers' 1' 15);                                      Array.Clear(Registers' 24' 4);                                      pos = (int)Registers[(int)MIPS.Register.RA];                                  }                                  break;                              default:                                  break;                          }                      }                      break;                    default:                      break;              }
Magic Number,SceneNavi.ActorRendering,MIPSEvaluator,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPSEvaluator.cs,Evaluate,The following statement contains a magic number: switch ((MIPS.Opcode)((word >> 26) & 0x3F))              {                  case MIPS.Opcode.JAL:                      target = MIPS.GetTARGET(word);                      Evaluate(words' pos + 4);                      ReportResult(target' pos);                      Array.Clear(Registers' 1' 15);                      Array.Clear(Registers' 24' 4);                        Registers[(int)MIPS.Register.RA] = (BaseAddress & 0xFFFFFF) + (uint)(pos + 4);                        foreach (MemoryRegion mem in MemoryMap)                      {                          if (target > (mem.Address & 0xFFFFFF) && mem.Data.Length + (mem.Address & 0xFFFFFF) > target)                          {                              pos = (int)(target - (BaseAddress & 0xFFFFFF));                              break;                          }                      }                      break;                    case MIPS.Opcode.SLLV:                      Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] << (int)MIPS.GetRS(word);                      break;                    case MIPS.Opcode.ADDIU:                      imm = MIPS.GetIMM(word);                      if ((imm & 0x8000) != 0) imm |= 0xFFFF0000;                      Registers[MIPS.GetRT(word)] = Registers[MIPS.GetRS(word)] + imm;                      if (MIPS.GetRT(word) == MIPS.GetRS(word) && MIPS.GetRT(word) == (uint)MIPS.Register.SP) StackPos += (short)imm;                      break;                    case MIPS.Opcode.LUI:                      Registers[MIPS.GetRT(word)] = MIPS.GetIMM(word) << 16;                      break;                    case MIPS.Opcode.ANDI:                      Registers[MIPS.GetRT(word)] = Registers[MIPS.GetRS(word)] & MIPS.GetIMM(word);                      break;                    case MIPS.Opcode.ORI:                      Registers[MIPS.GetRT(word)] = Registers[MIPS.GetRS(word)] | MIPS.GetIMM(word);                      break;                    case MIPS.Opcode.SW:                      if (MIPS.GetRS(word) == (uint)MIPS.Register.SP) Stack[StackPos + MIPS.GetIMM(word)] = Registers[MIPS.GetRT(word)];                      break;                  /*              case MIPS.Opcode.LH:                  imm = MIPS.GetIMM(word);                  calcadr = imm + Registers[MIPS.GetRS(word)];                    if (MIPS.GetRS(word) == (uint)MIPS.Register.SP)                  {                      Registers[MIPS.GetRT(word)] = Stack[StackPos + imm];                      break;                  }                    foreach (MemoryRegion mem in MemoryMap)                  {                      if (calcadr > mem.Address && mem.Data.Length + mem.Address > calcadr)                      {                          Registers[MIPS.GetRT(word)] = (uint)Endian.SwapInt16(BitConverter.ToInt16(mem.Data' (int)(calcadr - mem.Address)));                          break;                      }                  }                  break;                  */                  case MIPS.Opcode.LW:                      imm = MIPS.GetIMM(word);                      if ((imm & 0x8000) != 0) imm |= 0xFFFF0000;                      calcadr = imm + Registers[MIPS.GetRS(word)];                        if (MIPS.GetRS(word) == (uint)MIPS.Register.SP)                      {                          Registers[MIPS.GetRT(word)] = Stack[StackPos + imm];                          break;                      }                        foreach (MemoryRegion mem in MemoryMap)                      {                          if (calcadr > mem.Address && mem.Data.Length + mem.Address > calcadr)                          {                              Registers[MIPS.GetRT(word)] = Endian.SwapUInt32(BitConverter.ToUInt32(mem.Data' (int)(calcadr - mem.Address)));                              break;                          }                      }                      break;                  /*              case MIPS.Opcode.LHU:                  imm = MIPS.GetIMM(word);                  if ((imm & 0x8000) != 0) imm |= 0xFFFF0000; //????                  calcadr = imm + Registers[MIPS.GetRS(word)];                    if (MIPS.GetRS(word) == (uint)MIPS.Register.SP)                  {                      Registers[MIPS.GetRT(word)] = Stack[StackPos + imm];                      break;                  }                    foreach (MemoryRegion mem in MemoryMap)                  {                      if (calcadr > mem.Address && mem.Data.Length + mem.Address > calcadr)                      {                          Registers[MIPS.GetRT(word)] = Endian.SwapUInt16(BitConverter.ToUInt16(mem.Data' (int)(calcadr - mem.Address)));                          break;                      }                  }                  break;                  */                  case MIPS.Opcode.TYPE_R:                      {                          switch ((MIPS.Opcode_R)(word & 0x3F))                          {                              case MIPS.Opcode_R.SLL:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] << (int)MIPS.GetSA(word);                                  break;                              case MIPS.Opcode_R.SRA:                              case MIPS.Opcode_R.SRL: /*test!*/                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] >> (int)MIPS.GetSA(word);                                  break;                              case MIPS.Opcode_R.ADDU:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] + Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.SUBU:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] - Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.AND:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] & Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.OR:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] | Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.XOR:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] ^ Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.JR:                                  if (MIPS.GetRS(word) == (uint)MIPS.Register.RA)                                  {                                      Array.Clear(Registers' 1' 15);                                      Array.Clear(Registers' 24' 4);                                      pos = (int)Registers[(int)MIPS.Register.RA];                                  }                                  break;                              default:                                  break;                          }                      }                      break;                    default:                      break;              }
Magic Number,SceneNavi.ActorRendering,MIPSEvaluator,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPSEvaluator.cs,Evaluate,The following statement contains a magic number: switch ((MIPS.Opcode)((word >> 26) & 0x3F))              {                  case MIPS.Opcode.JAL:                      target = MIPS.GetTARGET(word);                      Evaluate(words' pos + 4);                      ReportResult(target' pos);                      Array.Clear(Registers' 1' 15);                      Array.Clear(Registers' 24' 4);                        Registers[(int)MIPS.Register.RA] = (BaseAddress & 0xFFFFFF) + (uint)(pos + 4);                        foreach (MemoryRegion mem in MemoryMap)                      {                          if (target > (mem.Address & 0xFFFFFF) && mem.Data.Length + (mem.Address & 0xFFFFFF) > target)                          {                              pos = (int)(target - (BaseAddress & 0xFFFFFF));                              break;                          }                      }                      break;                    case MIPS.Opcode.SLLV:                      Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] << (int)MIPS.GetRS(word);                      break;                    case MIPS.Opcode.ADDIU:                      imm = MIPS.GetIMM(word);                      if ((imm & 0x8000) != 0) imm |= 0xFFFF0000;                      Registers[MIPS.GetRT(word)] = Registers[MIPS.GetRS(word)] + imm;                      if (MIPS.GetRT(word) == MIPS.GetRS(word) && MIPS.GetRT(word) == (uint)MIPS.Register.SP) StackPos += (short)imm;                      break;                    case MIPS.Opcode.LUI:                      Registers[MIPS.GetRT(word)] = MIPS.GetIMM(word) << 16;                      break;                    case MIPS.Opcode.ANDI:                      Registers[MIPS.GetRT(word)] = Registers[MIPS.GetRS(word)] & MIPS.GetIMM(word);                      break;                    case MIPS.Opcode.ORI:                      Registers[MIPS.GetRT(word)] = Registers[MIPS.GetRS(word)] | MIPS.GetIMM(word);                      break;                    case MIPS.Opcode.SW:                      if (MIPS.GetRS(word) == (uint)MIPS.Register.SP) Stack[StackPos + MIPS.GetIMM(word)] = Registers[MIPS.GetRT(word)];                      break;                  /*              case MIPS.Opcode.LH:                  imm = MIPS.GetIMM(word);                  calcadr = imm + Registers[MIPS.GetRS(word)];                    if (MIPS.GetRS(word) == (uint)MIPS.Register.SP)                  {                      Registers[MIPS.GetRT(word)] = Stack[StackPos + imm];                      break;                  }                    foreach (MemoryRegion mem in MemoryMap)                  {                      if (calcadr > mem.Address && mem.Data.Length + mem.Address > calcadr)                      {                          Registers[MIPS.GetRT(word)] = (uint)Endian.SwapInt16(BitConverter.ToInt16(mem.Data' (int)(calcadr - mem.Address)));                          break;                      }                  }                  break;                  */                  case MIPS.Opcode.LW:                      imm = MIPS.GetIMM(word);                      if ((imm & 0x8000) != 0) imm |= 0xFFFF0000;                      calcadr = imm + Registers[MIPS.GetRS(word)];                        if (MIPS.GetRS(word) == (uint)MIPS.Register.SP)                      {                          Registers[MIPS.GetRT(word)] = Stack[StackPos + imm];                          break;                      }                        foreach (MemoryRegion mem in MemoryMap)                      {                          if (calcadr > mem.Address && mem.Data.Length + mem.Address > calcadr)                          {                              Registers[MIPS.GetRT(word)] = Endian.SwapUInt32(BitConverter.ToUInt32(mem.Data' (int)(calcadr - mem.Address)));                              break;                          }                      }                      break;                  /*              case MIPS.Opcode.LHU:                  imm = MIPS.GetIMM(word);                  if ((imm & 0x8000) != 0) imm |= 0xFFFF0000; //????                  calcadr = imm + Registers[MIPS.GetRS(word)];                    if (MIPS.GetRS(word) == (uint)MIPS.Register.SP)                  {                      Registers[MIPS.GetRT(word)] = Stack[StackPos + imm];                      break;                  }                    foreach (MemoryRegion mem in MemoryMap)                  {                      if (calcadr > mem.Address && mem.Data.Length + mem.Address > calcadr)                      {                          Registers[MIPS.GetRT(word)] = Endian.SwapUInt16(BitConverter.ToUInt16(mem.Data' (int)(calcadr - mem.Address)));                          break;                      }                  }                  break;                  */                  case MIPS.Opcode.TYPE_R:                      {                          switch ((MIPS.Opcode_R)(word & 0x3F))                          {                              case MIPS.Opcode_R.SLL:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] << (int)MIPS.GetSA(word);                                  break;                              case MIPS.Opcode_R.SRA:                              case MIPS.Opcode_R.SRL: /*test!*/                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] >> (int)MIPS.GetSA(word);                                  break;                              case MIPS.Opcode_R.ADDU:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] + Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.SUBU:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] - Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.AND:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] & Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.OR:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] | Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.XOR:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] ^ Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.JR:                                  if (MIPS.GetRS(word) == (uint)MIPS.Register.RA)                                  {                                      Array.Clear(Registers' 1' 15);                                      Array.Clear(Registers' 24' 4);                                      pos = (int)Registers[(int)MIPS.Register.RA];                                  }                                  break;                              default:                                  break;                          }                      }                      break;                    default:                      break;              }
Magic Number,SceneNavi.ActorRendering,MIPSEvaluator,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPSEvaluator.cs,Evaluate,The following statement contains a magic number: switch ((MIPS.Opcode)((word >> 26) & 0x3F))              {                  case MIPS.Opcode.JAL:                      target = MIPS.GetTARGET(word);                      Evaluate(words' pos + 4);                      ReportResult(target' pos);                      Array.Clear(Registers' 1' 15);                      Array.Clear(Registers' 24' 4);                        Registers[(int)MIPS.Register.RA] = (BaseAddress & 0xFFFFFF) + (uint)(pos + 4);                        foreach (MemoryRegion mem in MemoryMap)                      {                          if (target > (mem.Address & 0xFFFFFF) && mem.Data.Length + (mem.Address & 0xFFFFFF) > target)                          {                              pos = (int)(target - (BaseAddress & 0xFFFFFF));                              break;                          }                      }                      break;                    case MIPS.Opcode.SLLV:                      Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] << (int)MIPS.GetRS(word);                      break;                    case MIPS.Opcode.ADDIU:                      imm = MIPS.GetIMM(word);                      if ((imm & 0x8000) != 0) imm |= 0xFFFF0000;                      Registers[MIPS.GetRT(word)] = Registers[MIPS.GetRS(word)] + imm;                      if (MIPS.GetRT(word) == MIPS.GetRS(word) && MIPS.GetRT(word) == (uint)MIPS.Register.SP) StackPos += (short)imm;                      break;                    case MIPS.Opcode.LUI:                      Registers[MIPS.GetRT(word)] = MIPS.GetIMM(word) << 16;                      break;                    case MIPS.Opcode.ANDI:                      Registers[MIPS.GetRT(word)] = Registers[MIPS.GetRS(word)] & MIPS.GetIMM(word);                      break;                    case MIPS.Opcode.ORI:                      Registers[MIPS.GetRT(word)] = Registers[MIPS.GetRS(word)] | MIPS.GetIMM(word);                      break;                    case MIPS.Opcode.SW:                      if (MIPS.GetRS(word) == (uint)MIPS.Register.SP) Stack[StackPos + MIPS.GetIMM(word)] = Registers[MIPS.GetRT(word)];                      break;                  /*              case MIPS.Opcode.LH:                  imm = MIPS.GetIMM(word);                  calcadr = imm + Registers[MIPS.GetRS(word)];                    if (MIPS.GetRS(word) == (uint)MIPS.Register.SP)                  {                      Registers[MIPS.GetRT(word)] = Stack[StackPos + imm];                      break;                  }                    foreach (MemoryRegion mem in MemoryMap)                  {                      if (calcadr > mem.Address && mem.Data.Length + mem.Address > calcadr)                      {                          Registers[MIPS.GetRT(word)] = (uint)Endian.SwapInt16(BitConverter.ToInt16(mem.Data' (int)(calcadr - mem.Address)));                          break;                      }                  }                  break;                  */                  case MIPS.Opcode.LW:                      imm = MIPS.GetIMM(word);                      if ((imm & 0x8000) != 0) imm |= 0xFFFF0000;                      calcadr = imm + Registers[MIPS.GetRS(word)];                        if (MIPS.GetRS(word) == (uint)MIPS.Register.SP)                      {                          Registers[MIPS.GetRT(word)] = Stack[StackPos + imm];                          break;                      }                        foreach (MemoryRegion mem in MemoryMap)                      {                          if (calcadr > mem.Address && mem.Data.Length + mem.Address > calcadr)                          {                              Registers[MIPS.GetRT(word)] = Endian.SwapUInt32(BitConverter.ToUInt32(mem.Data' (int)(calcadr - mem.Address)));                              break;                          }                      }                      break;                  /*              case MIPS.Opcode.LHU:                  imm = MIPS.GetIMM(word);                  if ((imm & 0x8000) != 0) imm |= 0xFFFF0000; //????                  calcadr = imm + Registers[MIPS.GetRS(word)];                    if (MIPS.GetRS(word) == (uint)MIPS.Register.SP)                  {                      Registers[MIPS.GetRT(word)] = Stack[StackPos + imm];                      break;                  }                    foreach (MemoryRegion mem in MemoryMap)                  {                      if (calcadr > mem.Address && mem.Data.Length + mem.Address > calcadr)                      {                          Registers[MIPS.GetRT(word)] = Endian.SwapUInt16(BitConverter.ToUInt16(mem.Data' (int)(calcadr - mem.Address)));                          break;                      }                  }                  break;                  */                  case MIPS.Opcode.TYPE_R:                      {                          switch ((MIPS.Opcode_R)(word & 0x3F))                          {                              case MIPS.Opcode_R.SLL:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] << (int)MIPS.GetSA(word);                                  break;                              case MIPS.Opcode_R.SRA:                              case MIPS.Opcode_R.SRL: /*test!*/                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] >> (int)MIPS.GetSA(word);                                  break;                              case MIPS.Opcode_R.ADDU:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] + Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.SUBU:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] - Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.AND:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] & Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.OR:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] | Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.XOR:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] ^ Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.JR:                                  if (MIPS.GetRS(word) == (uint)MIPS.Register.RA)                                  {                                      Array.Clear(Registers' 1' 15);                                      Array.Clear(Registers' 24' 4);                                      pos = (int)Registers[(int)MIPS.Register.RA];                                  }                                  break;                              default:                                  break;                          }                      }                      break;                    default:                      break;              }
Magic Number,SceneNavi.ActorRendering,MIPSEvaluator,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPSEvaluator.cs,Evaluate,The following statement contains a magic number: switch ((MIPS.Opcode)((word >> 26) & 0x3F))              {                  case MIPS.Opcode.JAL:                      target = MIPS.GetTARGET(word);                      Evaluate(words' pos + 4);                      ReportResult(target' pos);                      Array.Clear(Registers' 1' 15);                      Array.Clear(Registers' 24' 4);                        Registers[(int)MIPS.Register.RA] = (BaseAddress & 0xFFFFFF) + (uint)(pos + 4);                        foreach (MemoryRegion mem in MemoryMap)                      {                          if (target > (mem.Address & 0xFFFFFF) && mem.Data.Length + (mem.Address & 0xFFFFFF) > target)                          {                              pos = (int)(target - (BaseAddress & 0xFFFFFF));                              break;                          }                      }                      break;                    case MIPS.Opcode.SLLV:                      Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] << (int)MIPS.GetRS(word);                      break;                    case MIPS.Opcode.ADDIU:                      imm = MIPS.GetIMM(word);                      if ((imm & 0x8000) != 0) imm |= 0xFFFF0000;                      Registers[MIPS.GetRT(word)] = Registers[MIPS.GetRS(word)] + imm;                      if (MIPS.GetRT(word) == MIPS.GetRS(word) && MIPS.GetRT(word) == (uint)MIPS.Register.SP) StackPos += (short)imm;                      break;                    case MIPS.Opcode.LUI:                      Registers[MIPS.GetRT(word)] = MIPS.GetIMM(word) << 16;                      break;                    case MIPS.Opcode.ANDI:                      Registers[MIPS.GetRT(word)] = Registers[MIPS.GetRS(word)] & MIPS.GetIMM(word);                      break;                    case MIPS.Opcode.ORI:                      Registers[MIPS.GetRT(word)] = Registers[MIPS.GetRS(word)] | MIPS.GetIMM(word);                      break;                    case MIPS.Opcode.SW:                      if (MIPS.GetRS(word) == (uint)MIPS.Register.SP) Stack[StackPos + MIPS.GetIMM(word)] = Registers[MIPS.GetRT(word)];                      break;                  /*              case MIPS.Opcode.LH:                  imm = MIPS.GetIMM(word);                  calcadr = imm + Registers[MIPS.GetRS(word)];                    if (MIPS.GetRS(word) == (uint)MIPS.Register.SP)                  {                      Registers[MIPS.GetRT(word)] = Stack[StackPos + imm];                      break;                  }                    foreach (MemoryRegion mem in MemoryMap)                  {                      if (calcadr > mem.Address && mem.Data.Length + mem.Address > calcadr)                      {                          Registers[MIPS.GetRT(word)] = (uint)Endian.SwapInt16(BitConverter.ToInt16(mem.Data' (int)(calcadr - mem.Address)));                          break;                      }                  }                  break;                  */                  case MIPS.Opcode.LW:                      imm = MIPS.GetIMM(word);                      if ((imm & 0x8000) != 0) imm |= 0xFFFF0000;                      calcadr = imm + Registers[MIPS.GetRS(word)];                        if (MIPS.GetRS(word) == (uint)MIPS.Register.SP)                      {                          Registers[MIPS.GetRT(word)] = Stack[StackPos + imm];                          break;                      }                        foreach (MemoryRegion mem in MemoryMap)                      {                          if (calcadr > mem.Address && mem.Data.Length + mem.Address > calcadr)                          {                              Registers[MIPS.GetRT(word)] = Endian.SwapUInt32(BitConverter.ToUInt32(mem.Data' (int)(calcadr - mem.Address)));                              break;                          }                      }                      break;                  /*              case MIPS.Opcode.LHU:                  imm = MIPS.GetIMM(word);                  if ((imm & 0x8000) != 0) imm |= 0xFFFF0000; //????                  calcadr = imm + Registers[MIPS.GetRS(word)];                    if (MIPS.GetRS(word) == (uint)MIPS.Register.SP)                  {                      Registers[MIPS.GetRT(word)] = Stack[StackPos + imm];                      break;                  }                    foreach (MemoryRegion mem in MemoryMap)                  {                      if (calcadr > mem.Address && mem.Data.Length + mem.Address > calcadr)                      {                          Registers[MIPS.GetRT(word)] = Endian.SwapUInt16(BitConverter.ToUInt16(mem.Data' (int)(calcadr - mem.Address)));                          break;                      }                  }                  break;                  */                  case MIPS.Opcode.TYPE_R:                      {                          switch ((MIPS.Opcode_R)(word & 0x3F))                          {                              case MIPS.Opcode_R.SLL:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] << (int)MIPS.GetSA(word);                                  break;                              case MIPS.Opcode_R.SRA:                              case MIPS.Opcode_R.SRL: /*test!*/                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] >> (int)MIPS.GetSA(word);                                  break;                              case MIPS.Opcode_R.ADDU:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] + Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.SUBU:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] - Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.AND:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] & Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.OR:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] | Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.XOR:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] ^ Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.JR:                                  if (MIPS.GetRS(word) == (uint)MIPS.Register.RA)                                  {                                      Array.Clear(Registers' 1' 15);                                      Array.Clear(Registers' 24' 4);                                      pos = (int)Registers[(int)MIPS.Register.RA];                                  }                                  break;                              default:                                  break;                          }                      }                      break;                    default:                      break;              }
Magic Number,SceneNavi.ActorRendering,MIPSEvaluator,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPSEvaluator.cs,Evaluate,The following statement contains a magic number: switch ((MIPS.Opcode)((word >> 26) & 0x3F))              {                  case MIPS.Opcode.JAL:                      target = MIPS.GetTARGET(word);                      Evaluate(words' pos + 4);                      ReportResult(target' pos);                      Array.Clear(Registers' 1' 15);                      Array.Clear(Registers' 24' 4);                        Registers[(int)MIPS.Register.RA] = (BaseAddress & 0xFFFFFF) + (uint)(pos + 4);                        foreach (MemoryRegion mem in MemoryMap)                      {                          if (target > (mem.Address & 0xFFFFFF) && mem.Data.Length + (mem.Address & 0xFFFFFF) > target)                          {                              pos = (int)(target - (BaseAddress & 0xFFFFFF));                              break;                          }                      }                      break;                    case MIPS.Opcode.SLLV:                      Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] << (int)MIPS.GetRS(word);                      break;                    case MIPS.Opcode.ADDIU:                      imm = MIPS.GetIMM(word);                      if ((imm & 0x8000) != 0) imm |= 0xFFFF0000;                      Registers[MIPS.GetRT(word)] = Registers[MIPS.GetRS(word)] + imm;                      if (MIPS.GetRT(word) == MIPS.GetRS(word) && MIPS.GetRT(word) == (uint)MIPS.Register.SP) StackPos += (short)imm;                      break;                    case MIPS.Opcode.LUI:                      Registers[MIPS.GetRT(word)] = MIPS.GetIMM(word) << 16;                      break;                    case MIPS.Opcode.ANDI:                      Registers[MIPS.GetRT(word)] = Registers[MIPS.GetRS(word)] & MIPS.GetIMM(word);                      break;                    case MIPS.Opcode.ORI:                      Registers[MIPS.GetRT(word)] = Registers[MIPS.GetRS(word)] | MIPS.GetIMM(word);                      break;                    case MIPS.Opcode.SW:                      if (MIPS.GetRS(word) == (uint)MIPS.Register.SP) Stack[StackPos + MIPS.GetIMM(word)] = Registers[MIPS.GetRT(word)];                      break;                  /*              case MIPS.Opcode.LH:                  imm = MIPS.GetIMM(word);                  calcadr = imm + Registers[MIPS.GetRS(word)];                    if (MIPS.GetRS(word) == (uint)MIPS.Register.SP)                  {                      Registers[MIPS.GetRT(word)] = Stack[StackPos + imm];                      break;                  }                    foreach (MemoryRegion mem in MemoryMap)                  {                      if (calcadr > mem.Address && mem.Data.Length + mem.Address > calcadr)                      {                          Registers[MIPS.GetRT(word)] = (uint)Endian.SwapInt16(BitConverter.ToInt16(mem.Data' (int)(calcadr - mem.Address)));                          break;                      }                  }                  break;                  */                  case MIPS.Opcode.LW:                      imm = MIPS.GetIMM(word);                      if ((imm & 0x8000) != 0) imm |= 0xFFFF0000;                      calcadr = imm + Registers[MIPS.GetRS(word)];                        if (MIPS.GetRS(word) == (uint)MIPS.Register.SP)                      {                          Registers[MIPS.GetRT(word)] = Stack[StackPos + imm];                          break;                      }                        foreach (MemoryRegion mem in MemoryMap)                      {                          if (calcadr > mem.Address && mem.Data.Length + mem.Address > calcadr)                          {                              Registers[MIPS.GetRT(word)] = Endian.SwapUInt32(BitConverter.ToUInt32(mem.Data' (int)(calcadr - mem.Address)));                              break;                          }                      }                      break;                  /*              case MIPS.Opcode.LHU:                  imm = MIPS.GetIMM(word);                  if ((imm & 0x8000) != 0) imm |= 0xFFFF0000; //????                  calcadr = imm + Registers[MIPS.GetRS(word)];                    if (MIPS.GetRS(word) == (uint)MIPS.Register.SP)                  {                      Registers[MIPS.GetRT(word)] = Stack[StackPos + imm];                      break;                  }                    foreach (MemoryRegion mem in MemoryMap)                  {                      if (calcadr > mem.Address && mem.Data.Length + mem.Address > calcadr)                      {                          Registers[MIPS.GetRT(word)] = Endian.SwapUInt16(BitConverter.ToUInt16(mem.Data' (int)(calcadr - mem.Address)));                          break;                      }                  }                  break;                  */                  case MIPS.Opcode.TYPE_R:                      {                          switch ((MIPS.Opcode_R)(word & 0x3F))                          {                              case MIPS.Opcode_R.SLL:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] << (int)MIPS.GetSA(word);                                  break;                              case MIPS.Opcode_R.SRA:                              case MIPS.Opcode_R.SRL: /*test!*/                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] >> (int)MIPS.GetSA(word);                                  break;                              case MIPS.Opcode_R.ADDU:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] + Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.SUBU:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] - Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.AND:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] & Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.OR:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] | Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.XOR:                                  Registers[MIPS.GetRD(word)] = Registers[MIPS.GetRT(word)] ^ Registers[MIPS.GetRS(word)];                                  break;                              case MIPS.Opcode_R.JR:                                  if (MIPS.GetRS(word) == (uint)MIPS.Register.RA)                                  {                                      Array.Clear(Registers' 1' 15);                                      Array.Clear(Registers' 24' 4);                                      pos = (int)Registers[(int)MIPS.Register.RA];                                  }                                  break;                              default:                                  break;                          }                      }                      break;                    default:                      break;              }
Magic Number,SceneNavi.ActorRendering,MIPSEvaluator,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPSEvaluator.cs,ReportResult,The following statement contains a magic number: uint[] args = new uint[4];
Magic Number,SceneNavi.ActorRendering,OvlSections,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPSEvaluator.cs,OvlSections,The following statement contains a magic number: indent = (int)Endian.SwapUInt32(BitConverter.ToUInt32(ovl' ovl.Length - 4));
Magic Number,SceneNavi.ActorRendering,OvlSections,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPSEvaluator.cs,OvlSections,The following statement contains a magic number: data = new byte[Endian.SwapUInt32(BitConverter.ToUInt32(ovl' secaddr + 4))];
Magic Number,SceneNavi.ActorRendering,OvlSections,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPSEvaluator.cs,OvlSections,The following statement contains a magic number: rodata = new byte[Endian.SwapUInt32(BitConverter.ToUInt32(ovl' secaddr + 8))];
Magic Number,SceneNavi.ActorRendering,OvlSections,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPSEvaluator.cs,OvlSections,The following statement contains a magic number: bss = new byte[Endian.SwapUInt32(BitConverter.ToUInt32(ovl' secaddr + 12))];
Magic Number,SceneNavi.ActorRendering,Result,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPSEvaluator.cs,ToString,The following statement contains a magic number: return string.Format("(Loc: {0:X8} Tgt: {1:X8} Args: {2:X8} {3:X8} {4:X8} {5:X8})"' OpcodeAddress' TargetAddress' Arguments[0]' Arguments[1]' Arguments[2]' Arguments[3]);
Magic Number,SceneNavi.ActorRendering,Result,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ActorRendering\MIPSEvaluator.cs,ToString,The following statement contains a magic number: return string.Format("(Loc: {0:X8} Tgt: {1:X8} Args: {2:X8} {3:X8} {4:X8} {5:X8})"' OpcodeAddress' TargetAddress' Arguments[0]' Arguments[1]' Arguments[2]' Arguments[3]);
Magic Number,SceneNavi,AssemblyHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\AssemblyHelpers.cs,RetrieveLinkerTimestamp,The following statement contains a magic number: const int c_PeHeaderOffset = 60;
Magic Number,SceneNavi,AssemblyHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\AssemblyHelpers.cs,RetrieveLinkerTimestamp,The following statement contains a magic number: const int c_LinkerTimestampOffset = 8;
Magic Number,SceneNavi,AssemblyHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\AssemblyHelpers.cs,RetrieveLinkerTimestamp,The following statement contains a magic number: byte[] b = new byte[2048];
Magic Number,SceneNavi,AssemblyHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\AssemblyHelpers.cs,RetrieveLinkerTimestamp,The following statement contains a magic number: s.Read(b' 0' 2048);
Magic Number,SceneNavi,AssemblyHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\AssemblyHelpers.cs,RetrieveLinkerTimestamp,The following statement contains a magic number: DateTime dt = new DateTime(1970' 1' 1' 0' 0' 0);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,ColorPickerDialog,The following statement contains a magic number: btnOK.Text = GUIHelpers.LoadLocalizedString("user32.dll"' 800' "OK");
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,ColorPickerDialog,The following statement contains a magic number: btnCancel.Text = GUIHelpers.LoadLocalizedString("user32.dll"' 801' "Cancel");
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,ColorPickerDialog,The following statement contains a magic number: lblRed.Text = GUIHelpers.LoadLocalizedString("comdlg32.dll"' 1049' "Red");
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,ColorPickerDialog,The following statement contains a magic number: lblGreen.Text = GUIHelpers.LoadLocalizedString("comdlg32.dll"' 1042' "Green");
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,ColorPickerDialog,The following statement contains a magic number: lblBlue.Text = GUIHelpers.LoadLocalizedString("comdlg32.dll"' 1052' "Blue");
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,DrawMarker,The following statement contains a magic number: float xpos = ScaleRange(orgValue' 0' 255' 0' control.ClientRectangle.Width);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,DrawMarker,The following statement contains a magic number: pen.CustomEndCap = new System.Drawing.Drawing2D.AdjustableArrowCap(4.0f' 5.5f' true);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,DrawMarker,The following statement contains a magic number: pen.CustomEndCap = new System.Drawing.Drawing2D.AdjustableArrowCap(4.0f' 5.5f' true);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,ColorSlide,The following statement contains a magic number: byte newValue = (byte)ScaleRange(xLocation' 0' control.ClientRectangle.Width' 0' 255);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point(357' 167);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point(357' 167);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size(75' 23);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size(75' 23);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.TabIndex = 10;
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point(276' 167);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point(276' 167);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.TabIndex = 9;
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblRed.Location = new System.Drawing.Point(12' 9);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblRed.Location = new System.Drawing.Point(12' 9);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblRed.Size = new System.Drawing.Size(53' 20);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblRed.Size = new System.Drawing.Size(53' 20);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblGreen.Location = new System.Drawing.Point(12' 35);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblGreen.Location = new System.Drawing.Point(12' 35);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblGreen.Size = new System.Drawing.Size(53' 20);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblGreen.Size = new System.Drawing.Size(53' 20);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblGreen.TabIndex = 2;
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblBlue.Location = new System.Drawing.Point(12' 61);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblBlue.Location = new System.Drawing.Point(12' 61);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblBlue.Size = new System.Drawing.Size(53' 20);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblBlue.Size = new System.Drawing.Size(53' 20);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblBlue.TabIndex = 4;
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblAlpha.Location = new System.Drawing.Point(12' 87);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblAlpha.Location = new System.Drawing.Point(12' 87);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblAlpha.Size = new System.Drawing.Size(53' 20);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblAlpha.Size = new System.Drawing.Size(53' 20);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblAlpha.TabIndex = 6;
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 116);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(12' 116);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(53' 40);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(53' 40);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 8;
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.nudRed.Location = new System.Drawing.Point(389' 9);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.nudRed.Location = new System.Drawing.Point(389' 9);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.nudRed.Maximum = new decimal(new int[] {              255'              0'              0'              0});
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.nudRed.Size = new System.Drawing.Size(43' 20);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.nudRed.Size = new System.Drawing.Size(43' 20);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.nudRed.Value = new decimal(new int[] {              255'              0'              0'              0});
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.nudGreen.Location = new System.Drawing.Point(389' 35);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.nudGreen.Location = new System.Drawing.Point(389' 35);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.nudGreen.Maximum = new decimal(new int[] {              255'              0'              0'              0});
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.nudGreen.Size = new System.Drawing.Size(43' 20);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.nudGreen.Size = new System.Drawing.Size(43' 20);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.nudGreen.TabIndex = 3;
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.nudGreen.Value = new decimal(new int[] {              255'              0'              0'              0});
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.nudBlue.Location = new System.Drawing.Point(389' 61);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.nudBlue.Location = new System.Drawing.Point(389' 61);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.nudBlue.Maximum = new decimal(new int[] {              255'              0'              0'              0});
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.nudBlue.Size = new System.Drawing.Size(43' 20);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.nudBlue.Size = new System.Drawing.Size(43' 20);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.nudBlue.TabIndex = 5;
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.nudBlue.Value = new decimal(new int[] {              255'              0'              0'              0});
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.nudAlpha.Location = new System.Drawing.Point(389' 87);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.nudAlpha.Location = new System.Drawing.Point(389' 87);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.nudAlpha.Maximum = new decimal(new int[] {              255'              0'              0'              0});
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.nudAlpha.Size = new System.Drawing.Size(43' 20);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.nudAlpha.Size = new System.Drawing.Size(43' 20);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.nudAlpha.TabIndex = 7;
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.nudAlpha.Value = new decimal(new int[] {              255'              0'              0'              0});
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbColorGradientAlpha.Location = new System.Drawing.Point(72' 87);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbColorGradientAlpha.Location = new System.Drawing.Point(72' 87);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbColorGradientAlpha.Size = new System.Drawing.Size(311' 20);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbColorGradientAlpha.Size = new System.Drawing.Size(311' 20);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbColorGradientAlpha.TabIndex = 18;
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbPreview.Location = new System.Drawing.Point(71' 116);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbPreview.Location = new System.Drawing.Point(71' 116);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbPreview.Margin = new System.Windows.Forms.Padding(3' 6' 3' 3);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbPreview.Margin = new System.Windows.Forms.Padding(3' 6' 3' 3);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbPreview.Margin = new System.Windows.Forms.Padding(3' 6' 3' 3);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbPreview.Margin = new System.Windows.Forms.Padding(3' 6' 3' 3);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbPreview.Size = new System.Drawing.Size(361' 40);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbPreview.Size = new System.Drawing.Size(361' 40);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbPreview.TabIndex = 16;
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbColorGradientBlue.Location = new System.Drawing.Point(72' 61);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbColorGradientBlue.Location = new System.Drawing.Point(72' 61);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbColorGradientBlue.Size = new System.Drawing.Size(311' 20);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbColorGradientBlue.Size = new System.Drawing.Size(311' 20);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbColorGradientBlue.TabIndex = 4;
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbColorGradientGreen.Location = new System.Drawing.Point(72' 35);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbColorGradientGreen.Location = new System.Drawing.Point(72' 35);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbColorGradientGreen.Size = new System.Drawing.Size(311' 20);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbColorGradientGreen.Size = new System.Drawing.Size(311' 20);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbColorGradientGreen.TabIndex = 3;
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbColorGradientRed.Location = new System.Drawing.Point(72' 9);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbColorGradientRed.Location = new System.Drawing.Point(72' 9);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbColorGradientRed.Size = new System.Drawing.Size(311' 20);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbColorGradientRed.Size = new System.Drawing.Size(311' 20);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pbColorGradientRed.TabIndex = 2;
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(444' 202);
Magic Number,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(444' 202);
Magic Number,SceneNavi,ExtensionMethods,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ExtensionMethods.cs,SwapRGBAToBGRA,The following statement contains a magic number: buffer[i] = buffer[i + 2];
Magic Number,SceneNavi,ExtensionMethods,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ExtensionMethods.cs,SwapRGBAToBGRA,The following statement contains a magic number: buffer[i + 2] = red;
Magic Number,SceneNavi,GUIHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\GUIHelpers.cs,LoadLocalizedString,The following statement contains a magic number: StringBuilder sb = new StringBuilder(1024);
Magic Number,SceneNavi,GUIHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\GUIHelpers.cs,LoadLocalizedString,The following statement contains a magic number: int size = LoadString(libraryHandle' ident' sb' 1024);
Magic Number,SceneNavi,Endian,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\Endian.cs,SwapInt16,The following statement contains a magic number: return (short)(((v & 0xff) << 8) | ((v >> 8) & 0xff));
Magic Number,SceneNavi,Endian,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\Endian.cs,SwapInt16,The following statement contains a magic number: return (short)(((v & 0xff) << 8) | ((v >> 8) & 0xff));
Magic Number,SceneNavi,Endian,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\Endian.cs,SwapUInt16,The following statement contains a magic number: return (ushort)(((v & 0xff) << 8) | ((v >> 8) & 0xff));
Magic Number,SceneNavi,Endian,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\Endian.cs,SwapUInt16,The following statement contains a magic number: return (ushort)(((v & 0xff) << 8) | ((v >> 8) & 0xff));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,dgvObjects_CellParsing,The following statement contains a magic number: ushort.TryParse((ishex ? str.Substring(2) : str)' (ishex ? System.Globalization.NumberStyles.AllowHexSpecifier : System.Globalization.NumberStyles.None)'                          System.Globalization.CultureInfo.InvariantCulture' out val)
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_Load,The following statement contains a magic number: glText = new TextPrinter(new Font("Verdana"' 9.0f' FontStyle.Bold));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_Load,The following statement contains a magic number: oglSceneScale = 0.02;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_Paint,The following statement contains a magic number: GL.LineWidth(4.0f);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_Paint,The following statement contains a magic number: GL.Color3(0.25' 0.5' 1.0);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_Paint,The following statement contains a magic number: GL.Color3(0.25' 0.5' 1.0);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,RenderInit,The following statement contains a magic number: Initialization.CreateViewportAndProjection(Initialization.ProjectionTypes.Perspective' rect' 0.001f' (currentEnvSettings != null ? ((float)currentEnvSettings.DrawDistance / 50.0f) : 300.0f));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,RenderInit,The following statement contains a magic number: Initialization.CreateViewportAndProjection(Initialization.ProjectionTypes.Perspective' rect' 0.001f' (currentEnvSettings != null ? ((float)currentEnvSettings.DrawDistance / 50.0f) : 300.0f));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,RenderInit,The following statement contains a magic number: Initialization.CreateViewportAndProjection(Initialization.ProjectionTypes.Perspective' rect' 0.001f' (currentEnvSettings != null ? ((float)currentEnvSettings.DrawDistance / 50.0f) : 300.0f));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,RenderTextOverlay,The following statement contains a magic number: glText.Print(string.Format(System.Globalization.CultureInfo.InvariantCulture' "{0:0.00} FPS"' fpsMonitor.Value)' new Vector2d(10.0' 10.0)' Color.FromArgb(128' Color.Black));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,RenderTextOverlay,The following statement contains a magic number: glText.Print(string.Format(System.Globalization.CultureInfo.InvariantCulture' "{0:0.00} FPS"' fpsMonitor.Value)' new Vector2d(10.0' 10.0)' Color.FromArgb(128' Color.Black));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,RenderTextOverlay,The following statement contains a magic number: glText.Print(string.Format(System.Globalization.CultureInfo.InvariantCulture' "{0:0.00} FPS"' fpsMonitor.Value)' new Vector2d(10.0' 10.0)' Color.FromArgb(128' Color.Black));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,DoPicking,The following statement contains a magic number: byte[] pixel = new byte[4];
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,DoPicking,The following statement contains a magic number: int[] viewport = new int[4];
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,DoPicking,The following statement contains a magic number: GL.ReadPixels(x' viewport[3] - y' 1' 1' PixelFormat.Rgba' PixelType.UnsignedByte' pixel);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,DoPicking,The following statement contains a magic number: uint argb = (uint)((pixel[3] << 24) | (pixel[0] << 16) | (pixel[1] << 8) | pixel[2]);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,DoPicking,The following statement contains a magic number: uint argb = (uint)((pixel[3] << 24) | (pixel[0] << 16) | (pixel[1] << 8) | pixel[2]);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,DoPicking,The following statement contains a magic number: uint argb = (uint)((pixel[3] << 24) | (pixel[0] << 16) | (pixel[1] << 8) | pixel[2]);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,DoPicking,The following statement contains a magic number: uint argb = (uint)((pixel[3] << 24) | (pixel[0] << 16) | (pixel[1] << 8) | pixel[2]);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,DoPicking,The following statement contains a magic number: uint argb = (uint)((pixel[3] << 24) | (pixel[0] << 16) | (pixel[1] << 8) | pixel[2]);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_MouseMove,The following statement contains a magic number: switch (currentToolMode)              {                  case ToolModes.Camera:                      {                          if (Convert.ToBoolean(e.Button & MouseButtons.Left))                              camera.MouseMove(new Vector2d(e.X' e.Y));                          break;                      }                    case ToolModes.MoveableObjs:                      {                          if (!Convert.ToBoolean(e.Button & MouseButtons.Left) && !Convert.ToBoolean(e.Button & MouseButtons.Middle)) break;                            if (pickedObject == null)                              camera.MouseMove(new Vector2d(e.X' e.Y));                          else                          {                              // TODO  make this not shitty; try to get the "new method" to work with anything that's not at (0'0'0)                                /* Speed modifiers */                              double movemod = 3.0;                              if (keysDown[(ushort)Keys.Space]) movemod = 8.0;                              else if (keysDown[(ushort)Keys.ShiftKey]) movemod = 1.0;                                /* Determine mouse position and displacement */                              pickObjPosition = new Vector2d(e.X' e.Y);                              pickObjDisplacement = ((pickObjPosition - pickObjLastPosition) * movemod);                                /* No displacement? Exit */                              if (pickObjDisplacement == Vector2d.Zero) return;                                /* Calculate camera rotation */                              double CamXRotd = camera.Rot.X * (double)(Math.PI / 180);                              double CamYRotd = camera.Rot.Y * (double)(Math.PI / 180);                                /* WARNING: Cam position stuff below is "I dunno why it works' but it does!" */                              Vector3d objpos = pickedObject.Position;                                if (Convert.ToBoolean(e.Button & MouseButtons.Middle) || (Convert.ToBoolean(e.Button & MouseButtons.Left) && keysDown[(ushort)Keys.ControlKey]))                              {                                  /* Middle mouse button OR left button + Ctrl -> move forward/backward */                                  objpos.X += ((Math.Sin(CamYRotd) * -pickObjDisplacement.Y));                                  objpos.Z -= ((Math.Cos(CamYRotd) * -pickObjDisplacement.Y));                                    camera.Pos.X -= ((Math.Sin(CamYRotd) * (-pickObjDisplacement.Y * camera.CameraCoeff * camera.Sensitivity) / 1.25));                                  camera.Pos.Z += ((Math.Cos(CamYRotd) * (-pickObjDisplacement.Y * camera.CameraCoeff * camera.Sensitivity) / 1.25));                              }                              else if (Convert.ToBoolean(e.Button & MouseButtons.Left))                              {                                  /* Left mouse button -> move up/down/left/right */                                  objpos.X += ((Math.Cos(CamYRotd) * pickObjDisplacement.X));                                  objpos.Y -= (pickObjDisplacement.Y);                                  objpos.Z += ((Math.Sin(CamYRotd) * pickObjDisplacement.X));                                    camera.Pos.X -= ((Math.Cos(CamYRotd) * pickObjDisplacement.X)) * 0.02;                                  camera.Pos.Y += (pickObjDisplacement.Y) * 0.02;                                  camera.Pos.Z -= ((Math.Sin(CamYRotd) * pickObjDisplacement.X)) * 0.02;                              }                                /* Round away decimal places (mainly for waypoints) */                              objpos.X = Math.Round(objpos.X' 0);                              objpos.Y = Math.Round(objpos.Y' 0);                              objpos.Z = Math.Round(objpos.Z' 0);                              pickedObject.Position = objpos;                                /* Refresh GUI according to type of picked object */                              if (pickedObject is HeaderCommands.Waypoints.Waypoint)                              {                                  foreach (DataGridViewCell cell in dgvPathWaypoints.SelectedCells)                                  {                                      for (int i = 0; i < dgvPathWaypoints.ColumnCount; i++) dgvPathWaypoints.UpdateCellValue(i' cell.RowIndex);                                  }                              }                              else if (pickedObject is HeaderCommands.Actors.Entry)                              {                                  HeaderCommands.Actors.Entry actor = (pickedObject as HeaderCommands.Actors.Entry);                                    if (actor.IsSpawnPoint)                                      XMLActorDefinitionReader.RefreshActorPositionRotation(actor' tlpExSpawnPoints);                                  else if (actor.IsTransitionActor)                                      XMLActorDefinitionReader.RefreshActorPositionRotation(actor' tlpExTransitions);                                  else                                      XMLActorDefinitionReader.RefreshActorPositionRotation(actor' tlpExRoomActors);                              }                              else if (pickedObject is HeaderCommands.Collision.Waterbox)                              {                                  waterboxesDirty = true;                                  RefreshWaterboxControls();                              }                                pickObjLastPosition = pickObjPosition;                                ((Control)sender).Focus();                          }                          break;                      }                    case ToolModes.StaticObjs:                      {                          if (Convert.ToBoolean(e.Button & MouseButtons.Left)/* && PickedObject == null*/)                              camera.MouseMove(new Vector2d(e.X' e.Y));                          break;                      }              }
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_MouseMove,The following statement contains a magic number: switch (currentToolMode)              {                  case ToolModes.Camera:                      {                          if (Convert.ToBoolean(e.Button & MouseButtons.Left))                              camera.MouseMove(new Vector2d(e.X' e.Y));                          break;                      }                    case ToolModes.MoveableObjs:                      {                          if (!Convert.ToBoolean(e.Button & MouseButtons.Left) && !Convert.ToBoolean(e.Button & MouseButtons.Middle)) break;                            if (pickedObject == null)                              camera.MouseMove(new Vector2d(e.X' e.Y));                          else                          {                              // TODO  make this not shitty; try to get the "new method" to work with anything that's not at (0'0'0)                                /* Speed modifiers */                              double movemod = 3.0;                              if (keysDown[(ushort)Keys.Space]) movemod = 8.0;                              else if (keysDown[(ushort)Keys.ShiftKey]) movemod = 1.0;                                /* Determine mouse position and displacement */                              pickObjPosition = new Vector2d(e.X' e.Y);                              pickObjDisplacement = ((pickObjPosition - pickObjLastPosition) * movemod);                                /* No displacement? Exit */                              if (pickObjDisplacement == Vector2d.Zero) return;                                /* Calculate camera rotation */                              double CamXRotd = camera.Rot.X * (double)(Math.PI / 180);                              double CamYRotd = camera.Rot.Y * (double)(Math.PI / 180);                                /* WARNING: Cam position stuff below is "I dunno why it works' but it does!" */                              Vector3d objpos = pickedObject.Position;                                if (Convert.ToBoolean(e.Button & MouseButtons.Middle) || (Convert.ToBoolean(e.Button & MouseButtons.Left) && keysDown[(ushort)Keys.ControlKey]))                              {                                  /* Middle mouse button OR left button + Ctrl -> move forward/backward */                                  objpos.X += ((Math.Sin(CamYRotd) * -pickObjDisplacement.Y));                                  objpos.Z -= ((Math.Cos(CamYRotd) * -pickObjDisplacement.Y));                                    camera.Pos.X -= ((Math.Sin(CamYRotd) * (-pickObjDisplacement.Y * camera.CameraCoeff * camera.Sensitivity) / 1.25));                                  camera.Pos.Z += ((Math.Cos(CamYRotd) * (-pickObjDisplacement.Y * camera.CameraCoeff * camera.Sensitivity) / 1.25));                              }                              else if (Convert.ToBoolean(e.Button & MouseButtons.Left))                              {                                  /* Left mouse button -> move up/down/left/right */                                  objpos.X += ((Math.Cos(CamYRotd) * pickObjDisplacement.X));                                  objpos.Y -= (pickObjDisplacement.Y);                                  objpos.Z += ((Math.Sin(CamYRotd) * pickObjDisplacement.X));                                    camera.Pos.X -= ((Math.Cos(CamYRotd) * pickObjDisplacement.X)) * 0.02;                                  camera.Pos.Y += (pickObjDisplacement.Y) * 0.02;                                  camera.Pos.Z -= ((Math.Sin(CamYRotd) * pickObjDisplacement.X)) * 0.02;                              }                                /* Round away decimal places (mainly for waypoints) */                              objpos.X = Math.Round(objpos.X' 0);                              objpos.Y = Math.Round(objpos.Y' 0);                              objpos.Z = Math.Round(objpos.Z' 0);                              pickedObject.Position = objpos;                                /* Refresh GUI according to type of picked object */                              if (pickedObject is HeaderCommands.Waypoints.Waypoint)                              {                                  foreach (DataGridViewCell cell in dgvPathWaypoints.SelectedCells)                                  {                                      for (int i = 0; i < dgvPathWaypoints.ColumnCount; i++) dgvPathWaypoints.UpdateCellValue(i' cell.RowIndex);                                  }                              }                              else if (pickedObject is HeaderCommands.Actors.Entry)                              {                                  HeaderCommands.Actors.Entry actor = (pickedObject as HeaderCommands.Actors.Entry);                                    if (actor.IsSpawnPoint)                                      XMLActorDefinitionReader.RefreshActorPositionRotation(actor' tlpExSpawnPoints);                                  else if (actor.IsTransitionActor)                                      XMLActorDefinitionReader.RefreshActorPositionRotation(actor' tlpExTransitions);                                  else                                      XMLActorDefinitionReader.RefreshActorPositionRotation(actor' tlpExRoomActors);                              }                              else if (pickedObject is HeaderCommands.Collision.Waterbox)                              {                                  waterboxesDirty = true;                                  RefreshWaterboxControls();                              }                                pickObjLastPosition = pickObjPosition;                                ((Control)sender).Focus();                          }                          break;                      }                    case ToolModes.StaticObjs:                      {                          if (Convert.ToBoolean(e.Button & MouseButtons.Left)/* && PickedObject == null*/)                              camera.MouseMove(new Vector2d(e.X' e.Y));                          break;                      }              }
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_MouseMove,The following statement contains a magic number: switch (currentToolMode)              {                  case ToolModes.Camera:                      {                          if (Convert.ToBoolean(e.Button & MouseButtons.Left))                              camera.MouseMove(new Vector2d(e.X' e.Y));                          break;                      }                    case ToolModes.MoveableObjs:                      {                          if (!Convert.ToBoolean(e.Button & MouseButtons.Left) && !Convert.ToBoolean(e.Button & MouseButtons.Middle)) break;                            if (pickedObject == null)                              camera.MouseMove(new Vector2d(e.X' e.Y));                          else                          {                              // TODO  make this not shitty; try to get the "new method" to work with anything that's not at (0'0'0)                                /* Speed modifiers */                              double movemod = 3.0;                              if (keysDown[(ushort)Keys.Space]) movemod = 8.0;                              else if (keysDown[(ushort)Keys.ShiftKey]) movemod = 1.0;                                /* Determine mouse position and displacement */                              pickObjPosition = new Vector2d(e.X' e.Y);                              pickObjDisplacement = ((pickObjPosition - pickObjLastPosition) * movemod);                                /* No displacement? Exit */                              if (pickObjDisplacement == Vector2d.Zero) return;                                /* Calculate camera rotation */                              double CamXRotd = camera.Rot.X * (double)(Math.PI / 180);                              double CamYRotd = camera.Rot.Y * (double)(Math.PI / 180);                                /* WARNING: Cam position stuff below is "I dunno why it works' but it does!" */                              Vector3d objpos = pickedObject.Position;                                if (Convert.ToBoolean(e.Button & MouseButtons.Middle) || (Convert.ToBoolean(e.Button & MouseButtons.Left) && keysDown[(ushort)Keys.ControlKey]))                              {                                  /* Middle mouse button OR left button + Ctrl -> move forward/backward */                                  objpos.X += ((Math.Sin(CamYRotd) * -pickObjDisplacement.Y));                                  objpos.Z -= ((Math.Cos(CamYRotd) * -pickObjDisplacement.Y));                                    camera.Pos.X -= ((Math.Sin(CamYRotd) * (-pickObjDisplacement.Y * camera.CameraCoeff * camera.Sensitivity) / 1.25));                                  camera.Pos.Z += ((Math.Cos(CamYRotd) * (-pickObjDisplacement.Y * camera.CameraCoeff * camera.Sensitivity) / 1.25));                              }                              else if (Convert.ToBoolean(e.Button & MouseButtons.Left))                              {                                  /* Left mouse button -> move up/down/left/right */                                  objpos.X += ((Math.Cos(CamYRotd) * pickObjDisplacement.X));                                  objpos.Y -= (pickObjDisplacement.Y);                                  objpos.Z += ((Math.Sin(CamYRotd) * pickObjDisplacement.X));                                    camera.Pos.X -= ((Math.Cos(CamYRotd) * pickObjDisplacement.X)) * 0.02;                                  camera.Pos.Y += (pickObjDisplacement.Y) * 0.02;                                  camera.Pos.Z -= ((Math.Sin(CamYRotd) * pickObjDisplacement.X)) * 0.02;                              }                                /* Round away decimal places (mainly for waypoints) */                              objpos.X = Math.Round(objpos.X' 0);                              objpos.Y = Math.Round(objpos.Y' 0);                              objpos.Z = Math.Round(objpos.Z' 0);                              pickedObject.Position = objpos;                                /* Refresh GUI according to type of picked object */                              if (pickedObject is HeaderCommands.Waypoints.Waypoint)                              {                                  foreach (DataGridViewCell cell in dgvPathWaypoints.SelectedCells)                                  {                                      for (int i = 0; i < dgvPathWaypoints.ColumnCount; i++) dgvPathWaypoints.UpdateCellValue(i' cell.RowIndex);                                  }                              }                              else if (pickedObject is HeaderCommands.Actors.Entry)                              {                                  HeaderCommands.Actors.Entry actor = (pickedObject as HeaderCommands.Actors.Entry);                                    if (actor.IsSpawnPoint)                                      XMLActorDefinitionReader.RefreshActorPositionRotation(actor' tlpExSpawnPoints);                                  else if (actor.IsTransitionActor)                                      XMLActorDefinitionReader.RefreshActorPositionRotation(actor' tlpExTransitions);                                  else                                      XMLActorDefinitionReader.RefreshActorPositionRotation(actor' tlpExRoomActors);                              }                              else if (pickedObject is HeaderCommands.Collision.Waterbox)                              {                                  waterboxesDirty = true;                                  RefreshWaterboxControls();                              }                                pickObjLastPosition = pickObjPosition;                                ((Control)sender).Focus();                          }                          break;                      }                    case ToolModes.StaticObjs:                      {                          if (Convert.ToBoolean(e.Button & MouseButtons.Left)/* && PickedObject == null*/)                              camera.MouseMove(new Vector2d(e.X' e.Y));                          break;                      }              }
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_MouseMove,The following statement contains a magic number: switch (currentToolMode)              {                  case ToolModes.Camera:                      {                          if (Convert.ToBoolean(e.Button & MouseButtons.Left))                              camera.MouseMove(new Vector2d(e.X' e.Y));                          break;                      }                    case ToolModes.MoveableObjs:                      {                          if (!Convert.ToBoolean(e.Button & MouseButtons.Left) && !Convert.ToBoolean(e.Button & MouseButtons.Middle)) break;                            if (pickedObject == null)                              camera.MouseMove(new Vector2d(e.X' e.Y));                          else                          {                              // TODO  make this not shitty; try to get the "new method" to work with anything that's not at (0'0'0)                                /* Speed modifiers */                              double movemod = 3.0;                              if (keysDown[(ushort)Keys.Space]) movemod = 8.0;                              else if (keysDown[(ushort)Keys.ShiftKey]) movemod = 1.0;                                /* Determine mouse position and displacement */                              pickObjPosition = new Vector2d(e.X' e.Y);                              pickObjDisplacement = ((pickObjPosition - pickObjLastPosition) * movemod);                                /* No displacement? Exit */                              if (pickObjDisplacement == Vector2d.Zero) return;                                /* Calculate camera rotation */                              double CamXRotd = camera.Rot.X * (double)(Math.PI / 180);                              double CamYRotd = camera.Rot.Y * (double)(Math.PI / 180);                                /* WARNING: Cam position stuff below is "I dunno why it works' but it does!" */                              Vector3d objpos = pickedObject.Position;                                if (Convert.ToBoolean(e.Button & MouseButtons.Middle) || (Convert.ToBoolean(e.Button & MouseButtons.Left) && keysDown[(ushort)Keys.ControlKey]))                              {                                  /* Middle mouse button OR left button + Ctrl -> move forward/backward */                                  objpos.X += ((Math.Sin(CamYRotd) * -pickObjDisplacement.Y));                                  objpos.Z -= ((Math.Cos(CamYRotd) * -pickObjDisplacement.Y));                                    camera.Pos.X -= ((Math.Sin(CamYRotd) * (-pickObjDisplacement.Y * camera.CameraCoeff * camera.Sensitivity) / 1.25));                                  camera.Pos.Z += ((Math.Cos(CamYRotd) * (-pickObjDisplacement.Y * camera.CameraCoeff * camera.Sensitivity) / 1.25));                              }                              else if (Convert.ToBoolean(e.Button & MouseButtons.Left))                              {                                  /* Left mouse button -> move up/down/left/right */                                  objpos.X += ((Math.Cos(CamYRotd) * pickObjDisplacement.X));                                  objpos.Y -= (pickObjDisplacement.Y);                                  objpos.Z += ((Math.Sin(CamYRotd) * pickObjDisplacement.X));                                    camera.Pos.X -= ((Math.Cos(CamYRotd) * pickObjDisplacement.X)) * 0.02;                                  camera.Pos.Y += (pickObjDisplacement.Y) * 0.02;                                  camera.Pos.Z -= ((Math.Sin(CamYRotd) * pickObjDisplacement.X)) * 0.02;                              }                                /* Round away decimal places (mainly for waypoints) */                              objpos.X = Math.Round(objpos.X' 0);                              objpos.Y = Math.Round(objpos.Y' 0);                              objpos.Z = Math.Round(objpos.Z' 0);                              pickedObject.Position = objpos;                                /* Refresh GUI according to type of picked object */                              if (pickedObject is HeaderCommands.Waypoints.Waypoint)                              {                                  foreach (DataGridViewCell cell in dgvPathWaypoints.SelectedCells)                                  {                                      for (int i = 0; i < dgvPathWaypoints.ColumnCount; i++) dgvPathWaypoints.UpdateCellValue(i' cell.RowIndex);                                  }                              }                              else if (pickedObject is HeaderCommands.Actors.Entry)                              {                                  HeaderCommands.Actors.Entry actor = (pickedObject as HeaderCommands.Actors.Entry);                                    if (actor.IsSpawnPoint)                                      XMLActorDefinitionReader.RefreshActorPositionRotation(actor' tlpExSpawnPoints);                                  else if (actor.IsTransitionActor)                                      XMLActorDefinitionReader.RefreshActorPositionRotation(actor' tlpExTransitions);                                  else                                      XMLActorDefinitionReader.RefreshActorPositionRotation(actor' tlpExRoomActors);                              }                              else if (pickedObject is HeaderCommands.Collision.Waterbox)                              {                                  waterboxesDirty = true;                                  RefreshWaterboxControls();                              }                                pickObjLastPosition = pickObjPosition;                                ((Control)sender).Focus();                          }                          break;                      }                    case ToolModes.StaticObjs:                      {                          if (Convert.ToBoolean(e.Button & MouseButtons.Left)/* && PickedObject == null*/)                              camera.MouseMove(new Vector2d(e.X' e.Y));                          break;                      }              }
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_MouseMove,The following statement contains a magic number: switch (currentToolMode)              {                  case ToolModes.Camera:                      {                          if (Convert.ToBoolean(e.Button & MouseButtons.Left))                              camera.MouseMove(new Vector2d(e.X' e.Y));                          break;                      }                    case ToolModes.MoveableObjs:                      {                          if (!Convert.ToBoolean(e.Button & MouseButtons.Left) && !Convert.ToBoolean(e.Button & MouseButtons.Middle)) break;                            if (pickedObject == null)                              camera.MouseMove(new Vector2d(e.X' e.Y));                          else                          {                              // TODO  make this not shitty; try to get the "new method" to work with anything that's not at (0'0'0)                                /* Speed modifiers */                              double movemod = 3.0;                              if (keysDown[(ushort)Keys.Space]) movemod = 8.0;                              else if (keysDown[(ushort)Keys.ShiftKey]) movemod = 1.0;                                /* Determine mouse position and displacement */                              pickObjPosition = new Vector2d(e.X' e.Y);                              pickObjDisplacement = ((pickObjPosition - pickObjLastPosition) * movemod);                                /* No displacement? Exit */                              if (pickObjDisplacement == Vector2d.Zero) return;                                /* Calculate camera rotation */                              double CamXRotd = camera.Rot.X * (double)(Math.PI / 180);                              double CamYRotd = camera.Rot.Y * (double)(Math.PI / 180);                                /* WARNING: Cam position stuff below is "I dunno why it works' but it does!" */                              Vector3d objpos = pickedObject.Position;                                if (Convert.ToBoolean(e.Button & MouseButtons.Middle) || (Convert.ToBoolean(e.Button & MouseButtons.Left) && keysDown[(ushort)Keys.ControlKey]))                              {                                  /* Middle mouse button OR left button + Ctrl -> move forward/backward */                                  objpos.X += ((Math.Sin(CamYRotd) * -pickObjDisplacement.Y));                                  objpos.Z -= ((Math.Cos(CamYRotd) * -pickObjDisplacement.Y));                                    camera.Pos.X -= ((Math.Sin(CamYRotd) * (-pickObjDisplacement.Y * camera.CameraCoeff * camera.Sensitivity) / 1.25));                                  camera.Pos.Z += ((Math.Cos(CamYRotd) * (-pickObjDisplacement.Y * camera.CameraCoeff * camera.Sensitivity) / 1.25));                              }                              else if (Convert.ToBoolean(e.Button & MouseButtons.Left))                              {                                  /* Left mouse button -> move up/down/left/right */                                  objpos.X += ((Math.Cos(CamYRotd) * pickObjDisplacement.X));                                  objpos.Y -= (pickObjDisplacement.Y);                                  objpos.Z += ((Math.Sin(CamYRotd) * pickObjDisplacement.X));                                    camera.Pos.X -= ((Math.Cos(CamYRotd) * pickObjDisplacement.X)) * 0.02;                                  camera.Pos.Y += (pickObjDisplacement.Y) * 0.02;                                  camera.Pos.Z -= ((Math.Sin(CamYRotd) * pickObjDisplacement.X)) * 0.02;                              }                                /* Round away decimal places (mainly for waypoints) */                              objpos.X = Math.Round(objpos.X' 0);                              objpos.Y = Math.Round(objpos.Y' 0);                              objpos.Z = Math.Round(objpos.Z' 0);                              pickedObject.Position = objpos;                                /* Refresh GUI according to type of picked object */                              if (pickedObject is HeaderCommands.Waypoints.Waypoint)                              {                                  foreach (DataGridViewCell cell in dgvPathWaypoints.SelectedCells)                                  {                                      for (int i = 0; i < dgvPathWaypoints.ColumnCount; i++) dgvPathWaypoints.UpdateCellValue(i' cell.RowIndex);                                  }                              }                              else if (pickedObject is HeaderCommands.Actors.Entry)                              {                                  HeaderCommands.Actors.Entry actor = (pickedObject as HeaderCommands.Actors.Entry);                                    if (actor.IsSpawnPoint)                                      XMLActorDefinitionReader.RefreshActorPositionRotation(actor' tlpExSpawnPoints);                                  else if (actor.IsTransitionActor)                                      XMLActorDefinitionReader.RefreshActorPositionRotation(actor' tlpExTransitions);                                  else                                      XMLActorDefinitionReader.RefreshActorPositionRotation(actor' tlpExRoomActors);                              }                              else if (pickedObject is HeaderCommands.Collision.Waterbox)                              {                                  waterboxesDirty = true;                                  RefreshWaterboxControls();                              }                                pickObjLastPosition = pickObjPosition;                                ((Control)sender).Focus();                          }                          break;                      }                    case ToolModes.StaticObjs:                      {                          if (Convert.ToBoolean(e.Button & MouseButtons.Left)/* && PickedObject == null*/)                              camera.MouseMove(new Vector2d(e.X' e.Y));                          break;                      }              }
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_MouseMove,The following statement contains a magic number: switch (currentToolMode)              {                  case ToolModes.Camera:                      {                          if (Convert.ToBoolean(e.Button & MouseButtons.Left))                              camera.MouseMove(new Vector2d(e.X' e.Y));                          break;                      }                    case ToolModes.MoveableObjs:                      {                          if (!Convert.ToBoolean(e.Button & MouseButtons.Left) && !Convert.ToBoolean(e.Button & MouseButtons.Middle)) break;                            if (pickedObject == null)                              camera.MouseMove(new Vector2d(e.X' e.Y));                          else                          {                              // TODO  make this not shitty; try to get the "new method" to work with anything that's not at (0'0'0)                                /* Speed modifiers */                              double movemod = 3.0;                              if (keysDown[(ushort)Keys.Space]) movemod = 8.0;                              else if (keysDown[(ushort)Keys.ShiftKey]) movemod = 1.0;                                /* Determine mouse position and displacement */                              pickObjPosition = new Vector2d(e.X' e.Y);                              pickObjDisplacement = ((pickObjPosition - pickObjLastPosition) * movemod);                                /* No displacement? Exit */                              if (pickObjDisplacement == Vector2d.Zero) return;                                /* Calculate camera rotation */                              double CamXRotd = camera.Rot.X * (double)(Math.PI / 180);                              double CamYRotd = camera.Rot.Y * (double)(Math.PI / 180);                                /* WARNING: Cam position stuff below is "I dunno why it works' but it does!" */                              Vector3d objpos = pickedObject.Position;                                if (Convert.ToBoolean(e.Button & MouseButtons.Middle) || (Convert.ToBoolean(e.Button & MouseButtons.Left) && keysDown[(ushort)Keys.ControlKey]))                              {                                  /* Middle mouse button OR left button + Ctrl -> move forward/backward */                                  objpos.X += ((Math.Sin(CamYRotd) * -pickObjDisplacement.Y));                                  objpos.Z -= ((Math.Cos(CamYRotd) * -pickObjDisplacement.Y));                                    camera.Pos.X -= ((Math.Sin(CamYRotd) * (-pickObjDisplacement.Y * camera.CameraCoeff * camera.Sensitivity) / 1.25));                                  camera.Pos.Z += ((Math.Cos(CamYRotd) * (-pickObjDisplacement.Y * camera.CameraCoeff * camera.Sensitivity) / 1.25));                              }                              else if (Convert.ToBoolean(e.Button & MouseButtons.Left))                              {                                  /* Left mouse button -> move up/down/left/right */                                  objpos.X += ((Math.Cos(CamYRotd) * pickObjDisplacement.X));                                  objpos.Y -= (pickObjDisplacement.Y);                                  objpos.Z += ((Math.Sin(CamYRotd) * pickObjDisplacement.X));                                    camera.Pos.X -= ((Math.Cos(CamYRotd) * pickObjDisplacement.X)) * 0.02;                                  camera.Pos.Y += (pickObjDisplacement.Y) * 0.02;                                  camera.Pos.Z -= ((Math.Sin(CamYRotd) * pickObjDisplacement.X)) * 0.02;                              }                                /* Round away decimal places (mainly for waypoints) */                              objpos.X = Math.Round(objpos.X' 0);                              objpos.Y = Math.Round(objpos.Y' 0);                              objpos.Z = Math.Round(objpos.Z' 0);                              pickedObject.Position = objpos;                                /* Refresh GUI according to type of picked object */                              if (pickedObject is HeaderCommands.Waypoints.Waypoint)                              {                                  foreach (DataGridViewCell cell in dgvPathWaypoints.SelectedCells)                                  {                                      for (int i = 0; i < dgvPathWaypoints.ColumnCount; i++) dgvPathWaypoints.UpdateCellValue(i' cell.RowIndex);                                  }                              }                              else if (pickedObject is HeaderCommands.Actors.Entry)                              {                                  HeaderCommands.Actors.Entry actor = (pickedObject as HeaderCommands.Actors.Entry);                                    if (actor.IsSpawnPoint)                                      XMLActorDefinitionReader.RefreshActorPositionRotation(actor' tlpExSpawnPoints);                                  else if (actor.IsTransitionActor)                                      XMLActorDefinitionReader.RefreshActorPositionRotation(actor' tlpExTransitions);                                  else                                      XMLActorDefinitionReader.RefreshActorPositionRotation(actor' tlpExRoomActors);                              }                              else if (pickedObject is HeaderCommands.Collision.Waterbox)                              {                                  waterboxesDirty = true;                                  RefreshWaterboxControls();                              }                                pickObjLastPosition = pickObjPosition;                                ((Control)sender).Focus();                          }                          break;                      }                    case ToolModes.StaticObjs:                      {                          if (Convert.ToBoolean(e.Button & MouseButtons.Left)/* && PickedObject == null*/)                              camera.MouseMove(new Vector2d(e.X' e.Y));                          break;                      }              }
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_MouseMove,The following statement contains a magic number: switch (currentToolMode)              {                  case ToolModes.Camera:                      {                          if (Convert.ToBoolean(e.Button & MouseButtons.Left))                              camera.MouseMove(new Vector2d(e.X' e.Y));                          break;                      }                    case ToolModes.MoveableObjs:                      {                          if (!Convert.ToBoolean(e.Button & MouseButtons.Left) && !Convert.ToBoolean(e.Button & MouseButtons.Middle)) break;                            if (pickedObject == null)                              camera.MouseMove(new Vector2d(e.X' e.Y));                          else                          {                              // TODO  make this not shitty; try to get the "new method" to work with anything that's not at (0'0'0)                                /* Speed modifiers */                              double movemod = 3.0;                              if (keysDown[(ushort)Keys.Space]) movemod = 8.0;                              else if (keysDown[(ushort)Keys.ShiftKey]) movemod = 1.0;                                /* Determine mouse position and displacement */                              pickObjPosition = new Vector2d(e.X' e.Y);                              pickObjDisplacement = ((pickObjPosition - pickObjLastPosition) * movemod);                                /* No displacement? Exit */                              if (pickObjDisplacement == Vector2d.Zero) return;                                /* Calculate camera rotation */                              double CamXRotd = camera.Rot.X * (double)(Math.PI / 180);                              double CamYRotd = camera.Rot.Y * (double)(Math.PI / 180);                                /* WARNING: Cam position stuff below is "I dunno why it works' but it does!" */                              Vector3d objpos = pickedObject.Position;                                if (Convert.ToBoolean(e.Button & MouseButtons.Middle) || (Convert.ToBoolean(e.Button & MouseButtons.Left) && keysDown[(ushort)Keys.ControlKey]))                              {                                  /* Middle mouse button OR left button + Ctrl -> move forward/backward */                                  objpos.X += ((Math.Sin(CamYRotd) * -pickObjDisplacement.Y));                                  objpos.Z -= ((Math.Cos(CamYRotd) * -pickObjDisplacement.Y));                                    camera.Pos.X -= ((Math.Sin(CamYRotd) * (-pickObjDisplacement.Y * camera.CameraCoeff * camera.Sensitivity) / 1.25));                                  camera.Pos.Z += ((Math.Cos(CamYRotd) * (-pickObjDisplacement.Y * camera.CameraCoeff * camera.Sensitivity) / 1.25));                              }                              else if (Convert.ToBoolean(e.Button & MouseButtons.Left))                              {                                  /* Left mouse button -> move up/down/left/right */                                  objpos.X += ((Math.Cos(CamYRotd) * pickObjDisplacement.X));                                  objpos.Y -= (pickObjDisplacement.Y);                                  objpos.Z += ((Math.Sin(CamYRotd) * pickObjDisplacement.X));                                    camera.Pos.X -= ((Math.Cos(CamYRotd) * pickObjDisplacement.X)) * 0.02;                                  camera.Pos.Y += (pickObjDisplacement.Y) * 0.02;                                  camera.Pos.Z -= ((Math.Sin(CamYRotd) * pickObjDisplacement.X)) * 0.02;                              }                                /* Round away decimal places (mainly for waypoints) */                              objpos.X = Math.Round(objpos.X' 0);                              objpos.Y = Math.Round(objpos.Y' 0);                              objpos.Z = Math.Round(objpos.Z' 0);                              pickedObject.Position = objpos;                                /* Refresh GUI according to type of picked object */                              if (pickedObject is HeaderCommands.Waypoints.Waypoint)                              {                                  foreach (DataGridViewCell cell in dgvPathWaypoints.SelectedCells)                                  {                                      for (int i = 0; i < dgvPathWaypoints.ColumnCount; i++) dgvPathWaypoints.UpdateCellValue(i' cell.RowIndex);                                  }                              }                              else if (pickedObject is HeaderCommands.Actors.Entry)                              {                                  HeaderCommands.Actors.Entry actor = (pickedObject as HeaderCommands.Actors.Entry);                                    if (actor.IsSpawnPoint)                                      XMLActorDefinitionReader.RefreshActorPositionRotation(actor' tlpExSpawnPoints);                                  else if (actor.IsTransitionActor)                                      XMLActorDefinitionReader.RefreshActorPositionRotation(actor' tlpExTransitions);                                  else                                      XMLActorDefinitionReader.RefreshActorPositionRotation(actor' tlpExRoomActors);                              }                              else if (pickedObject is HeaderCommands.Collision.Waterbox)                              {                                  waterboxesDirty = true;                                  RefreshWaterboxControls();                              }                                pickObjLastPosition = pickObjPosition;                                ((Control)sender).Focus();                          }                          break;                      }                    case ToolModes.StaticObjs:                      {                          if (Convert.ToBoolean(e.Button & MouseButtons.Left)/* && PickedObject == null*/)                              camera.MouseMove(new Vector2d(e.X' e.Y));                          break;                      }              }
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_MouseMove,The following statement contains a magic number: switch (currentToolMode)              {                  case ToolModes.Camera:                      {                          if (Convert.ToBoolean(e.Button & MouseButtons.Left))                              camera.MouseMove(new Vector2d(e.X' e.Y));                          break;                      }                    case ToolModes.MoveableObjs:                      {                          if (!Convert.ToBoolean(e.Button & MouseButtons.Left) && !Convert.ToBoolean(e.Button & MouseButtons.Middle)) break;                            if (pickedObject == null)                              camera.MouseMove(new Vector2d(e.X' e.Y));                          else                          {                              // TODO  make this not shitty; try to get the "new method" to work with anything that's not at (0'0'0)                                /* Speed modifiers */                              double movemod = 3.0;                              if (keysDown[(ushort)Keys.Space]) movemod = 8.0;                              else if (keysDown[(ushort)Keys.ShiftKey]) movemod = 1.0;                                /* Determine mouse position and displacement */                              pickObjPosition = new Vector2d(e.X' e.Y);                              pickObjDisplacement = ((pickObjPosition - pickObjLastPosition) * movemod);                                /* No displacement? Exit */                              if (pickObjDisplacement == Vector2d.Zero) return;                                /* Calculate camera rotation */                              double CamXRotd = camera.Rot.X * (double)(Math.PI / 180);                              double CamYRotd = camera.Rot.Y * (double)(Math.PI / 180);                                /* WARNING: Cam position stuff below is "I dunno why it works' but it does!" */                              Vector3d objpos = pickedObject.Position;                                if (Convert.ToBoolean(e.Button & MouseButtons.Middle) || (Convert.ToBoolean(e.Button & MouseButtons.Left) && keysDown[(ushort)Keys.ControlKey]))                              {                                  /* Middle mouse button OR left button + Ctrl -> move forward/backward */                                  objpos.X += ((Math.Sin(CamYRotd) * -pickObjDisplacement.Y));                                  objpos.Z -= ((Math.Cos(CamYRotd) * -pickObjDisplacement.Y));                                    camera.Pos.X -= ((Math.Sin(CamYRotd) * (-pickObjDisplacement.Y * camera.CameraCoeff * camera.Sensitivity) / 1.25));                                  camera.Pos.Z += ((Math.Cos(CamYRotd) * (-pickObjDisplacement.Y * camera.CameraCoeff * camera.Sensitivity) / 1.25));                              }                              else if (Convert.ToBoolean(e.Button & MouseButtons.Left))                              {                                  /* Left mouse button -> move up/down/left/right */                                  objpos.X += ((Math.Cos(CamYRotd) * pickObjDisplacement.X));                                  objpos.Y -= (pickObjDisplacement.Y);                                  objpos.Z += ((Math.Sin(CamYRotd) * pickObjDisplacement.X));                                    camera.Pos.X -= ((Math.Cos(CamYRotd) * pickObjDisplacement.X)) * 0.02;                                  camera.Pos.Y += (pickObjDisplacement.Y) * 0.02;                                  camera.Pos.Z -= ((Math.Sin(CamYRotd) * pickObjDisplacement.X)) * 0.02;                              }                                /* Round away decimal places (mainly for waypoints) */                              objpos.X = Math.Round(objpos.X' 0);                              objpos.Y = Math.Round(objpos.Y' 0);                              objpos.Z = Math.Round(objpos.Z' 0);                              pickedObject.Position = objpos;                                /* Refresh GUI according to type of picked object */                              if (pickedObject is HeaderCommands.Waypoints.Waypoint)                              {                                  foreach (DataGridViewCell cell in dgvPathWaypoints.SelectedCells)                                  {                                      for (int i = 0; i < dgvPathWaypoints.ColumnCount; i++) dgvPathWaypoints.UpdateCellValue(i' cell.RowIndex);                                  }                              }                              else if (pickedObject is HeaderCommands.Actors.Entry)                              {                                  HeaderCommands.Actors.Entry actor = (pickedObject as HeaderCommands.Actors.Entry);                                    if (actor.IsSpawnPoint)                                      XMLActorDefinitionReader.RefreshActorPositionRotation(actor' tlpExSpawnPoints);                                  else if (actor.IsTransitionActor)                                      XMLActorDefinitionReader.RefreshActorPositionRotation(actor' tlpExTransitions);                                  else                                      XMLActorDefinitionReader.RefreshActorPositionRotation(actor' tlpExRoomActors);                              }                              else if (pickedObject is HeaderCommands.Collision.Waterbox)                              {                                  waterboxesDirty = true;                                  RefreshWaterboxControls();                              }                                pickObjLastPosition = pickObjPosition;                                ((Control)sender).Focus();                          }                          break;                      }                    case ToolModes.StaticObjs:                      {                          if (Convert.ToBoolean(e.Button & MouseButtons.Left)/* && PickedObject == null*/)                              camera.MouseMove(new Vector2d(e.X' e.Y));                          break;                      }              }
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_MouseMove,The following statement contains a magic number: switch (currentToolMode)              {                  case ToolModes.Camera:                      {                          if (Convert.ToBoolean(e.Button & MouseButtons.Left))                              camera.MouseMove(new Vector2d(e.X' e.Y));                          break;                      }                    case ToolModes.MoveableObjs:                      {                          if (!Convert.ToBoolean(e.Button & MouseButtons.Left) && !Convert.ToBoolean(e.Button & MouseButtons.Middle)) break;                            if (pickedObject == null)                              camera.MouseMove(new Vector2d(e.X' e.Y));                          else                          {                              // TODO  make this not shitty; try to get the "new method" to work with anything that's not at (0'0'0)                                /* Speed modifiers */                              double movemod = 3.0;                              if (keysDown[(ushort)Keys.Space]) movemod = 8.0;                              else if (keysDown[(ushort)Keys.ShiftKey]) movemod = 1.0;                                /* Determine mouse position and displacement */                              pickObjPosition = new Vector2d(e.X' e.Y);                              pickObjDisplacement = ((pickObjPosition - pickObjLastPosition) * movemod);                                /* No displacement? Exit */                              if (pickObjDisplacement == Vector2d.Zero) return;                                /* Calculate camera rotation */                              double CamXRotd = camera.Rot.X * (double)(Math.PI / 180);                              double CamYRotd = camera.Rot.Y * (double)(Math.PI / 180);                                /* WARNING: Cam position stuff below is "I dunno why it works' but it does!" */                              Vector3d objpos = pickedObject.Position;                                if (Convert.ToBoolean(e.Button & MouseButtons.Middle) || (Convert.ToBoolean(e.Button & MouseButtons.Left) && keysDown[(ushort)Keys.ControlKey]))                              {                                  /* Middle mouse button OR left button + Ctrl -> move forward/backward */                                  objpos.X += ((Math.Sin(CamYRotd) * -pickObjDisplacement.Y));                                  objpos.Z -= ((Math.Cos(CamYRotd) * -pickObjDisplacement.Y));                                    camera.Pos.X -= ((Math.Sin(CamYRotd) * (-pickObjDisplacement.Y * camera.CameraCoeff * camera.Sensitivity) / 1.25));                                  camera.Pos.Z += ((Math.Cos(CamYRotd) * (-pickObjDisplacement.Y * camera.CameraCoeff * camera.Sensitivity) / 1.25));                              }                              else if (Convert.ToBoolean(e.Button & MouseButtons.Left))                              {                                  /* Left mouse button -> move up/down/left/right */                                  objpos.X += ((Math.Cos(CamYRotd) * pickObjDisplacement.X));                                  objpos.Y -= (pickObjDisplacement.Y);                                  objpos.Z += ((Math.Sin(CamYRotd) * pickObjDisplacement.X));                                    camera.Pos.X -= ((Math.Cos(CamYRotd) * pickObjDisplacement.X)) * 0.02;                                  camera.Pos.Y += (pickObjDisplacement.Y) * 0.02;                                  camera.Pos.Z -= ((Math.Sin(CamYRotd) * pickObjDisplacement.X)) * 0.02;                              }                                /* Round away decimal places (mainly for waypoints) */                              objpos.X = Math.Round(objpos.X' 0);                              objpos.Y = Math.Round(objpos.Y' 0);                              objpos.Z = Math.Round(objpos.Z' 0);                              pickedObject.Position = objpos;                                /* Refresh GUI according to type of picked object */                              if (pickedObject is HeaderCommands.Waypoints.Waypoint)                              {                                  foreach (DataGridViewCell cell in dgvPathWaypoints.SelectedCells)                                  {                                      for (int i = 0; i < dgvPathWaypoints.ColumnCount; i++) dgvPathWaypoints.UpdateCellValue(i' cell.RowIndex);                                  }                              }                              else if (pickedObject is HeaderCommands.Actors.Entry)                              {                                  HeaderCommands.Actors.Entry actor = (pickedObject as HeaderCommands.Actors.Entry);                                    if (actor.IsSpawnPoint)                                      XMLActorDefinitionReader.RefreshActorPositionRotation(actor' tlpExSpawnPoints);                                  else if (actor.IsTransitionActor)                                      XMLActorDefinitionReader.RefreshActorPositionRotation(actor' tlpExTransitions);                                  else                                      XMLActorDefinitionReader.RefreshActorPositionRotation(actor' tlpExRoomActors);                              }                              else if (pickedObject is HeaderCommands.Collision.Waterbox)                              {                                  waterboxesDirty = true;                                  RefreshWaterboxControls();                              }                                pickObjLastPosition = pickObjPosition;                                ((Control)sender).Focus();                          }                          break;                      }                    case ToolModes.StaticObjs:                      {                          if (Convert.ToBoolean(e.Button & MouseButtons.Left)/* && PickedObject == null*/)                              camera.MouseMove(new Vector2d(e.X' e.Y));                          break;                      }              }
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,EditVertexColor,The following statement contains a magic number: ColorPickerDialog cdlg = new ColorPickerDialog(Color.FromArgb(vertex.Colors[3]' vertex.Colors[0]' vertex.Colors[1]' vertex.Colors[2]));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,EditVertexColor,The following statement contains a magic number: ColorPickerDialog cdlg = new ColorPickerDialog(Color.FromArgb(vertex.Colors[3]' vertex.Colors[0]' vertex.Colors[1]' vertex.Colors[2]));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,EditVertexColor,The following statement contains a magic number: vertex.Colors[2] = cdlg.Color.B;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,EditVertexColor,The following statement contains a magic number: vertex.Colors[3] = cdlg.Color.A;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,EditVertexColor,The following statement contains a magic number: currentRoom.Data[(vertex.Address & 0xFFFFFF) + 12] = vertex.Colors[0];
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,EditVertexColor,The following statement contains a magic number: currentRoom.Data[(vertex.Address & 0xFFFFFF) + 13] = vertex.Colors[1];
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,EditVertexColor,The following statement contains a magic number: currentRoom.Data[(vertex.Address & 0xFFFFFF) + 14] = vertex.Colors[2];
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,EditVertexColor,The following statement contains a magic number: currentRoom.Data[(vertex.Address & 0xFFFFFF) + 14] = vertex.Colors[2];
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,EditVertexColor,The following statement contains a magic number: currentRoom.Data[(vertex.Address & 0xFFFFFF) + 15] = vertex.Colors[3];
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,EditVertexColor,The following statement contains a magic number: currentRoom.Data[(vertex.Address & 0xFFFFFF) + 15] = vertex.Colors[3];
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,dgvPathWaypoints_RowPostPaint,The following statement contains a magic number: e.Graphics.DrawString((e.RowIndex + 1).ToString()' e.InheritedRowStyle.Font' b' e.RowBounds.Location.X + 18' e.RowBounds.Location.Y + 4);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,dgvPathWaypoints_RowPostPaint,The following statement contains a magic number: e.Graphics.DrawString((e.RowIndex + 1).ToString()' e.InheritedRowStyle.Font' b' e.RowBounds.Location.X + 18' e.RowBounds.Location.Y + 4);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,txtColPolyRawData_TextChanged,The following statement contains a magic number: string valstr = (ns == System.Globalization.NumberStyles.HexNumber ? txt.Text.Substring(2) : txt.Text);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,ModifyCurrentWaterbox,The following statement contains a magic number: currentWaterbox.Properties = ushort.Parse(txtWaterboxProperties.Text.Substring(2)' System.Globalization.NumberStyles.HexNumber);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,xPlus45DegreesToolStripMenuItem_Click,The following statement contains a magic number: RotatePickedObject(new Vector3d(8192.0' 0.0' 0.0));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,xMinus45DegreesToolStripMenuItem_Click,The following statement contains a magic number: RotatePickedObject(new Vector3d(-8192.0' 0.0' 0.0));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,yPlus45DegreesToolStripMenuItem_Click,The following statement contains a magic number: RotatePickedObject(new Vector3d(0.0' 8192.0' 0.0));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,yMinus45DegreesToolStripMenuItem_Click,The following statement contains a magic number: RotatePickedObject(new Vector3d(0.0' -8192.0' 0.0));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,zPlus45DegreesToolStripMenuItem_Click,The following statement contains a magic number: RotatePickedObject(new Vector3d(0.0' 0.0' 8192.0));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,zMinus45DegreesToolStripMenuItem_Click,The following statement contains a magic number: RotatePickedObject(new Vector3d(0.0' 0.0' -8192.0));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,propertiesToolStripMenuItem1_Click,The following statement contains a magic number: vertexInfo.AppendFormat("Colors: ({0}' {1}' {2}' {3})\n"' currentRoomVertex.Colors[0]' currentRoomVertex.Colors[1]' currentRoomVertex.Colors[2]' currentRoomVertex.Colors[3]);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,propertiesToolStripMenuItem1_Click,The following statement contains a magic number: vertexInfo.AppendFormat("Colors: ({0}' {1}' {2}' {3})\n"' currentRoomVertex.Colors[0]' currentRoomVertex.Colors[1]' currentRoomVertex.Colors[2]' currentRoomVertex.Colors[3]);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,propertiesToolStripMenuItem1_Click,The following statement contains a magic number: vertexInfo.AppendFormat("Normals: ({0}' {1}' {2})\n"' currentRoomVertex.Normals[0]' currentRoomVertex.Normals[1]' currentRoomVertex.Normals[2]);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,openGLInformationToolStripMenuItem_Click,The following statement contains a magic number: oglInfoString.AppendFormat("* {0}\t{1}\n"' extension.PadRight(40)' Initialization.CheckForExtension(extension) ? "supported" : "not supported");
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,aboutToolStripMenuItem_Click,The following statement contains a magic number: string yearString = (linkerTimestamp.Year == 2013 ? "2013" : string.Format("2013-{0}"' linkerTimestamp.ToString("yyyy")));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip1.Size = new System.Drawing.Size(970' 24);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip1.Size = new System.Drawing.Size(970' 24);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.fileToolStripMenuItem.Size = new System.Drawing.Size(37' 20);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.fileToolStripMenuItem.Size = new System.Drawing.Size(37' 20);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.openROMToolStripMenuItem.Size = new System.Drawing.Size(206' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.openROMToolStripMenuItem.Size = new System.Drawing.Size(206' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.openSceneToolStripMenuItem.Size = new System.Drawing.Size(206' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.openSceneToolStripMenuItem.Size = new System.Drawing.Size(206' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.saveToolStripMenuItem.Size = new System.Drawing.Size(206' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.saveToolStripMenuItem.Size = new System.Drawing.Size(206' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem9.Size = new System.Drawing.Size(203' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem9.Size = new System.Drawing.Size(203' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.closeSceneToolStripMenuItem.Size = new System.Drawing.Size(206' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.closeSceneToolStripMenuItem.Size = new System.Drawing.Size(206' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem1.Size = new System.Drawing.Size(203' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem1.Size = new System.Drawing.Size(203' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.rOMInformationToolStripMenuItem.Size = new System.Drawing.Size(206' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.rOMInformationToolStripMenuItem.Size = new System.Drawing.Size(206' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem2.Size = new System.Drawing.Size(203' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem2.Size = new System.Drawing.Size(203' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.exitToolStripMenuItem.Size = new System.Drawing.Size(206' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.exitToolStripMenuItem.Size = new System.Drawing.Size(206' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.editToolStripMenuItem.Size = new System.Drawing.Size(39' 20);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.editToolStripMenuItem.Size = new System.Drawing.Size(39' 20);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.editDataTablesToolStripMenuItem.Size = new System.Drawing.Size(175' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.editDataTablesToolStripMenuItem.Size = new System.Drawing.Size(175' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.editAreaTitleCardToolStripMenuItem.Size = new System.Drawing.Size(175' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.editAreaTitleCardToolStripMenuItem.Size = new System.Drawing.Size(175' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolsToolStripMenuItem.Size = new System.Drawing.Size(48' 20);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolsToolStripMenuItem.Size = new System.Drawing.Size(48' 20);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.mouseModeToolStripMenuItem.Size = new System.Drawing.Size(192' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.mouseModeToolStripMenuItem.Size = new System.Drawing.Size(192' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.collisionHighlightToolStripMenuItem.Size = new System.Drawing.Size(192' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.collisionHighlightToolStripMenuItem.Size = new System.Drawing.Size(192' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.whiteToolStripMenuItem.Size = new System.Drawing.Size(179' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.whiteToolStripMenuItem.Size = new System.Drawing.Size(179' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.typebasedToolStripMenuItem.Size = new System.Drawing.Size(179' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.typebasedToolStripMenuItem.Size = new System.Drawing.Size(179' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem7.Size = new System.Drawing.Size(189' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem7.Size = new System.Drawing.Size(189' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.resetCameraPositionToolStripMenuItem.Size = new System.Drawing.Size(192' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.resetCameraPositionToolStripMenuItem.Size = new System.Drawing.Size(192' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.optionsToolStripMenuItem.Size = new System.Drawing.Size(61' 20);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.optionsToolStripMenuItem.Size = new System.Drawing.Size(61' 20);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.renderElementsToolStripMenuItem.Size = new System.Drawing.Size(162' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.renderElementsToolStripMenuItem.Size = new System.Drawing.Size(162' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.renderCollisionToolStripMenuItem.Size = new System.Drawing.Size(222' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.renderCollisionToolStripMenuItem.Size = new System.Drawing.Size(222' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem3.Size = new System.Drawing.Size(219' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem3.Size = new System.Drawing.Size(219' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.renderRoomActorsToolStripMenuItem.Size = new System.Drawing.Size(222' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.renderRoomActorsToolStripMenuItem.Size = new System.Drawing.Size(222' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.renderSpawnPointsToolStripMenuItem.Size = new System.Drawing.Size(222' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.renderSpawnPointsToolStripMenuItem.Size = new System.Drawing.Size(222' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.renderTransitionsToolStripMenuItem.Size = new System.Drawing.Size(222' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.renderTransitionsToolStripMenuItem.Size = new System.Drawing.Size(222' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.renderPathWaypointsToolStripMenuItem.Size = new System.Drawing.Size(222' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.renderPathWaypointsToolStripMenuItem.Size = new System.Drawing.Size(222' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.renderWaterboxesToolStripMenuItem.Size = new System.Drawing.Size(222' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.renderWaterboxesToolStripMenuItem.Size = new System.Drawing.Size(222' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem5.Size = new System.Drawing.Size(219' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem5.Size = new System.Drawing.Size(219' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.linkAllWaypointsInPathToolStripMenuItem.Size = new System.Drawing.Size(222' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.linkAllWaypointsInPathToolStripMenuItem.Size = new System.Drawing.Size(222' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.showWaterboxesPerRoomToolStripMenuItem.Size = new System.Drawing.Size(222' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.showWaterboxesPerRoomToolStripMenuItem.Size = new System.Drawing.Size(222' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem4.Size = new System.Drawing.Size(159' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem4.Size = new System.Drawing.Size(159' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.enableTexturesToolStripMenuItem.Size = new System.Drawing.Size(162' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.enableTexturesToolStripMenuItem.Size = new System.Drawing.Size(162' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.combinerTypeToolStripMenuItem.Size = new System.Drawing.Size(162' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.combinerTypeToolStripMenuItem.Size = new System.Drawing.Size(162' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem10.Size = new System.Drawing.Size(159' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem10.Size = new System.Drawing.Size(159' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.openGLToolStripMenuItem.Size = new System.Drawing.Size(162' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.openGLToolStripMenuItem.Size = new System.Drawing.Size(162' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.enableVSyncToolStripMenuItem.Size = new System.Drawing.Size(179' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.enableVSyncToolStripMenuItem.Size = new System.Drawing.Size(179' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.enableMipmapsToolStripMenuItem.Size = new System.Drawing.Size(179' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.enableMipmapsToolStripMenuItem.Size = new System.Drawing.Size(179' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.enableAntiAliasingToolStripMenuItem.Size = new System.Drawing.Size(179' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.enableAntiAliasingToolStripMenuItem.Size = new System.Drawing.Size(179' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.helpToolStripMenuItem.Size = new System.Drawing.Size(44' 20);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.helpToolStripMenuItem.Size = new System.Drawing.Size(44' 20);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkForUpdateToolStripMenuItem.Size = new System.Drawing.Size(192' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.checkForUpdateToolStripMenuItem.Size = new System.Drawing.Size(192' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem8.Size = new System.Drawing.Size(189' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem8.Size = new System.Drawing.Size(189' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.openGLInformationToolStripMenuItem.Size = new System.Drawing.Size(192' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.openGLInformationToolStripMenuItem.Size = new System.Drawing.Size(192' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.aboutToolStripMenuItem.Size = new System.Drawing.Size(192' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.aboutToolStripMenuItem.Size = new System.Drawing.Size(192' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.statusStrip1.Location = new System.Drawing.Point(0' 504);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.statusStrip1.Size = new System.Drawing.Size(970' 24);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.statusStrip1.Size = new System.Drawing.Size(970' 24);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.statusStrip1.TabIndex = 2;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bsiToolMode.Margin = new System.Windows.Forms.Padding(3' 3' 3' 2);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bsiToolMode.Margin = new System.Windows.Forms.Padding(3' 3' 3' 2);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bsiToolMode.Margin = new System.Windows.Forms.Padding(3' 3' 3' 2);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bsiToolMode.Margin = new System.Windows.Forms.Padding(3' 3' 3' 2);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bsiToolMode.Size = new System.Drawing.Size(160' 19);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bsiToolMode.Size = new System.Drawing.Size(160' 19);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.separatorStripItem1.Size = new System.Drawing.Size(6' 24);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.separatorStripItem1.Size = new System.Drawing.Size(6' 24);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tsslStatus.Size = new System.Drawing.Size(470' 19);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tsslStatus.Size = new System.Drawing.Size(470' 19);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.separatorStripItem2.Size = new System.Drawing.Size(6' 24);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.separatorStripItem2.Size = new System.Drawing.Size(6' 24);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bsiCamCoords.Margin = new System.Windows.Forms.Padding(3' 3' 3' 2);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bsiCamCoords.Margin = new System.Windows.Forms.Padding(3' 3' 3' 2);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bsiCamCoords.Margin = new System.Windows.Forms.Padding(3' 3' 3' 2);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bsiCamCoords.Margin = new System.Windows.Forms.Padding(3' 3' 3' 2);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bsiCamCoords.Size = new System.Drawing.Size(270' 19);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.bsiCamCoords.Size = new System.Drawing.Size(270' 19);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.Location = new System.Drawing.Point(640' 24);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.Location = new System.Drawing.Point(640' 24);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.Size = new System.Drawing.Size(330' 480);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.Size = new System.Drawing.Size(330' 480);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.TabIndex = 3;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpScenes.Location = new System.Drawing.Point(4' 40);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpScenes.Location = new System.Drawing.Point(4' 40);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpScenes.Padding = new System.Windows.Forms.Padding(3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpScenes.Size = new System.Drawing.Size(322' 436);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpScenes.Size = new System.Drawing.Size(322' 436);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tvScenes.Location = new System.Drawing.Point(3' 3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tvScenes.Location = new System.Drawing.Point(3' 3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tvScenes.Size = new System.Drawing.Size(316' 430);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tvScenes.Size = new System.Drawing.Size(316' 430);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpSceneMetadata.Location = new System.Drawing.Point(4' 40);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpSceneMetadata.Location = new System.Drawing.Point(4' 40);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpSceneMetadata.Size = new System.Drawing.Size(322' 436);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpSceneMetadata.Size = new System.Drawing.Size(322' 436);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpSceneMetadata.TabIndex = 6;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExSceneMeta.ColumnCount = 4;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExSceneMeta.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 30F));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExSceneMeta.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 20F));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExSceneMeta.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 30F));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExSceneMeta.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 20F));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExSceneMeta.Controls.Add(this.lblSceneMetaReverb' 0' 2);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExSceneMeta.Controls.Add(this.nudSceneMetaReverb' 1' 2);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExSceneMeta.Controls.Add(this.label1' 0' 3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExSceneMeta.RowCount = 4;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExSceneMeta.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute' 20F));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExSceneMeta.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute' 20F));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExSceneMeta.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute' 20F));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExSceneMeta.Size = new System.Drawing.Size(322' 436);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExSceneMeta.Size = new System.Drawing.Size(322' 436);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudSceneMetaNightSFX.Location = new System.Drawing.Point(99' 30);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudSceneMetaNightSFX.Location = new System.Drawing.Point(99' 30);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudSceneMetaNightSFX.Maximum = new decimal(new int[] {              255'              0'              0'              0});
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudSceneMetaNightSFX.Size = new System.Drawing.Size(58' 20);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudSceneMetaNightSFX.Size = new System.Drawing.Size(58' 20);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudSceneMetaNightSFX.TabIndex = 4;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExSceneMeta.SetColumnSpan(this.cbSceneMetaBGM' 3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbSceneMetaBGM.Location = new System.Drawing.Point(99' 3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbSceneMetaBGM.Location = new System.Drawing.Point(99' 3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbSceneMetaBGM.Size = new System.Drawing.Size(220' 21);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbSceneMetaBGM.Size = new System.Drawing.Size(220' 21);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblSceneMetaBGM.Location = new System.Drawing.Point(3' 0);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblSceneMetaBGM.Size = new System.Drawing.Size(90' 27);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblSceneMetaBGM.Size = new System.Drawing.Size(90' 27);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblSceneMetaReverb.Location = new System.Drawing.Point(3' 53);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblSceneMetaReverb.Location = new System.Drawing.Point(3' 53);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblSceneMetaReverb.Size = new System.Drawing.Size(90' 26);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblSceneMetaReverb.Size = new System.Drawing.Size(90' 26);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblSceneMetaReverb.TabIndex = 2;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudSceneMetaReverb.Location = new System.Drawing.Point(99' 56);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudSceneMetaReverb.Location = new System.Drawing.Point(99' 56);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudSceneMetaReverb.Maximum = new decimal(new int[] {              255'              0'              0'              0});
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudSceneMetaReverb.Size = new System.Drawing.Size(58' 20);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudSceneMetaReverb.Size = new System.Drawing.Size(58' 20);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudSceneMetaReverb.TabIndex = 3;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblSceneMetaNightSFX.Location = new System.Drawing.Point(3' 27);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblSceneMetaNightSFX.Location = new System.Drawing.Point(3' 27);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblSceneMetaNightSFX.Size = new System.Drawing.Size(90' 26);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblSceneMetaNightSFX.Size = new System.Drawing.Size(90' 26);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblSceneMetaNightSFX.TabIndex = 5;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExSceneMeta.SetColumnSpan(this.label1' 4);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(3' 79);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(3' 79);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(128' 13);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(128' 13);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 6;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpRoomActors.Location = new System.Drawing.Point(4' 40);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpRoomActors.Location = new System.Drawing.Point(4' 40);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpRoomActors.Padding = new System.Windows.Forms.Padding(3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpRoomActors.Size = new System.Drawing.Size(322' 436);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpRoomActors.Size = new System.Drawing.Size(322' 436);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExRoomActors.ColumnCount = 2;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExRoomActors.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 35F));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExRoomActors.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 65F));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExRoomActors.Location = new System.Drawing.Point(3' 24);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExRoomActors.Location = new System.Drawing.Point(3' 24);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExRoomActors.Padding = new System.Windows.Forms.Padding(0' 6' 0' 0);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExRoomActors.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent' 100F));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExRoomActors.Size = new System.Drawing.Size(316' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExRoomActors.Size = new System.Drawing.Size(316' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbActors.Location = new System.Drawing.Point(3' 3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbActors.Location = new System.Drawing.Point(3' 3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbActors.Size = new System.Drawing.Size(316' 21);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbActors.Size = new System.Drawing.Size(316' 21);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbActors.TabIndex = 2;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpObjects.Location = new System.Drawing.Point(4' 40);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpObjects.Location = new System.Drawing.Point(4' 40);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpObjects.Padding = new System.Windows.Forms.Padding(3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpObjects.Size = new System.Drawing.Size(322' 436);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpObjects.Size = new System.Drawing.Size(322' 436);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpObjects.TabIndex = 4;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.ColumnCount = 2;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 40F));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 60F));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Location = new System.Drawing.Point(3' 3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Location = new System.Drawing.Point(3' 3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.RowCount = 2;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent' 100F));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(316' 430);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Size = new System.Drawing.Size(316' 430);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblSpecialObjs.Margin = new System.Windows.Forms.Padding(0' 0' 0' 3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblSpecialObjs.Size = new System.Drawing.Size(126' 21);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblSpecialObjs.Size = new System.Drawing.Size(126' 21);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.SetColumnSpan(this.dgvObjects' 2);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.dgvObjects.Location = new System.Drawing.Point(0' 27);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.dgvObjects.Margin = new System.Windows.Forms.Padding(0' 3' 0' 0);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.dgvObjects.Size = new System.Drawing.Size(316' 403);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.dgvObjects.Size = new System.Drawing.Size(316' 403);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.dgvObjects.TabIndex = 4;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbSpecialObjs.Location = new System.Drawing.Point(126' 0);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbSpecialObjs.Margin = new System.Windows.Forms.Padding(0' 0' 0' 3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbSpecialObjs.Size = new System.Drawing.Size(190' 21);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbSpecialObjs.Size = new System.Drawing.Size(190' 21);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbSpecialObjs.TabIndex = 2;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpSpawnPoints.Location = new System.Drawing.Point(4' 40);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpSpawnPoints.Location = new System.Drawing.Point(4' 40);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpSpawnPoints.Padding = new System.Windows.Forms.Padding(3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpSpawnPoints.Size = new System.Drawing.Size(322' 436);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpSpawnPoints.Size = new System.Drawing.Size(322' 436);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpSpawnPoints.TabIndex = 3;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExSpawnPoints.ColumnCount = 2;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExSpawnPoints.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 35F));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExSpawnPoints.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 65F));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExSpawnPoints.Location = new System.Drawing.Point(3' 24);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExSpawnPoints.Location = new System.Drawing.Point(3' 24);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExSpawnPoints.Padding = new System.Windows.Forms.Padding(0' 6' 0' 0);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExSpawnPoints.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent' 100F));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExSpawnPoints.Size = new System.Drawing.Size(316' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExSpawnPoints.Size = new System.Drawing.Size(316' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExSpawnPoints.TabIndex = 3;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbSpawnPoints.Location = new System.Drawing.Point(3' 3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbSpawnPoints.Location = new System.Drawing.Point(3' 3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbSpawnPoints.Size = new System.Drawing.Size(316' 21);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbSpawnPoints.Size = new System.Drawing.Size(316' 21);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbSpawnPoints.TabIndex = 4;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpTransitions.Location = new System.Drawing.Point(4' 40);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpTransitions.Location = new System.Drawing.Point(4' 40);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpTransitions.Padding = new System.Windows.Forms.Padding(3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpTransitions.Size = new System.Drawing.Size(322' 436);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpTransitions.Size = new System.Drawing.Size(322' 436);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpTransitions.TabIndex = 2;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExTransitions.ColumnCount = 2;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExTransitions.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 35F));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExTransitions.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 65F));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExTransitions.Location = new System.Drawing.Point(3' 24);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExTransitions.Location = new System.Drawing.Point(3' 24);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExTransitions.Padding = new System.Windows.Forms.Padding(0' 6' 0' 0);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExTransitions.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent' 100F));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExTransitions.Size = new System.Drawing.Size(316' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExTransitions.Size = new System.Drawing.Size(316' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExTransitions.TabIndex = 3;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbTransitions.Location = new System.Drawing.Point(3' 3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbTransitions.Location = new System.Drawing.Point(3' 3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbTransitions.Size = new System.Drawing.Size(316' 21);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbTransitions.Size = new System.Drawing.Size(316' 21);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbTransitions.TabIndex = 4;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpWaypoints.Location = new System.Drawing.Point(4' 40);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpWaypoints.Location = new System.Drawing.Point(4' 40);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpWaypoints.Padding = new System.Windows.Forms.Padding(3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpWaypoints.Size = new System.Drawing.Size(322' 436);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpWaypoints.Size = new System.Drawing.Size(322' 436);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpWaypoints.TabIndex = 5;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 100F));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Absolute' 20F));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Location = new System.Drawing.Point(3' 3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Location = new System.Drawing.Point(3' 3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.RowCount = 2;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent' 100F));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Size = new System.Drawing.Size(316' 430);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Size = new System.Drawing.Size(316' 430);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.TabIndex = 2;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.dgvPathWaypoints.Location = new System.Drawing.Point(0' 27);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.dgvPathWaypoints.Margin = new System.Windows.Forms.Padding(0' 3' 0' 0);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.dgvPathWaypoints.Size = new System.Drawing.Size(316' 403);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.dgvPathWaypoints.Size = new System.Drawing.Size(316' 403);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.dgvPathWaypoints.TabIndex = 4;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbPathHeaders.Margin = new System.Windows.Forms.Padding(0' 0' 0' 3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbPathHeaders.Size = new System.Drawing.Size(316' 21);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbPathHeaders.Size = new System.Drawing.Size(316' 21);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbPathHeaders.TabIndex = 2;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpCollision.Location = new System.Drawing.Point(4' 40);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpCollision.Location = new System.Drawing.Point(4' 40);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpCollision.Size = new System.Drawing.Size(322' 436);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpCollision.Size = new System.Drawing.Size(322' 436);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpCollision.TabIndex = 7;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExCollision.ColumnCount = 2;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExCollision.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 40F));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExCollision.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 60F));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExCollision.Controls.Add(this.label2' 0' 10);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExCollision.Controls.Add(this.cbCollisionPolyTypes' 0' 7);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExCollision.Controls.Add(this.cbCollisionPolys' 0' 2);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExCollision.Controls.Add(this.lblColPolyType' 0' 3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExCollision.Controls.Add(this.nudColPolyType' 1' 3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExCollision.Controls.Add(this.lblColPolyGroundType' 0' 9);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExCollision.Controls.Add(this.cbColPolyGroundTypes' 1' 9);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExCollision.Controls.Add(this.lblColPolyRawData' 0' 8);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExCollision.Controls.Add(this.txtColPolyRawData' 1' 8);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExCollision.Controls.Add(this.btnJumpToPolyType' 1' 4);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExCollision.Controls.Add(this.lblCollisionPolyTypes' 0' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExCollision.RowCount = 11;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExCollision.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute' 7F));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExCollision.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute' 7F));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExCollision.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Absolute' 30F));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExCollision.Size = new System.Drawing.Size(322' 436);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExCollision.Size = new System.Drawing.Size(322' 436);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExCollision.SetColumnSpan(this.label2' 4);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(3' 203);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(3' 203);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(128' 13);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(128' 13);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 11;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExCollision.SetColumnSpan(this.cbCollisionPolyTypes' 2);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbCollisionPolyTypes.Location = new System.Drawing.Point(3' 125);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbCollisionPolyTypes.Location = new System.Drawing.Point(3' 125);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbCollisionPolyTypes.Size = new System.Drawing.Size(316' 21);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbCollisionPolyTypes.Size = new System.Drawing.Size(316' 21);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbCollisionPolyTypes.TabIndex = 5;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExCollision.SetColumnSpan(this.cbCollisionPolys' 2);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbCollisionPolys.Location = new System.Drawing.Point(3' 23);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbCollisionPolys.Location = new System.Drawing.Point(3' 23);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbCollisionPolys.Size = new System.Drawing.Size(316' 21);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbCollisionPolys.Size = new System.Drawing.Size(316' 21);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblColPolyType.Location = new System.Drawing.Point(3' 47);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblColPolyType.Location = new System.Drawing.Point(3' 47);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblColPolyType.Size = new System.Drawing.Size(122' 26);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblColPolyType.Size = new System.Drawing.Size(122' 26);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudColPolyType.Location = new System.Drawing.Point(131' 50);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudColPolyType.Location = new System.Drawing.Point(131' 50);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudColPolyType.Size = new System.Drawing.Size(188' 20);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudColPolyType.Size = new System.Drawing.Size(188' 20);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.nudColPolyType.TabIndex = 2;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblColPolyGroundType.Location = new System.Drawing.Point(3' 176);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblColPolyGroundType.Location = new System.Drawing.Point(3' 176);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblColPolyGroundType.Size = new System.Drawing.Size(122' 27);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblColPolyGroundType.Size = new System.Drawing.Size(122' 27);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblColPolyGroundType.TabIndex = 3;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbColPolyGroundTypes.Location = new System.Drawing.Point(131' 179);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbColPolyGroundTypes.Location = new System.Drawing.Point(131' 179);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbColPolyGroundTypes.Size = new System.Drawing.Size(188' 21);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbColPolyGroundTypes.Size = new System.Drawing.Size(188' 21);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbColPolyGroundTypes.TabIndex = 4;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblColPolyRawData.Location = new System.Drawing.Point(3' 149);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblColPolyRawData.Location = new System.Drawing.Point(3' 149);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblColPolyRawData.Size = new System.Drawing.Size(122' 27);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblColPolyRawData.Size = new System.Drawing.Size(122' 27);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblColPolyRawData.TabIndex = 6;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtColPolyRawData.Font = new System.Drawing.Font("Courier New"' 9F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtColPolyRawData.Location = new System.Drawing.Point(131' 152);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtColPolyRawData.Location = new System.Drawing.Point(131' 152);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtColPolyRawData.Size = new System.Drawing.Size(188' 21);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtColPolyRawData.Size = new System.Drawing.Size(188' 21);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtColPolyRawData.TabIndex = 7;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnJumpToPolyType.Location = new System.Drawing.Point(131' 76);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnJumpToPolyType.Location = new System.Drawing.Point(131' 76);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnJumpToPolyType.Size = new System.Drawing.Size(188' 23);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnJumpToPolyType.Size = new System.Drawing.Size(188' 23);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.btnJumpToPolyType.TabIndex = 8;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblCollisionPolys.Location = new System.Drawing.Point(3' 7);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblCollisionPolys.Location = new System.Drawing.Point(3' 7);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblCollisionPolys.Size = new System.Drawing.Size(122' 13);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblCollisionPolys.Size = new System.Drawing.Size(122' 13);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblCollisionPolys.TabIndex = 9;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblCollisionPolyTypes.Location = new System.Drawing.Point(3' 109);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblCollisionPolyTypes.Location = new System.Drawing.Point(3' 109);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblCollisionPolyTypes.Size = new System.Drawing.Size(122' 13);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblCollisionPolyTypes.Size = new System.Drawing.Size(122' 13);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblCollisionPolyTypes.TabIndex = 10;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpWaterboxes.Location = new System.Drawing.Point(4' 40);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpWaterboxes.Location = new System.Drawing.Point(4' 40);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpWaterboxes.Padding = new System.Windows.Forms.Padding(3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpWaterboxes.Size = new System.Drawing.Size(322' 436);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpWaterboxes.Size = new System.Drawing.Size(322' 436);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tpWaterboxes.TabIndex = 8;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExWaterboxes.ColumnCount = 2;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExWaterboxes.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 35F));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExWaterboxes.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent' 65F));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExWaterboxes.Controls.Add(this.lblWaterboxProperties' 0' 7);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExWaterboxes.Controls.Add(this.txtWaterboxProperties' 0' 7);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExWaterboxes.Controls.Add(this.lblWaterboxPositionY' 0' 2);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExWaterboxes.Controls.Add(this.txtWaterboxPositionY' 1' 2);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExWaterboxes.Controls.Add(this.lblWaterboxPositionZ' 0' 3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExWaterboxes.Controls.Add(this.txtWaterboxPositionZ' 1' 3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExWaterboxes.Controls.Add(this.lblWaterboxSizeX' 0' 4);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExWaterboxes.Controls.Add(this.txtWaterboxSizeX' 1' 4);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExWaterboxes.Controls.Add(this.lblWaterboxSizeZ' 0' 5);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExWaterboxes.Controls.Add(this.txtWaterboxSizeZ' 1' 5);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExWaterboxes.Controls.Add(this.lblWaterboxRoom' 0' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExWaterboxes.Controls.Add(this.cbWaterboxRoom' 1' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExWaterboxes.Location = new System.Drawing.Point(3' 24);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExWaterboxes.Location = new System.Drawing.Point(3' 24);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExWaterboxes.Padding = new System.Windows.Forms.Padding(0' 6' 0' 0);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExWaterboxes.RowCount = 8;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExWaterboxes.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent' 100F));
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExWaterboxes.Size = new System.Drawing.Size(316' 189);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExWaterboxes.Size = new System.Drawing.Size(316' 189);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.tlpExWaterboxes.TabIndex = 4;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxProperties.Location = new System.Drawing.Point(3' 163);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxProperties.Location = new System.Drawing.Point(3' 163);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxProperties.Size = new System.Drawing.Size(104' 26);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxProperties.Size = new System.Drawing.Size(104' 26);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxProperties.TabIndex = 13;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtWaterboxProperties.Location = new System.Drawing.Point(113' 166);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtWaterboxProperties.Location = new System.Drawing.Point(113' 166);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtWaterboxProperties.Size = new System.Drawing.Size(200' 20);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtWaterboxProperties.Size = new System.Drawing.Size(200' 20);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtWaterboxProperties.TabIndex = 14;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxPositionX.Location = new System.Drawing.Point(3' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxPositionX.Location = new System.Drawing.Point(3' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxPositionX.Size = new System.Drawing.Size(104' 26);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxPositionX.Size = new System.Drawing.Size(104' 26);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxPositionX.TabIndex = 5;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtWaterboxPositionX.Location = new System.Drawing.Point(113' 9);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtWaterboxPositionX.Location = new System.Drawing.Point(113' 9);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtWaterboxPositionX.Size = new System.Drawing.Size(200' 20);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtWaterboxPositionX.Size = new System.Drawing.Size(200' 20);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtWaterboxPositionX.TabIndex = 6;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxPositionY.Location = new System.Drawing.Point(3' 32);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxPositionY.Location = new System.Drawing.Point(3' 32);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxPositionY.Size = new System.Drawing.Size(104' 26);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxPositionY.Size = new System.Drawing.Size(104' 26);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxPositionY.TabIndex = 5;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtWaterboxPositionY.Location = new System.Drawing.Point(113' 35);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtWaterboxPositionY.Location = new System.Drawing.Point(113' 35);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtWaterboxPositionY.Size = new System.Drawing.Size(200' 20);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtWaterboxPositionY.Size = new System.Drawing.Size(200' 20);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtWaterboxPositionY.TabIndex = 6;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxPositionZ.Location = new System.Drawing.Point(3' 58);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxPositionZ.Location = new System.Drawing.Point(3' 58);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxPositionZ.Size = new System.Drawing.Size(104' 26);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxPositionZ.Size = new System.Drawing.Size(104' 26);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxPositionZ.TabIndex = 5;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtWaterboxPositionZ.Location = new System.Drawing.Point(113' 61);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtWaterboxPositionZ.Location = new System.Drawing.Point(113' 61);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtWaterboxPositionZ.Size = new System.Drawing.Size(200' 20);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtWaterboxPositionZ.Size = new System.Drawing.Size(200' 20);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtWaterboxPositionZ.TabIndex = 6;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxSizeX.Location = new System.Drawing.Point(3' 84);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxSizeX.Location = new System.Drawing.Point(3' 84);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxSizeX.Size = new System.Drawing.Size(104' 26);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxSizeX.Size = new System.Drawing.Size(104' 26);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxSizeX.TabIndex = 7;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtWaterboxSizeX.Location = new System.Drawing.Point(113' 87);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtWaterboxSizeX.Location = new System.Drawing.Point(113' 87);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtWaterboxSizeX.Size = new System.Drawing.Size(200' 20);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtWaterboxSizeX.Size = new System.Drawing.Size(200' 20);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtWaterboxSizeX.TabIndex = 8;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxSizeZ.Location = new System.Drawing.Point(3' 110);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxSizeZ.Location = new System.Drawing.Point(3' 110);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxSizeZ.Size = new System.Drawing.Size(104' 26);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxSizeZ.Size = new System.Drawing.Size(104' 26);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxSizeZ.TabIndex = 9;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtWaterboxSizeZ.Location = new System.Drawing.Point(113' 113);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtWaterboxSizeZ.Location = new System.Drawing.Point(113' 113);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtWaterboxSizeZ.Size = new System.Drawing.Size(200' 20);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtWaterboxSizeZ.Size = new System.Drawing.Size(200' 20);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.txtWaterboxSizeZ.TabIndex = 10;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxRoom.Location = new System.Drawing.Point(3' 136);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxRoom.Location = new System.Drawing.Point(3' 136);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxRoom.Size = new System.Drawing.Size(104' 27);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxRoom.Size = new System.Drawing.Size(104' 27);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.lblWaterboxRoom.TabIndex = 11;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbWaterboxRoom.Location = new System.Drawing.Point(113' 139);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbWaterboxRoom.Location = new System.Drawing.Point(113' 139);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbWaterboxRoom.Size = new System.Drawing.Size(200' 21);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbWaterboxRoom.Size = new System.Drawing.Size(200' 21);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbWaterboxRoom.TabIndex = 12;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbWaterboxes.Location = new System.Drawing.Point(3' 3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbWaterboxes.Location = new System.Drawing.Point(3' 3);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbWaterboxes.Size = new System.Drawing.Size(316' 21);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbWaterboxes.Size = new System.Drawing.Size(316' 21);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cbWaterboxes.TabIndex = 3;
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cmsMoveableObjectEdit.Size = new System.Drawing.Size(119' 54);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cmsMoveableObjectEdit.Size = new System.Drawing.Size(119' 54);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.deselectToolStripMenuItem.Size = new System.Drawing.Size(118' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.deselectToolStripMenuItem.Size = new System.Drawing.Size(118' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem6.Size = new System.Drawing.Size(115' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem6.Size = new System.Drawing.Size(115' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.rotateToolStripMenuItem.Size = new System.Drawing.Size(118' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.rotateToolStripMenuItem.Size = new System.Drawing.Size(118' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xAxisToolStripMenuItem.Size = new System.Drawing.Size(105' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xAxisToolStripMenuItem.Size = new System.Drawing.Size(105' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPlus45DegreesToolStripMenuItem.Size = new System.Drawing.Size(139' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xPlus45DegreesToolStripMenuItem.Size = new System.Drawing.Size(139' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xMinus45DegreesToolStripMenuItem.Size = new System.Drawing.Size(139' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.xMinus45DegreesToolStripMenuItem.Size = new System.Drawing.Size(139' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.yAxisToolStripMenuItem.Size = new System.Drawing.Size(105' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.yAxisToolStripMenuItem.Size = new System.Drawing.Size(105' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.yPlus45DegreesToolStripMenuItem.Size = new System.Drawing.Size(139' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.yPlus45DegreesToolStripMenuItem.Size = new System.Drawing.Size(139' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.yMinus45DegreesToolStripMenuItem.Size = new System.Drawing.Size(139' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.yMinus45DegreesToolStripMenuItem.Size = new System.Drawing.Size(139' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.zAxisToolStripMenuItem.Size = new System.Drawing.Size(105' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.zAxisToolStripMenuItem.Size = new System.Drawing.Size(105' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.zPlus45DegreesToolStripMenuItem.Size = new System.Drawing.Size(139' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.zPlus45DegreesToolStripMenuItem.Size = new System.Drawing.Size(139' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.zMinus45DegreesToolStripMenuItem.Size = new System.Drawing.Size(139' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.zMinus45DegreesToolStripMenuItem.Size = new System.Drawing.Size(139' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cmsSceneTree.Size = new System.Drawing.Size(128' 26);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cmsSceneTree.Size = new System.Drawing.Size(128' 26);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.propertiesToolStripMenuItem.Size = new System.Drawing.Size(127' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.propertiesToolStripMenuItem.Size = new System.Drawing.Size(127' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.customGLControl.Location = new System.Drawing.Point(0' 24);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.customGLControl.Size = new System.Drawing.Size(640' 480);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.customGLControl.Size = new System.Drawing.Size(640' 480);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cmsVertexEdit.Size = new System.Drawing.Size(157' 54);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.cmsVertexEdit.Size = new System.Drawing.Size(157' 54);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.changeColorToolStripMenuItem.Size = new System.Drawing.Size(156' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.changeColorToolStripMenuItem.Size = new System.Drawing.Size(156' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem11.Size = new System.Drawing.Size(153' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItem11.Size = new System.Drawing.Size(153' 6);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.propertiesToolStripMenuItem1.Size = new System.Drawing.Size(156' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.propertiesToolStripMenuItem1.Size = new System.Drawing.Size(156' 22);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(970' 528);
Magic Number,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(970' 528);
Magic Number,SceneNavi,Program,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\Program.cs,Main,The following statement contains a magic number: Thread.Sleep(3000);
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,dgvEntranceTable_CellParsing,The following statement contains a magic number: byte.TryParse((ishex ? str.Substring(2) : str)' (ishex ? System.Globalization.NumberStyles.AllowHexSpecifier : System.Globalization.NumberStyles.None)'                          System.Globalization.CultureInfo.InvariantCulture' out val)
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,dgvSceneTable_CellParsing,The following statement contains a magic number: byte.TryParse((ishex ? str.Substring(2) : str)' (ishex ? System.Globalization.NumberStyles.AllowHexSpecifier : System.Globalization.NumberStyles.None)'                              System.Globalization.CultureInfo.InvariantCulture' out val)
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The following statement contains a magic number: this.dgvEntranceTable.Size = new System.Drawing.Size(562' 390);
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The following statement contains a magic number: this.dgvEntranceTable.Size = new System.Drawing.Size(562' 390);
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.Location = new System.Drawing.Point(12' 45);
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.Location = new System.Drawing.Point(12' 45);
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.Size = new System.Drawing.Size(570' 416);
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The following statement contains a magic number: this.tabControl1.Size = new System.Drawing.Size(570' 416);
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The following statement contains a magic number: this.tpExitTable.Location = new System.Drawing.Point(4' 22);
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The following statement contains a magic number: this.tpExitTable.Location = new System.Drawing.Point(4' 22);
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The following statement contains a magic number: this.tpExitTable.Size = new System.Drawing.Size(562' 390);
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The following statement contains a magic number: this.tpExitTable.Size = new System.Drawing.Size(562' 390);
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The following statement contains a magic number: this.tpSceneTable.Location = new System.Drawing.Point(4' 22);
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The following statement contains a magic number: this.tpSceneTable.Location = new System.Drawing.Point(4' 22);
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The following statement contains a magic number: this.tpSceneTable.Size = new System.Drawing.Size(562' 390);
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The following statement contains a magic number: this.tpSceneTable.Size = new System.Drawing.Size(562' 390);
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The following statement contains a magic number: this.dgvSceneTable.Size = new System.Drawing.Size(562' 390);
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The following statement contains a magic number: this.dgvSceneTable.Size = new System.Drawing.Size(562' 390);
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Location = new System.Drawing.Point(497' 467);
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Location = new System.Drawing.Point(497' 467);
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Size = new System.Drawing.Size(85' 23);
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Size = new System.Drawing.Size(85' 23);
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.TabIndex = 2;
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(13' 9);
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(13' 9);
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Padding = new System.Windows.Forms.Padding(0' 0' 0' 6);
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(569' 33);
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(569' 33);
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(594' 502);
Magic Number,SceneNavi,TableEditorForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TableEditorForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(594' 502);
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,ReadImageFromROM,The following statement contains a magic number: byte[] textureBuffer = new byte[titleCardWidth * titleCardHeight * 4];
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,ReadImageFromROM,The following statement contains a magic number: SimpleF3DEX2.ImageHelper.IA8(titleCardWidth' titleCardHeight' (titleCardWidth / 8)' ROM.Data' (int)Scene.LabelStartAddress' ref textureBuffer);
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,ReadImageFromROM,The following statement contains a magic number: pbTitleCard.ClientSize = new Size(titleCardWidth * 2' titleCardHeight * 2);
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,ReadImageFromROM,The following statement contains a magic number: pbTitleCard.ClientSize = new Size(titleCardWidth * 2' titleCardHeight * 2);
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,pbTitleCard_Paint,The following statement contains a magic number: e.Graphics.DrawImage(output' new Rectangle(outputRect.X' outputRect.Y' outputRect.Width * 2' outputRect.Height * 2)' outputRect' GraphicsUnit.Pixel);
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,pbTitleCard_Paint,The following statement contains a magic number: e.Graphics.DrawImage(output' new Rectangle(outputRect.X' outputRect.Y' outputRect.Width * 2' outputRect.Height * 2)' outputRect' GraphicsUnit.Pixel);
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,ImportImage,The following statement contains a magic number: int intensity = (pixelColor.R + pixelColor.G + pixelColor.B) / 3;
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,ImportImage,The following statement contains a magic number: byte packed = (byte)(((byte)intensity).Scale(0' 0xFF' 0' 0xF) << 4);
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Location = new System.Drawing.Point(307' 187);
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Location = new System.Drawing.Point(307' 187);
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Size = new System.Drawing.Size(85' 23);
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Size = new System.Drawing.Size(85' 23);
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.TabIndex = 3;
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,InitializeComponent,The following statement contains a magic number: this.pbTitleCard.Location = new System.Drawing.Point(12' 12);
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,InitializeComponent,The following statement contains a magic number: this.pbTitleCard.Location = new System.Drawing.Point(12' 12);
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,InitializeComponent,The following statement contains a magic number: this.pbTitleCard.Size = new System.Drawing.Size(288' 64);
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,InitializeComponent,The following statement contains a magic number: this.pbTitleCard.Size = new System.Drawing.Size(288' 64);
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,InitializeComponent,The following statement contains a magic number: this.pbTitleCard.TabIndex = 4;
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,InitializeComponent,The following statement contains a magic number: this.btnExport.Location = new System.Drawing.Point(307' 12);
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,InitializeComponent,The following statement contains a magic number: this.btnExport.Location = new System.Drawing.Point(307' 12);
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,InitializeComponent,The following statement contains a magic number: this.btnExport.Size = new System.Drawing.Size(85' 23);
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,InitializeComponent,The following statement contains a magic number: this.btnExport.Size = new System.Drawing.Size(85' 23);
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,InitializeComponent,The following statement contains a magic number: this.btnExport.TabIndex = 5;
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,InitializeComponent,The following statement contains a magic number: this.btnImport.Location = new System.Drawing.Point(307' 41);
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,InitializeComponent,The following statement contains a magic number: this.btnImport.Location = new System.Drawing.Point(307' 41);
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,InitializeComponent,The following statement contains a magic number: this.btnImport.Size = new System.Drawing.Size(85' 23);
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,InitializeComponent,The following statement contains a magic number: this.btnImport.Size = new System.Drawing.Size(85' 23);
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,InitializeComponent,The following statement contains a magic number: this.btnImport.TabIndex = 6;
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(404' 222);
Magic Number,SceneNavi,TitleCardForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\TitleCardForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(404' 222);
Magic Number,SceneNavi,UpdateCheckDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\UpdateCheckDialog.cs,UpdateCheckDialog,The following statement contains a magic number: tmr.Interval = 2.0;
Magic Number,SceneNavi,UpdateCheckDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\UpdateCheckDialog.cs,tmr_Elapsed,The following statement contains a magic number: updateInformation.Length >= 2
Magic Number,SceneNavi,UpdateCheckDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\UpdateCheckDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Location = new System.Drawing.Point(607' 387);
Magic Number,SceneNavi,UpdateCheckDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\UpdateCheckDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Location = new System.Drawing.Point(607' 387);
Magic Number,SceneNavi,UpdateCheckDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\UpdateCheckDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Size = new System.Drawing.Size(75' 23);
Magic Number,SceneNavi,UpdateCheckDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\UpdateCheckDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Size = new System.Drawing.Size(75' 23);
Magic Number,SceneNavi,UpdateCheckDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\UpdateCheckDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblStatus.Location = new System.Drawing.Point(12' 392);
Magic Number,SceneNavi,UpdateCheckDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\UpdateCheckDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblStatus.Location = new System.Drawing.Point(12' 392);
Magic Number,SceneNavi,UpdateCheckDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\UpdateCheckDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblStatus.Size = new System.Drawing.Size(16' 13);
Magic Number,SceneNavi,UpdateCheckDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\UpdateCheckDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblStatus.Size = new System.Drawing.Size(16' 13);
Magic Number,SceneNavi,UpdateCheckDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\UpdateCheckDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblStatus.TabIndex = 2;
Magic Number,SceneNavi,UpdateCheckDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\UpdateCheckDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnDownload.Location = new System.Drawing.Point(526' 387);
Magic Number,SceneNavi,UpdateCheckDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\UpdateCheckDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnDownload.Location = new System.Drawing.Point(526' 387);
Magic Number,SceneNavi,UpdateCheckDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\UpdateCheckDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnDownload.Size = new System.Drawing.Size(75' 23);
Magic Number,SceneNavi,UpdateCheckDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\UpdateCheckDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnDownload.Size = new System.Drawing.Size(75' 23);
Magic Number,SceneNavi,UpdateCheckDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\UpdateCheckDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnDownload.TabIndex = 3;
Magic Number,SceneNavi,UpdateCheckDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\UpdateCheckDialog.cs,InitializeComponent,The following statement contains a magic number: this.rlblChangelog.Location = new System.Drawing.Point(12' 12);
Magic Number,SceneNavi,UpdateCheckDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\UpdateCheckDialog.cs,InitializeComponent,The following statement contains a magic number: this.rlblChangelog.Location = new System.Drawing.Point(12' 12);
Magic Number,SceneNavi,UpdateCheckDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\UpdateCheckDialog.cs,InitializeComponent,The following statement contains a magic number: this.rlblChangelog.Size = new System.Drawing.Size(670' 369);
Magic Number,SceneNavi,UpdateCheckDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\UpdateCheckDialog.cs,InitializeComponent,The following statement contains a magic number: this.rlblChangelog.Size = new System.Drawing.Size(670' 369);
Magic Number,SceneNavi,UpdateCheckDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\UpdateCheckDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,SceneNavi,UpdateCheckDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\UpdateCheckDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,SceneNavi,UpdateCheckDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\UpdateCheckDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(694' 422);
Magic Number,SceneNavi,UpdateCheckDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\UpdateCheckDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(694' 422);
Magic Number,SceneNavi,VersionManagement,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\VersionManagement.cs,CreateVersionString,The following statement contains a magic number: switch (ver.Build)              {                  case 0:                      /* Alpha build */                      sb.AppendFormat(" Alpha {0}"' (ver.Revision >> 8));                      break;                    case 1:                      /* Beta build */                      sb.AppendFormat(" Beta {0}"' (ver.Revision >> 8));                      break;                    case 2:                      /* Final release */                      if (ver.Revision != 0) sb.AppendFormat(".{0}"' (ver.Revision >> 8));                      break;                    default:                      /* Invalid build type */                      throw new Exception("Invalid Build value in given version");              }
Magic Number,SceneNavi,VersionManagement,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\VersionManagement.cs,CreateVersionString,The following statement contains a magic number: switch (ver.Build)              {                  case 0:                      /* Alpha build */                      sb.AppendFormat(" Alpha {0}"' (ver.Revision >> 8));                      break;                    case 1:                      /* Beta build */                      sb.AppendFormat(" Beta {0}"' (ver.Revision >> 8));                      break;                    case 2:                      /* Final release */                      if (ver.Revision != 0) sb.AppendFormat(".{0}"' (ver.Revision >> 8));                      break;                    default:                      /* Invalid build type */                      throw new Exception("Invalid Build value in given version");              }
Magic Number,SceneNavi,VersionManagement,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\VersionManagement.cs,CreateVersionString,The following statement contains a magic number: switch (ver.Build)              {                  case 0:                      /* Alpha build */                      sb.AppendFormat(" Alpha {0}"' (ver.Revision >> 8));                      break;                    case 1:                      /* Beta build */                      sb.AppendFormat(" Beta {0}"' (ver.Revision >> 8));                      break;                    case 2:                      /* Final release */                      if (ver.Revision != 0) sb.AppendFormat(".{0}"' (ver.Revision >> 8));                      break;                    default:                      /* Invalid build type */                      throw new Exception("Invalid Build value in given version");              }
Magic Number,SceneNavi,VersionManagement,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\VersionManagement.cs,CreateVersionString,The following statement contains a magic number: switch (ver.Build)              {                  case 0:                      /* Alpha build */                      sb.AppendFormat(" Alpha {0}"' (ver.Revision >> 8));                      break;                    case 1:                      /* Beta build */                      sb.AppendFormat(" Beta {0}"' (ver.Revision >> 8));                      break;                    case 2:                      /* Final release */                      if (ver.Revision != 0) sb.AppendFormat(".{0}"' (ver.Revision >> 8));                      break;                    default:                      /* Invalid build type */                      throw new Exception("Invalid Build value in given version");              }
Magic Number,SceneNavi,VersionManagement,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\VersionManagement.cs,CreateVersionString,The following statement contains a magic number: sb.AppendFormat("{0}"' (char)('a' + ((ver.Revision & 0xFF) - 1) % 26));
Magic Number,SceneNavi,VersionManagement,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\VersionManagement.cs,RemoteFileExists,The following statement contains a magic number: request.Timeout = 1200;
Magic Number,SceneNavi,XMLActorDefinitionReader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\XMLActorDefinitionReader.cs,CreateActorEditingControls,The following statement contains a magic number: tlpex.SetColumnSpan(desc' 2);
Magic Number,SceneNavi.Controls,HScrollBarEx,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\Controls\HScrollBarEx.cs,WndProc,The following statement contains a magic number: switch ((uint)m.WParam)                  {                      case 2: // page up                          if (this.Value - this.ValLargeChange > 0)                          {                              this.Value -= this.ValLargeChange;                          }                          else                          {                              this.Value = 0;                          }                          break;                        case 3: // page down                          if (this.Value + this.LargeChange + this.ValLargeChange < this.Maximum)                          {                              this.Value += this.ValLargeChange;                          }                          else                          {                              this.Value = this.Maximum - this.LargeChange;                          }                          break;                        default:                          base.WndProc(ref m);                          break;                  }
Magic Number,SceneNavi.Controls,HScrollBarEx,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\Controls\HScrollBarEx.cs,WndProc,The following statement contains a magic number: switch ((uint)m.WParam)                  {                      case 2: // page up                          if (this.Value - this.ValLargeChange > 0)                          {                              this.Value -= this.ValLargeChange;                          }                          else                          {                              this.Value = 0;                          }                          break;                        case 3: // page down                          if (this.Value + this.LargeChange + this.ValLargeChange < this.Maximum)                          {                              this.Value += this.ValLargeChange;                          }                          else                          {                              this.Value = this.Maximum - this.LargeChange;                          }                          break;                        default:                          base.WndProc(ref m);                          break;                  }
Magic Number,SceneNavi.Controls,HScrollBarEx,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\Controls\HScrollBarEx.cs,WndProc,The following statement contains a magic number: m.Msg == 8469
Magic Number,SceneNavi.Controls,ToolStripRadioButtonMenuItem,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\Controls\ToolStripRadioButtonMenuItem.cs,OnPaint,The following statement contains a magic number: Int32 offset = (ContentRectangle.Height - RadioButtonRenderer.GetGlyphSize(e.Graphics' buttonState).Height) / 2;
Magic Number,SceneNavi.Controls,ToolStripRadioButtonMenuItem,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\Controls\ToolStripRadioButtonMenuItem.cs,OnPaint,The following statement contains a magic number: Point imageLocation = new Point(ContentRectangle.Location.X + 4' ContentRectangle.Location.Y + offset);
Magic Number,SceneNavi.Controls,ListViewEx,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\Controls\ListViewEx.cs,OnHandleCreated,The following statement contains a magic number: Environment.OSVersion.Platform == PlatformID.Win32NT && Environment.OSVersion.Version.Major >= 6
Magic Number,SceneNavi.Controls,TreeViewEx,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\Controls\TreeViewEx.cs,OnHandleCreated,The following statement contains a magic number: Environment.OSVersion.Platform == PlatformID.Win32NT && Environment.OSVersion.Version.Major >= 6
Magic Number,SceneNavi.HeaderCommands,Collision,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Collision.cs,Collision,The following statement contains a magic number: byte[] segdata = (byte[])ROM.SegmentMapping[(byte)(GetAddressGeneric() >> 24)];
Magic Number,SceneNavi.HeaderCommands,Collision,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Collision.cs,Collision,The following statement contains a magic number: byte[] vertsegdata = (byte[])ROM.SegmentMapping[(byte)(VertexArrayOffset >> 24)];
Magic Number,SceneNavi.HeaderCommands,Collision,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Collision.cs,Collision,The following statement contains a magic number: Vertices.Add(new Vector3d(                          Endian.SwapInt16(BitConverter.ToInt16(vertsegdata' (int)(VertexArrayOffset & 0xFFFFFF) + (i * 6)))'                          Endian.SwapInt16(BitConverter.ToInt16(vertsegdata' (int)(VertexArrayOffset & 0xFFFFFF) + (i * 6) + 2))'                          Endian.SwapInt16(BitConverter.ToInt16(vertsegdata' (int)(VertexArrayOffset & 0xFFFFFF) + (i * 6) + 4))));
Magic Number,SceneNavi.HeaderCommands,Collision,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Collision.cs,Collision,The following statement contains a magic number: Vertices.Add(new Vector3d(                          Endian.SwapInt16(BitConverter.ToInt16(vertsegdata' (int)(VertexArrayOffset & 0xFFFFFF) + (i * 6)))'                          Endian.SwapInt16(BitConverter.ToInt16(vertsegdata' (int)(VertexArrayOffset & 0xFFFFFF) + (i * 6) + 2))'                          Endian.SwapInt16(BitConverter.ToInt16(vertsegdata' (int)(VertexArrayOffset & 0xFFFFFF) + (i * 6) + 4))));
Magic Number,SceneNavi.HeaderCommands,Collision,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Collision.cs,Collision,The following statement contains a magic number: Vertices.Add(new Vector3d(                          Endian.SwapInt16(BitConverter.ToInt16(vertsegdata' (int)(VertexArrayOffset & 0xFFFFFF) + (i * 6)))'                          Endian.SwapInt16(BitConverter.ToInt16(vertsegdata' (int)(VertexArrayOffset & 0xFFFFFF) + (i * 6) + 2))'                          Endian.SwapInt16(BitConverter.ToInt16(vertsegdata' (int)(VertexArrayOffset & 0xFFFFFF) + (i * 6) + 4))));
Magic Number,SceneNavi.HeaderCommands,Collision,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Collision.cs,Collision,The following statement contains a magic number: Vertices.Add(new Vector3d(                          Endian.SwapInt16(BitConverter.ToInt16(vertsegdata' (int)(VertexArrayOffset & 0xFFFFFF) + (i * 6)))'                          Endian.SwapInt16(BitConverter.ToInt16(vertsegdata' (int)(VertexArrayOffset & 0xFFFFFF) + (i * 6) + 2))'                          Endian.SwapInt16(BitConverter.ToInt16(vertsegdata' (int)(VertexArrayOffset & 0xFFFFFF) + (i * 6) + 4))));
Magic Number,SceneNavi.HeaderCommands,Collision,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Collision.cs,Collision,The following statement contains a magic number: Vertices.Add(new Vector3d(                          Endian.SwapInt16(BitConverter.ToInt16(vertsegdata' (int)(VertexArrayOffset & 0xFFFFFF) + (i * 6)))'                          Endian.SwapInt16(BitConverter.ToInt16(vertsegdata' (int)(VertexArrayOffset & 0xFFFFFF) + (i * 6) + 2))'                          Endian.SwapInt16(BitConverter.ToInt16(vertsegdata' (int)(VertexArrayOffset & 0xFFFFFF) + (i * 6) + 4))));
Magic Number,SceneNavi.HeaderCommands,PolygonType,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Collision.cs,PolygonType,The following statement contains a magic number: byte[] segdata = (byte[])ROM.SegmentMapping[(byte)(adr >> 24)];
Magic Number,SceneNavi.HeaderCommands,Polygon,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Collision.cs,Polygon,The following statement contains a magic number: byte[] segdata = (byte[])ROM.SegmentMapping[(byte)(adr >> 24)];
Magic Number,SceneNavi.HeaderCommands,Polygon,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Collision.cs,Polygon,The following statement contains a magic number: VertexIDs = new ushort[3];
Magic Number,SceneNavi.HeaderCommands,Polygon,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Collision.cs,Polygon,The following statement contains a magic number: Vertices = new Vector3d[3];
Magic Number,SceneNavi.HeaderCommands,Polygon,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Collision.cs,Polygon,The following statement contains a magic number: ushort vidx = (ushort)(Endian.SwapUInt16(BitConverter.ToUInt16(segdata' (int)(adr & 0xFFFFFF) + 0x2 + (i * 2))) & 0xFFF);
Magic Number,SceneNavi.HeaderCommands,Polygon,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Collision.cs,Polygon,The following statement contains a magic number: i < 3
Magic Number,SceneNavi.HeaderCommands,Waterbox,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Collision.cs,Waterbox,The following statement contains a magic number: byte[] segdata = (byte[])ROM.SegmentMapping[(byte)(adr >> 24)];
Magic Number,SceneNavi.HeaderCommands,Waterbox,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Collision.cs,Waterbox,The following statement contains a magic number: Position = new Vector3d(                      (double)Endian.SwapInt16(BitConverter.ToInt16(segdata' (int)(adr & 0xFFFFFF)))'                      (double)Endian.SwapInt16(BitConverter.ToInt16(segdata' (int)((adr & 0xFFFFFF) + 2)))'                      (double)Endian.SwapInt16(BitConverter.ToInt16(segdata' (int)((adr & 0xFFFFFF) + 4))));
Magic Number,SceneNavi.HeaderCommands,Waterbox,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Collision.cs,Waterbox,The following statement contains a magic number: Position = new Vector3d(                      (double)Endian.SwapInt16(BitConverter.ToInt16(segdata' (int)(adr & 0xFFFFFF)))'                      (double)Endian.SwapInt16(BitConverter.ToInt16(segdata' (int)((adr & 0xFFFFFF) + 2)))'                      (double)Endian.SwapInt16(BitConverter.ToInt16(segdata' (int)((adr & 0xFFFFFF) + 4))));
Magic Number,SceneNavi.HeaderCommands,Waterbox,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Collision.cs,Waterbox,The following statement contains a magic number: SizeXZ = new Vector2d(                      (double)Endian.SwapInt16(BitConverter.ToInt16(segdata' (int)((adr & 0xFFFFFF) + 6)))'                      (double)Endian.SwapInt16(BitConverter.ToInt16(segdata' (int)((adr & 0xFFFFFF) + 8))));
Magic Number,SceneNavi.HeaderCommands,Waterbox,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Collision.cs,Waterbox,The following statement contains a magic number: SizeXZ = new Vector2d(                      (double)Endian.SwapInt16(BitConverter.ToInt16(segdata' (int)((adr & 0xFFFFFF) + 6)))'                      (double)Endian.SwapInt16(BitConverter.ToInt16(segdata' (int)((adr & 0xFFFFFF) + 8))));
Magic Number,SceneNavi.HeaderCommands,Waterbox,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Collision.cs,Waterbox,The following statement contains a magic number: RoomPropRaw = (Endian.SwapUInt32(BitConverter.ToUInt32(segdata' (int)((adr & 0xFFFFFF) + 12))) & 0xFFFFFF);
Magic Number,SceneNavi.HeaderCommands,EnvironmentSettings,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,EnvironmentSettings,The following statement contains a magic number: EnvSettingList.Add(new Entry(ROM' (uint)(GetAddressGeneric() + i * 22)));
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Entry,The following statement contains a magic number: byte[] segdata = (byte[])ROM.SegmentMapping[(byte)(adr >> 24)];
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Entry,The following statement contains a magic number: AmbientColor = Color.FromArgb(segdata[adr]' segdata[adr + 1]' segdata[adr + 2]);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Entry,The following statement contains a magic number: Diffuse1Direction = new Vector4(((sbyte)segdata[adr + 3] / 255.0f)' ((sbyte)segdata[adr + 4] / 255.0f)' ((sbyte)segdata[adr + 5] / 255.0f)' 0.0f);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Entry,The following statement contains a magic number: Diffuse1Direction = new Vector4(((sbyte)segdata[adr + 3] / 255.0f)' ((sbyte)segdata[adr + 4] / 255.0f)' ((sbyte)segdata[adr + 5] / 255.0f)' 0.0f);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Entry,The following statement contains a magic number: Diffuse1Direction = new Vector4(((sbyte)segdata[adr + 3] / 255.0f)' ((sbyte)segdata[adr + 4] / 255.0f)' ((sbyte)segdata[adr + 5] / 255.0f)' 0.0f);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Entry,The following statement contains a magic number: Diffuse1Direction = new Vector4(((sbyte)segdata[adr + 3] / 255.0f)' ((sbyte)segdata[adr + 4] / 255.0f)' ((sbyte)segdata[adr + 5] / 255.0f)' 0.0f);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Entry,The following statement contains a magic number: Diffuse1Direction = new Vector4(((sbyte)segdata[adr + 3] / 255.0f)' ((sbyte)segdata[adr + 4] / 255.0f)' ((sbyte)segdata[adr + 5] / 255.0f)' 0.0f);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Entry,The following statement contains a magic number: Diffuse1Direction = new Vector4(((sbyte)segdata[adr + 3] / 255.0f)' ((sbyte)segdata[adr + 4] / 255.0f)' ((sbyte)segdata[adr + 5] / 255.0f)' 0.0f);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Entry,The following statement contains a magic number: Diffuse1Color = Color.FromArgb(segdata[adr + 6]' segdata[adr + 7]' segdata[adr + 8]);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Entry,The following statement contains a magic number: Diffuse1Color = Color.FromArgb(segdata[adr + 6]' segdata[adr + 7]' segdata[adr + 8]);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Entry,The following statement contains a magic number: Diffuse1Color = Color.FromArgb(segdata[adr + 6]' segdata[adr + 7]' segdata[adr + 8]);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Entry,The following statement contains a magic number: Diffuse2Direction = new Vector4(((sbyte)segdata[adr + 9] / 255.0f)' ((sbyte)segdata[adr + 10] / 255.0f)' ((sbyte)segdata[adr + 11] / 255.0f)' 0.0f);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Entry,The following statement contains a magic number: Diffuse2Direction = new Vector4(((sbyte)segdata[adr + 9] / 255.0f)' ((sbyte)segdata[adr + 10] / 255.0f)' ((sbyte)segdata[adr + 11] / 255.0f)' 0.0f);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Entry,The following statement contains a magic number: Diffuse2Direction = new Vector4(((sbyte)segdata[adr + 9] / 255.0f)' ((sbyte)segdata[adr + 10] / 255.0f)' ((sbyte)segdata[adr + 11] / 255.0f)' 0.0f);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Entry,The following statement contains a magic number: Diffuse2Direction = new Vector4(((sbyte)segdata[adr + 9] / 255.0f)' ((sbyte)segdata[adr + 10] / 255.0f)' ((sbyte)segdata[adr + 11] / 255.0f)' 0.0f);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Entry,The following statement contains a magic number: Diffuse2Direction = new Vector4(((sbyte)segdata[adr + 9] / 255.0f)' ((sbyte)segdata[adr + 10] / 255.0f)' ((sbyte)segdata[adr + 11] / 255.0f)' 0.0f);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Entry,The following statement contains a magic number: Diffuse2Direction = new Vector4(((sbyte)segdata[adr + 9] / 255.0f)' ((sbyte)segdata[adr + 10] / 255.0f)' ((sbyte)segdata[adr + 11] / 255.0f)' 0.0f);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Entry,The following statement contains a magic number: Diffuse2Color = Color.FromArgb(segdata[adr + 12]' segdata[adr + 13]' segdata[adr + 14]);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Entry,The following statement contains a magic number: Diffuse2Color = Color.FromArgb(segdata[adr + 12]' segdata[adr + 13]' segdata[adr + 14]);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Entry,The following statement contains a magic number: Diffuse2Color = Color.FromArgb(segdata[adr + 12]' segdata[adr + 13]' segdata[adr + 14]);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Entry,The following statement contains a magic number: FogColor = Color.FromArgb(segdata[adr + 15]' segdata[adr + 16]' segdata[adr + 17]);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Entry,The following statement contains a magic number: FogColor = Color.FromArgb(segdata[adr + 15]' segdata[adr + 16]' segdata[adr + 17]);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Entry,The following statement contains a magic number: FogColor = Color.FromArgb(segdata[adr + 15]' segdata[adr + 16]' segdata[adr + 17]);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Entry,The following statement contains a magic number: FogStart = (ushort)(Endian.SwapUInt16(BitConverter.ToUInt16(segdata' (int)(adr + 18))) & 0x3FF);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Entry,The following statement contains a magic number: DrawDistance = Endian.SwapUInt16(BitConverter.ToUInt16(segdata' (int)(adr + 20)));
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,CreateLighting,The following statement contains a magic number: GL.Fog(FogParameter.FogColor' new float[] { FogColor.R / 255.0f' FogColor.G / 255.0f' FogColor.B / 255.0f });
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,CreateLighting,The following statement contains a magic number: GL.Fog(FogParameter.FogColor' new float[] { FogColor.R / 255.0f' FogColor.G / 255.0f' FogColor.B / 255.0f });
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,CreateLighting,The following statement contains a magic number: GL.Fog(FogParameter.FogColor' new float[] { FogColor.R / 255.0f' FogColor.G / 255.0f' FogColor.B / 255.0f });
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,CreateLighting,The following statement contains a magic number: GL.Fog(FogParameter.FogStart' (float)FogStart / 100.0f);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,CreateLighting,The following statement contains a magic number: GL.Fog(FogParameter.FogEnd' 150.0f);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Entry,The following statement contains a magic number: RawData = new byte[16];
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Entry,The following statement contains a magic number: byte[] segdata = (byte[])ROM.SegmentMapping[(byte)(adr >> 24)];
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,RefreshVariables,The following statement contains a magic number: int numofs = (IsTransitionActor ? 4 : 0);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Render,The following statement contains a magic number: GL.Rotate(Rotation.Z / 182.0444444' 0.0' 0.0' 1.0);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Render,The following statement contains a magic number: GL.Rotate(Rotation.Y / 182.0444444' 0.0' 1.0' 0.0);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Render,The following statement contains a magic number: GL.Rotate(Rotation.X / 182.0444444' 1.0' 0.0' 0.0);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Render,The following statement contains a magic number: GL.Scale(12.0' 12.0' 12.0);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Render,The following statement contains a magic number: GL.Scale(12.0' 12.0' 12.0);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Render,The following statement contains a magic number: GL.Scale(12.0' 12.0' 12.0);
Magic Number,SceneNavi.HeaderCommands,Entry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\EnvironmentSettings.cs,Entry,The following statement contains a magic number: byte[] segdata = (byte[])ROM.SegmentMapping[(byte)(adr >> 24)];
Magic Number,SceneNavi.HeaderCommands,SettingsSoundScene,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\SettingsSoundScene.cs,SettingsSoundScene,The following statement contains a magic number: Reverb = (byte)((this.Data >> 48) & 0xFF);
Magic Number,SceneNavi.HeaderCommands,SettingsSoundScene,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\SettingsSoundScene.cs,SettingsSoundScene,The following statement contains a magic number: NightSfxID = (byte)((this.Data >> 8) & 0xFF);
Magic Number,SceneNavi.HeaderCommands,SettingsSoundScene,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\SettingsSoundScene.cs,Store,The following statement contains a magic number: databuf[(int)(baseadr + (this.Offset & 0xFFFFFF) + 6)] = NightSfxID;
Magic Number,SceneNavi.HeaderCommands,SettingsSoundScene,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\SettingsSoundScene.cs,Store,The following statement contains a magic number: databuf[(int)(baseadr + (this.Offset & 0xFFFFFF) + 7)] = TrackID;
Magic Number,SceneNavi.HeaderCommands,Waypoints,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Waypoints.cs,Waypoints,The following statement contains a magic number: PathHeader nph = new PathHeader(ROM' (uint)(GetAddressGeneric() + i * 8)' i);
Magic Number,SceneNavi.HeaderCommands,Waypoints,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Waypoints.cs,Store,The following statement contains a magic number: Buffer.BlockCopy(bytes' 0' databuf' (int)(baseadr + (wp.Address & 0xFFFFFF) + 2)' bytes.Length);
Magic Number,SceneNavi.HeaderCommands,Waypoints,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Waypoints.cs,Store,The following statement contains a magic number: Buffer.BlockCopy(bytes' 0' databuf' (int)(baseadr + (wp.Address & 0xFFFFFF) + 4)' bytes.Length);
Magic Number,SceneNavi.HeaderCommands,PathHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Waypoints.cs,PathHeader,The following statement contains a magic number: byte[] segdata = (byte[])ROM.SegmentMapping[(byte)(adr >> 24)];
Magic Number,SceneNavi.HeaderCommands,PathHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Waypoints.cs,PathHeader,The following statement contains a magic number: WaypointAddress = Endian.SwapUInt32(BitConverter.ToUInt32(segdata' (int)(adr & 0xFFFFFF) + 4));
Magic Number,SceneNavi.HeaderCommands,PathHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Waypoints.cs,PathHeader,The following statement contains a magic number: byte[] psegdata = (byte[])ROM.SegmentMapping[(byte)(WaypointAddress >> 24)];
Magic Number,SceneNavi.HeaderCommands,PathHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Waypoints.cs,PathHeader,The following statement contains a magic number: Points.Add(new Waypoint(ROM' (uint)(WaypointAddress + (i * 6))));
Magic Number,SceneNavi.HeaderCommands,Waypoint,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Waypoints.cs,Waypoint,The following statement contains a magic number: byte[] segdata = (byte[])ROM.SegmentMapping[(byte)(adr >> 24)];
Magic Number,SceneNavi.HeaderCommands,Waypoint,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Waypoints.cs,Waypoint,The following statement contains a magic number: Y = (double)Endian.SwapInt16(BitConverter.ToInt16(segdata' (int)(adr & 0xFFFFFF) + 2));
Magic Number,SceneNavi.HeaderCommands,Waypoint,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Waypoints.cs,Waypoint,The following statement contains a magic number: Z = (double)Endian.SwapInt16(BitConverter.ToInt16(segdata' (int)(adr & 0xFFFFFF) + 4));
Magic Number,SceneNavi.HeaderCommands,Waypoint,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Waypoints.cs,Render,The following statement contains a magic number: GL.Scale(12.0' 12.0' 12.0);
Magic Number,SceneNavi.HeaderCommands,Waypoint,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Waypoints.cs,Render,The following statement contains a magic number: GL.Scale(12.0' 12.0' 12.0);
Magic Number,SceneNavi.HeaderCommands,Waypoint,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Waypoints.cs,Render,The following statement contains a magic number: GL.Scale(12.0' 12.0' 12.0);
Magic Number,SceneNavi.HeaderCommands,Waypoint,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Waypoints.cs,Render,The following statement contains a magic number: GL.Color3(0.25' 0.5' 1.0);
Magic Number,SceneNavi.HeaderCommands,Waypoint,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Waypoints.cs,Render,The following statement contains a magic number: GL.Color3(0.25' 0.5' 1.0);
Magic Number,SceneNavi.HeaderCommands,Waypoint,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Waypoints.cs,Render,The following statement contains a magic number: GL.Color3(1.0' 0.5' 0.0);
Magic Number,SceneNavi.HeaderCommands,Waypoint,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Waypoints.cs,Render,The following statement contains a magic number: GL.LineWidth(4.0f);
Magic Number,SceneNavi.HeaderCommands,SpecialObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\SpecialObjects.cs,Store,The following statement contains a magic number: Buffer.BlockCopy(objbytes' 0' databuf' (int)(baseadr + (this.Offset & 0xFFFFFF) + 6)' objbytes.Length);
Magic Number,SceneNavi.HeaderCommands,Actors,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Actors.cs,Actors,The following statement contains a magic number: ActorList.Add(new Entry(ROM' (uint)(GetAddressGeneric() + i * 16)' (i + 1)'                  (Command == HeaderLoader.CommandTypeIDs.Spawns)' (Command == HeaderLoader.CommandTypeIDs.Transitions)));
Magic Number,SceneNavi.HeaderCommands,Generic,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Generic.cs,Generic,The following statement contains a magic number: ofs += 8;
Magic Number,SceneNavi.HeaderCommands,Generic,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Generic.cs,GetCountGeneric,The following statement contains a magic number: return (int)((Data >> 48) & 0xFF);
Magic Number,SceneNavi.HeaderCommands,MeshHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\MeshHeader.cs,MeshHeader,The following statement contains a magic number: byte seg = (byte)(GetAddressGeneric() >> 24);
Magic Number,SceneNavi.HeaderCommands,MeshHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\MeshHeader.cs,MeshHeader,The following statement contains a magic number: DLTablePointer = Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[seg])' (int)(adr + 4)));
Magic Number,SceneNavi.HeaderCommands,MeshHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\MeshHeader.cs,MeshHeader,The following statement contains a magic number: OtherDataPointer = Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[seg])' (int)(adr + 8)));
Magic Number,SceneNavi.HeaderCommands,MeshHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\MeshHeader.cs,MeshHeader,The following statement contains a magic number: switch (Type)              {                  case 0x00:                      {                          for (int i = 0; i < Count; i++)                          {                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8)))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8) + 4))));                          }                          break;                      }                  case 0x01:                      {                          for (int i = 0; i < Count; i++)                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 4)))));                          break;                      }                  case 0x02:                      {                          for (int i = 0; i < Count; i++)                          {                              short s1 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16))));                              short s2 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 2)));                              short s3 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 4)));                              short s4 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 6)));                                MaxClipBounds.Add(new Vector3d(s1' 0.0' s2));                              MinClipBounds.Add(new Vector3d(s3' 0.0' s4));                                opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 8))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 12))));                          }                          break;                      }                    default: throw new Exception(string.Format("Invalid mesh type 0x{0:X2}"' Type));              }
Magic Number,SceneNavi.HeaderCommands,MeshHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\MeshHeader.cs,MeshHeader,The following statement contains a magic number: switch (Type)              {                  case 0x00:                      {                          for (int i = 0; i < Count; i++)                          {                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8)))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8) + 4))));                          }                          break;                      }                  case 0x01:                      {                          for (int i = 0; i < Count; i++)                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 4)))));                          break;                      }                  case 0x02:                      {                          for (int i = 0; i < Count; i++)                          {                              short s1 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16))));                              short s2 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 2)));                              short s3 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 4)));                              short s4 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 6)));                                MaxClipBounds.Add(new Vector3d(s1' 0.0' s2));                              MinClipBounds.Add(new Vector3d(s3' 0.0' s4));                                opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 8))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 12))));                          }                          break;                      }                    default: throw new Exception(string.Format("Invalid mesh type 0x{0:X2}"' Type));              }
Magic Number,SceneNavi.HeaderCommands,MeshHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\MeshHeader.cs,MeshHeader,The following statement contains a magic number: switch (Type)              {                  case 0x00:                      {                          for (int i = 0; i < Count; i++)                          {                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8)))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8) + 4))));                          }                          break;                      }                  case 0x01:                      {                          for (int i = 0; i < Count; i++)                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 4)))));                          break;                      }                  case 0x02:                      {                          for (int i = 0; i < Count; i++)                          {                              short s1 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16))));                              short s2 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 2)));                              short s3 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 4)));                              short s4 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 6)));                                MaxClipBounds.Add(new Vector3d(s1' 0.0' s2));                              MinClipBounds.Add(new Vector3d(s3' 0.0' s4));                                opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 8))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 12))));                          }                          break;                      }                    default: throw new Exception(string.Format("Invalid mesh type 0x{0:X2}"' Type));              }
Magic Number,SceneNavi.HeaderCommands,MeshHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\MeshHeader.cs,MeshHeader,The following statement contains a magic number: switch (Type)              {                  case 0x00:                      {                          for (int i = 0; i < Count; i++)                          {                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8)))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8) + 4))));                          }                          break;                      }                  case 0x01:                      {                          for (int i = 0; i < Count; i++)                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 4)))));                          break;                      }                  case 0x02:                      {                          for (int i = 0; i < Count; i++)                          {                              short s1 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16))));                              short s2 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 2)));                              short s3 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 4)));                              short s4 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 6)));                                MaxClipBounds.Add(new Vector3d(s1' 0.0' s2));                              MinClipBounds.Add(new Vector3d(s3' 0.0' s4));                                opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 8))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 12))));                          }                          break;                      }                    default: throw new Exception(string.Format("Invalid mesh type 0x{0:X2}"' Type));              }
Magic Number,SceneNavi.HeaderCommands,MeshHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\MeshHeader.cs,MeshHeader,The following statement contains a magic number: switch (Type)              {                  case 0x00:                      {                          for (int i = 0; i < Count; i++)                          {                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8)))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8) + 4))));                          }                          break;                      }                  case 0x01:                      {                          for (int i = 0; i < Count; i++)                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 4)))));                          break;                      }                  case 0x02:                      {                          for (int i = 0; i < Count; i++)                          {                              short s1 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16))));                              short s2 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 2)));                              short s3 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 4)));                              short s4 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 6)));                                MaxClipBounds.Add(new Vector3d(s1' 0.0' s2));                              MinClipBounds.Add(new Vector3d(s3' 0.0' s4));                                opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 8))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 12))));                          }                          break;                      }                    default: throw new Exception(string.Format("Invalid mesh type 0x{0:X2}"' Type));              }
Magic Number,SceneNavi.HeaderCommands,MeshHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\MeshHeader.cs,MeshHeader,The following statement contains a magic number: switch (Type)              {                  case 0x00:                      {                          for (int i = 0; i < Count; i++)                          {                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8)))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8) + 4))));                          }                          break;                      }                  case 0x01:                      {                          for (int i = 0; i < Count; i++)                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 4)))));                          break;                      }                  case 0x02:                      {                          for (int i = 0; i < Count; i++)                          {                              short s1 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16))));                              short s2 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 2)));                              short s3 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 4)));                              short s4 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 6)));                                MaxClipBounds.Add(new Vector3d(s1' 0.0' s2));                              MinClipBounds.Add(new Vector3d(s3' 0.0' s4));                                opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 8))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 12))));                          }                          break;                      }                    default: throw new Exception(string.Format("Invalid mesh type 0x{0:X2}"' Type));              }
Magic Number,SceneNavi.HeaderCommands,MeshHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\MeshHeader.cs,MeshHeader,The following statement contains a magic number: switch (Type)              {                  case 0x00:                      {                          for (int i = 0; i < Count; i++)                          {                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8)))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8) + 4))));                          }                          break;                      }                  case 0x01:                      {                          for (int i = 0; i < Count; i++)                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 4)))));                          break;                      }                  case 0x02:                      {                          for (int i = 0; i < Count; i++)                          {                              short s1 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16))));                              short s2 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 2)));                              short s3 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 4)));                              short s4 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 6)));                                MaxClipBounds.Add(new Vector3d(s1' 0.0' s2));                              MinClipBounds.Add(new Vector3d(s3' 0.0' s4));                                opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 8))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 12))));                          }                          break;                      }                    default: throw new Exception(string.Format("Invalid mesh type 0x{0:X2}"' Type));              }
Magic Number,SceneNavi.HeaderCommands,MeshHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\MeshHeader.cs,MeshHeader,The following statement contains a magic number: switch (Type)              {                  case 0x00:                      {                          for (int i = 0; i < Count; i++)                          {                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8)))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8) + 4))));                          }                          break;                      }                  case 0x01:                      {                          for (int i = 0; i < Count; i++)                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 4)))));                          break;                      }                  case 0x02:                      {                          for (int i = 0; i < Count; i++)                          {                              short s1 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16))));                              short s2 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 2)));                              short s3 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 4)));                              short s4 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 6)));                                MaxClipBounds.Add(new Vector3d(s1' 0.0' s2));                              MinClipBounds.Add(new Vector3d(s3' 0.0' s4));                                opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 8))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 12))));                          }                          break;                      }                    default: throw new Exception(string.Format("Invalid mesh type 0x{0:X2}"' Type));              }
Magic Number,SceneNavi.HeaderCommands,MeshHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\MeshHeader.cs,MeshHeader,The following statement contains a magic number: switch (Type)              {                  case 0x00:                      {                          for (int i = 0; i < Count; i++)                          {                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8)))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8) + 4))));                          }                          break;                      }                  case 0x01:                      {                          for (int i = 0; i < Count; i++)                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 4)))));                          break;                      }                  case 0x02:                      {                          for (int i = 0; i < Count; i++)                          {                              short s1 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16))));                              short s2 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 2)));                              short s3 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 4)));                              short s4 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 6)));                                MaxClipBounds.Add(new Vector3d(s1' 0.0' s2));                              MinClipBounds.Add(new Vector3d(s3' 0.0' s4));                                opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 8))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 12))));                          }                          break;                      }                    default: throw new Exception(string.Format("Invalid mesh type 0x{0:X2}"' Type));              }
Magic Number,SceneNavi.HeaderCommands,MeshHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\MeshHeader.cs,MeshHeader,The following statement contains a magic number: switch (Type)              {                  case 0x00:                      {                          for (int i = 0; i < Count; i++)                          {                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8)))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8) + 4))));                          }                          break;                      }                  case 0x01:                      {                          for (int i = 0; i < Count; i++)                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 4)))));                          break;                      }                  case 0x02:                      {                          for (int i = 0; i < Count; i++)                          {                              short s1 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16))));                              short s2 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 2)));                              short s3 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 4)));                              short s4 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 6)));                                MaxClipBounds.Add(new Vector3d(s1' 0.0' s2));                              MinClipBounds.Add(new Vector3d(s3' 0.0' s4));                                opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 8))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 12))));                          }                          break;                      }                    default: throw new Exception(string.Format("Invalid mesh type 0x{0:X2}"' Type));              }
Magic Number,SceneNavi.HeaderCommands,MeshHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\MeshHeader.cs,MeshHeader,The following statement contains a magic number: switch (Type)              {                  case 0x00:                      {                          for (int i = 0; i < Count; i++)                          {                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8)))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8) + 4))));                          }                          break;                      }                  case 0x01:                      {                          for (int i = 0; i < Count; i++)                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 4)))));                          break;                      }                  case 0x02:                      {                          for (int i = 0; i < Count; i++)                          {                              short s1 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16))));                              short s2 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 2)));                              short s3 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 4)));                              short s4 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 6)));                                MaxClipBounds.Add(new Vector3d(s1' 0.0' s2));                              MinClipBounds.Add(new Vector3d(s3' 0.0' s4));                                opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 8))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 12))));                          }                          break;                      }                    default: throw new Exception(string.Format("Invalid mesh type 0x{0:X2}"' Type));              }
Magic Number,SceneNavi.HeaderCommands,MeshHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\MeshHeader.cs,MeshHeader,The following statement contains a magic number: switch (Type)              {                  case 0x00:                      {                          for (int i = 0; i < Count; i++)                          {                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8)))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8) + 4))));                          }                          break;                      }                  case 0x01:                      {                          for (int i = 0; i < Count; i++)                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 4)))));                          break;                      }                  case 0x02:                      {                          for (int i = 0; i < Count; i++)                          {                              short s1 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16))));                              short s2 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 2)));                              short s3 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 4)));                              short s4 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 6)));                                MaxClipBounds.Add(new Vector3d(s1' 0.0' s2));                              MinClipBounds.Add(new Vector3d(s3' 0.0' s4));                                opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 8))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 12))));                          }                          break;                      }                    default: throw new Exception(string.Format("Invalid mesh type 0x{0:X2}"' Type));              }
Magic Number,SceneNavi.HeaderCommands,MeshHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\MeshHeader.cs,MeshHeader,The following statement contains a magic number: switch (Type)              {                  case 0x00:                      {                          for (int i = 0; i < Count; i++)                          {                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8)))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8) + 4))));                          }                          break;                      }                  case 0x01:                      {                          for (int i = 0; i < Count; i++)                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 4)))));                          break;                      }                  case 0x02:                      {                          for (int i = 0; i < Count; i++)                          {                              short s1 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16))));                              short s2 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 2)));                              short s3 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 4)));                              short s4 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 6)));                                MaxClipBounds.Add(new Vector3d(s1' 0.0' s2));                              MinClipBounds.Add(new Vector3d(s3' 0.0' s4));                                opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 8))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 12))));                          }                          break;                      }                    default: throw new Exception(string.Format("Invalid mesh type 0x{0:X2}"' Type));              }
Magic Number,SceneNavi.HeaderCommands,MeshHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\MeshHeader.cs,MeshHeader,The following statement contains a magic number: switch (Type)              {                  case 0x00:                      {                          for (int i = 0; i < Count; i++)                          {                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8)))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8) + 4))));                          }                          break;                      }                  case 0x01:                      {                          for (int i = 0; i < Count; i++)                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 4)))));                          break;                      }                  case 0x02:                      {                          for (int i = 0; i < Count; i++)                          {                              short s1 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16))));                              short s2 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 2)));                              short s3 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 4)));                              short s4 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 6)));                                MaxClipBounds.Add(new Vector3d(s1' 0.0' s2));                              MinClipBounds.Add(new Vector3d(s3' 0.0' s4));                                opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 8))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 12))));                          }                          break;                      }                    default: throw new Exception(string.Format("Invalid mesh type 0x{0:X2}"' Type));              }
Magic Number,SceneNavi.HeaderCommands,MeshHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\MeshHeader.cs,MeshHeader,The following statement contains a magic number: switch (Type)              {                  case 0x00:                      {                          for (int i = 0; i < Count; i++)                          {                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8)))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8) + 4))));                          }                          break;                      }                  case 0x01:                      {                          for (int i = 0; i < Count; i++)                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 4)))));                          break;                      }                  case 0x02:                      {                          for (int i = 0; i < Count; i++)                          {                              short s1 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16))));                              short s2 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 2)));                              short s3 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 4)));                              short s4 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 6)));                                MaxClipBounds.Add(new Vector3d(s1' 0.0' s2));                              MinClipBounds.Add(new Vector3d(s3' 0.0' s4));                                opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 8))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 12))));                          }                          break;                      }                    default: throw new Exception(string.Format("Invalid mesh type 0x{0:X2}"' Type));              }
Magic Number,SceneNavi.HeaderCommands,MeshHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\MeshHeader.cs,MeshHeader,The following statement contains a magic number: switch (Type)              {                  case 0x00:                      {                          for (int i = 0; i < Count; i++)                          {                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8)))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8) + 4))));                          }                          break;                      }                  case 0x01:                      {                          for (int i = 0; i < Count; i++)                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 4)))));                          break;                      }                  case 0x02:                      {                          for (int i = 0; i < Count; i++)                          {                              short s1 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16))));                              short s2 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 2)));                              short s3 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 4)));                              short s4 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 6)));                                MaxClipBounds.Add(new Vector3d(s1' 0.0' s2));                              MinClipBounds.Add(new Vector3d(s3' 0.0' s4));                                opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 8))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 12))));                          }                          break;                      }                    default: throw new Exception(string.Format("Invalid mesh type 0x{0:X2}"' Type));              }
Magic Number,SceneNavi.HeaderCommands,MeshHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\MeshHeader.cs,MeshHeader,The following statement contains a magic number: switch (Type)              {                  case 0x00:                      {                          for (int i = 0; i < Count; i++)                          {                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8)))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8) + 4))));                          }                          break;                      }                  case 0x01:                      {                          for (int i = 0; i < Count; i++)                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 4)))));                          break;                      }                  case 0x02:                      {                          for (int i = 0; i < Count; i++)                          {                              short s1 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16))));                              short s2 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 2)));                              short s3 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 4)));                              short s4 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 6)));                                MaxClipBounds.Add(new Vector3d(s1' 0.0' s2));                              MinClipBounds.Add(new Vector3d(s3' 0.0' s4));                                opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 8))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 12))));                          }                          break;                      }                    default: throw new Exception(string.Format("Invalid mesh type 0x{0:X2}"' Type));              }
Magic Number,SceneNavi.HeaderCommands,MeshHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\MeshHeader.cs,MeshHeader,The following statement contains a magic number: switch (Type)              {                  case 0x00:                      {                          for (int i = 0; i < Count; i++)                          {                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8)))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8) + 4))));                          }                          break;                      }                  case 0x01:                      {                          for (int i = 0; i < Count; i++)                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 4)))));                          break;                      }                  case 0x02:                      {                          for (int i = 0; i < Count; i++)                          {                              short s1 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16))));                              short s2 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 2)));                              short s3 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 4)));                              short s4 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 6)));                                MaxClipBounds.Add(new Vector3d(s1' 0.0' s2));                              MinClipBounds.Add(new Vector3d(s3' 0.0' s4));                                opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 8))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 12))));                          }                          break;                      }                    default: throw new Exception(string.Format("Invalid mesh type 0x{0:X2}"' Type));              }
Magic Number,SceneNavi.HeaderCommands,MeshHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\MeshHeader.cs,MeshHeader,The following statement contains a magic number: switch (Type)              {                  case 0x00:                      {                          for (int i = 0; i < Count; i++)                          {                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8)))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8) + 4))));                          }                          break;                      }                  case 0x01:                      {                          for (int i = 0; i < Count; i++)                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 4)))));                          break;                      }                  case 0x02:                      {                          for (int i = 0; i < Count; i++)                          {                              short s1 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16))));                              short s2 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 2)));                              short s3 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 4)));                              short s4 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 6)));                                MaxClipBounds.Add(new Vector3d(s1' 0.0' s2));                              MinClipBounds.Add(new Vector3d(s3' 0.0' s4));                                opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 8))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 12))));                          }                          break;                      }                    default: throw new Exception(string.Format("Invalid mesh type 0x{0:X2}"' Type));              }
Magic Number,SceneNavi.HeaderCommands,MeshHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\MeshHeader.cs,MeshHeader,The following statement contains a magic number: switch (Type)              {                  case 0x00:                      {                          for (int i = 0; i < Count; i++)                          {                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8)))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8) + 4))));                          }                          break;                      }                  case 0x01:                      {                          for (int i = 0; i < Count; i++)                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 4)))));                          break;                      }                  case 0x02:                      {                          for (int i = 0; i < Count; i++)                          {                              short s1 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16))));                              short s2 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 2)));                              short s3 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 4)));                              short s4 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 6)));                                MaxClipBounds.Add(new Vector3d(s1' 0.0' s2));                              MinClipBounds.Add(new Vector3d(s3' 0.0' s4));                                opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 8))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 12))));                          }                          break;                      }                    default: throw new Exception(string.Format("Invalid mesh type 0x{0:X2}"' Type));              }
Magic Number,SceneNavi.HeaderCommands,MeshHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\MeshHeader.cs,MeshHeader,The following statement contains a magic number: switch (Type)              {                  case 0x00:                      {                          for (int i = 0; i < Count; i++)                          {                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8)))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8) + 4))));                          }                          break;                      }                  case 0x01:                      {                          for (int i = 0; i < Count; i++)                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 4)))));                          break;                      }                  case 0x02:                      {                          for (int i = 0; i < Count; i++)                          {                              short s1 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16))));                              short s2 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 2)));                              short s3 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 4)));                              short s4 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 6)));                                MaxClipBounds.Add(new Vector3d(s1' 0.0' s2));                              MinClipBounds.Add(new Vector3d(s3' 0.0' s4));                                opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 8))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 12))));                          }                          break;                      }                    default: throw new Exception(string.Format("Invalid mesh type 0x{0:X2}"' Type));              }
Magic Number,SceneNavi.HeaderCommands,MeshHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\MeshHeader.cs,MeshHeader,The following statement contains a magic number: switch (Type)              {                  case 0x00:                      {                          for (int i = 0; i < Count; i++)                          {                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8)))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8) + 4))));                          }                          break;                      }                  case 0x01:                      {                          for (int i = 0; i < Count; i++)                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 4)))));                          break;                      }                  case 0x02:                      {                          for (int i = 0; i < Count; i++)                          {                              short s1 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16))));                              short s2 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 2)));                              short s3 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 4)));                              short s4 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 6)));                                MaxClipBounds.Add(new Vector3d(s1' 0.0' s2));                              MinClipBounds.Add(new Vector3d(s3' 0.0' s4));                                opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 8))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 12))));                          }                          break;                      }                    default: throw new Exception(string.Format("Invalid mesh type 0x{0:X2}"' Type));              }
Magic Number,SceneNavi.HeaderCommands,MeshHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\MeshHeader.cs,MeshHeader,The following statement contains a magic number: switch (Type)              {                  case 0x00:                      {                          for (int i = 0; i < Count; i++)                          {                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8)))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8) + 4))));                          }                          break;                      }                  case 0x01:                      {                          for (int i = 0; i < Count; i++)                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 4)))));                          break;                      }                  case 0x02:                      {                          for (int i = 0; i < Count; i++)                          {                              short s1 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16))));                              short s2 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 2)));                              short s3 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 4)));                              short s4 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 6)));                                MaxClipBounds.Add(new Vector3d(s1' 0.0' s2));                              MinClipBounds.Add(new Vector3d(s3' 0.0' s4));                                opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 8))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 12))));                          }                          break;                      }                    default: throw new Exception(string.Format("Invalid mesh type 0x{0:X2}"' Type));              }
Magic Number,SceneNavi.HeaderCommands,MeshHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\MeshHeader.cs,MeshHeader,The following statement contains a magic number: switch (Type)              {                  case 0x00:                      {                          for (int i = 0; i < Count; i++)                          {                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8)))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 8) + 4))));                          }                          break;                      }                  case 0x01:                      {                          for (int i = 0; i < Count; i++)                              opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 4)))));                          break;                      }                  case 0x02:                      {                          for (int i = 0; i < Count; i++)                          {                              short s1 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16))));                              short s2 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 2)));                              short s3 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 4)));                              short s4 = Endian.SwapInt16(BitConverter.ToInt16(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 6)));                                MaxClipBounds.Add(new Vector3d(s1' 0.0' s2));                              MinClipBounds.Add(new Vector3d(s3' 0.0' s4));                                opaqueDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 8))));                              transparentDLs.Add(Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)(DLTablePointer >> 24)])' (int)((DLTablePointer & 0xFFFFFF) + (i * 16) + 12))));                          }                          break;                      }                    default: throw new Exception(string.Format("Invalid mesh type 0x{0:X2}"' Type));              }
Magic Number,SceneNavi.HeaderCommands,MeshHeader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\MeshHeader.cs,CreateDisplayLists,The following statement contains a magic number: GL.Vertex3(st.Vertices[2]);
Magic Number,SceneNavi.HeaderCommands,Objects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Objects.cs,Objects,The following statement contains a magic number: ObjectList.Add(new Entry(ROM' (uint)(GetAddressGeneric() + i * 2)));
Magic Number,SceneNavi.HeaderCommands,Rooms,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Rooms.cs,Rooms,The following statement contains a magic number: byte seg = (byte)(GetAddressGeneric() >> 24);
Magic Number,SceneNavi.HeaderCommands,Rooms,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Rooms.cs,Rooms,The following statement contains a magic number: RoomInfoClass roomadr = new RoomInfoClass(ROM' basecmd.Parent' i'                      Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[seg])' (int)((GetAddressGeneric() & 0xFFFFFF) + i * 8)))'                      Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[seg])' (int)((GetAddressGeneric() & 0xFFFFFF) + i * 8) + 4)));
Magic Number,SceneNavi.HeaderCommands,Rooms,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Rooms.cs,Rooms,The following statement contains a magic number: RoomInfoClass roomadr = new RoomInfoClass(ROM' basecmd.Parent' i'                      Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[seg])' (int)((GetAddressGeneric() & 0xFFFFFF) + i * 8)))'                      Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[seg])' (int)((GetAddressGeneric() & 0xFFFFFF) + i * 8) + 4)));
Magic Number,SceneNavi.HeaderCommands,Rooms,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Rooms.cs,Rooms,The following statement contains a magic number: RoomInfoClass roomadr = new RoomInfoClass(ROM' basecmd.Parent' i'                      Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[seg])' (int)((GetAddressGeneric() & 0xFFFFFF) + i * 8)))'                      Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[seg])' (int)((GetAddressGeneric() & 0xFFFFFF) + i * 8) + 4)));
Magic Number,SceneNavi.HeaderCommands,RoomInfoClass,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Rooms.cs,Load,The following statement contains a magic number: uint aofs = Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)0x03])' 4));
Magic Number,SceneNavi.HeaderCommands,RoomInfoClass,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Rooms.cs,Load,The following statement contains a magic number: (rofs & 0x00FFFFFF) > ((byte[])ROM.SegmentMapping[(byte)0x03]).Length || (rofs >> 24) != 0x03
Magic Number,SceneNavi.HeaderCommands,RoomInfoClass,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\HeaderCommands\Rooms.cs,Load,The following statement contains a magic number: aofs += 4;
Magic Number,SceneNavi.OpenGLHelpers,TextPrinter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\TextPrinter.cs,Print,The following statement contains a magic number: cached.LastUsedAgo += 0.01f;
Magic Number,SceneNavi.OpenGLHelpers,TextPrinter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\TextPrinter.cs,Begin,The following statement contains a magic number: Initialization.CreateViewportAndProjection(Initialization.ProjectionTypes.Orthographic' glControl.ClientRectangle' 0.0f' 300.0f);
Magic Number,SceneNavi.OpenGLHelpers,CachedString,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\TextPrinter.cs,CachedString,The following statement contains a magic number: indices = new ushort[]                  {                      0' 1' 2' 3                  };
Magic Number,SceneNavi.OpenGLHelpers,CachedString,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\TextPrinter.cs,CachedString,The following statement contains a magic number: indices = new ushort[]                  {                      0' 1' 2' 3                  };
Magic Number,SceneNavi.OpenGLHelpers,CachedString,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\TextPrinter.cs,ParseDrawString,The following statement contains a magic number: PointF position = new PointF(padding / 2.0f' padding / 2.0f);
Magic Number,SceneNavi.OpenGLHelpers,CachedString,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\TextPrinter.cs,ParseDrawString,The following statement contains a magic number: PointF position = new PointF(padding / 2.0f' padding / 2.0f);
Magic Number,SceneNavi.OpenGLHelpers,CachedString,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\TextPrinter.cs,ParseDrawString,The following statement contains a magic number: position.X = (padding / 2.0f);
Magic Number,SceneNavi.OpenGLHelpers,CachedString,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\TextPrinter.cs,Print,The following statement contains a magic number: GL.TexCoordPointer(2' TexCoordPointerType.Double' 0' ref texCoordData[0]);
Magic Number,SceneNavi.OpenGLHelpers,CachedString,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\TextPrinter.cs,Print,The following statement contains a magic number: GL.ColorPointer(4' ColorPointerType.Double' 0' ref colorData[0]);
Magic Number,SceneNavi.OpenGLHelpers,CachedString,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\TextPrinter.cs,Print,The following statement contains a magic number: GL.VertexPointer(2' VertexPointerType.Double' 0' ref vertexData[0]);
Magic Number,SceneNavi.OpenGLHelpers,CachedString,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\TextPrinter.cs,Print,The following statement contains a magic number: GL.DrawElements(PrimitiveType.Quads' 4' DrawElementsType.UnsignedShort' ref indices[0]);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,MiscDrawingHelpers,The following statement contains a magic number: byte[] texbuf = new byte[16];
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,MiscDrawingHelpers,The following statement contains a magic number: GL.TexImage2D(TextureTarget.Texture2D' 0' PixelInternalFormat.Rgba' 2' 2' 0' PixelFormat.Rgba' PixelType.UnsignedByte' texbuf);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,MiscDrawingHelpers,The following statement contains a magic number: GL.TexImage2D(TextureTarget.Texture2D' 0' PixelInternalFormat.Rgba' 2' 2' 0' PixelFormat.Rgba' PixelType.UnsignedByte' texbuf);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,RenderCube,The following statement contains a magic number: GL.Color3(0.5' 0.5' 0.5);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,RenderCube,The following statement contains a magic number: GL.Color3(0.5' 0.5' 0.5);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,RenderCube,The following statement contains a magic number: GL.Color3(0.5' 0.5' 0.5);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,RenderNotchCircle,The following statement contains a magic number: double theta = (double)(2 * Math.PI / (double)segments);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,RenderNotchCircle,The following statement contains a magic number: GL.Vertex2(x' (y + 1.5));
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,RenderNotchCircle,The following statement contains a magic number: ii == segments / 4
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,RenderSphere,The following statement contains a magic number: n < 4 || r <= 0
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,RenderSphere,The following statement contains a magic number: const double TWOPI = (Math.PI * 2);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,RenderSphere,The following statement contains a magic number: const double PID2 = (Math.PI / 2);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,RenderSphere,The following statement contains a magic number: j < n / 2
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: Vector3d[] v = new Vector3d[8];
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: v[2] = new Vector3d(mvMax.X' mvMax.Y' mvMin.Z);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: v[3] = new Vector3d(mvMin.X' mvMax.Y' mvMin.Z);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: v[4] = new Vector3d(mvMin.X' mvMin.Y' mvMax.Z);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: v[5] = new Vector3d(mvMax.X' mvMin.Y' mvMax.Z);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: v[6] = new Vector3d(mvMax.X' mvMax.Y' mvMax.Z);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: v[7] = new Vector3d(mvMin.X' mvMax.Y' mvMax.Z);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: GL.Vertex3(v[2]);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: GL.Vertex3(v[2]);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: GL.Vertex3(v[3]);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: GL.Vertex3(v[3]);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: GL.Vertex3(v[4]);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: GL.Vertex3(v[5]);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: GL.Vertex3(v[5]);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: GL.Vertex3(v[6]);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: GL.Vertex3(v[6]);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: GL.Vertex3(v[7]);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: GL.Vertex3(v[7]);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: GL.Vertex3(v[4]);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: GL.Vertex3(v[4]);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: GL.Vertex3(v[5]);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: GL.Vertex3(v[2]);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: GL.Vertex3(v[6]);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: GL.Vertex3(v[3]);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: GL.Vertex3(v[7]);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: Vector3d[] Verts = new Vector3d[8];
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: Verts[2] = Min + new Vector3d(Distance.X' Distance.Y' 0);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: Verts[3] = Min + new Vector3d(0' Distance.Y' 0);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: Verts[4] = Min + new Vector3d(0' 0' Distance.Z);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: Verts[5] = Min + new Vector3d(Distance.X' 0' Distance.Z);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: Verts[6] = Min + new Vector3d(Distance.X' Distance.Y' Distance.Z);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: Verts[7] = Min + new Vector3d(0' Distance.Y' Distance.Z);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: i < 4
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: GL.Vertex3(Verts[i + 4]);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: i < 4
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: GL.Vertex3(Verts[i + 4]);
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: i < 4
Magic Number,SceneNavi.OpenGLHelpers,MiscDrawingHelpers,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\MiscDrawingHelpers.cs,DrawBox,The following statement contains a magic number: it < 2
Magic Number,SceneNavi.OpenGLHelpers,ScreenWorldConversion,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\ScreenWorldConversion.cs,WorldToScreen,The following statement contains a magic number: int[] viewport = new int[4];
Magic Number,SceneNavi.OpenGLHelpers,ScreenWorldConversion,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\ScreenWorldConversion.cs,WorldToScreen,The following statement contains a magic number: point.Y = (float)viewport[3] - point.Y;
Magic Number,SceneNavi.OpenGLHelpers,ScreenWorldConversion,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\ScreenWorldConversion.cs,ScreenToWorld,The following statement contains a magic number: int[] viewport = new int[4];
Magic Number,SceneNavi.OpenGLHelpers,ScreenWorldConversion,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\ScreenWorldConversion.cs,ScreenToWorld,The following statement contains a magic number: win.Y = (viewport[3] - pos.Y);
Magic Number,SceneNavi.OpenGLHelpers,ScreenWorldConversion,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\ScreenWorldConversion.cs,ScreenToWorld,The following statement contains a magic number: GL.ReadPixels((int)pos.X' viewport[3] - (int)pos.Y' 1' 1' PixelFormat.DepthComponent' PixelType.Float' boxedZ);
Magic Number,SceneNavi.OpenGLHelpers,ScreenWorldConversion,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\ScreenWorldConversion.cs,UnProject,The following statement contains a magic number: pos.X = ((screen.X - (double)viewport[0]) / (double)viewport[2]) * 2.0 - 1.0;
Magic Number,SceneNavi.OpenGLHelpers,ScreenWorldConversion,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\ScreenWorldConversion.cs,UnProject,The following statement contains a magic number: pos.X = ((screen.X - (double)viewport[0]) / (double)viewport[2]) * 2.0 - 1.0;
Magic Number,SceneNavi.OpenGLHelpers,ScreenWorldConversion,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\ScreenWorldConversion.cs,UnProject,The following statement contains a magic number: pos.Y = ((screen.Y - (double)viewport[1]) / (double)viewport[3]) * 2.0 - 1.0;
Magic Number,SceneNavi.OpenGLHelpers,ScreenWorldConversion,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\ScreenWorldConversion.cs,UnProject,The following statement contains a magic number: pos.Y = ((screen.Y - (double)viewport[1]) / (double)viewport[3]) * 2.0 - 1.0;
Magic Number,SceneNavi.OpenGLHelpers,ScreenWorldConversion,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\ScreenWorldConversion.cs,UnProject,The following statement contains a magic number: pos.Z = (2.0 * screen.Z) - 1.0;
Magic Number,SceneNavi.OpenGLHelpers,ScreenWorldConversion,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\ScreenWorldConversion.cs,Project,The following statement contains a magic number: _in.X = _in.X * 0.5 + 0.5;
Magic Number,SceneNavi.OpenGLHelpers,ScreenWorldConversion,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\ScreenWorldConversion.cs,Project,The following statement contains a magic number: _in.X = _in.X * 0.5 + 0.5;
Magic Number,SceneNavi.OpenGLHelpers,ScreenWorldConversion,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\ScreenWorldConversion.cs,Project,The following statement contains a magic number: _in.Y = _in.Y * 0.5 + 0.5;
Magic Number,SceneNavi.OpenGLHelpers,ScreenWorldConversion,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\ScreenWorldConversion.cs,Project,The following statement contains a magic number: _in.Y = _in.Y * 0.5 + 0.5;
Magic Number,SceneNavi.OpenGLHelpers,ScreenWorldConversion,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\ScreenWorldConversion.cs,Project,The following statement contains a magic number: _in.Z = _in.Z * 0.5 + 0.5;
Magic Number,SceneNavi.OpenGLHelpers,ScreenWorldConversion,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\ScreenWorldConversion.cs,Project,The following statement contains a magic number: _in.Z = _in.Z * 0.5 + 0.5;
Magic Number,SceneNavi.OpenGLHelpers,ScreenWorldConversion,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\ScreenWorldConversion.cs,Project,The following statement contains a magic number: _in.X = _in.X * viewport[2] + viewport[0];
Magic Number,SceneNavi.OpenGLHelpers,ScreenWorldConversion,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\ScreenWorldConversion.cs,Project,The following statement contains a magic number: _in.Y = _in.Y * viewport[3] + viewport[1];
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: GL.LineWidth(4.0f);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: GL.DepthRange(0.0' 0.99999);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: double radius = 12.0;
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: GL.LineWidth(4.0f);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: GL.Rotate(90.0' 1.0' 0.0' 0.0);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: MiscDrawingHelpers.RenderNotchCircle(radius / 2.0' 48);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: MiscDrawingHelpers.RenderNotchCircle(radius / 2.0' 48);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: GL.LineWidth(4.0f);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: GL.DepthRange(0.0' 0.99999);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: GL.LineWidth(4.0f);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: MiscDrawingHelpers.RenderSphere(Vector3d.Zero' 3.0' 12);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: MiscDrawingHelpers.RenderSphere(Vector3d.Zero' 3.0' 12);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: GL.Vertex3(1.0' 2.0' -1.0);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: GL.Vertex3(-1.0' 2.0' -1.0);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: GL.Vertex3(-1.0' 2.0' 1.0);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: GL.Vertex3(1.0' 2.0' 1.0);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: GL.Vertex3(-1.0' 2.0' 1.0);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: GL.Vertex3(-1.0' 2.0' -1.0);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: GL.Vertex3(1.0' 2.0' -1.0);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: GL.Vertex3(1.0' 2.0' 1.0);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: GL.Vertex3(1.0' 2.0' 1.0);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: GL.Vertex3(-1.0' 2.0' 1.0);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: GL.Vertex3(-1.0' 2.0' -1.0);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: GL.Vertex3(1.0' 2.0' -1.0);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: MiscDrawingHelpers.RenderCube(new Vector3d(3.0' 2.0' 2.0)' false);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: MiscDrawingHelpers.RenderCube(new Vector3d(3.0' 2.0' 2.0)' false);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: MiscDrawingHelpers.RenderCube(new Vector3d(3.0' 2.0' 2.0)' false);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: MiscDrawingHelpers.RenderCube(new Vector3d(3.0' 2.0' 2.0)' true);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: MiscDrawingHelpers.RenderCube(new Vector3d(3.0' 2.0' 2.0)' true);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: MiscDrawingHelpers.RenderCube(new Vector3d(3.0' 2.0' 2.0)' true);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: MiscDrawingHelpers.RenderCube(new Vector3d(2.5' 4.5' 0.5)' new Vector3d(0.0' 4.0' 0.0)' false);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: MiscDrawingHelpers.RenderCube(new Vector3d(2.5' 4.5' 0.5)' new Vector3d(0.0' 4.0' 0.0)' false);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: MiscDrawingHelpers.RenderCube(new Vector3d(2.5' 4.5' 0.5)' new Vector3d(0.0' 4.0' 0.0)' false);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: MiscDrawingHelpers.RenderCube(new Vector3d(2.5' 4.5' 0.5)' new Vector3d(0.0' 4.0' 0.0)' false);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: MiscDrawingHelpers.RenderCube(new Vector3d(2.5' 4.5' 0.5)' new Vector3d(0.0' 4.0' 0.0)' true);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: MiscDrawingHelpers.RenderCube(new Vector3d(2.5' 4.5' 0.5)' new Vector3d(0.0' 4.0' 0.0)' true);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: MiscDrawingHelpers.RenderCube(new Vector3d(2.5' 4.5' 0.5)' new Vector3d(0.0' 4.0' 0.0)' true);
Magic Number,SceneNavi.OpenGLHelpers,StockObjects,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\StockObjects.cs,StockObjects,The following statement contains a magic number: MiscDrawingHelpers.RenderCube(new Vector3d(2.5' 4.5' 0.5)' new Vector3d(0.0' 4.0' 0.0)' true);
Magic Number,SceneNavi.OpenGLHelpers,Camera,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\Camera.cs,Reset,The following statement contains a magic number: Pos = new Vector3d(0.0' 0.0' -15.0);
Magic Number,SceneNavi.OpenGLHelpers,Camera,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\Camera.cs,MouseMove,The following statement contains a magic number: Rot.Y += (NewMouseCoord.X - MouseCoord.X) * 0.225;
Magic Number,SceneNavi.OpenGLHelpers,Camera,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\Camera.cs,MouseMove,The following statement contains a magic number: Rot.Y > 360.0
Magic Number,SceneNavi.OpenGLHelpers,Camera,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\Camera.cs,MouseMove,The following statement contains a magic number: Rot.X = 90.0;
Magic Number,SceneNavi.OpenGLHelpers,Camera,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\Camera.cs,MouseMove,The following statement contains a magic number: Rot.X >= 90.0
Magic Number,SceneNavi.OpenGLHelpers,Camera,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\Camera.cs,KeyUpdate,The following statement contains a magic number: double RotYRad = (Rot.Y / 180.0 * Math.PI);
Magic Number,SceneNavi.OpenGLHelpers,Camera,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\Camera.cs,KeyUpdate,The following statement contains a magic number: double RotXRad = (Rot.X / 180.0 * Math.PI);
Magic Number,SceneNavi.OpenGLHelpers,Camera,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\Camera.cs,KeyUpdate,The following statement contains a magic number: double Modifier = 2.0;
Magic Number,SceneNavi.OpenGLHelpers,Camera,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\Camera.cs,KeyUpdate,The following statement contains a magic number: Modifier = 10.0;
Magic Number,SceneNavi.OpenGLHelpers,Camera,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\Camera.cs,KeyUpdate,The following statement contains a magic number: Pos.Y += Math.Sin(RotXRad) * CameraCoeff * 2.0 * Modifier;
Magic Number,SceneNavi.OpenGLHelpers,Camera,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\Camera.cs,KeyUpdate,The following statement contains a magic number: Rot.X >= 90.0 || Rot.X <= -90.0
Magic Number,SceneNavi.OpenGLHelpers,Camera,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\Camera.cs,KeyUpdate,The following statement contains a magic number: Rot.X >= 90.0 || Rot.X <= -90.0
Magic Number,SceneNavi.OpenGLHelpers,Camera,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\Camera.cs,KeyUpdate,The following statement contains a magic number: Pos.Y -= Math.Sin(RotXRad) * CameraCoeff * 2.0 * Modifier;
Magic Number,SceneNavi.OpenGLHelpers,Camera,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\Camera.cs,KeyUpdate,The following statement contains a magic number: Rot.X >= 90.0 || Rot.X <= -90.0
Magic Number,SceneNavi.OpenGLHelpers,Camera,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\Camera.cs,KeyUpdate,The following statement contains a magic number: Rot.X >= 90.0 || Rot.X <= -90.0
Magic Number,SceneNavi.OpenGLHelpers,Camera,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\Camera.cs,KeyUpdate,The following statement contains a magic number: Pos.X += Math.Cos(RotYRad) * CameraCoeff * 2.0 * Modifier;
Magic Number,SceneNavi.OpenGLHelpers,Camera,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\Camera.cs,KeyUpdate,The following statement contains a magic number: Pos.Z += Math.Sin(RotYRad) * CameraCoeff * 2.0 * Modifier;
Magic Number,SceneNavi.OpenGLHelpers,Camera,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\Camera.cs,KeyUpdate,The following statement contains a magic number: Pos.X -= Math.Cos(RotYRad) * CameraCoeff * 2.0 * Modifier;
Magic Number,SceneNavi.OpenGLHelpers,Camera,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\Camera.cs,KeyUpdate,The following statement contains a magic number: Pos.Z -= Math.Sin(RotYRad) * CameraCoeff * 2.0 * Modifier;
Magic Number,SceneNavi.OpenGLHelpers,Initialization,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\Initialization.cs,SetDefaults,The following statement contains a magic number: GL.ClearDepth(5.0);
Magic Number,SceneNavi.ROMHandler,SceneTableEntryMajora,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryMajora.cs,SceneTableEntryMajora,The following statement contains a magic number: sceneEndAddress = Endian.SwapUInt32(BitConverter.ToUInt32(IsOffsetRelative ? rom.CodeData : rom.Data' ofs + 4));
Magic Number,SceneNavi.ROMHandler,SceneTableEntryMajora,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryMajora.cs,SceneTableEntryMajora,The following statement contains a magic number: Unknown1 = (IsOffsetRelative ? rom.CodeData : rom.Data)[ofs + 8];
Magic Number,SceneNavi.ROMHandler,SceneTableEntryMajora,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryMajora.cs,SceneTableEntryMajora,The following statement contains a magic number: Unknown2 = (IsOffsetRelative ? rom.CodeData : rom.Data)[ofs + 9];
Magic Number,SceneNavi.ROMHandler,SceneTableEntryMajora,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryMajora.cs,SceneTableEntryMajora,The following statement contains a magic number: Unknown3 = (IsOffsetRelative ? rom.CodeData : rom.Data)[ofs + 10];
Magic Number,SceneNavi.ROMHandler,SceneTableEntryMajora,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryMajora.cs,SceneTableEntryMajora,The following statement contains a magic number: Unknown4 = (IsOffsetRelative ? rom.CodeData : rom.Data)[ofs + 11];
Magic Number,SceneNavi.ROMHandler,SceneTableEntryMajora,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryMajora.cs,SceneTableEntryMajora,The following statement contains a magic number: PresumedPadding = Endian.SwapUInt32(BitConverter.ToUInt32(IsOffsetRelative ? rom.CodeData : rom.Data' ofs + 12));
Magic Number,SceneNavi.ROMHandler,SceneTableEntryMajora,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryMajora.cs,SaveTableEntry,The following statement contains a magic number: Buffer.BlockCopy(tmpbuf' 0' (IsOffsetRelative ? ROM.CodeData : ROM.Data)' Offset + 4' tmpbuf.Length);
Magic Number,SceneNavi.ROMHandler,SceneTableEntryMajora,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryMajora.cs,SaveTableEntry,The following statement contains a magic number: (IsOffsetRelative ? ROM.CodeData : ROM.Data)[Offset + 8] = Unknown1;
Magic Number,SceneNavi.ROMHandler,SceneTableEntryMajora,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryMajora.cs,SaveTableEntry,The following statement contains a magic number: (IsOffsetRelative ? ROM.CodeData : ROM.Data)[Offset + 9] = Unknown2;
Magic Number,SceneNavi.ROMHandler,SceneTableEntryMajora,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryMajora.cs,SaveTableEntry,The following statement contains a magic number: (IsOffsetRelative ? ROM.CodeData : ROM.Data)[Offset + 10] = Unknown3;
Magic Number,SceneNavi.ROMHandler,SceneTableEntryMajora,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryMajora.cs,SaveTableEntry,The following statement contains a magic number: (IsOffsetRelative ? ROM.CodeData : ROM.Data)[Offset + 11] = Unknown4;
Magic Number,SceneNavi.ROMHandler,SceneTableEntryMajora,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryMajora.cs,SaveTableEntry,The following statement contains a magic number: Buffer.BlockCopy(tmpbuf' 0' (IsOffsetRelative ? ROM.CodeData : ROM.Data)' Offset + 12' tmpbuf.Length);
Magic Number,SceneNavi.ROMHandler,SceneTableEntryMajora,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryMajora.cs,ReadScene,The following statement contains a magic number: uint aofs = Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)0x02])' 4));
Magic Number,SceneNavi.ROMHandler,SceneTableEntryMajora,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryMajora.cs,ReadScene,The following statement contains a magic number: (rofs & 0x00FFFFFF) > ((byte[])ROM.SegmentMapping[(byte)0x02]).Length || (rofs >> 24) != 0x02
Magic Number,SceneNavi.ROMHandler,SceneTableEntryMajora,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryMajora.cs,ReadScene,The following statement contains a magic number: aofs += 4;
Magic Number,SceneNavi.ROMHandler,ActorTableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ActorTableEntry.cs,ActorTableEntry,The following statement contains a magic number: EndAddress = Endian.SwapUInt32(BitConverter.ToUInt32(IsOffsetRelative ? rom.CodeData : rom.Data' ofs + 4));
Magic Number,SceneNavi.ROMHandler,ActorTableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ActorTableEntry.cs,ActorTableEntry,The following statement contains a magic number: RAMStartAddress = Endian.SwapUInt32(BitConverter.ToUInt32(IsOffsetRelative ? rom.CodeData : rom.Data' ofs + 8));
Magic Number,SceneNavi.ROMHandler,ActorTableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ActorTableEntry.cs,ActorTableEntry,The following statement contains a magic number: RAMEndAddress = Endian.SwapUInt32(BitConverter.ToUInt32(IsOffsetRelative ? rom.CodeData : rom.Data' ofs + 12));
Magic Number,SceneNavi.ROMHandler,ActorTableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ActorTableEntry.cs,ActorTableEntry,The following statement contains a magic number: Unknown1 = Endian.SwapUInt32(BitConverter.ToUInt32(IsOffsetRelative ? rom.CodeData : rom.Data' ofs + 16));
Magic Number,SceneNavi.ROMHandler,ActorTableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ActorTableEntry.cs,ActorTableEntry,The following statement contains a magic number: ActorInfoRAMAddress = Endian.SwapUInt32(BitConverter.ToUInt32(IsOffsetRelative ? rom.CodeData : rom.Data' ofs + 20));
Magic Number,SceneNavi.ROMHandler,ActorTableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ActorTableEntry.cs,ActorTableEntry,The following statement contains a magic number: ActorNameRAMAddress = Endian.SwapUInt32(BitConverter.ToUInt32(IsOffsetRelative ? rom.CodeData : rom.Data' ofs + 24));
Magic Number,SceneNavi.ROMHandler,ActorTableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ActorTableEntry.cs,ActorTableEntry,The following statement contains a magic number: Unknown2 = Endian.SwapUInt32(BitConverter.ToUInt32(IsOffsetRelative ? rom.CodeData : rom.Data' ofs + 28));
Magic Number,SceneNavi.ROMHandler,ActorTableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ActorTableEntry.cs,ActorTableEntry,The following statement contains a magic number: IsValid =                  (ActorInfoRAMAddress >> 24 == 0x80) &&                  (((ActorNameRAMAddress >> 24 == 0x80) && (ActorNameRAMAddress - ROMHandler.CodeRAMAddress) < rom.CodeData.Length) || (ActorNameRAMAddress == 0));
Magic Number,SceneNavi.ROMHandler,ActorTableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ActorTableEntry.cs,ActorTableEntry,The following statement contains a magic number: IsValid =                  (ActorInfoRAMAddress >> 24 == 0x80) &&                  (((ActorNameRAMAddress >> 24 == 0x80) && (ActorNameRAMAddress - ROMHandler.CodeRAMAddress) < rom.CodeData.Length) || (ActorNameRAMAddress == 0));
Magic Number,SceneNavi.ROMHandler,ActorTableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ActorTableEntry.cs,ActorTableEntry,The following statement contains a magic number: IsComplete =                  (StartAddress > rom.Code.VStart && StartAddress < rom.Size) &&                  (EndAddress > StartAddress && EndAddress > rom.Code.VStart && EndAddress < rom.Size) &&                  (RAMStartAddress >> 24 == 0x80) &&                  (RAMEndAddress > RAMStartAddress && RAMEndAddress >> 24 == 0x80) &&                  (ActorInfoRAMAddress >> 24 == 0x80) &&                  (((ActorNameRAMAddress >> 24 == 0x80) && (ActorNameRAMAddress - ROMHandler.CodeRAMAddress) < rom.CodeData.Length) || (ActorNameRAMAddress == 0));
Magic Number,SceneNavi.ROMHandler,ActorTableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ActorTableEntry.cs,ActorTableEntry,The following statement contains a magic number: IsComplete =                  (StartAddress > rom.Code.VStart && StartAddress < rom.Size) &&                  (EndAddress > StartAddress && EndAddress > rom.Code.VStart && EndAddress < rom.Size) &&                  (RAMStartAddress >> 24 == 0x80) &&                  (RAMEndAddress > RAMStartAddress && RAMEndAddress >> 24 == 0x80) &&                  (ActorInfoRAMAddress >> 24 == 0x80) &&                  (((ActorNameRAMAddress >> 24 == 0x80) && (ActorNameRAMAddress - ROMHandler.CodeRAMAddress) < rom.CodeData.Length) || (ActorNameRAMAddress == 0));
Magic Number,SceneNavi.ROMHandler,ActorTableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ActorTableEntry.cs,ActorTableEntry,The following statement contains a magic number: IsComplete =                  (StartAddress > rom.Code.VStart && StartAddress < rom.Size) &&                  (EndAddress > StartAddress && EndAddress > rom.Code.VStart && EndAddress < rom.Size) &&                  (RAMStartAddress >> 24 == 0x80) &&                  (RAMEndAddress > RAMStartAddress && RAMEndAddress >> 24 == 0x80) &&                  (ActorInfoRAMAddress >> 24 == 0x80) &&                  (((ActorNameRAMAddress >> 24 == 0x80) && (ActorNameRAMAddress - ROMHandler.CodeRAMAddress) < rom.CodeData.Length) || (ActorNameRAMAddress == 0));
Magic Number,SceneNavi.ROMHandler,ActorTableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ActorTableEntry.cs,ActorTableEntry,The following statement contains a magic number: IsComplete =                  (StartAddress > rom.Code.VStart && StartAddress < rom.Size) &&                  (EndAddress > StartAddress && EndAddress > rom.Code.VStart && EndAddress < rom.Size) &&                  (RAMStartAddress >> 24 == 0x80) &&                  (RAMEndAddress > RAMStartAddress && RAMEndAddress >> 24 == 0x80) &&                  (ActorInfoRAMAddress >> 24 == 0x80) &&                  (((ActorNameRAMAddress >> 24 == 0x80) && (ActorNameRAMAddress - ROMHandler.CodeRAMAddress) < rom.CodeData.Length) || (ActorNameRAMAddress == 0));
Magic Number,SceneNavi.ROMHandler,ActorTableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ActorTableEntry.cs,ActorTableEntry,The following statement contains a magic number: ActorType = tmp[infoadr + 2];
Magic Number,SceneNavi.ROMHandler,ActorTableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ActorTableEntry.cs,ActorTableEntry,The following statement contains a magic number: ObjectNumber = Endian.SwapUInt16(BitConverter.ToUInt16(tmp' (int)infoadr + 8));
Magic Number,SceneNavi.ROMHandler,StageKey,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\HeaderLoader.cs,StageKey,The following statement contains a magic number: parts.Length != 2
Magic Number,SceneNavi.ROMHandler,StageKey,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\HeaderLoader.cs,StageKey,The following statement contains a magic number: SceneAddress = uint.Parse(parts[0].Substring(2)' System.Globalization.NumberStyles.HexNumber);
Magic Number,SceneNavi.ROMHandler,DMATableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\DMATableEntry.cs,DMATableEntry,The following statement contains a magic number: VEnd = Endian.SwapUInt32(BitConverter.ToUInt32(rom.Data' readofs + 4));
Magic Number,SceneNavi.ROMHandler,DMATableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\DMATableEntry.cs,DMATableEntry,The following statement contains a magic number: PStart = Endian.SwapUInt32(BitConverter.ToUInt32(rom.Data' readofs + 8));
Magic Number,SceneNavi.ROMHandler,DMATableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\DMATableEntry.cs,DMATableEntry,The following statement contains a magic number: PEnd = Endian.SwapUInt32(BitConverter.ToUInt32(rom.Data' readofs + 12));
Magic Number,SceneNavi.ROMHandler,DMATableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\DMATableEntry.cs,Identify,The following statement contains a magic number: BitConverter.ToUInt32(data' (int)0) == 0x16 || ((BitConverter.ToUInt32(data' (int)0) == 0x18) && data[4] == 0x03 && BitConverter.ToUInt32(data' (int)8) == 0x16)
Magic Number,SceneNavi.ROMHandler,DMATableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\DMATableEntry.cs,Identify,The following statement contains a magic number: BitConverter.ToUInt32(data' (int)0) == 0x16 || ((BitConverter.ToUInt32(data' (int)0) == 0x18) && data[4] == 0x03 && BitConverter.ToUInt32(data' (int)8) == 0x16)
Magic Number,SceneNavi.ROMHandler,DMATableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\DMATableEntry.cs,Identify,The following statement contains a magic number: (BitConverter.ToUInt32(data' (int)0) & 0xFFFF00FF) == 0x15 || ((BitConverter.ToUInt32(data' (int)0) == 0x18) && data[4] == 0x02 && (BitConverter.ToUInt32(data' (int)8) & 0xFFFF00FF) == 0x15)
Magic Number,SceneNavi.ROMHandler,DMATableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\DMATableEntry.cs,Identify,The following statement contains a magic number: (BitConverter.ToUInt32(data' (int)0) & 0xFFFF00FF) == 0x15 || ((BitConverter.ToUInt32(data' (int)0) == 0x18) && data[4] == 0x02 && (BitConverter.ToUInt32(data' (int)8) & 0xFFFF00FF) == 0x15)
Magic Number,SceneNavi.ROMHandler,DMATableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\DMATableEntry.cs,Identify,The following statement contains a magic number: uint ovlheader = ((uint)data.Length - Endian.SwapUInt32(BitConverter.ToUInt32(data' (data.Length - 4))));
Magic Number,SceneNavi.ROMHandler,DMATableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\DMATableEntry.cs,Identify,The following statement contains a magic number: uint bdata = Endian.SwapUInt32(BitConverter.ToUInt32(data' (int)ovlheader + 4));
Magic Number,SceneNavi.ROMHandler,DMATableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\DMATableEntry.cs,Identify,The following statement contains a magic number: uint brodata = Endian.SwapUInt32(BitConverter.ToUInt32(data' (int)ovlheader + 8));
Magic Number,SceneNavi.ROMHandler,DMATableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\DMATableEntry.cs,Identify,The following statement contains a magic number: uint bssdata = Endian.SwapUInt32(BitConverter.ToUInt32(data' (int)ovlheader + 12));
Magic Number,SceneNavi.ROMHandler,DMATableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\DMATableEntry.cs,Identify,The following statement contains a magic number: (ovlheader + 16) < data.Length
Magic Number,SceneNavi.ROMHandler,DMATableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\DMATableEntry.cs,Identify,The following statement contains a magic number: int[] segcount = new int[16];
Magic Number,SceneNavi.ROMHandler,DMATableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\DMATableEntry.cs,Identify,The following statement contains a magic number: BitConverter.ToUInt32(data' i) == 0xE7 && BitConverter.ToUInt32(data' i + 4) == 0x0
Magic Number,SceneNavi.ROMHandler,EntranceTableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\EntranceTableEntry.cs,EntranceTableEntry,The following statement contains a magic number: Variable = (IsOffsetRelative ? rom.CodeData : rom.Data)[ofs + 2];
Magic Number,SceneNavi.ROMHandler,EntranceTableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\EntranceTableEntry.cs,EntranceTableEntry,The following statement contains a magic number: Fade = (IsOffsetRelative ? rom.CodeData : rom.Data)[ofs + 3];
Magic Number,SceneNavi.ROMHandler,EntranceTableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\EntranceTableEntry.cs,SaveTableEntry,The following statement contains a magic number: (IsOffsetRelative ? ROM.CodeData : ROM.Data)[Offset + 2] = Variable;
Magic Number,SceneNavi.ROMHandler,EntranceTableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\EntranceTableEntry.cs,SaveTableEntry,The following statement contains a magic number: (IsOffsetRelative ? ROM.CodeData : ROM.Data)[Offset + 3] = Fade;
Magic Number,SceneNavi.ROMHandler,ObjectTableEntry,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ObjectTableEntry.cs,ObjectTableEntry,The following statement contains a magic number: EndAddress = Endian.SwapUInt32(BitConverter.ToUInt32(IsOffsetRelative ? rom.CodeData : rom.Data' ofs + 4));
Magic Number,SceneNavi.ROMHandler,SceneTableEntryOcarina,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryOcarina.cs,SceneTableEntryOcarina,The following statement contains a magic number: sceneEndAddress = Endian.SwapUInt32(BitConverter.ToUInt32(IsOffsetRelative ? rom.CodeData : rom.Data' ofs + 4));
Magic Number,SceneNavi.ROMHandler,SceneTableEntryOcarina,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryOcarina.cs,SceneTableEntryOcarina,The following statement contains a magic number: LabelStartAddress = Endian.SwapUInt32(BitConverter.ToUInt32(IsOffsetRelative ? rom.CodeData : rom.Data' ofs + 8));
Magic Number,SceneNavi.ROMHandler,SceneTableEntryOcarina,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryOcarina.cs,SceneTableEntryOcarina,The following statement contains a magic number: LabelEndAddress = Endian.SwapUInt32(BitConverter.ToUInt32(IsOffsetRelative ? rom.CodeData : rom.Data' ofs + 12));
Magic Number,SceneNavi.ROMHandler,SceneTableEntryOcarina,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryOcarina.cs,SceneTableEntryOcarina,The following statement contains a magic number: Unknown1 = (IsOffsetRelative ? rom.CodeData : rom.Data)[ofs + 16];
Magic Number,SceneNavi.ROMHandler,SceneTableEntryOcarina,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryOcarina.cs,SceneTableEntryOcarina,The following statement contains a magic number: ConfigurationNo = (IsOffsetRelative ? rom.CodeData : rom.Data)[ofs + 17];
Magic Number,SceneNavi.ROMHandler,SceneTableEntryOcarina,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryOcarina.cs,SceneTableEntryOcarina,The following statement contains a magic number: Unknown3 = (IsOffsetRelative ? rom.CodeData : rom.Data)[ofs + 18];
Magic Number,SceneNavi.ROMHandler,SceneTableEntryOcarina,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryOcarina.cs,SceneTableEntryOcarina,The following statement contains a magic number: Unknown4 = (IsOffsetRelative ? rom.CodeData : rom.Data)[ofs + 19];
Magic Number,SceneNavi.ROMHandler,SceneTableEntryOcarina,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryOcarina.cs,SaveTableEntry,The following statement contains a magic number: Buffer.BlockCopy(tmpbuf' 0' (IsOffsetRelative ? ROM.CodeData : ROM.Data)' Offset + 4' tmpbuf.Length);
Magic Number,SceneNavi.ROMHandler,SceneTableEntryOcarina,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryOcarina.cs,SaveTableEntry,The following statement contains a magic number: Buffer.BlockCopy(tmpbuf' 0' (IsOffsetRelative ? ROM.CodeData : ROM.Data)' Offset + 8' tmpbuf.Length);
Magic Number,SceneNavi.ROMHandler,SceneTableEntryOcarina,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryOcarina.cs,SaveTableEntry,The following statement contains a magic number: Buffer.BlockCopy(tmpbuf' 0' (IsOffsetRelative ? ROM.CodeData : ROM.Data)' Offset + 12' tmpbuf.Length);
Magic Number,SceneNavi.ROMHandler,SceneTableEntryOcarina,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryOcarina.cs,SaveTableEntry,The following statement contains a magic number: (IsOffsetRelative ? ROM.CodeData : ROM.Data)[Offset + 16] = Unknown1;
Magic Number,SceneNavi.ROMHandler,SceneTableEntryOcarina,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryOcarina.cs,SaveTableEntry,The following statement contains a magic number: (IsOffsetRelative ? ROM.CodeData : ROM.Data)[Offset + 17] = ConfigurationNo;
Magic Number,SceneNavi.ROMHandler,SceneTableEntryOcarina,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryOcarina.cs,SaveTableEntry,The following statement contains a magic number: (IsOffsetRelative ? ROM.CodeData : ROM.Data)[Offset + 18] = Unknown3;
Magic Number,SceneNavi.ROMHandler,SceneTableEntryOcarina,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryOcarina.cs,SaveTableEntry,The following statement contains a magic number: (IsOffsetRelative ? ROM.CodeData : ROM.Data)[Offset + 19] = Unknown4;
Magic Number,SceneNavi.ROMHandler,SceneTableEntryOcarina,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryOcarina.cs,ReadScene,The following statement contains a magic number: uint aofs = Endian.SwapUInt32(BitConverter.ToUInt32(((byte[])ROM.SegmentMapping[(byte)0x02])' 4));
Magic Number,SceneNavi.ROMHandler,SceneTableEntryOcarina,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryOcarina.cs,ReadScene,The following statement contains a magic number: (rofs & 0x00FFFFFF) > ((byte[])ROM.SegmentMapping[(byte)0x02]).Length || (rofs >> 24) != 0x02
Magic Number,SceneNavi.ROMHandler,SceneTableEntryOcarina,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\SceneTableEntryOcarina.cs,ReadScene,The following statement contains a magic number: aofs += 4;
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,ROMHandler,The following statement contains a magic number: conv = new byte[4] { Data[i + 1]' Data[i]' Data[i + 3]' Data[i + 2] };
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,ROMHandler,The following statement contains a magic number: conv = new byte[4] { Data[i + 1]' Data[i]' Data[i + 3]' Data[i + 2] };
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,ROMHandler,The following statement contains a magic number: conv = new byte[4] { Data[i + 1]' Data[i]' Data[i + 3]' Data[i + 2] };
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,IsAddressSupported,The following statement contains a magic number: (address >> 24) > 0x0F || SegmentMapping[(byte)(address >> 24)] == null
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,IsAddressSupported,The following statement contains a magic number: (address >> 24) > 0x0F || SegmentMapping[(byte)(address >> 24)] == null
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,IsAddressSupported,The following statement contains a magic number: (address & 0xFFFFFF) > ((byte[])SegmentMapping[(byte)(address >> 24)]).Length && ((byte[])SegmentMapping[(byte)(address >> 24)]).Length != 0
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,IsAddressSupported,The following statement contains a magic number: (address & 0xFFFFFF) > ((byte[])SegmentMapping[(byte)(address >> 24)]).Length && ((byte[])SegmentMapping[(byte)(address >> 24)]).Length != 0
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,IsAddressSupported,The following statement contains a magic number: address >> 24 != 0x80
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindBuildInfo,The following statement contains a magic number: i -= (i % 8);
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindBuildInfo,The following statement contains a magic number: next2 -= (next2 % 8);
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindBuildInfo,The following statement contains a magic number: Encoding.ASCII.GetString(Data' i' 4) == "@srd"
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindFileNameTable,The following statement contains a magic number: Encoding.ASCII.GetString(Data' i' 7) == "makerom"
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,ReadFileNameTable,The following statement contains a magic number: Files[i].Name = Encoding.ASCII.GetString(Data' nofs' 50).TrimEnd('\0');
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindCodeFile,The following statement contains a magic number: Encoding.ASCII.GetString(fdata' i' 8) == "RSP Gfx "
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindSceneTable,The following statement contains a magic number: int increment = (IsMajora ? 16 : 20);
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindSceneTable,The following statement contains a magic number: int increment = (IsMajora ? 16 : 20);
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindSceneTable,The following statement contains a magic number: i < CodeData.Length - (16 * 16)
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindSceneTable,The following statement contains a magic number: i < CodeData.Length - (16 * 16)
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindActorTable,The following statement contains a magic number: int inc = 16;
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindActorTable,The following statement contains a magic number: ActorTableEntry act2 = new ActorTableEntry(this' i + 32' true);
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindActorTable,The following statement contains a magic number: ActorTableEntry act3 = new ActorTableEntry(this' i + 64' true);
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindActorTable,The following statement contains a magic number: i < CodeData.Length - (16 * 16)
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindActorTable,The following statement contains a magic number: i < CodeData.Length - (16 * 16)
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindActorTable,The following statement contains a magic number: i < CodeData.Length - 32
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindObjectTable,The following statement contains a magic number: int inc = 8;
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindObjectTable,The following statement contains a magic number: ObjectCount = Endian.SwapUInt16(BitConverter.ToUInt16(CodeData' i - 2));
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindObjectTable,The following statement contains a magic number: ObjectTableEntry obj2 = new ObjectTableEntry(this' i + 8' true);
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindObjectTable,The following statement contains a magic number: ObjectTableEntry obj3 = new ObjectTableEntry(this' i + 16' true);
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindObjectTable,The following statement contains a magic number: i < CodeData.Length - (8 * 8)
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindObjectTable,The following statement contains a magic number: i < CodeData.Length - (8 * 8)
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindObjectTable,The following statement contains a magic number: i < (ObjectTableAddress + (ObjectCount * 8))
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,FindObjectTable,The following statement contains a magic number: EntranceTableAddress = i + (i % 16);
Magic Number,SceneNavi.ROMHandler,ROMHandler,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ROMHandler\ROMHandler.cs,ReadEntranceTable,The following statement contains a magic number: i += 4;
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,RGBA16,The following statement contains a magic number: UInt16 Raw = (UInt16)((Source[SourceOffset] << 8) | Source[SourceOffset + 1]);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,RGBA16,The following statement contains a magic number: Target[TargetOffset] = (byte)((Raw & 0xF800) >> 8);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,RGBA16,The following statement contains a magic number: Target[TargetOffset + 1] = (byte)(((Raw & 0x07C0) << 5) >> 8);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,RGBA16,The following statement contains a magic number: Target[TargetOffset + 1] = (byte)(((Raw & 0x07C0) << 5) >> 8);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,RGBA16,The following statement contains a magic number: Target[TargetOffset + 2] = (byte)(((Raw & 0x003E) << 18) >> 16);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,RGBA16,The following statement contains a magic number: Target[TargetOffset + 2] = (byte)(((Raw & 0x003E) << 18) >> 16);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,RGBA16,The following statement contains a magic number: Target[TargetOffset + 2] = (byte)(((Raw & 0x003E) << 18) >> 16);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,RGBA16,The following statement contains a magic number: Target[TargetOffset + 3] = 0;
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,RGBA16,The following statement contains a magic number: Target[TargetOffset + 3] = 0xFF;
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,RGBA16,The following statement contains a magic number: SourceOffset += 2;
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,RGBA16,The following statement contains a magic number: TargetOffset += 4;
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,RGBA16,The following statement contains a magic number: SourceOffset += LineSize * 4 - Width;
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,CI4,The following statement contains a magic number: byte CIIndex = (byte)((Source[SourceOffset]) + (Palette << 4));
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,CI4,The following statement contains a magic number: Target[TargetOffset + 2] = (byte)PalColors[CIIndex].B;
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,CI4,The following statement contains a magic number: Target[TargetOffset + 3] = (byte)PalColors[CIIndex].A;
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,CI4,The following statement contains a magic number: TargetOffset += 4;
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,CI4,The following statement contains a magic number: SourceOffset += LineSize * 8 - Width;
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,CI8,The following statement contains a magic number: byte CIIndex1 = (byte)((Source[SourceOffset] & 0xF0) >> 4);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,CI8,The following statement contains a magic number: Target[TargetOffset + 2] = (byte)PalColors[CIIndex1].B;
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,CI8,The following statement contains a magic number: Target[TargetOffset + 3] = (byte)PalColors[CIIndex1].A;
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,CI8,The following statement contains a magic number: Target[TargetOffset + 4] = (byte)PalColors[CIIndex2].R;
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,CI8,The following statement contains a magic number: Target[TargetOffset + 5] = (byte)PalColors[CIIndex2].G;
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,CI8,The following statement contains a magic number: Target[TargetOffset + 6] = (byte)PalColors[CIIndex2].B;
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,CI8,The following statement contains a magic number: Target[TargetOffset + 7] = (byte)PalColors[CIIndex2].A;
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,CI8,The following statement contains a magic number: TargetOffset += 8;
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,CI8,The following statement contains a magic number: i < Width / 2
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,CI8,The following statement contains a magic number: SourceOffset += LineSize * 8 - (Width / 2);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,CI8,The following statement contains a magic number: SourceOffset += LineSize * 8 - (Width / 2);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA4,The following statement contains a magic number: byte Raw = (byte)((Source[SourceOffset] & 0xF0) >> 4);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA4,The following statement contains a magic number: Target[TargetOffset] = (byte)((Raw & 0x0E) << 4);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA4,The following statement contains a magic number: Target[TargetOffset + 1] = (byte)((Raw & 0x0E) << 4);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA4,The following statement contains a magic number: Target[TargetOffset + 2] = (byte)((Raw & 0x0E) << 4);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA4,The following statement contains a magic number: Target[TargetOffset + 2] = (byte)((Raw & 0x0E) << 4);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA4,The following statement contains a magic number: Target[TargetOffset + 3] = 0;
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA4,The following statement contains a magic number: Target[TargetOffset + 3] = 0xFF;
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA4,The following statement contains a magic number: Target[TargetOffset + 4] = (byte)((Raw & 0x0E) << 4);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA4,The following statement contains a magic number: Target[TargetOffset + 4] = (byte)((Raw & 0x0E) << 4);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA4,The following statement contains a magic number: Target[TargetOffset + 5] = (byte)((Raw & 0x0E) << 4);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA4,The following statement contains a magic number: Target[TargetOffset + 5] = (byte)((Raw & 0x0E) << 4);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA4,The following statement contains a magic number: Target[TargetOffset + 6] = (byte)((Raw & 0x0E) << 4);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA4,The following statement contains a magic number: Target[TargetOffset + 6] = (byte)((Raw & 0x0E) << 4);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA4,The following statement contains a magic number: Target[TargetOffset + 7] = 0;
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA4,The following statement contains a magic number: Target[TargetOffset + 7] = 0xFF;
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA4,The following statement contains a magic number: TargetOffset += 8;
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA4,The following statement contains a magic number: i < Width / 2
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA4,The following statement contains a magic number: SourceOffset += LineSize * 8 - (Width / 2);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA4,The following statement contains a magic number: SourceOffset += LineSize * 8 - (Width / 2);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA8,The following statement contains a magic number: Target[TargetOffset + 2] = (byte)((Raw & 0xF0) + 0x0F);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA8,The following statement contains a magic number: Target[TargetOffset + 3] = (byte)((Raw & 0x0F) << 4);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA8,The following statement contains a magic number: Target[TargetOffset + 3] = (byte)((Raw & 0x0F) << 4);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA8,The following statement contains a magic number: TargetOffset += 4;
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA8,The following statement contains a magic number: SourceOffset += LineSize * 8 - Width;
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA16,The following statement contains a magic number: Target[TargetOffset + 2] = Source[SourceOffset];
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA16,The following statement contains a magic number: Target[TargetOffset + 3] = Source[SourceOffset + 1];
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA16,The following statement contains a magic number: SourceOffset += 2;
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA16,The following statement contains a magic number: TargetOffset += 4;
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,IA16,The following statement contains a magic number: SourceOffset += LineSize * 4 - Width;
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,I4,The following statement contains a magic number: byte Raw = (byte)((Source[SourceOffset] & 0xF0) >> 4);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,I4,The following statement contains a magic number: Target[TargetOffset] = (byte)((Raw & 0x0E) << 4);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,I4,The following statement contains a magic number: Target[TargetOffset + 1] = (byte)((Raw & 0x0E) << 4);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,I4,The following statement contains a magic number: Target[TargetOffset + 2] = (byte)((Raw & 0x0E) << 4);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,I4,The following statement contains a magic number: Target[TargetOffset + 2] = (byte)((Raw & 0x0E) << 4);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,I4,The following statement contains a magic number: Target[TargetOffset + 3] = (byte)((Raw & 0x0E) << 4);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,I4,The following statement contains a magic number: Target[TargetOffset + 3] = (byte)((Raw & 0x0E) << 4);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,I4,The following statement contains a magic number: Target[TargetOffset + 4] = (byte)((Raw & 0x0E) << 4);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,I4,The following statement contains a magic number: Target[TargetOffset + 4] = (byte)((Raw & 0x0E) << 4);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,I4,The following statement contains a magic number: Target[TargetOffset + 5] = (byte)((Raw & 0x0E) << 4);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,I4,The following statement contains a magic number: Target[TargetOffset + 5] = (byte)((Raw & 0x0E) << 4);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,I4,The following statement contains a magic number: Target[TargetOffset + 6] = (byte)((Raw & 0x0E) << 4);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,I4,The following statement contains a magic number: Target[TargetOffset + 6] = (byte)((Raw & 0x0E) << 4);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,I4,The following statement contains a magic number: Target[TargetOffset + 7] = (byte)((Raw & 0x0E) << 4);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,I4,The following statement contains a magic number: Target[TargetOffset + 7] = (byte)((Raw & 0x0E) << 4);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,I4,The following statement contains a magic number: TargetOffset += 8;
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,I4,The following statement contains a magic number: i < Width / 2
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,I4,The following statement contains a magic number: SourceOffset += LineSize * 8 - (Width / 2);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,I4,The following statement contains a magic number: SourceOffset += LineSize * 8 - (Width / 2);
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,I8,The following statement contains a magic number: Target[TargetOffset + 2] = Source[SourceOffset];
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,I8,The following statement contains a magic number: Target[TargetOffset + 3] = Source[SourceOffset];
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,I8,The following statement contains a magic number: TargetOffset += 4;
Magic Number,SceneNavi.SimpleF3DEX2,ImageHelper,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\ImageHelper.cs,I8,The following statement contains a magic number: SourceOffset += LineSize * 8 - Width;
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,F3DEX2Interpreter,The following statement contains a magic number: VertexBuffer = new Vertex[32];
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,F3DEX2Interpreter,The following statement contains a magic number: Textures = new Texture[2];
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,F3DEX2Interpreter,The following statement contains a magic number: palette = new Color4[256];
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,F3DEX2Interpreter,The following statement contains a magic number: ScaleS = new float[2];
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,F3DEX2Interpreter,The following statement contains a magic number: ScaleT = new float[2];
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,InitializeParser,The following statement contains a magic number: ucodecmds = new UcodeCommandDelegate[256];
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,Render,The following statement contains a magic number: PrimColor = EnvColor = new Color4(0.5f' 0.5f' 0.5f' 0.5f);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,Render,The following statement contains a magic number: PrimColor = EnvColor = new Color4(0.5f' 0.5f' 0.5f' 0.5f);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,Render,The following statement contains a magic number: PrimColor = EnvColor = new Color4(0.5f' 0.5f' 0.5f' 0.5f);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,Render,The following statement contains a magic number: PrimColor = EnvColor = new Color4(0.5f' 0.5f' 0.5f' 0.5f);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,Render,The following statement contains a magic number: i < (OpenGLHelpers.Initialization.SupportsFunction("glActiveTextureARB") ? 2 : 1)
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,Render,The following statement contains a magic number: byte seg = (byte)(adr >> 24);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,Render,The following statement contains a magic number: adr + ((m.Commands.Length + 3) * 8) > segdata.Length
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,Render,The following statement contains a magic number: adr + ((m.Commands.Length + 3) * 8) > segdata.Length
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,Render,The following statement contains a magic number: uint[] nextw0 = new uint[nextcmd.Length + 2];
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,Render,The following statement contains a magic number: uint[] nextw1 = new uint[nextcmd.Length + 2];
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,Render,The following statement contains a magic number: nextw0[i] = Endian.SwapUInt32(BitConverter.ToUInt32(segdata' (int)adr + (i * 8)));
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,Render,The following statement contains a magic number: nextw1[i] = Endian.SwapUInt32(BitConverter.ToUInt32(segdata' (int)adr + (i * 8) + 4));
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,Render,The following statement contains a magic number: nextw1[i] = Endian.SwapUInt32(BitConverter.ToUInt32(segdata' (int)adr + (i * 8) + 4));
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,Render,The following statement contains a magic number: nextcmd[i] = (General.UcodeCmds)(nextw0[i] >> 24);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,Render,The following statement contains a magic number: adr += (uint)(m.Commands.Length * 8);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,Render,The following statement contains a magic number: ucodecmds[cmd](Endian.SwapUInt32(BitConverter.ToUInt32(segdata' (int)adr))' Endian.SwapUInt32(BitConverter.ToUInt32(segdata' (int)adr + 4)));
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,Render,The following statement contains a magic number: adr += 8;
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,MacroLoadTextureBlock,The following statement contains a magic number: activetex = (int)((w1[6] >> 24) & 0x01);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,MacroLoadTextureBlock,The following statement contains a magic number: activetex = (int)((w1[6] >> 24) & 0x01);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,MacroLoadTextureBlock,The following statement contains a magic number: CommandSetTile(w0[5]' w1[5]);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,MacroLoadTextureBlock,The following statement contains a magic number: CommandSetTile(w0[5]' w1[5]);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,MacroLoadTextureBlock,The following statement contains a magic number: CommandSetTileSize(w0[6]' w1[6]);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,MacroLoadTextureBlock,The following statement contains a magic number: CommandSetTileSize(w0[6]' w1[6]);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,MacroLoadTextureBlock,The following statement contains a magic number: (Textures[activetex].Format == 0x40 || Textures[activetex].Format == 0x48 || Textures[activetex].Format == 0x50) &&                  ((w0[7] >> 24) == (byte)General.UcodeCmds.SETTIMG) || ((w0[8] >> 24) == (byte)General.UcodeCmds.SETTIMG)
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,MacroLoadTextureBlock,The following statement contains a magic number: (Textures[activetex].Format == 0x40 || Textures[activetex].Format == 0x48 || Textures[activetex].Format == 0x50) &&                  ((w0[7] >> 24) == (byte)General.UcodeCmds.SETTIMG) || ((w0[8] >> 24) == (byte)General.UcodeCmds.SETTIMG)
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,MacroLoadTextureBlock,The following statement contains a magic number: (Textures[activetex].Format == 0x40 || Textures[activetex].Format == 0x48 || Textures[activetex].Format == 0x50) &&                  ((w0[7] >> 24) == (byte)General.UcodeCmds.SETTIMG) || ((w0[8] >> 24) == (byte)General.UcodeCmds.SETTIMG)
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,MacroLoadTextureBlock,The following statement contains a magic number: (Textures[activetex].Format == 0x40 || Textures[activetex].Format == 0x48 || Textures[activetex].Format == 0x50) &&                  ((w0[7] >> 24) == (byte)General.UcodeCmds.SETTIMG) || ((w0[8] >> 24) == (byte)General.UcodeCmds.SETTIMG)
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,MacroLoadTLUT,The following statement contains a magic number: byte seg = (byte)(adr >> 24);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,MacroLoadTLUT,The following statement contains a magic number: uint psize = ((w1[4] & 0x00FFF000) >> 14) + 1;
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,MacroLoadTLUT,The following statement contains a magic number: uint psize = ((w1[4] & 0x00FFF000) >> 14) + 1;
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,MacroLoadTLUT,The following statement contains a magic number: ushort r = (ushort)((segdata[adr] << 8) | segdata[adr + 1]);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,MacroLoadTLUT,The following statement contains a magic number: palette[i].R = (byte)((r & 0xF800) >> 8);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,MacroLoadTLUT,The following statement contains a magic number: palette[i].G = (byte)(((r & 0x07C0) << 5) >> 8);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,MacroLoadTLUT,The following statement contains a magic number: palette[i].G = (byte)(((r & 0x07C0) << 5) >> 8);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,MacroLoadTLUT,The following statement contains a magic number: palette[i].B = (byte)(((r & 0x003E) << 18) >> 16);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,MacroLoadTLUT,The following statement contains a magic number: palette[i].B = (byte)(((r & 0x003E) << 18) >> 16);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,MacroLoadTLUT,The following statement contains a magic number: adr += 2;
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandVtx,The following statement contains a magic number: byte N = (byte)((w0 >> 12) & 0xFF);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandVtx,The following statement contains a magic number: VertexBuffer[V0 + i] = new Vertex(ROM' (byte[])ROM.SegmentMapping[(byte)(w1 >> 24)]' (uint)(w1 + i * 16)' mtxstack.Peek());
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandVtx,The following statement contains a magic number: VertexBuffer[V0 + i] = new Vertex(ROM' (byte[])ROM.SegmentMapping[(byte)(w1 >> 24)]' (uint)(w1 + i * 16)' mtxstack.Peek());
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandTri1,The following statement contains a magic number: int[] idxs = new int[] { (int)((w0 & 0x00FF0000) >> 16) >> 1' (int)((w0 & 0x0000FF00) >> 8) >> 1' (int)(w0 & 0x000000FF) >> 1 };
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandTri1,The following statement contains a magic number: int[] idxs = new int[] { (int)((w0 & 0x00FF0000) >> 16) >> 1' (int)((w0 & 0x0000FF00) >> 8) >> 1' (int)(w0 & 0x000000FF) >> 1 };
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandTri1,The following statement contains a magic number: ActiveGLDL.Peek().Triangles.Add(new OpenGLHelpers.DisplayListEx.Triangle(VertexBuffer[idxs[0]]' VertexBuffer[idxs[1]]' VertexBuffer[idxs[2]]));
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandTri1,The following statement contains a magic number: LastTriList.Add(new SimpleTriangle(VertexBuffer[idxs[0]].Position' VertexBuffer[idxs[1]].Position' VertexBuffer[idxs[2]].Position));
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandTri2,The following statement contains a magic number: int[] idxs = new int[]              {                  (int)((w0 & 0x00FF0000) >> 16) >> 1' (int)((w0 & 0x0000FF00) >> 8) >> 1' (int)(w0 & 0x000000FF) >> 1'                  (int)((w1 & 0x00FF0000) >> 16) >> 1' (int)((w1 & 0x0000FF00) >> 8) >> 1' (int)(w1 & 0x000000FF) >> 1              };
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandTri2,The following statement contains a magic number: int[] idxs = new int[]              {                  (int)((w0 & 0x00FF0000) >> 16) >> 1' (int)((w0 & 0x0000FF00) >> 8) >> 1' (int)(w0 & 0x000000FF) >> 1'                  (int)((w1 & 0x00FF0000) >> 16) >> 1' (int)((w1 & 0x0000FF00) >> 8) >> 1' (int)(w1 & 0x000000FF) >> 1              };
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandTri2,The following statement contains a magic number: int[] idxs = new int[]              {                  (int)((w0 & 0x00FF0000) >> 16) >> 1' (int)((w0 & 0x0000FF00) >> 8) >> 1' (int)(w0 & 0x000000FF) >> 1'                  (int)((w1 & 0x00FF0000) >> 16) >> 1' (int)((w1 & 0x0000FF00) >> 8) >> 1' (int)(w1 & 0x000000FF) >> 1              };
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandTri2,The following statement contains a magic number: int[] idxs = new int[]              {                  (int)((w0 & 0x00FF0000) >> 16) >> 1' (int)((w0 & 0x0000FF00) >> 8) >> 1' (int)(w0 & 0x000000FF) >> 1'                  (int)((w1 & 0x00FF0000) >> 16) >> 1' (int)((w1 & 0x0000FF00) >> 8) >> 1' (int)(w1 & 0x000000FF) >> 1              };
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandTri2,The following statement contains a magic number: ActiveGLDL.Peek().Triangles.Add(new OpenGLHelpers.DisplayListEx.Triangle(VertexBuffer[idxs[0]]' VertexBuffer[idxs[1]]' VertexBuffer[idxs[2]]));
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandTri2,The following statement contains a magic number: ActiveGLDL.Peek().Triangles.Add(new OpenGLHelpers.DisplayListEx.Triangle(VertexBuffer[idxs[3]]' VertexBuffer[idxs[4]]' VertexBuffer[idxs[5]]));
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandTri2,The following statement contains a magic number: ActiveGLDL.Peek().Triangles.Add(new OpenGLHelpers.DisplayListEx.Triangle(VertexBuffer[idxs[3]]' VertexBuffer[idxs[4]]' VertexBuffer[idxs[5]]));
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandTri2,The following statement contains a magic number: ActiveGLDL.Peek().Triangles.Add(new OpenGLHelpers.DisplayListEx.Triangle(VertexBuffer[idxs[3]]' VertexBuffer[idxs[4]]' VertexBuffer[idxs[5]]));
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandTri2,The following statement contains a magic number: LastTriList.Add(new SimpleTriangle(VertexBuffer[idxs[0]].Position' VertexBuffer[idxs[1]].Position' VertexBuffer[idxs[2]].Position));
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandTri2,The following statement contains a magic number: LastTriList.Add(new SimpleTriangle(VertexBuffer[idxs[3]].Position' VertexBuffer[idxs[4]].Position' VertexBuffer[idxs[5]].Position));
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandTri2,The following statement contains a magic number: LastTriList.Add(new SimpleTriangle(VertexBuffer[idxs[3]].Position' VertexBuffer[idxs[4]].Position' VertexBuffer[idxs[5]].Position));
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandTri2,The following statement contains a magic number: LastTriList.Add(new SimpleTriangle(VertexBuffer[idxs[3]].Position' VertexBuffer[idxs[4]].Position' VertexBuffer[idxs[5]].Position));
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandDL,The following statement contains a magic number: (byte[])ROM.SegmentMapping[(byte)(w1 >> 24)] != null
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandBranchZ,The following statement contains a magic number: (byte[])ROM.SegmentMapping[(byte)(rdphalf1 >> 24)] != null
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandMtx,The following statement contains a magic number: byte mseg = (byte)(w1 >> 24);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandMtx,The following statement contains a magic number: double[] matrix = new double[16];
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandMtx,The following statement contains a magic number: mt2 = Endian.SwapUInt16(BitConverter.ToUInt16(msegdata' (int)madr + 32));
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandMtx,The following statement contains a magic number: matrix[(x * 4) + y] = ((mt1 << 16) | mt2) * (1.0f / 65536.0f);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandMtx,The following statement contains a magic number: matrix[(x * 4) + y] = ((mt1 << 16) | mt2) * (1.0f / 65536.0f);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandMtx,The following statement contains a magic number: matrix[(x * 4) + y] = ((mt1 << 16) | mt2) * (1.0f / 65536.0f);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandMtx,The following statement contains a magic number: madr += 2;
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandMtx,The following statement contains a magic number: y < 4
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandMtx,The following statement contains a magic number: x < 4
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandMtx,The following statement contains a magic number: Matrix4d glmatrix = new Matrix4d(                  matrix[0]' matrix[1]' matrix[2]' matrix[3]'                  matrix[4]' matrix[5]' matrix[6]' matrix[7]'                  matrix[8]' matrix[9]' matrix[10]' matrix[11]'                  matrix[12]' matrix[13]' matrix[14]' matrix[15]);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandMtx,The following statement contains a magic number: Matrix4d glmatrix = new Matrix4d(                  matrix[0]' matrix[1]' matrix[2]' matrix[3]'                  matrix[4]' matrix[5]' matrix[6]' matrix[7]'                  matrix[8]' matrix[9]' matrix[10]' matrix[11]'                  matrix[12]' matrix[13]' matrix[14]' matrix[15]);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandMtx,The following statement contains a magic number: Matrix4d glmatrix = new Matrix4d(                  matrix[0]' matrix[1]' matrix[2]' matrix[3]'                  matrix[4]' matrix[5]' matrix[6]' matrix[7]'                  matrix[8]' matrix[9]' matrix[10]' matrix[11]'                  matrix[12]' matrix[13]' matrix[14]' matrix[15]);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandMtx,The following statement contains a magic number: Matrix4d glmatrix = new Matrix4d(                  matrix[0]' matrix[1]' matrix[2]' matrix[3]'                  matrix[4]' matrix[5]' matrix[6]' matrix[7]'                  matrix[8]' matrix[9]' matrix[10]' matrix[11]'                  matrix[12]' matrix[13]' matrix[14]' matrix[15]);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandMtx,The following statement contains a magic number: Matrix4d glmatrix = new Matrix4d(                  matrix[0]' matrix[1]' matrix[2]' matrix[3]'                  matrix[4]' matrix[5]' matrix[6]' matrix[7]'                  matrix[8]' matrix[9]' matrix[10]' matrix[11]'                  matrix[12]' matrix[13]' matrix[14]' matrix[15]);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandMtx,The following statement contains a magic number: Matrix4d glmatrix = new Matrix4d(                  matrix[0]' matrix[1]' matrix[2]' matrix[3]'                  matrix[4]' matrix[5]' matrix[6]' matrix[7]'                  matrix[8]' matrix[9]' matrix[10]' matrix[11]'                  matrix[12]' matrix[13]' matrix[14]' matrix[15]);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandMtx,The following statement contains a magic number: Matrix4d glmatrix = new Matrix4d(                  matrix[0]' matrix[1]' matrix[2]' matrix[3]'                  matrix[4]' matrix[5]' matrix[6]' matrix[7]'                  matrix[8]' matrix[9]' matrix[10]' matrix[11]'                  matrix[12]' matrix[13]' matrix[14]' matrix[15]);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandMtx,The following statement contains a magic number: Matrix4d glmatrix = new Matrix4d(                  matrix[0]' matrix[1]' matrix[2]' matrix[3]'                  matrix[4]' matrix[5]' matrix[6]' matrix[7]'                  matrix[8]' matrix[9]' matrix[10]' matrix[11]'                  matrix[12]' matrix[13]' matrix[14]' matrix[15]);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandMtx,The following statement contains a magic number: Matrix4d glmatrix = new Matrix4d(                  matrix[0]' matrix[1]' matrix[2]' matrix[3]'                  matrix[4]' matrix[5]' matrix[6]' matrix[7]'                  matrix[8]' matrix[9]' matrix[10]' matrix[11]'                  matrix[12]' matrix[13]' matrix[14]' matrix[15]);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandMtx,The following statement contains a magic number: Matrix4d glmatrix = new Matrix4d(                  matrix[0]' matrix[1]' matrix[2]' matrix[3]'                  matrix[4]' matrix[5]' matrix[6]' matrix[7]'                  matrix[8]' matrix[9]' matrix[10]' matrix[11]'                  matrix[12]' matrix[13]' matrix[14]' matrix[15]);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandMtx,The following statement contains a magic number: Matrix4d glmatrix = new Matrix4d(                  matrix[0]' matrix[1]' matrix[2]' matrix[3]'                  matrix[4]' matrix[5]' matrix[6]' matrix[7]'                  matrix[8]' matrix[9]' matrix[10]' matrix[11]'                  matrix[12]' matrix[13]' matrix[14]' matrix[15]);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandMtx,The following statement contains a magic number: Matrix4d glmatrix = new Matrix4d(                  matrix[0]' matrix[1]' matrix[2]' matrix[3]'                  matrix[4]' matrix[5]' matrix[6]' matrix[7]'                  matrix[8]' matrix[9]' matrix[10]' matrix[11]'                  matrix[12]' matrix[13]' matrix[14]' matrix[15]);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandMtx,The following statement contains a magic number: Matrix4d glmatrix = new Matrix4d(                  matrix[0]' matrix[1]' matrix[2]' matrix[3]'                  matrix[4]' matrix[5]' matrix[6]' matrix[7]'                  matrix[8]' matrix[9]' matrix[10]' matrix[11]'                  matrix[12]' matrix[13]' matrix[14]' matrix[15]);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandMtx,The following statement contains a magic number: Matrix4d glmatrix = new Matrix4d(                  matrix[0]' matrix[1]' matrix[2]' matrix[3]'                  matrix[4]' matrix[5]' matrix[6]' matrix[7]'                  matrix[8]' matrix[9]' matrix[10]' matrix[11]'                  matrix[12]' matrix[13]' matrix[14]' matrix[15]);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetOtherModeH,The following statement contains a magic number: switch ((General.OtherModeHShifts)(32 - General.ShiftR(w0' 8' 8) - (General.ShiftR(w0' 0' 8) + 1)))              {                  case General.OtherModeHShifts.TEXTLUT:                      uint tlutmode = (w1 >> (int)General.OtherModeHShifts.TEXTLUT);                      break;                  default:                      uint length = (uint)(General.ShiftR(w0' 0' 8) + 1);                      uint shift = (uint)(32 - General.ShiftR(w0' 8' 8) - length);                      uint mask = (uint)(((1 << (int)length) - 1) << (int)shift);                        OtherModeH &= ~mask;                      OtherModeH |= w1 & mask;                      break;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetOtherModeH,The following statement contains a magic number: switch ((General.OtherModeHShifts)(32 - General.ShiftR(w0' 8' 8) - (General.ShiftR(w0' 0' 8) + 1)))              {                  case General.OtherModeHShifts.TEXTLUT:                      uint tlutmode = (w1 >> (int)General.OtherModeHShifts.TEXTLUT);                      break;                  default:                      uint length = (uint)(General.ShiftR(w0' 0' 8) + 1);                      uint shift = (uint)(32 - General.ShiftR(w0' 8' 8) - length);                      uint mask = (uint)(((1 << (int)length) - 1) << (int)shift);                        OtherModeH &= ~mask;                      OtherModeH |= w1 & mask;                      break;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetOtherModeH,The following statement contains a magic number: switch ((General.OtherModeHShifts)(32 - General.ShiftR(w0' 8' 8) - (General.ShiftR(w0' 0' 8) + 1)))              {                  case General.OtherModeHShifts.TEXTLUT:                      uint tlutmode = (w1 >> (int)General.OtherModeHShifts.TEXTLUT);                      break;                  default:                      uint length = (uint)(General.ShiftR(w0' 0' 8) + 1);                      uint shift = (uint)(32 - General.ShiftR(w0' 8' 8) - length);                      uint mask = (uint)(((1 << (int)length) - 1) << (int)shift);                        OtherModeH &= ~mask;                      OtherModeH |= w1 & mask;                      break;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetOtherModeH,The following statement contains a magic number: switch ((General.OtherModeHShifts)(32 - General.ShiftR(w0' 8' 8) - (General.ShiftR(w0' 0' 8) + 1)))              {                  case General.OtherModeHShifts.TEXTLUT:                      uint tlutmode = (w1 >> (int)General.OtherModeHShifts.TEXTLUT);                      break;                  default:                      uint length = (uint)(General.ShiftR(w0' 0' 8) + 1);                      uint shift = (uint)(32 - General.ShiftR(w0' 8' 8) - length);                      uint mask = (uint)(((1 << (int)length) - 1) << (int)shift);                        OtherModeH &= ~mask;                      OtherModeH |= w1 & mask;                      break;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetOtherModeH,The following statement contains a magic number: switch ((General.OtherModeHShifts)(32 - General.ShiftR(w0' 8' 8) - (General.ShiftR(w0' 0' 8) + 1)))              {                  case General.OtherModeHShifts.TEXTLUT:                      uint tlutmode = (w1 >> (int)General.OtherModeHShifts.TEXTLUT);                      break;                  default:                      uint length = (uint)(General.ShiftR(w0' 0' 8) + 1);                      uint shift = (uint)(32 - General.ShiftR(w0' 8' 8) - length);                      uint mask = (uint)(((1 << (int)length) - 1) << (int)shift);                        OtherModeH &= ~mask;                      OtherModeH |= w1 & mask;                      break;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetOtherModeH,The following statement contains a magic number: switch ((General.OtherModeHShifts)(32 - General.ShiftR(w0' 8' 8) - (General.ShiftR(w0' 0' 8) + 1)))              {                  case General.OtherModeHShifts.TEXTLUT:                      uint tlutmode = (w1 >> (int)General.OtherModeHShifts.TEXTLUT);                      break;                  default:                      uint length = (uint)(General.ShiftR(w0' 0' 8) + 1);                      uint shift = (uint)(32 - General.ShiftR(w0' 8' 8) - length);                      uint mask = (uint)(((1 << (int)length) - 1) << (int)shift);                        OtherModeH &= ~mask;                      OtherModeH |= w1 & mask;                      break;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetOtherModeH,The following statement contains a magic number: switch ((General.OtherModeHShifts)(32 - General.ShiftR(w0' 8' 8) - (General.ShiftR(w0' 0' 8) + 1)))              {                  case General.OtherModeHShifts.TEXTLUT:                      uint tlutmode = (w1 >> (int)General.OtherModeHShifts.TEXTLUT);                      break;                  default:                      uint length = (uint)(General.ShiftR(w0' 0' 8) + 1);                      uint shift = (uint)(32 - General.ShiftR(w0' 8' 8) - length);                      uint mask = (uint)(((1 << (int)length) - 1) << (int)shift);                        OtherModeH &= ~mask;                      OtherModeH |= w1 & mask;                      break;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetOtherModeH,The following statement contains a magic number: switch ((General.OtherModeHShifts)(32 - General.ShiftR(w0' 8' 8) - (General.ShiftR(w0' 0' 8) + 1)))              {                  case General.OtherModeHShifts.TEXTLUT:                      uint tlutmode = (w1 >> (int)General.OtherModeHShifts.TEXTLUT);                      break;                  default:                      uint length = (uint)(General.ShiftR(w0' 0' 8) + 1);                      uint shift = (uint)(32 - General.ShiftR(w0' 8' 8) - length);                      uint mask = (uint)(((1 << (int)length) - 1) << (int)shift);                        OtherModeH &= ~mask;                      OtherModeH |= w1 & mask;                      break;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetOtherModeL,The following statement contains a magic number: (32 - ((w0 & 0x00FFFFFF) << 4 >> 4) - 1) == 3
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetOtherModeL,The following statement contains a magic number: (32 - ((w0 & 0x00FFFFFF) << 4 >> 4) - 1) == 3
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetOtherModeL,The following statement contains a magic number: (32 - ((w0 & 0x00FFFFFF) << 4 >> 4) - 1) == 3
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetOtherModeL,The following statement contains a magic number: (32 - ((w0 & 0x00FFFFFF) << 4 >> 4) - 1) == 3
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandTexture,The following statement contains a magic number: int s = General.ShiftR(w1' 16' 16);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandTexture,The following statement contains a magic number: int s = General.ShiftR(w1' 16' 16);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandTexture,The following statement contains a magic number: int t = General.ShiftR(w1' 0' 16);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandTexture,The following statement contains a magic number: ScaleS[0] = ScaleS[1] = ((float)(s + 1) / 65536.0f);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandTexture,The following statement contains a magic number: ScaleT[0] = ScaleT[1] = ((float)(t + 1) / 65536.0f);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTile,The following statement contains a magic number: Textures[activetex].Format = (byte)((w0 & 0xFF0000) >> 16);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTile,The following statement contains a magic number: Textures[activetex].CMS = (uint)General.ShiftR(w1' 8' 2);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTile,The following statement contains a magic number: Textures[activetex].CMS = (uint)General.ShiftR(w1' 8' 2);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTile,The following statement contains a magic number: Textures[activetex].CMT = (uint)General.ShiftR(w1' 18' 2);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTile,The following statement contains a magic number: Textures[activetex].CMT = (uint)General.ShiftR(w1' 18' 2);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTile,The following statement contains a magic number: Textures[activetex].LineSize = General.ShiftR(w0' 9' 9);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTile,The following statement contains a magic number: Textures[activetex].LineSize = General.ShiftR(w0' 9' 9);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTile,The following statement contains a magic number: Textures[activetex].Palette = General.ShiftR(w1' 20' 4);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTile,The following statement contains a magic number: Textures[activetex].Palette = General.ShiftR(w1' 20' 4);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTile,The following statement contains a magic number: Textures[activetex].ShiftS = General.ShiftR(w1' 0' 4);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTile,The following statement contains a magic number: Textures[activetex].ShiftT = General.ShiftR(w1' 10' 4);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTile,The following statement contains a magic number: Textures[activetex].ShiftT = General.ShiftR(w1' 10' 4);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTile,The following statement contains a magic number: Textures[activetex].MaskS = General.ShiftR(w1' 4' 4);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTile,The following statement contains a magic number: Textures[activetex].MaskS = General.ShiftR(w1' 4' 4);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTile,The following statement contains a magic number: Textures[activetex].MaskT = General.ShiftR(w1' 14' 4);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTile,The following statement contains a magic number: Textures[activetex].MaskT = General.ShiftR(w1' 14' 4);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTileSize,The following statement contains a magic number: uint ULS = (uint)General.ShiftR(w0' 12' 12);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTileSize,The following statement contains a magic number: uint ULS = (uint)General.ShiftR(w0' 12' 12);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTileSize,The following statement contains a magic number: uint ULT = (uint)General.ShiftR(w0' 0' 12);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTileSize,The following statement contains a magic number: uint LRS = (uint)General.ShiftR(w1' 12' 12);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTileSize,The following statement contains a magic number: uint LRS = (uint)General.ShiftR(w1' 12' 12);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTileSize,The following statement contains a magic number: uint LRT = (uint)General.ShiftR(w1' 0' 12);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTileSize,The following statement contains a magic number: Textures[activetex].Tile = General.ShiftR(w1' 24' 3);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTileSize,The following statement contains a magic number: Textures[activetex].Tile = General.ShiftR(w1' 24' 3);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTileSize,The following statement contains a magic number: Textures[activetex].ULS = General.ShiftR(ULS' 2' 10);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTileSize,The following statement contains a magic number: Textures[activetex].ULS = General.ShiftR(ULS' 2' 10);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTileSize,The following statement contains a magic number: Textures[activetex].ULT = General.ShiftR(ULT' 2' 10);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTileSize,The following statement contains a magic number: Textures[activetex].ULT = General.ShiftR(ULT' 2' 10);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTileSize,The following statement contains a magic number: Textures[activetex].LRS = General.ShiftR(LRS' 2' 10);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTileSize,The following statement contains a magic number: Textures[activetex].LRS = General.ShiftR(LRS' 2' 10);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTileSize,The following statement contains a magic number: Textures[activetex].LRT = General.ShiftR(LRT' 2' 10);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetTileSize,The following statement contains a magic number: Textures[activetex].LRT = General.ShiftR(LRT' 2' 10);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetPrimColor,The following statement contains a magic number: PrimColor = new Color4(                  General.ShiftR(w1' 24' 8) * 0.0039215689f'                  General.ShiftR(w1' 16' 8) * 0.0039215689f'                  General.ShiftR(w1' 8' 8) * 0.0039215689f'                  General.ShiftR(w1' 0' 8) * 0.0039215689f);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetPrimColor,The following statement contains a magic number: PrimColor = new Color4(                  General.ShiftR(w1' 24' 8) * 0.0039215689f'                  General.ShiftR(w1' 16' 8) * 0.0039215689f'                  General.ShiftR(w1' 8' 8) * 0.0039215689f'                  General.ShiftR(w1' 0' 8) * 0.0039215689f);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetPrimColor,The following statement contains a magic number: PrimColor = new Color4(                  General.ShiftR(w1' 24' 8) * 0.0039215689f'                  General.ShiftR(w1' 16' 8) * 0.0039215689f'                  General.ShiftR(w1' 8' 8) * 0.0039215689f'                  General.ShiftR(w1' 0' 8) * 0.0039215689f);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetPrimColor,The following statement contains a magic number: PrimColor = new Color4(                  General.ShiftR(w1' 24' 8) * 0.0039215689f'                  General.ShiftR(w1' 16' 8) * 0.0039215689f'                  General.ShiftR(w1' 8' 8) * 0.0039215689f'                  General.ShiftR(w1' 0' 8) * 0.0039215689f);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetPrimColor,The following statement contains a magic number: PrimColor = new Color4(                  General.ShiftR(w1' 24' 8) * 0.0039215689f'                  General.ShiftR(w1' 16' 8) * 0.0039215689f'                  General.ShiftR(w1' 8' 8) * 0.0039215689f'                  General.ShiftR(w1' 0' 8) * 0.0039215689f);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetPrimColor,The following statement contains a magic number: PrimColor = new Color4(                  General.ShiftR(w1' 24' 8) * 0.0039215689f'                  General.ShiftR(w1' 16' 8) * 0.0039215689f'                  General.ShiftR(w1' 8' 8) * 0.0039215689f'                  General.ShiftR(w1' 0' 8) * 0.0039215689f);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetPrimColor,The following statement contains a magic number: PrimColor = new Color4(                  General.ShiftR(w1' 24' 8) * 0.0039215689f'                  General.ShiftR(w1' 16' 8) * 0.0039215689f'                  General.ShiftR(w1' 8' 8) * 0.0039215689f'                  General.ShiftR(w1' 0' 8) * 0.0039215689f);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetPrimColor,The following statement contains a magic number: PrimColor = new Color4(                  General.ShiftR(w1' 24' 8) * 0.0039215689f'                  General.ShiftR(w1' 16' 8) * 0.0039215689f'                  General.ShiftR(w1' 8' 8) * 0.0039215689f'                  General.ShiftR(w1' 0' 8) * 0.0039215689f);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetPrimColor,The following statement contains a magic number: PrimColor = new Color4(                  General.ShiftR(w1' 24' 8) * 0.0039215689f'                  General.ShiftR(w1' 16' 8) * 0.0039215689f'                  General.ShiftR(w1' 8' 8) * 0.0039215689f'                  General.ShiftR(w1' 0' 8) * 0.0039215689f);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetPrimColor,The following statement contains a magic number: PrimColor = new Color4(                  General.ShiftR(w1' 24' 8) * 0.0039215689f'                  General.ShiftR(w1' 16' 8) * 0.0039215689f'                  General.ShiftR(w1' 8' 8) * 0.0039215689f'                  General.ShiftR(w1' 0' 8) * 0.0039215689f);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetPrimColor,The following statement contains a magic number: PrimColor = new Color4(                  General.ShiftR(w1' 24' 8) * 0.0039215689f'                  General.ShiftR(w1' 16' 8) * 0.0039215689f'                  General.ShiftR(w1' 8' 8) * 0.0039215689f'                  General.ShiftR(w1' 0' 8) * 0.0039215689f);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetPrimColor,The following statement contains a magic number: float m = (float)General.ShiftL(w0' 8' 8);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetPrimColor,The following statement contains a magic number: float m = (float)General.ShiftL(w0' 8' 8);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetPrimColor,The following statement contains a magic number: float l = (float)General.ShiftL(w0' 0' 8) * 0.0039215689f;
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetPrimColor,The following statement contains a magic number: float l = (float)General.ShiftL(w0' 0' 8) * 0.0039215689f;
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetPrimColor,The following statement contains a magic number: GL.Arb.ProgramEnvParameter4(AssemblyProgramTargetArb.FragmentProgram' 2' l' l' l' l);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetEnvColor,The following statement contains a magic number: EnvColor = new Color4(                  General.ShiftR(w1' 24' 8) * 0.0039215689f'                  General.ShiftR(w1' 16' 8) * 0.0039215689f'                  General.ShiftR(w1' 8' 8) * 0.0039215689f'                  General.ShiftR(w1' 0' 8) * 0.0039215689f);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetEnvColor,The following statement contains a magic number: EnvColor = new Color4(                  General.ShiftR(w1' 24' 8) * 0.0039215689f'                  General.ShiftR(w1' 16' 8) * 0.0039215689f'                  General.ShiftR(w1' 8' 8) * 0.0039215689f'                  General.ShiftR(w1' 0' 8) * 0.0039215689f);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetEnvColor,The following statement contains a magic number: EnvColor = new Color4(                  General.ShiftR(w1' 24' 8) * 0.0039215689f'                  General.ShiftR(w1' 16' 8) * 0.0039215689f'                  General.ShiftR(w1' 8' 8) * 0.0039215689f'                  General.ShiftR(w1' 0' 8) * 0.0039215689f);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetEnvColor,The following statement contains a magic number: EnvColor = new Color4(                  General.ShiftR(w1' 24' 8) * 0.0039215689f'                  General.ShiftR(w1' 16' 8) * 0.0039215689f'                  General.ShiftR(w1' 8' 8) * 0.0039215689f'                  General.ShiftR(w1' 0' 8) * 0.0039215689f);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetEnvColor,The following statement contains a magic number: EnvColor = new Color4(                  General.ShiftR(w1' 24' 8) * 0.0039215689f'                  General.ShiftR(w1' 16' 8) * 0.0039215689f'                  General.ShiftR(w1' 8' 8) * 0.0039215689f'                  General.ShiftR(w1' 0' 8) * 0.0039215689f);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetEnvColor,The following statement contains a magic number: EnvColor = new Color4(                  General.ShiftR(w1' 24' 8) * 0.0039215689f'                  General.ShiftR(w1' 16' 8) * 0.0039215689f'                  General.ShiftR(w1' 8' 8) * 0.0039215689f'                  General.ShiftR(w1' 0' 8) * 0.0039215689f);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetEnvColor,The following statement contains a magic number: EnvColor = new Color4(                  General.ShiftR(w1' 24' 8) * 0.0039215689f'                  General.ShiftR(w1' 16' 8) * 0.0039215689f'                  General.ShiftR(w1' 8' 8) * 0.0039215689f'                  General.ShiftR(w1' 0' 8) * 0.0039215689f);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetEnvColor,The following statement contains a magic number: EnvColor = new Color4(                  General.ShiftR(w1' 24' 8) * 0.0039215689f'                  General.ShiftR(w1' 16' 8) * 0.0039215689f'                  General.ShiftR(w1' 8' 8) * 0.0039215689f'                  General.ShiftR(w1' 0' 8) * 0.0039215689f);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetEnvColor,The following statement contains a magic number: EnvColor = new Color4(                  General.ShiftR(w1' 24' 8) * 0.0039215689f'                  General.ShiftR(w1' 16' 8) * 0.0039215689f'                  General.ShiftR(w1' 8' 8) * 0.0039215689f'                  General.ShiftR(w1' 0' 8) * 0.0039215689f);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetEnvColor,The following statement contains a magic number: EnvColor = new Color4(                  General.ShiftR(w1' 24' 8) * 0.0039215689f'                  General.ShiftR(w1' 16' 8) * 0.0039215689f'                  General.ShiftR(w1' 8' 8) * 0.0039215689f'                  General.ShiftR(w1' 0' 8) * 0.0039215689f);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CommandSetEnvColor,The following statement contains a magic number: EnvColor = new Color4(                  General.ShiftR(w1' 24' 8) * 0.0039215689f'                  General.ShiftR(w1' 16' 8) * 0.0039215689f'                  General.ShiftR(w1' 8' 8) * 0.0039215689f'                  General.ShiftR(w1' 0' 8) * 0.0039215689f);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CheckTextureCache,The following statement contains a magic number: object tag = ROM.SegmentMapping[(byte)(Textures[tx].Address >> 24)];
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,LoadTexture,The following statement contains a magic number: byte seg = (byte)(adr >> 24);
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,LoadTexture,The following statement contains a magic number: byte[] texbuf = new byte[Textures[tx].RealWidth * Textures[tx].RealHeight * 4];
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,LoadTexture,The following statement contains a magic number: Textures[tx].CMS == 2 || Textures[tx].CMS == 3
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,LoadTexture,The following statement contains a magic number: Textures[tx].CMS == 2 || Textures[tx].CMS == 3
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,LoadTexture,The following statement contains a magic number: Textures[tx].CMT == 2 || Textures[tx].CMT == 3
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,LoadTexture,The following statement contains a magic number: Textures[tx].CMT == 2 || Textures[tx].CMT == 3
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: switch (Textures[tx].Format)              {                  /* 4-bit */                  case 0x00:                      // RGBA                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x40:                      // CI                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x60:                      // IA                      MaxTexel = 8192; LineShift = 4;                      break;                  case 0x80:                      // I                      MaxTexel = 8192; LineShift = 4;                      break;                    /* 8-bit */                  case 0x08:                      // RGBA                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x48:                      // CI                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x68:                      // IA                      MaxTexel = 4096; LineShift = 3;                      break;                  case 0x88:                      // I                      MaxTexel = 4096; LineShift = 3;                      break;                    /* 16-bit */                  case 0x10:                      // RGBA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x50:                      // CI                      MaxTexel = 2048; LineShift = 0;                      break;                  case 0x70:                      // IA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x90:                      // I                      MaxTexel = 2048; LineShift = 0;                      break;                    /* 32-bit */                  case 0x18:                      // RGBA                      MaxTexel = 1024; LineShift = 2;                      break;                    default:                      return;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: switch (Textures[tx].Format)              {                  /* 4-bit */                  case 0x00:                      // RGBA                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x40:                      // CI                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x60:                      // IA                      MaxTexel = 8192; LineShift = 4;                      break;                  case 0x80:                      // I                      MaxTexel = 8192; LineShift = 4;                      break;                    /* 8-bit */                  case 0x08:                      // RGBA                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x48:                      // CI                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x68:                      // IA                      MaxTexel = 4096; LineShift = 3;                      break;                  case 0x88:                      // I                      MaxTexel = 4096; LineShift = 3;                      break;                    /* 16-bit */                  case 0x10:                      // RGBA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x50:                      // CI                      MaxTexel = 2048; LineShift = 0;                      break;                  case 0x70:                      // IA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x90:                      // I                      MaxTexel = 2048; LineShift = 0;                      break;                    /* 32-bit */                  case 0x18:                      // RGBA                      MaxTexel = 1024; LineShift = 2;                      break;                    default:                      return;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: switch (Textures[tx].Format)              {                  /* 4-bit */                  case 0x00:                      // RGBA                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x40:                      // CI                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x60:                      // IA                      MaxTexel = 8192; LineShift = 4;                      break;                  case 0x80:                      // I                      MaxTexel = 8192; LineShift = 4;                      break;                    /* 8-bit */                  case 0x08:                      // RGBA                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x48:                      // CI                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x68:                      // IA                      MaxTexel = 4096; LineShift = 3;                      break;                  case 0x88:                      // I                      MaxTexel = 4096; LineShift = 3;                      break;                    /* 16-bit */                  case 0x10:                      // RGBA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x50:                      // CI                      MaxTexel = 2048; LineShift = 0;                      break;                  case 0x70:                      // IA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x90:                      // I                      MaxTexel = 2048; LineShift = 0;                      break;                    /* 32-bit */                  case 0x18:                      // RGBA                      MaxTexel = 1024; LineShift = 2;                      break;                    default:                      return;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: switch (Textures[tx].Format)              {                  /* 4-bit */                  case 0x00:                      // RGBA                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x40:                      // CI                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x60:                      // IA                      MaxTexel = 8192; LineShift = 4;                      break;                  case 0x80:                      // I                      MaxTexel = 8192; LineShift = 4;                      break;                    /* 8-bit */                  case 0x08:                      // RGBA                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x48:                      // CI                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x68:                      // IA                      MaxTexel = 4096; LineShift = 3;                      break;                  case 0x88:                      // I                      MaxTexel = 4096; LineShift = 3;                      break;                    /* 16-bit */                  case 0x10:                      // RGBA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x50:                      // CI                      MaxTexel = 2048; LineShift = 0;                      break;                  case 0x70:                      // IA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x90:                      // I                      MaxTexel = 2048; LineShift = 0;                      break;                    /* 32-bit */                  case 0x18:                      // RGBA                      MaxTexel = 1024; LineShift = 2;                      break;                    default:                      return;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: switch (Textures[tx].Format)              {                  /* 4-bit */                  case 0x00:                      // RGBA                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x40:                      // CI                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x60:                      // IA                      MaxTexel = 8192; LineShift = 4;                      break;                  case 0x80:                      // I                      MaxTexel = 8192; LineShift = 4;                      break;                    /* 8-bit */                  case 0x08:                      // RGBA                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x48:                      // CI                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x68:                      // IA                      MaxTexel = 4096; LineShift = 3;                      break;                  case 0x88:                      // I                      MaxTexel = 4096; LineShift = 3;                      break;                    /* 16-bit */                  case 0x10:                      // RGBA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x50:                      // CI                      MaxTexel = 2048; LineShift = 0;                      break;                  case 0x70:                      // IA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x90:                      // I                      MaxTexel = 2048; LineShift = 0;                      break;                    /* 32-bit */                  case 0x18:                      // RGBA                      MaxTexel = 1024; LineShift = 2;                      break;                    default:                      return;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: switch (Textures[tx].Format)              {                  /* 4-bit */                  case 0x00:                      // RGBA                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x40:                      // CI                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x60:                      // IA                      MaxTexel = 8192; LineShift = 4;                      break;                  case 0x80:                      // I                      MaxTexel = 8192; LineShift = 4;                      break;                    /* 8-bit */                  case 0x08:                      // RGBA                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x48:                      // CI                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x68:                      // IA                      MaxTexel = 4096; LineShift = 3;                      break;                  case 0x88:                      // I                      MaxTexel = 4096; LineShift = 3;                      break;                    /* 16-bit */                  case 0x10:                      // RGBA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x50:                      // CI                      MaxTexel = 2048; LineShift = 0;                      break;                  case 0x70:                      // IA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x90:                      // I                      MaxTexel = 2048; LineShift = 0;                      break;                    /* 32-bit */                  case 0x18:                      // RGBA                      MaxTexel = 1024; LineShift = 2;                      break;                    default:                      return;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: switch (Textures[tx].Format)              {                  /* 4-bit */                  case 0x00:                      // RGBA                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x40:                      // CI                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x60:                      // IA                      MaxTexel = 8192; LineShift = 4;                      break;                  case 0x80:                      // I                      MaxTexel = 8192; LineShift = 4;                      break;                    /* 8-bit */                  case 0x08:                      // RGBA                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x48:                      // CI                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x68:                      // IA                      MaxTexel = 4096; LineShift = 3;                      break;                  case 0x88:                      // I                      MaxTexel = 4096; LineShift = 3;                      break;                    /* 16-bit */                  case 0x10:                      // RGBA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x50:                      // CI                      MaxTexel = 2048; LineShift = 0;                      break;                  case 0x70:                      // IA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x90:                      // I                      MaxTexel = 2048; LineShift = 0;                      break;                    /* 32-bit */                  case 0x18:                      // RGBA                      MaxTexel = 1024; LineShift = 2;                      break;                    default:                      return;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: switch (Textures[tx].Format)              {                  /* 4-bit */                  case 0x00:                      // RGBA                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x40:                      // CI                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x60:                      // IA                      MaxTexel = 8192; LineShift = 4;                      break;                  case 0x80:                      // I                      MaxTexel = 8192; LineShift = 4;                      break;                    /* 8-bit */                  case 0x08:                      // RGBA                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x48:                      // CI                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x68:                      // IA                      MaxTexel = 4096; LineShift = 3;                      break;                  case 0x88:                      // I                      MaxTexel = 4096; LineShift = 3;                      break;                    /* 16-bit */                  case 0x10:                      // RGBA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x50:                      // CI                      MaxTexel = 2048; LineShift = 0;                      break;                  case 0x70:                      // IA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x90:                      // I                      MaxTexel = 2048; LineShift = 0;                      break;                    /* 32-bit */                  case 0x18:                      // RGBA                      MaxTexel = 1024; LineShift = 2;                      break;                    default:                      return;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: switch (Textures[tx].Format)              {                  /* 4-bit */                  case 0x00:                      // RGBA                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x40:                      // CI                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x60:                      // IA                      MaxTexel = 8192; LineShift = 4;                      break;                  case 0x80:                      // I                      MaxTexel = 8192; LineShift = 4;                      break;                    /* 8-bit */                  case 0x08:                      // RGBA                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x48:                      // CI                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x68:                      // IA                      MaxTexel = 4096; LineShift = 3;                      break;                  case 0x88:                      // I                      MaxTexel = 4096; LineShift = 3;                      break;                    /* 16-bit */                  case 0x10:                      // RGBA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x50:                      // CI                      MaxTexel = 2048; LineShift = 0;                      break;                  case 0x70:                      // IA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x90:                      // I                      MaxTexel = 2048; LineShift = 0;                      break;                    /* 32-bit */                  case 0x18:                      // RGBA                      MaxTexel = 1024; LineShift = 2;                      break;                    default:                      return;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: switch (Textures[tx].Format)              {                  /* 4-bit */                  case 0x00:                      // RGBA                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x40:                      // CI                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x60:                      // IA                      MaxTexel = 8192; LineShift = 4;                      break;                  case 0x80:                      // I                      MaxTexel = 8192; LineShift = 4;                      break;                    /* 8-bit */                  case 0x08:                      // RGBA                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x48:                      // CI                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x68:                      // IA                      MaxTexel = 4096; LineShift = 3;                      break;                  case 0x88:                      // I                      MaxTexel = 4096; LineShift = 3;                      break;                    /* 16-bit */                  case 0x10:                      // RGBA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x50:                      // CI                      MaxTexel = 2048; LineShift = 0;                      break;                  case 0x70:                      // IA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x90:                      // I                      MaxTexel = 2048; LineShift = 0;                      break;                    /* 32-bit */                  case 0x18:                      // RGBA                      MaxTexel = 1024; LineShift = 2;                      break;                    default:                      return;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: switch (Textures[tx].Format)              {                  /* 4-bit */                  case 0x00:                      // RGBA                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x40:                      // CI                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x60:                      // IA                      MaxTexel = 8192; LineShift = 4;                      break;                  case 0x80:                      // I                      MaxTexel = 8192; LineShift = 4;                      break;                    /* 8-bit */                  case 0x08:                      // RGBA                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x48:                      // CI                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x68:                      // IA                      MaxTexel = 4096; LineShift = 3;                      break;                  case 0x88:                      // I                      MaxTexel = 4096; LineShift = 3;                      break;                    /* 16-bit */                  case 0x10:                      // RGBA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x50:                      // CI                      MaxTexel = 2048; LineShift = 0;                      break;                  case 0x70:                      // IA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x90:                      // I                      MaxTexel = 2048; LineShift = 0;                      break;                    /* 32-bit */                  case 0x18:                      // RGBA                      MaxTexel = 1024; LineShift = 2;                      break;                    default:                      return;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: switch (Textures[tx].Format)              {                  /* 4-bit */                  case 0x00:                      // RGBA                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x40:                      // CI                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x60:                      // IA                      MaxTexel = 8192; LineShift = 4;                      break;                  case 0x80:                      // I                      MaxTexel = 8192; LineShift = 4;                      break;                    /* 8-bit */                  case 0x08:                      // RGBA                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x48:                      // CI                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x68:                      // IA                      MaxTexel = 4096; LineShift = 3;                      break;                  case 0x88:                      // I                      MaxTexel = 4096; LineShift = 3;                      break;                    /* 16-bit */                  case 0x10:                      // RGBA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x50:                      // CI                      MaxTexel = 2048; LineShift = 0;                      break;                  case 0x70:                      // IA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x90:                      // I                      MaxTexel = 2048; LineShift = 0;                      break;                    /* 32-bit */                  case 0x18:                      // RGBA                      MaxTexel = 1024; LineShift = 2;                      break;                    default:                      return;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: switch (Textures[tx].Format)              {                  /* 4-bit */                  case 0x00:                      // RGBA                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x40:                      // CI                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x60:                      // IA                      MaxTexel = 8192; LineShift = 4;                      break;                  case 0x80:                      // I                      MaxTexel = 8192; LineShift = 4;                      break;                    /* 8-bit */                  case 0x08:                      // RGBA                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x48:                      // CI                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x68:                      // IA                      MaxTexel = 4096; LineShift = 3;                      break;                  case 0x88:                      // I                      MaxTexel = 4096; LineShift = 3;                      break;                    /* 16-bit */                  case 0x10:                      // RGBA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x50:                      // CI                      MaxTexel = 2048; LineShift = 0;                      break;                  case 0x70:                      // IA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x90:                      // I                      MaxTexel = 2048; LineShift = 0;                      break;                    /* 32-bit */                  case 0x18:                      // RGBA                      MaxTexel = 1024; LineShift = 2;                      break;                    default:                      return;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: switch (Textures[tx].Format)              {                  /* 4-bit */                  case 0x00:                      // RGBA                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x40:                      // CI                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x60:                      // IA                      MaxTexel = 8192; LineShift = 4;                      break;                  case 0x80:                      // I                      MaxTexel = 8192; LineShift = 4;                      break;                    /* 8-bit */                  case 0x08:                      // RGBA                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x48:                      // CI                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x68:                      // IA                      MaxTexel = 4096; LineShift = 3;                      break;                  case 0x88:                      // I                      MaxTexel = 4096; LineShift = 3;                      break;                    /* 16-bit */                  case 0x10:                      // RGBA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x50:                      // CI                      MaxTexel = 2048; LineShift = 0;                      break;                  case 0x70:                      // IA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x90:                      // I                      MaxTexel = 2048; LineShift = 0;                      break;                    /* 32-bit */                  case 0x18:                      // RGBA                      MaxTexel = 1024; LineShift = 2;                      break;                    default:                      return;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: switch (Textures[tx].Format)              {                  /* 4-bit */                  case 0x00:                      // RGBA                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x40:                      // CI                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x60:                      // IA                      MaxTexel = 8192; LineShift = 4;                      break;                  case 0x80:                      // I                      MaxTexel = 8192; LineShift = 4;                      break;                    /* 8-bit */                  case 0x08:                      // RGBA                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x48:                      // CI                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x68:                      // IA                      MaxTexel = 4096; LineShift = 3;                      break;                  case 0x88:                      // I                      MaxTexel = 4096; LineShift = 3;                      break;                    /* 16-bit */                  case 0x10:                      // RGBA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x50:                      // CI                      MaxTexel = 2048; LineShift = 0;                      break;                  case 0x70:                      // IA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x90:                      // I                      MaxTexel = 2048; LineShift = 0;                      break;                    /* 32-bit */                  case 0x18:                      // RGBA                      MaxTexel = 1024; LineShift = 2;                      break;                    default:                      return;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: switch (Textures[tx].Format)              {                  /* 4-bit */                  case 0x00:                      // RGBA                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x40:                      // CI                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x60:                      // IA                      MaxTexel = 8192; LineShift = 4;                      break;                  case 0x80:                      // I                      MaxTexel = 8192; LineShift = 4;                      break;                    /* 8-bit */                  case 0x08:                      // RGBA                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x48:                      // CI                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x68:                      // IA                      MaxTexel = 4096; LineShift = 3;                      break;                  case 0x88:                      // I                      MaxTexel = 4096; LineShift = 3;                      break;                    /* 16-bit */                  case 0x10:                      // RGBA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x50:                      // CI                      MaxTexel = 2048; LineShift = 0;                      break;                  case 0x70:                      // IA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x90:                      // I                      MaxTexel = 2048; LineShift = 0;                      break;                    /* 32-bit */                  case 0x18:                      // RGBA                      MaxTexel = 1024; LineShift = 2;                      break;                    default:                      return;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: switch (Textures[tx].Format)              {                  /* 4-bit */                  case 0x00:                      // RGBA                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x40:                      // CI                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x60:                      // IA                      MaxTexel = 8192; LineShift = 4;                      break;                  case 0x80:                      // I                      MaxTexel = 8192; LineShift = 4;                      break;                    /* 8-bit */                  case 0x08:                      // RGBA                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x48:                      // CI                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x68:                      // IA                      MaxTexel = 4096; LineShift = 3;                      break;                  case 0x88:                      // I                      MaxTexel = 4096; LineShift = 3;                      break;                    /* 16-bit */                  case 0x10:                      // RGBA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x50:                      // CI                      MaxTexel = 2048; LineShift = 0;                      break;                  case 0x70:                      // IA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x90:                      // I                      MaxTexel = 2048; LineShift = 0;                      break;                    /* 32-bit */                  case 0x18:                      // RGBA                      MaxTexel = 1024; LineShift = 2;                      break;                    default:                      return;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: switch (Textures[tx].Format)              {                  /* 4-bit */                  case 0x00:                      // RGBA                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x40:                      // CI                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x60:                      // IA                      MaxTexel = 8192; LineShift = 4;                      break;                  case 0x80:                      // I                      MaxTexel = 8192; LineShift = 4;                      break;                    /* 8-bit */                  case 0x08:                      // RGBA                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x48:                      // CI                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x68:                      // IA                      MaxTexel = 4096; LineShift = 3;                      break;                  case 0x88:                      // I                      MaxTexel = 4096; LineShift = 3;                      break;                    /* 16-bit */                  case 0x10:                      // RGBA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x50:                      // CI                      MaxTexel = 2048; LineShift = 0;                      break;                  case 0x70:                      // IA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x90:                      // I                      MaxTexel = 2048; LineShift = 0;                      break;                    /* 32-bit */                  case 0x18:                      // RGBA                      MaxTexel = 1024; LineShift = 2;                      break;                    default:                      return;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: switch (Textures[tx].Format)              {                  /* 4-bit */                  case 0x00:                      // RGBA                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x40:                      // CI                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x60:                      // IA                      MaxTexel = 8192; LineShift = 4;                      break;                  case 0x80:                      // I                      MaxTexel = 8192; LineShift = 4;                      break;                    /* 8-bit */                  case 0x08:                      // RGBA                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x48:                      // CI                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x68:                      // IA                      MaxTexel = 4096; LineShift = 3;                      break;                  case 0x88:                      // I                      MaxTexel = 4096; LineShift = 3;                      break;                    /* 16-bit */                  case 0x10:                      // RGBA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x50:                      // CI                      MaxTexel = 2048; LineShift = 0;                      break;                  case 0x70:                      // IA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x90:                      // I                      MaxTexel = 2048; LineShift = 0;                      break;                    /* 32-bit */                  case 0x18:                      // RGBA                      MaxTexel = 1024; LineShift = 2;                      break;                    default:                      return;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: switch (Textures[tx].Format)              {                  /* 4-bit */                  case 0x00:                      // RGBA                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x40:                      // CI                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x60:                      // IA                      MaxTexel = 8192; LineShift = 4;                      break;                  case 0x80:                      // I                      MaxTexel = 8192; LineShift = 4;                      break;                    /* 8-bit */                  case 0x08:                      // RGBA                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x48:                      // CI                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x68:                      // IA                      MaxTexel = 4096; LineShift = 3;                      break;                  case 0x88:                      // I                      MaxTexel = 4096; LineShift = 3;                      break;                    /* 16-bit */                  case 0x10:                      // RGBA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x50:                      // CI                      MaxTexel = 2048; LineShift = 0;                      break;                  case 0x70:                      // IA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x90:                      // I                      MaxTexel = 2048; LineShift = 0;                      break;                    /* 32-bit */                  case 0x18:                      // RGBA                      MaxTexel = 1024; LineShift = 2;                      break;                    default:                      return;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: switch (Textures[tx].Format)              {                  /* 4-bit */                  case 0x00:                      // RGBA                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x40:                      // CI                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x60:                      // IA                      MaxTexel = 8192; LineShift = 4;                      break;                  case 0x80:                      // I                      MaxTexel = 8192; LineShift = 4;                      break;                    /* 8-bit */                  case 0x08:                      // RGBA                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x48:                      // CI                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x68:                      // IA                      MaxTexel = 4096; LineShift = 3;                      break;                  case 0x88:                      // I                      MaxTexel = 4096; LineShift = 3;                      break;                    /* 16-bit */                  case 0x10:                      // RGBA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x50:                      // CI                      MaxTexel = 2048; LineShift = 0;                      break;                  case 0x70:                      // IA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x90:                      // I                      MaxTexel = 2048; LineShift = 0;                      break;                    /* 32-bit */                  case 0x18:                      // RGBA                      MaxTexel = 1024; LineShift = 2;                      break;                    default:                      return;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: switch (Textures[tx].Format)              {                  /* 4-bit */                  case 0x00:                      // RGBA                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x40:                      // CI                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x60:                      // IA                      MaxTexel = 8192; LineShift = 4;                      break;                  case 0x80:                      // I                      MaxTexel = 8192; LineShift = 4;                      break;                    /* 8-bit */                  case 0x08:                      // RGBA                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x48:                      // CI                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x68:                      // IA                      MaxTexel = 4096; LineShift = 3;                      break;                  case 0x88:                      // I                      MaxTexel = 4096; LineShift = 3;                      break;                    /* 16-bit */                  case 0x10:                      // RGBA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x50:                      // CI                      MaxTexel = 2048; LineShift = 0;                      break;                  case 0x70:                      // IA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x90:                      // I                      MaxTexel = 2048; LineShift = 0;                      break;                    /* 32-bit */                  case 0x18:                      // RGBA                      MaxTexel = 1024; LineShift = 2;                      break;                    default:                      return;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: switch (Textures[tx].Format)              {                  /* 4-bit */                  case 0x00:                      // RGBA                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x40:                      // CI                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x60:                      // IA                      MaxTexel = 8192; LineShift = 4;                      break;                  case 0x80:                      // I                      MaxTexel = 8192; LineShift = 4;                      break;                    /* 8-bit */                  case 0x08:                      // RGBA                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x48:                      // CI                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x68:                      // IA                      MaxTexel = 4096; LineShift = 3;                      break;                  case 0x88:                      // I                      MaxTexel = 4096; LineShift = 3;                      break;                    /* 16-bit */                  case 0x10:                      // RGBA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x50:                      // CI                      MaxTexel = 2048; LineShift = 0;                      break;                  case 0x70:                      // IA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x90:                      // I                      MaxTexel = 2048; LineShift = 0;                      break;                    /* 32-bit */                  case 0x18:                      // RGBA                      MaxTexel = 1024; LineShift = 2;                      break;                    default:                      return;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: switch (Textures[tx].Format)              {                  /* 4-bit */                  case 0x00:                      // RGBA                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x40:                      // CI                      MaxTexel = 4096; LineShift = 4;                      break;                  case 0x60:                      // IA                      MaxTexel = 8192; LineShift = 4;                      break;                  case 0x80:                      // I                      MaxTexel = 8192; LineShift = 4;                      break;                    /* 8-bit */                  case 0x08:                      // RGBA                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x48:                      // CI                      MaxTexel = 2048; LineShift = 3;                      break;                  case 0x68:                      // IA                      MaxTexel = 4096; LineShift = 3;                      break;                  case 0x88:                      // I                      MaxTexel = 4096; LineShift = 3;                      break;                    /* 16-bit */                  case 0x10:                      // RGBA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x50:                      // CI                      MaxTexel = 2048; LineShift = 0;                      break;                  case 0x70:                      // IA                      MaxTexel = 2048; LineShift = 2;                      break;                  case 0x90:                      // I                      MaxTexel = 2048; LineShift = 0;                      break;                    /* 32-bit */                  case 0x18:                      // RGBA                      MaxTexel = 1024; LineShift = 2;                      break;                    default:                      return;              }
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: Clamp_Width > 256
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: Clamp_Height > 256
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: Textures[tx].CMS == 2 || Textures[tx].CMS == 3
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: Textures[tx].CMS == 2 || Textures[tx].CMS == 3
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: Textures[tx].CMT == 2 || Textures[tx].CMT == 3
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: Textures[tx].CMT == 2 || Textures[tx].CMT == 3
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: Textures[tx].ShiftScaleS = (float)(1 << (int)(16 - Textures[tx].ShiftS));
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: Textures[tx].ShiftS > 10
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: Textures[tx].ShiftScaleT = (float)(1 << (16 - (int)Textures[tx].ShiftT));
Magic Number,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,CalculateTextureSize,The following statement contains a magic number: Textures[tx].ShiftT > 10
Magic Number,SceneNavi.SimpleF3DEX2,General,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\General.cs,PerformModeChanges,The following statement contains a magic number: GL.PolygonOffset(-0.5f' -0.5f);
Magic Number,SceneNavi.SimpleF3DEX2,General,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\General.cs,PerformModeChanges,The following statement contains a magic number: GL.PolygonOffset(-0.5f' -0.5f);
Magic Number,SceneNavi.SimpleF3DEX2,General,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\General.cs,PerformModeChanges,The following statement contains a magic number: GL.AlphaFunc(AlphaFunction.Gequal' 0.125f);
Magic Number,SceneNavi.SimpleF3DEX2,General,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\General.cs,PerformModeChanges,The following statement contains a magic number: switch (f3dex2.OtherModeL.Data >> 16)              {                  case 0x0448:                  case 0x055A:                      GL.BlendFunc(BlendingFactorSrc.One' BlendingFactorDest.One);                      break;                  case 0x0382:                  case 0x0091:                  case 0x0C08:                  case 0x0F0A:                  case 0x0302:                      GL.BlendFunc(BlendingFactorSrc.One' BlendingFactorDest.Zero);                      break;                  case 0xAF50:                  case 0x0F5A:                  case 0x0FA5:                  case 0x5055:                      GL.BlendFunc(BlendingFactorSrc.Zero' BlendingFactorDest.One);                      break;                  case 0x5F50:                      GL.BlendFunc(BlendingFactorSrc.Zero' BlendingFactorDest.OneMinusSrcAlpha);                      break;                  default:                      GL.BlendFunc(BlendingFactorSrc.SrcAlpha' BlendingFactorDest.OneMinusSrcAlpha);                      break;              }
Magic Number,SceneNavi.SimpleF3DEX2,General,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\General.cs,RenderTriangles,The following statement contains a magic number: double[] S = new double[2]' T = new double[2];
Magic Number,SceneNavi.SimpleF3DEX2,General,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\General.cs,RenderTriangles,The following statement contains a magic number: double[] S = new double[2]' T = new double[2];
Magic Number,SceneNavi.SimpleF3DEX2,General,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\General.cs,RenderTriangles,The following statement contains a magic number: S[j] = (f3dex2.VertexBuffer[i].TexCoord.X * f3dex2.Textures[j].ShiftScaleS * f3dex2.ScaleS[j] -                              ((f3dex2.Textures[j].ULS * General.Fixed2Float[2]) % (float)(1 << f3dex2.Textures[j].MaskS))) * f3dex2.Textures[j].ScaleS;
Magic Number,SceneNavi.SimpleF3DEX2,General,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\General.cs,RenderTriangles,The following statement contains a magic number: T[j] = (f3dex2.VertexBuffer[i].TexCoord.Y * f3dex2.Textures[j].ShiftScaleT * f3dex2.ScaleT[j] -                              ((f3dex2.Textures[j].ULT * General.Fixed2Float[2]) % (float)(1 << f3dex2.Textures[j].MaskT))) * f3dex2.Textures[j].ScaleT;
Magic Number,SceneNavi.SimpleF3DEX2,SimpleTriangle,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\SimpleTriangle.cs,SimpleTriangle,The following statement contains a magic number: Vertices = new Vector3d[3];
Magic Number,SceneNavi.SimpleF3DEX2,SimpleTriangle,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\SimpleTriangle.cs,SimpleTriangle,The following statement contains a magic number: Vertices[2] = v3;
Magic Number,SceneNavi.SimpleF3DEX2,UnpackedCombinerMux,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\UnpackedCombinerMux.cs,UnpackedCombinerMux,The following statement contains a magic number: cA = new ComponentsC16[2];
Magic Number,SceneNavi.SimpleF3DEX2,UnpackedCombinerMux,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\UnpackedCombinerMux.cs,UnpackedCombinerMux,The following statement contains a magic number: cB = new ComponentsC16[2];
Magic Number,SceneNavi.SimpleF3DEX2,UnpackedCombinerMux,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\UnpackedCombinerMux.cs,UnpackedCombinerMux,The following statement contains a magic number: cC = new ComponentsC32[2];
Magic Number,SceneNavi.SimpleF3DEX2,UnpackedCombinerMux,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\UnpackedCombinerMux.cs,UnpackedCombinerMux,The following statement contains a magic number: cD = new ComponentsC8[2];
Magic Number,SceneNavi.SimpleF3DEX2,UnpackedCombinerMux,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\UnpackedCombinerMux.cs,UnpackedCombinerMux,The following statement contains a magic number: aA = new ComponentsA8[2];
Magic Number,SceneNavi.SimpleF3DEX2,UnpackedCombinerMux,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\UnpackedCombinerMux.cs,UnpackedCombinerMux,The following statement contains a magic number: aB = new ComponentsA8[2];
Magic Number,SceneNavi.SimpleF3DEX2,UnpackedCombinerMux,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\UnpackedCombinerMux.cs,UnpackedCombinerMux,The following statement contains a magic number: aC = new ComponentsA8[2];
Magic Number,SceneNavi.SimpleF3DEX2,UnpackedCombinerMux,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\UnpackedCombinerMux.cs,UnpackedCombinerMux,The following statement contains a magic number: aD = new ComponentsA8[2];
Magic Number,SceneNavi.SimpleF3DEX2,UnpackedCombinerMux,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\UnpackedCombinerMux.cs,UnpackedCombinerMux,The following statement contains a magic number: cA[0] = (ComponentsC16)(byte)((m0 >> 20) & 0x0F);
Magic Number,SceneNavi.SimpleF3DEX2,UnpackedCombinerMux,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\UnpackedCombinerMux.cs,UnpackedCombinerMux,The following statement contains a magic number: cB[0] = (ComponentsC16)(byte)((m1 >> 28) & 0x0F);
Magic Number,SceneNavi.SimpleF3DEX2,UnpackedCombinerMux,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\UnpackedCombinerMux.cs,UnpackedCombinerMux,The following statement contains a magic number: cC[0] = (ComponentsC32)(byte)((m0 >> 15) & 0x1F);
Magic Number,SceneNavi.SimpleF3DEX2,UnpackedCombinerMux,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\UnpackedCombinerMux.cs,UnpackedCombinerMux,The following statement contains a magic number: cD[0] = (ComponentsC8)(byte)((m1 >> 15) & 0x07);
Magic Number,SceneNavi.SimpleF3DEX2,UnpackedCombinerMux,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\UnpackedCombinerMux.cs,UnpackedCombinerMux,The following statement contains a magic number: aA[0] = (ComponentsA8)(byte)((m0 >> 12) & 0x07);
Magic Number,SceneNavi.SimpleF3DEX2,UnpackedCombinerMux,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\UnpackedCombinerMux.cs,UnpackedCombinerMux,The following statement contains a magic number: aB[0] = (ComponentsA8)(byte)((m1 >> 12) & 0x07);
Magic Number,SceneNavi.SimpleF3DEX2,UnpackedCombinerMux,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\UnpackedCombinerMux.cs,UnpackedCombinerMux,The following statement contains a magic number: aC[0] = (ComponentsA8)(byte)((m0 >> 9) & 0x07);
Magic Number,SceneNavi.SimpleF3DEX2,UnpackedCombinerMux,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\UnpackedCombinerMux.cs,UnpackedCombinerMux,The following statement contains a magic number: aD[0] = (ComponentsA8)(byte)((m1 >> 9) & 0x07);
Magic Number,SceneNavi.SimpleF3DEX2,UnpackedCombinerMux,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\UnpackedCombinerMux.cs,UnpackedCombinerMux,The following statement contains a magic number: cA[1] = (ComponentsC16)(byte)((m0 >> 5) & 0x0F);
Magic Number,SceneNavi.SimpleF3DEX2,UnpackedCombinerMux,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\UnpackedCombinerMux.cs,UnpackedCombinerMux,The following statement contains a magic number: cB[1] = (ComponentsC16)(byte)((m1 >> 24) & 0x0F);
Magic Number,SceneNavi.SimpleF3DEX2,UnpackedCombinerMux,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\UnpackedCombinerMux.cs,UnpackedCombinerMux,The following statement contains a magic number: cD[1] = (ComponentsC8)(byte)((m1 >> 6) & 0x07);
Magic Number,SceneNavi.SimpleF3DEX2,UnpackedCombinerMux,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\UnpackedCombinerMux.cs,UnpackedCombinerMux,The following statement contains a magic number: aA[1] = (ComponentsA8)(byte)((m1 >> 21) & 0x07);
Magic Number,SceneNavi.SimpleF3DEX2,UnpackedCombinerMux,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\UnpackedCombinerMux.cs,UnpackedCombinerMux,The following statement contains a magic number: aB[1] = (ComponentsA8)(byte)((m1 >> 3) & 0x07);
Magic Number,SceneNavi.SimpleF3DEX2,UnpackedCombinerMux,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\UnpackedCombinerMux.cs,UnpackedCombinerMux,The following statement contains a magic number: aC[1] = (ComponentsA8)(byte)((m1 >> 18) & 0x07);
Magic Number,SceneNavi.SimpleF3DEX2,Vertex,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\Vertex.cs,Vertex,The following statement contains a magic number: Position = new Vector3d(                  (double)Endian.SwapInt16(BitConverter.ToInt16(raw' (int)adr))'                  (double)Endian.SwapInt16(BitConverter.ToInt16(raw' (int)(adr + 2)))'                  (double)Endian.SwapInt16(BitConverter.ToInt16(raw' (int)(adr + 4))));
Magic Number,SceneNavi.SimpleF3DEX2,Vertex,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\Vertex.cs,Vertex,The following statement contains a magic number: Position = new Vector3d(                  (double)Endian.SwapInt16(BitConverter.ToInt16(raw' (int)adr))'                  (double)Endian.SwapInt16(BitConverter.ToInt16(raw' (int)(adr + 2)))'                  (double)Endian.SwapInt16(BitConverter.ToInt16(raw' (int)(adr + 4))));
Magic Number,SceneNavi.SimpleF3DEX2,Vertex,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\Vertex.cs,Vertex,The following statement contains a magic number: TexCoord = new Vector2d(                  (float)(Endian.SwapInt16(BitConverter.ToInt16(raw' (int)(adr + 8)))) * General.Fixed2Float[5]'                  (float)(Endian.SwapInt16(BitConverter.ToInt16(raw' (int)(adr + 10)))) * General.Fixed2Float[5]);
Magic Number,SceneNavi.SimpleF3DEX2,Vertex,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\Vertex.cs,Vertex,The following statement contains a magic number: TexCoord = new Vector2d(                  (float)(Endian.SwapInt16(BitConverter.ToInt16(raw' (int)(adr + 8)))) * General.Fixed2Float[5]'                  (float)(Endian.SwapInt16(BitConverter.ToInt16(raw' (int)(adr + 10)))) * General.Fixed2Float[5]);
Magic Number,SceneNavi.SimpleF3DEX2,Vertex,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\Vertex.cs,Vertex,The following statement contains a magic number: TexCoord = new Vector2d(                  (float)(Endian.SwapInt16(BitConverter.ToInt16(raw' (int)(adr + 8)))) * General.Fixed2Float[5]'                  (float)(Endian.SwapInt16(BitConverter.ToInt16(raw' (int)(adr + 10)))) * General.Fixed2Float[5]);
Magic Number,SceneNavi.SimpleF3DEX2,Vertex,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\Vertex.cs,Vertex,The following statement contains a magic number: TexCoord = new Vector2d(                  (float)(Endian.SwapInt16(BitConverter.ToInt16(raw' (int)(adr + 8)))) * General.Fixed2Float[5]'                  (float)(Endian.SwapInt16(BitConverter.ToInt16(raw' (int)(adr + 10)))) * General.Fixed2Float[5]);
Magic Number,SceneNavi.SimpleF3DEX2,Vertex,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\Vertex.cs,Vertex,The following statement contains a magic number: Colors = new byte[] { raw[adr + 12]' raw[adr + 13]' raw[adr + 14]' raw[adr + 15] };
Magic Number,SceneNavi.SimpleF3DEX2,Vertex,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\Vertex.cs,Vertex,The following statement contains a magic number: Colors = new byte[] { raw[adr + 12]' raw[adr + 13]' raw[adr + 14]' raw[adr + 15] };
Magic Number,SceneNavi.SimpleF3DEX2,Vertex,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\Vertex.cs,Vertex,The following statement contains a magic number: Colors = new byte[] { raw[adr + 12]' raw[adr + 13]' raw[adr + 14]' raw[adr + 15] };
Magic Number,SceneNavi.SimpleF3DEX2,Vertex,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\Vertex.cs,Vertex,The following statement contains a magic number: Colors = new byte[] { raw[adr + 12]' raw[adr + 13]' raw[adr + 14]' raw[adr + 15] };
Magic Number,SceneNavi.SimpleF3DEX2,Vertex,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\Vertex.cs,Vertex,The following statement contains a magic number: Normals = new sbyte[] { (sbyte)raw[adr + 12]' (sbyte)raw[adr + 13]' (sbyte)raw[adr + 14] };
Magic Number,SceneNavi.SimpleF3DEX2,Vertex,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\Vertex.cs,Vertex,The following statement contains a magic number: Normals = new sbyte[] { (sbyte)raw[adr + 12]' (sbyte)raw[adr + 13]' (sbyte)raw[adr + 14] };
Magic Number,SceneNavi.SimpleF3DEX2,Vertex,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\Vertex.cs,Vertex,The following statement contains a magic number: Normals = new sbyte[] { (sbyte)raw[adr + 12]' (sbyte)raw[adr + 13]' (sbyte)raw[adr + 14] };
Magic Number,SceneNavi.SimpleF3DEX2,Vertex,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\Vertex.cs,Store,The following statement contains a magic number: databuf[(int)(baseadr + (Address & 0xFFFFFF)) + 12] = Colors[0];
Magic Number,SceneNavi.SimpleF3DEX2,Vertex,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\Vertex.cs,Store,The following statement contains a magic number: databuf[(int)(baseadr + (Address & 0xFFFFFF)) + 13] = Colors[1];
Magic Number,SceneNavi.SimpleF3DEX2,Vertex,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\Vertex.cs,Store,The following statement contains a magic number: databuf[(int)(baseadr + (Address & 0xFFFFFF)) + 14] = Colors[2];
Magic Number,SceneNavi.SimpleF3DEX2,Vertex,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\Vertex.cs,Store,The following statement contains a magic number: databuf[(int)(baseadr + (Address & 0xFFFFFF)) + 14] = Colors[2];
Magic Number,SceneNavi.SimpleF3DEX2,Vertex,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\Vertex.cs,Store,The following statement contains a magic number: databuf[(int)(baseadr + (Address & 0xFFFFFF)) + 15] = Colors[3];
Magic Number,SceneNavi.SimpleF3DEX2,Vertex,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\Vertex.cs,Store,The following statement contains a magic number: databuf[(int)(baseadr + (Address & 0xFFFFFF)) + 15] = Colors[3];
Magic Number,SceneNavi.SimpleF3DEX2,Vertex,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\Vertex.cs,Render,The following statement contains a magic number: GL.DepthRange(0.0' 0.999);
Magic Number,SceneNavi.SimpleF3DEX2,Vertex,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\Vertex.cs,Render,The following statement contains a magic number: GL.PointSize(50.0f);
Magic Number,SceneNavi.SimpleF3DEX2.CombinerEmulation,ArbCombineProgram,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\CombinerEmulation\ArbCombineProgram.cs,ArbCombineProgram,The following statement contains a magic number: i < 2
Magic Number,SceneNavi.SimpleF3DEX2.CombinerEmulation,GLSLShaders,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\CombinerEmulation\GLSLShaders.cs,GLSLShaders,The following statement contains a magic number: i < 2
Duplicate Code,SceneNavi.SimpleF3DEX2.CombinerEmulation,ArbCombineProgram,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\CombinerEmulation\ArbCombineProgram.cs,ArbCombineProgram,The method contains a code clone-set at the following line numbers (starting from the method definition): ((317' 341)' (356' 380))
Duplicate Code,SceneNavi.SimpleF3DEX2.CombinerEmulation,ArbCombineProgram,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\CombinerEmulation\ArbCombineProgram.cs,ArbCombineProgram,The method contains a code clone-set at the following line numbers (starting from the method definition): ((320' 352)' (402' 434))
Duplicate Code,SceneNavi.SimpleF3DEX2.CombinerEmulation,ArbCombineProgram,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\CombinerEmulation\ArbCombineProgram.cs,ArbCombineProgram,The method contains a code clone-set at the following line numbers (starting from the method definition): ((359' 380)' (402' 423))
Duplicate Code,SceneNavi.SimpleF3DEX2.CombinerEmulation,GLSLShaders,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\CombinerEmulation\GLSLShaders.cs,GLSLShaders,The method contains a code clone-set at the following line numbers (starting from the method definition): ((46' 96)' (100' 150))
Duplicate Code,SceneNavi.SimpleF3DEX2.CombinerEmulation,GLSLShaders,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\CombinerEmulation\GLSLShaders.cs,GLSLShaders,The method contains a code clone-set at the following line numbers (starting from the method definition): ((243' 269)' (273' 299)' (303' 329)' (333' 359))
Missing Default,SceneNavi,ColorPickerDialog,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\ColorPickerDialog.cs,ColorSlide,The following switch statement is missing a default case: switch (colorComponent)                  {                      case ColorComponents.Red:                          Color = Color.FromArgb(color.A' newValue' color.G' color.B);                          break;                        case ColorComponents.Green:                          Color = Color.FromArgb(color.A' color.R' newValue' color.B);                          break;                        case ColorComponents.Blue:                          Color = Color.FromArgb(color.A' color.R' color.G' newValue);                          break;                        case ColorComponents.Alpha:                          Color = Color.FromArgb(newValue' color.R' color.G' color.B);                          break;                  }
Missing Default,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_MouseDown,The following switch statement is missing a default case: switch (currentToolMode)              {                  case ToolModes.Camera:                      {                          /* Camera only */                          if (Convert.ToBoolean(camera.ButtonsDown & MouseButtons.Left))                              camera.MouseCenter(new Vector2d(e.X' e.Y));                          break;                      }                    case ToolModes.MoveableObjs:                  case ToolModes.StaticObjs:                      {                          /* Object picking */                          if (Convert.ToBoolean(camera.ButtonsDown & MouseButtons.Left) || Convert.ToBoolean(camera.ButtonsDown & MouseButtons.Middle))                          {                              pickedObject = TryPickObject(e.X' e.Y' (currentToolMode == ToolModes.MoveableObjs));                              if (pickedObject == null)                              {                                  /* No pick? Camera */                                  camera.MouseCenter(new Vector2d(e.X' e.Y));                              }                              else                              {                                  /* Object found */                                  pickObjLastPosition = pickObjPosition = new Vector2d(e.X' e.Y);                                  pickObjDisplacement = Vector2d.Zero;                                  ((Control)sender).Focus();                                    /* Mark GLDLs as dirty? */                                  collisionDirty = (pickedObject is HeaderCommands.Collision.Polygon);                                  waterboxesDirty = (pickedObject is HeaderCommands.Collision.Waterbox);                                    /* Static object? Camera */                                  if (currentToolMode == ToolModes.StaticObjs)                                  {                                      camera.MouseCenter(new Vector2d(e.X' e.Y));                                      /*if (e.Clicks == 2 && currentRoomVertex != null)                                      {                                          EditVertexColor(currentRoomVertex);                                      }*/                                  }                              }                          }                          else if (Convert.ToBoolean(camera.ButtonsDown & MouseButtons.Right))                          {                              pickedObject = TryPickObject(e.X' e.Y' (currentToolMode == ToolModes.MoveableObjs));                              if (pickedObject != null)                              {                                  if (currentToolMode == ToolModes.MoveableObjs)                                  {                                      if (pickedObject is HeaderCommands.Actors.Entry)                                      {                                          HeaderCommands.Actors.Entry ac = (pickedObject as HeaderCommands.Actors.Entry);                                          /* Determine what menu entries should be enabled */                                          xAxisToolStripMenuItem.Enabled = !(ac.Definition.Items.FirstOrDefault(x => x.Usage == XMLActorDefinitionReader.Definition.Item.Usages.RotationX) == null);                                          yAxisToolStripMenuItem.Enabled = !(ac.Definition.Items.FirstOrDefault(x => x.Usage == XMLActorDefinitionReader.Definition.Item.Usages.RotationY) == null);                                          zAxisToolStripMenuItem.Enabled = !(ac.Definition.Items.FirstOrDefault(x => x.Usage == XMLActorDefinitionReader.Definition.Item.Usages.RotationZ) == null);                                          rotateToolStripMenuItem.Enabled = (xAxisToolStripMenuItem.Enabled || yAxisToolStripMenuItem.Enabled || zAxisToolStripMenuItem.Enabled);                                      }                                      else                                          rotateToolStripMenuItem.Enabled = false;                                        cmsMoveableObjectEdit.Show(((Control)sender).PointToScreen(e.Location));                                  }                                  else if (currentToolMode == ToolModes.StaticObjs)                                  {                                      if (pickedObject is SimpleF3DEX2.Vertex)                                      {                                          cmsVertexEdit.Show(((Control)sender).PointToScreen(e.Location));                                      }                                  }                              }                          }                          break;                      }              }
Missing Default,SceneNavi,MainForm,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\MainForm.cs,customGLControl_MouseMove,The following switch statement is missing a default case: switch (currentToolMode)              {                  case ToolModes.Camera:                      {                          if (Convert.ToBoolean(e.Button & MouseButtons.Left))                              camera.MouseMove(new Vector2d(e.X' e.Y));                          break;                      }                    case ToolModes.MoveableObjs:                      {                          if (!Convert.ToBoolean(e.Button & MouseButtons.Left) && !Convert.ToBoolean(e.Button & MouseButtons.Middle)) break;                            if (pickedObject == null)                              camera.MouseMove(new Vector2d(e.X' e.Y));                          else                          {                              // TODO  make this not shitty; try to get the "new method" to work with anything that's not at (0'0'0)                                /* Speed modifiers */                              double movemod = 3.0;                              if (keysDown[(ushort)Keys.Space]) movemod = 8.0;                              else if (keysDown[(ushort)Keys.ShiftKey]) movemod = 1.0;                                /* Determine mouse position and displacement */                              pickObjPosition = new Vector2d(e.X' e.Y);                              pickObjDisplacement = ((pickObjPosition - pickObjLastPosition) * movemod);                                /* No displacement? Exit */                              if (pickObjDisplacement == Vector2d.Zero) return;                                /* Calculate camera rotation */                              double CamXRotd = camera.Rot.X * (double)(Math.PI / 180);                              double CamYRotd = camera.Rot.Y * (double)(Math.PI / 180);                                /* WARNING: Cam position stuff below is "I dunno why it works' but it does!" */                              Vector3d objpos = pickedObject.Position;                                if (Convert.ToBoolean(e.Button & MouseButtons.Middle) || (Convert.ToBoolean(e.Button & MouseButtons.Left) && keysDown[(ushort)Keys.ControlKey]))                              {                                  /* Middle mouse button OR left button + Ctrl -> move forward/backward */                                  objpos.X += ((Math.Sin(CamYRotd) * -pickObjDisplacement.Y));                                  objpos.Z -= ((Math.Cos(CamYRotd) * -pickObjDisplacement.Y));                                    camera.Pos.X -= ((Math.Sin(CamYRotd) * (-pickObjDisplacement.Y * camera.CameraCoeff * camera.Sensitivity) / 1.25));                                  camera.Pos.Z += ((Math.Cos(CamYRotd) * (-pickObjDisplacement.Y * camera.CameraCoeff * camera.Sensitivity) / 1.25));                              }                              else if (Convert.ToBoolean(e.Button & MouseButtons.Left))                              {                                  /* Left mouse button -> move up/down/left/right */                                  objpos.X += ((Math.Cos(CamYRotd) * pickObjDisplacement.X));                                  objpos.Y -= (pickObjDisplacement.Y);                                  objpos.Z += ((Math.Sin(CamYRotd) * pickObjDisplacement.X));                                    camera.Pos.X -= ((Math.Cos(CamYRotd) * pickObjDisplacement.X)) * 0.02;                                  camera.Pos.Y += (pickObjDisplacement.Y) * 0.02;                                  camera.Pos.Z -= ((Math.Sin(CamYRotd) * pickObjDisplacement.X)) * 0.02;                              }                                /* Round away decimal places (mainly for waypoints) */                              objpos.X = Math.Round(objpos.X' 0);                              objpos.Y = Math.Round(objpos.Y' 0);                              objpos.Z = Math.Round(objpos.Z' 0);                              pickedObject.Position = objpos;                                /* Refresh GUI according to type of picked object */                              if (pickedObject is HeaderCommands.Waypoints.Waypoint)                              {                                  foreach (DataGridViewCell cell in dgvPathWaypoints.SelectedCells)                                  {                                      for (int i = 0; i < dgvPathWaypoints.ColumnCount; i++) dgvPathWaypoints.UpdateCellValue(i' cell.RowIndex);                                  }                              }                              else if (pickedObject is HeaderCommands.Actors.Entry)                              {                                  HeaderCommands.Actors.Entry actor = (pickedObject as HeaderCommands.Actors.Entry);                                    if (actor.IsSpawnPoint)                                      XMLActorDefinitionReader.RefreshActorPositionRotation(actor' tlpExSpawnPoints);                                  else if (actor.IsTransitionActor)                                      XMLActorDefinitionReader.RefreshActorPositionRotation(actor' tlpExTransitions);                                  else                                      XMLActorDefinitionReader.RefreshActorPositionRotation(actor' tlpExRoomActors);                              }                              else if (pickedObject is HeaderCommands.Collision.Waterbox)                              {                                  waterboxesDirty = true;                                  RefreshWaterboxControls();                              }                                pickObjLastPosition = pickObjPosition;                                ((Control)sender).Focus();                          }                          break;                      }                    case ToolModes.StaticObjs:                      {                          if (Convert.ToBoolean(e.Button & MouseButtons.Left)/* && PickedObject == null*/)                              camera.MouseMove(new Vector2d(e.X' e.Y));                          break;                      }              }
Missing Default,SceneNavi,XMLActorDefinitionReader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\XMLActorDefinitionReader.cs,XMLActorDefinitionReader,The following switch statement is missing a default case: switch (xml.Name)                                  {                                      case "Number":                                          if (xml.Value.StartsWith("0x") == true)                                              ndef.Number = ushort.Parse(xml.Value.Substring(2)' System.Globalization.NumberStyles.HexNumber);                                          else                                              ndef.Number = ushort.Parse(xml.Value);                                          break;                                      case "IsDefault":                                          ndef.IsDefault = (Definition.DefaultTypes)Enum.Parse(typeof(Definition.DefaultTypes)' xml.Value);                                          break;                                      case "DisplayModel":                                          displaydl = OpenGLHelpers.StockObjects.GetDisplayList(xml.Value);                                          if (displaydl != null) ndef.DisplayModel = displaydl;                                          break;                                      case "PickModel":                                          pickdl = OpenGLHelpers.StockObjects.GetDisplayList(xml.Value);                                          if (pickdl != null) ndef.PickModel = pickdl;                                          break;                                      case "FrontOffset":                                          ndef.FrontOffset = double.Parse(xml.Value' System.Globalization.CultureInfo.InvariantCulture);                                          break;                                  }
Missing Default,SceneNavi,XMLActorDefinitionReader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\XMLActorDefinitionReader.cs,XMLActorDefinitionReader,The following switch statement is missing a default case: switch (xml.Name)                                  {                                      case "Index":                                          nitem.Index = int.Parse(xml.Value);                                          break;                                      case "ValueType":                                          nitem.ValueType = FindTypeInCurrentAssemblies(xml.Value);                                          break;                                      case "DisplayStyle":                                          nitem.DisplayStyle = (Definition.Item.DisplayStyles)Enum.Parse(typeof(Definition.Item.DisplayStyles)' xml.Value);                                          break;                                      case "Usage":                                          nitem.Usage = (Definition.Item.Usages)Enum.Parse(typeof(Definition.Item.Usages)' xml.Value);                                          break;                                      case "Description":                                          nitem.Description = xml.Value;                                          break;                                      case "Mask":                                          if (xml.Value.StartsWith("0x") == true)                                              nitem.Mask = UInt64.Parse(xml.Value.Substring(2)' System.Globalization.NumberStyles.HexNumber);                                          else                                              nitem.Mask = UInt64.Parse(xml.Value);                                          break;                                      case "ControlType":                                          nitem.ControlType = FindTypeInCurrentAssemblies(xml.Value);                                          break;                                  }
Missing Default,SceneNavi,XMLActorDefinitionReader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\XMLActorDefinitionReader.cs,XMLActorDefinitionReader,The following switch statement is missing a default case: switch (xml.Name)                                  {                                      case "Value":                                          if (xml.Value.StartsWith("0x") == true)                                              nopt.Value = UInt64.Parse(xml.Value.Substring(2)' System.Globalization.NumberStyles.HexNumber);                                          else                                              nopt.Value = UInt64.Parse(xml.Value);                                          break;                                      case "Description":                                          nopt.Description = xml.Value;                                          break;                                  }
Missing Default,SceneNavi,XMLActorDefinitionReader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\XMLActorDefinitionReader.cs,RefreshActorPositionRotation,The following switch statement is missing a default case: switch (item.DisplayStyle)                          {                              case Definition.Item.DisplayStyles.Hexadecimal: fstr = "0x{0:X}"; break;                              case Definition.Item.DisplayStyles.Decimal: fstr = "{0:D}"; break;                          }
Missing Default,SceneNavi,XMLActorDefinitionReader,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\XMLActorDefinitionReader.cs,CreateActorEditingControls,The following switch statement is missing a default case: switch (item.DisplayStyle)                          {                              case Definition.Item.DisplayStyles.Hexadecimal: fstr = "0x{0:X}"; break;                              case Definition.Item.DisplayStyles.Decimal: fstr = "{0:D}"; break;                          }
Missing Default,SceneNavi.OpenGLHelpers,CachedString,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\TextPrinter.cs,ParseDrawString,The following switch statement is missing a default case: switch (tag)                          {                              case "color":                                  string[] colorValues = value.Split(new char[] { '''' ' ' });                                  if (colorValues.Length > 1)                                  {                                      byte[] colors = new byte[colorValues.Length];                                      for (int ci = 0; ci < colors.Length; ci++)                                      {                                          byte.TryParse(colorValues[ci]' out colors[ci]);                                      }                                      currentColor = Color.FromArgb(colorValues.Length == 4 ? colors[3] : 255' colors[0]' colors[1]' colors[2]);                                  }                                  else                                      currentColor = Color.White;                                  break;                          }
Missing Default,SceneNavi.OpenGLHelpers,Initialization,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\OpenGLHelpers\Initialization.cs,CreateViewportAndProjection,The following switch statement is missing a default case: switch (projectionType)              {                  case ProjectionTypes.Perspective:                      double aspect = clientRectangle.Width / (double)clientRectangle.Height;                      projectionMatrix = Matrix4.CreatePerspectiveFieldOfView(MathHelper.PiOver3' (float)aspect' near' far);                      break;                    case ProjectionTypes.Orthographic:                      projectionMatrix = Matrix4.CreateOrthographicOffCenter(clientRectangle.Left' clientRectangle.Right' clientRectangle.Bottom' clientRectangle.Top' near' far);                      break;              }
Missing Default,SceneNavi.SimpleF3DEX2,F3DEX2Interpreter,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\F3DEX2Interpreter.cs,LoadTextures,The following switch statement is missing a default case: switch (Configuration.CombinerType)              {                  case CombinerTypes.None:                      {                          CalculateTextureSize(0);                          OpenGLHelpers.Initialization.ActiveTextureChecked(TextureUnit.Texture0);                          GL.Enable(EnableCap.Texture2D);                          GL.BindTexture(TextureTarget.Texture2D' CheckTextureCache(0));                      }                      break;                    case CombinerTypes.GLSLCombiner:                      {                          CalculateTextureSize(0);                          OpenGLHelpers.Initialization.ActiveTextureChecked(TextureUnit.Texture0);                          GL.Enable(EnableCap.Texture2D);                          GL.BindTexture(TextureTarget.Texture2D' CheckTextureCache(0));                            if (OpenGLHelpers.Initialization.SupportsFunction("glActiveTextureARB"))                          {                              CalculateTextureSize(1);                              GL.ActiveTexture(TextureUnit.Texture1);                              GL.Enable(EnableCap.Texture2D);                              GL.BindTexture(TextureTarget.Texture2D' 0);                                if (multitex) GL.BindTexture(TextureTarget.Texture2D' CheckTextureCache(1));                          }                      }                      break;                    case CombinerTypes.ArbCombiner:                      {                          OpenGLHelpers.Initialization.ActiveTextureChecked(TextureUnit.Texture0);                          GL.Disable(EnableCap.Texture2D);                          GL.BindTexture(TextureTarget.Texture2D' 0);                          OpenGLHelpers.Initialization.ActiveTextureChecked(TextureUnit.Texture1);                          GL.Disable(EnableCap.Texture2D);                          GL.BindTexture(TextureTarget.Texture2D' 0);                            CalculateTextureSize(0);                          OpenGLHelpers.Initialization.ActiveTextureChecked(TextureUnit.Texture0);                          GL.Enable(EnableCap.Texture2D);                          GL.BindTexture(TextureTarget.Texture2D' CheckTextureCache(0));                            if (multitex)                          {                              CalculateTextureSize(1);                              OpenGLHelpers.Initialization.ActiveTextureChecked(TextureUnit.Texture1);                              GL.Enable(EnableCap.Texture2D);                              GL.BindTexture(TextureTarget.Texture2D' CheckTextureCache(1));                                GL.Disable(EnableCap.Texture2D);                          }                          else                          {                              OpenGLHelpers.Initialization.ActiveTextureChecked(TextureUnit.Texture1);                              GL.Disable(EnableCap.Texture2D);                          }                            OpenGLHelpers.Initialization.ActiveTextureChecked(TextureUnit.Texture0);                          GL.Disable(EnableCap.Texture2D);                      }                      break;              }
Missing Default,SceneNavi.SimpleF3DEX2.CombinerEmulation,GLSLShaders,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\CombinerEmulation\GLSLShaders.cs,GLSLShaders,The following switch statement is missing a default case: switch (Unpacked.cA[i])                  {                      case UnpackedCombinerMux.ComponentsC16.CCMUX_COMBINED:                          calc.Append("combColor");                          break;                      case UnpackedCombinerMux.ComponentsC16.CCMUX_TEXEL0:                          calc.Append("tex0color");                          break;                      case UnpackedCombinerMux.ComponentsC16.CCMUX_TEXEL1:                          calc.Append("tex1color");                          break;                      case UnpackedCombinerMux.ComponentsC16.CCMUX_PRIMITIVE:                          calc.Append("primColor");                          break;                      case UnpackedCombinerMux.ComponentsC16.CCMUX_SHADE:                          calc.Append("lightColor");                          break;                      case UnpackedCombinerMux.ComponentsC16.CCMUX_ENVIRONMENT:                          calc.Append("envColor");                          break;                      case UnpackedCombinerMux.ComponentsC16.CCMUX_1:                          calc.Append("vec4(1.0' 1.0' 1.0' 1.0)");                          break;                      case UnpackedCombinerMux.ComponentsC16.CCMUX_COMBINED_ALPHA:                          calc.Append("comb.a");                          break;                      case UnpackedCombinerMux.ComponentsC16.CCMUX_TEXEL0_ALPHA:                          calc.Append("tex0color.a");                          break;                      case UnpackedCombinerMux.ComponentsC16.CCMUX_TEXEL1_ALPHA:                          calc.Append("tex1color.a");                          break;                      case UnpackedCombinerMux.ComponentsC16.CCMUX_PRIMITIVE_ALPHA:                          calc.Append("primColor.a");                          break;                      case UnpackedCombinerMux.ComponentsC16.CCMUX_SHADE_ALPHA:                          calc.Append("lightColor.a");                          break;                      case UnpackedCombinerMux.ComponentsC16.CCMUX_ENV_ALPHA:                          calc.Append("envColor.a");                          break;                      case UnpackedCombinerMux.ComponentsC16.CCMUX_LOD_FRACTION:                          calc.Append("vec4(0.0' 0.0' 0.0' 0.0)");                          break;                      case UnpackedCombinerMux.ComponentsC16.CCMUX_PRIM_LOD_FRAC:                          calc.Append("vec4(1.0' 1.0' 1.0' 1.0)");    //unemulated for now                          break;                      case UnpackedCombinerMux.ComponentsC16.CCMUX_0:                          calc.Append("vec4(0.0' 0.0' 0.0' 0.0)");                          break;                  }
Missing Default,SceneNavi.SimpleF3DEX2.CombinerEmulation,GLSLShaders,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\CombinerEmulation\GLSLShaders.cs,GLSLShaders,The following switch statement is missing a default case: switch (Unpacked.cB[i])                  {                      case UnpackedCombinerMux.ComponentsC16.CCMUX_COMBINED:                          calc.Append("combColor");                          break;                      case UnpackedCombinerMux.ComponentsC16.CCMUX_TEXEL0:                          calc.Append("tex0color");                          break;                      case UnpackedCombinerMux.ComponentsC16.CCMUX_TEXEL1:                          calc.Append("tex1color");                          break;                      case UnpackedCombinerMux.ComponentsC16.CCMUX_PRIMITIVE:                          calc.Append("primColor");                          break;                      case UnpackedCombinerMux.ComponentsC16.CCMUX_SHADE:                          calc.Append("lightColor");                          break;                      case UnpackedCombinerMux.ComponentsC16.CCMUX_ENVIRONMENT:                          calc.Append("envColor");                          break;                      case UnpackedCombinerMux.ComponentsC16.CCMUX_1:                          calc.Append("vec4(1.0' 1.0' 1.0' 1.0)");                          break;                      case UnpackedCombinerMux.ComponentsC16.CCMUX_COMBINED_ALPHA:                          calc.Append("comb.a");                          break;                      case UnpackedCombinerMux.ComponentsC16.CCMUX_TEXEL0_ALPHA:                          calc.Append("tex0color.a");                          break;                      case UnpackedCombinerMux.ComponentsC16.CCMUX_TEXEL1_ALPHA:                          calc.Append("tex1color.a");                          break;                      case UnpackedCombinerMux.ComponentsC16.CCMUX_PRIMITIVE_ALPHA:                          calc.Append("primColor.a");                          break;                      case UnpackedCombinerMux.ComponentsC16.CCMUX_SHADE_ALPHA:                          calc.Append("lightColor.a");                          break;                      case UnpackedCombinerMux.ComponentsC16.CCMUX_ENV_ALPHA:                          calc.Append("envColor.a");                          break;                      case UnpackedCombinerMux.ComponentsC16.CCMUX_LOD_FRACTION:                          calc.Append("vec4(0.0' 0.0' 0.0' 0.0)");                          break;                      case UnpackedCombinerMux.ComponentsC16.CCMUX_PRIM_LOD_FRAC:                          calc.Append("vec4(1.0' 1.0' 1.0' 1.0)");    //unemulated for now                          break;                      case UnpackedCombinerMux.ComponentsC16.CCMUX_0:                          calc.Append("vec4(0.0' 0.0' 0.0' 0.0)");                          break;                  }
Missing Default,SceneNavi.SimpleF3DEX2.CombinerEmulation,GLSLShaders,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\CombinerEmulation\GLSLShaders.cs,GLSLShaders,The following switch statement is missing a default case: switch (Unpacked.cC[i])                  {                      case UnpackedCombinerMux.ComponentsC32.CCMUX_COMBINED:                          calc.Append("combColor");                          break;                      case UnpackedCombinerMux.ComponentsC32.CCMUX_TEXEL0:                          calc.Append("tex0color");                          break;                      case UnpackedCombinerMux.ComponentsC32.CCMUX_TEXEL1:                          calc.Append("tex1color");                          break;                      case UnpackedCombinerMux.ComponentsC32.CCMUX_PRIMITIVE:                          calc.Append("primColor");                          break;                      case UnpackedCombinerMux.ComponentsC32.CCMUX_SHADE:                          calc.Append("lightColor");                          break;                      case UnpackedCombinerMux.ComponentsC32.CCMUX_ENVIRONMENT:                          calc.Append("envColor");                          break;                      case UnpackedCombinerMux.ComponentsC32.CCMUX_1:                          calc.Append("vec4(1.0' 1.0' 1.0' 1.0)");                          break;                      case UnpackedCombinerMux.ComponentsC32.CCMUX_COMBINED_ALPHA:                          calc.Append("comb.a");                          break;                      case UnpackedCombinerMux.ComponentsC32.CCMUX_TEXEL0_ALPHA:                          calc.Append("tex0color.a");                          break;                      case UnpackedCombinerMux.ComponentsC32.CCMUX_TEXEL1_ALPHA:                          calc.Append("tex1color.a");                          break;                      case UnpackedCombinerMux.ComponentsC32.CCMUX_PRIMITIVE_ALPHA:                          calc.Append("primColor.a");                          break;                      case UnpackedCombinerMux.ComponentsC32.CCMUX_SHADE_ALPHA:                          calc.Append("lightColor.a");                          break;                      case UnpackedCombinerMux.ComponentsC32.CCMUX_ENV_ALPHA:                          calc.Append("envColor.a");                          break;                      case UnpackedCombinerMux.ComponentsC32.CCMUX_LOD_FRACTION:                          calc.Append("vec4(1.0' 1.0' 1.0' 1.0)");    //unemulated for now                          break;                      case UnpackedCombinerMux.ComponentsC32.CCMUX_PRIM_LOD_FRAC:                          calc.Append("vec4(1.0' 1.0' 1.0' 1.0)");    //unemulated for now                          break;                      case UnpackedCombinerMux.ComponentsC32.CCMUX_K5:                          calc.Append("vec4(1.0' 1.0' 1.0' 1.0)");    //unemulated for now                          break;                      case UnpackedCombinerMux.ComponentsC32.CCMUX_0:                          calc.Append("vec4(0.0' 0.0' 0.0' 0.0)");                          break;                  }
Missing Default,SceneNavi.SimpleF3DEX2.CombinerEmulation,GLSLShaders,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\CombinerEmulation\GLSLShaders.cs,GLSLShaders,The following switch statement is missing a default case: switch (Unpacked.cD[i])                  {                      case UnpackedCombinerMux.ComponentsC8.CCMUX_COMBINED:                          calc.Append("combColor");                          break;                      case UnpackedCombinerMux.ComponentsC8.CCMUX_TEXEL0:                          calc.Append("tex0color");                          break;                      case UnpackedCombinerMux.ComponentsC8.CCMUX_TEXEL1:                          calc.Append("tex1color");                          break;                      case UnpackedCombinerMux.ComponentsC8.CCMUX_PRIMITIVE:                          calc.Append("primColor");                          break;                      case UnpackedCombinerMux.ComponentsC8.CCMUX_SHADE:                          calc.Append("lightColor");                          break;                      case UnpackedCombinerMux.ComponentsC8.CCMUX_ENVIRONMENT:                          calc.Append("envColor");                          break;                      case UnpackedCombinerMux.ComponentsC8.CCMUX_1:                          calc.Append("vec4(1.0' 1.0' 1.0' 1.0)");                          break;                      case UnpackedCombinerMux.ComponentsC8.CCMUX_0:                          calc.Append("vec4(0.0' 0.0' 0.0' 0.0)");                          break;                  }
Missing Default,SceneNavi.SimpleF3DEX2.CombinerEmulation,GLSLShaders,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\CombinerEmulation\GLSLShaders.cs,GLSLShaders,The following switch statement is missing a default case: switch (Unpacked.aA[i])                  {                      case UnpackedCombinerMux.ComponentsA8.ACMUX_COMBINED:                          calc.Append("combAlpha.a");                          break;                      case UnpackedCombinerMux.ComponentsA8.ACMUX_TEXEL0:                          calc.Append("tex0color.a");                          break;                      case UnpackedCombinerMux.ComponentsA8.ACMUX_TEXEL1:                          calc.Append("tex1color.a");                          break;                      case UnpackedCombinerMux.ComponentsA8.ACMUX_PRIMITIVE:                          calc.Append("primColor.a");                          break;                      case UnpackedCombinerMux.ComponentsA8.ACMUX_SHADE:                          calc.Append("lightColor.a");                          break;                      case UnpackedCombinerMux.ComponentsA8.ACMUX_ENVIRONMENT:                          calc.Append("envColor.a");                          break;                      case UnpackedCombinerMux.ComponentsA8.ACMUX_1:                          calc.Append("vec4(1.0' 1.0' 1.0' 1.0)");                          break;                      case UnpackedCombinerMux.ComponentsA8.ACMUX_0:                          calc.Append("vec4(0.0' 0.0' 0.0' 0.0)");                          break;                  }
Missing Default,SceneNavi.SimpleF3DEX2.CombinerEmulation,GLSLShaders,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\CombinerEmulation\GLSLShaders.cs,GLSLShaders,The following switch statement is missing a default case: switch (Unpacked.aB[i])                  {                      case UnpackedCombinerMux.ComponentsA8.ACMUX_COMBINED:                          calc.Append("combAlpha.a");                          break;                      case UnpackedCombinerMux.ComponentsA8.ACMUX_TEXEL0:                          calc.Append("tex0color.a");                          break;                      case UnpackedCombinerMux.ComponentsA8.ACMUX_TEXEL1:                          calc.Append("tex1color.a");                          break;                      case UnpackedCombinerMux.ComponentsA8.ACMUX_PRIMITIVE:                          calc.Append("primColor.a");                          break;                      case UnpackedCombinerMux.ComponentsA8.ACMUX_SHADE:                          calc.Append("lightColor.a");                          break;                      case UnpackedCombinerMux.ComponentsA8.ACMUX_ENVIRONMENT:                          calc.Append("envColor.a");                          break;                      case UnpackedCombinerMux.ComponentsA8.ACMUX_1:                          calc.Append("vec4(1.0' 1.0' 1.0' 1.0)");                          break;                      case UnpackedCombinerMux.ComponentsA8.ACMUX_0:                          calc.Append("vec4(0.0' 0.0' 0.0' 0.0)");                          break;                  }
Missing Default,SceneNavi.SimpleF3DEX2.CombinerEmulation,GLSLShaders,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\CombinerEmulation\GLSLShaders.cs,GLSLShaders,The following switch statement is missing a default case: switch (Unpacked.aC[i])                  {                      case UnpackedCombinerMux.ComponentsA8.ACMUX_COMBINED:                          calc.Append("combAlpha.a");                          break;                      case UnpackedCombinerMux.ComponentsA8.ACMUX_TEXEL0:                          calc.Append("tex0color.a");                          break;                      case UnpackedCombinerMux.ComponentsA8.ACMUX_TEXEL1:                          calc.Append("tex1color.a");                          break;                      case UnpackedCombinerMux.ComponentsA8.ACMUX_PRIMITIVE:                          calc.Append("primColor.a");                          break;                      case UnpackedCombinerMux.ComponentsA8.ACMUX_SHADE:                          calc.Append("lightColor.a");                          break;                      case UnpackedCombinerMux.ComponentsA8.ACMUX_ENVIRONMENT:                          calc.Append("envColor.a");                          break;                      case UnpackedCombinerMux.ComponentsA8.ACMUX_1:                          calc.Append("vec4(1.0' 1.0' 1.0' 1.0)");                          break;                      case UnpackedCombinerMux.ComponentsA8.ACMUX_0:                          calc.Append("vec4(0.0' 0.0' 0.0' 0.0)");                          break;                  }
Missing Default,SceneNavi.SimpleF3DEX2.CombinerEmulation,GLSLShaders,D:\research\architectureSmells\repos\xdanieldzd_SceneNavi\SceneNavi\SimpleF3DEX2\CombinerEmulation\GLSLShaders.cs,GLSLShaders,The following switch statement is missing a default case: switch (Unpacked.aD[i])                  {                      case UnpackedCombinerMux.ComponentsA8.ACMUX_COMBINED:                          calc.Append("combAlpha.a");                          break;                      case UnpackedCombinerMux.ComponentsA8.ACMUX_TEXEL0:                          calc.Append("tex0color.a");                          break;                      case UnpackedCombinerMux.ComponentsA8.ACMUX_TEXEL1:                          calc.Append("tex1color.a");                          break;                      case UnpackedCombinerMux.ComponentsA8.ACMUX_PRIMITIVE:                          calc.Append("primColor.a");                          break;                      case UnpackedCombinerMux.ComponentsA8.ACMUX_SHADE:                          calc.Append("lightColor.a");                          break;                      case UnpackedCombinerMux.ComponentsA8.ACMUX_ENVIRONMENT:                          calc.Append("envColor.a");                          break;                      case UnpackedCombinerMux.ComponentsA8.ACMUX_1:                          calc.Append("vec4(1.0' 1.0' 1.0' 1.0)");                          break;                      case UnpackedCombinerMux.ComponentsA8.ACMUX_0:                          calc.Append("vec4(0.0' 0.0' 0.0' 0.0)");                          break;                  }
