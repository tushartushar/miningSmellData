Implementation smell,Namespace,Class,File,Method,Description
Long Statement,AWSAppender.SQS,BufferingSQSAppender,C:\repos\camitz_CloudWatchAppender\Appenders\SQSAppender\BufferingSQSAppender.cs,SendBuffer,The length of the statement  "                throw new MessageTooLargeException(rs.First(x => System.Text.UTF8Encoding.UTF8.GetByteCount(x.Message) > 256 * 1024).Message); " is 126.
Long Statement,AWSAppender.SQS,BufferingSQSAppender,C:\repos\camitz_CloudWatchAppender\Appenders\SQSAppender\BufferingSQSAppender.cs,SendBuffer,The length of the statement  "                throw new MessageTooLargeException(rs.First(x => System.Text.UTF8Encoding.UTF8.GetByteCount(x.Message) > 256 * 1024).Message); " is 126.
Long Statement,AWSAppender.SQS.Parsers,SQSMessageParser,C:\repos\camitz_CloudWatchAppender\Appenders\SQSAppender\Parsers\SQSMessageParser.cs,FillName,The length of the statement  "                    _currentDatum.DelaySeconds = DefaultsOverridePattern ? DefaultDelaySeconds ?? Convert.ToInt32(value.dValue) : Convert.ToInt32(value.dValue); " is 140.
Magic Number,AWSAppender.SQS,BufferingSQSAppender,C:\repos\camitz_CloudWatchAppender\Appenders\SQSAppender\BufferingSQSAppender.cs,SendBuffer,The following statement contains a magic number: if (rs.Any(x => System.Text.UTF8Encoding.UTF8.GetByteCount(x.Message) > 256 * 1024))                  throw new MessageTooLargeException(rs.First(x => System.Text.UTF8Encoding.UTF8.GetByteCount(x.Message) > 256 * 1024).Message);
Magic Number,AWSAppender.SQS,BufferingSQSAppender,C:\repos\camitz_CloudWatchAppender\Appenders\SQSAppender\BufferingSQSAppender.cs,SendBuffer,The following statement contains a magic number: if (rs.Any(x => System.Text.UTF8Encoding.UTF8.GetByteCount(x.Message) > 256 * 1024))                  throw new MessageTooLargeException(rs.First(x => System.Text.UTF8Encoding.UTF8.GetByteCount(x.Message) > 256 * 1024).Message);
Magic Number,AWSAppender.SQS,BufferingSQSAppender,C:\repos\camitz_CloudWatchAppender\Appenders\SQSAppender\BufferingSQSAppender.cs,SendBuffer,The following statement contains a magic number: if (rs.Any(x => System.Text.UTF8Encoding.UTF8.GetByteCount(x.Message) > 256 * 1024))                  throw new MessageTooLargeException(rs.First(x => System.Text.UTF8Encoding.UTF8.GetByteCount(x.Message) > 256 * 1024).Message);
Magic Number,AWSAppender.SQS,BufferingSQSAppender,C:\repos\camitz_CloudWatchAppender\Appenders\SQSAppender\BufferingSQSAppender.cs,SendBuffer,The following statement contains a magic number: if (rs.Any(x => System.Text.UTF8Encoding.UTF8.GetByteCount(x.Message) > 256 * 1024))                  throw new MessageTooLargeException(rs.First(x => System.Text.UTF8Encoding.UTF8.GetByteCount(x.Message) > 256 * 1024).Message);
Magic Number,AWSAppender.SQS,BufferingSQSAppender,C:\repos\camitz_CloudWatchAppender\Appenders\SQSAppender\BufferingSQSAppender.cs,SendBuffer,The following statement contains a magic number: if (rs.Any(x => x.QueueName != null && !_queueNameRegex.IsMatch(x.QueueName)))                  throw new MessageTooLargeException(rs.First(x => System.Text.UTF8Encoding.UTF8.GetByteCount(x.Message) > 256 * 1024).Message);
Magic Number,AWSAppender.SQS,BufferingSQSAppender,C:\repos\camitz_CloudWatchAppender\Appenders\SQSAppender\BufferingSQSAppender.cs,SendBuffer,The following statement contains a magic number: if (rs.Any(x => x.QueueName != null && !_queueNameRegex.IsMatch(x.QueueName)))                  throw new MessageTooLargeException(rs.First(x => System.Text.UTF8Encoding.UTF8.GetByteCount(x.Message) > 256 * 1024).Message);
Magic Number,AWSAppender.SQS,BufferingSQSAppender,C:\repos\camitz_CloudWatchAppender\Appenders\SQSAppender\BufferingSQSAppender.cs,Assemble,The following statement contains a magic number: foreach (var grouping in data                  .Where(x => System.Text.UTF8Encoding.UTF8.GetByteCount(x.Message) <= 256 * 1024)                  .Where(x => x.QueueName == null || _queueNameRegex.IsMatch(x.QueueName))                  .GroupBy(r => r.QueueName ?? _fallbackQueueName))              {                  var skip = 0;                    while (grouping.Skip(skip).Any())                  {                      var size = 0;                        var taken = grouping                          .Skip(skip)                          .TakeWhile(x => (size += System.Text.UTF8Encoding.UTF8.GetByteCount(x.Message)) < 256 * 1024)                          .Take(10);                        requests.Add(new SendMessageBatchRequestWrapper                                   {                                       QueueName = grouping.Key'                                       Entries =                                           taken                                           .Select(                                               sqsDatum =>                                               {                                                   var t = new SendMessageBatchRequestEntry                                                          {                                                              MessageBody = sqsDatum.Message'                                                              Id = sqsDatum.ID                                                          };                                                     if (sqsDatum.DelaySeconds.HasValue)                                                       t.DelaySeconds = sqsDatum.DelaySeconds.Value;                                                   return t;                                               }                                           ).ToList()                                   });                        skip += taken.Count();                  }              }
Magic Number,AWSAppender.SQS,BufferingSQSAppender,C:\repos\camitz_CloudWatchAppender\Appenders\SQSAppender\BufferingSQSAppender.cs,Assemble,The following statement contains a magic number: foreach (var grouping in data                  .Where(x => System.Text.UTF8Encoding.UTF8.GetByteCount(x.Message) <= 256 * 1024)                  .Where(x => x.QueueName == null || _queueNameRegex.IsMatch(x.QueueName))                  .GroupBy(r => r.QueueName ?? _fallbackQueueName))              {                  var skip = 0;                    while (grouping.Skip(skip).Any())                  {                      var size = 0;                        var taken = grouping                          .Skip(skip)                          .TakeWhile(x => (size += System.Text.UTF8Encoding.UTF8.GetByteCount(x.Message)) < 256 * 1024)                          .Take(10);                        requests.Add(new SendMessageBatchRequestWrapper                                   {                                       QueueName = grouping.Key'                                       Entries =                                           taken                                           .Select(                                               sqsDatum =>                                               {                                                   var t = new SendMessageBatchRequestEntry                                                          {                                                              MessageBody = sqsDatum.Message'                                                              Id = sqsDatum.ID                                                          };                                                     if (sqsDatum.DelaySeconds.HasValue)                                                       t.DelaySeconds = sqsDatum.DelaySeconds.Value;                                                   return t;                                               }                                           ).ToList()                                   });                        skip += taken.Count();                  }              }
Magic Number,AWSAppender.SQS,BufferingSQSAppender,C:\repos\camitz_CloudWatchAppender\Appenders\SQSAppender\BufferingSQSAppender.cs,Assemble,The following statement contains a magic number: foreach (var grouping in data                  .Where(x => System.Text.UTF8Encoding.UTF8.GetByteCount(x.Message) <= 256 * 1024)                  .Where(x => x.QueueName == null || _queueNameRegex.IsMatch(x.QueueName))                  .GroupBy(r => r.QueueName ?? _fallbackQueueName))              {                  var skip = 0;                    while (grouping.Skip(skip).Any())                  {                      var size = 0;                        var taken = grouping                          .Skip(skip)                          .TakeWhile(x => (size += System.Text.UTF8Encoding.UTF8.GetByteCount(x.Message)) < 256 * 1024)                          .Take(10);                        requests.Add(new SendMessageBatchRequestWrapper                                   {                                       QueueName = grouping.Key'                                       Entries =                                           taken                                           .Select(                                               sqsDatum =>                                               {                                                   var t = new SendMessageBatchRequestEntry                                                          {                                                              MessageBody = sqsDatum.Message'                                                              Id = sqsDatum.ID                                                          };                                                     if (sqsDatum.DelaySeconds.HasValue)                                                       t.DelaySeconds = sqsDatum.DelaySeconds.Value;                                                   return t;                                               }                                           ).ToList()                                   });                        skip += taken.Count();                  }              }
Magic Number,AWSAppender.SQS,BufferingSQSAppender,C:\repos\camitz_CloudWatchAppender\Appenders\SQSAppender\BufferingSQSAppender.cs,Assemble,The following statement contains a magic number: foreach (var grouping in data                  .Where(x => System.Text.UTF8Encoding.UTF8.GetByteCount(x.Message) <= 256 * 1024)                  .Where(x => x.QueueName == null || _queueNameRegex.IsMatch(x.QueueName))                  .GroupBy(r => r.QueueName ?? _fallbackQueueName))              {                  var skip = 0;                    while (grouping.Skip(skip).Any())                  {                      var size = 0;                        var taken = grouping                          .Skip(skip)                          .TakeWhile(x => (size += System.Text.UTF8Encoding.UTF8.GetByteCount(x.Message)) < 256 * 1024)                          .Take(10);                        requests.Add(new SendMessageBatchRequestWrapper                                   {                                       QueueName = grouping.Key'                                       Entries =                                           taken                                           .Select(                                               sqsDatum =>                                               {                                                   var t = new SendMessageBatchRequestEntry                                                          {                                                              MessageBody = sqsDatum.Message'                                                              Id = sqsDatum.ID                                                          };                                                     if (sqsDatum.DelaySeconds.HasValue)                                                       t.DelaySeconds = sqsDatum.DelaySeconds.Value;                                                   return t;                                               }                                           ).ToList()                                   });                        skip += taken.Count();                  }              }
Magic Number,AWSAppender.SQS,BufferingSQSAppender,C:\repos\camitz_CloudWatchAppender\Appenders\SQSAppender\BufferingSQSAppender.cs,Assemble,The following statement contains a magic number: foreach (var grouping in data                  .Where(x => System.Text.UTF8Encoding.UTF8.GetByteCount(x.Message) <= 256 * 1024)                  .Where(x => x.QueueName == null || _queueNameRegex.IsMatch(x.QueueName))                  .GroupBy(r => r.QueueName ?? _fallbackQueueName))              {                  var skip = 0;                    while (grouping.Skip(skip).Any())                  {                      var size = 0;                        var taken = grouping                          .Skip(skip)                          .TakeWhile(x => (size += System.Text.UTF8Encoding.UTF8.GetByteCount(x.Message)) < 256 * 1024)                          .Take(10);                        requests.Add(new SendMessageBatchRequestWrapper                                   {                                       QueueName = grouping.Key'                                       Entries =                                           taken                                           .Select(                                               sqsDatum =>                                               {                                                   var t = new SendMessageBatchRequestEntry                                                          {                                                              MessageBody = sqsDatum.Message'                                                              Id = sqsDatum.ID                                                          };                                                     if (sqsDatum.DelaySeconds.HasValue)                                                       t.DelaySeconds = sqsDatum.DelaySeconds.Value;                                                   return t;                                               }                                           ).ToList()                                   });                        skip += taken.Count();                  }              }
Magic Number,AWSAppender.SQS,SQSAppender,C:\repos\camitz_CloudWatchAppender\Appenders\SQSAppender\SQSAppender.cs,Append,The following statement contains a magic number: if (System.Text.UTF8Encoding.UTF8.GetByteCount(sqsDatum.Message) > 256 * 1024)                  throw new MessageTooLargeException(sqsDatum.Message);
Magic Number,AWSAppender.SQS,SQSAppender,C:\repos\camitz_CloudWatchAppender\Appenders\SQSAppender\SQSAppender.cs,Append,The following statement contains a magic number: if (System.Text.UTF8Encoding.UTF8.GetByteCount(sqsDatum.Message) > 256 * 1024)                  throw new MessageTooLargeException(sqsDatum.Message);
Missing Default,AWSAppender.SQS.Parsers,SQSMessageParser,C:\repos\camitz_CloudWatchAppender\Appenders\SQSAppender\Parsers\SQSMessageParser.cs,FillName,The following switch statement is missing a default case: switch (value.Name.ToLowerInvariant())              {                  case "__cav_rest":                      if (!string.IsNullOrEmpty(_currentDatum.Message))                          return false;                        _currentDatum.Message = DefaultsOverridePattern ? DefaultMessage ?? value.sValue : value.sValue;                      break;                    case "queuename":                      if (!string.IsNullOrEmpty(_currentDatum.QueueName))                          return false;                        _currentDatum.QueueName = DefaultsOverridePattern ? DefaultQueueName ?? value.sValue : value.sValue;                      break;                    case "delayseconds":                      if (_currentDatum.DelaySeconds.HasValue)                          return false;                        _currentDatum.DelaySeconds = DefaultsOverridePattern ? DefaultDelaySeconds ?? Convert.ToInt32(value.dValue) : Convert.ToInt32(value.dValue);                      break;                    case "id":                      if (!string.IsNullOrEmpty(_currentDatum.ID))                          return false;                        _currentDatum.ID = value.sValue;                      break;                }
