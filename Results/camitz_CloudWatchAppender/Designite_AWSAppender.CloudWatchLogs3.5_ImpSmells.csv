Implementation smell,Namespace,Class,File,Method,Description
Long Statement,AWSAppender.CloudWatchLogs.Parsers,LogsEventMessageParser,C:\repos\camitz_CloudWatchAppender\Appenders\CloudWatchLogsAppender\Parsers\LogsEventMessageParser.cs,FillName,The length of the statement  "                    _currentDatum.Timestamp = DefaultsOverridePattern ? DefaultTimestamp ?? value.Time.Value.DateTime : value.Time.Value.DateTime; " is 126.
Long Statement,AWSAppender.CloudWatchLogs.Services,CloudWatchLogsClientWrapper,C:\repos\camitz_CloudWatchAppender\Appenders\CloudWatchLogsAppender\Services\CloudWatchLogsClientWrapper.cs,PutLogEvents,The length of the statement  "            if (!_validatedGroupNames.ContainsKey(putLogEventsRequest.LogGroupName) || !_validatedStreamNames.ContainsKey(putLogEventsRequest.LogStreamName)) " is 145.
Long Statement,AWSAppender.CloudWatchLogs.Services,CloudWatchLogsClientWrapper,C:\repos\camitz_CloudWatchAppender\Appenders\CloudWatchLogsAppender\Services\CloudWatchLogsClientWrapper.cs,PutLogEvents,The length of the statement  "                            Client.CreateLogStream(new CreateLogStreamRequest { LogGroupName = putLogEventsRequest.LogGroupName' LogStreamName = putLogEventsRequest.LogStreamName }); " is 154.
Empty Catch Block,AWSAppender.CloudWatchLogs.Services,CloudWatchLogsClientWrapper,C:\repos\camitz_CloudWatchAppender\Appenders\CloudWatchLogsAppender\Services\CloudWatchLogsClientWrapper.cs,PutLogEvents,The method has an empty catch block.
Empty Catch Block,AWSAppender.CloudWatchLogs.Services,CloudWatchLogsClientWrapper,C:\repos\camitz_CloudWatchAppender\Appenders\CloudWatchLogsAppender\Services\CloudWatchLogsClientWrapper.cs,PutLogEvents,The method has an empty catch block.
Magic Number,AWSAppender.CloudWatchLogs.Services,CloudWatchLogsClientWrapper,C:\repos\camitz_CloudWatchAppender\Appenders\CloudWatchLogsAppender\Services\CloudWatchLogsClientWrapper.cs,PutLogEvents,The following statement contains a magic number: lock (_lockObject)              {                  AmazonWebServiceResponse ret = null;                    string nextSequenceToken;                  var key = putLogEventsRequest.LogGroupName + "/" + putLogEventsRequest.LogStreamName;                  if (!_nextSequenceToken.ContainsKey(key))                      _nextSequenceToken[key] = null;                  nextSequenceToken = _nextSequenceToken[key];                    for (var i = 0; i < 10 && ret == null; i++)                  {                      try                      {                          try                          {                              putLogEventsRequest.SequenceToken = nextSequenceToken;                              var putLogEventsResponse = Client.PutLogEvents(putLogEventsRequest);                              _nextSequenceToken[key] = putLogEventsResponse.NextSequenceToken;                              ret = putLogEventsResponse;                          }                          catch (ResourceNotFoundException)                          {                              throw;                          }                      }                      catch (DataAlreadyAcceptedException e)                      {                          var matchCollection = Regex.Matches(e.Message' @"[0-9]{20'}");                          if (matchCollection.Count > 0)                              nextSequenceToken = matchCollection[0].Value;                          else                              nextSequenceToken = null;                      }                      catch (InvalidSequenceTokenException e)                      {                          var matchCollection = Regex.Matches(e.Message' @"[0-9]{20'}");                          if (matchCollection.Count > 0)                              nextSequenceToken = matchCollection[0].Value;                          else                              nextSequenceToken = null;                      }                      catch (OperationAbortedException)                      {                          LogLog.Debug(typeof(CloudWatchLogsClientWrapper)' "Task lost due to conflicting operation");                      }                  }                  return ret;              }
Missing Default,AWSAppender.CloudWatchLogs.Parsers,LogsEventMessageParser,C:\repos\camitz_CloudWatchAppender\Appenders\CloudWatchLogsAppender\Parsers\LogsEventMessageParser.cs,FillName,The following switch statement is missing a default case: switch (value.Name.ToLowerInvariant())              {                  case "message":                  case "__cav_rest":                      if (!string.IsNullOrEmpty(_currentDatum.Message))                          break;                        _currentDatum.Message = DefaultsOverridePattern ? DefaultMessage ?? value.sValue : value.sValue;                      break;                    case "streamname":                      if (!string.IsNullOrEmpty(_currentDatum.StreamName))                          return false;                        _currentDatum.StreamName = DefaultsOverridePattern ? DefaultStreamName ?? value.sValue : value.sValue;                      break;                    case "groupname":                      if (!string.IsNullOrEmpty(_currentDatum.GroupName))                          return false;                        _currentDatum.GroupName = DefaultsOverridePattern ? DefaultGroupName ?? value.sValue : value.sValue;                      break;                    case "timestamp":                      if (_currentDatum.Timestamp.HasValue)                          return false;                        _currentDatum.Timestamp = DefaultsOverridePattern ? DefaultTimestamp ?? value.Time.Value.DateTime : value.Time.Value.DateTime;                      break;              }
