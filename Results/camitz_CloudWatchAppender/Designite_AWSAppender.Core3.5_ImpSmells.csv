Implementation smell,Namespace,Class,File,Method,Description
Long Method,AWSAppender.Core.Services,EventMessageParserBase<TDatum>,D:\research\architectureSmells\repos\camitz_CloudWatchAppender\AWSAppender.Core\Services\EventMessageParserBase.cs,ParseTokens,The method has 186 lines of code.
Complex Method,AWSAppender.Core.Services,ClientWrapperBase<TConfig;TClient>,D:\research\architectureSmells\repos\camitz_CloudWatchAppender\AWSAppender.Core\Services\ClientWrapperBase.cs,SetupClient,Cyclomatic complexity of the method is 16
Complex Method,AWSAppender.Core.Services,EventMessageParserBase<TDatum>,D:\research\architectureSmells\repos\camitz_CloudWatchAppender\AWSAppender.Core\Services\EventMessageParserBase.cs,ParseTokens,Cyclomatic complexity of the method is 31
Long Parameter List,AWSAppender.Core.Services,EventMessageParserBase<TDatum>,D:\research\architectureSmells\repos\camitz_CloudWatchAppender\AWSAppender.Core\Services\EventMessageParserBase.cs,AssignValueField,The method has 5 parameters. Parameters: currentValue' fieldName' d' sNum' sValue
Long Statement,AWSAppender.Core.PatternConverter,NamedPatternConverter,D:\research\architectureSmells\repos\camitz_CloudWatchAppender\AWSAppender.Core\PatternConverter\NamedPatternConverter.cs,ActivateOptions,The length of the statement  "                        LogLog.Error(NamedPatternConverter.declaringType' "NamedPatternConverter: Precision option \"" + text + "\" not a decimal integer."); " is 133.
Long Statement,AWSAppender.Core.Services,ClientWrapperBase<TConfig;TClient>,D:\research\architectureSmells\repos\camitz_CloudWatchAppender\AWSAppender.Core\Services\ClientWrapperBase.cs,SetupClient,The length of the statement  "            if (string.IsNullOrEmpty(_endPoint) && clientConfig.RegionEndpoint == null && ConfigurationManager.AppSettings["AWSServiceEndpoint"] != null) " is 141.
Long Statement,AWSAppender.Core.Services,ClientWrapperBase<TConfig;TClient>,D:\research\architectureSmells\repos\camitz_CloudWatchAppender\AWSAppender.Core\Services\ClientWrapperBase.cs,SetupClient,The length of the statement  "                    if (!string.IsNullOrEmpty(ConfigurationManager.AppSettings["AWSProfileName"]) || ProfileManager.ListProfileNames().Contains("default")) " is 135.
Long Statement,AWSAppender.Core.Services,ClientWrapperBase<TConfig;TClient>,D:\research\architectureSmells\repos\camitz_CloudWatchAppender\AWSAppender.Core\Services\ClientWrapperBase.cs,AddRequest,The length of the statement  "                                             String.Format("Appender timed out while submitting to CloudWatch. Exception (if any): {0}"' nestedTask.Exception)' nestedTask.Exception); " is 137.
Long Statement,AWSAppender.Core.Services,EventMessageParserBase<TDatum>,D:\research\architectureSmells\repos\camitz_CloudWatchAppender\AWSAppender.Core\Services\EventMessageParserBase.cs,Parse,The length of the statement  "                        @"(?<lbrace>{)|(?<rbrace>})|(?<float>(\d+\.\d+))|(?<int>\d+)|""(?<name>\w+)"":|(?<name>\w+):|\((?<word>[\w/ ]+)\)|""(?<word>.*?)""|(?<word>[^()}{""' ]+)|(?<lparen>\()|(?<rparen>\))") " is 182.
Empty Catch Block,AWSAppender.Core.Services,InstanceMetaDataReader,D:\research\architectureSmells\repos\camitz_CloudWatchAppender\AWSAppender.Core\Services\InstanceMetaDataReader.cs,GetMetaData,The method has an empty catch block.
Magic Number,AWSAppender.Core.PatternConverter,LoggerPatternConverter,D:\research\architectureSmells\repos\camitz_CloudWatchAppender\AWSAppender.Core\PatternConverter\LoggerPatternConverter.cs,Convert,The following statement contains a magic number: m_precision == 0 || text == null || text.Length < 2
Magic Number,AWSAppender.Core.PatternConverter,NamedPatternConverter,D:\research\architectureSmells\repos\camitz_CloudWatchAppender\AWSAppender.Core\PatternConverter\NamedPatternConverter.cs,Convert,The following statement contains a magic number: this.m_precision <= 0 || text == null || text.Length < 2
Magic Number,AWSAppender.Core.Services,ClientWrapperBase<TConfig;TClient>,D:\research\architectureSmells\repos\camitz_CloudWatchAppender\AWSAppender.Core\Services\ClientWrapperBase.cs,AddRequest,The following statement contains a magic number: superTask =                      new Task(() =>                               {                                   var nestedTask =                                       Task.Factory.StartNew(() =>                                                             {                                                                 try                                                                 {                                                                     var tmpCulture = Thread.CurrentThread.CurrentCulture;                                                                     Thread.CurrentThread.CurrentCulture = new CultureInfo(                                                                         "en-GB"' false);                                                                       LogLog.Debug(GetType()' "Sending");                                                                     var response = func();                                                                     LogLog.Debug(GetType()'                                                                         "RequestID: " + response.ResponseMetadata.RequestId);                                                                       Thread.CurrentThread.CurrentCulture = tmpCulture;                                                                 }                                                                 catch (Exception e)                                                                 {                                                                     LogLog.Debug(GetType()' e.ToString());                                                                 }                                                             }' ct);                                     try                                   {                                       if (!nestedTask.Wait(30000))//should be configurable                                       {                                           tokenSource.Cancel();                                           LogLog.Error(GetType()'                                               String.Format("Appender timed out while submitting to CloudWatch. Exception (if any): {0}"' nestedTask.Exception)' nestedTask.Exception);                                       }                                   }                                   catch (Exception e)                                   {                                       LogLog.Error(GetType()'                                           String.Format("Appender encountered an error while submitting to cloudwatch. {0}"' e.Message)' e);                                   }                                     superTask.ContinueWith(t =>                                                          {                                                              Task task2;                                                              ServiceTasks.Tasks.TryRemove(superTask.Id' out task2);                                                              LogLog.Debug(GetType()' "AWSAppender complete");                                                              if (superTask.Exception != null)                                                                  LogLog.Error(GetType()'                                                                      string.Format(                                                                          "IAWSAppender encountered an error while submitting. {0}"'                                                                          superTask.Exception));                                                          });                               });
Magic Number,AWSAppender.Core.Services,InstanceMetaDataReader,D:\research\architectureSmells\repos\camitz_CloudWatchAppender\AWSAppender.Core\Services\InstanceMetaDataReader.cs,GetMetaData,The following statement contains a magic number: var task1 =                      _pendingTasks[key] =                          Task.Factory.StartNew(() =>                                                    {                                                        if (++_attempts[key] > 10)                                                            _cachedValues[key] = key + "_MaxAttemptsExceeded";                                                          var task =                                                            Task.Factory.StartNew(() =>                                                                                      {                                                                                          try                                                                                          {                                                                                              responseStream =                                                                                                  WebRequest.Create(uri)                                                                                                      .GetResponse()                                                                                                      .GetResponseStream();                                                                                          }                                                                                          catch (Exception)                                                                                          {                                                                                              error = true;                                                                                          }                                                                                      }' ct);                                                          if (!task.Wait(2000))                                                            tokenSource.Cancel();                                                          if (responseStream != null)                                                        {                                                            var s = new StreamReader(responseStream' true).ReadToEnd();                                                            if (!string.IsNullOrEmpty(s))                                                            {                                                                _cachedValues[key] = s;                                                                _attempts[key] = 0;                                                            }                                                            else                                                                error = true;                                                        }                                                        else                                                            error = true;                                                    });
Magic Number,AWSAppender.Core.Services,InstanceMetaDataReader,D:\research\architectureSmells\repos\camitz_CloudWatchAppender\AWSAppender.Core\Services\InstanceMetaDataReader.cs,GetMetaData,The following statement contains a magic number: var task1 =                      _pendingTasks[key] =                          Task.Factory.StartNew(() =>                                                    {                                                        if (++_attempts[key] > 10)                                                            _cachedValues[key] = key + "_MaxAttemptsExceeded";                                                          var task =                                                            Task.Factory.StartNew(() =>                                                                                      {                                                                                          try                                                                                          {                                                                                              responseStream =                                                                                                  WebRequest.Create(uri)                                                                                                      .GetResponse()                                                                                                      .GetResponseStream();                                                                                          }                                                                                          catch (Exception)                                                                                          {                                                                                              error = true;                                                                                          }                                                                                      }' ct);                                                          if (!task.Wait(2000))                                                            tokenSource.Cancel();                                                          if (responseStream != null)                                                        {                                                            var s = new StreamReader(responseStream' true).ReadToEnd();                                                            if (!string.IsNullOrEmpty(s))                                                            {                                                                _cachedValues[key] = s;                                                                _attempts[key] = 0;                                                            }                                                            else                                                                error = true;                                                        }                                                        else                                                            error = true;                                                    });
