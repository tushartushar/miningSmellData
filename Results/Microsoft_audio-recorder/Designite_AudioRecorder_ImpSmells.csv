Implementation smell,Namespace,Class,File,Method,Description
Complex Method,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,dt_Tick,Cyclomatic complexity of the method is 7
Empty Catch Block,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,dt_Tick,The method has an empty catch block.
Magic Number,AudioRecorder,AudioFilePage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioFilePage.xaml.cs,StopPlay_Click,The following statement contains a magic number: if (App.AudioModel.IsPlaying) {  	App.AudioManager.StopPlayback ();  } else {  	if (selectedFileName.Length == 0) {  		MessageBox.Show ("Select an audio file first.");  	} else {  		AudioFileModel selected = (AudioFileModel)AudioFilesList.SelectedItem;  		Boolean useWasapi = selected.SampleRate != 16000 || selected.ChannelCount != 1;  		App.AudioManager.StartPlayback (selectedFileName' useWasapi);  	}  }  
Magic Number,AudioRecorder,AudioFilePage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioFilePage.xaml.cs,StopPlay_Click,The following statement contains a magic number: if (selectedFileName.Length == 0) {  	MessageBox.Show ("Select an audio file first.");  } else {  	AudioFileModel selected = (AudioFileModel)AudioFilesList.SelectedItem;  	Boolean useWasapi = selected.SampleRate != 16000 || selected.ChannelCount != 1;  	App.AudioManager.StartPlayback (selectedFileName' useWasapi);  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,AudioManager,The following statement contains a magic number: dt.Interval = TimeSpan.FromMilliseconds (33);  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,StartRecording,The following statement contains a magic number: if (App.AudioModel.ChannelCount == 1 && App.AudioModel.SampleRate == 16000) {  	wasapiInUse = false;  	xnaAudio.StartRecording ();  } // 16-bit' Stereo 44100 Hz is used in WASAPI recording  else {  	wasapiInUse = true;  	App.AudioModel.stream.SetLength (0);  	wasapiAudio.StartAudioCapture ();  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,StopRecording,The following statement contains a magic number: if (App.AudioModel.ChannelCount == 1 && App.AudioModel.SampleRate == 16000) {  	xnaAudio.StopRecording ();  } // 16-bit' Stereo 44100 Hz is used in WASAPI recording  else {  	wasapiAudio.StopAudioCapture ();  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: try {  	DateTime dateTime = DateTime.Now;  	string fileName = dateTime.ToString ("yyyy_MM_dd_HH_mm_ss.wav");  	using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  		// Write a header before the actual pcm data  		int sampleBits = 16;  		int sampleBytes = sampleBits / 8;  		int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  		int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  		Encoding encoding = Encoding.UTF8;  		isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  		// "RIFF"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// Chunk Size  		isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  		// Format - "Wave"  		isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  		// sub chunk - "fmt"  		isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  		// sub chunk size  		isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  		// audio format  		isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  		// num of channels  		isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  		// sample rate  		isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  		// byte rate  		isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  		// block align  		isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  		// bits per sample  		isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  		// sub chunk - "data"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// sub chunk size  		// write the actual pcm data  		App.AudioModel.stream.Position = 0;  		App.AudioModel.stream.CopyTo (isoFileStream);  		// and fill in the blanks  		long previousPos = isoFileStream.Position;  		isoFileStream.Seek (4' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  		isoFileStream.Seek (40' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  		isoFileStream.Seek (previousPos' SeekOrigin.Begin);  		isoFileStream.Flush ();  	}  } catch {  	MessageBox.Show ("Error while trying to store audio stream.");  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: try {  	DateTime dateTime = DateTime.Now;  	string fileName = dateTime.ToString ("yyyy_MM_dd_HH_mm_ss.wav");  	using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  		// Write a header before the actual pcm data  		int sampleBits = 16;  		int sampleBytes = sampleBits / 8;  		int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  		int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  		Encoding encoding = Encoding.UTF8;  		isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  		// "RIFF"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// Chunk Size  		isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  		// Format - "Wave"  		isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  		// sub chunk - "fmt"  		isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  		// sub chunk size  		isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  		// audio format  		isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  		// num of channels  		isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  		// sample rate  		isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  		// byte rate  		isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  		// block align  		isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  		// bits per sample  		isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  		// sub chunk - "data"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// sub chunk size  		// write the actual pcm data  		App.AudioModel.stream.Position = 0;  		App.AudioModel.stream.CopyTo (isoFileStream);  		// and fill in the blanks  		long previousPos = isoFileStream.Position;  		isoFileStream.Seek (4' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  		isoFileStream.Seek (40' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  		isoFileStream.Seek (previousPos' SeekOrigin.Begin);  		isoFileStream.Flush ();  	}  } catch {  	MessageBox.Show ("Error while trying to store audio stream.");  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: try {  	DateTime dateTime = DateTime.Now;  	string fileName = dateTime.ToString ("yyyy_MM_dd_HH_mm_ss.wav");  	using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  		// Write a header before the actual pcm data  		int sampleBits = 16;  		int sampleBytes = sampleBits / 8;  		int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  		int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  		Encoding encoding = Encoding.UTF8;  		isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  		// "RIFF"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// Chunk Size  		isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  		// Format - "Wave"  		isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  		// sub chunk - "fmt"  		isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  		// sub chunk size  		isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  		// audio format  		isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  		// num of channels  		isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  		// sample rate  		isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  		// byte rate  		isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  		// block align  		isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  		// bits per sample  		isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  		// sub chunk - "data"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// sub chunk size  		// write the actual pcm data  		App.AudioModel.stream.Position = 0;  		App.AudioModel.stream.CopyTo (isoFileStream);  		// and fill in the blanks  		long previousPos = isoFileStream.Position;  		isoFileStream.Seek (4' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  		isoFileStream.Seek (40' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  		isoFileStream.Seek (previousPos' SeekOrigin.Begin);  		isoFileStream.Flush ();  	}  } catch {  	MessageBox.Show ("Error while trying to store audio stream.");  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: try {  	DateTime dateTime = DateTime.Now;  	string fileName = dateTime.ToString ("yyyy_MM_dd_HH_mm_ss.wav");  	using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  		// Write a header before the actual pcm data  		int sampleBits = 16;  		int sampleBytes = sampleBits / 8;  		int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  		int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  		Encoding encoding = Encoding.UTF8;  		isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  		// "RIFF"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// Chunk Size  		isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  		// Format - "Wave"  		isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  		// sub chunk - "fmt"  		isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  		// sub chunk size  		isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  		// audio format  		isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  		// num of channels  		isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  		// sample rate  		isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  		// byte rate  		isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  		// block align  		isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  		// bits per sample  		isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  		// sub chunk - "data"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// sub chunk size  		// write the actual pcm data  		App.AudioModel.stream.Position = 0;  		App.AudioModel.stream.CopyTo (isoFileStream);  		// and fill in the blanks  		long previousPos = isoFileStream.Position;  		isoFileStream.Seek (4' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  		isoFileStream.Seek (40' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  		isoFileStream.Seek (previousPos' SeekOrigin.Begin);  		isoFileStream.Flush ();  	}  } catch {  	MessageBox.Show ("Error while trying to store audio stream.");  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: try {  	DateTime dateTime = DateTime.Now;  	string fileName = dateTime.ToString ("yyyy_MM_dd_HH_mm_ss.wav");  	using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  		// Write a header before the actual pcm data  		int sampleBits = 16;  		int sampleBytes = sampleBits / 8;  		int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  		int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  		Encoding encoding = Encoding.UTF8;  		isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  		// "RIFF"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// Chunk Size  		isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  		// Format - "Wave"  		isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  		// sub chunk - "fmt"  		isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  		// sub chunk size  		isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  		// audio format  		isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  		// num of channels  		isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  		// sample rate  		isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  		// byte rate  		isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  		// block align  		isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  		// bits per sample  		isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  		// sub chunk - "data"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// sub chunk size  		// write the actual pcm data  		App.AudioModel.stream.Position = 0;  		App.AudioModel.stream.CopyTo (isoFileStream);  		// and fill in the blanks  		long previousPos = isoFileStream.Position;  		isoFileStream.Seek (4' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  		isoFileStream.Seek (40' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  		isoFileStream.Seek (previousPos' SeekOrigin.Begin);  		isoFileStream.Flush ();  	}  } catch {  	MessageBox.Show ("Error while trying to store audio stream.");  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: try {  	DateTime dateTime = DateTime.Now;  	string fileName = dateTime.ToString ("yyyy_MM_dd_HH_mm_ss.wav");  	using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  		// Write a header before the actual pcm data  		int sampleBits = 16;  		int sampleBytes = sampleBits / 8;  		int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  		int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  		Encoding encoding = Encoding.UTF8;  		isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  		// "RIFF"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// Chunk Size  		isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  		// Format - "Wave"  		isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  		// sub chunk - "fmt"  		isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  		// sub chunk size  		isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  		// audio format  		isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  		// num of channels  		isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  		// sample rate  		isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  		// byte rate  		isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  		// block align  		isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  		// bits per sample  		isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  		// sub chunk - "data"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// sub chunk size  		// write the actual pcm data  		App.AudioModel.stream.Position = 0;  		App.AudioModel.stream.CopyTo (isoFileStream);  		// and fill in the blanks  		long previousPos = isoFileStream.Position;  		isoFileStream.Seek (4' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  		isoFileStream.Seek (40' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  		isoFileStream.Seek (previousPos' SeekOrigin.Begin);  		isoFileStream.Flush ();  	}  } catch {  	MessageBox.Show ("Error while trying to store audio stream.");  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: try {  	DateTime dateTime = DateTime.Now;  	string fileName = dateTime.ToString ("yyyy_MM_dd_HH_mm_ss.wav");  	using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  		// Write a header before the actual pcm data  		int sampleBits = 16;  		int sampleBytes = sampleBits / 8;  		int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  		int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  		Encoding encoding = Encoding.UTF8;  		isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  		// "RIFF"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// Chunk Size  		isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  		// Format - "Wave"  		isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  		// sub chunk - "fmt"  		isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  		// sub chunk size  		isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  		// audio format  		isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  		// num of channels  		isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  		// sample rate  		isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  		// byte rate  		isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  		// block align  		isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  		// bits per sample  		isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  		// sub chunk - "data"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// sub chunk size  		// write the actual pcm data  		App.AudioModel.stream.Position = 0;  		App.AudioModel.stream.CopyTo (isoFileStream);  		// and fill in the blanks  		long previousPos = isoFileStream.Position;  		isoFileStream.Seek (4' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  		isoFileStream.Seek (40' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  		isoFileStream.Seek (previousPos' SeekOrigin.Begin);  		isoFileStream.Flush ();  	}  } catch {  	MessageBox.Show ("Error while trying to store audio stream.");  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: try {  	DateTime dateTime = DateTime.Now;  	string fileName = dateTime.ToString ("yyyy_MM_dd_HH_mm_ss.wav");  	using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  		// Write a header before the actual pcm data  		int sampleBits = 16;  		int sampleBytes = sampleBits / 8;  		int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  		int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  		Encoding encoding = Encoding.UTF8;  		isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  		// "RIFF"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// Chunk Size  		isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  		// Format - "Wave"  		isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  		// sub chunk - "fmt"  		isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  		// sub chunk size  		isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  		// audio format  		isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  		// num of channels  		isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  		// sample rate  		isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  		// byte rate  		isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  		// block align  		isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  		// bits per sample  		isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  		// sub chunk - "data"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// sub chunk size  		// write the actual pcm data  		App.AudioModel.stream.Position = 0;  		App.AudioModel.stream.CopyTo (isoFileStream);  		// and fill in the blanks  		long previousPos = isoFileStream.Position;  		isoFileStream.Seek (4' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  		isoFileStream.Seek (40' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  		isoFileStream.Seek (previousPos' SeekOrigin.Begin);  		isoFileStream.Flush ();  	}  } catch {  	MessageBox.Show ("Error while trying to store audio stream.");  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: try {  	DateTime dateTime = DateTime.Now;  	string fileName = dateTime.ToString ("yyyy_MM_dd_HH_mm_ss.wav");  	using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  		// Write a header before the actual pcm data  		int sampleBits = 16;  		int sampleBytes = sampleBits / 8;  		int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  		int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  		Encoding encoding = Encoding.UTF8;  		isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  		// "RIFF"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// Chunk Size  		isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  		// Format - "Wave"  		isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  		// sub chunk - "fmt"  		isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  		// sub chunk size  		isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  		// audio format  		isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  		// num of channels  		isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  		// sample rate  		isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  		// byte rate  		isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  		// block align  		isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  		// bits per sample  		isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  		// sub chunk - "data"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// sub chunk size  		// write the actual pcm data  		App.AudioModel.stream.Position = 0;  		App.AudioModel.stream.CopyTo (isoFileStream);  		// and fill in the blanks  		long previousPos = isoFileStream.Position;  		isoFileStream.Seek (4' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  		isoFileStream.Seek (40' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  		isoFileStream.Seek (previousPos' SeekOrigin.Begin);  		isoFileStream.Flush ();  	}  } catch {  	MessageBox.Show ("Error while trying to store audio stream.");  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: try {  	DateTime dateTime = DateTime.Now;  	string fileName = dateTime.ToString ("yyyy_MM_dd_HH_mm_ss.wav");  	using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  		// Write a header before the actual pcm data  		int sampleBits = 16;  		int sampleBytes = sampleBits / 8;  		int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  		int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  		Encoding encoding = Encoding.UTF8;  		isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  		// "RIFF"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// Chunk Size  		isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  		// Format - "Wave"  		isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  		// sub chunk - "fmt"  		isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  		// sub chunk size  		isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  		// audio format  		isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  		// num of channels  		isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  		// sample rate  		isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  		// byte rate  		isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  		// block align  		isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  		// bits per sample  		isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  		// sub chunk - "data"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// sub chunk size  		// write the actual pcm data  		App.AudioModel.stream.Position = 0;  		App.AudioModel.stream.CopyTo (isoFileStream);  		// and fill in the blanks  		long previousPos = isoFileStream.Position;  		isoFileStream.Seek (4' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  		isoFileStream.Seek (40' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  		isoFileStream.Seek (previousPos' SeekOrigin.Begin);  		isoFileStream.Flush ();  	}  } catch {  	MessageBox.Show ("Error while trying to store audio stream.");  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: try {  	DateTime dateTime = DateTime.Now;  	string fileName = dateTime.ToString ("yyyy_MM_dd_HH_mm_ss.wav");  	using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  		// Write a header before the actual pcm data  		int sampleBits = 16;  		int sampleBytes = sampleBits / 8;  		int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  		int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  		Encoding encoding = Encoding.UTF8;  		isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  		// "RIFF"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// Chunk Size  		isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  		// Format - "Wave"  		isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  		// sub chunk - "fmt"  		isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  		// sub chunk size  		isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  		// audio format  		isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  		// num of channels  		isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  		// sample rate  		isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  		// byte rate  		isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  		// block align  		isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  		// bits per sample  		isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  		// sub chunk - "data"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// sub chunk size  		// write the actual pcm data  		App.AudioModel.stream.Position = 0;  		App.AudioModel.stream.CopyTo (isoFileStream);  		// and fill in the blanks  		long previousPos = isoFileStream.Position;  		isoFileStream.Seek (4' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  		isoFileStream.Seek (40' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  		isoFileStream.Seek (previousPos' SeekOrigin.Begin);  		isoFileStream.Flush ();  	}  } catch {  	MessageBox.Show ("Error while trying to store audio stream.");  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: try {  	DateTime dateTime = DateTime.Now;  	string fileName = dateTime.ToString ("yyyy_MM_dd_HH_mm_ss.wav");  	using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  		// Write a header before the actual pcm data  		int sampleBits = 16;  		int sampleBytes = sampleBits / 8;  		int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  		int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  		Encoding encoding = Encoding.UTF8;  		isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  		// "RIFF"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// Chunk Size  		isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  		// Format - "Wave"  		isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  		// sub chunk - "fmt"  		isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  		// sub chunk size  		isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  		// audio format  		isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  		// num of channels  		isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  		// sample rate  		isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  		// byte rate  		isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  		// block align  		isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  		// bits per sample  		isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  		// sub chunk - "data"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// sub chunk size  		// write the actual pcm data  		App.AudioModel.stream.Position = 0;  		App.AudioModel.stream.CopyTo (isoFileStream);  		// and fill in the blanks  		long previousPos = isoFileStream.Position;  		isoFileStream.Seek (4' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  		isoFileStream.Seek (40' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  		isoFileStream.Seek (previousPos' SeekOrigin.Begin);  		isoFileStream.Flush ();  	}  } catch {  	MessageBox.Show ("Error while trying to store audio stream.");  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: try {  	DateTime dateTime = DateTime.Now;  	string fileName = dateTime.ToString ("yyyy_MM_dd_HH_mm_ss.wav");  	using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  		// Write a header before the actual pcm data  		int sampleBits = 16;  		int sampleBytes = sampleBits / 8;  		int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  		int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  		Encoding encoding = Encoding.UTF8;  		isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  		// "RIFF"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// Chunk Size  		isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  		// Format - "Wave"  		isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  		// sub chunk - "fmt"  		isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  		// sub chunk size  		isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  		// audio format  		isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  		// num of channels  		isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  		// sample rate  		isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  		// byte rate  		isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  		// block align  		isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  		// bits per sample  		isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  		// sub chunk - "data"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// sub chunk size  		// write the actual pcm data  		App.AudioModel.stream.Position = 0;  		App.AudioModel.stream.CopyTo (isoFileStream);  		// and fill in the blanks  		long previousPos = isoFileStream.Position;  		isoFileStream.Seek (4' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  		isoFileStream.Seek (40' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  		isoFileStream.Seek (previousPos' SeekOrigin.Begin);  		isoFileStream.Flush ();  	}  } catch {  	MessageBox.Show ("Error while trying to store audio stream.");  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: try {  	DateTime dateTime = DateTime.Now;  	string fileName = dateTime.ToString ("yyyy_MM_dd_HH_mm_ss.wav");  	using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  		// Write a header before the actual pcm data  		int sampleBits = 16;  		int sampleBytes = sampleBits / 8;  		int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  		int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  		Encoding encoding = Encoding.UTF8;  		isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  		// "RIFF"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// Chunk Size  		isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  		// Format - "Wave"  		isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  		// sub chunk - "fmt"  		isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  		// sub chunk size  		isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  		// audio format  		isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  		// num of channels  		isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  		// sample rate  		isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  		// byte rate  		isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  		// block align  		isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  		// bits per sample  		isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  		// sub chunk - "data"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// sub chunk size  		// write the actual pcm data  		App.AudioModel.stream.Position = 0;  		App.AudioModel.stream.CopyTo (isoFileStream);  		// and fill in the blanks  		long previousPos = isoFileStream.Position;  		isoFileStream.Seek (4' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  		isoFileStream.Seek (40' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  		isoFileStream.Seek (previousPos' SeekOrigin.Begin);  		isoFileStream.Flush ();  	}  } catch {  	MessageBox.Show ("Error while trying to store audio stream.");  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: try {  	DateTime dateTime = DateTime.Now;  	string fileName = dateTime.ToString ("yyyy_MM_dd_HH_mm_ss.wav");  	using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  		// Write a header before the actual pcm data  		int sampleBits = 16;  		int sampleBytes = sampleBits / 8;  		int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  		int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  		Encoding encoding = Encoding.UTF8;  		isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  		// "RIFF"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// Chunk Size  		isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  		// Format - "Wave"  		isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  		// sub chunk - "fmt"  		isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  		// sub chunk size  		isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  		// audio format  		isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  		// num of channels  		isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  		// sample rate  		isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  		// byte rate  		isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  		// block align  		isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  		// bits per sample  		isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  		// sub chunk - "data"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// sub chunk size  		// write the actual pcm data  		App.AudioModel.stream.Position = 0;  		App.AudioModel.stream.CopyTo (isoFileStream);  		// and fill in the blanks  		long previousPos = isoFileStream.Position;  		isoFileStream.Seek (4' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  		isoFileStream.Seek (40' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  		isoFileStream.Seek (previousPos' SeekOrigin.Begin);  		isoFileStream.Flush ();  	}  } catch {  	MessageBox.Show ("Error while trying to store audio stream.");  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: try {  	DateTime dateTime = DateTime.Now;  	string fileName = dateTime.ToString ("yyyy_MM_dd_HH_mm_ss.wav");  	using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  		// Write a header before the actual pcm data  		int sampleBits = 16;  		int sampleBytes = sampleBits / 8;  		int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  		int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  		Encoding encoding = Encoding.UTF8;  		isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  		// "RIFF"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// Chunk Size  		isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  		// Format - "Wave"  		isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  		// sub chunk - "fmt"  		isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  		// sub chunk size  		isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  		// audio format  		isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  		// num of channels  		isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  		// sample rate  		isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  		// byte rate  		isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  		// block align  		isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  		// bits per sample  		isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  		// sub chunk - "data"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// sub chunk size  		// write the actual pcm data  		App.AudioModel.stream.Position = 0;  		App.AudioModel.stream.CopyTo (isoFileStream);  		// and fill in the blanks  		long previousPos = isoFileStream.Position;  		isoFileStream.Seek (4' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  		isoFileStream.Seek (40' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  		isoFileStream.Seek (previousPos' SeekOrigin.Begin);  		isoFileStream.Flush ();  	}  } catch {  	MessageBox.Show ("Error while trying to store audio stream.");  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: try {  	DateTime dateTime = DateTime.Now;  	string fileName = dateTime.ToString ("yyyy_MM_dd_HH_mm_ss.wav");  	using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  		// Write a header before the actual pcm data  		int sampleBits = 16;  		int sampleBytes = sampleBits / 8;  		int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  		int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  		Encoding encoding = Encoding.UTF8;  		isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  		// "RIFF"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// Chunk Size  		isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  		// Format - "Wave"  		isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  		// sub chunk - "fmt"  		isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  		// sub chunk size  		isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  		// audio format  		isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  		// num of channels  		isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  		// sample rate  		isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  		// byte rate  		isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  		// block align  		isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  		// bits per sample  		isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  		// sub chunk - "data"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// sub chunk size  		// write the actual pcm data  		App.AudioModel.stream.Position = 0;  		App.AudioModel.stream.CopyTo (isoFileStream);  		// and fill in the blanks  		long previousPos = isoFileStream.Position;  		isoFileStream.Seek (4' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  		isoFileStream.Seek (40' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  		isoFileStream.Seek (previousPos' SeekOrigin.Begin);  		isoFileStream.Flush ();  	}  } catch {  	MessageBox.Show ("Error while trying to store audio stream.");  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: try {  	DateTime dateTime = DateTime.Now;  	string fileName = dateTime.ToString ("yyyy_MM_dd_HH_mm_ss.wav");  	using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  		// Write a header before the actual pcm data  		int sampleBits = 16;  		int sampleBytes = sampleBits / 8;  		int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  		int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  		Encoding encoding = Encoding.UTF8;  		isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  		// "RIFF"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// Chunk Size  		isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  		// Format - "Wave"  		isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  		// sub chunk - "fmt"  		isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  		// sub chunk size  		isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  		// audio format  		isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  		// num of channels  		isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  		// sample rate  		isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  		// byte rate  		isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  		// block align  		isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  		// bits per sample  		isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  		// sub chunk - "data"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// sub chunk size  		// write the actual pcm data  		App.AudioModel.stream.Position = 0;  		App.AudioModel.stream.CopyTo (isoFileStream);  		// and fill in the blanks  		long previousPos = isoFileStream.Position;  		isoFileStream.Seek (4' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  		isoFileStream.Seek (40' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  		isoFileStream.Seek (previousPos' SeekOrigin.Begin);  		isoFileStream.Flush ();  	}  } catch {  	MessageBox.Show ("Error while trying to store audio stream.");  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: try {  	DateTime dateTime = DateTime.Now;  	string fileName = dateTime.ToString ("yyyy_MM_dd_HH_mm_ss.wav");  	using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  		// Write a header before the actual pcm data  		int sampleBits = 16;  		int sampleBytes = sampleBits / 8;  		int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  		int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  		Encoding encoding = Encoding.UTF8;  		isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  		// "RIFF"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// Chunk Size  		isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  		// Format - "Wave"  		isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  		// sub chunk - "fmt"  		isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  		// sub chunk size  		isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  		// audio format  		isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  		// num of channels  		isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  		// sample rate  		isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  		// byte rate  		isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  		// block align  		isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  		// bits per sample  		isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  		// sub chunk - "data"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// sub chunk size  		// write the actual pcm data  		App.AudioModel.stream.Position = 0;  		App.AudioModel.stream.CopyTo (isoFileStream);  		// and fill in the blanks  		long previousPos = isoFileStream.Position;  		isoFileStream.Seek (4' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  		isoFileStream.Seek (40' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  		isoFileStream.Seek (previousPos' SeekOrigin.Begin);  		isoFileStream.Flush ();  	}  } catch {  	MessageBox.Show ("Error while trying to store audio stream.");  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: try {  	DateTime dateTime = DateTime.Now;  	string fileName = dateTime.ToString ("yyyy_MM_dd_HH_mm_ss.wav");  	using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  		// Write a header before the actual pcm data  		int sampleBits = 16;  		int sampleBytes = sampleBits / 8;  		int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  		int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  		Encoding encoding = Encoding.UTF8;  		isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  		// "RIFF"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// Chunk Size  		isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  		// Format - "Wave"  		isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  		// sub chunk - "fmt"  		isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  		// sub chunk size  		isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  		// audio format  		isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  		// num of channels  		isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  		// sample rate  		isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  		// byte rate  		isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  		// block align  		isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  		// bits per sample  		isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  		// sub chunk - "data"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// sub chunk size  		// write the actual pcm data  		App.AudioModel.stream.Position = 0;  		App.AudioModel.stream.CopyTo (isoFileStream);  		// and fill in the blanks  		long previousPos = isoFileStream.Position;  		isoFileStream.Seek (4' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  		isoFileStream.Seek (40' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  		isoFileStream.Seek (previousPos' SeekOrigin.Begin);  		isoFileStream.Flush ();  	}  } catch {  	MessageBox.Show ("Error while trying to store audio stream.");  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: try {  	DateTime dateTime = DateTime.Now;  	string fileName = dateTime.ToString ("yyyy_MM_dd_HH_mm_ss.wav");  	using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  		// Write a header before the actual pcm data  		int sampleBits = 16;  		int sampleBytes = sampleBits / 8;  		int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  		int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  		Encoding encoding = Encoding.UTF8;  		isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  		// "RIFF"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// Chunk Size  		isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  		// Format - "Wave"  		isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  		// sub chunk - "fmt"  		isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  		// sub chunk size  		isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  		// audio format  		isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  		// num of channels  		isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  		// sample rate  		isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  		// byte rate  		isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  		// block align  		isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  		// bits per sample  		isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  		// sub chunk - "data"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// sub chunk size  		// write the actual pcm data  		App.AudioModel.stream.Position = 0;  		App.AudioModel.stream.CopyTo (isoFileStream);  		// and fill in the blanks  		long previousPos = isoFileStream.Position;  		isoFileStream.Seek (4' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  		isoFileStream.Seek (40' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  		isoFileStream.Seek (previousPos' SeekOrigin.Begin);  		isoFileStream.Flush ();  	}  } catch {  	MessageBox.Show ("Error while trying to store audio stream.");  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: try {  	DateTime dateTime = DateTime.Now;  	string fileName = dateTime.ToString ("yyyy_MM_dd_HH_mm_ss.wav");  	using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  		// Write a header before the actual pcm data  		int sampleBits = 16;  		int sampleBytes = sampleBits / 8;  		int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  		int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  		Encoding encoding = Encoding.UTF8;  		isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  		// "RIFF"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// Chunk Size  		isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  		// Format - "Wave"  		isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  		// sub chunk - "fmt"  		isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  		// sub chunk size  		isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  		// audio format  		isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  		// num of channels  		isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  		// sample rate  		isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  		// byte rate  		isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  		// block align  		isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  		// bits per sample  		isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  		// sub chunk - "data"  		isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  		// sub chunk size  		// write the actual pcm data  		App.AudioModel.stream.Position = 0;  		App.AudioModel.stream.CopyTo (isoFileStream);  		// and fill in the blanks  		long previousPos = isoFileStream.Position;  		isoFileStream.Seek (4' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  		isoFileStream.Seek (40' SeekOrigin.Begin);  		isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  		isoFileStream.Seek (previousPos' SeekOrigin.Begin);  		isoFileStream.Flush ();  	}  } catch {  	MessageBox.Show ("Error while trying to store audio stream.");  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  	// Write a header before the actual pcm data  	int sampleBits = 16;  	int sampleBytes = sampleBits / 8;  	int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  	int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  	Encoding encoding = Encoding.UTF8;  	isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  	// "RIFF"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// Chunk Size  	isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  	// Format - "Wave"  	isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  	// sub chunk - "fmt"  	isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  	// sub chunk size  	isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  	// audio format  	isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  	// num of channels  	isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  	// sample rate  	isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  	// byte rate  	isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  	// block align  	isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  	// bits per sample  	isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  	// sub chunk - "data"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// sub chunk size  	// write the actual pcm data  	App.AudioModel.stream.Position = 0;  	App.AudioModel.stream.CopyTo (isoFileStream);  	// and fill in the blanks  	long previousPos = isoFileStream.Position;  	isoFileStream.Seek (4' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  	isoFileStream.Seek (40' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  	isoFileStream.Seek (previousPos' SeekOrigin.Begin);  	isoFileStream.Flush ();  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  	// Write a header before the actual pcm data  	int sampleBits = 16;  	int sampleBytes = sampleBits / 8;  	int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  	int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  	Encoding encoding = Encoding.UTF8;  	isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  	// "RIFF"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// Chunk Size  	isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  	// Format - "Wave"  	isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  	// sub chunk - "fmt"  	isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  	// sub chunk size  	isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  	// audio format  	isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  	// num of channels  	isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  	// sample rate  	isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  	// byte rate  	isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  	// block align  	isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  	// bits per sample  	isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  	// sub chunk - "data"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// sub chunk size  	// write the actual pcm data  	App.AudioModel.stream.Position = 0;  	App.AudioModel.stream.CopyTo (isoFileStream);  	// and fill in the blanks  	long previousPos = isoFileStream.Position;  	isoFileStream.Seek (4' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  	isoFileStream.Seek (40' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  	isoFileStream.Seek (previousPos' SeekOrigin.Begin);  	isoFileStream.Flush ();  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  	// Write a header before the actual pcm data  	int sampleBits = 16;  	int sampleBytes = sampleBits / 8;  	int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  	int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  	Encoding encoding = Encoding.UTF8;  	isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  	// "RIFF"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// Chunk Size  	isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  	// Format - "Wave"  	isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  	// sub chunk - "fmt"  	isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  	// sub chunk size  	isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  	// audio format  	isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  	// num of channels  	isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  	// sample rate  	isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  	// byte rate  	isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  	// block align  	isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  	// bits per sample  	isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  	// sub chunk - "data"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// sub chunk size  	// write the actual pcm data  	App.AudioModel.stream.Position = 0;  	App.AudioModel.stream.CopyTo (isoFileStream);  	// and fill in the blanks  	long previousPos = isoFileStream.Position;  	isoFileStream.Seek (4' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  	isoFileStream.Seek (40' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  	isoFileStream.Seek (previousPos' SeekOrigin.Begin);  	isoFileStream.Flush ();  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  	// Write a header before the actual pcm data  	int sampleBits = 16;  	int sampleBytes = sampleBits / 8;  	int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  	int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  	Encoding encoding = Encoding.UTF8;  	isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  	// "RIFF"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// Chunk Size  	isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  	// Format - "Wave"  	isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  	// sub chunk - "fmt"  	isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  	// sub chunk size  	isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  	// audio format  	isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  	// num of channels  	isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  	// sample rate  	isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  	// byte rate  	isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  	// block align  	isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  	// bits per sample  	isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  	// sub chunk - "data"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// sub chunk size  	// write the actual pcm data  	App.AudioModel.stream.Position = 0;  	App.AudioModel.stream.CopyTo (isoFileStream);  	// and fill in the blanks  	long previousPos = isoFileStream.Position;  	isoFileStream.Seek (4' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  	isoFileStream.Seek (40' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  	isoFileStream.Seek (previousPos' SeekOrigin.Begin);  	isoFileStream.Flush ();  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  	// Write a header before the actual pcm data  	int sampleBits = 16;  	int sampleBytes = sampleBits / 8;  	int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  	int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  	Encoding encoding = Encoding.UTF8;  	isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  	// "RIFF"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// Chunk Size  	isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  	// Format - "Wave"  	isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  	// sub chunk - "fmt"  	isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  	// sub chunk size  	isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  	// audio format  	isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  	// num of channels  	isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  	// sample rate  	isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  	// byte rate  	isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  	// block align  	isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  	// bits per sample  	isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  	// sub chunk - "data"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// sub chunk size  	// write the actual pcm data  	App.AudioModel.stream.Position = 0;  	App.AudioModel.stream.CopyTo (isoFileStream);  	// and fill in the blanks  	long previousPos = isoFileStream.Position;  	isoFileStream.Seek (4' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  	isoFileStream.Seek (40' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  	isoFileStream.Seek (previousPos' SeekOrigin.Begin);  	isoFileStream.Flush ();  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  	// Write a header before the actual pcm data  	int sampleBits = 16;  	int sampleBytes = sampleBits / 8;  	int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  	int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  	Encoding encoding = Encoding.UTF8;  	isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  	// "RIFF"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// Chunk Size  	isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  	// Format - "Wave"  	isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  	// sub chunk - "fmt"  	isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  	// sub chunk size  	isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  	// audio format  	isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  	// num of channels  	isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  	// sample rate  	isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  	// byte rate  	isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  	// block align  	isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  	// bits per sample  	isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  	// sub chunk - "data"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// sub chunk size  	// write the actual pcm data  	App.AudioModel.stream.Position = 0;  	App.AudioModel.stream.CopyTo (isoFileStream);  	// and fill in the blanks  	long previousPos = isoFileStream.Position;  	isoFileStream.Seek (4' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  	isoFileStream.Seek (40' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  	isoFileStream.Seek (previousPos' SeekOrigin.Begin);  	isoFileStream.Flush ();  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  	// Write a header before the actual pcm data  	int sampleBits = 16;  	int sampleBytes = sampleBits / 8;  	int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  	int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  	Encoding encoding = Encoding.UTF8;  	isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  	// "RIFF"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// Chunk Size  	isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  	// Format - "Wave"  	isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  	// sub chunk - "fmt"  	isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  	// sub chunk size  	isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  	// audio format  	isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  	// num of channels  	isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  	// sample rate  	isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  	// byte rate  	isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  	// block align  	isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  	// bits per sample  	isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  	// sub chunk - "data"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// sub chunk size  	// write the actual pcm data  	App.AudioModel.stream.Position = 0;  	App.AudioModel.stream.CopyTo (isoFileStream);  	// and fill in the blanks  	long previousPos = isoFileStream.Position;  	isoFileStream.Seek (4' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  	isoFileStream.Seek (40' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  	isoFileStream.Seek (previousPos' SeekOrigin.Begin);  	isoFileStream.Flush ();  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  	// Write a header before the actual pcm data  	int sampleBits = 16;  	int sampleBytes = sampleBits / 8;  	int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  	int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  	Encoding encoding = Encoding.UTF8;  	isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  	// "RIFF"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// Chunk Size  	isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  	// Format - "Wave"  	isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  	// sub chunk - "fmt"  	isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  	// sub chunk size  	isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  	// audio format  	isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  	// num of channels  	isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  	// sample rate  	isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  	// byte rate  	isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  	// block align  	isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  	// bits per sample  	isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  	// sub chunk - "data"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// sub chunk size  	// write the actual pcm data  	App.AudioModel.stream.Position = 0;  	App.AudioModel.stream.CopyTo (isoFileStream);  	// and fill in the blanks  	long previousPos = isoFileStream.Position;  	isoFileStream.Seek (4' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  	isoFileStream.Seek (40' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  	isoFileStream.Seek (previousPos' SeekOrigin.Begin);  	isoFileStream.Flush ();  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  	// Write a header before the actual pcm data  	int sampleBits = 16;  	int sampleBytes = sampleBits / 8;  	int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  	int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  	Encoding encoding = Encoding.UTF8;  	isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  	// "RIFF"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// Chunk Size  	isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  	// Format - "Wave"  	isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  	// sub chunk - "fmt"  	isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  	// sub chunk size  	isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  	// audio format  	isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  	// num of channels  	isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  	// sample rate  	isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  	// byte rate  	isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  	// block align  	isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  	// bits per sample  	isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  	// sub chunk - "data"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// sub chunk size  	// write the actual pcm data  	App.AudioModel.stream.Position = 0;  	App.AudioModel.stream.CopyTo (isoFileStream);  	// and fill in the blanks  	long previousPos = isoFileStream.Position;  	isoFileStream.Seek (4' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  	isoFileStream.Seek (40' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  	isoFileStream.Seek (previousPos' SeekOrigin.Begin);  	isoFileStream.Flush ();  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  	// Write a header before the actual pcm data  	int sampleBits = 16;  	int sampleBytes = sampleBits / 8;  	int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  	int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  	Encoding encoding = Encoding.UTF8;  	isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  	// "RIFF"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// Chunk Size  	isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  	// Format - "Wave"  	isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  	// sub chunk - "fmt"  	isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  	// sub chunk size  	isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  	// audio format  	isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  	// num of channels  	isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  	// sample rate  	isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  	// byte rate  	isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  	// block align  	isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  	// bits per sample  	isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  	// sub chunk - "data"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// sub chunk size  	// write the actual pcm data  	App.AudioModel.stream.Position = 0;  	App.AudioModel.stream.CopyTo (isoFileStream);  	// and fill in the blanks  	long previousPos = isoFileStream.Position;  	isoFileStream.Seek (4' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  	isoFileStream.Seek (40' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  	isoFileStream.Seek (previousPos' SeekOrigin.Begin);  	isoFileStream.Flush ();  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  	// Write a header before the actual pcm data  	int sampleBits = 16;  	int sampleBytes = sampleBits / 8;  	int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  	int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  	Encoding encoding = Encoding.UTF8;  	isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  	// "RIFF"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// Chunk Size  	isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  	// Format - "Wave"  	isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  	// sub chunk - "fmt"  	isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  	// sub chunk size  	isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  	// audio format  	isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  	// num of channels  	isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  	// sample rate  	isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  	// byte rate  	isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  	// block align  	isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  	// bits per sample  	isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  	// sub chunk - "data"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// sub chunk size  	// write the actual pcm data  	App.AudioModel.stream.Position = 0;  	App.AudioModel.stream.CopyTo (isoFileStream);  	// and fill in the blanks  	long previousPos = isoFileStream.Position;  	isoFileStream.Seek (4' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  	isoFileStream.Seek (40' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  	isoFileStream.Seek (previousPos' SeekOrigin.Begin);  	isoFileStream.Flush ();  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  	// Write a header before the actual pcm data  	int sampleBits = 16;  	int sampleBytes = sampleBits / 8;  	int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  	int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  	Encoding encoding = Encoding.UTF8;  	isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  	// "RIFF"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// Chunk Size  	isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  	// Format - "Wave"  	isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  	// sub chunk - "fmt"  	isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  	// sub chunk size  	isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  	// audio format  	isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  	// num of channels  	isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  	// sample rate  	isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  	// byte rate  	isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  	// block align  	isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  	// bits per sample  	isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  	// sub chunk - "data"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// sub chunk size  	// write the actual pcm data  	App.AudioModel.stream.Position = 0;  	App.AudioModel.stream.CopyTo (isoFileStream);  	// and fill in the blanks  	long previousPos = isoFileStream.Position;  	isoFileStream.Seek (4' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  	isoFileStream.Seek (40' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  	isoFileStream.Seek (previousPos' SeekOrigin.Begin);  	isoFileStream.Flush ();  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  	// Write a header before the actual pcm data  	int sampleBits = 16;  	int sampleBytes = sampleBits / 8;  	int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  	int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  	Encoding encoding = Encoding.UTF8;  	isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  	// "RIFF"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// Chunk Size  	isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  	// Format - "Wave"  	isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  	// sub chunk - "fmt"  	isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  	// sub chunk size  	isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  	// audio format  	isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  	// num of channels  	isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  	// sample rate  	isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  	// byte rate  	isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  	// block align  	isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  	// bits per sample  	isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  	// sub chunk - "data"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// sub chunk size  	// write the actual pcm data  	App.AudioModel.stream.Position = 0;  	App.AudioModel.stream.CopyTo (isoFileStream);  	// and fill in the blanks  	long previousPos = isoFileStream.Position;  	isoFileStream.Seek (4' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  	isoFileStream.Seek (40' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  	isoFileStream.Seek (previousPos' SeekOrigin.Begin);  	isoFileStream.Flush ();  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  	// Write a header before the actual pcm data  	int sampleBits = 16;  	int sampleBytes = sampleBits / 8;  	int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  	int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  	Encoding encoding = Encoding.UTF8;  	isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  	// "RIFF"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// Chunk Size  	isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  	// Format - "Wave"  	isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  	// sub chunk - "fmt"  	isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  	// sub chunk size  	isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  	// audio format  	isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  	// num of channels  	isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  	// sample rate  	isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  	// byte rate  	isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  	// block align  	isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  	// bits per sample  	isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  	// sub chunk - "data"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// sub chunk size  	// write the actual pcm data  	App.AudioModel.stream.Position = 0;  	App.AudioModel.stream.CopyTo (isoFileStream);  	// and fill in the blanks  	long previousPos = isoFileStream.Position;  	isoFileStream.Seek (4' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  	isoFileStream.Seek (40' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  	isoFileStream.Seek (previousPos' SeekOrigin.Begin);  	isoFileStream.Flush ();  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  	// Write a header before the actual pcm data  	int sampleBits = 16;  	int sampleBytes = sampleBits / 8;  	int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  	int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  	Encoding encoding = Encoding.UTF8;  	isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  	// "RIFF"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// Chunk Size  	isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  	// Format - "Wave"  	isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  	// sub chunk - "fmt"  	isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  	// sub chunk size  	isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  	// audio format  	isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  	// num of channels  	isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  	// sample rate  	isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  	// byte rate  	isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  	// block align  	isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  	// bits per sample  	isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  	// sub chunk - "data"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// sub chunk size  	// write the actual pcm data  	App.AudioModel.stream.Position = 0;  	App.AudioModel.stream.CopyTo (isoFileStream);  	// and fill in the blanks  	long previousPos = isoFileStream.Position;  	isoFileStream.Seek (4' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  	isoFileStream.Seek (40' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  	isoFileStream.Seek (previousPos' SeekOrigin.Begin);  	isoFileStream.Flush ();  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  	// Write a header before the actual pcm data  	int sampleBits = 16;  	int sampleBytes = sampleBits / 8;  	int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  	int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  	Encoding encoding = Encoding.UTF8;  	isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  	// "RIFF"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// Chunk Size  	isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  	// Format - "Wave"  	isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  	// sub chunk - "fmt"  	isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  	// sub chunk size  	isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  	// audio format  	isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  	// num of channels  	isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  	// sample rate  	isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  	// byte rate  	isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  	// block align  	isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  	// bits per sample  	isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  	// sub chunk - "data"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// sub chunk size  	// write the actual pcm data  	App.AudioModel.stream.Position = 0;  	App.AudioModel.stream.CopyTo (isoFileStream);  	// and fill in the blanks  	long previousPos = isoFileStream.Position;  	isoFileStream.Seek (4' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  	isoFileStream.Seek (40' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  	isoFileStream.Seek (previousPos' SeekOrigin.Begin);  	isoFileStream.Flush ();  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  	// Write a header before the actual pcm data  	int sampleBits = 16;  	int sampleBytes = sampleBits / 8;  	int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  	int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  	Encoding encoding = Encoding.UTF8;  	isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  	// "RIFF"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// Chunk Size  	isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  	// Format - "Wave"  	isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  	// sub chunk - "fmt"  	isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  	// sub chunk size  	isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  	// audio format  	isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  	// num of channels  	isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  	// sample rate  	isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  	// byte rate  	isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  	// block align  	isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  	// bits per sample  	isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  	// sub chunk - "data"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// sub chunk size  	// write the actual pcm data  	App.AudioModel.stream.Position = 0;  	App.AudioModel.stream.CopyTo (isoFileStream);  	// and fill in the blanks  	long previousPos = isoFileStream.Position;  	isoFileStream.Seek (4' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  	isoFileStream.Seek (40' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  	isoFileStream.Seek (previousPos' SeekOrigin.Begin);  	isoFileStream.Flush ();  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  	// Write a header before the actual pcm data  	int sampleBits = 16;  	int sampleBytes = sampleBits / 8;  	int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  	int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  	Encoding encoding = Encoding.UTF8;  	isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  	// "RIFF"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// Chunk Size  	isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  	// Format - "Wave"  	isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  	// sub chunk - "fmt"  	isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  	// sub chunk size  	isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  	// audio format  	isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  	// num of channels  	isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  	// sample rate  	isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  	// byte rate  	isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  	// block align  	isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  	// bits per sample  	isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  	// sub chunk - "data"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// sub chunk size  	// write the actual pcm data  	App.AudioModel.stream.Position = 0;  	App.AudioModel.stream.CopyTo (isoFileStream);  	// and fill in the blanks  	long previousPos = isoFileStream.Position;  	isoFileStream.Seek (4' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  	isoFileStream.Seek (40' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  	isoFileStream.Seek (previousPos' SeekOrigin.Begin);  	isoFileStream.Flush ();  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  	// Write a header before the actual pcm data  	int sampleBits = 16;  	int sampleBytes = sampleBits / 8;  	int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  	int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  	Encoding encoding = Encoding.UTF8;  	isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  	// "RIFF"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// Chunk Size  	isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  	// Format - "Wave"  	isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  	// sub chunk - "fmt"  	isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  	// sub chunk size  	isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  	// audio format  	isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  	// num of channels  	isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  	// sample rate  	isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  	// byte rate  	isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  	// block align  	isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  	// bits per sample  	isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  	// sub chunk - "data"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// sub chunk size  	// write the actual pcm data  	App.AudioModel.stream.Position = 0;  	App.AudioModel.stream.CopyTo (isoFileStream);  	// and fill in the blanks  	long previousPos = isoFileStream.Position;  	isoFileStream.Seek (4' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  	isoFileStream.Seek (40' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  	isoFileStream.Seek (previousPos' SeekOrigin.Begin);  	isoFileStream.Flush ();  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  	// Write a header before the actual pcm data  	int sampleBits = 16;  	int sampleBytes = sampleBits / 8;  	int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  	int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  	Encoding encoding = Encoding.UTF8;  	isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  	// "RIFF"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// Chunk Size  	isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  	// Format - "Wave"  	isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  	// sub chunk - "fmt"  	isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  	// sub chunk size  	isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  	// audio format  	isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  	// num of channels  	isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  	// sample rate  	isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  	// byte rate  	isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  	// block align  	isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  	// bits per sample  	isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  	// sub chunk - "data"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// sub chunk size  	// write the actual pcm data  	App.AudioModel.stream.Position = 0;  	App.AudioModel.stream.CopyTo (isoFileStream);  	// and fill in the blanks  	long previousPos = isoFileStream.Position;  	isoFileStream.Seek (4' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  	isoFileStream.Seek (40' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  	isoFileStream.Seek (previousPos' SeekOrigin.Begin);  	isoFileStream.Flush ();  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  	// Write a header before the actual pcm data  	int sampleBits = 16;  	int sampleBytes = sampleBits / 8;  	int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  	int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  	Encoding encoding = Encoding.UTF8;  	isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  	// "RIFF"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// Chunk Size  	isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  	// Format - "Wave"  	isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  	// sub chunk - "fmt"  	isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  	// sub chunk size  	isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  	// audio format  	isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  	// num of channels  	isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  	// sample rate  	isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  	// byte rate  	isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  	// block align  	isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  	// bits per sample  	isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  	// sub chunk - "data"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// sub chunk size  	// write the actual pcm data  	App.AudioModel.stream.Position = 0;  	App.AudioModel.stream.CopyTo (isoFileStream);  	// and fill in the blanks  	long previousPos = isoFileStream.Position;  	isoFileStream.Seek (4' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  	isoFileStream.Seek (40' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  	isoFileStream.Seek (previousPos' SeekOrigin.Begin);  	isoFileStream.Flush ();  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: using (var isoFileStream = new IsolatedStorageFileStream (fileName' FileMode.OpenOrCreate' myStore)) {  	// Write a header before the actual pcm data  	int sampleBits = 16;  	int sampleBytes = sampleBits / 8;  	int byteRate = App.AudioModel.SampleRate * sampleBytes * App.AudioModel.ChannelCount;  	int blockAlign = sampleBytes * App.AudioModel.ChannelCount;  	Encoding encoding = Encoding.UTF8;  	isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  	// "RIFF"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// Chunk Size  	isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  	// Format - "Wave"  	isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  	// sub chunk - "fmt"  	isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  	// sub chunk size  	isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  	// audio format  	isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  	// num of channels  	isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  	// sample rate  	isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  	// byte rate  	isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  	// block align  	isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  	// bits per sample  	isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  	// sub chunk - "data"  	isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  	// sub chunk size  	// write the actual pcm data  	App.AudioModel.stream.Position = 0;  	App.AudioModel.stream.CopyTo (isoFileStream);  	// and fill in the blanks  	long previousPos = isoFileStream.Position;  	isoFileStream.Seek (4' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  	isoFileStream.Seek (40' SeekOrigin.Begin);  	isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  	isoFileStream.Seek (previousPos' SeekOrigin.Begin);  	isoFileStream.Flush ();  }  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: isoFileStream.Write (encoding.GetBytes ("RIFF")' 0' 4);  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: isoFileStream.Write (encoding.GetBytes ("WAVE")' 0' 4);  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: isoFileStream.Write (encoding.GetBytes ("fmt ")' 0' 4);  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: isoFileStream.Write (BitConverter.GetBytes (16)' 0' 4);  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: isoFileStream.Write (BitConverter.GetBytes ((short)1)' 0' 2);  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: isoFileStream.Write (BitConverter.GetBytes ((short)App.AudioModel.ChannelCount)' 0' 2);  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: isoFileStream.Write (BitConverter.GetBytes (App.AudioModel.SampleRate)' 0' 4);  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: isoFileStream.Write (BitConverter.GetBytes (byteRate)' 0' 4);  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: isoFileStream.Write (BitConverter.GetBytes ((short)(blockAlign))' 0' 2);  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: isoFileStream.Write (BitConverter.GetBytes ((short)(sampleBits))' 0' 2);  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: isoFileStream.Write (encoding.GetBytes ("data")' 0' 4);  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: isoFileStream.Write (BitConverter.GetBytes (0)' 0' 4);  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: isoFileStream.Seek (4' SeekOrigin.Begin);  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 8)' 0' 4);  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: isoFileStream.Seek (40' SeekOrigin.Begin);  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  
Magic Number,AudioRecorder,AudioManager,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioManager.cs,saveAudioBuffer,The following statement contains a magic number: isoFileStream.Write (BitConverter.GetBytes ((int)isoFileStream.Length - 44)' 0' 4);  
Magic Number,AudioRecorder,AudioModel,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioModel.cs,ReadAudioFileInfo,The following statement contains a magic number: try {  	string[] fileNames = myStore.GetFileNames ();  	foreach (string s in fileNames) {  		AudioFileModel audioFile = new AudioFileModel ();  		audioFile.FileName = s;  		IsolatedStorageFileStream fileStream = myStore.OpenFile (s' System.IO.FileMode.Open' System.IO.FileAccess.Read);  		audioFile.FileSize = "" + fileStream.Length + " bytes";  		// Read sample rate and channel count  		Encoding encoding = Encoding.UTF8;  		byte[] bytes = new byte[4];  		// channel count  		fileStream.Seek (22' SeekOrigin.Begin);  		fileStream.Read (bytes' 0' 2);  		audioFile.ChannelCount = BitConverter.ToInt16 (bytes' 0);  		// sample rate  		fileStream.Read (bytes' 0' 4);  		audioFile.SampleRate = BitConverter.ToInt32 (bytes' 0);  		audioFile.FileLength = "" + fileStream.Length / (2 * audioFile.SampleRate * audioFile.ChannelCount) + " seconds";  		AudioFiles.Add (audioFile);  		fileStream.Dispose ();  	}  } catch {  	MessageBox.Show ("Error while trying to read audio files.");  }  
Magic Number,AudioRecorder,AudioModel,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioModel.cs,ReadAudioFileInfo,The following statement contains a magic number: try {  	string[] fileNames = myStore.GetFileNames ();  	foreach (string s in fileNames) {  		AudioFileModel audioFile = new AudioFileModel ();  		audioFile.FileName = s;  		IsolatedStorageFileStream fileStream = myStore.OpenFile (s' System.IO.FileMode.Open' System.IO.FileAccess.Read);  		audioFile.FileSize = "" + fileStream.Length + " bytes";  		// Read sample rate and channel count  		Encoding encoding = Encoding.UTF8;  		byte[] bytes = new byte[4];  		// channel count  		fileStream.Seek (22' SeekOrigin.Begin);  		fileStream.Read (bytes' 0' 2);  		audioFile.ChannelCount = BitConverter.ToInt16 (bytes' 0);  		// sample rate  		fileStream.Read (bytes' 0' 4);  		audioFile.SampleRate = BitConverter.ToInt32 (bytes' 0);  		audioFile.FileLength = "" + fileStream.Length / (2 * audioFile.SampleRate * audioFile.ChannelCount) + " seconds";  		AudioFiles.Add (audioFile);  		fileStream.Dispose ();  	}  } catch {  	MessageBox.Show ("Error while trying to read audio files.");  }  
Magic Number,AudioRecorder,AudioModel,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioModel.cs,ReadAudioFileInfo,The following statement contains a magic number: try {  	string[] fileNames = myStore.GetFileNames ();  	foreach (string s in fileNames) {  		AudioFileModel audioFile = new AudioFileModel ();  		audioFile.FileName = s;  		IsolatedStorageFileStream fileStream = myStore.OpenFile (s' System.IO.FileMode.Open' System.IO.FileAccess.Read);  		audioFile.FileSize = "" + fileStream.Length + " bytes";  		// Read sample rate and channel count  		Encoding encoding = Encoding.UTF8;  		byte[] bytes = new byte[4];  		// channel count  		fileStream.Seek (22' SeekOrigin.Begin);  		fileStream.Read (bytes' 0' 2);  		audioFile.ChannelCount = BitConverter.ToInt16 (bytes' 0);  		// sample rate  		fileStream.Read (bytes' 0' 4);  		audioFile.SampleRate = BitConverter.ToInt32 (bytes' 0);  		audioFile.FileLength = "" + fileStream.Length / (2 * audioFile.SampleRate * audioFile.ChannelCount) + " seconds";  		AudioFiles.Add (audioFile);  		fileStream.Dispose ();  	}  } catch {  	MessageBox.Show ("Error while trying to read audio files.");  }  
Magic Number,AudioRecorder,AudioModel,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioModel.cs,ReadAudioFileInfo,The following statement contains a magic number: try {  	string[] fileNames = myStore.GetFileNames ();  	foreach (string s in fileNames) {  		AudioFileModel audioFile = new AudioFileModel ();  		audioFile.FileName = s;  		IsolatedStorageFileStream fileStream = myStore.OpenFile (s' System.IO.FileMode.Open' System.IO.FileAccess.Read);  		audioFile.FileSize = "" + fileStream.Length + " bytes";  		// Read sample rate and channel count  		Encoding encoding = Encoding.UTF8;  		byte[] bytes = new byte[4];  		// channel count  		fileStream.Seek (22' SeekOrigin.Begin);  		fileStream.Read (bytes' 0' 2);  		audioFile.ChannelCount = BitConverter.ToInt16 (bytes' 0);  		// sample rate  		fileStream.Read (bytes' 0' 4);  		audioFile.SampleRate = BitConverter.ToInt32 (bytes' 0);  		audioFile.FileLength = "" + fileStream.Length / (2 * audioFile.SampleRate * audioFile.ChannelCount) + " seconds";  		AudioFiles.Add (audioFile);  		fileStream.Dispose ();  	}  } catch {  	MessageBox.Show ("Error while trying to read audio files.");  }  
Magic Number,AudioRecorder,AudioModel,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioModel.cs,ReadAudioFileInfo,The following statement contains a magic number: try {  	string[] fileNames = myStore.GetFileNames ();  	foreach (string s in fileNames) {  		AudioFileModel audioFile = new AudioFileModel ();  		audioFile.FileName = s;  		IsolatedStorageFileStream fileStream = myStore.OpenFile (s' System.IO.FileMode.Open' System.IO.FileAccess.Read);  		audioFile.FileSize = "" + fileStream.Length + " bytes";  		// Read sample rate and channel count  		Encoding encoding = Encoding.UTF8;  		byte[] bytes = new byte[4];  		// channel count  		fileStream.Seek (22' SeekOrigin.Begin);  		fileStream.Read (bytes' 0' 2);  		audioFile.ChannelCount = BitConverter.ToInt16 (bytes' 0);  		// sample rate  		fileStream.Read (bytes' 0' 4);  		audioFile.SampleRate = BitConverter.ToInt32 (bytes' 0);  		audioFile.FileLength = "" + fileStream.Length / (2 * audioFile.SampleRate * audioFile.ChannelCount) + " seconds";  		AudioFiles.Add (audioFile);  		fileStream.Dispose ();  	}  } catch {  	MessageBox.Show ("Error while trying to read audio files.");  }  
Magic Number,AudioRecorder,AudioModel,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioModel.cs,ReadAudioFileInfo,The following statement contains a magic number: foreach (string s in fileNames) {  	AudioFileModel audioFile = new AudioFileModel ();  	audioFile.FileName = s;  	IsolatedStorageFileStream fileStream = myStore.OpenFile (s' System.IO.FileMode.Open' System.IO.FileAccess.Read);  	audioFile.FileSize = "" + fileStream.Length + " bytes";  	// Read sample rate and channel count  	Encoding encoding = Encoding.UTF8;  	byte[] bytes = new byte[4];  	// channel count  	fileStream.Seek (22' SeekOrigin.Begin);  	fileStream.Read (bytes' 0' 2);  	audioFile.ChannelCount = BitConverter.ToInt16 (bytes' 0);  	// sample rate  	fileStream.Read (bytes' 0' 4);  	audioFile.SampleRate = BitConverter.ToInt32 (bytes' 0);  	audioFile.FileLength = "" + fileStream.Length / (2 * audioFile.SampleRate * audioFile.ChannelCount) + " seconds";  	AudioFiles.Add (audioFile);  	fileStream.Dispose ();  }  
Magic Number,AudioRecorder,AudioModel,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioModel.cs,ReadAudioFileInfo,The following statement contains a magic number: foreach (string s in fileNames) {  	AudioFileModel audioFile = new AudioFileModel ();  	audioFile.FileName = s;  	IsolatedStorageFileStream fileStream = myStore.OpenFile (s' System.IO.FileMode.Open' System.IO.FileAccess.Read);  	audioFile.FileSize = "" + fileStream.Length + " bytes";  	// Read sample rate and channel count  	Encoding encoding = Encoding.UTF8;  	byte[] bytes = new byte[4];  	// channel count  	fileStream.Seek (22' SeekOrigin.Begin);  	fileStream.Read (bytes' 0' 2);  	audioFile.ChannelCount = BitConverter.ToInt16 (bytes' 0);  	// sample rate  	fileStream.Read (bytes' 0' 4);  	audioFile.SampleRate = BitConverter.ToInt32 (bytes' 0);  	audioFile.FileLength = "" + fileStream.Length / (2 * audioFile.SampleRate * audioFile.ChannelCount) + " seconds";  	AudioFiles.Add (audioFile);  	fileStream.Dispose ();  }  
Magic Number,AudioRecorder,AudioModel,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioModel.cs,ReadAudioFileInfo,The following statement contains a magic number: foreach (string s in fileNames) {  	AudioFileModel audioFile = new AudioFileModel ();  	audioFile.FileName = s;  	IsolatedStorageFileStream fileStream = myStore.OpenFile (s' System.IO.FileMode.Open' System.IO.FileAccess.Read);  	audioFile.FileSize = "" + fileStream.Length + " bytes";  	// Read sample rate and channel count  	Encoding encoding = Encoding.UTF8;  	byte[] bytes = new byte[4];  	// channel count  	fileStream.Seek (22' SeekOrigin.Begin);  	fileStream.Read (bytes' 0' 2);  	audioFile.ChannelCount = BitConverter.ToInt16 (bytes' 0);  	// sample rate  	fileStream.Read (bytes' 0' 4);  	audioFile.SampleRate = BitConverter.ToInt32 (bytes' 0);  	audioFile.FileLength = "" + fileStream.Length / (2 * audioFile.SampleRate * audioFile.ChannelCount) + " seconds";  	AudioFiles.Add (audioFile);  	fileStream.Dispose ();  }  
Magic Number,AudioRecorder,AudioModel,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioModel.cs,ReadAudioFileInfo,The following statement contains a magic number: foreach (string s in fileNames) {  	AudioFileModel audioFile = new AudioFileModel ();  	audioFile.FileName = s;  	IsolatedStorageFileStream fileStream = myStore.OpenFile (s' System.IO.FileMode.Open' System.IO.FileAccess.Read);  	audioFile.FileSize = "" + fileStream.Length + " bytes";  	// Read sample rate and channel count  	Encoding encoding = Encoding.UTF8;  	byte[] bytes = new byte[4];  	// channel count  	fileStream.Seek (22' SeekOrigin.Begin);  	fileStream.Read (bytes' 0' 2);  	audioFile.ChannelCount = BitConverter.ToInt16 (bytes' 0);  	// sample rate  	fileStream.Read (bytes' 0' 4);  	audioFile.SampleRate = BitConverter.ToInt32 (bytes' 0);  	audioFile.FileLength = "" + fileStream.Length / (2 * audioFile.SampleRate * audioFile.ChannelCount) + " seconds";  	AudioFiles.Add (audioFile);  	fileStream.Dispose ();  }  
Magic Number,AudioRecorder,AudioModel,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioModel.cs,ReadAudioFileInfo,The following statement contains a magic number: foreach (string s in fileNames) {  	AudioFileModel audioFile = new AudioFileModel ();  	audioFile.FileName = s;  	IsolatedStorageFileStream fileStream = myStore.OpenFile (s' System.IO.FileMode.Open' System.IO.FileAccess.Read);  	audioFile.FileSize = "" + fileStream.Length + " bytes";  	// Read sample rate and channel count  	Encoding encoding = Encoding.UTF8;  	byte[] bytes = new byte[4];  	// channel count  	fileStream.Seek (22' SeekOrigin.Begin);  	fileStream.Read (bytes' 0' 2);  	audioFile.ChannelCount = BitConverter.ToInt16 (bytes' 0);  	// sample rate  	fileStream.Read (bytes' 0' 4);  	audioFile.SampleRate = BitConverter.ToInt32 (bytes' 0);  	audioFile.FileLength = "" + fileStream.Length / (2 * audioFile.SampleRate * audioFile.ChannelCount) + " seconds";  	AudioFiles.Add (audioFile);  	fileStream.Dispose ();  }  
Magic Number,AudioRecorder,AudioModel,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioModel.cs,ReadAudioFileInfo,The following statement contains a magic number: fileStream.Seek (22' SeekOrigin.Begin);  
Magic Number,AudioRecorder,AudioModel,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioModel.cs,ReadAudioFileInfo,The following statement contains a magic number: fileStream.Read (bytes' 0' 2);  
Magic Number,AudioRecorder,AudioModel,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioModel.cs,ReadAudioFileInfo,The following statement contains a magic number: fileStream.Read (bytes' 0' 4);  
Magic Number,AudioRecorder,AudioModel,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\AudioModel.cs,ReadAudioFileInfo,The following statement contains a magic number: audioFile.FileLength = "" + fileStream.Length / (2 * audioFile.SampleRate * audioFile.ChannelCount) + " seconds";  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,MainPage,The following statement contains a magic number: if (App.Current.Host.Content.ScaleFactor == 150) {  	BgBrush.ImageSource = new BitmapImage (new Uri (@"Assets/Background-720p.png"' UriKind.Relative));  	barBottomMargin = 444;  } else {  	BgBrush.ImageSource = new BitmapImage (new Uri (@"Assets/Background.png"' UriKind.Relative));  	barBottomMargin = 394;  }  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,MainPage,The following statement contains a magic number: if (App.Current.Host.Content.ScaleFactor == 150) {  	BgBrush.ImageSource = new BitmapImage (new Uri (@"Assets/Background-720p.png"' UriKind.Relative));  	barBottomMargin = 444;  } else {  	BgBrush.ImageSource = new BitmapImage (new Uri (@"Assets/Background.png"' UriKind.Relative));  	barBottomMargin = 394;  }  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,MainPage,The following statement contains a magic number: if (App.Current.Host.Content.ScaleFactor == 150) {  	BgBrush.ImageSource = new BitmapImage (new Uri (@"Assets/Background-720p.png"' UriKind.Relative));  	barBottomMargin = 444;  } else {  	BgBrush.ImageSource = new BitmapImage (new Uri (@"Assets/Background.png"' UriKind.Relative));  	barBottomMargin = 394;  }  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,MainPage,The following statement contains a magic number: barBottomMargin = 444;  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,MainPage,The following statement contains a magic number: barBottomMargin = 394;  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,MainPage,The following statement contains a magic number: SystemTray.SetOpacity (this' 0.01);  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,InitializeVisualizationBars,The following statement contains a magic number: for (int i = 0; i < barCount; i++) {  	Image bar = new Image ();  	BitmapImage barImage = new BitmapImage (new Uri ("Assets/FullBar.png"' UriKind.Relative));  	bar.Source = barImage;  	bar.Stretch = Stretch.None;  	bar.HorizontalAlignment = HorizontalAlignment.Left;  	bar.VerticalAlignment = VerticalAlignment.Bottom;  	bar.Margin = new Thickness (36 + ((35 + 36) * i) / 2' 0' 0' barBottomMargin);  	bar.Height = 0;  	barImages [i] = bar;  	ContentPanel.Children.Add (bar);  }  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,InitializeVisualizationBars,The following statement contains a magic number: for (int i = 0; i < barCount; i++) {  	Image bar = new Image ();  	BitmapImage barImage = new BitmapImage (new Uri ("Assets/FullBar.png"' UriKind.Relative));  	bar.Source = barImage;  	bar.Stretch = Stretch.None;  	bar.HorizontalAlignment = HorizontalAlignment.Left;  	bar.VerticalAlignment = VerticalAlignment.Bottom;  	bar.Margin = new Thickness (36 + ((35 + 36) * i) / 2' 0' 0' barBottomMargin);  	bar.Height = 0;  	barImages [i] = bar;  	ContentPanel.Children.Add (bar);  }  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,InitializeVisualizationBars,The following statement contains a magic number: for (int i = 0; i < barCount; i++) {  	Image bar = new Image ();  	BitmapImage barImage = new BitmapImage (new Uri ("Assets/FullBar.png"' UriKind.Relative));  	bar.Source = barImage;  	bar.Stretch = Stretch.None;  	bar.HorizontalAlignment = HorizontalAlignment.Left;  	bar.VerticalAlignment = VerticalAlignment.Bottom;  	bar.Margin = new Thickness (36 + ((35 + 36) * i) / 2' 0' 0' barBottomMargin);  	bar.Height = 0;  	barImages [i] = bar;  	ContentPanel.Children.Add (bar);  }  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,InitializeVisualizationBars,The following statement contains a magic number: for (int i = 0; i < barCount; i++) {  	Image bar = new Image ();  	BitmapImage barImage = new BitmapImage (new Uri ("Assets/FullBar.png"' UriKind.Relative));  	bar.Source = barImage;  	bar.Stretch = Stretch.None;  	bar.HorizontalAlignment = HorizontalAlignment.Left;  	bar.VerticalAlignment = VerticalAlignment.Bottom;  	bar.Margin = new Thickness (36 + ((35 + 36) * i) / 2' 0' 0' barBottomMargin);  	bar.Height = 0;  	barImages [i] = bar;  	ContentPanel.Children.Add (bar);  }  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,InitializeVisualizationBars,The following statement contains a magic number: bar.Margin = new Thickness (36 + ((35 + 36) * i) / 2' 0' 0' barBottomMargin);  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,InitializeVisualizationBars,The following statement contains a magic number: bar.Margin = new Thickness (36 + ((35 + 36) * i) / 2' 0' 0' barBottomMargin);  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,InitializeVisualizationBars,The following statement contains a magic number: bar.Margin = new Thickness (36 + ((35 + 36) * i) / 2' 0' 0' barBottomMargin);  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,InitializeVisualizationBars,The following statement contains a magic number: bar.Margin = new Thickness (36 + ((35 + 36) * i) / 2' 0' 0' barBottomMargin);  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,OnQualityTap,The following statement contains a magic number: if (!App.AudioModel.IsRecording) {  	if (MonoStereoText.Text == "Mono") {  		MonoStereoText.Text = "Stereo";  		SampleRateText.Text = "44100 Hz";  		App.AudioModel.ChannelCount = 2;  		App.AudioModel.SampleRate = 44100;  	} else {  		MonoStereoText.Text = "Mono";  		SampleRateText.Text = "16000 Hz";  		App.AudioModel.ChannelCount = 1;  		App.AudioModel.SampleRate = 16000;  	}  }  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,OnQualityTap,The following statement contains a magic number: if (!App.AudioModel.IsRecording) {  	if (MonoStereoText.Text == "Mono") {  		MonoStereoText.Text = "Stereo";  		SampleRateText.Text = "44100 Hz";  		App.AudioModel.ChannelCount = 2;  		App.AudioModel.SampleRate = 44100;  	} else {  		MonoStereoText.Text = "Mono";  		SampleRateText.Text = "16000 Hz";  		App.AudioModel.ChannelCount = 1;  		App.AudioModel.SampleRate = 16000;  	}  }  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,OnQualityTap,The following statement contains a magic number: if (!App.AudioModel.IsRecording) {  	if (MonoStereoText.Text == "Mono") {  		MonoStereoText.Text = "Stereo";  		SampleRateText.Text = "44100 Hz";  		App.AudioModel.ChannelCount = 2;  		App.AudioModel.SampleRate = 44100;  	} else {  		MonoStereoText.Text = "Mono";  		SampleRateText.Text = "16000 Hz";  		App.AudioModel.ChannelCount = 1;  		App.AudioModel.SampleRate = 16000;  	}  }  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,OnQualityTap,The following statement contains a magic number: if (MonoStereoText.Text == "Mono") {  	MonoStereoText.Text = "Stereo";  	SampleRateText.Text = "44100 Hz";  	App.AudioModel.ChannelCount = 2;  	App.AudioModel.SampleRate = 44100;  } else {  	MonoStereoText.Text = "Mono";  	SampleRateText.Text = "16000 Hz";  	App.AudioModel.ChannelCount = 1;  	App.AudioModel.SampleRate = 16000;  }  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,OnQualityTap,The following statement contains a magic number: if (MonoStereoText.Text == "Mono") {  	MonoStereoText.Text = "Stereo";  	SampleRateText.Text = "44100 Hz";  	App.AudioModel.ChannelCount = 2;  	App.AudioModel.SampleRate = 44100;  } else {  	MonoStereoText.Text = "Mono";  	SampleRateText.Text = "16000 Hz";  	App.AudioModel.ChannelCount = 1;  	App.AudioModel.SampleRate = 16000;  }  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,OnQualityTap,The following statement contains a magic number: if (MonoStereoText.Text == "Mono") {  	MonoStereoText.Text = "Stereo";  	SampleRateText.Text = "44100 Hz";  	App.AudioModel.ChannelCount = 2;  	App.AudioModel.SampleRate = 44100;  } else {  	MonoStereoText.Text = "Mono";  	SampleRateText.Text = "16000 Hz";  	App.AudioModel.ChannelCount = 1;  	App.AudioModel.SampleRate = 16000;  }  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,OnQualityTap,The following statement contains a magic number: App.AudioModel.ChannelCount = 2;  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,OnQualityTap,The following statement contains a magic number: App.AudioModel.SampleRate = 44100;  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,OnQualityTap,The following statement contains a magic number: App.AudioModel.SampleRate = 16000;  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,VisualizeValue,The following statement contains a magic number: if (barHeight < barImages [barCount / 2].Height / 2) {  	barsVisible = (int)((barImages [barCount / 2].Height) / 15);  	barImages [barCount / 2].Height = barsVisible / 2 * 15;  } else {  	barImages [barCount / 2].Height = barHeight;  }  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,VisualizeValue,The following statement contains a magic number: if (barHeight < barImages [barCount / 2].Height / 2) {  	barsVisible = (int)((barImages [barCount / 2].Height) / 15);  	barImages [barCount / 2].Height = barsVisible / 2 * 15;  } else {  	barImages [barCount / 2].Height = barHeight;  }  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,VisualizeValue,The following statement contains a magic number: if (barHeight < barImages [barCount / 2].Height / 2) {  	barsVisible = (int)((barImages [barCount / 2].Height) / 15);  	barImages [barCount / 2].Height = barsVisible / 2 * 15;  } else {  	barImages [barCount / 2].Height = barHeight;  }  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,VisualizeValue,The following statement contains a magic number: if (barHeight < barImages [barCount / 2].Height / 2) {  	barsVisible = (int)((barImages [barCount / 2].Height) / 15);  	barImages [barCount / 2].Height = barsVisible / 2 * 15;  } else {  	barImages [barCount / 2].Height = barHeight;  }  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,VisualizeValue,The following statement contains a magic number: if (barHeight < barImages [barCount / 2].Height / 2) {  	barsVisible = (int)((barImages [barCount / 2].Height) / 15);  	barImages [barCount / 2].Height = barsVisible / 2 * 15;  } else {  	barImages [barCount / 2].Height = barHeight;  }  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,VisualizeValue,The following statement contains a magic number: if (barHeight < barImages [barCount / 2].Height / 2) {  	barsVisible = (int)((barImages [barCount / 2].Height) / 15);  	barImages [barCount / 2].Height = barsVisible / 2 * 15;  } else {  	barImages [barCount / 2].Height = barHeight;  }  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,VisualizeValue,The following statement contains a magic number: if (barHeight < barImages [barCount / 2].Height / 2) {  	barsVisible = (int)((barImages [barCount / 2].Height) / 15);  	barImages [barCount / 2].Height = barsVisible / 2 * 15;  } else {  	barImages [barCount / 2].Height = barHeight;  }  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,VisualizeValue,The following statement contains a magic number: if (barHeight < barImages [barCount / 2].Height / 2) {  	barsVisible = (int)((barImages [barCount / 2].Height) / 15);  	barImages [barCount / 2].Height = barsVisible / 2 * 15;  } else {  	barImages [barCount / 2].Height = barHeight;  }  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,VisualizeValue,The following statement contains a magic number: barsVisible = (int)((barImages [barCount / 2].Height) / 15);  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,VisualizeValue,The following statement contains a magic number: barsVisible = (int)((barImages [barCount / 2].Height) / 15);  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,VisualizeValue,The following statement contains a magic number: barImages [barCount / 2].Height = barsVisible / 2 * 15;  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,VisualizeValue,The following statement contains a magic number: barImages [barCount / 2].Height = barsVisible / 2 * 15;  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,VisualizeValue,The following statement contains a magic number: barImages [barCount / 2].Height = barsVisible / 2 * 15;  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,VisualizeValue,The following statement contains a magic number: barImages [barCount / 2].Height = barHeight;  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,VisualizeValue,The following statement contains a magic number: for (int i = barCount / 2 - 1; i >= 0; i--) {  	barsVisible /= 2;  	double tempHeight = barsVisible * 15;  	if (tempHeight < 0)  		tempHeight = 0;  	barImages [i].Height = barImages [barCount - 1 - i].Height = tempHeight;  }  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,VisualizeValue,The following statement contains a magic number: for (int i = barCount / 2 - 1; i >= 0; i--) {  	barsVisible /= 2;  	double tempHeight = barsVisible * 15;  	if (tempHeight < 0)  		tempHeight = 0;  	barImages [i].Height = barImages [barCount - 1 - i].Height = tempHeight;  }  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,VisualizeValue,The following statement contains a magic number: for (int i = barCount / 2 - 1; i >= 0; i--) {  	barsVisible /= 2;  	double tempHeight = barsVisible * 15;  	if (tempHeight < 0)  		tempHeight = 0;  	barImages [i].Height = barImages [barCount - 1 - i].Height = tempHeight;  }  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,VisualizeValue,The following statement contains a magic number: barsVisible /= 2;  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,VisualizeDeterioratingValue,The following statement contains a magic number: for (int i = 0; i < barCount / 2; i++) {  	int tempBarsVisible = (int)(barImages [i + 1].Height / 15 / 2);  	barImages [i].Height = barImages [barCount - 1 - i].Height = tempBarsVisible * 15;  	//barImages[i + 1].Height / 2;  }  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,VisualizeDeterioratingValue,The following statement contains a magic number: for (int i = 0; i < barCount / 2; i++) {  	int tempBarsVisible = (int)(barImages [i + 1].Height / 15 / 2);  	barImages [i].Height = barImages [barCount - 1 - i].Height = tempBarsVisible * 15;  	//barImages[i + 1].Height / 2;  }  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,VisualizeDeterioratingValue,The following statement contains a magic number: for (int i = 0; i < barCount / 2; i++) {  	int tempBarsVisible = (int)(barImages [i + 1].Height / 15 / 2);  	barImages [i].Height = barImages [barCount - 1 - i].Height = tempBarsVisible * 15;  	//barImages[i + 1].Height / 2;  }  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,VisualizeDeterioratingValue,The following statement contains a magic number: for (int i = 0; i < barCount / 2; i++) {  	int tempBarsVisible = (int)(barImages [i + 1].Height / 15 / 2);  	barImages [i].Height = barImages [barCount - 1 - i].Height = tempBarsVisible * 15;  	//barImages[i + 1].Height / 2;  }  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,VisualizeDeterioratingValue,The following statement contains a magic number: barImages [i].Height = barImages [barCount - 1 - i].Height = tempBarsVisible * 15;  
Magic Number,AudioRecorder,MainPage,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\MainPage.xaml.cs,VisualizeDeterioratingValue,The following statement contains a magic number: barImages [barCount / 2].Height = barHeight;  
Magic Number,AudioRecorder,XnaAudio,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\XnaAudio.cs,XnaAudio,The following statement contains a magic number: microphone.BufferDuration = TimeSpan.FromMilliseconds (100);  
Magic Number,AudioRecorder,XnaAudio,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\XnaAudio.cs,XnaAudio,The following statement contains a magic number: sampleSize = playback.GetSampleSizeInBytes (TimeSpan.FromMilliseconds (100));  
Magic Number,AudioRecorder,XnaAudio,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\XnaAudio.cs,GetSamples,The following statement contains a magic number: while (playback.PendingBufferCount < 2 && position < byteArray.Length - 44) {  	playback.SubmitBuffer (byteArray' position' sampleSize);  	position += sampleSize;  }  
Magic Number,AudioRecorder,XnaAudio,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\XnaAudio.cs,GetSamples,The following statement contains a magic number: while (playback.PendingBufferCount < 2 && position < byteArray.Length - 44) {  	playback.SubmitBuffer (byteArray' position' sampleSize);  	position += sampleSize;  }  
Magic Number,AudioRecorder,XnaAudio,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\XnaAudio.cs,StartPlayback,The following statement contains a magic number: if (App.AudioModel.stream.Length > 0) {  	App.AudioModel.stream.Position = 0;  	position = 44;  	// take wav header into account  	byteArray = App.AudioModel.stream.ToArray ();  	// Play the audio in a new thread so the UI can update.  	Thread soundThread = new Thread (new ThreadStart (playSoundEffect));  	soundThread.Start ();  }  
Magic Number,AudioRecorder,XnaAudio,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\XnaAudio.cs,StartPlayback,The following statement contains a magic number: position = 44;  
Magic Number,AudioRecorder,XnaAudio,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\XnaAudio.cs,StartRecording,The following statement contains a magic number: microphone.BufferDuration = TimeSpan.FromMilliseconds (100);  
Magic Number,AudioRecorder,XnaAudio,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\XnaAudio.cs,SkipFiveSecs,The following statement contains a magic number: if (playback.State == SoundState.Playing) {  	if (position + sampleSize * 50 < byteArray.Length) {  		position += sampleSize * 50;  	}  }  
Magic Number,AudioRecorder,XnaAudio,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\XnaAudio.cs,SkipFiveSecs,The following statement contains a magic number: if (playback.State == SoundState.Playing) {  	if (position + sampleSize * 50 < byteArray.Length) {  		position += sampleSize * 50;  	}  }  
Magic Number,AudioRecorder,XnaAudio,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\XnaAudio.cs,SkipFiveSecs,The following statement contains a magic number: if (position + sampleSize * 50 < byteArray.Length) {  	position += sampleSize * 50;  }  
Magic Number,AudioRecorder,XnaAudio,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\XnaAudio.cs,SkipFiveSecs,The following statement contains a magic number: if (position + sampleSize * 50 < byteArray.Length) {  	position += sampleSize * 50;  }  
Magic Number,AudioRecorder,XnaAudio,D:\newReposJune17\Microsoft_audio-recorder\AudioRecorder\XnaAudio.cs,SkipFiveSecs,The following statement contains a magic number: position += sampleSize * 50;  
