Implementation smell,Namespace,Class,File,Method,Description
Complex Method,DiscogsNet.FileReading,FindTextReader,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\FileReading\FindTextReader.cs,Read,Cyclomatic complexity of the method is 8
Long Statement,DiscogsNet.Api,Discogs,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\Api\Discogs.cs,CreateRequest,The length of the statement  "            HttpWebRequest request = (HttpWebRequest)HttpWebRequest.Create("http://www.discogs.com/" + relativeUrl + this.GetQueryString(getArguments)); " is 140.
Long Statement,DiscogsNet.Api,Discogs3,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\Api\Discogs3.cs,DownloadString,The length of the statement  "					this.webClient.Headers.Add("Authorization"' "Discogs key=CUUAkAbTlJGXekFdPmCq' secret=SVrJMuJoIuthqOFxIazdPBaDrHIGpMrk");  " is 121.
Long Statement,DiscogsNet,TimeSpanParser,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\TimeSpanParser.cs,TryParse,The length of the statement  "                    result = TimeSpan.FromSeconds(int.Parse(g["Hours"].Value) * 60 * 60 + int.Parse(g["Minutes"].Value) * 60 + int.Parse(g["Seconds"].Value)); " is 138.
Long Statement,DiscogsNet.Model,DataReader,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\Model\DataReader.cs,ReadArtist,The length of the statement  "                    result.NameVariations = e.Elements().AssertNames("name").AssertOnlyText().Select(nameVariation => nameVariation.Value).ToArray(); " is 129.
Long Statement,DiscogsNet.Model,DataReader,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\Model\DataReader.cs,ReadArtist,The length of the statement  "                    result.Aliases = e.Elements().AssertNames("name").AssertOnlyText().Select(alias => new ArtistAlias() { Name = alias.Value }).ToArray(); " is 135.
Long Statement,DiscogsNet.Model,DataReader,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\Model\DataReader.cs,ReadArtist,The length of the statement  "                    result.Members = e.Elements().AssertNames("name").AssertOnlyText().Select(member => new Members() { Name = member.Value }).ToArray(); " is 133.
Long Statement,DiscogsNet.Model,DataReader3,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\Model\DataReader3.cs,ReadSearchResults,The length of the statement  "                        searchResults.Results = v.Value<JArray>().Cast<JObject>().Select(t => this.ReadSearchResult(t)).Where(t => t != null).ToArray(); " is 128.
Long Statement,DiscogsNet.Model.Search,SearchQuery,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\Model\Search\SearchQuery.cs,GetHashCode,The length of the statement  "            return Utility.GetCombinedHashCode(this.Query' this.Type' this.Artist' this.ReleaseTitle' this.Label' this.Title' this.CatalogNumber' this.Barcode' this.Year); " is 159.
Long Statement,DiscogsNet.FileReading,AsyncReleaseReader,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\FileReading\AsyncReleaseReader.cs,Init,The length of the statement  "            stringCollection = Enumerable.Range(0' CollectionCount).Select(c => new BlockingCollection<string[]>(StringBacklog)).ToArray(); " is 127.
Long Statement,DiscogsNet.User,DiscogsAuth,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\User\DiscogsAuth.cs,AuthenticateUser,The length of the statement  "            OAuthResponse requestToken = OAuth.AcquireRequestToken("http://api.discogs.com/oauth/request_token"' "POST"' _UserAgent); " is 121.
Long Statement,DiscogsNet.User,DiscogsAuth,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\User\DiscogsAuth.cs,AuthorizeApp,The length of the statement  "            OAuthResponse accessToken = OAuth.AcquireAccessToken("http://api.discogs.com/oauth/access_token"' "POST"' pin' _UserAgent); " is 123.
Complex Conditional,DiscogsNet,Utility,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\Utility.cs,FixXmlText,The conditional expression  "c <= '\x1F' && c != '\x9' && c != '\xA' && c != '\xD'"  is complex.
Complex Conditional,OAuth,Manager,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\OAuth.cs,GetSignatureBase,The conditional expression  "!((uri.Scheme == "http" && uri.Port == 80) ||                    (uri.Scheme == "https" && uri.Port == 443))"  is complex.
Empty Catch Block,DiscogsNet,TimeSpanParser,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\TimeSpanParser.cs,TryParse,The method has an empty catch block.
Empty Catch Block,DiscogsNet.FileReading,AsyncReleaseReader,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\FileReading\AsyncReleaseReader.cs,ReadAll,The method has an empty catch block.
Empty Catch Block,DiscogsNet.FileReading,AsyncReleaseReader,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\FileReading\AsyncReleaseReader.cs,ReadAll,The method has an empty catch block.
Empty Catch Block,DiscogsNet.FileReading,AsyncReleaseReader,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\FileReading\AsyncReleaseReader.cs,ReadAll,The method has an empty catch block.
Empty Catch Block,DiscogsNet.FileReading,AsyncReleaseReader,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\FileReading\AsyncReleaseReader.cs,ReadAll,The method has an empty catch block.
Empty Catch Block,DiscogsNet.FileReading,AsyncReleaseReader,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\FileReading\AsyncReleaseReader.cs,ReadAll,The method has an empty catch block.
Empty Catch Block,DiscogsNet.FileReading,AsyncReleaseReader,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\FileReading\AsyncReleaseReader.cs,ReadAll,The method has an empty catch block.
Empty Catch Block,OAuth,Manager,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\OAuth.cs,AcquireRequestToken,The method has an empty catch block.
Magic Number,DiscogsNet,TimeSpanParser,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\TimeSpanParser.cs,TryParse,The following statement contains a magic number: try              {                  GroupCollection g;                  if ((g = Format1.Match(timeSpan)) != null)                  {                      result = TimeSpan.FromSeconds(int.Parse(g["Minutes"].Value) * 60 + int.Parse(g["Seconds"].Value));                      return true;                  }                  else if ((g = Format2.Match(timeSpan)) != null)                  {                      result = TimeSpan.FromSeconds(int.Parse(g["Hours"].Value) * 60 * 60 + int.Parse(g["Minutes"].Value) * 60 + int.Parse(g["Seconds"].Value));                      return true;                  }                  else if ((g = Format3.Match(timeSpan)) != null)                  {                      result = TimeSpan.FromSeconds(int.Parse(g["Seconds"].Value));                      return true;                  }                  else if ((g = Format4.Match(timeSpan)) != null)                  {                      result = TimeSpan.FromSeconds(int.Parse(g["Minutes"].Value) * 60);                      return true;                  }              }              catch              {              }
Magic Number,DiscogsNet,TimeSpanParser,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\TimeSpanParser.cs,TryParse,The following statement contains a magic number: try              {                  GroupCollection g;                  if ((g = Format1.Match(timeSpan)) != null)                  {                      result = TimeSpan.FromSeconds(int.Parse(g["Minutes"].Value) * 60 + int.Parse(g["Seconds"].Value));                      return true;                  }                  else if ((g = Format2.Match(timeSpan)) != null)                  {                      result = TimeSpan.FromSeconds(int.Parse(g["Hours"].Value) * 60 * 60 + int.Parse(g["Minutes"].Value) * 60 + int.Parse(g["Seconds"].Value));                      return true;                  }                  else if ((g = Format3.Match(timeSpan)) != null)                  {                      result = TimeSpan.FromSeconds(int.Parse(g["Seconds"].Value));                      return true;                  }                  else if ((g = Format4.Match(timeSpan)) != null)                  {                      result = TimeSpan.FromSeconds(int.Parse(g["Minutes"].Value) * 60);                      return true;                  }              }              catch              {              }
Magic Number,DiscogsNet,TimeSpanParser,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\TimeSpanParser.cs,TryParse,The following statement contains a magic number: try              {                  GroupCollection g;                  if ((g = Format1.Match(timeSpan)) != null)                  {                      result = TimeSpan.FromSeconds(int.Parse(g["Minutes"].Value) * 60 + int.Parse(g["Seconds"].Value));                      return true;                  }                  else if ((g = Format2.Match(timeSpan)) != null)                  {                      result = TimeSpan.FromSeconds(int.Parse(g["Hours"].Value) * 60 * 60 + int.Parse(g["Minutes"].Value) * 60 + int.Parse(g["Seconds"].Value));                      return true;                  }                  else if ((g = Format3.Match(timeSpan)) != null)                  {                      result = TimeSpan.FromSeconds(int.Parse(g["Seconds"].Value));                      return true;                  }                  else if ((g = Format4.Match(timeSpan)) != null)                  {                      result = TimeSpan.FromSeconds(int.Parse(g["Minutes"].Value) * 60);                      return true;                  }              }              catch              {              }
Magic Number,DiscogsNet,TimeSpanParser,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\TimeSpanParser.cs,TryParse,The following statement contains a magic number: try              {                  GroupCollection g;                  if ((g = Format1.Match(timeSpan)) != null)                  {                      result = TimeSpan.FromSeconds(int.Parse(g["Minutes"].Value) * 60 + int.Parse(g["Seconds"].Value));                      return true;                  }                  else if ((g = Format2.Match(timeSpan)) != null)                  {                      result = TimeSpan.FromSeconds(int.Parse(g["Hours"].Value) * 60 * 60 + int.Parse(g["Minutes"].Value) * 60 + int.Parse(g["Seconds"].Value));                      return true;                  }                  else if ((g = Format3.Match(timeSpan)) != null)                  {                      result = TimeSpan.FromSeconds(int.Parse(g["Seconds"].Value));                      return true;                  }                  else if ((g = Format4.Match(timeSpan)) != null)                  {                      result = TimeSpan.FromSeconds(int.Parse(g["Minutes"].Value) * 60);                      return true;                  }              }              catch              {              }
Magic Number,DiscogsNet,TimeSpanParser,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\TimeSpanParser.cs,TryParse,The following statement contains a magic number: try              {                  GroupCollection g;                  if ((g = Format1.Match(timeSpan)) != null)                  {                      result = TimeSpan.FromSeconds(int.Parse(g["Minutes"].Value) * 60 + int.Parse(g["Seconds"].Value));                      return true;                  }                  else if ((g = Format2.Match(timeSpan)) != null)                  {                      result = TimeSpan.FromSeconds(int.Parse(g["Hours"].Value) * 60 * 60 + int.Parse(g["Minutes"].Value) * 60 + int.Parse(g["Seconds"].Value));                      return true;                  }                  else if ((g = Format3.Match(timeSpan)) != null)                  {                      result = TimeSpan.FromSeconds(int.Parse(g["Seconds"].Value));                      return true;                  }                  else if ((g = Format4.Match(timeSpan)) != null)                  {                      result = TimeSpan.FromSeconds(int.Parse(g["Minutes"].Value) * 60);                      return true;                  }              }              catch              {              }
Magic Number,DiscogsNet,Utility,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\Utility.cs,FixXmlText,The following statement contains a magic number: for (int i = 0' l = text.Length; i < l; ++i)              {                  c = text[i];                  if (c <= '\x1F' && c != '\x9' && c != '\xA' && c != '\xD')                  {                      continue;                  }                  switch (state)                  {                      case 0:                          if (c == '&')                          {                              state = 1;                          }                          else                          {                              if (utf8bytes.Count > 0)                                  ProcessUtf8Data(res' utf8bytes);                              res.Append(c);                              state = 0;                          }                          break;                      case 1:                          if (c == '#')                          {                              state = 2;                          }                          else                          {                              if (utf8bytes.Count > 0)                                  ProcessUtf8Data(res' utf8bytes);                              res.Append("&" + c);                              state = 0;                          }                          break;                      case 2:                          if (c >= '0' && c <= '9')                          {                              entity.Append(c);                          }                          else if (c == ';')                          {                              utf8bytes.Add(byte.Parse(entity.ToString()));                              entity.Clear();                              state = 0;                          }                          else                          {                              if (utf8bytes.Count > 0)                                  ProcessUtf8Data(res' utf8bytes);                              res.Append("&#" + entity + c);                              entity.Clear();                              state = 0;                          }                          break;                  }              }
Magic Number,DiscogsNet,Utility,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\Utility.cs,FixXmlText,The following statement contains a magic number: for (int i = 0' l = text.Length; i < l; ++i)              {                  c = text[i];                  if (c <= '\x1F' && c != '\x9' && c != '\xA' && c != '\xD')                  {                      continue;                  }                  switch (state)                  {                      case 0:                          if (c == '&')                          {                              state = 1;                          }                          else                          {                              if (utf8bytes.Count > 0)                                  ProcessUtf8Data(res' utf8bytes);                              res.Append(c);                              state = 0;                          }                          break;                      case 1:                          if (c == '#')                          {                              state = 2;                          }                          else                          {                              if (utf8bytes.Count > 0)                                  ProcessUtf8Data(res' utf8bytes);                              res.Append("&" + c);                              state = 0;                          }                          break;                      case 2:                          if (c >= '0' && c <= '9')                          {                              entity.Append(c);                          }                          else if (c == ';')                          {                              utf8bytes.Add(byte.Parse(entity.ToString()));                              entity.Clear();                              state = 0;                          }                          else                          {                              if (utf8bytes.Count > 0)                                  ProcessUtf8Data(res' utf8bytes);                              res.Append("&#" + entity + c);                              entity.Clear();                              state = 0;                          }                          break;                  }              }
Magic Number,DiscogsNet,Utility,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\Utility.cs,FixXmlText,The following statement contains a magic number: switch (state)              {                  case 1:                      res.Append('&');                      break;                  case 2:                      res.Append("&#" + entity);                      break;              }
Magic Number,DiscogsNet,Utility,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\Utility.cs,GetCombinedHashCode,The following statement contains a magic number: int combinedHash = 271;
Magic Number,DiscogsNet,Utility,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\Utility.cs,GetCombinedHashCode,The following statement contains a magic number: for (int i = 0; i < objects.Length; ++i)              {                  combinedHash *= 31;                  if (objects[i] != null)                  {                      combinedHash += objects[i].GetHashCode();                  }                  else                  {                      combinedHash += 271;                  }              }
Magic Number,DiscogsNet,Utility,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\Utility.cs,GetCombinedHashCode,The following statement contains a magic number: for (int i = 0; i < objects.Length; ++i)              {                  combinedHash *= 31;                  if (objects[i] != null)                  {                      combinedHash += objects[i].GetHashCode();                  }                  else                  {                      combinedHash += 271;                  }              }
Magic Number,DiscogsNet.Model,ArtistAggregate,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\Model\ArtistAggregate.cs,FixThe,The following statement contains a magic number: if (name.EndsWith("' The"))              {                  return "The " + name.Substring(0' name.Length - 5);              }              else              {                  return name;              }
Magic Number,DiscogsNet.FileReading,AsyncReleaseReader,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\FileReading\AsyncReleaseReader.cs,Init,The following statement contains a magic number: consumerCount = Debugger.IsAttached ? 1 : Environment.ProcessorCount * 2;
Magic Number,DiscogsNet.FileReading,FindTextReader,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\FileReading\FindTextReader.cs,FindTextReader,The following statement contains a magic number: buffer = new char[4 * 1024 * 1024];
Magic Number,DiscogsNet.FileReading,FindTextReader,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\FileReading\FindTextReader.cs,FindTextReader,The following statement contains a magic number: buffer = new char[4 * 1024 * 1024];
Magic Number,DiscogsNet.FileReading,FindTextReader,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\FileReading\FindTextReader.cs,FindTextReader,The following statement contains a magic number: buffer = new char[4 * 1024 * 1024];
Magic Number,OAuth,Manager,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\OAuth.cs,GenerateNonce,The following statement contains a magic number: for (int i = 0; i < 8; i++)              {                  int g = _random.Next(3);                  switch (g)                  {                      case 0:                          // lowercase alpha                          sb.Append((char)(_random.Next(26) + 97)' 1);                          break;                      default:                          // numeric digits                          sb.Append((char)(_random.Next(10) + 48)' 1);                          break;                  }              }
Magic Number,OAuth,Manager,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\OAuth.cs,GenerateNonce,The following statement contains a magic number: for (int i = 0; i < 8; i++)              {                  int g = _random.Next(3);                  switch (g)                  {                      case 0:                          // lowercase alpha                          sb.Append((char)(_random.Next(26) + 97)' 1);                          break;                      default:                          // numeric digits                          sb.Append((char)(_random.Next(10) + 48)' 1);                          break;                  }              }
Magic Number,OAuth,Manager,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\OAuth.cs,GenerateNonce,The following statement contains a magic number: for (int i = 0; i < 8; i++)              {                  int g = _random.Next(3);                  switch (g)                  {                      case 0:                          // lowercase alpha                          sb.Append((char)(_random.Next(26) + 97)' 1);                          break;                      default:                          // numeric digits                          sb.Append((char)(_random.Next(10) + 48)' 1);                          break;                  }              }
Magic Number,OAuth,Manager,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\OAuth.cs,GenerateNonce,The following statement contains a magic number: for (int i = 0; i < 8; i++)              {                  int g = _random.Next(3);                  switch (g)                  {                      case 0:                          // lowercase alpha                          sb.Append((char)(_random.Next(26) + 97)' 1);                          break;                      default:                          // numeric digits                          sb.Append((char)(_random.Next(10) + 48)' 1);                          break;                  }              }
Magic Number,OAuth,Manager,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\OAuth.cs,GenerateNonce,The following statement contains a magic number: for (int i = 0; i < 8; i++)              {                  int g = _random.Next(3);                  switch (g)                  {                      case 0:                          // lowercase alpha                          sb.Append((char)(_random.Next(26) + 97)' 1);                          break;                      default:                          // numeric digits                          sb.Append((char)(_random.Next(10) + 48)' 1);                          break;                  }              }
Magic Number,OAuth,Manager,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\OAuth.cs,GenerateNonce,The following statement contains a magic number: for (int i = 0; i < 8; i++)              {                  int g = _random.Next(3);                  switch (g)                  {                      case 0:                          // lowercase alpha                          sb.Append((char)(_random.Next(26) + 97)' 1);                          break;                      default:                          // numeric digits                          sb.Append((char)(_random.Next(10) + 48)' 1);                          break;                  }              }
Magic Number,OAuth,Manager,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\OAuth.cs,GetSignatureBase,The following statement contains a magic number: if (!((uri.Scheme == "http" && uri.Port == 80) ||                    (uri.Scheme == "https" && uri.Port == 443)))                  normUrl += ":" + uri.Port;
Magic Number,OAuth,Manager,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\OAuth.cs,GetSignatureBase,The following statement contains a magic number: if (!((uri.Scheme == "http" && uri.Port == 80) ||                    (uri.Scheme == "https" && uri.Port == 443)))                  normUrl += ":" + uri.Port;
Missing Default,DiscogsNet,Utility,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\Utility.cs,FixXmlText,The following switch statement is missing a default case: switch (state)                  {                      case 0:                          if (c == '&')                          {                              state = 1;                          }                          else                          {                              if (utf8bytes.Count > 0)                                  ProcessUtf8Data(res' utf8bytes);                              res.Append(c);                              state = 0;                          }                          break;                      case 1:                          if (c == '#')                          {                              state = 2;                          }                          else                          {                              if (utf8bytes.Count > 0)                                  ProcessUtf8Data(res' utf8bytes);                              res.Append("&" + c);                              state = 0;                          }                          break;                      case 2:                          if (c >= '0' && c <= '9')                          {                              entity.Append(c);                          }                          else if (c == ';')                          {                              utf8bytes.Add(byte.Parse(entity.ToString()));                              entity.Clear();                              state = 0;                          }                          else                          {                              if (utf8bytes.Count > 0)                                  ProcessUtf8Data(res' utf8bytes);                              res.Append("&#" + entity + c);                              entity.Clear();                              state = 0;                          }                          break;                  }
Missing Default,DiscogsNet,Utility,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\Utility.cs,FixXmlText,The following switch statement is missing a default case: switch (state)              {                  case 1:                      res.Append('&');                      break;                  case 2:                      res.Append("&#" + entity);                      break;              }
Missing Default,DiscogsNet.Model,DataReader3,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\Model\DataReader3.cs,ReadSearchResult,The following switch statement is missing a default case: switch (item.Value.Value<string>())                      {                          case "artist":                              type = SearchItemType.Artist;                              goto foreachEnd;                          case "label":                              type = SearchItemType.Label;                              goto foreachEnd;                          case "release":                              type = SearchItemType.Release;                              goto foreachEnd;                          case "master":                              type = SearchItemType.Master;                              goto foreachEnd;                      }
Missing Default,DiscogsNet.Model,DataReader3,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\Model\DataReader3.cs,ReadSearchResultData,The following switch statement is missing a default case: switch (item.Key)                  {                      case "thumb":                          result.Thumb = v.Value<string>();                          break;                      case "title":                          result.Title = v.Value<string>();                          break;                      case "id":                          result.Id = v.Value<int>();                          break;                  }
Missing Default,DiscogsNet.Model,DataReader3,C:\repos\MediaPortal_MPTagThat\Libraries\DiscogsNet\Model\DataReader3.cs,ReadReleaseBaseSearchResultData,The following switch statement is missing a default case: switch (item.Key)                  {                      case "style":                          result.Styles = v.ValueAsStringArray();                          break;                      case "year":                          int year;                          if (int.TryParse(v.Value<string>()' out year))                          {                              result.Year = year;                          }                          break;                      case "genre":                          result.Genres = v.ValueAsStringArray();                          break;                  }
