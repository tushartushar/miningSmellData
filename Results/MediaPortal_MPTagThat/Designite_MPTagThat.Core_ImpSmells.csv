Implementation smell,Namespace,Class,File,Method,Description
Long Method,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The method has 117 lines of code.
Long Method,MPTagThat.Core,Track,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\Track.cs,Create,The method has 295 lines of code.
Long Method,MPTagThat.Core,Track,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\Track.cs,SaveFile,The method has 355 lines of code.
Long Method,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,DrawColorSlider,The method has 133 lines of code.
Long Method,MPTagThat.Core,ObjectParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\SettingsManager\ObjectParser.cs,Serialize,The method has 116 lines of code.
Long Method,MPTagThat.Core,Options,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Settings\Options.cs,Options,The method has 109 lines of code.
Long Method,MPTagThat.Core,ThemeManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\ThemeManager\ThemeManager.cs,LoadTheme,The method has 119 lines of code.
Long Method,MPTagThat.Core,MP3Val,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\MP3Val.cs,ValidateMp3File,The method has 110 lines of code.
Long Method,MPTagThat.Core,Util,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\Util.cs,ReplaceParametersWithTrackValues,The method has 107 lines of code.
Long Method,MPTagThat.Core.AudioEncoder,AudioEncoder,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\AudioEncoder\AudioEncoder.cs,SetEncoderSettings,The method has 118 lines of code.
Long Method,MPTagThat.Core.Burning,Burner,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\Burner.cs,ParseDescriptionForMediaInfo,The method has 117 lines of code.
Long Method,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,animationTimerTick,The method has 113 lines of code.
Long Method,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The method has 218 lines of code.
Long Method,Stepi.UI,ExtendedPanel,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\ExtendedPanel.cs,CollapsingHandler,The method has 176 lines of code.
Long Method,Raccoom.Windows.Forms,TreeViewFolderBrowserDataProviderMusicDb,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\TreeViewFolderBrowserDataProviderMusicDb.cs,RequestSubDirs,The method has 103 lines of code.
Long Method,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDateTime,The method has 101 lines of code.
Long Method,MPTagThat.Core.Freedb,XMCDParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\XMCDParser.cs,InitVariables,The method has 142 lines of code.
Complex Method,MPTagThat.Core.AlbumInfo.AlbumSites,Amazon,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\AlbumInfo\AlbumSites\Amazon.cs,FillAlbum,Cyclomatic complexity of the method is 16
Complex Method,MPTagThat.Core,Action,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\ActionHandler\Action.cs,ActionToCommand,Cyclomatic complexity of the method is 11
Complex Method,MPTagThat.Core,ActionHandler,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\ActionHandler\ActionHandler.cs,LoadKeyMap,Cyclomatic complexity of the method is 8
Complex Method,MPTagThat.Core,ActionHandler,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\ActionHandler\ActionHandler.cs,MapAction,Cyclomatic complexity of the method is 9
Complex Method,MPTagThat.Core,Track,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\Track.cs,Create,Cyclomatic complexity of the method is 33
Complex Method,MPTagThat.Core,Track,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\Track.cs,SaveFile,Cyclomatic complexity of the method is 46
Complex Method,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,DrawColorSlider,Cyclomatic complexity of the method is 8
Complex Method,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,OnKeyUp,Cyclomatic complexity of the method is 12
Complex Method,MPTagThat.Core,ObjectParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\SettingsManager\ObjectParser.cs,Serialize,Cyclomatic complexity of the method is 15
Complex Method,MPTagThat.Core,ObjectParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\SettingsManager\ObjectParser.cs,Deserialize,Cyclomatic complexity of the method is 32
Complex Method,MPTagThat.Core,XmlSettingsProvider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\SettingsManager\XmlSettingsProvider.cs,Save,Cyclomatic complexity of the method is 9
Complex Method,MPTagThat.Core,XmlSettingsProvider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\SettingsManager\XmlSettingsProvider.cs,SetValue,Cyclomatic complexity of the method is 10
Complex Method,MPTagThat.Core,ThemeManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\ThemeManager\ThemeManager.cs,LoadTheme,Cyclomatic complexity of the method is 9
Complex Method,MPTagThat.Core,MP3Val,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\MP3Val.cs,ValidateMp3File,Cyclomatic complexity of the method is 23
Complex Method,MPTagThat.Core,Util,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\Util.cs,CheckParameterFormat,Cyclomatic complexity of the method is 13
Complex Method,MPTagThat.Core,Util,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\Util.cs,LabelToParameter,Cyclomatic complexity of the method is 24
Complex Method,MPTagThat.Core,Util,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\Util.cs,ReplaceParametersWithTrackValues,Cyclomatic complexity of the method is 27
Complex Method,MPTagThat.Core,Util,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\Util.cs,GetQualifiedFilename,Cyclomatic complexity of the method is 8
Complex Method,MPTagThat.Core,Util,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\Util.cs,RelativePathTo,Cyclomatic complexity of the method is 11
Complex Method,MPTagThat.Core,Util,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\Util.cs,EscapeDatabaseQuery,Cyclomatic complexity of the method is 19
Complex Method,MPTagThat.Core.MusicBrainz,MusicBrainzAlbumInfo,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\MusicBrainz\MusicBrainzAlbumInfo.cs,GetMusicBrainzAlbumById,Cyclomatic complexity of the method is 18
Complex Method,MPTagThat.Core.MusicBrainz,MusicBrainzTrackInfo,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\MusicBrainz\MusicBrainzTrackInfo.cs,ParseMusicBrainzQueryResult,Cyclomatic complexity of the method is 13
Complex Method,MPTagThat.Core.AudioEncoder,AudioEncoder,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\AudioEncoder\AudioEncoder.cs,SetOutFileExtension,Cyclomatic complexity of the method is 8
Complex Method,MPTagThat.Core.AudioEncoder,AudioEncoder,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\AudioEncoder\AudioEncoder.cs,SetEncoderSettings,Cyclomatic complexity of the method is 18
Complex Method,MPTagThat.Core.Burning,Burner,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\Burner.cs,ParseDescriptionForMediaInfo,Cyclomatic complexity of the method is 26
Complex Method,MPTagThat.Core.Burning,Burner,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\Burner.cs,ParseDescriptionForFeatures,Cyclomatic complexity of the method is 25
Complex Method,MPTagThat.Core.Burning,BurnManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\BurnManager.cs,SetPreferredDrive,Cyclomatic complexity of the method is 8
Complex Method,MPTagThat.Core.Burning,DeviceHelper,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\DeviceHelper.cs,GetParamsByMedia,Cyclomatic complexity of the method is 11
Complex Method,MPTagThat.Core.Burning,DeviceHelper,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\DeviceHelper.cs,StdErrDataReceived,Cyclomatic complexity of the method is 8
Complex Method,MPTagThat.Core.Burning,DeviceHelper,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\DeviceHelper.cs,StdOutDataReceived,Cyclomatic complexity of the method is 10
Complex Method,MPTagThat.Core.Burning,MediaTypeSupport,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\MediaTypeSupport.cs,IsMediaTypeSupported,Cyclomatic complexity of the method is 15
Complex Method,MPTagThat.Core.Burning,MediaTypeSupport,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\MediaTypeSupport.cs,CheckInsertedMediaType,Cyclomatic complexity of the method is 11
Complex Method,MPTagThat.Core.Burning,MediaTypeSupport,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\MediaTypeSupport.cs,CheckBurnerRequirements,Cyclomatic complexity of the method is 11
Complex Method,MPTagThat.Core.Burning,MediaTypeSupport,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\MediaTypeSupport.cs,GetMediaSizeMbByType,Cyclomatic complexity of the method is 15
Complex Method,MPTagThat.Core.Burning,MediaTypeSupport,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\MediaTypeSupport.cs,GetMaxMediaSizeMbByProjectType,Cyclomatic complexity of the method is 14
Complex Method,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,ToggleSplitter,Cyclomatic complexity of the method is 14
Complex Method,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,animationTimerTick,Cyclomatic complexity of the method is 16
Complex Method,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,Cyclomatic complexity of the method is 27
Complex Method,Stepi.UI,ExtendedPanel,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\ExtendedPanel.cs,CheckDocking,Cyclomatic complexity of the method is 13
Complex Method,Stepi.UI,ExtendedPanel,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\ExtendedPanel.cs,SetCaptionControl,Cyclomatic complexity of the method is 13
Complex Method,Stepi.UI,ExtendedPanel,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\ExtendedPanel.cs,CollapsingHandler,Cyclomatic complexity of the method is 22
Complex Method,Stepi.UI,CollapseAnimation,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CollapseAnimation.cs,Animate,Cyclomatic complexity of the method is 9
Complex Method,Raccoom.Windows.Forms,TreeViewFolderBrowser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\TreeViewBrowser.cs,ShowFolder,Cyclomatic complexity of the method is 10
Complex Method,Raccoom.Windows.Forms,TreeViewFolderBrowser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\TreeViewBrowser.cs,MarkNode,Cyclomatic complexity of the method is 9
Complex Method,Raccoom.Windows.Forms,TreeViewFolderBrowserDataProviderMusicDb,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\TreeViewFolderBrowserDataProviderMusicDb.cs,RequestSubDirs,Cyclomatic complexity of the method is 16
Complex Method,Raccoom.Windows.Forms,TreeViewFolderBrowserDataProviderShell32,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\TreeViewFolderBrowserDataProviderShell32.cs,RequestRoot,Cyclomatic complexity of the method is 9
Complex Method,Raccoom.Windows.Forms,TreeViewFolderBrowserDataProviderShell32,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\TreeViewFolderBrowserDataProviderShell32.cs,FillMyComputer,Cyclomatic complexity of the method is 8
Complex Method,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDateTime,Cyclomatic complexity of the method is 13
Complex Method,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetDiscInfo,Cyclomatic complexity of the method is 10
Complex Method,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetDiscInfoByID,Cyclomatic complexity of the method is 9
Complex Method,MPTagThat.Core.Freedb,XMCDParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\XMCDParser.cs,Parse2,Cyclomatic complexity of the method is 14
Complex Method,MPTagThat.Core.Freedb,XMCDParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\XMCDParser.cs,InitVariables,Cyclomatic complexity of the method is 19
Complex Method,MPTagThat.Core.ShellLib,ApplicationDesktopToolbar,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\ShellLib\ApplicationDesktopToolbar.cs,OnAppbarNotification,Cyclomatic complexity of the method is 8
Complex Method,MPTagThat.Core.ShellLib,ShellBrowseForFolderDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\ShellLib\ShellBrowseForFolderDialog.cs,myBrowseCallbackProc,Cyclomatic complexity of the method is 10
Long Parameter List,MPTagThat.Core.AlbumInfo.AlbumSites,AlbumSiteFactory,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\AlbumInfo\AlbumSites\AlbumSiteFactory.cs,Create,The method has 5 parameters. Parameters: identifier' artist' album' mEventStopSiteSearches' timeLimit
Long Parameter List,MPTagThat.Core.AlbumInfo.AlbumSites,AlbumSiteFactory,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\AlbumInfo\AlbumSites\AlbumSiteFactory.cs,Create,The method has 5 parameters. Parameters: type' artist' album' mEventStopSiteSearches' timeLimit
Long Parameter List,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,DrawColorSlider,The method has 9 parameters. Parameters: e' thumbOuterColorPaint' thumbInnerColorPaint' thumbPenColorPaint' barOuterColorPaint' barInnerColorPaint' barPenColorPaint' elapsedOuterColorPaint' elapsedInnerColorPaint
Long Parameter List,MPTagThat.Core,DatagridViewCheckBoxHeaderCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DatagridViewCheckBoxHeaderCell.cs,Paint,The method has 11 parameters. Parameters: graphics' clipBounds' cellBounds' rowIndex' dataGridViewElementState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' paintParts
Long Parameter List,MPTagThat.Core,DataGridViewProgressCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewProgressColumn.cs,GetFormattedValue,The method has 6 parameters. Parameters: value' rowIndex' cellStyle' valueTypeConverter' formattedValueTypeConverter' context
Long Parameter List,MPTagThat.Core,DataGridViewProgressCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewProgressColumn.cs,Paint,The method has 11 parameters. Parameters: g' clipBounds' cellBounds' rowIndex' cellState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' paintParts
Long Parameter List,MPTagThat.Core,DataGridViewProgressCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewProgressColumn.cs,GetFormattedValue,The method has 6 parameters. Parameters: value' rowIndex' cellStyle' valueTypeConverter' formattedValueTypeConverter' context
Long Parameter List,MPTagThat.Core,DataGridViewProgressCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewProgressColumn.cs,Paint,The method has 11 parameters. Parameters: g' clipBounds' cellBounds' rowIndex' cellState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' paintParts
Long Parameter List,MPTagThat.Core,RatingCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewRatingColumn.cs,GetFormattedValue,The method has 6 parameters. Parameters: value' rowIndex' cellStyle' valueTypeConverter' formattedValueTypeConverter' context
Long Parameter List,MPTagThat.Core,RatingCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewRatingColumn.cs,Paint,The method has 11 parameters. Parameters: graphics' clipBounds' cellBounds' rowIndex' elementState' value' formattedValue' errorText' cellStyle' advancedBorderStyle' paintParts
Long Parameter List,MPTagThat.Core,GridViewColumn,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\GridViewColumn.cs,GridViewColumn,The method has 7 parameters. Parameters: name' type' width' display' readOnly' bound' frozen
Long Parameter List,MPTagThat.Core,Util,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\Util.cs,MoveWindow,The method has 6 parameters. Parameters: hWnd' x' y' cx' cy' repaint
Long Parameter List,MPTagThat.Core.MusicBrainz,NativeMethods,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\MusicBrainz\NativeMethods.cs,ofa_create_print,The method has 6 parameters. Parameters: fingerprint' samples' byteOrder' size' sRate' stereo
Long Parameter List,MPTagThat.Core.Burning,DriveFeatures,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\DriveFeatures.cs,DriveFeatures,The method has 14 parameters. Parameters: aReadsCDR' aWriteCDR' aReadsCDRW' aWriteCDRW' aReadsDVDRom' aReadsDVDR' aWriteDVDR' aReadsDVDRam' aWriteDVDRam' aReadsBRRom' aAllowsDummyWrite' aSupportsBurnFree' aMaxReadSpeed' aMaxWriteSpeed
Long Parameter List,MPTagThat.Core.Burning,MediaInfo,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\MediaInfo.cs,MediaInfo,The method has 10 parameters. Parameters: aMediaType' aIsErasable' aDataType' aDiskStatus' aSessionStatus' aBgFormatStatus' aFirstTrack' aTotalSessions' aIsRestricted' aSize
Long Parameter List,MPTagThat.Core.Burning,MediaTypeSupport,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\MediaTypeSupport.cs,MediaTypeSupport,The method has 10 parameters. Parameters: aWriteDlDVDRam' aWriteDVDRam' aWriteDlDVDplusR' aWriteDVDplusR' aWriteDVDplusRW' aWriteDlDVDminusR' aWriteDVDminusRW' aWriteDVDminusR' aWriteCDRW' aWriteCDR
Long Parameter List,Stepi.UI,Win32Wrapper,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\WIN32Wrapper.cs,SetWindowPos,The method has 7 parameters. Parameters: hWnd' hWndInsertAfter' X' Y' cx' cy' uFlags
Long Parameter List,Raccoom.Windows.Forms,TreeViewFolderBrowserHelper,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\TreeViewBrowser.cs,CreateTreeNode,The method has 5 parameters. Parameters: text' path' addDummyNode' forceChecked' isSpecialFolder
Long Parameter List,Raccoom.Windows.Forms,TreeViewFolderBrowserDataProvider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\TreeViewFolderBrowserDataProvider.cs,CreateTreeNode,The method has 6 parameters. Parameters: helper' text' path' addDummyNode' forceChecked' isSpecialFolder
Long Parameter List,Raccoom.Windows.Forms,TreeViewFolderBrowserDataProviderMusicDb,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\TreeViewFolderBrowserDataProviderMusicDb.cs,CreateTreeNode,The method has 6 parameters. Parameters: helper' text' path' addDummyNode' forceChecked' isSpecialFolder
Long Parameter List,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,Chkdsk,The method has 6 parameters. Parameters: FixErrors' ForceDismount' OkToRunAtBootUp' RecoverBadSectors' SkipFolderCycle' VigorousIndexCheck
Long Parameter List,Raccoom.Win32,SystemImageList,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\SystemImageList.cs,SHParseDisplayName,The method has 5 parameters. Parameters: pszName' pbc' ppidl' sfgaoIn' psfgaoOut
Long Parameter List,Raccoom.Win32,SystemImageList,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\SystemImageList.cs,SHGetFileInfo,The method has 5 parameters. Parameters: pszPath' dwFileAttributes' psfi' cbFileInfo' uFlags
Long Parameter List,Raccoom.Win32,SystemImageList,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\SystemImageList.cs,SHGetFileInfo,The method has 5 parameters. Parameters: pidl' dwFileAttributes' psfi' cbFileInfo' uFlags
Long Parameter List,Raccoom.Win32,SystemImageList,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\SystemImageList.cs,FormatMessage,The method has 7 parameters. Parameters: dwFlags' lpSource' dwMessageId' dwLanguageId' lpBuffer' nSize' argumentsLong
Long Parameter List,Raccoom.Win32,SystemImageList,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\SystemImageList.cs,ImageList_Draw,The method has 6 parameters. Parameters: hIml' i' hdcDst' x' y' fStyle
Long Parameter List,Raccoom.Win32,SystemImageList,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\SystemImageList.cs,DrawImage,The method has 5 parameters. Parameters: hdc' index' x' y' flags
Long Parameter List,Raccoom.Win32,SystemImageList,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\SystemImageList.cs,DrawImage,The method has 7 parameters. Parameters: hdc' index' x' y' flags' cx' cy
Long Parameter List,Raccoom.Win32,SystemImageList,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\SystemImageList.cs,DrawImage,The method has 11 parameters. Parameters: hdc' index' x' y' flags' cx' cy' foreColor' stateFlags' saturateColorOrAlpha' glowOrShadowColor
Long Parameter List,Raccoom.Win32,IImageList,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\SystemImageList.cs,Merge,The method has 7 parameters. Parameters: i1' punk2' i2' dx' dy' riid' ppv
Long Parameter List,MPTagThat.Core.Freedb,CDInfoDetail,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\CDInfoDetail.cs,CDInfoDetail,The method has 9 parameters. Parameters: discID' artist' title' genre' year' duration' tracks' extd' playorder
Long Parameter List,MPTagThat.Core.Freedb,CDTrackDetail,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\CDTrackDetail.cs,CDTrackDetail,The method has 6 parameters. Parameters: songTitle' artist' extt' trackNumber' offset' duration
Long Parameter List,MPTagThat.Core.Freedb,FreeDBSite,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBSite.cs,FreeDBSite,The method has 7 parameters. Parameters: host' proto' port' uri' latitude' longitude' location
Long Parameter List,MPTagThat.Core.ShellLib,IShellFolder,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\ShellLib\IShellFolder.cs,ParseDisplayName,The method has 6 parameters. Parameters: hwnd' pbc' pszDisplayName' pchEaten' ppidl' pdwAttributes
Long Parameter List,MPTagThat.Core.ShellLib,IShellFolder,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\ShellLib\IShellFolder.cs,GetUIObjectOf,The method has 6 parameters. Parameters: hwndOwner' cidl' apidl' riid' rgfReserved' ppv
Long Parameter List,MPTagThat.Core.ShellLib,IShellFolder,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\ShellLib\IShellFolder.cs,SetNameOf,The method has 5 parameters. Parameters: hwnd' pidl' pszName' uFlags' ppidlOut
Long Parameter List,MPTagThat.Core.ShellLib,ShellApi,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\ShellLib\ShellApi.cs,SHGetFolderLocation,The method has 5 parameters. Parameters: hwndOwner' nFolder' hToken' dwReserved' ppidl
Long Parameter List,MPTagThat.Core.ShellLib,ShellApi,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\ShellLib\ShellApi.cs,SHGetFolderPath,The method has 5 parameters. Parameters: hwndOwner' nFolder' hToken' dwFlags' pszPath
Long Parameter List,MPTagThat.Core.ShellLib,ShellApi,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\ShellLib\ShellApi.cs,SHParseDisplayName,The method has 5 parameters. Parameters: pszName' pbc' ppidl' sfgaoIn' psfgaoOut
Long Parameter List,MPTagThat.Core.ShellLib,ShellApi,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\ShellLib\ShellApi.cs,ShellExecute,The method has 6 parameters. Parameters: hwnd' lpOperation' lpFile' lpParameters' lpDirectory' nShowCmd
Long Parameter List,MPTagThat.Core.ShellLib,ShellApi,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\ShellLib\ShellApi.cs,SHInvokePrinterCommand,The method has 5 parameters. Parameters: hwnd' uAction' lpBuf1' lpBuf2' fModal
Long Identifier,MPTagThat.Core.AlbumInfo.AlbumSites,AlbumSiteFactory,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\AlbumInfo\AlbumSites\AlbumSiteFactory.cs,,The length of the parameter NoPaymentprocessorHasBeenRegisteredWithTheIdentifier is 52.
Long Identifier,Stepi.UI,ExtendedPanel,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\ExtendedPanel.cs,,The length of the parameter callbackNotifyAnimationFinished is 31.
Long Identifier,Raccoom.Win32,SystemImageList,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\SystemImageList.cs,,The length of the parameter FORMAT_MESSAGE_ALLOCATE_BUFFER is 30.
Long Statement,MPTagThat.Core.AlbumInfo,AlbumSearch,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\AlbumInfo\AlbumSearch.cs,RunSearchForSiteInThread,The length of the statement  "        var albumSearchSite = AlbumSiteFactory.Create(albumInfoSite' _artist' _albumTitle' _mEventStopSiteSearches' TimeLimitForSite); " is 126.
Long Statement,MPTagThat.Core.AlbumInfo,AlbumSearch,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\AlbumInfo\AlbumSearch.cs,ValidateSearchOutput,The length of the statement  "					ServiceScope.Get<ILogger>().GetLogger.Debug("{0} Albums: {1} Searched: {2} Sites Count: {3}"' site' albums.Count' _mSitesSearched' AlbumSites.Count); " is 149.
Long Statement,MPTagThat.Core.AlbumInfo.AlbumSites,LastFM,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\AlbumInfo\AlbumSites\LastFM.cs,GetAlbumInfoWithTimer,The length of the statement  "				album.MediumImageUrl = lastfmAlbum.Images.First(image => image.ImageSize == LastFMImage.LastFMImageSize.Large).ImageURL; " is 120.
Long Statement,MPTagThat.Core.AlbumInfo.AlbumSites,MusicBrainz,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\AlbumInfo\AlbumSites\MusicBrainz.cs,GetAlbumQuery,The length of the statement  "			var mbAlbum = albums.Items.FirstOrDefault(r => (r.Title != null && r.Title.ToLower() == albumName.ToLower()) && (r.Country != null && r.Country.ToLower() == Options.MainSettings.AmazonSite.ToLower())); " is 201.
Long Statement,MPTagThat.Core.AlbumInfo.AlbumSites,MusicBrainz,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\AlbumInfo\AlbumSites\MusicBrainz.cs,GetAlbumQuery,The length of the statement  "				mbAlbum = albums.Items.FirstOrDefault(r => (r.Title != null && r.Title.ToLower() == albumName.ToLower()) && (r.Country != null && r.Country.ToLower() == "xe")); " is 160.
Long Statement,MPTagThat.Core.AlbumInfo.AlbumSites,MusicBrainz,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\AlbumInfo\AlbumSites\MusicBrainz.cs,GetAlbumQuery,The length of the statement  "					mbAlbum = albums.Items.FirstOrDefault(r => (r.Title != null && r.Title.ToLower() == albumName.ToLower()) && (r.Country != null && r.Country.ToLower() == "us")); " is 160.
Long Statement,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The length of the statement  "      this.labelHeader.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 159.
Long Statement,MPTagThat.Core,Track,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\Track.cs,Create,The length of the statement  "        track.ReplayGainTrack = double.IsNaN(file.Tag.ReplayGainTrackGain) ? "" : file.Tag.ReplayGainTrackGain.ToString(CultureInfo.InvariantCulture); " is 142.
Long Statement,MPTagThat.Core,Track,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\Track.cs,Create,The length of the statement  "        track.ReplayGainTrackPeak = double.IsNaN(file.Tag.ReplayGainTrackPeak) ? "" : file.Tag.ReplayGainTrackPeak.ToString(CultureInfo.InvariantCulture); " is 146.
Long Statement,MPTagThat.Core,Track,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\Track.cs,Create,The length of the statement  "        track.ReplayGainAlbum = double.IsNaN(file.Tag.ReplayGainAlbumGain) ? "" : file.Tag.ReplayGainAlbumGain.ToString(CultureInfo.InvariantCulture); " is 142.
Long Statement,MPTagThat.Core,Track,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\Track.cs,Create,The length of the statement  "        track.ReplayGainAlbumPeak = double.IsNaN(file.Tag.ReplayGainAlbumPeak) ? "" : file.Tag.ReplayGainAlbumPeak.ToString(CultureInfo.InvariantCulture); " is 146.
Long Statement,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,DrawColorSlider,The length of the statement  "              using (LinearGradientBrush lgbThumb2 = new LinearGradientBrush(thumbHalfRect' Color.FromArgb(150' Color.Blue)' Color.Transparent' gradientOrientation)) " is 151.
Long Statement,MPTagThat.Core,ShapedForm,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ShapedForm.cs,InitializeComponent,The length of the statement  "      this.labelResize.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 150.
Long Statement,MPTagThat.Core,ShapedForm,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ShapedForm.cs,InitializeComponent,The length of the statement  "      this.labelResize.Font = new System.Drawing.Font("Marlett"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(2))); " is 145.
Long Statement,MPTagThat.Core,FileLogger,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Logger\FileLogger.cs,ReplaceNumber,The length of the statement  "      return pattern.Substring(0' firstPart) + Convert.ToString(value' 10).PadLeft(numDigits' '0') + pattern.Substring(lastPart); " is 123.
Long Statement,MPTagThat.Core.Burning,BurnManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\BurnManager.cs,GetAvailableDrives,The length of the statement  "              "BurnManager: Drive {0} available for reading only. Supporting CD: {1}' DVD: {2}' DVD-RAM: {3}' BD-ROM: {4}' MaxReadSpeed: {5}"' " is 128.
Long Statement,MPTagThat.Core.Burning,DeviceHelper,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\DeviceHelper.cs,ExecuteProcReturnStdOut,The length of the statement  "              //CdrProc.PriorityClass = ProcessPriorityClass.BelowNormal;            // Execute all processes in the background so movies' etc stay fluent " is 140.
Long Statement,MPTagThat.Core.Freedb,XMCDParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\XMCDParser.cs,InitVariables,The length of the statement  "      /*Tracks from compilation-like albums have their own nomenclature in FreeDB (cf. http://www.freedb.org/modules.php?name=Sections&sop=viewarticle&artid=26#2-2)' track tags have to be pre-processed " is 195.
Long Statement,MPTagThat.Core.Freedb,XMCDParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\XMCDParser.cs,InitVariables,The length of the statement  "      The only difficulty here is whether or not some Artist or Title names may contain legitimate " / "' regarding FreeDB nomenclature it is illegal " is 143.
Long Statement,MPTagThat.Core.Freedb,XMCDParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\XMCDParser.cs,InitVariables,The length of the statement  "      We split the string even if we're not sure this CD is a real compilation: it is usually no use to try to figure out if the CD is an actual compilation by looking at its Artist tag (album Artist tag = "((Various)|(Assorted))(Artists)?") because most annotators don't tag it that way " is 281.
Long Statement,MPTagThat.Core.Freedb,XMCDParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\XMCDParser.cs,InitVariables,The length of the statement  "      Extended to the detection of " - " as well' a lot of FreeDB annotators do not follow the above rule and split the Artist from the Title name this way; this workaround is a hell more tricky' a few legitimate tags may be badly cut " is 228.
Long Statement,MPTagThat.Core.Freedb,XMCDParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\XMCDParser.cs,extendedParseTrackTitle,The length of the statement  "        //A lot of annotators don't use the standard " / " to split the Artist name from the Title name' instead they rely on the unconventional " - " delimiter " is 152.
Long Statement,MPTagThat.Core.Freedb,XMCDParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\XMCDParser.cs,extendedParseTrackArtist,The length of the statement  "        //A lot of annotators don't use the standard " / " to split the Artist name from the Title name' instead they rely on the unconventional " - " delimiter " is 152.
Long Statement,MPTagThat.Core.Services.MusicDatabase,MusicDatabase,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\MusicDatabase\MusicDatabase.cs,UpdateTrack,The length of the statement  "        var dbTracks = _session.Advanced.DocumentQuery<TrackData' DefaultSearchIndex>().WhereEquals("Query"' originalFileName).ToList(); " is 128.
Long Statement,MPTagThat.Core.Services.MusicDatabase,MusicDatabase,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\MusicDatabase\MusicDatabase.cs,ScanShare_Completed,The length of the statement  "        Util.SendProgress(string.Format(ServiceScope.Get<ILocalisation>().ToString("Database"' "DBScanFinished")' _audioFiles' ts.Hours' ts.Minutes' ts.Seconds)); " is 154.
Complex Conditional,MPTagThat.Core,Track,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\Track.cs,SaveFile,The conditional expression  "track.Readonly && !Options.MainSettings.ChangeReadOnlyAttributte &&              (Options.ReadOnlyFileHandling == 0 || Options.ReadOnlyFileHandling == 2)"  is complex.
Complex Conditional,MPTagThat.Core,DatagridViewCheckBoxHeaderCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DatagridViewCheckBoxHeaderCell.cs,OnMouseClick,The conditional expression  "p.X >= checkBoxLocation.X && p.X <=                                         checkBoxLocation.X + checkBoxSize.Width            && p.Y >= checkBoxLocation.Y && p.Y <=            checkBoxLocation.Y + checkBoxSize.Height"  is complex.
Complex Conditional,MPTagThat.Core,ObjectParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\SettingsManager\ObjectParser.cs,isCLRType,The conditional expression  "(aType == typeof (int))            || (aType == typeof (string))            || (aType == typeof (bool))            || (aType == typeof (float))            || (aType == typeof (double))            || (aType == typeof (UInt32))            || (aType == typeof (UInt64))            || (aType == typeof (UInt16))            || (aType == typeof (DateTime))            //|| (aType == typeof(string?))            || (aType == typeof (bool?))            || (aType == typeof (float?))            || (aType == typeof (double?))            || (aType == typeof (UInt32?))            || (aType == typeof (UInt64?))            || (aType == typeof (UInt16?))            || (aType == typeof (Int32?))            || (aType == typeof (Int64?))            || (aType == typeof (Int16?))"  is complex.
Complex Conditional,MPTagThat.Core,XmlNoNamespaceWriter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\SettingsManager\XmlNoNamespaceWriter.cs,WriteStartAttribute,The conditional expression  "(prefix != null && prefix.CompareTo("xmlns") == 0) ||            (localName != null && localName.CompareTo("xmlns") == 0)"  is complex.
Complex Conditional,MPTagThat.Core,Util,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\Util.cs,CheckParameterFormat,The conditional expression  "formattype == Options.ParameterFormat.FileNameToTag || formattype == Options.ParameterFormat.TagToFileName ||            formattype == Options.ParameterFormat.RipFileName || formattype == Options.ParameterFormat.Organise"  is complex.
Complex Conditional,MPTagThat.Core,Util,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\Util.cs,CheckParameterFormat,The conditional expression  "(str.IndexOf("<") >= 0 || str.IndexOf(">") >= 0) ||            (str.IndexOf("\x0001\x0001") >= 0 && formattype == Options.ParameterFormat.FileNameToTag)"  is complex.
Complex Conditional,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnMouseMove,The conditional expression  "e.X >= rr.X && e.X <= rr.X + rr.Width && e.Y >= rr.Y && e.Y <= rr.Y + rr.Height"  is complex.
Complex Conditional,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnClick,The conditional expression  "controlToHide != null && hot &&            currentState != SplitterState.Collapsing &&            currentState != SplitterState.Expanding"  is complex.
Complex Conditional,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,ArrowPointArray,The conditional expression  "(Dock == DockStyle.Right && controlToHide.Visible)            || (Dock == DockStyle.Left && !controlToHide.Visible)"  is complex.
Complex Conditional,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,ArrowPointArray,The conditional expression  "(Dock == DockStyle.Right && !controlToHide.Visible)            || (Dock == DockStyle.Left && controlToHide.Visible)"  is complex.
Complex Conditional,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,ArrowPointArray,The conditional expression  "(Dock == DockStyle.Top && controlToHide.Visible)            || (Dock == DockStyle.Bottom && !controlToHide.Visible)"  is complex.
Complex Conditional,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,ArrowPointArray,The conditional expression  "(Dock == DockStyle.Top && !controlToHide.Visible)            || (Dock == DockStyle.Bottom && controlToHide.Visible)"  is complex.
Complex Conditional,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDateTime,The conditional expression  "((((((((year < 0)                     || (month < 0))                    || (day < 0))                   || (hour < 0))                  || (minute < 0))                 || (minute < 0))                || (second < 0))               || (ticks < 0))"  is complex.
Empty Catch Block,MPTagThat.Core,Track,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\Track.cs,Create,The method has an empty catch block.
Empty Catch Block,MPTagThat.Core,Track,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\Track.cs,Create,The method has an empty catch block.
Empty Catch Block,MPTagThat.Core,Track,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\Track.cs,Create,The method has an empty catch block.
Empty Catch Block,MPTagThat.Core,LocalisationProvider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Localisation\LocalisationProvider.cs,ToString,The method has an empty catch block.
Empty Catch Block,MPTagThat.Core,LocalisationProvider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Localisation\LocalisationProvider.cs,GetAvailableLangauges,The method has an empty catch block.
Empty Catch Block,MPTagThat.Core,FileLogger,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Logger\FileLogger.cs,ArchiveLogs,The method has an empty catch block.
Empty Catch Block,MPTagThat.Core,FileLogger,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Logger\FileLogger.cs,ArchiveLogs,The method has an empty catch block.
Empty Catch Block,MPTagThat.Core,ObjectParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\SettingsManager\ObjectParser.cs,Deserialize,The method has an empty catch block.
Empty Catch Block,MPTagThat.Core,ObjectParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\SettingsManager\ObjectParser.cs,Deserialize,The method has an empty catch block.
Empty Catch Block,MPTagThat.Core,XmlSettingsProvider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\SettingsManager\XmlSettingsProvider.cs,Save,The method has an empty catch block.
Empty Catch Block,MPTagThat.Core.Burning,BurnManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\BurnManager.cs,CalcTotalBytesOfDirInfo,The method has an empty catch block.
Empty Catch Block,MPTagThat.Core.Burning,DeviceHelper,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\DeviceHelper.cs,StdErrDataReceived,The method has an empty catch block.
Empty Catch Block,MPTagThat.Core.Burning,DriveFeatures,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\DriveFeatures.cs,ParseSpeed,The method has an empty catch block.
Empty Catch Block,MPTagThat.Core.Common,Picture,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\Picture.cs,ImageFromData,The method has an empty catch block.
Empty Catch Block,Raccoom.Windows.Forms,TreeViewFolderBrowser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\TreeViewBrowser.cs,MarkNode,The method has an empty catch block.
Empty Catch Block,Raccoom.Windows.Forms,TreeViewFolderBrowserDataProvider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\TreeViewFolderBrowserDataProvider.cs,RequestSubDirs,The method has an empty catch block.
Empty Catch Block,Raccoom.Windows.Forms,MenuItemShellVerb,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\TreeViewFolderBrowserDataProviderShell32.cs,OnClick,The method has an empty catch block.
Empty Catch Block,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetStreamFromSite,The method has an empty catch block.
Empty Catch Block,MPTagThat.Core.Freedb,XMCDParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\XMCDParser.cs,InitVariables,The method has an empty catch block.
Empty Catch Block,MPTagThat.Core.Freedb,XMCDParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\XMCDParser.cs,parseOffsets,The method has an empty catch block.
Empty Catch Block,MPTagThat.Core.Freedb,XMCDParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\XMCDParser.cs,parseLength,The method has an empty catch block.
Empty Catch Block,MPTagThat.Core.Freedb,XMCDParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\XMCDParser.cs,parseRevision,The method has an empty catch block.
Empty Catch Block,MPTagThat.Core.Freedb,XMCDParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\XMCDParser.cs,parseYear,The method has an empty catch block.
Empty Catch Block,MPTagThat.Core.Freedb,XMCDParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\XMCDParser.cs,parsePlayOrder,The method has an empty catch block.
Empty Catch Block,MPTagThat.Core.Services.MusicDatabase,MusicDatabase,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\MusicDatabase\MusicDatabase.cs,StoreCoverArt,The method has an empty catch block.
Magic Number,MPTagThat.Core.AlbumInfo.AlbumSites,Amazon,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\AlbumInfo\AlbumSites\Amazon.cs,GetAlbumInfoWithTimer,The following statement contains a magic number: MEventStopSiteSearches.WaitOne(500' true)
Magic Number,MPTagThat.Core.AlbumInfo.AlbumSites,LastFM,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\AlbumInfo\AlbumSites\LastFM.cs,SwitchArtist,The following statement contains a magic number: artist = String.Format("{0} {1}"' artist.Substring(iPos + 2)' artist.Substring(0' iPos));
Magic Number,MPTagThat.Core.AlbumInfo.AlbumSites,MusicBrainz,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\AlbumInfo\AlbumSites\MusicBrainz.cs,SwitchArtist,The following statement contains a magic number: artist = String.Format("{0} {1}"' artist.Substring(iPos + 2)' artist.Substring(0' iPos));
Magic Number,MPTagThat.Core,SongList,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\SongList.cs,CopyLIstToDatabase,The following statement contains a magic number: BulkInsertOptions bulkInsertOptions = new BulkInsertOptions        {          BatchSize = 1000'          OverwriteExisting = true        };
Magic Number,MPTagThat.Core,ActionHandler,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\ActionHandler\ActionHandler.cs,GetAction,The following statement contains a magic number: (int)key > 47 && (int)key < 91
Magic Number,MPTagThat.Core,ActionHandler,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\ActionHandler\ActionHandler.cs,GetAction,The following statement contains a magic number: (int)key > 47 && (int)key < 91
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelHeader.Font = new System.Drawing.Font("Microsoft Sans Serif"' 12F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0)));
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelHeader.Location = new System.Drawing.Point(21' 19);
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelHeader.Location = new System.Drawing.Point(21' 19);
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelHeader.Size = new System.Drawing.Size(62' 20);
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelHeader.Size = new System.Drawing.Size(62' 20);
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.labelHeader.TabIndex = 24;
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.lbExplanation.Location = new System.Drawing.Point(21' 89);
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.lbExplanation.Location = new System.Drawing.Point(21' 89);
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.lbExplanation.Size = new System.Drawing.Size(529' 61);
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.lbExplanation.Size = new System.Drawing.Size(529' 61);
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.lbExplanation.TabIndex = 25;
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.btYes.Location = new System.Drawing.Point(32' 163);
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.btYes.Location = new System.Drawing.Point(32' 163);
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.btYes.Size = new System.Drawing.Size(104' 23);
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.btYes.Size = new System.Drawing.Size(104' 23);
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.btYes.TabIndex = 26;
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.btYesToAll.Location = new System.Drawing.Point(170' 163);
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.btYesToAll.Location = new System.Drawing.Point(170' 163);
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.btYesToAll.Size = new System.Drawing.Size(104' 23);
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.btYesToAll.Size = new System.Drawing.Size(104' 23);
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.btYesToAll.TabIndex = 27;
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.btNo.Location = new System.Drawing.Point(308' 163);
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.btNo.Location = new System.Drawing.Point(308' 163);
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.btNo.Size = new System.Drawing.Size(104' 23);
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.btNo.Size = new System.Drawing.Size(104' 23);
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.btNo.TabIndex = 28;
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.btNoToAll.Location = new System.Drawing.Point(446' 163);
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.btNoToAll.Location = new System.Drawing.Point(446' 163);
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.btNoToAll.Size = new System.Drawing.Size(104' 23);
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.btNoToAll.Size = new System.Drawing.Size(104' 23);
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.btNoToAll.TabIndex = 30;
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.lbFile.Location = new System.Drawing.Point(21' 52);
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.lbFile.Location = new System.Drawing.Point(21' 52);
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.lbFile.Size = new System.Drawing.Size(529' 24);
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.lbFile.Size = new System.Drawing.Size(529' 24);
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.lbFile.TabIndex = 31;
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleDimensions = new System.Drawing.SizeF(6F' 13F);
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(587' 214);
Magic Number,MPTagThat.Core,ReadOnlyDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\ReadOnlyDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(587' 214);
Magic Number,MPTagThat.Core,Track,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\Track.cs,Create,The following statement contains a magic number: int fileLength = (int)(fi.Length / 1024);
Magic Number,MPTagThat.Core,Track,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\Track.cs,SaveFile,The following statement contains a magic number: switch (dlgResult)          {            case DialogResult.Yes:              Options.ReadOnlyFileHandling = 0; // Yes               break;              case DialogResult.OK:              Options.ReadOnlyFileHandling = 1; // Yes to All               break;              case DialogResult.No:              Options.ReadOnlyFileHandling = 2; // No               break;              case DialogResult.Cancel:              Options.ReadOnlyFileHandling = 3; // No to All               break;          }
Magic Number,MPTagThat.Core,Track,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\Track.cs,SaveFile,The following statement contains a magic number: switch (dlgResult)          {            case DialogResult.Yes:              Options.ReadOnlyFileHandling = 0; // Yes               break;              case DialogResult.OK:              Options.ReadOnlyFileHandling = 1; // Yes to All               break;              case DialogResult.No:              Options.ReadOnlyFileHandling = 2; // No               break;              case DialogResult.Cancel:              Options.ReadOnlyFileHandling = 3; // No to All               break;          }
Magic Number,MPTagThat.Core,Track,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\Track.cs,SaveFile,The following statement contains a magic number: track.Readonly && !Options.MainSettings.ChangeReadOnlyAttributte &&              (Options.ReadOnlyFileHandling == 0 || Options.ReadOnlyFileHandling == 2)
Magic Number,MPTagThat.Core,Track,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\Track.cs,SaveFile,The following statement contains a magic number: switch (Options.MainSettings.CharacterEncoding)              {                case 0:                  TagLib.Id3v2.Tag.DefaultEncoding = StringType.Latin1;                  break;                  case 1:                  TagLib.Id3v2.Tag.DefaultEncoding = StringType.UTF16;                  break;                  case 2:                  TagLib.Id3v2.Tag.DefaultEncoding = StringType.UTF16BE;                  break;                  case 3:                  TagLib.Id3v2.Tag.DefaultEncoding = StringType.UTF8;                  break;                  case 4:                  TagLib.Id3v2.Tag.DefaultEncoding = StringType.UTF16LE;                  break;              }
Magic Number,MPTagThat.Core,Track,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\Track.cs,SaveFile,The following statement contains a magic number: switch (Options.MainSettings.CharacterEncoding)              {                case 0:                  TagLib.Id3v2.Tag.DefaultEncoding = StringType.Latin1;                  break;                  case 1:                  TagLib.Id3v2.Tag.DefaultEncoding = StringType.UTF16;                  break;                  case 2:                  TagLib.Id3v2.Tag.DefaultEncoding = StringType.UTF16BE;                  break;                  case 3:                  TagLib.Id3v2.Tag.DefaultEncoding = StringType.UTF8;                  break;                  case 4:                  TagLib.Id3v2.Tag.DefaultEncoding = StringType.UTF16LE;                  break;              }
Magic Number,MPTagThat.Core,Track,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\Track.cs,SaveFile,The following statement contains a magic number: switch (Options.MainSettings.CharacterEncoding)              {                case 0:                  TagLib.Id3v2.Tag.DefaultEncoding = StringType.Latin1;                  break;                  case 1:                  TagLib.Id3v2.Tag.DefaultEncoding = StringType.UTF16;                  break;                  case 2:                  TagLib.Id3v2.Tag.DefaultEncoding = StringType.UTF16BE;                  break;                  case 3:                  TagLib.Id3v2.Tag.DefaultEncoding = StringType.UTF8;                  break;                  case 4:                  TagLib.Id3v2.Tag.DefaultEncoding = StringType.UTF16LE;                  break;              }
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,OnPaint,The following statement contains a magic number: DrawColorSlider(e' desaturatedColors[0]' desaturatedColors[1]' desaturatedColors[2]'                          desaturatedColors[3]'                          desaturatedColors[4]' desaturatedColors[5]' desaturatedColors[6]' desaturatedColors[7]);
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,OnPaint,The following statement contains a magic number: DrawColorSlider(e' desaturatedColors[0]' desaturatedColors[1]' desaturatedColors[2]'                          desaturatedColors[3]'                          desaturatedColors[4]' desaturatedColors[5]' desaturatedColors[6]' desaturatedColors[7]);
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,OnPaint,The following statement contains a magic number: DrawColorSlider(e' desaturatedColors[0]' desaturatedColors[1]' desaturatedColors[2]'                          desaturatedColors[3]'                          desaturatedColors[4]' desaturatedColors[5]' desaturatedColors[6]' desaturatedColors[7]);
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,OnPaint,The following statement contains a magic number: DrawColorSlider(e' desaturatedColors[0]' desaturatedColors[1]' desaturatedColors[2]'                          desaturatedColors[3]'                          desaturatedColors[4]' desaturatedColors[5]' desaturatedColors[6]' desaturatedColors[7]);
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,OnPaint,The following statement contains a magic number: DrawColorSlider(e' desaturatedColors[0]' desaturatedColors[1]' desaturatedColors[2]'                          desaturatedColors[3]'                          desaturatedColors[4]' desaturatedColors[5]' desaturatedColors[6]' desaturatedColors[7]);
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,OnPaint,The following statement contains a magic number: DrawColorSlider(e' desaturatedColors[0]' desaturatedColors[1]' desaturatedColors[2]'                          desaturatedColors[3]'                          desaturatedColors[4]' desaturatedColors[5]' desaturatedColors[6]' desaturatedColors[7]);
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,DrawColorSlider,The following statement contains a magic number: thumbRect = new Rectangle(TrackX' 1' thumbSize - 1' ClientRectangle.Height - 3);
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,DrawColorSlider,The following statement contains a magic number: barRect.Inflate(-1' -barRect.Height / 3);
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,DrawColorSlider,The following statement contains a magic number: barHalfRect.Height /= 2;
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,DrawColorSlider,The following statement contains a magic number: thumbHalfRect.Height /= 2;
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,DrawColorSlider,The following statement contains a magic number: elapsedRect.Width = thumbRect.Left + thumbSize / 2;
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,DrawColorSlider,The following statement contains a magic number: newthumbOuterColorPaint = Color.FromArgb(175' thumbOuterColorPaint);
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,DrawColorSlider,The following statement contains a magic number: newthumbInnerColorPaint = Color.FromArgb(175' thumbInnerColorPaint);
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,DrawColorSlider,The following statement contains a magic number: r.Width -= 2;
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,OnMouseMove,The following statement contains a magic number: float coef = (barMaximum - barMinimum) /                       (float)                       ((barOrientation == Orientation.Horizontal ? ClientSize.Width : ClientSize.Height) -                        2 * margin);
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,OnMouseWheel,The following statement contains a magic number: int v = e.Delta / 120 * (barMaximum - barMinimum) / mouseWheelBarPartitions;
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,CreateRoundRectPath,The following statement contains a magic number: gp.AddLine(rect.Left + size.Width / 2' rect.Top' rect.Right - size.Width / 2' rect.Top);
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,CreateRoundRectPath,The following statement contains a magic number: gp.AddLine(rect.Left + size.Width / 2' rect.Top' rect.Right - size.Width / 2' rect.Top);
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,CreateRoundRectPath,The following statement contains a magic number: gp.AddArc(rect.Right - size.Width' rect.Top' size.Width' size.Height' 270' 90);
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,CreateRoundRectPath,The following statement contains a magic number: gp.AddArc(rect.Right - size.Width' rect.Top' size.Width' size.Height' 270' 90);
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,CreateRoundRectPath,The following statement contains a magic number: gp.AddLine(rect.Right' rect.Top + size.Height / 2' rect.Right' rect.Bottom - size.Width / 2);
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,CreateRoundRectPath,The following statement contains a magic number: gp.AddLine(rect.Right' rect.Top + size.Height / 2' rect.Right' rect.Bottom - size.Width / 2);
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,CreateRoundRectPath,The following statement contains a magic number: gp.AddArc(rect.Right - size.Width' rect.Bottom - size.Height' size.Width' size.Height' 0' 90);
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,CreateRoundRectPath,The following statement contains a magic number: gp.AddLine(rect.Right - size.Width / 2' rect.Bottom' rect.Left + size.Width / 2' rect.Bottom);
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,CreateRoundRectPath,The following statement contains a magic number: gp.AddLine(rect.Right - size.Width / 2' rect.Bottom' rect.Left + size.Width / 2' rect.Bottom);
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,CreateRoundRectPath,The following statement contains a magic number: gp.AddArc(rect.Left' rect.Bottom - size.Height' size.Width' size.Height' 90' 90);
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,CreateRoundRectPath,The following statement contains a magic number: gp.AddArc(rect.Left' rect.Bottom - size.Height' size.Width' size.Height' 90' 90);
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,CreateRoundRectPath,The following statement contains a magic number: gp.AddLine(rect.Left' rect.Bottom - size.Height / 2' rect.Left' rect.Top + size.Height / 2);
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,CreateRoundRectPath,The following statement contains a magic number: gp.AddLine(rect.Left' rect.Bottom - size.Height / 2' rect.Left' rect.Top + size.Height / 2);
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,CreateRoundRectPath,The following statement contains a magic number: gp.AddArc(rect.Left' rect.Top' size.Width' size.Height' 180' 90);
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,CreateRoundRectPath,The following statement contains a magic number: gp.AddArc(rect.Left' rect.Top' size.Width' size.Height' 180' 90);
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,DesaturateColors,The following statement contains a magic number: int gray =            (int)(colorsToDesaturate[i].R * 0.3 + colorsToDesaturate[i].G * 0.6 + colorsToDesaturate[i].B * 0.1);
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,DesaturateColors,The following statement contains a magic number: int gray =            (int)(colorsToDesaturate[i].R * 0.3 + colorsToDesaturate[i].G * 0.6 + colorsToDesaturate[i].B * 0.1);
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,DesaturateColors,The following statement contains a magic number: int gray =            (int)(colorsToDesaturate[i].R * 0.3 + colorsToDesaturate[i].G * 0.6 + colorsToDesaturate[i].B * 0.1);
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,DesaturateColors,The following statement contains a magic number: colorsToReturn[i] = Color.FromArgb(-0x010101 * (255 - gray) - 1);
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(200' 30);
Magic Number,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(200' 30);
Magic Number,MPTagThat.Core,DatagridViewCheckBoxHeaderCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DatagridViewCheckBoxHeaderCell.cs,Paint,The following statement contains a magic number: p.X = cellBounds.Location.X +              (cellBounds.Width / 2) - (s.Width / 2);
Magic Number,MPTagThat.Core,DatagridViewCheckBoxHeaderCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DatagridViewCheckBoxHeaderCell.cs,Paint,The following statement contains a magic number: p.X = cellBounds.Location.X +              (cellBounds.Width / 2) - (s.Width / 2);
Magic Number,MPTagThat.Core,DatagridViewCheckBoxHeaderCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DatagridViewCheckBoxHeaderCell.cs,Paint,The following statement contains a magic number: p.Y = cellBounds.Location.Y +              (cellBounds.Height / 2) - (s.Height / 2);
Magic Number,MPTagThat.Core,DatagridViewCheckBoxHeaderCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DatagridViewCheckBoxHeaderCell.cs,Paint,The following statement contains a magic number: p.Y = cellBounds.Location.Y +              (cellBounds.Height / 2) - (s.Height / 2);
Magic Number,MPTagThat.Core,DataGridViewProgressCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: float percentage = (progressVal / 100.0f);
Magic Number,MPTagThat.Core,DataGridViewProgressCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.FillRectangle(new SolidBrush(Color.FromArgb(163' 189' 242))' cellBounds.X + 2' cellBounds.Y + 2'                          Convert.ToInt32((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);
Magic Number,MPTagThat.Core,DataGridViewProgressCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.FillRectangle(new SolidBrush(Color.FromArgb(163' 189' 242))' cellBounds.X + 2' cellBounds.Y + 2'                          Convert.ToInt32((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);
Magic Number,MPTagThat.Core,DataGridViewProgressCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.FillRectangle(new SolidBrush(Color.FromArgb(163' 189' 242))' cellBounds.X + 2' cellBounds.Y + 2'                          Convert.ToInt32((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);
Magic Number,MPTagThat.Core,DataGridViewProgressCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.FillRectangle(new SolidBrush(Color.FromArgb(163' 189' 242))' cellBounds.X + 2' cellBounds.Y + 2'                          Convert.ToInt32((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);
Magic Number,MPTagThat.Core,DataGridViewProgressCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.FillRectangle(new SolidBrush(Color.FromArgb(163' 189' 242))' cellBounds.X + 2' cellBounds.Y + 2'                          Convert.ToInt32((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);
Magic Number,MPTagThat.Core,DataGridViewProgressCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.FillRectangle(new SolidBrush(Color.FromArgb(163' 189' 242))' cellBounds.X + 2' cellBounds.Y + 2'                          Convert.ToInt32((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);
Magic Number,MPTagThat.Core,DataGridViewProgressCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.FillRectangle(new SolidBrush(Color.FromArgb(163' 189' 242))' cellBounds.X + 2' cellBounds.Y + 2'                          Convert.ToInt32((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);
Magic Number,MPTagThat.Core,DataGridViewProgressCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.DrawString(progressVal + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);
Magic Number,MPTagThat.Core,DataGridViewProgressCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.DrawString(progressVal + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);
Magic Number,MPTagThat.Core,DataGridViewProgressCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: float percentage = (progressVal / 100.0f);
Magic Number,MPTagThat.Core,DataGridViewProgressCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.FillRectangle(new SolidBrush(Color.FromArgb(163' 189' 242))' cellBounds.X + 2' cellBounds.Y + 2'                          Convert.ToInt32((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);
Magic Number,MPTagThat.Core,DataGridViewProgressCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.FillRectangle(new SolidBrush(Color.FromArgb(163' 189' 242))' cellBounds.X + 2' cellBounds.Y + 2'                          Convert.ToInt32((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);
Magic Number,MPTagThat.Core,DataGridViewProgressCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.FillRectangle(new SolidBrush(Color.FromArgb(163' 189' 242))' cellBounds.X + 2' cellBounds.Y + 2'                          Convert.ToInt32((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);
Magic Number,MPTagThat.Core,DataGridViewProgressCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.FillRectangle(new SolidBrush(Color.FromArgb(163' 189' 242))' cellBounds.X + 2' cellBounds.Y + 2'                          Convert.ToInt32((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);
Magic Number,MPTagThat.Core,DataGridViewProgressCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.FillRectangle(new SolidBrush(Color.FromArgb(163' 189' 242))' cellBounds.X + 2' cellBounds.Y + 2'                          Convert.ToInt32((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);
Magic Number,MPTagThat.Core,DataGridViewProgressCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.FillRectangle(new SolidBrush(Color.FromArgb(163' 189' 242))' cellBounds.X + 2' cellBounds.Y + 2'                          Convert.ToInt32((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);
Magic Number,MPTagThat.Core,DataGridViewProgressCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.FillRectangle(new SolidBrush(Color.FromArgb(163' 189' 242))' cellBounds.X + 2' cellBounds.Y + 2'                          Convert.ToInt32((percentage * cellBounds.Width - 4))' cellBounds.Height - 4);
Magic Number,MPTagThat.Core,DataGridViewProgressCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.DrawString(progressVal + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);
Magic Number,MPTagThat.Core,DataGridViewProgressCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewProgressColumn.cs,Paint,The following statement contains a magic number: g.DrawString(progressVal + "%"' cellStyle.Font' foreColorBrush' cellBounds.X + 6' cellBounds.Y + 2);
Magic Number,MPTagThat.Core,RatingCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewRatingColumn.cs,RatingCell,The following statement contains a magic number: starImages = new Image[6];
Magic Number,MPTagThat.Core,RatingCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewRatingColumn.cs,RatingCell,The following statement contains a magic number: starHotImages = new Image[6];
Magic Number,MPTagThat.Core,RatingCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewRatingColumn.cs,RatingCell,The following statement contains a magic number: i <= 5
Magic Number,MPTagThat.Core,RatingCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewRatingColumn.cs,RatingCell,The following statement contains a magic number: i <= 5
Magic Number,MPTagThat.Core,RatingCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewRatingColumn.cs,GetFormattedValue,The following statement contains a magic number: (int)value < 0 || (int)value > 5
Magic Number,MPTagThat.Core,RatingCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewRatingColumn.cs,Paint,The following statement contains a magic number: starNumber > -1 && starNumber < 6
Magic Number,MPTagThat.Core,RatingCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewRatingColumn.cs,GetStarFromMouse,The following statement contains a magic number: int imageXArea = (cellBounds.Width / 2) - (IMAGEWIDTH / 2);
Magic Number,MPTagThat.Core,RatingCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewRatingColumn.cs,GetStarFromMouse,The following statement contains a magic number: int imageXArea = (cellBounds.Width / 2) - (IMAGEWIDTH / 2);
Magic Number,MPTagThat.Core,RatingCell,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\DataGridViewRatingColumn.cs,GetStarFromMouse,The following statement contains a magic number: ((mouseXRelativeToCell + 4) < imageXArea) || (mouseXRelativeToCell >= (imageXArea + IMAGEWIDTH))
Magic Number,MPTagThat.Core,MarqueeLabel,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\MarqueeLabel.cs,MarqueeLabel,The following statement contains a magic number: Size = new Size(360' 104);
Magic Number,MPTagThat.Core,MarqueeLabel,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\MarqueeLabel.cs,MarqueeLabel,The following statement contains a magic number: Size = new Size(360' 104);
Magic Number,MPTagThat.Core,MarqueeLabel,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\MarqueeLabel.cs,OnPaint,The following statement contains a magic number: _wait = 3;
Magic Number,MPTagThat.Core,ShapedForm,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ShapedForm.cs,OnLoad,The following statement contains a magic number: labelResize.Location = new Point(ClientSize.Width - 21' ClientSize.Height - 18);
Magic Number,MPTagThat.Core,ShapedForm,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ShapedForm.cs,OnLoad,The following statement contains a magic number: labelResize.Location = new Point(ClientSize.Width - 21' ClientSize.Height - 18);
Magic Number,MPTagThat.Core,ShapedForm,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ShapedForm.cs,labelResize_MouseMove,The following statement contains a magic number: Rectangle ClipRectangle = RectangleToScreen(new Rectangle(100' 100' Width' Height));
Magic Number,MPTagThat.Core,ShapedForm,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ShapedForm.cs,labelResize_MouseMove,The following statement contains a magic number: Rectangle ClipRectangle = RectangleToScreen(new Rectangle(100' 100' Width' Height));
Magic Number,MPTagThat.Core,ShapedForm,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ShapedForm.cs,labelResize_MouseMove,The following statement contains a magic number: labelResize.Location = new Point(Cursor.Position.X + _sizeOffset.X - Location.X - 21'                                           Cursor.Position.Y + _sizeOffset.Y - Location.Y - 18);
Magic Number,MPTagThat.Core,ShapedForm,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ShapedForm.cs,labelResize_MouseMove,The following statement contains a magic number: labelResize.Location = new Point(Cursor.Position.X + _sizeOffset.X - Location.X - 21'                                           Cursor.Position.Y + _sizeOffset.Y - Location.Y - 18);
Magic Number,MPTagThat.Core,ShapedForm,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ShapedForm.cs,InitializeComponent,The following statement contains a magic number: this.labelResize.Font = new System.Drawing.Font("Marlett"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(2)));
Magic Number,MPTagThat.Core,ShapedForm,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ShapedForm.cs,InitializeComponent,The following statement contains a magic number: this.labelResize.Font = new System.Drawing.Font("Marlett"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(2)));
Magic Number,MPTagThat.Core,ShapedForm,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ShapedForm.cs,InitializeComponent,The following statement contains a magic number: this.labelResize.Location = new System.Drawing.Point(253' 232);
Magic Number,MPTagThat.Core,ShapedForm,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ShapedForm.cs,InitializeComponent,The following statement contains a magic number: this.labelResize.Location = new System.Drawing.Point(253' 232);
Magic Number,MPTagThat.Core,ShapedForm,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ShapedForm.cs,InitializeComponent,The following statement contains a magic number: this.labelResize.Size = new System.Drawing.Size(17' 11);
Magic Number,MPTagThat.Core,ShapedForm,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ShapedForm.cs,InitializeComponent,The following statement contains a magic number: this.labelResize.Size = new System.Drawing.Size(17' 11);
Magic Number,MPTagThat.Core,ShapedForm,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ShapedForm.cs,InitializeComponent,The following statement contains a magic number: this.labelResize.TabIndex = 3;
Magic Number,MPTagThat.Core,LocalisationProvider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Localisation\LocalisationProvider.cs,Clear,The following statement contains a magic number: _characters = 255;
Magic Number,MPTagThat.Core,FileLogger,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Logger\FileLogger.cs,ReplaceNumber,The following statement contains a magic number: int lastPart = pattern.IndexOf("#}"' StringComparison.Ordinal) + 2;
Magic Number,MPTagThat.Core,FileLogger,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Logger\FileLogger.cs,ReplaceNumber,The following statement contains a magic number: int numDigits = lastPart - firstPart - 2;
Magic Number,MPTagThat.Core,FileLogger,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Logger\FileLogger.cs,ReplaceNumber,The following statement contains a magic number: return pattern.Substring(0' firstPart) + Convert.ToString(value' 10).PadLeft(numDigits' '0') + pattern.Substring(lastPart);
Magic Number,MPTagThat.Core,ScriptManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\ScriptManager\ScriptManager.cs,GetDescription,The following statement contains a magic number: string[] description = new string[3];
Magic Number,MPTagThat.Core,ScriptManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\ScriptManager\ScriptManager.cs,GetDescription,The following statement contains a magic number: description[1] = line1.Substring(9).Trim();
Magic Number,MPTagThat.Core,ScriptManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\ScriptManager\ScriptManager.cs,GetDescription,The following statement contains a magic number: description[2] = line2.Substring(15).Trim();
Magic Number,MPTagThat.Core,ScriptManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\ScriptManager\ScriptManager.cs,GetDescription,The following statement contains a magic number: description[2] = line2.Substring(15).Trim();
Magic Number,MPTagThat.Core,Options,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Settings\Options.cs,Options,The following statement contains a magic number: ReadOnlyFileHandling = 2;
Magic Number,MPTagThat.Core,ThemeManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\ThemeManager\ThemeManager.cs,LoadTheme,The following statement contains a magic number: theme.BackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                             Convert.ToInt16(colorArray[2]));
Magic Number,MPTagThat.Core,ThemeManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\ThemeManager\ThemeManager.cs,LoadTheme,The following statement contains a magic number: switch (attr.Name)              {                case "Label":                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.LabelForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                        Convert.ToInt16(colorArray[2]));                  theme.LabelFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                             (float)                                             Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                               CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "PanelHeading":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.PanelHeadingBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("directionctrlcolor").Value.Split(''');                  theme.PanelHeadingDirectionCtrlColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                        Convert.ToInt16(colorArray[1])'                                                                        Convert.ToInt16(colorArray[2]));                  theme.PanelHeadingFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                    (float)                                                    Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                      CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "FormHeader":                  colorArray = attr.Attributes.GetNamedItem("forecolor").Value.Split(''');                  theme.FormHeaderForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                             Convert.ToInt16(colorArray[1])'                                                             Convert.ToInt16(colorArray[2]));                  theme.FormHeaderFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                  (float)                                                  Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                    CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "GridView":                  colorArray = attr.Attributes.GetNamedItem("defaultbackcolor").Value.Split(''');                  theme.DefaultBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("selectionbackcolor").Value.Split(''');                  theme.SelectionBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                            Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowbackcolor").Value.Split(''');                  theme.AlternatingRowBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowforecolor").Value.Split(''');                  theme.AlternatingRowForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedbackcolor").Value.Split(''');                  theme.ChangedBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedforecolor").Value.Split(''');                  theme.ChangedForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorbackcolor").Value.Split(''');                  theme.FixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorforecolor").Value.Split(''');                  theme.FixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorbackcolor").Value.Split(''');                  theme.NonFixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorforecolor").Value.Split(''');                  theme.NonFixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplacebackcolor").Value.Split(''');                  theme.FindReplaceBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplaceforecolor").Value.Split(''');                  theme.FindReplaceForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  break;                  case "Button":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.ButtonBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.ButtonForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  theme.ButtonFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                              (float)                                              Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;              }
Magic Number,MPTagThat.Core,ThemeManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\ThemeManager\ThemeManager.cs,LoadTheme,The following statement contains a magic number: switch (attr.Name)              {                case "Label":                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.LabelForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                        Convert.ToInt16(colorArray[2]));                  theme.LabelFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                             (float)                                             Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                               CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "PanelHeading":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.PanelHeadingBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("directionctrlcolor").Value.Split(''');                  theme.PanelHeadingDirectionCtrlColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                        Convert.ToInt16(colorArray[1])'                                                                        Convert.ToInt16(colorArray[2]));                  theme.PanelHeadingFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                    (float)                                                    Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                      CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "FormHeader":                  colorArray = attr.Attributes.GetNamedItem("forecolor").Value.Split(''');                  theme.FormHeaderForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                             Convert.ToInt16(colorArray[1])'                                                             Convert.ToInt16(colorArray[2]));                  theme.FormHeaderFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                  (float)                                                  Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                    CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "GridView":                  colorArray = attr.Attributes.GetNamedItem("defaultbackcolor").Value.Split(''');                  theme.DefaultBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("selectionbackcolor").Value.Split(''');                  theme.SelectionBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                            Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowbackcolor").Value.Split(''');                  theme.AlternatingRowBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowforecolor").Value.Split(''');                  theme.AlternatingRowForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedbackcolor").Value.Split(''');                  theme.ChangedBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedforecolor").Value.Split(''');                  theme.ChangedForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorbackcolor").Value.Split(''');                  theme.FixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorforecolor").Value.Split(''');                  theme.FixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorbackcolor").Value.Split(''');                  theme.NonFixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorforecolor").Value.Split(''');                  theme.NonFixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplacebackcolor").Value.Split(''');                  theme.FindReplaceBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplaceforecolor").Value.Split(''');                  theme.FindReplaceForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  break;                  case "Button":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.ButtonBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.ButtonForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  theme.ButtonFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                              (float)                                              Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;              }
Magic Number,MPTagThat.Core,ThemeManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\ThemeManager\ThemeManager.cs,LoadTheme,The following statement contains a magic number: switch (attr.Name)              {                case "Label":                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.LabelForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                        Convert.ToInt16(colorArray[2]));                  theme.LabelFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                             (float)                                             Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                               CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "PanelHeading":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.PanelHeadingBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("directionctrlcolor").Value.Split(''');                  theme.PanelHeadingDirectionCtrlColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                        Convert.ToInt16(colorArray[1])'                                                                        Convert.ToInt16(colorArray[2]));                  theme.PanelHeadingFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                    (float)                                                    Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                      CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "FormHeader":                  colorArray = attr.Attributes.GetNamedItem("forecolor").Value.Split(''');                  theme.FormHeaderForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                             Convert.ToInt16(colorArray[1])'                                                             Convert.ToInt16(colorArray[2]));                  theme.FormHeaderFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                  (float)                                                  Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                    CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "GridView":                  colorArray = attr.Attributes.GetNamedItem("defaultbackcolor").Value.Split(''');                  theme.DefaultBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("selectionbackcolor").Value.Split(''');                  theme.SelectionBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                            Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowbackcolor").Value.Split(''');                  theme.AlternatingRowBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowforecolor").Value.Split(''');                  theme.AlternatingRowForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedbackcolor").Value.Split(''');                  theme.ChangedBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedforecolor").Value.Split(''');                  theme.ChangedForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorbackcolor").Value.Split(''');                  theme.FixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorforecolor").Value.Split(''');                  theme.FixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorbackcolor").Value.Split(''');                  theme.NonFixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorforecolor").Value.Split(''');                  theme.NonFixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplacebackcolor").Value.Split(''');                  theme.FindReplaceBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplaceforecolor").Value.Split(''');                  theme.FindReplaceForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  break;                  case "Button":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.ButtonBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.ButtonForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  theme.ButtonFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                              (float)                                              Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;              }
Magic Number,MPTagThat.Core,ThemeManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\ThemeManager\ThemeManager.cs,LoadTheme,The following statement contains a magic number: switch (attr.Name)              {                case "Label":                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.LabelForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                        Convert.ToInt16(colorArray[2]));                  theme.LabelFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                             (float)                                             Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                               CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "PanelHeading":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.PanelHeadingBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("directionctrlcolor").Value.Split(''');                  theme.PanelHeadingDirectionCtrlColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                        Convert.ToInt16(colorArray[1])'                                                                        Convert.ToInt16(colorArray[2]));                  theme.PanelHeadingFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                    (float)                                                    Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                      CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "FormHeader":                  colorArray = attr.Attributes.GetNamedItem("forecolor").Value.Split(''');                  theme.FormHeaderForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                             Convert.ToInt16(colorArray[1])'                                                             Convert.ToInt16(colorArray[2]));                  theme.FormHeaderFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                  (float)                                                  Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                    CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "GridView":                  colorArray = attr.Attributes.GetNamedItem("defaultbackcolor").Value.Split(''');                  theme.DefaultBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("selectionbackcolor").Value.Split(''');                  theme.SelectionBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                            Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowbackcolor").Value.Split(''');                  theme.AlternatingRowBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowforecolor").Value.Split(''');                  theme.AlternatingRowForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedbackcolor").Value.Split(''');                  theme.ChangedBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedforecolor").Value.Split(''');                  theme.ChangedForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorbackcolor").Value.Split(''');                  theme.FixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorforecolor").Value.Split(''');                  theme.FixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorbackcolor").Value.Split(''');                  theme.NonFixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorforecolor").Value.Split(''');                  theme.NonFixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplacebackcolor").Value.Split(''');                  theme.FindReplaceBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplaceforecolor").Value.Split(''');                  theme.FindReplaceForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  break;                  case "Button":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.ButtonBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.ButtonForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  theme.ButtonFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                              (float)                                              Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;              }
Magic Number,MPTagThat.Core,ThemeManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\ThemeManager\ThemeManager.cs,LoadTheme,The following statement contains a magic number: switch (attr.Name)              {                case "Label":                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.LabelForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                        Convert.ToInt16(colorArray[2]));                  theme.LabelFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                             (float)                                             Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                               CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "PanelHeading":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.PanelHeadingBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("directionctrlcolor").Value.Split(''');                  theme.PanelHeadingDirectionCtrlColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                        Convert.ToInt16(colorArray[1])'                                                                        Convert.ToInt16(colorArray[2]));                  theme.PanelHeadingFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                    (float)                                                    Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                      CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "FormHeader":                  colorArray = attr.Attributes.GetNamedItem("forecolor").Value.Split(''');                  theme.FormHeaderForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                             Convert.ToInt16(colorArray[1])'                                                             Convert.ToInt16(colorArray[2]));                  theme.FormHeaderFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                  (float)                                                  Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                    CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "GridView":                  colorArray = attr.Attributes.GetNamedItem("defaultbackcolor").Value.Split(''');                  theme.DefaultBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("selectionbackcolor").Value.Split(''');                  theme.SelectionBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                            Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowbackcolor").Value.Split(''');                  theme.AlternatingRowBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowforecolor").Value.Split(''');                  theme.AlternatingRowForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedbackcolor").Value.Split(''');                  theme.ChangedBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedforecolor").Value.Split(''');                  theme.ChangedForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorbackcolor").Value.Split(''');                  theme.FixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorforecolor").Value.Split(''');                  theme.FixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorbackcolor").Value.Split(''');                  theme.NonFixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorforecolor").Value.Split(''');                  theme.NonFixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplacebackcolor").Value.Split(''');                  theme.FindReplaceBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplaceforecolor").Value.Split(''');                  theme.FindReplaceForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  break;                  case "Button":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.ButtonBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.ButtonForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  theme.ButtonFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                              (float)                                              Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;              }
Magic Number,MPTagThat.Core,ThemeManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\ThemeManager\ThemeManager.cs,LoadTheme,The following statement contains a magic number: switch (attr.Name)              {                case "Label":                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.LabelForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                        Convert.ToInt16(colorArray[2]));                  theme.LabelFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                             (float)                                             Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                               CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "PanelHeading":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.PanelHeadingBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("directionctrlcolor").Value.Split(''');                  theme.PanelHeadingDirectionCtrlColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                        Convert.ToInt16(colorArray[1])'                                                                        Convert.ToInt16(colorArray[2]));                  theme.PanelHeadingFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                    (float)                                                    Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                      CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "FormHeader":                  colorArray = attr.Attributes.GetNamedItem("forecolor").Value.Split(''');                  theme.FormHeaderForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                             Convert.ToInt16(colorArray[1])'                                                             Convert.ToInt16(colorArray[2]));                  theme.FormHeaderFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                  (float)                                                  Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                    CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "GridView":                  colorArray = attr.Attributes.GetNamedItem("defaultbackcolor").Value.Split(''');                  theme.DefaultBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("selectionbackcolor").Value.Split(''');                  theme.SelectionBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                            Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowbackcolor").Value.Split(''');                  theme.AlternatingRowBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowforecolor").Value.Split(''');                  theme.AlternatingRowForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedbackcolor").Value.Split(''');                  theme.ChangedBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedforecolor").Value.Split(''');                  theme.ChangedForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorbackcolor").Value.Split(''');                  theme.FixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorforecolor").Value.Split(''');                  theme.FixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorbackcolor").Value.Split(''');                  theme.NonFixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorforecolor").Value.Split(''');                  theme.NonFixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplacebackcolor").Value.Split(''');                  theme.FindReplaceBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplaceforecolor").Value.Split(''');                  theme.FindReplaceForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  break;                  case "Button":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.ButtonBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.ButtonForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  theme.ButtonFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                              (float)                                              Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;              }
Magic Number,MPTagThat.Core,ThemeManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\ThemeManager\ThemeManager.cs,LoadTheme,The following statement contains a magic number: switch (attr.Name)              {                case "Label":                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.LabelForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                        Convert.ToInt16(colorArray[2]));                  theme.LabelFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                             (float)                                             Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                               CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "PanelHeading":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.PanelHeadingBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("directionctrlcolor").Value.Split(''');                  theme.PanelHeadingDirectionCtrlColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                        Convert.ToInt16(colorArray[1])'                                                                        Convert.ToInt16(colorArray[2]));                  theme.PanelHeadingFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                    (float)                                                    Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                      CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "FormHeader":                  colorArray = attr.Attributes.GetNamedItem("forecolor").Value.Split(''');                  theme.FormHeaderForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                             Convert.ToInt16(colorArray[1])'                                                             Convert.ToInt16(colorArray[2]));                  theme.FormHeaderFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                  (float)                                                  Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                    CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "GridView":                  colorArray = attr.Attributes.GetNamedItem("defaultbackcolor").Value.Split(''');                  theme.DefaultBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("selectionbackcolor").Value.Split(''');                  theme.SelectionBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                            Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowbackcolor").Value.Split(''');                  theme.AlternatingRowBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowforecolor").Value.Split(''');                  theme.AlternatingRowForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedbackcolor").Value.Split(''');                  theme.ChangedBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedforecolor").Value.Split(''');                  theme.ChangedForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorbackcolor").Value.Split(''');                  theme.FixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorforecolor").Value.Split(''');                  theme.FixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorbackcolor").Value.Split(''');                  theme.NonFixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorforecolor").Value.Split(''');                  theme.NonFixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplacebackcolor").Value.Split(''');                  theme.FindReplaceBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplaceforecolor").Value.Split(''');                  theme.FindReplaceForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  break;                  case "Button":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.ButtonBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.ButtonForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  theme.ButtonFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                              (float)                                              Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;              }
Magic Number,MPTagThat.Core,ThemeManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\ThemeManager\ThemeManager.cs,LoadTheme,The following statement contains a magic number: switch (attr.Name)              {                case "Label":                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.LabelForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                        Convert.ToInt16(colorArray[2]));                  theme.LabelFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                             (float)                                             Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                               CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "PanelHeading":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.PanelHeadingBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("directionctrlcolor").Value.Split(''');                  theme.PanelHeadingDirectionCtrlColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                        Convert.ToInt16(colorArray[1])'                                                                        Convert.ToInt16(colorArray[2]));                  theme.PanelHeadingFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                    (float)                                                    Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                      CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "FormHeader":                  colorArray = attr.Attributes.GetNamedItem("forecolor").Value.Split(''');                  theme.FormHeaderForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                             Convert.ToInt16(colorArray[1])'                                                             Convert.ToInt16(colorArray[2]));                  theme.FormHeaderFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                  (float)                                                  Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                    CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "GridView":                  colorArray = attr.Attributes.GetNamedItem("defaultbackcolor").Value.Split(''');                  theme.DefaultBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("selectionbackcolor").Value.Split(''');                  theme.SelectionBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                            Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowbackcolor").Value.Split(''');                  theme.AlternatingRowBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowforecolor").Value.Split(''');                  theme.AlternatingRowForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedbackcolor").Value.Split(''');                  theme.ChangedBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedforecolor").Value.Split(''');                  theme.ChangedForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorbackcolor").Value.Split(''');                  theme.FixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorforecolor").Value.Split(''');                  theme.FixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorbackcolor").Value.Split(''');                  theme.NonFixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorforecolor").Value.Split(''');                  theme.NonFixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplacebackcolor").Value.Split(''');                  theme.FindReplaceBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplaceforecolor").Value.Split(''');                  theme.FindReplaceForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  break;                  case "Button":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.ButtonBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.ButtonForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  theme.ButtonFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                              (float)                                              Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;              }
Magic Number,MPTagThat.Core,ThemeManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\ThemeManager\ThemeManager.cs,LoadTheme,The following statement contains a magic number: switch (attr.Name)              {                case "Label":                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.LabelForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                        Convert.ToInt16(colorArray[2]));                  theme.LabelFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                             (float)                                             Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                               CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "PanelHeading":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.PanelHeadingBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("directionctrlcolor").Value.Split(''');                  theme.PanelHeadingDirectionCtrlColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                        Convert.ToInt16(colorArray[1])'                                                                        Convert.ToInt16(colorArray[2]));                  theme.PanelHeadingFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                    (float)                                                    Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                      CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "FormHeader":                  colorArray = attr.Attributes.GetNamedItem("forecolor").Value.Split(''');                  theme.FormHeaderForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                             Convert.ToInt16(colorArray[1])'                                                             Convert.ToInt16(colorArray[2]));                  theme.FormHeaderFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                  (float)                                                  Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                    CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "GridView":                  colorArray = attr.Attributes.GetNamedItem("defaultbackcolor").Value.Split(''');                  theme.DefaultBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("selectionbackcolor").Value.Split(''');                  theme.SelectionBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                            Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowbackcolor").Value.Split(''');                  theme.AlternatingRowBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowforecolor").Value.Split(''');                  theme.AlternatingRowForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedbackcolor").Value.Split(''');                  theme.ChangedBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedforecolor").Value.Split(''');                  theme.ChangedForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorbackcolor").Value.Split(''');                  theme.FixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorforecolor").Value.Split(''');                  theme.FixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorbackcolor").Value.Split(''');                  theme.NonFixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorforecolor").Value.Split(''');                  theme.NonFixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplacebackcolor").Value.Split(''');                  theme.FindReplaceBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplaceforecolor").Value.Split(''');                  theme.FindReplaceForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  break;                  case "Button":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.ButtonBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.ButtonForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  theme.ButtonFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                              (float)                                              Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;              }
Magic Number,MPTagThat.Core,ThemeManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\ThemeManager\ThemeManager.cs,LoadTheme,The following statement contains a magic number: switch (attr.Name)              {                case "Label":                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.LabelForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                        Convert.ToInt16(colorArray[2]));                  theme.LabelFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                             (float)                                             Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                               CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "PanelHeading":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.PanelHeadingBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("directionctrlcolor").Value.Split(''');                  theme.PanelHeadingDirectionCtrlColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                        Convert.ToInt16(colorArray[1])'                                                                        Convert.ToInt16(colorArray[2]));                  theme.PanelHeadingFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                    (float)                                                    Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                      CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "FormHeader":                  colorArray = attr.Attributes.GetNamedItem("forecolor").Value.Split(''');                  theme.FormHeaderForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                             Convert.ToInt16(colorArray[1])'                                                             Convert.ToInt16(colorArray[2]));                  theme.FormHeaderFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                  (float)                                                  Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                    CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "GridView":                  colorArray = attr.Attributes.GetNamedItem("defaultbackcolor").Value.Split(''');                  theme.DefaultBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("selectionbackcolor").Value.Split(''');                  theme.SelectionBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                            Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowbackcolor").Value.Split(''');                  theme.AlternatingRowBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowforecolor").Value.Split(''');                  theme.AlternatingRowForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedbackcolor").Value.Split(''');                  theme.ChangedBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedforecolor").Value.Split(''');                  theme.ChangedForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorbackcolor").Value.Split(''');                  theme.FixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorforecolor").Value.Split(''');                  theme.FixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorbackcolor").Value.Split(''');                  theme.NonFixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorforecolor").Value.Split(''');                  theme.NonFixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplacebackcolor").Value.Split(''');                  theme.FindReplaceBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplaceforecolor").Value.Split(''');                  theme.FindReplaceForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  break;                  case "Button":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.ButtonBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.ButtonForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  theme.ButtonFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                              (float)                                              Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;              }
Magic Number,MPTagThat.Core,ThemeManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\ThemeManager\ThemeManager.cs,LoadTheme,The following statement contains a magic number: switch (attr.Name)              {                case "Label":                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.LabelForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                        Convert.ToInt16(colorArray[2]));                  theme.LabelFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                             (float)                                             Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                               CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "PanelHeading":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.PanelHeadingBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("directionctrlcolor").Value.Split(''');                  theme.PanelHeadingDirectionCtrlColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                        Convert.ToInt16(colorArray[1])'                                                                        Convert.ToInt16(colorArray[2]));                  theme.PanelHeadingFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                    (float)                                                    Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                      CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "FormHeader":                  colorArray = attr.Attributes.GetNamedItem("forecolor").Value.Split(''');                  theme.FormHeaderForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                             Convert.ToInt16(colorArray[1])'                                                             Convert.ToInt16(colorArray[2]));                  theme.FormHeaderFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                  (float)                                                  Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                    CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "GridView":                  colorArray = attr.Attributes.GetNamedItem("defaultbackcolor").Value.Split(''');                  theme.DefaultBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("selectionbackcolor").Value.Split(''');                  theme.SelectionBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                            Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowbackcolor").Value.Split(''');                  theme.AlternatingRowBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowforecolor").Value.Split(''');                  theme.AlternatingRowForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedbackcolor").Value.Split(''');                  theme.ChangedBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedforecolor").Value.Split(''');                  theme.ChangedForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorbackcolor").Value.Split(''');                  theme.FixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorforecolor").Value.Split(''');                  theme.FixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorbackcolor").Value.Split(''');                  theme.NonFixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorforecolor").Value.Split(''');                  theme.NonFixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplacebackcolor").Value.Split(''');                  theme.FindReplaceBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplaceforecolor").Value.Split(''');                  theme.FindReplaceForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  break;                  case "Button":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.ButtonBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.ButtonForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  theme.ButtonFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                              (float)                                              Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;              }
Magic Number,MPTagThat.Core,ThemeManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\ThemeManager\ThemeManager.cs,LoadTheme,The following statement contains a magic number: switch (attr.Name)              {                case "Label":                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.LabelForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                        Convert.ToInt16(colorArray[2]));                  theme.LabelFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                             (float)                                             Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                               CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "PanelHeading":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.PanelHeadingBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("directionctrlcolor").Value.Split(''');                  theme.PanelHeadingDirectionCtrlColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                        Convert.ToInt16(colorArray[1])'                                                                        Convert.ToInt16(colorArray[2]));                  theme.PanelHeadingFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                    (float)                                                    Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                      CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "FormHeader":                  colorArray = attr.Attributes.GetNamedItem("forecolor").Value.Split(''');                  theme.FormHeaderForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                             Convert.ToInt16(colorArray[1])'                                                             Convert.ToInt16(colorArray[2]));                  theme.FormHeaderFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                  (float)                                                  Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                    CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "GridView":                  colorArray = attr.Attributes.GetNamedItem("defaultbackcolor").Value.Split(''');                  theme.DefaultBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("selectionbackcolor").Value.Split(''');                  theme.SelectionBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                            Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowbackcolor").Value.Split(''');                  theme.AlternatingRowBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowforecolor").Value.Split(''');                  theme.AlternatingRowForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedbackcolor").Value.Split(''');                  theme.ChangedBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedforecolor").Value.Split(''');                  theme.ChangedForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorbackcolor").Value.Split(''');                  theme.FixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorforecolor").Value.Split(''');                  theme.FixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorbackcolor").Value.Split(''');                  theme.NonFixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorforecolor").Value.Split(''');                  theme.NonFixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplacebackcolor").Value.Split(''');                  theme.FindReplaceBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplaceforecolor").Value.Split(''');                  theme.FindReplaceForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  break;                  case "Button":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.ButtonBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.ButtonForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  theme.ButtonFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                              (float)                                              Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;              }
Magic Number,MPTagThat.Core,ThemeManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\ThemeManager\ThemeManager.cs,LoadTheme,The following statement contains a magic number: switch (attr.Name)              {                case "Label":                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.LabelForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                        Convert.ToInt16(colorArray[2]));                  theme.LabelFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                             (float)                                             Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                               CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "PanelHeading":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.PanelHeadingBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("directionctrlcolor").Value.Split(''');                  theme.PanelHeadingDirectionCtrlColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                        Convert.ToInt16(colorArray[1])'                                                                        Convert.ToInt16(colorArray[2]));                  theme.PanelHeadingFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                    (float)                                                    Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                      CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "FormHeader":                  colorArray = attr.Attributes.GetNamedItem("forecolor").Value.Split(''');                  theme.FormHeaderForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                             Convert.ToInt16(colorArray[1])'                                                             Convert.ToInt16(colorArray[2]));                  theme.FormHeaderFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                  (float)                                                  Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                    CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "GridView":                  colorArray = attr.Attributes.GetNamedItem("defaultbackcolor").Value.Split(''');                  theme.DefaultBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("selectionbackcolor").Value.Split(''');                  theme.SelectionBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                            Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowbackcolor").Value.Split(''');                  theme.AlternatingRowBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowforecolor").Value.Split(''');                  theme.AlternatingRowForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedbackcolor").Value.Split(''');                  theme.ChangedBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedforecolor").Value.Split(''');                  theme.ChangedForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorbackcolor").Value.Split(''');                  theme.FixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorforecolor").Value.Split(''');                  theme.FixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorbackcolor").Value.Split(''');                  theme.NonFixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorforecolor").Value.Split(''');                  theme.NonFixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplacebackcolor").Value.Split(''');                  theme.FindReplaceBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplaceforecolor").Value.Split(''');                  theme.FindReplaceForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  break;                  case "Button":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.ButtonBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.ButtonForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  theme.ButtonFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                              (float)                                              Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;              }
Magic Number,MPTagThat.Core,ThemeManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\ThemeManager\ThemeManager.cs,LoadTheme,The following statement contains a magic number: switch (attr.Name)              {                case "Label":                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.LabelForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                        Convert.ToInt16(colorArray[2]));                  theme.LabelFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                             (float)                                             Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                               CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "PanelHeading":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.PanelHeadingBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("directionctrlcolor").Value.Split(''');                  theme.PanelHeadingDirectionCtrlColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                        Convert.ToInt16(colorArray[1])'                                                                        Convert.ToInt16(colorArray[2]));                  theme.PanelHeadingFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                    (float)                                                    Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                      CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "FormHeader":                  colorArray = attr.Attributes.GetNamedItem("forecolor").Value.Split(''');                  theme.FormHeaderForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                             Convert.ToInt16(colorArray[1])'                                                             Convert.ToInt16(colorArray[2]));                  theme.FormHeaderFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                  (float)                                                  Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                    CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "GridView":                  colorArray = attr.Attributes.GetNamedItem("defaultbackcolor").Value.Split(''');                  theme.DefaultBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("selectionbackcolor").Value.Split(''');                  theme.SelectionBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                            Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowbackcolor").Value.Split(''');                  theme.AlternatingRowBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowforecolor").Value.Split(''');                  theme.AlternatingRowForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedbackcolor").Value.Split(''');                  theme.ChangedBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedforecolor").Value.Split(''');                  theme.ChangedForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorbackcolor").Value.Split(''');                  theme.FixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorforecolor").Value.Split(''');                  theme.FixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorbackcolor").Value.Split(''');                  theme.NonFixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorforecolor").Value.Split(''');                  theme.NonFixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplacebackcolor").Value.Split(''');                  theme.FindReplaceBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplaceforecolor").Value.Split(''');                  theme.FindReplaceForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  break;                  case "Button":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.ButtonBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.ButtonForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  theme.ButtonFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                              (float)                                              Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;              }
Magic Number,MPTagThat.Core,ThemeManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\ThemeManager\ThemeManager.cs,LoadTheme,The following statement contains a magic number: switch (attr.Name)              {                case "Label":                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.LabelForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                        Convert.ToInt16(colorArray[2]));                  theme.LabelFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                             (float)                                             Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                               CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "PanelHeading":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.PanelHeadingBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("directionctrlcolor").Value.Split(''');                  theme.PanelHeadingDirectionCtrlColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                        Convert.ToInt16(colorArray[1])'                                                                        Convert.ToInt16(colorArray[2]));                  theme.PanelHeadingFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                    (float)                                                    Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                      CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "FormHeader":                  colorArray = attr.Attributes.GetNamedItem("forecolor").Value.Split(''');                  theme.FormHeaderForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                             Convert.ToInt16(colorArray[1])'                                                             Convert.ToInt16(colorArray[2]));                  theme.FormHeaderFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                  (float)                                                  Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                    CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "GridView":                  colorArray = attr.Attributes.GetNamedItem("defaultbackcolor").Value.Split(''');                  theme.DefaultBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("selectionbackcolor").Value.Split(''');                  theme.SelectionBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                            Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowbackcolor").Value.Split(''');                  theme.AlternatingRowBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowforecolor").Value.Split(''');                  theme.AlternatingRowForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedbackcolor").Value.Split(''');                  theme.ChangedBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedforecolor").Value.Split(''');                  theme.ChangedForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorbackcolor").Value.Split(''');                  theme.FixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorforecolor").Value.Split(''');                  theme.FixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorbackcolor").Value.Split(''');                  theme.NonFixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorforecolor").Value.Split(''');                  theme.NonFixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplacebackcolor").Value.Split(''');                  theme.FindReplaceBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplaceforecolor").Value.Split(''');                  theme.FindReplaceForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  break;                  case "Button":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.ButtonBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.ButtonForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  theme.ButtonFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                              (float)                                              Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;              }
Magic Number,MPTagThat.Core,ThemeManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\ThemeManager\ThemeManager.cs,LoadTheme,The following statement contains a magic number: switch (attr.Name)              {                case "Label":                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.LabelForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                        Convert.ToInt16(colorArray[2]));                  theme.LabelFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                             (float)                                             Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                               CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "PanelHeading":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.PanelHeadingBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("directionctrlcolor").Value.Split(''');                  theme.PanelHeadingDirectionCtrlColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                        Convert.ToInt16(colorArray[1])'                                                                        Convert.ToInt16(colorArray[2]));                  theme.PanelHeadingFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                    (float)                                                    Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                      CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "FormHeader":                  colorArray = attr.Attributes.GetNamedItem("forecolor").Value.Split(''');                  theme.FormHeaderForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                             Convert.ToInt16(colorArray[1])'                                                             Convert.ToInt16(colorArray[2]));                  theme.FormHeaderFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                  (float)                                                  Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                    CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "GridView":                  colorArray = attr.Attributes.GetNamedItem("defaultbackcolor").Value.Split(''');                  theme.DefaultBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("selectionbackcolor").Value.Split(''');                  theme.SelectionBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                            Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowbackcolor").Value.Split(''');                  theme.AlternatingRowBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowforecolor").Value.Split(''');                  theme.AlternatingRowForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedbackcolor").Value.Split(''');                  theme.ChangedBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedforecolor").Value.Split(''');                  theme.ChangedForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorbackcolor").Value.Split(''');                  theme.FixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorforecolor").Value.Split(''');                  theme.FixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorbackcolor").Value.Split(''');                  theme.NonFixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorforecolor").Value.Split(''');                  theme.NonFixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplacebackcolor").Value.Split(''');                  theme.FindReplaceBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplaceforecolor").Value.Split(''');                  theme.FindReplaceForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  break;                  case "Button":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.ButtonBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.ButtonForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  theme.ButtonFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                              (float)                                              Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;              }
Magic Number,MPTagThat.Core,ThemeManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\ThemeManager\ThemeManager.cs,LoadTheme,The following statement contains a magic number: switch (attr.Name)              {                case "Label":                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.LabelForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                        Convert.ToInt16(colorArray[2]));                  theme.LabelFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                             (float)                                             Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                               CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "PanelHeading":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.PanelHeadingBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("directionctrlcolor").Value.Split(''');                  theme.PanelHeadingDirectionCtrlColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                        Convert.ToInt16(colorArray[1])'                                                                        Convert.ToInt16(colorArray[2]));                  theme.PanelHeadingFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                    (float)                                                    Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                      CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "FormHeader":                  colorArray = attr.Attributes.GetNamedItem("forecolor").Value.Split(''');                  theme.FormHeaderForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                             Convert.ToInt16(colorArray[1])'                                                             Convert.ToInt16(colorArray[2]));                  theme.FormHeaderFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                  (float)                                                  Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                    CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "GridView":                  colorArray = attr.Attributes.GetNamedItem("defaultbackcolor").Value.Split(''');                  theme.DefaultBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("selectionbackcolor").Value.Split(''');                  theme.SelectionBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                            Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowbackcolor").Value.Split(''');                  theme.AlternatingRowBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowforecolor").Value.Split(''');                  theme.AlternatingRowForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedbackcolor").Value.Split(''');                  theme.ChangedBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedforecolor").Value.Split(''');                  theme.ChangedForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorbackcolor").Value.Split(''');                  theme.FixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorforecolor").Value.Split(''');                  theme.FixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorbackcolor").Value.Split(''');                  theme.NonFixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorforecolor").Value.Split(''');                  theme.NonFixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplacebackcolor").Value.Split(''');                  theme.FindReplaceBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplaceforecolor").Value.Split(''');                  theme.FindReplaceForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  break;                  case "Button":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.ButtonBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.ButtonForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  theme.ButtonFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                              (float)                                              Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;              }
Magic Number,MPTagThat.Core,ThemeManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\ThemeManager\ThemeManager.cs,LoadTheme,The following statement contains a magic number: switch (attr.Name)              {                case "Label":                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.LabelForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                        Convert.ToInt16(colorArray[2]));                  theme.LabelFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                             (float)                                             Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                               CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "PanelHeading":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.PanelHeadingBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("directionctrlcolor").Value.Split(''');                  theme.PanelHeadingDirectionCtrlColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                        Convert.ToInt16(colorArray[1])'                                                                        Convert.ToInt16(colorArray[2]));                  theme.PanelHeadingFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                    (float)                                                    Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                      CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "FormHeader":                  colorArray = attr.Attributes.GetNamedItem("forecolor").Value.Split(''');                  theme.FormHeaderForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                             Convert.ToInt16(colorArray[1])'                                                             Convert.ToInt16(colorArray[2]));                  theme.FormHeaderFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                  (float)                                                  Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                    CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "GridView":                  colorArray = attr.Attributes.GetNamedItem("defaultbackcolor").Value.Split(''');                  theme.DefaultBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("selectionbackcolor").Value.Split(''');                  theme.SelectionBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                            Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowbackcolor").Value.Split(''');                  theme.AlternatingRowBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowforecolor").Value.Split(''');                  theme.AlternatingRowForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedbackcolor").Value.Split(''');                  theme.ChangedBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedforecolor").Value.Split(''');                  theme.ChangedForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorbackcolor").Value.Split(''');                  theme.FixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorforecolor").Value.Split(''');                  theme.FixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorbackcolor").Value.Split(''');                  theme.NonFixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorforecolor").Value.Split(''');                  theme.NonFixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplacebackcolor").Value.Split(''');                  theme.FindReplaceBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplaceforecolor").Value.Split(''');                  theme.FindReplaceForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  break;                  case "Button":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.ButtonBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.ButtonForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  theme.ButtonFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                              (float)                                              Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;              }
Magic Number,MPTagThat.Core,TrackData,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\TrackData.cs,TrackData,The following statement contains a magic number: ID3Version = 3;
Magic Number,MPTagThat.Core,MP3Val,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\MP3Val.cs,ValidateMp3File,The following statement contains a magic number: StdOutList[StdOutList.Count - 2].Contains(@"FIXED:")
Magic Number,MPTagThat.Core,MP3Val,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\MP3Val.cs,ValidateMp3File,The following statement contains a magic number: StdOutList.Count > 2
Magic Number,MPTagThat.Core,MP3Val,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\MP3Val.cs,FixMp3File,The following statement contains a magic number: StdOutList[StdOutList.Count - 2].Contains(@"FIXED:")
Magic Number,MPTagThat.Core,MP3Val,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\MP3Val.cs,FixMp3File,The following statement contains a magic number: StdOutList.Count > 2
Magic Number,MPTagThat.Core,MP3Val,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\MP3Val.cs,ValidateOrFixFile,The following statement contains a magic number: return ExecuteProcReturnStdOut(parm' 3000);
Magic Number,MPTagThat.Core,Util,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\Util.cs,CheckParmWithLengthIndicator,The following statement contains a magic number: char c = s1[3];
Magic Number,MPTagThat.Core,Util,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\Util.cs,CheckParmWithLengthIndicator,The following statement contains a magic number: s1.Length > 5
Magic Number,MPTagThat.Core,Util,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\Util.cs,Drive2BassID,The following statement contains a magic number: i < 25
Magic Number,MPTagThat.Core,Util,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\Util.cs,FormatID3Tag,The following statement contains a magic number: Options.MainSettings.RemoveID3V1 || Options.MainSettings.ID3Version == 2
Magic Number,MPTagThat.Core,Util,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\Util.cs,ReadFullStream,The following statement contains a magic number: initialLength = 32768;
Magic Number,MPTagThat.Core,Util,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\Util.cs,ReadFullStream,The following statement contains a magic number: byte[] newBuffer = new byte[buffer.Length * 2];
Magic Number,MPTagThat.Core,Util,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\Util.cs,ReplaceStringWithLengthIndicator,The following statement contains a magic number: int strLength = Convert.ToInt32(s1.Substring(3' 1));
Magic Number,MPTagThat.Core,Util,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\Util.cs,DurationToSeconds,The following statement contains a magic number: duration += Convert.ToInt32(durationString) * (int)Math.Pow(60.0' i);
Magic Number,MPTagThat.Core,Util,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\Util.cs,SecondsToHMSString,The following statement contains a magic number: int hh = lSeconds / 3600;
Magic Number,MPTagThat.Core,Util,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\Util.cs,SecondsToHMSString,The following statement contains a magic number: lSeconds = lSeconds % 3600;
Magic Number,MPTagThat.Core,Util,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\Util.cs,SecondsToHMSString,The following statement contains a magic number: int mm = lSeconds / 60;
Magic Number,MPTagThat.Core,Util,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\Util.cs,SecondsToHMSString,The following statement contains a magic number: int ss = lSeconds % 60;
Magic Number,MPTagThat.Core,Util,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\Util.cs,GetQualifiedFilename,The following statement contains a magic number: strFileName.Length <= 2
Magic Number,MPTagThat.Core,Util,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\Util.cs,GetQualifiedFilename,The following statement contains a magic number: strFileName = strFileName.Substring(3);
Magic Number,MPTagThat.Core,Util,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\Util.cs,GetQualifiedFilename,The following statement contains a magic number: strBasePath.Length == 2 && strBasePath[1] == ':'
Magic Number,MPTagThat.Core.MusicBrainz,MusicBrainzAlbumInfo,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\MusicBrainz\MusicBrainzAlbumInfo.cs,GetMusicBrainzAlbumById,The following statement contains a magic number: year = year.Substring(0' 4);
Magic Number,MPTagThat.Core.MusicBrainz,MusicBrainzAlbumInfo,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\MusicBrainz\MusicBrainzAlbumInfo.cs,GetMusicBrainzAlbumById,The following statement contains a magic number: year.Length > 4
Magic Number,MPTagThat.Core.MusicBrainz,MusicBrainzTrackInfo,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\MusicBrainz\MusicBrainzTrackInfo.cs,GetFingerPrint,The following statement contains a magic number: List<string> fingerPrint = ExecuteProcReturnStdOut("fpcalc.exe"' fopsParam' 40000);
Magic Number,MPTagThat.Core.MusicBrainz,MusicBrainzTrackInfo,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\MusicBrainz\MusicBrainzTrackInfo.cs,GetFingerPrint,The following statement contains a magic number: duration = Convert.ToInt32(fingerPrint[1].Substring(9));
Magic Number,MPTagThat.Core.MusicBrainz,MusicBrainzTrackInfo,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\MusicBrainz\MusicBrainzTrackInfo.cs,GetFingerPrint,The following statement contains a magic number: return fingerPrint[2].Substring(12);
Magic Number,MPTagThat.Core.MusicBrainz,MusicBrainzTrackInfo,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\MusicBrainz\MusicBrainzTrackInfo.cs,GetFingerPrint,The following statement contains a magic number: return fingerPrint[2].Substring(12);
Magic Number,MPTagThat.Core.MusicBrainz,MusicBrainzTrackInfo,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\MusicBrainz\MusicBrainzTrackInfo.cs,GetFingerPrint,The following statement contains a magic number: fingerPrint.Count == 3
Magic Number,MPTagThat.Core.MusicBrainz,MusicBrainzTrackInfo,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\MusicBrainz\MusicBrainzTrackInfo.cs,ParseMusicBrainzQueryResult,The following statement contains a magic number: track.Duration = Convert.ToInt32(nodes[0].InnerText) / 1000;
Magic Number,MPTagThat.Core.MusicBrainz,MusicBrainzTrackInfo,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\MusicBrainz\MusicBrainzTrackInfo.cs,ParseMusicBrainzQueryResult,The following statement contains a magic number: year = year.Substring(0' 4);
Magic Number,MPTagThat.Core.MusicBrainz,MusicBrainzTrackInfo,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\MusicBrainz\MusicBrainzTrackInfo.cs,ParseMusicBrainzQueryResult,The following statement contains a magic number: year.Length > 4
Magic Number,MPTagThat.Core.AudioEncoder,AudioEncoder,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\AudioEncoder\AudioEncoder.cs,StartEncoding,The following statement contains a magic number: byte[] encBuffer = new byte[60000];
Magic Number,MPTagThat.Core.AudioEncoder,AudioEncoder,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\AudioEncoder\AudioEncoder.cs,StartEncoding,The following statement contains a magic number: double percentComplete = pos / (double)chanLength * 100.0;
Magic Number,MPTagThat.Core.AudioEncoder,AudioEncoder,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\AudioEncoder\AudioEncoder.cs,SetEncoderSettings,The following statement contains a magic number: switch (_encoder)        {          case "mp3":            EncoderLAME encLame = new EncoderLAME(stream);            if (Options.MainSettings.RipLameExpert.Length > 0)            {              encLame.LAME_CustomOptions = Options.MainSettings.RipLameExpert;              encLame.LAME_UseCustomOptionsOnly = true;            }            else            {              if (Options.MainSettings.RipLamePreset == (int)Options.LamePreset.ABR)                encLame.LAME_PresetName = Options.MainSettings.RipLameABRBitRate.ToString();              else                encLame.LAME_PresetName =                  Enum.GetName(typeof (Options.LamePreset)' Options.MainSettings.RipLamePreset).ToLower();            }            encoder = encLame;            break;            case "ogg":            EncoderOGG encOgg = new EncoderOGG(stream);            if (Options.MainSettings.RipOggExpert.Length > 0)            {              encOgg.OGG_CustomOptions = Options.MainSettings.RipOggExpert;              encOgg.OGG_UseCustomOptionsOnly = true;            }            else            {              encOgg.OGG_Quality = Convert.ToInt32(Options.MainSettings.RipOggQuality);            }            encoder = encOgg;            break;            case "flac":            EncoderFLAC encFlac = new EncoderFLAC(stream);            if (Options.MainSettings.RipFlacExpert.Length > 0)            {              encFlac.FLAC_CustomOptions = Options.MainSettings.RipFlacExpert;              encFlac.FLAC_UseCustomOptionsOnly = true;            }            else            {              encFlac.FLAC_CompressionLevel = Options.MainSettings.RipFlacQuality;            }            // put a 1k padding block for Tagging in front            encFlac.FLAC_Padding = 1024;            encoder = encFlac;            break;            case "m4a":            EncoderFAAC encAAC = new EncoderFAAC(stream);              int bitrate =              Convert.ToInt32(Options.MainSettings.RipEncoderAACBitRate.Substring(0'                                                                                  Options.MainSettings.                                                                                    RipEncoderAACBitRate.IndexOf(' ')));            encAAC.FAAC_Bitrate = bitrate;            encAAC.FAAC_Quality = 100;            encAAC.FAAC_UseQualityMode = true;            encAAC.FAAC_WrapMP4 = true;              encoder = encAAC;            break;            case "wav":            EncoderWAV encWav = new EncoderWAV(stream);            encoder = encWav;            break;            case "wma":            EncoderWMA encWma = new EncoderWMA(stream);            string[] sampleFormat = Options.MainSettings.RipEncoderWMASample.Split(''');            string encoderFormat = Options.MainSettings.RipEncoderWMA;            if (encoderFormat == "wmapro" || encoderFormat == "wmalossless")              encWma.WMA_UsePro = true;            else              encWma.WMA_ForceStandard = true;              if (Options.MainSettings.RipEncoderWMACbrVbr == "Vbr")            {              encWma.WMA_UseVBR = true;              encWma.WMA_VBRQuality = Convert.ToInt32(Options.MainSettings.RipEncoderWMABitRate);            }            else              encWma.WMA_Bitrate = Convert.ToInt32(Options.MainSettings.RipEncoderWMABitRate) / 1000;                if (sampleFormat[0] == "24")              encWma.WMA_Use24Bit = true;              encoder = encWma;            break;            case "mpc":            EncoderMPC encMpc = new EncoderMPC(stream);            if (Options.MainSettings.RipEncoderMPCExpert.Length > 0)            {              encMpc.MPC_CustomOptions = Options.MainSettings.RipEncoderMPCExpert;              encMpc.MPC_UseCustomOptionsOnly = true;            }            else            {              encMpc.MPC_Preset =                (EncoderMPC.MPCPreset)Enum.Parse(typeof (EncoderMPC.MPCPreset)' Options.MainSettings.RipEncoderMPCPreset);            }            encoder = encMpc;            break;            case "wv":            EncoderWavPack encWv = new EncoderWavPack(stream);            if (Options.MainSettings.RipEncoderWVExpert.Length > 0)            {              encWv.WV_CustomOptions = Options.MainSettings.RipEncoderWVExpert;              encWv.WV_UseCustomOptionsOnly = true;            }            else            {              if (Options.MainSettings.RipEncoderWVPreset == "-f")                encWv.WV_FastMode = true;              else                encWv.WV_HighQuality = true;            }            encoder = encWv;            break;        }
Magic Number,MPTagThat.Core.AudioEncoder,AudioEncoder,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\AudioEncoder\AudioEncoder.cs,SetEncoderSettings,The following statement contains a magic number: switch (_encoder)        {          case "mp3":            EncoderLAME encLame = new EncoderLAME(stream);            if (Options.MainSettings.RipLameExpert.Length > 0)            {              encLame.LAME_CustomOptions = Options.MainSettings.RipLameExpert;              encLame.LAME_UseCustomOptionsOnly = true;            }            else            {              if (Options.MainSettings.RipLamePreset == (int)Options.LamePreset.ABR)                encLame.LAME_PresetName = Options.MainSettings.RipLameABRBitRate.ToString();              else                encLame.LAME_PresetName =                  Enum.GetName(typeof (Options.LamePreset)' Options.MainSettings.RipLamePreset).ToLower();            }            encoder = encLame;            break;            case "ogg":            EncoderOGG encOgg = new EncoderOGG(stream);            if (Options.MainSettings.RipOggExpert.Length > 0)            {              encOgg.OGG_CustomOptions = Options.MainSettings.RipOggExpert;              encOgg.OGG_UseCustomOptionsOnly = true;            }            else            {              encOgg.OGG_Quality = Convert.ToInt32(Options.MainSettings.RipOggQuality);            }            encoder = encOgg;            break;            case "flac":            EncoderFLAC encFlac = new EncoderFLAC(stream);            if (Options.MainSettings.RipFlacExpert.Length > 0)            {              encFlac.FLAC_CustomOptions = Options.MainSettings.RipFlacExpert;              encFlac.FLAC_UseCustomOptionsOnly = true;            }            else            {              encFlac.FLAC_CompressionLevel = Options.MainSettings.RipFlacQuality;            }            // put a 1k padding block for Tagging in front            encFlac.FLAC_Padding = 1024;            encoder = encFlac;            break;            case "m4a":            EncoderFAAC encAAC = new EncoderFAAC(stream);              int bitrate =              Convert.ToInt32(Options.MainSettings.RipEncoderAACBitRate.Substring(0'                                                                                  Options.MainSettings.                                                                                    RipEncoderAACBitRate.IndexOf(' ')));            encAAC.FAAC_Bitrate = bitrate;            encAAC.FAAC_Quality = 100;            encAAC.FAAC_UseQualityMode = true;            encAAC.FAAC_WrapMP4 = true;              encoder = encAAC;            break;            case "wav":            EncoderWAV encWav = new EncoderWAV(stream);            encoder = encWav;            break;            case "wma":            EncoderWMA encWma = new EncoderWMA(stream);            string[] sampleFormat = Options.MainSettings.RipEncoderWMASample.Split(''');            string encoderFormat = Options.MainSettings.RipEncoderWMA;            if (encoderFormat == "wmapro" || encoderFormat == "wmalossless")              encWma.WMA_UsePro = true;            else              encWma.WMA_ForceStandard = true;              if (Options.MainSettings.RipEncoderWMACbrVbr == "Vbr")            {              encWma.WMA_UseVBR = true;              encWma.WMA_VBRQuality = Convert.ToInt32(Options.MainSettings.RipEncoderWMABitRate);            }            else              encWma.WMA_Bitrate = Convert.ToInt32(Options.MainSettings.RipEncoderWMABitRate) / 1000;                if (sampleFormat[0] == "24")              encWma.WMA_Use24Bit = true;              encoder = encWma;            break;            case "mpc":            EncoderMPC encMpc = new EncoderMPC(stream);            if (Options.MainSettings.RipEncoderMPCExpert.Length > 0)            {              encMpc.MPC_CustomOptions = Options.MainSettings.RipEncoderMPCExpert;              encMpc.MPC_UseCustomOptionsOnly = true;            }            else            {              encMpc.MPC_Preset =                (EncoderMPC.MPCPreset)Enum.Parse(typeof (EncoderMPC.MPCPreset)' Options.MainSettings.RipEncoderMPCPreset);            }            encoder = encMpc;            break;            case "wv":            EncoderWavPack encWv = new EncoderWavPack(stream);            if (Options.MainSettings.RipEncoderWVExpert.Length > 0)            {              encWv.WV_CustomOptions = Options.MainSettings.RipEncoderWVExpert;              encWv.WV_UseCustomOptionsOnly = true;            }            else            {              if (Options.MainSettings.RipEncoderWVPreset == "-f")                encWv.WV_FastMode = true;              else                encWv.WV_HighQuality = true;            }            encoder = encWv;            break;        }
Magic Number,MPTagThat.Core.AudioEncoder,AudioEncoder,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\AudioEncoder\AudioEncoder.cs,SetEncoderSettings,The following statement contains a magic number: switch (_encoder)        {          case "mp3":            EncoderLAME encLame = new EncoderLAME(stream);            if (Options.MainSettings.RipLameExpert.Length > 0)            {              encLame.LAME_CustomOptions = Options.MainSettings.RipLameExpert;              encLame.LAME_UseCustomOptionsOnly = true;            }            else            {              if (Options.MainSettings.RipLamePreset == (int)Options.LamePreset.ABR)                encLame.LAME_PresetName = Options.MainSettings.RipLameABRBitRate.ToString();              else                encLame.LAME_PresetName =                  Enum.GetName(typeof (Options.LamePreset)' Options.MainSettings.RipLamePreset).ToLower();            }            encoder = encLame;            break;            case "ogg":            EncoderOGG encOgg = new EncoderOGG(stream);            if (Options.MainSettings.RipOggExpert.Length > 0)            {              encOgg.OGG_CustomOptions = Options.MainSettings.RipOggExpert;              encOgg.OGG_UseCustomOptionsOnly = true;            }            else            {              encOgg.OGG_Quality = Convert.ToInt32(Options.MainSettings.RipOggQuality);            }            encoder = encOgg;            break;            case "flac":            EncoderFLAC encFlac = new EncoderFLAC(stream);            if (Options.MainSettings.RipFlacExpert.Length > 0)            {              encFlac.FLAC_CustomOptions = Options.MainSettings.RipFlacExpert;              encFlac.FLAC_UseCustomOptionsOnly = true;            }            else            {              encFlac.FLAC_CompressionLevel = Options.MainSettings.RipFlacQuality;            }            // put a 1k padding block for Tagging in front            encFlac.FLAC_Padding = 1024;            encoder = encFlac;            break;            case "m4a":            EncoderFAAC encAAC = new EncoderFAAC(stream);              int bitrate =              Convert.ToInt32(Options.MainSettings.RipEncoderAACBitRate.Substring(0'                                                                                  Options.MainSettings.                                                                                    RipEncoderAACBitRate.IndexOf(' ')));            encAAC.FAAC_Bitrate = bitrate;            encAAC.FAAC_Quality = 100;            encAAC.FAAC_UseQualityMode = true;            encAAC.FAAC_WrapMP4 = true;              encoder = encAAC;            break;            case "wav":            EncoderWAV encWav = new EncoderWAV(stream);            encoder = encWav;            break;            case "wma":            EncoderWMA encWma = new EncoderWMA(stream);            string[] sampleFormat = Options.MainSettings.RipEncoderWMASample.Split(''');            string encoderFormat = Options.MainSettings.RipEncoderWMA;            if (encoderFormat == "wmapro" || encoderFormat == "wmalossless")              encWma.WMA_UsePro = true;            else              encWma.WMA_ForceStandard = true;              if (Options.MainSettings.RipEncoderWMACbrVbr == "Vbr")            {              encWma.WMA_UseVBR = true;              encWma.WMA_VBRQuality = Convert.ToInt32(Options.MainSettings.RipEncoderWMABitRate);            }            else              encWma.WMA_Bitrate = Convert.ToInt32(Options.MainSettings.RipEncoderWMABitRate) / 1000;                if (sampleFormat[0] == "24")              encWma.WMA_Use24Bit = true;              encoder = encWma;            break;            case "mpc":            EncoderMPC encMpc = new EncoderMPC(stream);            if (Options.MainSettings.RipEncoderMPCExpert.Length > 0)            {              encMpc.MPC_CustomOptions = Options.MainSettings.RipEncoderMPCExpert;              encMpc.MPC_UseCustomOptionsOnly = true;            }            else            {              encMpc.MPC_Preset =                (EncoderMPC.MPCPreset)Enum.Parse(typeof (EncoderMPC.MPCPreset)' Options.MainSettings.RipEncoderMPCPreset);            }            encoder = encMpc;            break;            case "wv":            EncoderWavPack encWv = new EncoderWavPack(stream);            if (Options.MainSettings.RipEncoderWVExpert.Length > 0)            {              encWv.WV_CustomOptions = Options.MainSettings.RipEncoderWVExpert;              encWv.WV_UseCustomOptionsOnly = true;            }            else            {              if (Options.MainSettings.RipEncoderWVPreset == "-f")                encWv.WV_FastMode = true;              else                encWv.WV_HighQuality = true;            }            encoder = encWv;            break;        }
Magic Number,MPTagThat.Core.Burning,Burner,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\Burner.cs,GetCurrentMediaStatus,The following statement contains a magic number: List<string> MediaDescription = new List<string>(94);
Magic Number,MPTagThat.Core.Burning,Burner,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\Burner.cs,GetCurrentMediaStatus,The following statement contains a magic number: MediaDescription = DeviceHelper.ExecuteProcReturnStdOut("cdrecord.exe"' cdrParam' 40000);
Magic Number,MPTagThat.Core.Burning,Burner,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\Burner.cs,ParseDescriptionForMediaInfo,The following statement contains a magic number: MediaInfoDescription.Count > 5
Magic Number,MPTagThat.Core.Burning,Burner,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\Burner.cs,GetFeatures,The following statement contains a magic number: List<string> FeatureDescription = new List<string>(85);
Magic Number,MPTagThat.Core.Burning,Burner,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\Burner.cs,GetFeatures,The following statement contains a magic number: FeatureDescription = DeviceHelper.ExecuteProcReturnStdOut("cdrecord.exe"' cdrParam' 20000);
Magic Number,MPTagThat.Core.Burning,Burner,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\Burner.cs,ParseSupportedDriveSpeed,The following statement contains a magic number: FeatureDescription = DeviceHelper.ExecuteProcReturnStdOut("cdrecord.exe"' cdrParam' 20000);
Magic Number,MPTagThat.Core.Burning,Burner,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\Burner.cs,ParseSupportedDriveSpeed,The following statement contains a magic number: string s = checkStr.Substring(start + 4' checkStr.IndexOf("'"' start) - start - 4).Trim();
Magic Number,MPTagThat.Core.Burning,Burner,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\Burner.cs,ParseSupportedDriveSpeed,The following statement contains a magic number: string s = checkStr.Substring(start + 4' checkStr.IndexOf("'"' start) - start - 4).Trim();
Magic Number,MPTagThat.Core.Burning,BurnManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\BurnManager.cs,GetDrives,The following statement contains a magic number: Thread.Sleep(2000);
Magic Number,MPTagThat.Core.Burning,BurnManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\BurnManager.cs,GetTotalMbForPath,The following statement contains a magic number: return (int)(CalcTotalBytesOfDirInfo(pathInfo) / 1000000);
Magic Number,MPTagThat.Core.Burning,BurnManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\BurnManager.cs,BlankDisk,The following statement contains a magic number: DeviceHelper.ExecuteProcReturnStdOut("cdrecord.exe"' MyBlankArgs' 900000);
Magic Number,MPTagThat.Core.Burning,BurnManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\BurnManager.cs,BurnFolder,The following statement contains a magic number: DeviceHelper.ExecuteProcReturnStdOut("mkisofs.exe"' IsoBuildArgs' 1800000);
Magic Number,MPTagThat.Core.Burning,BurnManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\BurnManager.cs,BurnAudioCd,The following statement contains a magic number: List<string> MyCommandOutput = new List<string>(50);
Magic Number,MPTagThat.Core.Burning,BurnManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\BurnManager.cs,BurnAudioCd,The following statement contains a magic number: MyCommandOutput = DeviceHelper.ExecuteProcReturnStdOut("cdrecord.exe"' burnCdArgs' 3600000);
Magic Number,MPTagThat.Core.Burning,BurnManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\BurnManager.cs,BurnCdClone,The following statement contains a magic number: DeviceHelper.ExecuteProcReturnStdOut("readcd.exe"' readCdArgs' 900000);
Magic Number,MPTagThat.Core.Burning,BurnManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\BurnManager.cs,BurnCdClone,The following statement contains a magic number: DeviceHelper.ExecuteProcReturnStdOut("cdrecord.exe"' "dev=" + CurrentDrive.BusId + " -eject"' 10000);
Magic Number,MPTagThat.Core.Burning,BurnManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\BurnManager.cs,BurnCdClone,The following statement contains a magic number: Thread.Sleep(15000);
Magic Number,MPTagThat.Core.Burning,BurnManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\BurnManager.cs,BurnIsoToDisk,The following statement contains a magic number: List<string> MyCommandOutput = new List<string>(50);
Magic Number,MPTagThat.Core.Burning,BurnManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\BurnManager.cs,BurnIsoToDisk,The following statement contains a magic number: isoSize = (int)(fileInfo.Length / 1048576);
Magic Number,MPTagThat.Core.Burning,BurnManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\BurnManager.cs,BurnIsoToDisk,The following statement contains a magic number: MyCommandOutput = DeviceHelper.ExecuteProcReturnStdOut("cdrecord.exe"' IsoArgs' 3600000);
Magic Number,MPTagThat.Core.Burning,BurnManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\BurnManager.cs,CheckInsertedMediaCapacity,The following statement contains a magic number: int currentSpace = (int)(aSelectedBurner.CurrentMediaInfo.Size / 1024);
Magic Number,MPTagThat.Core.Burning,BurnManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\BurnManager.cs,GetAvailableDrives,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,MPTagThat.Core.Burning,DeviceHelper,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\DeviceHelper.cs,ProcessErrorHandler,The following statement contains a magic number: switch (aAppName)        {          case "cdrecord.exe":            if (!aArguments.Contains(@"-minfo"))              log.Warn("Devicehelper: {0} did not exit properly with arguments: {1}' exitcode: {2}"' aAppName'                          aArguments' aExitcode);            break;          case "mkisofs.exe":            if (aExitcode == 253)              log.Error("Devicehelper: ISO creation failed. Possible error: The source files did change.");            else              log.Warn("Devicehelper: {0} did not exit properly with arguments: {1}' exitcode: {2}"' aAppName'                          aArguments' aExitcode);            break;        }
Magic Number,MPTagThat.Core.Burning,DeviceHelper,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\DeviceHelper.cs,StdErrDataReceived,The following statement contains a magic number: percentage = errLine.Data.Remove(6);
Magic Number,MPTagThat.Core.Burning,DeviceHelper,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\DeviceHelper.cs,StdOutDataReceived,The following statement contains a magic number: int track = Convert.ToInt16(e.Data.Substring(pos - 2' 2));
Magic Number,MPTagThat.Core.Burning,DeviceHelper,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\DeviceHelper.cs,StdOutDataReceived,The following statement contains a magic number: int track = Convert.ToInt16(e.Data.Substring(pos - 2' 2));
Magic Number,MPTagThat.Core.Burning,DeviceHelper,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\DeviceHelper.cs,StdOutDataReceived,The following statement contains a magic number: MyIsoSize = Convert.ToInt32(progress.Substring(pos + 2' 5).Trim());
Magic Number,MPTagThat.Core.Burning,DeviceHelper,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\DeviceHelper.cs,StdOutDataReceived,The following statement contains a magic number: MyIsoSize = Convert.ToInt32(progress.Substring(pos + 2' 5).Trim());
Magic Number,MPTagThat.Core.Burning,DeviceHelper,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\DeviceHelper.cs,StdOutDataReceived,The following statement contains a magic number: int percentage = ((Convert.ToInt16(progress) * 100) / MyIsoSize);
Magic Number,MPTagThat.Core.Burning,DeviceHelper,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\DeviceHelper.cs,DeviceHelper,The following statement contains a magic number: StdOutList = new List<string>(80);
Magic Number,MPTagThat.Core.Burning,DeviceHelper,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\DeviceHelper.cs,QueryForBurners,The following statement contains a magic number: List<string> DeviceInfo = new List<string>(74);
Magic Number,MPTagThat.Core.Burning,DeviceHelper,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\DeviceHelper.cs,QueryForBurners,The following statement contains a magic number: List<string> FoundDeviceIDs = new List<string>(2);
Magic Number,MPTagThat.Core.Burning,DeviceHelper,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\DeviceHelper.cs,QueryForBurners,The following statement contains a magic number: DeviceInfo = ExecuteProcReturnStdOut("cdrecord.exe"' "-scanbus"' 45000);
Magic Number,MPTagThat.Core.Burning,DeviceHelper,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\DeviceHelper.cs,ParsePossibleDevices,The following statement contains a magic number: List<string> devLines = new List<string>(5);
Magic Number,MPTagThat.Core.Burning,DeviceHelper,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\DeviceHelper.cs,ParsePossibleDevices,The following statement contains a magic number: devLines.Add(scanLine.Substring(1' 5));
Magic Number,MPTagThat.Core.Burning,MediaTypeSupport,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\MediaTypeSupport.cs,GetMediaSizeMbByType,The following statement contains a magic number: switch (aMediaType)        {          case MediaType.None:            return 0;          case MediaType.ReadOnly:            return 0;          case MediaType.CDR:            return 700;          case MediaType.CDRW:            return 650;          case MediaType.DVDplusR:            return 4482;          case MediaType.DVDminusR:            return 4482;          case MediaType.DVDplusRW:            return 4482;          case MediaType.DVDminusRW:            return 4482;          case MediaType.DlDVDplusR:            return 8964;          case MediaType.DlDVDminusR:            return 8964;          case MediaType.DlDVDplusRW:            return 8964;          case MediaType.DlDVDminusRW:            return 8964;          case MediaType.DVDRam: // Type 2            return 4482;          case MediaType.DlDVDRam:            return 8964;          default:            return 0;        }
Magic Number,MPTagThat.Core.Burning,MediaTypeSupport,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\MediaTypeSupport.cs,GetMediaSizeMbByType,The following statement contains a magic number: switch (aMediaType)        {          case MediaType.None:            return 0;          case MediaType.ReadOnly:            return 0;          case MediaType.CDR:            return 700;          case MediaType.CDRW:            return 650;          case MediaType.DVDplusR:            return 4482;          case MediaType.DVDminusR:            return 4482;          case MediaType.DVDplusRW:            return 4482;          case MediaType.DVDminusRW:            return 4482;          case MediaType.DlDVDplusR:            return 8964;          case MediaType.DlDVDminusR:            return 8964;          case MediaType.DlDVDplusRW:            return 8964;          case MediaType.DlDVDminusRW:            return 8964;          case MediaType.DVDRam: // Type 2            return 4482;          case MediaType.DlDVDRam:            return 8964;          default:            return 0;        }
Magic Number,MPTagThat.Core.Burning,MediaTypeSupport,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\MediaTypeSupport.cs,GetMediaSizeMbByType,The following statement contains a magic number: switch (aMediaType)        {          case MediaType.None:            return 0;          case MediaType.ReadOnly:            return 0;          case MediaType.CDR:            return 700;          case MediaType.CDRW:            return 650;          case MediaType.DVDplusR:            return 4482;          case MediaType.DVDminusR:            return 4482;          case MediaType.DVDplusRW:            return 4482;          case MediaType.DVDminusRW:            return 4482;          case MediaType.DlDVDplusR:            return 8964;          case MediaType.DlDVDminusR:            return 8964;          case MediaType.DlDVDplusRW:            return 8964;          case MediaType.DlDVDminusRW:            return 8964;          case MediaType.DVDRam: // Type 2            return 4482;          case MediaType.DlDVDRam:            return 8964;          default:            return 0;        }
Magic Number,MPTagThat.Core.Burning,MediaTypeSupport,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\MediaTypeSupport.cs,GetMediaSizeMbByType,The following statement contains a magic number: switch (aMediaType)        {          case MediaType.None:            return 0;          case MediaType.ReadOnly:            return 0;          case MediaType.CDR:            return 700;          case MediaType.CDRW:            return 650;          case MediaType.DVDplusR:            return 4482;          case MediaType.DVDminusR:            return 4482;          case MediaType.DVDplusRW:            return 4482;          case MediaType.DVDminusRW:            return 4482;          case MediaType.DlDVDplusR:            return 8964;          case MediaType.DlDVDminusR:            return 8964;          case MediaType.DlDVDplusRW:            return 8964;          case MediaType.DlDVDminusRW:            return 8964;          case MediaType.DVDRam: // Type 2            return 4482;          case MediaType.DlDVDRam:            return 8964;          default:            return 0;        }
Magic Number,MPTagThat.Core.Burning,MediaTypeSupport,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\MediaTypeSupport.cs,GetMediaSizeMbByType,The following statement contains a magic number: switch (aMediaType)        {          case MediaType.None:            return 0;          case MediaType.ReadOnly:            return 0;          case MediaType.CDR:            return 700;          case MediaType.CDRW:            return 650;          case MediaType.DVDplusR:            return 4482;          case MediaType.DVDminusR:            return 4482;          case MediaType.DVDplusRW:            return 4482;          case MediaType.DVDminusRW:            return 4482;          case MediaType.DlDVDplusR:            return 8964;          case MediaType.DlDVDminusR:            return 8964;          case MediaType.DlDVDplusRW:            return 8964;          case MediaType.DlDVDminusRW:            return 8964;          case MediaType.DVDRam: // Type 2            return 4482;          case MediaType.DlDVDRam:            return 8964;          default:            return 0;        }
Magic Number,MPTagThat.Core.Burning,MediaTypeSupport,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\MediaTypeSupport.cs,GetMediaSizeMbByType,The following statement contains a magic number: switch (aMediaType)        {          case MediaType.None:            return 0;          case MediaType.ReadOnly:            return 0;          case MediaType.CDR:            return 700;          case MediaType.CDRW:            return 650;          case MediaType.DVDplusR:            return 4482;          case MediaType.DVDminusR:            return 4482;          case MediaType.DVDplusRW:            return 4482;          case MediaType.DVDminusRW:            return 4482;          case MediaType.DlDVDplusR:            return 8964;          case MediaType.DlDVDminusR:            return 8964;          case MediaType.DlDVDplusRW:            return 8964;          case MediaType.DlDVDminusRW:            return 8964;          case MediaType.DVDRam: // Type 2            return 4482;          case MediaType.DlDVDRam:            return 8964;          default:            return 0;        }
Magic Number,MPTagThat.Core.Burning,MediaTypeSupport,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\MediaTypeSupport.cs,GetMediaSizeMbByType,The following statement contains a magic number: switch (aMediaType)        {          case MediaType.None:            return 0;          case MediaType.ReadOnly:            return 0;          case MediaType.CDR:            return 700;          case MediaType.CDRW:            return 650;          case MediaType.DVDplusR:            return 4482;          case MediaType.DVDminusR:            return 4482;          case MediaType.DVDplusRW:            return 4482;          case MediaType.DVDminusRW:            return 4482;          case MediaType.DlDVDplusR:            return 8964;          case MediaType.DlDVDminusR:            return 8964;          case MediaType.DlDVDplusRW:            return 8964;          case MediaType.DlDVDminusRW:            return 8964;          case MediaType.DVDRam: // Type 2            return 4482;          case MediaType.DlDVDRam:            return 8964;          default:            return 0;        }
Magic Number,MPTagThat.Core.Burning,MediaTypeSupport,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\MediaTypeSupport.cs,GetMediaSizeMbByType,The following statement contains a magic number: switch (aMediaType)        {          case MediaType.None:            return 0;          case MediaType.ReadOnly:            return 0;          case MediaType.CDR:            return 700;          case MediaType.CDRW:            return 650;          case MediaType.DVDplusR:            return 4482;          case MediaType.DVDminusR:            return 4482;          case MediaType.DVDplusRW:            return 4482;          case MediaType.DVDminusRW:            return 4482;          case MediaType.DlDVDplusR:            return 8964;          case MediaType.DlDVDminusR:            return 8964;          case MediaType.DlDVDplusRW:            return 8964;          case MediaType.DlDVDminusRW:            return 8964;          case MediaType.DVDRam: // Type 2            return 4482;          case MediaType.DlDVDRam:            return 8964;          default:            return 0;        }
Magic Number,MPTagThat.Core.Burning,MediaTypeSupport,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\MediaTypeSupport.cs,GetMediaSizeMbByType,The following statement contains a magic number: switch (aMediaType)        {          case MediaType.None:            return 0;          case MediaType.ReadOnly:            return 0;          case MediaType.CDR:            return 700;          case MediaType.CDRW:            return 650;          case MediaType.DVDplusR:            return 4482;          case MediaType.DVDminusR:            return 4482;          case MediaType.DVDplusRW:            return 4482;          case MediaType.DVDminusRW:            return 4482;          case MediaType.DlDVDplusR:            return 8964;          case MediaType.DlDVDminusR:            return 8964;          case MediaType.DlDVDplusRW:            return 8964;          case MediaType.DlDVDminusRW:            return 8964;          case MediaType.DVDRam: // Type 2            return 4482;          case MediaType.DlDVDRam:            return 8964;          default:            return 0;        }
Magic Number,MPTagThat.Core.Burning,MediaTypeSupport,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\MediaTypeSupport.cs,GetMediaSizeMbByType,The following statement contains a magic number: switch (aMediaType)        {          case MediaType.None:            return 0;          case MediaType.ReadOnly:            return 0;          case MediaType.CDR:            return 700;          case MediaType.CDRW:            return 650;          case MediaType.DVDplusR:            return 4482;          case MediaType.DVDminusR:            return 4482;          case MediaType.DVDplusRW:            return 4482;          case MediaType.DVDminusRW:            return 4482;          case MediaType.DlDVDplusR:            return 8964;          case MediaType.DlDVDminusR:            return 8964;          case MediaType.DlDVDplusRW:            return 8964;          case MediaType.DlDVDminusRW:            return 8964;          case MediaType.DVDRam: // Type 2            return 4482;          case MediaType.DlDVDRam:            return 8964;          default:            return 0;        }
Magic Number,MPTagThat.Core.Burning,MediaTypeSupport,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\MediaTypeSupport.cs,GetMediaSizeMbByType,The following statement contains a magic number: switch (aMediaType)        {          case MediaType.None:            return 0;          case MediaType.ReadOnly:            return 0;          case MediaType.CDR:            return 700;          case MediaType.CDRW:            return 650;          case MediaType.DVDplusR:            return 4482;          case MediaType.DVDminusR:            return 4482;          case MediaType.DVDplusRW:            return 4482;          case MediaType.DVDminusRW:            return 4482;          case MediaType.DlDVDplusR:            return 8964;          case MediaType.DlDVDminusR:            return 8964;          case MediaType.DlDVDplusRW:            return 8964;          case MediaType.DlDVDminusRW:            return 8964;          case MediaType.DVDRam: // Type 2            return 4482;          case MediaType.DlDVDRam:            return 8964;          default:            return 0;        }
Magic Number,MPTagThat.Core.Burning,MediaTypeSupport,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\MediaTypeSupport.cs,GetMediaSizeMbByType,The following statement contains a magic number: switch (aMediaType)        {          case MediaType.None:            return 0;          case MediaType.ReadOnly:            return 0;          case MediaType.CDR:            return 700;          case MediaType.CDRW:            return 650;          case MediaType.DVDplusR:            return 4482;          case MediaType.DVDminusR:            return 4482;          case MediaType.DVDplusRW:            return 4482;          case MediaType.DVDminusRW:            return 4482;          case MediaType.DlDVDplusR:            return 8964;          case MediaType.DlDVDminusR:            return 8964;          case MediaType.DlDVDplusRW:            return 8964;          case MediaType.DlDVDminusRW:            return 8964;          case MediaType.DVDRam: // Type 2            return 4482;          case MediaType.DlDVDRam:            return 8964;          default:            return 0;        }
Magic Number,MPTagThat.Core.Burning,MediaTypeSupport,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\MediaTypeSupport.cs,GetMaxMediaSizeMbByProjectType,The following statement contains a magic number: switch (aProjectType)        {          case ProjectType.DataCD:            return 700;          case ProjectType.AudioCD:            return 700;          case ProjectType.PhotoCD:            return 700;          case ProjectType.IsoCD:            return 700;          case ProjectType.DataDVD:            return 4482;          case ProjectType.VideoDVD:            return 4482;          case ProjectType.IsoDVD:            return 4482;          case ProjectType.LargeDataDVD:            return 8964;          case ProjectType.LargeIsoDVD:            return 8964;          case ProjectType.Autoselect:            if (aCurrentDrive == null)              return 0;            else            {              if (aCurrentDrive.MediaFeatures.WriteDlDVDplusR || aCurrentDrive.MediaFeatures.WriteDlDVDminusR ||                  aCurrentDrive.MediaFeatures.WriteDlDVDRam)                return 8964;              if (aCurrentDrive.MediaFeatures.WriteDVDplusR || aCurrentDrive.MediaFeatures.WriteDVDminusR)                return 4482;              else                return 700;            }          default:            return 0;        }
Magic Number,MPTagThat.Core.Burning,MediaTypeSupport,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\MediaTypeSupport.cs,GetMaxMediaSizeMbByProjectType,The following statement contains a magic number: switch (aProjectType)        {          case ProjectType.DataCD:            return 700;          case ProjectType.AudioCD:            return 700;          case ProjectType.PhotoCD:            return 700;          case ProjectType.IsoCD:            return 700;          case ProjectType.DataDVD:            return 4482;          case ProjectType.VideoDVD:            return 4482;          case ProjectType.IsoDVD:            return 4482;          case ProjectType.LargeDataDVD:            return 8964;          case ProjectType.LargeIsoDVD:            return 8964;          case ProjectType.Autoselect:            if (aCurrentDrive == null)              return 0;            else            {              if (aCurrentDrive.MediaFeatures.WriteDlDVDplusR || aCurrentDrive.MediaFeatures.WriteDlDVDminusR ||                  aCurrentDrive.MediaFeatures.WriteDlDVDRam)                return 8964;              if (aCurrentDrive.MediaFeatures.WriteDVDplusR || aCurrentDrive.MediaFeatures.WriteDVDminusR)                return 4482;              else                return 700;            }          default:            return 0;        }
Magic Number,MPTagThat.Core.Burning,MediaTypeSupport,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\MediaTypeSupport.cs,GetMaxMediaSizeMbByProjectType,The following statement contains a magic number: switch (aProjectType)        {          case ProjectType.DataCD:            return 700;          case ProjectType.AudioCD:            return 700;          case ProjectType.PhotoCD:            return 700;          case ProjectType.IsoCD:            return 700;          case ProjectType.DataDVD:            return 4482;          case ProjectType.VideoDVD:            return 4482;          case ProjectType.IsoDVD:            return 4482;          case ProjectType.LargeDataDVD:            return 8964;          case ProjectType.LargeIsoDVD:            return 8964;          case ProjectType.Autoselect:            if (aCurrentDrive == null)              return 0;            else            {              if (aCurrentDrive.MediaFeatures.WriteDlDVDplusR || aCurrentDrive.MediaFeatures.WriteDlDVDminusR ||                  aCurrentDrive.MediaFeatures.WriteDlDVDRam)                return 8964;              if (aCurrentDrive.MediaFeatures.WriteDVDplusR || aCurrentDrive.MediaFeatures.WriteDVDminusR)                return 4482;              else                return 700;            }          default:            return 0;        }
Magic Number,MPTagThat.Core.Burning,MediaTypeSupport,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\MediaTypeSupport.cs,GetMaxMediaSizeMbByProjectType,The following statement contains a magic number: switch (aProjectType)        {          case ProjectType.DataCD:            return 700;          case ProjectType.AudioCD:            return 700;          case ProjectType.PhotoCD:            return 700;          case ProjectType.IsoCD:            return 700;          case ProjectType.DataDVD:            return 4482;          case ProjectType.VideoDVD:            return 4482;          case ProjectType.IsoDVD:            return 4482;          case ProjectType.LargeDataDVD:            return 8964;          case ProjectType.LargeIsoDVD:            return 8964;          case ProjectType.Autoselect:            if (aCurrentDrive == null)              return 0;            else            {              if (aCurrentDrive.MediaFeatures.WriteDlDVDplusR || aCurrentDrive.MediaFeatures.WriteDlDVDminusR ||                  aCurrentDrive.MediaFeatures.WriteDlDVDRam)                return 8964;              if (aCurrentDrive.MediaFeatures.WriteDVDplusR || aCurrentDrive.MediaFeatures.WriteDVDminusR)                return 4482;              else                return 700;            }          default:            return 0;        }
Magic Number,MPTagThat.Core.Burning,MediaTypeSupport,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\MediaTypeSupport.cs,GetMaxMediaSizeMbByProjectType,The following statement contains a magic number: switch (aProjectType)        {          case ProjectType.DataCD:            return 700;          case ProjectType.AudioCD:            return 700;          case ProjectType.PhotoCD:            return 700;          case ProjectType.IsoCD:            return 700;          case ProjectType.DataDVD:            return 4482;          case ProjectType.VideoDVD:            return 4482;          case ProjectType.IsoDVD:            return 4482;          case ProjectType.LargeDataDVD:            return 8964;          case ProjectType.LargeIsoDVD:            return 8964;          case ProjectType.Autoselect:            if (aCurrentDrive == null)              return 0;            else            {              if (aCurrentDrive.MediaFeatures.WriteDlDVDplusR || aCurrentDrive.MediaFeatures.WriteDlDVDminusR ||                  aCurrentDrive.MediaFeatures.WriteDlDVDRam)                return 8964;              if (aCurrentDrive.MediaFeatures.WriteDVDplusR || aCurrentDrive.MediaFeatures.WriteDVDminusR)                return 4482;              else                return 700;            }          default:            return 0;        }
Magic Number,MPTagThat.Core.Burning,MediaTypeSupport,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\MediaTypeSupport.cs,GetMaxMediaSizeMbByProjectType,The following statement contains a magic number: switch (aProjectType)        {          case ProjectType.DataCD:            return 700;          case ProjectType.AudioCD:            return 700;          case ProjectType.PhotoCD:            return 700;          case ProjectType.IsoCD:            return 700;          case ProjectType.DataDVD:            return 4482;          case ProjectType.VideoDVD:            return 4482;          case ProjectType.IsoDVD:            return 4482;          case ProjectType.LargeDataDVD:            return 8964;          case ProjectType.LargeIsoDVD:            return 8964;          case ProjectType.Autoselect:            if (aCurrentDrive == null)              return 0;            else            {              if (aCurrentDrive.MediaFeatures.WriteDlDVDplusR || aCurrentDrive.MediaFeatures.WriteDlDVDminusR ||                  aCurrentDrive.MediaFeatures.WriteDlDVDRam)                return 8964;              if (aCurrentDrive.MediaFeatures.WriteDVDplusR || aCurrentDrive.MediaFeatures.WriteDVDminusR)                return 4482;              else                return 700;            }          default:            return 0;        }
Magic Number,MPTagThat.Core.Burning,MediaTypeSupport,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\MediaTypeSupport.cs,GetMaxMediaSizeMbByProjectType,The following statement contains a magic number: switch (aProjectType)        {          case ProjectType.DataCD:            return 700;          case ProjectType.AudioCD:            return 700;          case ProjectType.PhotoCD:            return 700;          case ProjectType.IsoCD:            return 700;          case ProjectType.DataDVD:            return 4482;          case ProjectType.VideoDVD:            return 4482;          case ProjectType.IsoDVD:            return 4482;          case ProjectType.LargeDataDVD:            return 8964;          case ProjectType.LargeIsoDVD:            return 8964;          case ProjectType.Autoselect:            if (aCurrentDrive == null)              return 0;            else            {              if (aCurrentDrive.MediaFeatures.WriteDlDVDplusR || aCurrentDrive.MediaFeatures.WriteDlDVDminusR ||                  aCurrentDrive.MediaFeatures.WriteDlDVDRam)                return 8964;              if (aCurrentDrive.MediaFeatures.WriteDVDplusR || aCurrentDrive.MediaFeatures.WriteDVDminusR)                return 4482;              else                return 700;            }          default:            return 0;        }
Magic Number,MPTagThat.Core.Burning,MediaTypeSupport,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\MediaTypeSupport.cs,GetMaxMediaSizeMbByProjectType,The following statement contains a magic number: switch (aProjectType)        {          case ProjectType.DataCD:            return 700;          case ProjectType.AudioCD:            return 700;          case ProjectType.PhotoCD:            return 700;          case ProjectType.IsoCD:            return 700;          case ProjectType.DataDVD:            return 4482;          case ProjectType.VideoDVD:            return 4482;          case ProjectType.IsoDVD:            return 4482;          case ProjectType.LargeDataDVD:            return 8964;          case ProjectType.LargeIsoDVD:            return 8964;          case ProjectType.Autoselect:            if (aCurrentDrive == null)              return 0;            else            {              if (aCurrentDrive.MediaFeatures.WriteDlDVDplusR || aCurrentDrive.MediaFeatures.WriteDlDVDminusR ||                  aCurrentDrive.MediaFeatures.WriteDlDVDRam)                return 8964;              if (aCurrentDrive.MediaFeatures.WriteDVDplusR || aCurrentDrive.MediaFeatures.WriteDVDminusR)                return 4482;              else                return 700;            }          default:            return 0;        }
Magic Number,MPTagThat.Core.Burning,MediaTypeSupport,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\MediaTypeSupport.cs,GetMaxMediaSizeMbByProjectType,The following statement contains a magic number: switch (aProjectType)        {          case ProjectType.DataCD:            return 700;          case ProjectType.AudioCD:            return 700;          case ProjectType.PhotoCD:            return 700;          case ProjectType.IsoCD:            return 700;          case ProjectType.DataDVD:            return 4482;          case ProjectType.VideoDVD:            return 4482;          case ProjectType.IsoDVD:            return 4482;          case ProjectType.LargeDataDVD:            return 8964;          case ProjectType.LargeIsoDVD:            return 8964;          case ProjectType.Autoselect:            if (aCurrentDrive == null)              return 0;            else            {              if (aCurrentDrive.MediaFeatures.WriteDlDVDplusR || aCurrentDrive.MediaFeatures.WriteDlDVDminusR ||                  aCurrentDrive.MediaFeatures.WriteDlDVDRam)                return 8964;              if (aCurrentDrive.MediaFeatures.WriteDVDplusR || aCurrentDrive.MediaFeatures.WriteDVDminusR)                return 4482;              else                return 700;            }          default:            return 0;        }
Magic Number,MPTagThat.Core.Burning,MediaTypeSupport,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\MediaTypeSupport.cs,GetMaxMediaSizeMbByProjectType,The following statement contains a magic number: switch (aProjectType)        {          case ProjectType.DataCD:            return 700;          case ProjectType.AudioCD:            return 700;          case ProjectType.PhotoCD:            return 700;          case ProjectType.IsoCD:            return 700;          case ProjectType.DataDVD:            return 4482;          case ProjectType.VideoDVD:            return 4482;          case ProjectType.IsoDVD:            return 4482;          case ProjectType.LargeDataDVD:            return 8964;          case ProjectType.LargeIsoDVD:            return 8964;          case ProjectType.Autoselect:            if (aCurrentDrive == null)              return 0;            else            {              if (aCurrentDrive.MediaFeatures.WriteDlDVDplusR || aCurrentDrive.MediaFeatures.WriteDlDVDminusR ||                  aCurrentDrive.MediaFeatures.WriteDlDVDRam)                return 8964;              if (aCurrentDrive.MediaFeatures.WriteDVDplusR || aCurrentDrive.MediaFeatures.WriteDVDminusR)                return 4482;              else                return 700;            }          default:            return 0;        }
Magic Number,MPTagThat.Core.Burning,MediaTypeSupport,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\MediaTypeSupport.cs,GetMaxMediaSizeMbByProjectType,The following statement contains a magic number: switch (aProjectType)        {          case ProjectType.DataCD:            return 700;          case ProjectType.AudioCD:            return 700;          case ProjectType.PhotoCD:            return 700;          case ProjectType.IsoCD:            return 700;          case ProjectType.DataDVD:            return 4482;          case ProjectType.VideoDVD:            return 4482;          case ProjectType.IsoDVD:            return 4482;          case ProjectType.LargeDataDVD:            return 8964;          case ProjectType.LargeIsoDVD:            return 8964;          case ProjectType.Autoselect:            if (aCurrentDrive == null)              return 0;            else            {              if (aCurrentDrive.MediaFeatures.WriteDlDVDplusR || aCurrentDrive.MediaFeatures.WriteDlDVDminusR ||                  aCurrentDrive.MediaFeatures.WriteDlDVDRam)                return 8964;              if (aCurrentDrive.MediaFeatures.WriteDVDplusR || aCurrentDrive.MediaFeatures.WriteDVDminusR)                return 4482;              else                return 700;            }          default:            return 0;        }
Magic Number,MPTagThat.Core.Burning,MediaTypeSupport,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\MediaTypeSupport.cs,GetMaxMediaSizeMbByProjectType,The following statement contains a magic number: switch (aProjectType)        {          case ProjectType.DataCD:            return 700;          case ProjectType.AudioCD:            return 700;          case ProjectType.PhotoCD:            return 700;          case ProjectType.IsoCD:            return 700;          case ProjectType.DataDVD:            return 4482;          case ProjectType.VideoDVD:            return 4482;          case ProjectType.IsoDVD:            return 4482;          case ProjectType.LargeDataDVD:            return 8964;          case ProjectType.LargeIsoDVD:            return 8964;          case ProjectType.Autoselect:            if (aCurrentDrive == null)              return 0;            else            {              if (aCurrentDrive.MediaFeatures.WriteDlDVDplusR || aCurrentDrive.MediaFeatures.WriteDlDVDminusR ||                  aCurrentDrive.MediaFeatures.WriteDlDVDRam)                return 8964;              if (aCurrentDrive.MediaFeatures.WriteDVDplusR || aCurrentDrive.MediaFeatures.WriteDVDminusR)                return 4482;              else                return 700;            }          default:            return 0;        }
Magic Number,MPTagThat.Core.Common,Comment,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\Comment.cs,Comment,The following statement contains a magic number: Language = lang.Substring(0' 3);
Magic Number,MPTagThat.Core.Common,Comment,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\Comment.cs,Comment,The following statement contains a magic number: lang.Length > 3
Magic Number,MPTagThat.Core.Common,Lyric,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\Lyric.cs,Lyric,The following statement contains a magic number: Language = lang.Length == 3 ? lang.Substring(0' 3) : "";
Magic Number,MPTagThat.Core.Common,Lyric,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\Lyric.cs,Lyric,The following statement contains a magic number: Language = lang.Length == 3 ? lang.Substring(0' 3) : "";
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: rr = new Rectangle(r.X' r.Y + ((r.Height - 115) / 2)' 8' 115);
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: rr = new Rectangle(r.X' r.Y + ((r.Height - 115) / 2)' 8' 115);
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: rr = new Rectangle(r.X' r.Y + ((r.Height - 115) / 2)' 8' 115);
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: rr = new Rectangle(r.X' r.Y + ((r.Height - 115) / 2)' 8' 115);
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: Width = 8;
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2'                     rr.Y + rr.Height);
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: int x = rr.X + 3;
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: int y = rr.Y + 14;
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,ArrowPointArray,The following statement contains a magic number: Point[] point = new Point[3];
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,ArrowPointArray,The following statement contains a magic number: point[1] = new Point(x + 3' y + 3);
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,ArrowPointArray,The following statement contains a magic number: point[1] = new Point(x + 3' y + 3);
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,ArrowPointArray,The following statement contains a magic number: point[2] = new Point(x' y + 6);
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,ArrowPointArray,The following statement contains a magic number: point[2] = new Point(x' y + 6);
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,CalculateColor,The following statement contains a magic number: Color frontColor = Color.FromArgb(255' front);
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,CalculateColor,The following statement contains a magic number: Color backColor = Color.FromArgb(255' back);
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,CalculateColor,The following statement contains a magic number: float fRed = frontRed * alpha / 255 + backRed * ((float)(255 - alpha) / 255);
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,CalculateColor,The following statement contains a magic number: float fRed = frontRed * alpha / 255 + backRed * ((float)(255 - alpha) / 255);
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,CalculateColor,The following statement contains a magic number: float fRed = frontRed * alpha / 255 + backRed * ((float)(255 - alpha) / 255);
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,CalculateColor,The following statement contains a magic number: float fGreen = frontGreen * alpha / 255 + backGreen * ((float)(255 - alpha) / 255);
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,CalculateColor,The following statement contains a magic number: float fGreen = frontGreen * alpha / 255 + backGreen * ((float)(255 - alpha) / 255);
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,CalculateColor,The following statement contains a magic number: float fGreen = frontGreen * alpha / 255 + backGreen * ((float)(255 - alpha) / 255);
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,CalculateColor,The following statement contains a magic number: float fBlue = frontBlue * alpha / 255 + backBlue * ((float)(255 - alpha) / 255);
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,CalculateColor,The following statement contains a magic number: float fBlue = frontBlue * alpha / 255 + backBlue * ((float)(255 - alpha) / 255);
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,CalculateColor,The following statement contains a magic number: float fBlue = frontBlue * alpha / 255 + backBlue * ((float)(255 - alpha) / 255);
Magic Number,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,CalculateColor,The following statement contains a magic number: return Color.FromArgb(255' newRed' newGreen' newBlue);
Magic Number,Stepi.UI,ExtendedPanel,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\ExtendedPanel.cs,InitializeGraphicPath,The following statement contains a magic number: cornerSquare =          (int)(captionCtrl.Height > captionCtrl.Width ? captionCtrl.Height * 0.05f : captionCtrl.Width * 0.05f);
Magic Number,Stepi.UI,ExtendedPanel,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\ExtendedPanel.cs,InitializeGraphicPath,The following statement contains a magic number: cornerSquare =          (int)(captionCtrl.Height > captionCtrl.Width ? captionCtrl.Height * 0.05f : captionCtrl.Width * 0.05f);
Magic Number,Stepi.UI,ExtendedPanel,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\ExtendedPanel.cs,OnResize,The following statement contains a magic number: captionSize = (Height * 20 / 100);
Magic Number,Stepi.UI,ExtendedPanel,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\ExtendedPanel.cs,OnResize,The following statement contains a magic number: captionSize = (Height * 20 / 100);
Magic Number,Stepi.UI,CaptionCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CaptionCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: cornerSquare = (int)(Height > Width ? Height * 0.05f : Width * 0.05f);
Magic Number,Stepi.UI,CaptionCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CaptionCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: cornerSquare = (int)(Height > Width ? Height * 0.05f : Width * 0.05f);
Magic Number,Stepi.UI,CaptionCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CaptionCtrl.cs,OnPaint,The following statement contains a magic number: yAxis = (Height - size.Height) * 0.5f;
Magic Number,Stepi.UI,CaptionCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CaptionCtrl.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawIcon(captionIcon' cornerSquare / 6' cornerSquare / 6);
Magic Number,Stepi.UI,CaptionCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CaptionCtrl.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawIcon(captionIcon' cornerSquare / 6' cornerSquare / 6);
Magic Number,Stepi.UI,CaptionCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CaptionCtrl.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawString(text' Font' new SolidBrush(textColor)'                                  new PointF(xAxis + cornerSquare / 6 + captionIcon.Width' yAxis + cornerSquare / 6)'                                  stringFormat);
Magic Number,Stepi.UI,CaptionCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CaptionCtrl.cs,OnPaint,The following statement contains a magic number: e.Graphics.DrawString(text' Font' new SolidBrush(textColor)'                                  new PointF(xAxis + cornerSquare / 6 + captionIcon.Width' yAxis + cornerSquare / 6)'                                  stringFormat);
Magic Number,Stepi.UI,CollapseAnimation,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CollapseAnimation.cs,Animate,The following statement contains a magic number: Thread.Sleep(20);
Magic Number,Stepi.UI,CornerCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CornerCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: switch (cornerStyle)        {          case CornerStyle.Rounded:              graphicPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            regionPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2 - 1' 0);            regionPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2' 0);            graphicPath.AddArc(Width - cornerSquare - 1' 0' cornerSquare' cornerSquare' -90' 90);            regionPath.AddArc(Width - cornerSquare' 0' cornerSquare' cornerSquare' -90' 90);              graphicPath.AddLine(Width - 1' cornerSquare - cornerSquare / 2' Width - 1'                                Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(Width' cornerSquare - cornerSquare / 2' Width' Height - cornerSquare + cornerSquare / 2);            graphicPath.AddArc(Width - cornerSquare - 1' Height - 1 - cornerSquare' cornerSquare' cornerSquare' 0' 90);            regionPath.AddArc(Width - cornerSquare' Height - cornerSquare' cornerSquare' cornerSquare' 0' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' Height - 1' Width - cornerSquare + cornerSquare / 2'                                Height - 1);            regionPath.AddLine(cornerSquare - cornerSquare / 2' Height' Width - cornerSquare + cornerSquare / 2' Height);              graphicPath.AddArc(0' Height - cornerSquare - 1' cornerSquare' cornerSquare' 90' 90);            regionPath.AddArc(0' Height - cornerSquare' cornerSquare' cornerSquare' 90' 90);              graphicPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            //this.Region = new Region(graphicPath);              //this.Region = new Region(graphicPath);            break;            case CornerStyle.Normal:              graphicPath.AddLine(0' 0' Width - 1' 0);            regionPath.AddLine(0' 0' Width' 0);            graphicPath.AddLine(Width - 1' 0' Width - 1' Height - 1);            regionPath.AddLine(Width' 0' Width' Height);            graphicPath.AddLine(Width - 1' Height - 1' 0' Height - 1);            regionPath.AddLine(Width' Height' 0' Height);            graphicPath.AddLine(0' Height - 1' 0' 0);            regionPath.AddLine(0' Height' 0' 0);            break;            default:            throw new ApplicationException("Unrecognized style for rendering the corners");            break;        }
Magic Number,Stepi.UI,CornerCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CornerCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: switch (cornerStyle)        {          case CornerStyle.Rounded:              graphicPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            regionPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2 - 1' 0);            regionPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2' 0);            graphicPath.AddArc(Width - cornerSquare - 1' 0' cornerSquare' cornerSquare' -90' 90);            regionPath.AddArc(Width - cornerSquare' 0' cornerSquare' cornerSquare' -90' 90);              graphicPath.AddLine(Width - 1' cornerSquare - cornerSquare / 2' Width - 1'                                Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(Width' cornerSquare - cornerSquare / 2' Width' Height - cornerSquare + cornerSquare / 2);            graphicPath.AddArc(Width - cornerSquare - 1' Height - 1 - cornerSquare' cornerSquare' cornerSquare' 0' 90);            regionPath.AddArc(Width - cornerSquare' Height - cornerSquare' cornerSquare' cornerSquare' 0' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' Height - 1' Width - cornerSquare + cornerSquare / 2'                                Height - 1);            regionPath.AddLine(cornerSquare - cornerSquare / 2' Height' Width - cornerSquare + cornerSquare / 2' Height);              graphicPath.AddArc(0' Height - cornerSquare - 1' cornerSquare' cornerSquare' 90' 90);            regionPath.AddArc(0' Height - cornerSquare' cornerSquare' cornerSquare' 90' 90);              graphicPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            //this.Region = new Region(graphicPath);              //this.Region = new Region(graphicPath);            break;            case CornerStyle.Normal:              graphicPath.AddLine(0' 0' Width - 1' 0);            regionPath.AddLine(0' 0' Width' 0);            graphicPath.AddLine(Width - 1' 0' Width - 1' Height - 1);            regionPath.AddLine(Width' 0' Width' Height);            graphicPath.AddLine(Width - 1' Height - 1' 0' Height - 1);            regionPath.AddLine(Width' Height' 0' Height);            graphicPath.AddLine(0' Height - 1' 0' 0);            regionPath.AddLine(0' Height' 0' 0);            break;            default:            throw new ApplicationException("Unrecognized style for rendering the corners");            break;        }
Magic Number,Stepi.UI,CornerCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CornerCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: switch (cornerStyle)        {          case CornerStyle.Rounded:              graphicPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            regionPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2 - 1' 0);            regionPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2' 0);            graphicPath.AddArc(Width - cornerSquare - 1' 0' cornerSquare' cornerSquare' -90' 90);            regionPath.AddArc(Width - cornerSquare' 0' cornerSquare' cornerSquare' -90' 90);              graphicPath.AddLine(Width - 1' cornerSquare - cornerSquare / 2' Width - 1'                                Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(Width' cornerSquare - cornerSquare / 2' Width' Height - cornerSquare + cornerSquare / 2);            graphicPath.AddArc(Width - cornerSquare - 1' Height - 1 - cornerSquare' cornerSquare' cornerSquare' 0' 90);            regionPath.AddArc(Width - cornerSquare' Height - cornerSquare' cornerSquare' cornerSquare' 0' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' Height - 1' Width - cornerSquare + cornerSquare / 2'                                Height - 1);            regionPath.AddLine(cornerSquare - cornerSquare / 2' Height' Width - cornerSquare + cornerSquare / 2' Height);              graphicPath.AddArc(0' Height - cornerSquare - 1' cornerSquare' cornerSquare' 90' 90);            regionPath.AddArc(0' Height - cornerSquare' cornerSquare' cornerSquare' 90' 90);              graphicPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            //this.Region = new Region(graphicPath);              //this.Region = new Region(graphicPath);            break;            case CornerStyle.Normal:              graphicPath.AddLine(0' 0' Width - 1' 0);            regionPath.AddLine(0' 0' Width' 0);            graphicPath.AddLine(Width - 1' 0' Width - 1' Height - 1);            regionPath.AddLine(Width' 0' Width' Height);            graphicPath.AddLine(Width - 1' Height - 1' 0' Height - 1);            regionPath.AddLine(Width' Height' 0' Height);            graphicPath.AddLine(0' Height - 1' 0' 0);            regionPath.AddLine(0' Height' 0' 0);            break;            default:            throw new ApplicationException("Unrecognized style for rendering the corners");            break;        }
Magic Number,Stepi.UI,CornerCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CornerCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: switch (cornerStyle)        {          case CornerStyle.Rounded:              graphicPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            regionPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2 - 1' 0);            regionPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2' 0);            graphicPath.AddArc(Width - cornerSquare - 1' 0' cornerSquare' cornerSquare' -90' 90);            regionPath.AddArc(Width - cornerSquare' 0' cornerSquare' cornerSquare' -90' 90);              graphicPath.AddLine(Width - 1' cornerSquare - cornerSquare / 2' Width - 1'                                Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(Width' cornerSquare - cornerSquare / 2' Width' Height - cornerSquare + cornerSquare / 2);            graphicPath.AddArc(Width - cornerSquare - 1' Height - 1 - cornerSquare' cornerSquare' cornerSquare' 0' 90);            regionPath.AddArc(Width - cornerSquare' Height - cornerSquare' cornerSquare' cornerSquare' 0' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' Height - 1' Width - cornerSquare + cornerSquare / 2'                                Height - 1);            regionPath.AddLine(cornerSquare - cornerSquare / 2' Height' Width - cornerSquare + cornerSquare / 2' Height);              graphicPath.AddArc(0' Height - cornerSquare - 1' cornerSquare' cornerSquare' 90' 90);            regionPath.AddArc(0' Height - cornerSquare' cornerSquare' cornerSquare' 90' 90);              graphicPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            //this.Region = new Region(graphicPath);              //this.Region = new Region(graphicPath);            break;            case CornerStyle.Normal:              graphicPath.AddLine(0' 0' Width - 1' 0);            regionPath.AddLine(0' 0' Width' 0);            graphicPath.AddLine(Width - 1' 0' Width - 1' Height - 1);            regionPath.AddLine(Width' 0' Width' Height);            graphicPath.AddLine(Width - 1' Height - 1' 0' Height - 1);            regionPath.AddLine(Width' Height' 0' Height);            graphicPath.AddLine(0' Height - 1' 0' 0);            regionPath.AddLine(0' Height' 0' 0);            break;            default:            throw new ApplicationException("Unrecognized style for rendering the corners");            break;        }
Magic Number,Stepi.UI,CornerCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CornerCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: switch (cornerStyle)        {          case CornerStyle.Rounded:              graphicPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            regionPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2 - 1' 0);            regionPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2' 0);            graphicPath.AddArc(Width - cornerSquare - 1' 0' cornerSquare' cornerSquare' -90' 90);            regionPath.AddArc(Width - cornerSquare' 0' cornerSquare' cornerSquare' -90' 90);              graphicPath.AddLine(Width - 1' cornerSquare - cornerSquare / 2' Width - 1'                                Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(Width' cornerSquare - cornerSquare / 2' Width' Height - cornerSquare + cornerSquare / 2);            graphicPath.AddArc(Width - cornerSquare - 1' Height - 1 - cornerSquare' cornerSquare' cornerSquare' 0' 90);            regionPath.AddArc(Width - cornerSquare' Height - cornerSquare' cornerSquare' cornerSquare' 0' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' Height - 1' Width - cornerSquare + cornerSquare / 2'                                Height - 1);            regionPath.AddLine(cornerSquare - cornerSquare / 2' Height' Width - cornerSquare + cornerSquare / 2' Height);              graphicPath.AddArc(0' Height - cornerSquare - 1' cornerSquare' cornerSquare' 90' 90);            regionPath.AddArc(0' Height - cornerSquare' cornerSquare' cornerSquare' 90' 90);              graphicPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            //this.Region = new Region(graphicPath);              //this.Region = new Region(graphicPath);            break;            case CornerStyle.Normal:              graphicPath.AddLine(0' 0' Width - 1' 0);            regionPath.AddLine(0' 0' Width' 0);            graphicPath.AddLine(Width - 1' 0' Width - 1' Height - 1);            regionPath.AddLine(Width' 0' Width' Height);            graphicPath.AddLine(Width - 1' Height - 1' 0' Height - 1);            regionPath.AddLine(Width' Height' 0' Height);            graphicPath.AddLine(0' Height - 1' 0' 0);            regionPath.AddLine(0' Height' 0' 0);            break;            default:            throw new ApplicationException("Unrecognized style for rendering the corners");            break;        }
Magic Number,Stepi.UI,CornerCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CornerCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: switch (cornerStyle)        {          case CornerStyle.Rounded:              graphicPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            regionPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2 - 1' 0);            regionPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2' 0);            graphicPath.AddArc(Width - cornerSquare - 1' 0' cornerSquare' cornerSquare' -90' 90);            regionPath.AddArc(Width - cornerSquare' 0' cornerSquare' cornerSquare' -90' 90);              graphicPath.AddLine(Width - 1' cornerSquare - cornerSquare / 2' Width - 1'                                Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(Width' cornerSquare - cornerSquare / 2' Width' Height - cornerSquare + cornerSquare / 2);            graphicPath.AddArc(Width - cornerSquare - 1' Height - 1 - cornerSquare' cornerSquare' cornerSquare' 0' 90);            regionPath.AddArc(Width - cornerSquare' Height - cornerSquare' cornerSquare' cornerSquare' 0' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' Height - 1' Width - cornerSquare + cornerSquare / 2'                                Height - 1);            regionPath.AddLine(cornerSquare - cornerSquare / 2' Height' Width - cornerSquare + cornerSquare / 2' Height);              graphicPath.AddArc(0' Height - cornerSquare - 1' cornerSquare' cornerSquare' 90' 90);            regionPath.AddArc(0' Height - cornerSquare' cornerSquare' cornerSquare' 90' 90);              graphicPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            //this.Region = new Region(graphicPath);              //this.Region = new Region(graphicPath);            break;            case CornerStyle.Normal:              graphicPath.AddLine(0' 0' Width - 1' 0);            regionPath.AddLine(0' 0' Width' 0);            graphicPath.AddLine(Width - 1' 0' Width - 1' Height - 1);            regionPath.AddLine(Width' 0' Width' Height);            graphicPath.AddLine(Width - 1' Height - 1' 0' Height - 1);            regionPath.AddLine(Width' Height' 0' Height);            graphicPath.AddLine(0' Height - 1' 0' 0);            regionPath.AddLine(0' Height' 0' 0);            break;            default:            throw new ApplicationException("Unrecognized style for rendering the corners");            break;        }
Magic Number,Stepi.UI,CornerCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CornerCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: switch (cornerStyle)        {          case CornerStyle.Rounded:              graphicPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            regionPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2 - 1' 0);            regionPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2' 0);            graphicPath.AddArc(Width - cornerSquare - 1' 0' cornerSquare' cornerSquare' -90' 90);            regionPath.AddArc(Width - cornerSquare' 0' cornerSquare' cornerSquare' -90' 90);              graphicPath.AddLine(Width - 1' cornerSquare - cornerSquare / 2' Width - 1'                                Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(Width' cornerSquare - cornerSquare / 2' Width' Height - cornerSquare + cornerSquare / 2);            graphicPath.AddArc(Width - cornerSquare - 1' Height - 1 - cornerSquare' cornerSquare' cornerSquare' 0' 90);            regionPath.AddArc(Width - cornerSquare' Height - cornerSquare' cornerSquare' cornerSquare' 0' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' Height - 1' Width - cornerSquare + cornerSquare / 2'                                Height - 1);            regionPath.AddLine(cornerSquare - cornerSquare / 2' Height' Width - cornerSquare + cornerSquare / 2' Height);              graphicPath.AddArc(0' Height - cornerSquare - 1' cornerSquare' cornerSquare' 90' 90);            regionPath.AddArc(0' Height - cornerSquare' cornerSquare' cornerSquare' 90' 90);              graphicPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            //this.Region = new Region(graphicPath);              //this.Region = new Region(graphicPath);            break;            case CornerStyle.Normal:              graphicPath.AddLine(0' 0' Width - 1' 0);            regionPath.AddLine(0' 0' Width' 0);            graphicPath.AddLine(Width - 1' 0' Width - 1' Height - 1);            regionPath.AddLine(Width' 0' Width' Height);            graphicPath.AddLine(Width - 1' Height - 1' 0' Height - 1);            regionPath.AddLine(Width' Height' 0' Height);            graphicPath.AddLine(0' Height - 1' 0' 0);            regionPath.AddLine(0' Height' 0' 0);            break;            default:            throw new ApplicationException("Unrecognized style for rendering the corners");            break;        }
Magic Number,Stepi.UI,CornerCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CornerCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: switch (cornerStyle)        {          case CornerStyle.Rounded:              graphicPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            regionPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2 - 1' 0);            regionPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2' 0);            graphicPath.AddArc(Width - cornerSquare - 1' 0' cornerSquare' cornerSquare' -90' 90);            regionPath.AddArc(Width - cornerSquare' 0' cornerSquare' cornerSquare' -90' 90);              graphicPath.AddLine(Width - 1' cornerSquare - cornerSquare / 2' Width - 1'                                Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(Width' cornerSquare - cornerSquare / 2' Width' Height - cornerSquare + cornerSquare / 2);            graphicPath.AddArc(Width - cornerSquare - 1' Height - 1 - cornerSquare' cornerSquare' cornerSquare' 0' 90);            regionPath.AddArc(Width - cornerSquare' Height - cornerSquare' cornerSquare' cornerSquare' 0' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' Height - 1' Width - cornerSquare + cornerSquare / 2'                                Height - 1);            regionPath.AddLine(cornerSquare - cornerSquare / 2' Height' Width - cornerSquare + cornerSquare / 2' Height);              graphicPath.AddArc(0' Height - cornerSquare - 1' cornerSquare' cornerSquare' 90' 90);            regionPath.AddArc(0' Height - cornerSquare' cornerSquare' cornerSquare' 90' 90);              graphicPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            //this.Region = new Region(graphicPath);              //this.Region = new Region(graphicPath);            break;            case CornerStyle.Normal:              graphicPath.AddLine(0' 0' Width - 1' 0);            regionPath.AddLine(0' 0' Width' 0);            graphicPath.AddLine(Width - 1' 0' Width - 1' Height - 1);            regionPath.AddLine(Width' 0' Width' Height);            graphicPath.AddLine(Width - 1' Height - 1' 0' Height - 1);            regionPath.AddLine(Width' Height' 0' Height);            graphicPath.AddLine(0' Height - 1' 0' 0);            regionPath.AddLine(0' Height' 0' 0);            break;            default:            throw new ApplicationException("Unrecognized style for rendering the corners");            break;        }
Magic Number,Stepi.UI,CornerCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CornerCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: switch (cornerStyle)        {          case CornerStyle.Rounded:              graphicPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            regionPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2 - 1' 0);            regionPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2' 0);            graphicPath.AddArc(Width - cornerSquare - 1' 0' cornerSquare' cornerSquare' -90' 90);            regionPath.AddArc(Width - cornerSquare' 0' cornerSquare' cornerSquare' -90' 90);              graphicPath.AddLine(Width - 1' cornerSquare - cornerSquare / 2' Width - 1'                                Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(Width' cornerSquare - cornerSquare / 2' Width' Height - cornerSquare + cornerSquare / 2);            graphicPath.AddArc(Width - cornerSquare - 1' Height - 1 - cornerSquare' cornerSquare' cornerSquare' 0' 90);            regionPath.AddArc(Width - cornerSquare' Height - cornerSquare' cornerSquare' cornerSquare' 0' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' Height - 1' Width - cornerSquare + cornerSquare / 2'                                Height - 1);            regionPath.AddLine(cornerSquare - cornerSquare / 2' Height' Width - cornerSquare + cornerSquare / 2' Height);              graphicPath.AddArc(0' Height - cornerSquare - 1' cornerSquare' cornerSquare' 90' 90);            regionPath.AddArc(0' Height - cornerSquare' cornerSquare' cornerSquare' 90' 90);              graphicPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            //this.Region = new Region(graphicPath);              //this.Region = new Region(graphicPath);            break;            case CornerStyle.Normal:              graphicPath.AddLine(0' 0' Width - 1' 0);            regionPath.AddLine(0' 0' Width' 0);            graphicPath.AddLine(Width - 1' 0' Width - 1' Height - 1);            regionPath.AddLine(Width' 0' Width' Height);            graphicPath.AddLine(Width - 1' Height - 1' 0' Height - 1);            regionPath.AddLine(Width' Height' 0' Height);            graphicPath.AddLine(0' Height - 1' 0' 0);            regionPath.AddLine(0' Height' 0' 0);            break;            default:            throw new ApplicationException("Unrecognized style for rendering the corners");            break;        }
Magic Number,Stepi.UI,CornerCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CornerCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: switch (cornerStyle)        {          case CornerStyle.Rounded:              graphicPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            regionPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2 - 1' 0);            regionPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2' 0);            graphicPath.AddArc(Width - cornerSquare - 1' 0' cornerSquare' cornerSquare' -90' 90);            regionPath.AddArc(Width - cornerSquare' 0' cornerSquare' cornerSquare' -90' 90);              graphicPath.AddLine(Width - 1' cornerSquare - cornerSquare / 2' Width - 1'                                Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(Width' cornerSquare - cornerSquare / 2' Width' Height - cornerSquare + cornerSquare / 2);            graphicPath.AddArc(Width - cornerSquare - 1' Height - 1 - cornerSquare' cornerSquare' cornerSquare' 0' 90);            regionPath.AddArc(Width - cornerSquare' Height - cornerSquare' cornerSquare' cornerSquare' 0' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' Height - 1' Width - cornerSquare + cornerSquare / 2'                                Height - 1);            regionPath.AddLine(cornerSquare - cornerSquare / 2' Height' Width - cornerSquare + cornerSquare / 2' Height);              graphicPath.AddArc(0' Height - cornerSquare - 1' cornerSquare' cornerSquare' 90' 90);            regionPath.AddArc(0' Height - cornerSquare' cornerSquare' cornerSquare' 90' 90);              graphicPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            //this.Region = new Region(graphicPath);              //this.Region = new Region(graphicPath);            break;            case CornerStyle.Normal:              graphicPath.AddLine(0' 0' Width - 1' 0);            regionPath.AddLine(0' 0' Width' 0);            graphicPath.AddLine(Width - 1' 0' Width - 1' Height - 1);            regionPath.AddLine(Width' 0' Width' Height);            graphicPath.AddLine(Width - 1' Height - 1' 0' Height - 1);            regionPath.AddLine(Width' Height' 0' Height);            graphicPath.AddLine(0' Height - 1' 0' 0);            regionPath.AddLine(0' Height' 0' 0);            break;            default:            throw new ApplicationException("Unrecognized style for rendering the corners");            break;        }
Magic Number,Stepi.UI,CornerCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CornerCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: switch (cornerStyle)        {          case CornerStyle.Rounded:              graphicPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            regionPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2 - 1' 0);            regionPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2' 0);            graphicPath.AddArc(Width - cornerSquare - 1' 0' cornerSquare' cornerSquare' -90' 90);            regionPath.AddArc(Width - cornerSquare' 0' cornerSquare' cornerSquare' -90' 90);              graphicPath.AddLine(Width - 1' cornerSquare - cornerSquare / 2' Width - 1'                                Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(Width' cornerSquare - cornerSquare / 2' Width' Height - cornerSquare + cornerSquare / 2);            graphicPath.AddArc(Width - cornerSquare - 1' Height - 1 - cornerSquare' cornerSquare' cornerSquare' 0' 90);            regionPath.AddArc(Width - cornerSquare' Height - cornerSquare' cornerSquare' cornerSquare' 0' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' Height - 1' Width - cornerSquare + cornerSquare / 2'                                Height - 1);            regionPath.AddLine(cornerSquare - cornerSquare / 2' Height' Width - cornerSquare + cornerSquare / 2' Height);              graphicPath.AddArc(0' Height - cornerSquare - 1' cornerSquare' cornerSquare' 90' 90);            regionPath.AddArc(0' Height - cornerSquare' cornerSquare' cornerSquare' 90' 90);              graphicPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            //this.Region = new Region(graphicPath);              //this.Region = new Region(graphicPath);            break;            case CornerStyle.Normal:              graphicPath.AddLine(0' 0' Width - 1' 0);            regionPath.AddLine(0' 0' Width' 0);            graphicPath.AddLine(Width - 1' 0' Width - 1' Height - 1);            regionPath.AddLine(Width' 0' Width' Height);            graphicPath.AddLine(Width - 1' Height - 1' 0' Height - 1);            regionPath.AddLine(Width' Height' 0' Height);            graphicPath.AddLine(0' Height - 1' 0' 0);            regionPath.AddLine(0' Height' 0' 0);            break;            default:            throw new ApplicationException("Unrecognized style for rendering the corners");            break;        }
Magic Number,Stepi.UI,CornerCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CornerCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: switch (cornerStyle)        {          case CornerStyle.Rounded:              graphicPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            regionPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2 - 1' 0);            regionPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2' 0);            graphicPath.AddArc(Width - cornerSquare - 1' 0' cornerSquare' cornerSquare' -90' 90);            regionPath.AddArc(Width - cornerSquare' 0' cornerSquare' cornerSquare' -90' 90);              graphicPath.AddLine(Width - 1' cornerSquare - cornerSquare / 2' Width - 1'                                Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(Width' cornerSquare - cornerSquare / 2' Width' Height - cornerSquare + cornerSquare / 2);            graphicPath.AddArc(Width - cornerSquare - 1' Height - 1 - cornerSquare' cornerSquare' cornerSquare' 0' 90);            regionPath.AddArc(Width - cornerSquare' Height - cornerSquare' cornerSquare' cornerSquare' 0' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' Height - 1' Width - cornerSquare + cornerSquare / 2'                                Height - 1);            regionPath.AddLine(cornerSquare - cornerSquare / 2' Height' Width - cornerSquare + cornerSquare / 2' Height);              graphicPath.AddArc(0' Height - cornerSquare - 1' cornerSquare' cornerSquare' 90' 90);            regionPath.AddArc(0' Height - cornerSquare' cornerSquare' cornerSquare' 90' 90);              graphicPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            //this.Region = new Region(graphicPath);              //this.Region = new Region(graphicPath);            break;            case CornerStyle.Normal:              graphicPath.AddLine(0' 0' Width - 1' 0);            regionPath.AddLine(0' 0' Width' 0);            graphicPath.AddLine(Width - 1' 0' Width - 1' Height - 1);            regionPath.AddLine(Width' 0' Width' Height);            graphicPath.AddLine(Width - 1' Height - 1' 0' Height - 1);            regionPath.AddLine(Width' Height' 0' Height);            graphicPath.AddLine(0' Height - 1' 0' 0);            regionPath.AddLine(0' Height' 0' 0);            break;            default:            throw new ApplicationException("Unrecognized style for rendering the corners");            break;        }
Magic Number,Stepi.UI,CornerCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CornerCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: switch (cornerStyle)        {          case CornerStyle.Rounded:              graphicPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            regionPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2 - 1' 0);            regionPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2' 0);            graphicPath.AddArc(Width - cornerSquare - 1' 0' cornerSquare' cornerSquare' -90' 90);            regionPath.AddArc(Width - cornerSquare' 0' cornerSquare' cornerSquare' -90' 90);              graphicPath.AddLine(Width - 1' cornerSquare - cornerSquare / 2' Width - 1'                                Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(Width' cornerSquare - cornerSquare / 2' Width' Height - cornerSquare + cornerSquare / 2);            graphicPath.AddArc(Width - cornerSquare - 1' Height - 1 - cornerSquare' cornerSquare' cornerSquare' 0' 90);            regionPath.AddArc(Width - cornerSquare' Height - cornerSquare' cornerSquare' cornerSquare' 0' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' Height - 1' Width - cornerSquare + cornerSquare / 2'                                Height - 1);            regionPath.AddLine(cornerSquare - cornerSquare / 2' Height' Width - cornerSquare + cornerSquare / 2' Height);              graphicPath.AddArc(0' Height - cornerSquare - 1' cornerSquare' cornerSquare' 90' 90);            regionPath.AddArc(0' Height - cornerSquare' cornerSquare' cornerSquare' 90' 90);              graphicPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            //this.Region = new Region(graphicPath);              //this.Region = new Region(graphicPath);            break;            case CornerStyle.Normal:              graphicPath.AddLine(0' 0' Width - 1' 0);            regionPath.AddLine(0' 0' Width' 0);            graphicPath.AddLine(Width - 1' 0' Width - 1' Height - 1);            regionPath.AddLine(Width' 0' Width' Height);            graphicPath.AddLine(Width - 1' Height - 1' 0' Height - 1);            regionPath.AddLine(Width' Height' 0' Height);            graphicPath.AddLine(0' Height - 1' 0' 0);            regionPath.AddLine(0' Height' 0' 0);            break;            default:            throw new ApplicationException("Unrecognized style for rendering the corners");            break;        }
Magic Number,Stepi.UI,CornerCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CornerCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: switch (cornerStyle)        {          case CornerStyle.Rounded:              graphicPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            regionPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2 - 1' 0);            regionPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2' 0);            graphicPath.AddArc(Width - cornerSquare - 1' 0' cornerSquare' cornerSquare' -90' 90);            regionPath.AddArc(Width - cornerSquare' 0' cornerSquare' cornerSquare' -90' 90);              graphicPath.AddLine(Width - 1' cornerSquare - cornerSquare / 2' Width - 1'                                Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(Width' cornerSquare - cornerSquare / 2' Width' Height - cornerSquare + cornerSquare / 2);            graphicPath.AddArc(Width - cornerSquare - 1' Height - 1 - cornerSquare' cornerSquare' cornerSquare' 0' 90);            regionPath.AddArc(Width - cornerSquare' Height - cornerSquare' cornerSquare' cornerSquare' 0' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' Height - 1' Width - cornerSquare + cornerSquare / 2'                                Height - 1);            regionPath.AddLine(cornerSquare - cornerSquare / 2' Height' Width - cornerSquare + cornerSquare / 2' Height);              graphicPath.AddArc(0' Height - cornerSquare - 1' cornerSquare' cornerSquare' 90' 90);            regionPath.AddArc(0' Height - cornerSquare' cornerSquare' cornerSquare' 90' 90);              graphicPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            //this.Region = new Region(graphicPath);              //this.Region = new Region(graphicPath);            break;            case CornerStyle.Normal:              graphicPath.AddLine(0' 0' Width - 1' 0);            regionPath.AddLine(0' 0' Width' 0);            graphicPath.AddLine(Width - 1' 0' Width - 1' Height - 1);            regionPath.AddLine(Width' 0' Width' Height);            graphicPath.AddLine(Width - 1' Height - 1' 0' Height - 1);            regionPath.AddLine(Width' Height' 0' Height);            graphicPath.AddLine(0' Height - 1' 0' 0);            regionPath.AddLine(0' Height' 0' 0);            break;            default:            throw new ApplicationException("Unrecognized style for rendering the corners");            break;        }
Magic Number,Stepi.UI,CornerCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CornerCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: switch (cornerStyle)        {          case CornerStyle.Rounded:              graphicPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            regionPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2 - 1' 0);            regionPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2' 0);            graphicPath.AddArc(Width - cornerSquare - 1' 0' cornerSquare' cornerSquare' -90' 90);            regionPath.AddArc(Width - cornerSquare' 0' cornerSquare' cornerSquare' -90' 90);              graphicPath.AddLine(Width - 1' cornerSquare - cornerSquare / 2' Width - 1'                                Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(Width' cornerSquare - cornerSquare / 2' Width' Height - cornerSquare + cornerSquare / 2);            graphicPath.AddArc(Width - cornerSquare - 1' Height - 1 - cornerSquare' cornerSquare' cornerSquare' 0' 90);            regionPath.AddArc(Width - cornerSquare' Height - cornerSquare' cornerSquare' cornerSquare' 0' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' Height - 1' Width - cornerSquare + cornerSquare / 2'                                Height - 1);            regionPath.AddLine(cornerSquare - cornerSquare / 2' Height' Width - cornerSquare + cornerSquare / 2' Height);              graphicPath.AddArc(0' Height - cornerSquare - 1' cornerSquare' cornerSquare' 90' 90);            regionPath.AddArc(0' Height - cornerSquare' cornerSquare' cornerSquare' 90' 90);              graphicPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            //this.Region = new Region(graphicPath);              //this.Region = new Region(graphicPath);            break;            case CornerStyle.Normal:              graphicPath.AddLine(0' 0' Width - 1' 0);            regionPath.AddLine(0' 0' Width' 0);            graphicPath.AddLine(Width - 1' 0' Width - 1' Height - 1);            regionPath.AddLine(Width' 0' Width' Height);            graphicPath.AddLine(Width - 1' Height - 1' 0' Height - 1);            regionPath.AddLine(Width' Height' 0' Height);            graphicPath.AddLine(0' Height - 1' 0' 0);            regionPath.AddLine(0' Height' 0' 0);            break;            default:            throw new ApplicationException("Unrecognized style for rendering the corners");            break;        }
Magic Number,Stepi.UI,CornerCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CornerCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: switch (cornerStyle)        {          case CornerStyle.Rounded:              graphicPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            regionPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2 - 1' 0);            regionPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2' 0);            graphicPath.AddArc(Width - cornerSquare - 1' 0' cornerSquare' cornerSquare' -90' 90);            regionPath.AddArc(Width - cornerSquare' 0' cornerSquare' cornerSquare' -90' 90);              graphicPath.AddLine(Width - 1' cornerSquare - cornerSquare / 2' Width - 1'                                Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(Width' cornerSquare - cornerSquare / 2' Width' Height - cornerSquare + cornerSquare / 2);            graphicPath.AddArc(Width - cornerSquare - 1' Height - 1 - cornerSquare' cornerSquare' cornerSquare' 0' 90);            regionPath.AddArc(Width - cornerSquare' Height - cornerSquare' cornerSquare' cornerSquare' 0' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' Height - 1' Width - cornerSquare + cornerSquare / 2'                                Height - 1);            regionPath.AddLine(cornerSquare - cornerSquare / 2' Height' Width - cornerSquare + cornerSquare / 2' Height);              graphicPath.AddArc(0' Height - cornerSquare - 1' cornerSquare' cornerSquare' 90' 90);            regionPath.AddArc(0' Height - cornerSquare' cornerSquare' cornerSquare' 90' 90);              graphicPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            //this.Region = new Region(graphicPath);              //this.Region = new Region(graphicPath);            break;            case CornerStyle.Normal:              graphicPath.AddLine(0' 0' Width - 1' 0);            regionPath.AddLine(0' 0' Width' 0);            graphicPath.AddLine(Width - 1' 0' Width - 1' Height - 1);            regionPath.AddLine(Width' 0' Width' Height);            graphicPath.AddLine(Width - 1' Height - 1' 0' Height - 1);            regionPath.AddLine(Width' Height' 0' Height);            graphicPath.AddLine(0' Height - 1' 0' 0);            regionPath.AddLine(0' Height' 0' 0);            break;            default:            throw new ApplicationException("Unrecognized style for rendering the corners");            break;        }
Magic Number,Stepi.UI,CornerCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CornerCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: switch (cornerStyle)        {          case CornerStyle.Rounded:              graphicPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            regionPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2 - 1' 0);            regionPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2' 0);            graphicPath.AddArc(Width - cornerSquare - 1' 0' cornerSquare' cornerSquare' -90' 90);            regionPath.AddArc(Width - cornerSquare' 0' cornerSquare' cornerSquare' -90' 90);              graphicPath.AddLine(Width - 1' cornerSquare - cornerSquare / 2' Width - 1'                                Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(Width' cornerSquare - cornerSquare / 2' Width' Height - cornerSquare + cornerSquare / 2);            graphicPath.AddArc(Width - cornerSquare - 1' Height - 1 - cornerSquare' cornerSquare' cornerSquare' 0' 90);            regionPath.AddArc(Width - cornerSquare' Height - cornerSquare' cornerSquare' cornerSquare' 0' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' Height - 1' Width - cornerSquare + cornerSquare / 2'                                Height - 1);            regionPath.AddLine(cornerSquare - cornerSquare / 2' Height' Width - cornerSquare + cornerSquare / 2' Height);              graphicPath.AddArc(0' Height - cornerSquare - 1' cornerSquare' cornerSquare' 90' 90);            regionPath.AddArc(0' Height - cornerSquare' cornerSquare' cornerSquare' 90' 90);              graphicPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            //this.Region = new Region(graphicPath);              //this.Region = new Region(graphicPath);            break;            case CornerStyle.Normal:              graphicPath.AddLine(0' 0' Width - 1' 0);            regionPath.AddLine(0' 0' Width' 0);            graphicPath.AddLine(Width - 1' 0' Width - 1' Height - 1);            regionPath.AddLine(Width' 0' Width' Height);            graphicPath.AddLine(Width - 1' Height - 1' 0' Height - 1);            regionPath.AddLine(Width' Height' 0' Height);            graphicPath.AddLine(0' Height - 1' 0' 0);            regionPath.AddLine(0' Height' 0' 0);            break;            default:            throw new ApplicationException("Unrecognized style for rendering the corners");            break;        }
Magic Number,Stepi.UI,CornerCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CornerCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: switch (cornerStyle)        {          case CornerStyle.Rounded:              graphicPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            regionPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2 - 1' 0);            regionPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2' 0);            graphicPath.AddArc(Width - cornerSquare - 1' 0' cornerSquare' cornerSquare' -90' 90);            regionPath.AddArc(Width - cornerSquare' 0' cornerSquare' cornerSquare' -90' 90);              graphicPath.AddLine(Width - 1' cornerSquare - cornerSquare / 2' Width - 1'                                Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(Width' cornerSquare - cornerSquare / 2' Width' Height - cornerSquare + cornerSquare / 2);            graphicPath.AddArc(Width - cornerSquare - 1' Height - 1 - cornerSquare' cornerSquare' cornerSquare' 0' 90);            regionPath.AddArc(Width - cornerSquare' Height - cornerSquare' cornerSquare' cornerSquare' 0' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' Height - 1' Width - cornerSquare + cornerSquare / 2'                                Height - 1);            regionPath.AddLine(cornerSquare - cornerSquare / 2' Height' Width - cornerSquare + cornerSquare / 2' Height);              graphicPath.AddArc(0' Height - cornerSquare - 1' cornerSquare' cornerSquare' 90' 90);            regionPath.AddArc(0' Height - cornerSquare' cornerSquare' cornerSquare' 90' 90);              graphicPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            //this.Region = new Region(graphicPath);              //this.Region = new Region(graphicPath);            break;            case CornerStyle.Normal:              graphicPath.AddLine(0' 0' Width - 1' 0);            regionPath.AddLine(0' 0' Width' 0);            graphicPath.AddLine(Width - 1' 0' Width - 1' Height - 1);            regionPath.AddLine(Width' 0' Width' Height);            graphicPath.AddLine(Width - 1' Height - 1' 0' Height - 1);            regionPath.AddLine(Width' Height' 0' Height);            graphicPath.AddLine(0' Height - 1' 0' 0);            regionPath.AddLine(0' Height' 0' 0);            break;            default:            throw new ApplicationException("Unrecognized style for rendering the corners");            break;        }
Magic Number,Stepi.UI,CornerCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CornerCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: switch (cornerStyle)        {          case CornerStyle.Rounded:              graphicPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            regionPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2 - 1' 0);            regionPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2' 0);            graphicPath.AddArc(Width - cornerSquare - 1' 0' cornerSquare' cornerSquare' -90' 90);            regionPath.AddArc(Width - cornerSquare' 0' cornerSquare' cornerSquare' -90' 90);              graphicPath.AddLine(Width - 1' cornerSquare - cornerSquare / 2' Width - 1'                                Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(Width' cornerSquare - cornerSquare / 2' Width' Height - cornerSquare + cornerSquare / 2);            graphicPath.AddArc(Width - cornerSquare - 1' Height - 1 - cornerSquare' cornerSquare' cornerSquare' 0' 90);            regionPath.AddArc(Width - cornerSquare' Height - cornerSquare' cornerSquare' cornerSquare' 0' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' Height - 1' Width - cornerSquare + cornerSquare / 2'                                Height - 1);            regionPath.AddLine(cornerSquare - cornerSquare / 2' Height' Width - cornerSquare + cornerSquare / 2' Height);              graphicPath.AddArc(0' Height - cornerSquare - 1' cornerSquare' cornerSquare' 90' 90);            regionPath.AddArc(0' Height - cornerSquare' cornerSquare' cornerSquare' 90' 90);              graphicPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            //this.Region = new Region(graphicPath);              //this.Region = new Region(graphicPath);            break;            case CornerStyle.Normal:              graphicPath.AddLine(0' 0' Width - 1' 0);            regionPath.AddLine(0' 0' Width' 0);            graphicPath.AddLine(Width - 1' 0' Width - 1' Height - 1);            regionPath.AddLine(Width' 0' Width' Height);            graphicPath.AddLine(Width - 1' Height - 1' 0' Height - 1);            regionPath.AddLine(Width' Height' 0' Height);            graphicPath.AddLine(0' Height - 1' 0' 0);            regionPath.AddLine(0' Height' 0' 0);            break;            default:            throw new ApplicationException("Unrecognized style for rendering the corners");            break;        }
Magic Number,Stepi.UI,CornerCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CornerCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: switch (cornerStyle)        {          case CornerStyle.Rounded:              graphicPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            regionPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2 - 1' 0);            regionPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2' 0);            graphicPath.AddArc(Width - cornerSquare - 1' 0' cornerSquare' cornerSquare' -90' 90);            regionPath.AddArc(Width - cornerSquare' 0' cornerSquare' cornerSquare' -90' 90);              graphicPath.AddLine(Width - 1' cornerSquare - cornerSquare / 2' Width - 1'                                Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(Width' cornerSquare - cornerSquare / 2' Width' Height - cornerSquare + cornerSquare / 2);            graphicPath.AddArc(Width - cornerSquare - 1' Height - 1 - cornerSquare' cornerSquare' cornerSquare' 0' 90);            regionPath.AddArc(Width - cornerSquare' Height - cornerSquare' cornerSquare' cornerSquare' 0' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' Height - 1' Width - cornerSquare + cornerSquare / 2'                                Height - 1);            regionPath.AddLine(cornerSquare - cornerSquare / 2' Height' Width - cornerSquare + cornerSquare / 2' Height);              graphicPath.AddArc(0' Height - cornerSquare - 1' cornerSquare' cornerSquare' 90' 90);            regionPath.AddArc(0' Height - cornerSquare' cornerSquare' cornerSquare' 90' 90);              graphicPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            //this.Region = new Region(graphicPath);              //this.Region = new Region(graphicPath);            break;            case CornerStyle.Normal:              graphicPath.AddLine(0' 0' Width - 1' 0);            regionPath.AddLine(0' 0' Width' 0);            graphicPath.AddLine(Width - 1' 0' Width - 1' Height - 1);            regionPath.AddLine(Width' 0' Width' Height);            graphicPath.AddLine(Width - 1' Height - 1' 0' Height - 1);            regionPath.AddLine(Width' Height' 0' Height);            graphicPath.AddLine(0' Height - 1' 0' 0);            regionPath.AddLine(0' Height' 0' 0);            break;            default:            throw new ApplicationException("Unrecognized style for rendering the corners");            break;        }
Magic Number,Stepi.UI,CornerCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CornerCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: switch (cornerStyle)        {          case CornerStyle.Rounded:              graphicPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            regionPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2 - 1' 0);            regionPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2' 0);            graphicPath.AddArc(Width - cornerSquare - 1' 0' cornerSquare' cornerSquare' -90' 90);            regionPath.AddArc(Width - cornerSquare' 0' cornerSquare' cornerSquare' -90' 90);              graphicPath.AddLine(Width - 1' cornerSquare - cornerSquare / 2' Width - 1'                                Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(Width' cornerSquare - cornerSquare / 2' Width' Height - cornerSquare + cornerSquare / 2);            graphicPath.AddArc(Width - cornerSquare - 1' Height - 1 - cornerSquare' cornerSquare' cornerSquare' 0' 90);            regionPath.AddArc(Width - cornerSquare' Height - cornerSquare' cornerSquare' cornerSquare' 0' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' Height - 1' Width - cornerSquare + cornerSquare / 2'                                Height - 1);            regionPath.AddLine(cornerSquare - cornerSquare / 2' Height' Width - cornerSquare + cornerSquare / 2' Height);              graphicPath.AddArc(0' Height - cornerSquare - 1' cornerSquare' cornerSquare' 90' 90);            regionPath.AddArc(0' Height - cornerSquare' cornerSquare' cornerSquare' 90' 90);              graphicPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            //this.Region = new Region(graphicPath);              //this.Region = new Region(graphicPath);            break;            case CornerStyle.Normal:              graphicPath.AddLine(0' 0' Width - 1' 0);            regionPath.AddLine(0' 0' Width' 0);            graphicPath.AddLine(Width - 1' 0' Width - 1' Height - 1);            regionPath.AddLine(Width' 0' Width' Height);            graphicPath.AddLine(Width - 1' Height - 1' 0' Height - 1);            regionPath.AddLine(Width' Height' 0' Height);            graphicPath.AddLine(0' Height - 1' 0' 0);            regionPath.AddLine(0' Height' 0' 0);            break;            default:            throw new ApplicationException("Unrecognized style for rendering the corners");            break;        }
Magic Number,Stepi.UI,CornerCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CornerCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: switch (cornerStyle)        {          case CornerStyle.Rounded:              graphicPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            regionPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2 - 1' 0);            regionPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2' 0);            graphicPath.AddArc(Width - cornerSquare - 1' 0' cornerSquare' cornerSquare' -90' 90);            regionPath.AddArc(Width - cornerSquare' 0' cornerSquare' cornerSquare' -90' 90);              graphicPath.AddLine(Width - 1' cornerSquare - cornerSquare / 2' Width - 1'                                Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(Width' cornerSquare - cornerSquare / 2' Width' Height - cornerSquare + cornerSquare / 2);            graphicPath.AddArc(Width - cornerSquare - 1' Height - 1 - cornerSquare' cornerSquare' cornerSquare' 0' 90);            regionPath.AddArc(Width - cornerSquare' Height - cornerSquare' cornerSquare' cornerSquare' 0' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' Height - 1' Width - cornerSquare + cornerSquare / 2'                                Height - 1);            regionPath.AddLine(cornerSquare - cornerSquare / 2' Height' Width - cornerSquare + cornerSquare / 2' Height);              graphicPath.AddArc(0' Height - cornerSquare - 1' cornerSquare' cornerSquare' 90' 90);            regionPath.AddArc(0' Height - cornerSquare' cornerSquare' cornerSquare' 90' 90);              graphicPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            //this.Region = new Region(graphicPath);              //this.Region = new Region(graphicPath);            break;            case CornerStyle.Normal:              graphicPath.AddLine(0' 0' Width - 1' 0);            regionPath.AddLine(0' 0' Width' 0);            graphicPath.AddLine(Width - 1' 0' Width - 1' Height - 1);            regionPath.AddLine(Width' 0' Width' Height);            graphicPath.AddLine(Width - 1' Height - 1' 0' Height - 1);            regionPath.AddLine(Width' Height' 0' Height);            graphicPath.AddLine(0' Height - 1' 0' 0);            regionPath.AddLine(0' Height' 0' 0);            break;            default:            throw new ApplicationException("Unrecognized style for rendering the corners");            break;        }
Magic Number,Stepi.UI,CornerCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CornerCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: switch (cornerStyle)        {          case CornerStyle.Rounded:              graphicPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            regionPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2 - 1' 0);            regionPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2' 0);            graphicPath.AddArc(Width - cornerSquare - 1' 0' cornerSquare' cornerSquare' -90' 90);            regionPath.AddArc(Width - cornerSquare' 0' cornerSquare' cornerSquare' -90' 90);              graphicPath.AddLine(Width - 1' cornerSquare - cornerSquare / 2' Width - 1'                                Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(Width' cornerSquare - cornerSquare / 2' Width' Height - cornerSquare + cornerSquare / 2);            graphicPath.AddArc(Width - cornerSquare - 1' Height - 1 - cornerSquare' cornerSquare' cornerSquare' 0' 90);            regionPath.AddArc(Width - cornerSquare' Height - cornerSquare' cornerSquare' cornerSquare' 0' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' Height - 1' Width - cornerSquare + cornerSquare / 2'                                Height - 1);            regionPath.AddLine(cornerSquare - cornerSquare / 2' Height' Width - cornerSquare + cornerSquare / 2' Height);              graphicPath.AddArc(0' Height - cornerSquare - 1' cornerSquare' cornerSquare' 90' 90);            regionPath.AddArc(0' Height - cornerSquare' cornerSquare' cornerSquare' 90' 90);              graphicPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            //this.Region = new Region(graphicPath);              //this.Region = new Region(graphicPath);            break;            case CornerStyle.Normal:              graphicPath.AddLine(0' 0' Width - 1' 0);            regionPath.AddLine(0' 0' Width' 0);            graphicPath.AddLine(Width - 1' 0' Width - 1' Height - 1);            regionPath.AddLine(Width' 0' Width' Height);            graphicPath.AddLine(Width - 1' Height - 1' 0' Height - 1);            regionPath.AddLine(Width' Height' 0' Height);            graphicPath.AddLine(0' Height - 1' 0' 0);            regionPath.AddLine(0' Height' 0' 0);            break;            default:            throw new ApplicationException("Unrecognized style for rendering the corners");            break;        }
Magic Number,Stepi.UI,CornerCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CornerCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: switch (cornerStyle)        {          case CornerStyle.Rounded:              graphicPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            regionPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2 - 1' 0);            regionPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2' 0);            graphicPath.AddArc(Width - cornerSquare - 1' 0' cornerSquare' cornerSquare' -90' 90);            regionPath.AddArc(Width - cornerSquare' 0' cornerSquare' cornerSquare' -90' 90);              graphicPath.AddLine(Width - 1' cornerSquare - cornerSquare / 2' Width - 1'                                Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(Width' cornerSquare - cornerSquare / 2' Width' Height - cornerSquare + cornerSquare / 2);            graphicPath.AddArc(Width - cornerSquare - 1' Height - 1 - cornerSquare' cornerSquare' cornerSquare' 0' 90);            regionPath.AddArc(Width - cornerSquare' Height - cornerSquare' cornerSquare' cornerSquare' 0' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' Height - 1' Width - cornerSquare + cornerSquare / 2'                                Height - 1);            regionPath.AddLine(cornerSquare - cornerSquare / 2' Height' Width - cornerSquare + cornerSquare / 2' Height);              graphicPath.AddArc(0' Height - cornerSquare - 1' cornerSquare' cornerSquare' 90' 90);            regionPath.AddArc(0' Height - cornerSquare' cornerSquare' cornerSquare' 90' 90);              graphicPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            //this.Region = new Region(graphicPath);              //this.Region = new Region(graphicPath);            break;            case CornerStyle.Normal:              graphicPath.AddLine(0' 0' Width - 1' 0);            regionPath.AddLine(0' 0' Width' 0);            graphicPath.AddLine(Width - 1' 0' Width - 1' Height - 1);            regionPath.AddLine(Width' 0' Width' Height);            graphicPath.AddLine(Width - 1' Height - 1' 0' Height - 1);            regionPath.AddLine(Width' Height' 0' Height);            graphicPath.AddLine(0' Height - 1' 0' 0);            regionPath.AddLine(0' Height' 0' 0);            break;            default:            throw new ApplicationException("Unrecognized style for rendering the corners");            break;        }
Magic Number,Stepi.UI,CornerCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CornerCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: switch (cornerStyle)        {          case CornerStyle.Rounded:              graphicPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            regionPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2 - 1' 0);            regionPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2' 0);            graphicPath.AddArc(Width - cornerSquare - 1' 0' cornerSquare' cornerSquare' -90' 90);            regionPath.AddArc(Width - cornerSquare' 0' cornerSquare' cornerSquare' -90' 90);              graphicPath.AddLine(Width - 1' cornerSquare - cornerSquare / 2' Width - 1'                                Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(Width' cornerSquare - cornerSquare / 2' Width' Height - cornerSquare + cornerSquare / 2);            graphicPath.AddArc(Width - cornerSquare - 1' Height - 1 - cornerSquare' cornerSquare' cornerSquare' 0' 90);            regionPath.AddArc(Width - cornerSquare' Height - cornerSquare' cornerSquare' cornerSquare' 0' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' Height - 1' Width - cornerSquare + cornerSquare / 2'                                Height - 1);            regionPath.AddLine(cornerSquare - cornerSquare / 2' Height' Width - cornerSquare + cornerSquare / 2' Height);              graphicPath.AddArc(0' Height - cornerSquare - 1' cornerSquare' cornerSquare' 90' 90);            regionPath.AddArc(0' Height - cornerSquare' cornerSquare' cornerSquare' 90' 90);              graphicPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            //this.Region = new Region(graphicPath);              //this.Region = new Region(graphicPath);            break;            case CornerStyle.Normal:              graphicPath.AddLine(0' 0' Width - 1' 0);            regionPath.AddLine(0' 0' Width' 0);            graphicPath.AddLine(Width - 1' 0' Width - 1' Height - 1);            regionPath.AddLine(Width' 0' Width' Height);            graphicPath.AddLine(Width - 1' Height - 1' 0' Height - 1);            regionPath.AddLine(Width' Height' 0' Height);            graphicPath.AddLine(0' Height - 1' 0' 0);            regionPath.AddLine(0' Height' 0' 0);            break;            default:            throw new ApplicationException("Unrecognized style for rendering the corners");            break;        }
Magic Number,Stepi.UI,CornerCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CornerCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: switch (cornerStyle)        {          case CornerStyle.Rounded:              graphicPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            regionPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2 - 1' 0);            regionPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2' 0);            graphicPath.AddArc(Width - cornerSquare - 1' 0' cornerSquare' cornerSquare' -90' 90);            regionPath.AddArc(Width - cornerSquare' 0' cornerSquare' cornerSquare' -90' 90);              graphicPath.AddLine(Width - 1' cornerSquare - cornerSquare / 2' Width - 1'                                Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(Width' cornerSquare - cornerSquare / 2' Width' Height - cornerSquare + cornerSquare / 2);            graphicPath.AddArc(Width - cornerSquare - 1' Height - 1 - cornerSquare' cornerSquare' cornerSquare' 0' 90);            regionPath.AddArc(Width - cornerSquare' Height - cornerSquare' cornerSquare' cornerSquare' 0' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' Height - 1' Width - cornerSquare + cornerSquare / 2'                                Height - 1);            regionPath.AddLine(cornerSquare - cornerSquare / 2' Height' Width - cornerSquare + cornerSquare / 2' Height);              graphicPath.AddArc(0' Height - cornerSquare - 1' cornerSquare' cornerSquare' 90' 90);            regionPath.AddArc(0' Height - cornerSquare' cornerSquare' cornerSquare' 90' 90);              graphicPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            //this.Region = new Region(graphicPath);              //this.Region = new Region(graphicPath);            break;            case CornerStyle.Normal:              graphicPath.AddLine(0' 0' Width - 1' 0);            regionPath.AddLine(0' 0' Width' 0);            graphicPath.AddLine(Width - 1' 0' Width - 1' Height - 1);            regionPath.AddLine(Width' 0' Width' Height);            graphicPath.AddLine(Width - 1' Height - 1' 0' Height - 1);            regionPath.AddLine(Width' Height' 0' Height);            graphicPath.AddLine(0' Height - 1' 0' 0);            regionPath.AddLine(0' Height' 0' 0);            break;            default:            throw new ApplicationException("Unrecognized style for rendering the corners");            break;        }
Magic Number,Stepi.UI,CornerCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CornerCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: switch (cornerStyle)        {          case CornerStyle.Rounded:              graphicPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            regionPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2 - 1' 0);            regionPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2' 0);            graphicPath.AddArc(Width - cornerSquare - 1' 0' cornerSquare' cornerSquare' -90' 90);            regionPath.AddArc(Width - cornerSquare' 0' cornerSquare' cornerSquare' -90' 90);              graphicPath.AddLine(Width - 1' cornerSquare - cornerSquare / 2' Width - 1'                                Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(Width' cornerSquare - cornerSquare / 2' Width' Height - cornerSquare + cornerSquare / 2);            graphicPath.AddArc(Width - cornerSquare - 1' Height - 1 - cornerSquare' cornerSquare' cornerSquare' 0' 90);            regionPath.AddArc(Width - cornerSquare' Height - cornerSquare' cornerSquare' cornerSquare' 0' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' Height - 1' Width - cornerSquare + cornerSquare / 2'                                Height - 1);            regionPath.AddLine(cornerSquare - cornerSquare / 2' Height' Width - cornerSquare + cornerSquare / 2' Height);              graphicPath.AddArc(0' Height - cornerSquare - 1' cornerSquare' cornerSquare' 90' 90);            regionPath.AddArc(0' Height - cornerSquare' cornerSquare' cornerSquare' 90' 90);              graphicPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            //this.Region = new Region(graphicPath);              //this.Region = new Region(graphicPath);            break;            case CornerStyle.Normal:              graphicPath.AddLine(0' 0' Width - 1' 0);            regionPath.AddLine(0' 0' Width' 0);            graphicPath.AddLine(Width - 1' 0' Width - 1' Height - 1);            regionPath.AddLine(Width' 0' Width' Height);            graphicPath.AddLine(Width - 1' Height - 1' 0' Height - 1);            regionPath.AddLine(Width' Height' 0' Height);            graphicPath.AddLine(0' Height - 1' 0' 0);            regionPath.AddLine(0' Height' 0' 0);            break;            default:            throw new ApplicationException("Unrecognized style for rendering the corners");            break;        }
Magic Number,Stepi.UI,CornerCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CornerCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: switch (cornerStyle)        {          case CornerStyle.Rounded:              graphicPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            regionPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2 - 1' 0);            regionPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2' 0);            graphicPath.AddArc(Width - cornerSquare - 1' 0' cornerSquare' cornerSquare' -90' 90);            regionPath.AddArc(Width - cornerSquare' 0' cornerSquare' cornerSquare' -90' 90);              graphicPath.AddLine(Width - 1' cornerSquare - cornerSquare / 2' Width - 1'                                Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(Width' cornerSquare - cornerSquare / 2' Width' Height - cornerSquare + cornerSquare / 2);            graphicPath.AddArc(Width - cornerSquare - 1' Height - 1 - cornerSquare' cornerSquare' cornerSquare' 0' 90);            regionPath.AddArc(Width - cornerSquare' Height - cornerSquare' cornerSquare' cornerSquare' 0' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' Height - 1' Width - cornerSquare + cornerSquare / 2'                                Height - 1);            regionPath.AddLine(cornerSquare - cornerSquare / 2' Height' Width - cornerSquare + cornerSquare / 2' Height);              graphicPath.AddArc(0' Height - cornerSquare - 1' cornerSquare' cornerSquare' 90' 90);            regionPath.AddArc(0' Height - cornerSquare' cornerSquare' cornerSquare' 90' 90);              graphicPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            //this.Region = new Region(graphicPath);              //this.Region = new Region(graphicPath);            break;            case CornerStyle.Normal:              graphicPath.AddLine(0' 0' Width - 1' 0);            regionPath.AddLine(0' 0' Width' 0);            graphicPath.AddLine(Width - 1' 0' Width - 1' Height - 1);            regionPath.AddLine(Width' 0' Width' Height);            graphicPath.AddLine(Width - 1' Height - 1' 0' Height - 1);            regionPath.AddLine(Width' Height' 0' Height);            graphicPath.AddLine(0' Height - 1' 0' 0);            regionPath.AddLine(0' Height' 0' 0);            break;            default:            throw new ApplicationException("Unrecognized style for rendering the corners");            break;        }
Magic Number,Stepi.UI,CornerCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CornerCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: switch (cornerStyle)        {          case CornerStyle.Rounded:              graphicPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            regionPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2 - 1' 0);            regionPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2' 0);            graphicPath.AddArc(Width - cornerSquare - 1' 0' cornerSquare' cornerSquare' -90' 90);            regionPath.AddArc(Width - cornerSquare' 0' cornerSquare' cornerSquare' -90' 90);              graphicPath.AddLine(Width - 1' cornerSquare - cornerSquare / 2' Width - 1'                                Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(Width' cornerSquare - cornerSquare / 2' Width' Height - cornerSquare + cornerSquare / 2);            graphicPath.AddArc(Width - cornerSquare - 1' Height - 1 - cornerSquare' cornerSquare' cornerSquare' 0' 90);            regionPath.AddArc(Width - cornerSquare' Height - cornerSquare' cornerSquare' cornerSquare' 0' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' Height - 1' Width - cornerSquare + cornerSquare / 2'                                Height - 1);            regionPath.AddLine(cornerSquare - cornerSquare / 2' Height' Width - cornerSquare + cornerSquare / 2' Height);              graphicPath.AddArc(0' Height - cornerSquare - 1' cornerSquare' cornerSquare' 90' 90);            regionPath.AddArc(0' Height - cornerSquare' cornerSquare' cornerSquare' 90' 90);              graphicPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            //this.Region = new Region(graphicPath);              //this.Region = new Region(graphicPath);            break;            case CornerStyle.Normal:              graphicPath.AddLine(0' 0' Width - 1' 0);            regionPath.AddLine(0' 0' Width' 0);            graphicPath.AddLine(Width - 1' 0' Width - 1' Height - 1);            regionPath.AddLine(Width' 0' Width' Height);            graphicPath.AddLine(Width - 1' Height - 1' 0' Height - 1);            regionPath.AddLine(Width' Height' 0' Height);            graphicPath.AddLine(0' Height - 1' 0' 0);            regionPath.AddLine(0' Height' 0' 0);            break;            default:            throw new ApplicationException("Unrecognized style for rendering the corners");            break;        }
Magic Number,Stepi.UI,CornerCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\CornerCtrl.cs,InitializeGraphicPath,The following statement contains a magic number: switch (cornerStyle)        {          case CornerStyle.Rounded:              graphicPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            regionPath.AddArc(0' 0' cornerSquare' cornerSquare' 180' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2 - 1' 0);            regionPath.AddLine(cornerSquare - cornerSquare / 2' 0' Width - cornerSquare + cornerSquare / 2' 0);            graphicPath.AddArc(Width - cornerSquare - 1' 0' cornerSquare' cornerSquare' -90' 90);            regionPath.AddArc(Width - cornerSquare' 0' cornerSquare' cornerSquare' -90' 90);              graphicPath.AddLine(Width - 1' cornerSquare - cornerSquare / 2' Width - 1'                                Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(Width' cornerSquare - cornerSquare / 2' Width' Height - cornerSquare + cornerSquare / 2);            graphicPath.AddArc(Width - cornerSquare - 1' Height - 1 - cornerSquare' cornerSquare' cornerSquare' 0' 90);            regionPath.AddArc(Width - cornerSquare' Height - cornerSquare' cornerSquare' cornerSquare' 0' 90);            graphicPath.AddLine(cornerSquare - cornerSquare / 2' Height - 1' Width - cornerSquare + cornerSquare / 2'                                Height - 1);            regionPath.AddLine(cornerSquare - cornerSquare / 2' Height' Width - cornerSquare + cornerSquare / 2' Height);              graphicPath.AddArc(0' Height - cornerSquare - 1' cornerSquare' cornerSquare' 90' 90);            regionPath.AddArc(0' Height - cornerSquare' cornerSquare' cornerSquare' 90' 90);              graphicPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            regionPath.AddLine(0' cornerSquare - cornerSquare / 2' 0' Height - cornerSquare + cornerSquare / 2);            //this.Region = new Region(graphicPath);              //this.Region = new Region(graphicPath);            break;            case CornerStyle.Normal:              graphicPath.AddLine(0' 0' Width - 1' 0);            regionPath.AddLine(0' 0' Width' 0);            graphicPath.AddLine(Width - 1' 0' Width - 1' Height - 1);            regionPath.AddLine(Width' 0' Width' Height);            graphicPath.AddLine(Width - 1' Height - 1' 0' Height - 1);            regionPath.AddLine(Width' Height' 0' Height);            graphicPath.AddLine(0' Height - 1' 0' 0);            regionPath.AddLine(0' Height' 0' 0);            break;            default:            throw new ApplicationException("Unrecognized style for rendering the corners");            break;        }
Magic Number,Stepi.UI,DirectionCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\DirectionCtrl.cs,CreateImage,The following statement contains a magic number: font = new Font("Arial"' 12' FontStyle.Bold);
Magic Number,Raccoom.Windows.Forms,TreeViewFolderBrowser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\TreeViewBrowser.cs,OnDoubleClick,The following statement contains a magic number: (node.Nodes.Count > 0) || (node.Path.Length > 3)
Magic Number,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDateTime,The following statement contains a magic number: (dmtf.Length != 25)
Magic Number,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDateTime,The following statement contains a magic number: tempString = dmtf.Substring(0' 4);
Magic Number,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDateTime,The following statement contains a magic number: tempString = dmtf.Substring(4' 2);
Magic Number,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDateTime,The following statement contains a magic number: tempString = dmtf.Substring(4' 2);
Magic Number,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDateTime,The following statement contains a magic number: tempString = dmtf.Substring(6' 2);
Magic Number,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDateTime,The following statement contains a magic number: tempString = dmtf.Substring(6' 2);
Magic Number,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDateTime,The following statement contains a magic number: tempString = dmtf.Substring(8' 2);
Magic Number,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDateTime,The following statement contains a magic number: tempString = dmtf.Substring(8' 2);
Magic Number,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDateTime,The following statement contains a magic number: tempString = dmtf.Substring(10' 2);
Magic Number,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDateTime,The following statement contains a magic number: tempString = dmtf.Substring(10' 2);
Magic Number,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDateTime,The following statement contains a magic number: tempString = dmtf.Substring(12' 2);
Magic Number,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDateTime,The following statement contains a magic number: tempString = dmtf.Substring(12' 2);
Magic Number,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDateTime,The following statement contains a magic number: tempString = dmtf.Substring(15' 6);
Magic Number,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDateTime,The following statement contains a magic number: tempString = dmtf.Substring(15' 6);
Magic Number,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDateTime,The following statement contains a magic number: ticks = (Int64.Parse(tempString)                     * (TimeSpan.TicksPerMillisecond / 1000));
Magic Number,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDateTime,The following statement contains a magic number: tempString = dmtf.Substring(22' 3);
Magic Number,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDateTime,The following statement contains a magic number: tempString = dmtf.Substring(22' 3);
Magic Number,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDateTime,The following statement contains a magic number: tempString = dmtf.Substring(21' 4);
Magic Number,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDateTime,The following statement contains a magic number: tempString = dmtf.Substring(21' 4);
Magic Number,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDmtfDateTime,The following statement contains a magic number: (Math.Abs(OffsetMins) > 999)
Magic Number,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDmtfDateTime,The following statement contains a magic number: string dmtfDateTime = date.Year.ToString().PadLeft(4' '0');
Magic Number,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDmtfDateTime,The following statement contains a magic number: dmtfDateTime = (dmtfDateTime + date.Month.ToString().PadLeft(2' '0'));
Magic Number,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDmtfDateTime,The following statement contains a magic number: dmtfDateTime = (dmtfDateTime + date.Day.ToString().PadLeft(2' '0'));
Magic Number,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDmtfDateTime,The following statement contains a magic number: dmtfDateTime = (dmtfDateTime + date.Hour.ToString().PadLeft(2' '0'));
Magic Number,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDmtfDateTime,The following statement contains a magic number: dmtfDateTime = (dmtfDateTime + date.Minute.ToString().PadLeft(2' '0'));
Magic Number,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDmtfDateTime,The following statement contains a magic number: dmtfDateTime = (dmtfDateTime + date.Second.ToString().PadLeft(2' '0'));
Magic Number,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDmtfDateTime,The following statement contains a magic number: long microsec = (((date.Ticks - dtTemp.Ticks)                          * 1000)                         / TimeSpan.TicksPerMillisecond);
Magic Number,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDmtfDateTime,The following statement contains a magic number: strMicrosec = strMicrosec.Substring(0' 6);
Magic Number,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDmtfDateTime,The following statement contains a magic number: (strMicrosec.Length > 6)
Magic Number,ROOT.CIMV2.Win32,Logicaldisk,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\Logicaldisk.cs,ToDmtfDateTime,The following statement contains a magic number: dmtfDateTime = (dmtfDateTime + strMicrosec.PadLeft(6' '0'));
Magic Number,Raccoom.Win32,SystemImageList,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\Win32\SystemImageList.cs,isXpOrAbove,The following statement contains a magic number: Environment.OSVersion.Version.Major > 5
Magic Number,MPTagThat.Core.Freedb,CDInfo,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\CDInfo.cs,ToString,The following statement contains a magic number: StringBuilder buff = new StringBuilder(100);
Magic Number,MPTagThat.Core.Freedb,CDTrackDetail,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\CDTrackDetail.cs,CDTrackDetail,The following statement contains a magic number: m_durationString = string.Format("{0}:{1}"' (m_duration / 60).ToString().PadLeft(2' '0')'                                         (m_duration % 60).ToString().PadLeft(2' '0'));
Magic Number,MPTagThat.Core.Freedb,CDTrackDetail,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\CDTrackDetail.cs,CDTrackDetail,The following statement contains a magic number: m_durationString = string.Format("{0}:{1}"' (m_duration / 60).ToString().PadLeft(2' '0')'                                         (m_duration % 60).ToString().PadLeft(2' '0'));
Magic Number,MPTagThat.Core.Freedb,CDTrackDetail,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\CDTrackDetail.cs,CDTrackDetail,The following statement contains a magic number: m_durationString = string.Format("{0}:{1}"' (m_duration / 60).ToString().PadLeft(2' '0')'                                         (m_duration % 60).ToString().PadLeft(2' '0'));
Magic Number,MPTagThat.Core.Freedb,CDTrackDetail,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\CDTrackDetail.cs,CDTrackDetail,The following statement contains a magic number: m_durationString = string.Format("{0}:{1}"' (m_duration / 60).ToString().PadLeft(2' '0')'                                         (m_duration % 60).ToString().PadLeft(2' '0'));
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,FreeDBQuery,The following statement contains a magic number: StringBuilder buff = new StringBuilder(512);
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,Connect,The following statement contains a magic number: m_server = new FreeDBSite("freedb.freedb.org"' FreeDBSite.FreeDBProtocol.HTTP' 80' "/~cddb/cddb.cgi"'                                  "N000.00"' "W000.00"' "Random freedb server");
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetFeedbSites,The following statement contains a magic number: m_message = m_message.Substring(4);
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetFeedbSites,The following statement contains a magic number: switch (code)        {          case 210: // OK' Site Information Follows.            // Read in all sites.            string[] sites = ParseMultiLine(urlRdr);            retval = new FreeDBSite[sites.Length];            int index = 0;            // Loop through server list and extract different parts.            foreach (string site in sites)            {              string loc = "";              string[] siteInfo = site.Split(sep);              retval[index] = new FreeDBSite();              retval[index].Host = siteInfo[0];              retval[index].Protocol =                (FreeDBSite.FreeDBProtocol)Enum.Parse(typeof (FreeDBSite.FreeDBProtocol)' siteInfo[1]' true);              retval[index].Port = Convert.ToInt32(siteInfo[2]);              retval[index].URI = siteInfo[3];              retval[index].Latitude = siteInfo[4];              retval[index].Longitude = siteInfo[5];                for (int i = 6; i < siteInfo.Length; i++)                loc += retval[i] + " ";              retval[index].Location = loc;              index++;            }            break;          case 401: // No Site Information Available.            break;            ;          default:            break;        }
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetFeedbSites,The following statement contains a magic number: switch (code)        {          case 210: // OK' Site Information Follows.            // Read in all sites.            string[] sites = ParseMultiLine(urlRdr);            retval = new FreeDBSite[sites.Length];            int index = 0;            // Loop through server list and extract different parts.            foreach (string site in sites)            {              string loc = "";              string[] siteInfo = site.Split(sep);              retval[index] = new FreeDBSite();              retval[index].Host = siteInfo[0];              retval[index].Protocol =                (FreeDBSite.FreeDBProtocol)Enum.Parse(typeof (FreeDBSite.FreeDBProtocol)' siteInfo[1]' true);              retval[index].Port = Convert.ToInt32(siteInfo[2]);              retval[index].URI = siteInfo[3];              retval[index].Latitude = siteInfo[4];              retval[index].Longitude = siteInfo[5];                for (int i = 6; i < siteInfo.Length; i++)                loc += retval[i] + " ";              retval[index].Location = loc;              index++;            }            break;          case 401: // No Site Information Available.            break;            ;          default:            break;        }
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetFeedbSites,The following statement contains a magic number: switch (code)        {          case 210: // OK' Site Information Follows.            // Read in all sites.            string[] sites = ParseMultiLine(urlRdr);            retval = new FreeDBSite[sites.Length];            int index = 0;            // Loop through server list and extract different parts.            foreach (string site in sites)            {              string loc = "";              string[] siteInfo = site.Split(sep);              retval[index] = new FreeDBSite();              retval[index].Host = siteInfo[0];              retval[index].Protocol =                (FreeDBSite.FreeDBProtocol)Enum.Parse(typeof (FreeDBSite.FreeDBProtocol)' siteInfo[1]' true);              retval[index].Port = Convert.ToInt32(siteInfo[2]);              retval[index].URI = siteInfo[3];              retval[index].Latitude = siteInfo[4];              retval[index].Longitude = siteInfo[5];                for (int i = 6; i < siteInfo.Length; i++)                loc += retval[i] + " ";              retval[index].Location = loc;              index++;            }            break;          case 401: // No Site Information Available.            break;            ;          default:            break;        }
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetFeedbSites,The following statement contains a magic number: switch (code)        {          case 210: // OK' Site Information Follows.            // Read in all sites.            string[] sites = ParseMultiLine(urlRdr);            retval = new FreeDBSite[sites.Length];            int index = 0;            // Loop through server list and extract different parts.            foreach (string site in sites)            {              string loc = "";              string[] siteInfo = site.Split(sep);              retval[index] = new FreeDBSite();              retval[index].Host = siteInfo[0];              retval[index].Protocol =                (FreeDBSite.FreeDBProtocol)Enum.Parse(typeof (FreeDBSite.FreeDBProtocol)' siteInfo[1]' true);              retval[index].Port = Convert.ToInt32(siteInfo[2]);              retval[index].URI = siteInfo[3];              retval[index].Latitude = siteInfo[4];              retval[index].Longitude = siteInfo[5];                for (int i = 6; i < siteInfo.Length; i++)                loc += retval[i] + " ";              retval[index].Location = loc;              index++;            }            break;          case 401: // No Site Information Available.            break;            ;          default:            break;        }
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetFeedbSites,The following statement contains a magic number: switch (code)        {          case 210: // OK' Site Information Follows.            // Read in all sites.            string[] sites = ParseMultiLine(urlRdr);            retval = new FreeDBSite[sites.Length];            int index = 0;            // Loop through server list and extract different parts.            foreach (string site in sites)            {              string loc = "";              string[] siteInfo = site.Split(sep);              retval[index] = new FreeDBSite();              retval[index].Host = siteInfo[0];              retval[index].Protocol =                (FreeDBSite.FreeDBProtocol)Enum.Parse(typeof (FreeDBSite.FreeDBProtocol)' siteInfo[1]' true);              retval[index].Port = Convert.ToInt32(siteInfo[2]);              retval[index].URI = siteInfo[3];              retval[index].Latitude = siteInfo[4];              retval[index].Longitude = siteInfo[5];                for (int i = 6; i < siteInfo.Length; i++)                loc += retval[i] + " ";              retval[index].Location = loc;              index++;            }            break;          case 401: // No Site Information Available.            break;            ;          default:            break;        }
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetFeedbSites,The following statement contains a magic number: switch (code)        {          case 210: // OK' Site Information Follows.            // Read in all sites.            string[] sites = ParseMultiLine(urlRdr);            retval = new FreeDBSite[sites.Length];            int index = 0;            // Loop through server list and extract different parts.            foreach (string site in sites)            {              string loc = "";              string[] siteInfo = site.Split(sep);              retval[index] = new FreeDBSite();              retval[index].Host = siteInfo[0];              retval[index].Protocol =                (FreeDBSite.FreeDBProtocol)Enum.Parse(typeof (FreeDBSite.FreeDBProtocol)' siteInfo[1]' true);              retval[index].Port = Convert.ToInt32(siteInfo[2]);              retval[index].URI = siteInfo[3];              retval[index].Latitude = siteInfo[4];              retval[index].Longitude = siteInfo[5];                for (int i = 6; i < siteInfo.Length; i++)                loc += retval[i] + " ";              retval[index].Location = loc;              index++;            }            break;          case 401: // No Site Information Available.            break;            ;          default:            break;        }
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetFeedbSites,The following statement contains a magic number: switch (code)        {          case 210: // OK' Site Information Follows.            // Read in all sites.            string[] sites = ParseMultiLine(urlRdr);            retval = new FreeDBSite[sites.Length];            int index = 0;            // Loop through server list and extract different parts.            foreach (string site in sites)            {              string loc = "";              string[] siteInfo = site.Split(sep);              retval[index] = new FreeDBSite();              retval[index].Host = siteInfo[0];              retval[index].Protocol =                (FreeDBSite.FreeDBProtocol)Enum.Parse(typeof (FreeDBSite.FreeDBProtocol)' siteInfo[1]' true);              retval[index].Port = Convert.ToInt32(siteInfo[2]);              retval[index].URI = siteInfo[3];              retval[index].Latitude = siteInfo[4];              retval[index].Longitude = siteInfo[5];                for (int i = 6; i < siteInfo.Length; i++)                loc += retval[i] + " ";              retval[index].Location = loc;              index++;            }            break;          case 401: // No Site Information Available.            break;            ;          default:            break;        }
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetDiscInfo,The following statement contains a magic number: m_message = m_message.Substring(4);
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetDiscInfo,The following statement contains a magic number: switch (code)        {          case 200: // Exact Match...            match = m_message.Split(sep);            retval = new CDInfo[1];              retval[0] = new CDInfo();            retval[0].Category = match[0];            retval[0].DiscId = match[1];            for (int i = 2; i < match.Length; i++)              title += match[i] + " ";            retval[0].Title = title.Trim();            break;          case 202: // no match found            break;          case 211: // Found Inexact Matches. List Follows.          case 210: // Found Exact Matches. List Follows.            matches = ParseMultiLine(urlRdr);            retval = new CDInfo[matches.Length];            foreach (string line in matches)            {              match = line.Split(sep);                retval[index] = new CDInfo();              retval[index].Category = match[0];              retval[index].DiscId = match[1];              for (int i = 2; i < match.Length; i++)                title += match[i] + " ";              retval[index].Title = title.Trim();              index++;            }            break;          case 403: // Database Entry is Corrupt.            retval = null;            break;          case 409: // No handshake... Should not happen!            retval = null;            break;          default:            retval = null;            break;        }
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetDiscInfo,The following statement contains a magic number: switch (code)        {          case 200: // Exact Match...            match = m_message.Split(sep);            retval = new CDInfo[1];              retval[0] = new CDInfo();            retval[0].Category = match[0];            retval[0].DiscId = match[1];            for (int i = 2; i < match.Length; i++)              title += match[i] + " ";            retval[0].Title = title.Trim();            break;          case 202: // no match found            break;          case 211: // Found Inexact Matches. List Follows.          case 210: // Found Exact Matches. List Follows.            matches = ParseMultiLine(urlRdr);            retval = new CDInfo[matches.Length];            foreach (string line in matches)            {              match = line.Split(sep);                retval[index] = new CDInfo();              retval[index].Category = match[0];              retval[index].DiscId = match[1];              for (int i = 2; i < match.Length; i++)                title += match[i] + " ";              retval[index].Title = title.Trim();              index++;            }            break;          case 403: // Database Entry is Corrupt.            retval = null;            break;          case 409: // No handshake... Should not happen!            retval = null;            break;          default:            retval = null;            break;        }
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetDiscInfo,The following statement contains a magic number: switch (code)        {          case 200: // Exact Match...            match = m_message.Split(sep);            retval = new CDInfo[1];              retval[0] = new CDInfo();            retval[0].Category = match[0];            retval[0].DiscId = match[1];            for (int i = 2; i < match.Length; i++)              title += match[i] + " ";            retval[0].Title = title.Trim();            break;          case 202: // no match found            break;          case 211: // Found Inexact Matches. List Follows.          case 210: // Found Exact Matches. List Follows.            matches = ParseMultiLine(urlRdr);            retval = new CDInfo[matches.Length];            foreach (string line in matches)            {              match = line.Split(sep);                retval[index] = new CDInfo();              retval[index].Category = match[0];              retval[index].DiscId = match[1];              for (int i = 2; i < match.Length; i++)                title += match[i] + " ";              retval[index].Title = title.Trim();              index++;            }            break;          case 403: // Database Entry is Corrupt.            retval = null;            break;          case 409: // No handshake... Should not happen!            retval = null;            break;          default:            retval = null;            break;        }
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetDiscInfo,The following statement contains a magic number: switch (code)        {          case 200: // Exact Match...            match = m_message.Split(sep);            retval = new CDInfo[1];              retval[0] = new CDInfo();            retval[0].Category = match[0];            retval[0].DiscId = match[1];            for (int i = 2; i < match.Length; i++)              title += match[i] + " ";            retval[0].Title = title.Trim();            break;          case 202: // no match found            break;          case 211: // Found Inexact Matches. List Follows.          case 210: // Found Exact Matches. List Follows.            matches = ParseMultiLine(urlRdr);            retval = new CDInfo[matches.Length];            foreach (string line in matches)            {              match = line.Split(sep);                retval[index] = new CDInfo();              retval[index].Category = match[0];              retval[index].DiscId = match[1];              for (int i = 2; i < match.Length; i++)                title += match[i] + " ";              retval[index].Title = title.Trim();              index++;            }            break;          case 403: // Database Entry is Corrupt.            retval = null;            break;          case 409: // No handshake... Should not happen!            retval = null;            break;          default:            retval = null;            break;        }
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetDiscInfo,The following statement contains a magic number: switch (code)        {          case 200: // Exact Match...            match = m_message.Split(sep);            retval = new CDInfo[1];              retval[0] = new CDInfo();            retval[0].Category = match[0];            retval[0].DiscId = match[1];            for (int i = 2; i < match.Length; i++)              title += match[i] + " ";            retval[0].Title = title.Trim();            break;          case 202: // no match found            break;          case 211: // Found Inexact Matches. List Follows.          case 210: // Found Exact Matches. List Follows.            matches = ParseMultiLine(urlRdr);            retval = new CDInfo[matches.Length];            foreach (string line in matches)            {              match = line.Split(sep);                retval[index] = new CDInfo();              retval[index].Category = match[0];              retval[index].DiscId = match[1];              for (int i = 2; i < match.Length; i++)                title += match[i] + " ";              retval[index].Title = title.Trim();              index++;            }            break;          case 403: // Database Entry is Corrupt.            retval = null;            break;          case 409: // No handshake... Should not happen!            retval = null;            break;          default:            retval = null;            break;        }
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetDiscInfo,The following statement contains a magic number: switch (code)        {          case 200: // Exact Match...            match = m_message.Split(sep);            retval = new CDInfo[1];              retval[0] = new CDInfo();            retval[0].Category = match[0];            retval[0].DiscId = match[1];            for (int i = 2; i < match.Length; i++)              title += match[i] + " ";            retval[0].Title = title.Trim();            break;          case 202: // no match found            break;          case 211: // Found Inexact Matches. List Follows.          case 210: // Found Exact Matches. List Follows.            matches = ParseMultiLine(urlRdr);            retval = new CDInfo[matches.Length];            foreach (string line in matches)            {              match = line.Split(sep);                retval[index] = new CDInfo();              retval[index].Category = match[0];              retval[index].DiscId = match[1];              for (int i = 2; i < match.Length; i++)                title += match[i] + " ";              retval[index].Title = title.Trim();              index++;            }            break;          case 403: // Database Entry is Corrupt.            retval = null;            break;          case 409: // No handshake... Should not happen!            retval = null;            break;          default:            retval = null;            break;        }
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetDiscInfo,The following statement contains a magic number: switch (code)        {          case 200: // Exact Match...            match = m_message.Split(sep);            retval = new CDInfo[1];              retval[0] = new CDInfo();            retval[0].Category = match[0];            retval[0].DiscId = match[1];            for (int i = 2; i < match.Length; i++)              title += match[i] + " ";            retval[0].Title = title.Trim();            break;          case 202: // no match found            break;          case 211: // Found Inexact Matches. List Follows.          case 210: // Found Exact Matches. List Follows.            matches = ParseMultiLine(urlRdr);            retval = new CDInfo[matches.Length];            foreach (string line in matches)            {              match = line.Split(sep);                retval[index] = new CDInfo();              retval[index].Category = match[0];              retval[index].DiscId = match[1];              for (int i = 2; i < match.Length; i++)                title += match[i] + " ";              retval[index].Title = title.Trim();              index++;            }            break;          case 403: // Database Entry is Corrupt.            retval = null;            break;          case 409: // No handshake... Should not happen!            retval = null;            break;          default:            retval = null;            break;        }
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetDiscInfo,The following statement contains a magic number: switch (code)        {          case 200: // Exact Match...            match = m_message.Split(sep);            retval = new CDInfo[1];              retval[0] = new CDInfo();            retval[0].Category = match[0];            retval[0].DiscId = match[1];            for (int i = 2; i < match.Length; i++)              title += match[i] + " ";            retval[0].Title = title.Trim();            break;          case 202: // no match found            break;          case 211: // Found Inexact Matches. List Follows.          case 210: // Found Exact Matches. List Follows.            matches = ParseMultiLine(urlRdr);            retval = new CDInfo[matches.Length];            foreach (string line in matches)            {              match = line.Split(sep);                retval[index] = new CDInfo();              retval[index].Category = match[0];              retval[index].DiscId = match[1];              for (int i = 2; i < match.Length; i++)                title += match[i] + " ";              retval[index].Title = title.Trim();              index++;            }            break;          case 403: // Database Entry is Corrupt.            retval = null;            break;          case 409: // No handshake... Should not happen!            retval = null;            break;          default:            retval = null;            break;        }
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetDiscInfoByID,The following statement contains a magic number: m_message = m_message.Substring(4);
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetDiscInfoByID,The following statement contains a magic number: switch (code)        {          case 200: // Exact Match...            match = m_message.Split(sep);            retval = new CDInfo[1];              retval[0] = new CDInfo();            retval[0].Category = match[0];            retval[0].DiscId = match[1];            for (int i = 2; i < match.Length; i++)              title += match[i] + " ";            retval[0].Title = title.Trim();            break;          case 202: // no match found            break;          case 211: // Found Inexact Matches. List Follows.          case 210: // Found Exact Matches. List Follows.            matches = ParseMultiLine(urlRdr);            retval = new CDInfo[matches.Length];            foreach (string line in matches)            {              match = line.Split(sep);                retval[index] = new CDInfo();              retval[index].Category = match[0];              retval[index].DiscId = match[1];              for (int i = 2; i < match.Length; i++)                title += match[i] + " ";              retval[index].Title = title.Trim();              index++;            }            break;          case 403: // Database Entry is Corrupt.            retval = null;            break;          case 409: // No handshake... Should not happen!            retval = null;            break;          default:            retval = null;            break;        }
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetDiscInfoByID,The following statement contains a magic number: switch (code)        {          case 200: // Exact Match...            match = m_message.Split(sep);            retval = new CDInfo[1];              retval[0] = new CDInfo();            retval[0].Category = match[0];            retval[0].DiscId = match[1];            for (int i = 2; i < match.Length; i++)              title += match[i] + " ";            retval[0].Title = title.Trim();            break;          case 202: // no match found            break;          case 211: // Found Inexact Matches. List Follows.          case 210: // Found Exact Matches. List Follows.            matches = ParseMultiLine(urlRdr);            retval = new CDInfo[matches.Length];            foreach (string line in matches)            {              match = line.Split(sep);                retval[index] = new CDInfo();              retval[index].Category = match[0];              retval[index].DiscId = match[1];              for (int i = 2; i < match.Length; i++)                title += match[i] + " ";              retval[index].Title = title.Trim();              index++;            }            break;          case 403: // Database Entry is Corrupt.            retval = null;            break;          case 409: // No handshake... Should not happen!            retval = null;            break;          default:            retval = null;            break;        }
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetDiscInfoByID,The following statement contains a magic number: switch (code)        {          case 200: // Exact Match...            match = m_message.Split(sep);            retval = new CDInfo[1];              retval[0] = new CDInfo();            retval[0].Category = match[0];            retval[0].DiscId = match[1];            for (int i = 2; i < match.Length; i++)              title += match[i] + " ";            retval[0].Title = title.Trim();            break;          case 202: // no match found            break;          case 211: // Found Inexact Matches. List Follows.          case 210: // Found Exact Matches. List Follows.            matches = ParseMultiLine(urlRdr);            retval = new CDInfo[matches.Length];            foreach (string line in matches)            {              match = line.Split(sep);                retval[index] = new CDInfo();              retval[index].Category = match[0];              retval[index].DiscId = match[1];              for (int i = 2; i < match.Length; i++)                title += match[i] + " ";              retval[index].Title = title.Trim();              index++;            }            break;          case 403: // Database Entry is Corrupt.            retval = null;            break;          case 409: // No handshake... Should not happen!            retval = null;            break;          default:            retval = null;            break;        }
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetDiscInfoByID,The following statement contains a magic number: switch (code)        {          case 200: // Exact Match...            match = m_message.Split(sep);            retval = new CDInfo[1];              retval[0] = new CDInfo();            retval[0].Category = match[0];            retval[0].DiscId = match[1];            for (int i = 2; i < match.Length; i++)              title += match[i] + " ";            retval[0].Title = title.Trim();            break;          case 202: // no match found            break;          case 211: // Found Inexact Matches. List Follows.          case 210: // Found Exact Matches. List Follows.            matches = ParseMultiLine(urlRdr);            retval = new CDInfo[matches.Length];            foreach (string line in matches)            {              match = line.Split(sep);                retval[index] = new CDInfo();              retval[index].Category = match[0];              retval[index].DiscId = match[1];              for (int i = 2; i < match.Length; i++)                title += match[i] + " ";              retval[index].Title = title.Trim();              index++;            }            break;          case 403: // Database Entry is Corrupt.            retval = null;            break;          case 409: // No handshake... Should not happen!            retval = null;            break;          default:            retval = null;            break;        }
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetDiscInfoByID,The following statement contains a magic number: switch (code)        {          case 200: // Exact Match...            match = m_message.Split(sep);            retval = new CDInfo[1];              retval[0] = new CDInfo();            retval[0].Category = match[0];            retval[0].DiscId = match[1];            for (int i = 2; i < match.Length; i++)              title += match[i] + " ";            retval[0].Title = title.Trim();            break;          case 202: // no match found            break;          case 211: // Found Inexact Matches. List Follows.          case 210: // Found Exact Matches. List Follows.            matches = ParseMultiLine(urlRdr);            retval = new CDInfo[matches.Length];            foreach (string line in matches)            {              match = line.Split(sep);                retval[index] = new CDInfo();              retval[index].Category = match[0];              retval[index].DiscId = match[1];              for (int i = 2; i < match.Length; i++)                title += match[i] + " ";              retval[index].Title = title.Trim();              index++;            }            break;          case 403: // Database Entry is Corrupt.            retval = null;            break;          case 409: // No handshake... Should not happen!            retval = null;            break;          default:            retval = null;            break;        }
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetDiscInfoByID,The following statement contains a magic number: switch (code)        {          case 200: // Exact Match...            match = m_message.Split(sep);            retval = new CDInfo[1];              retval[0] = new CDInfo();            retval[0].Category = match[0];            retval[0].DiscId = match[1];            for (int i = 2; i < match.Length; i++)              title += match[i] + " ";            retval[0].Title = title.Trim();            break;          case 202: // no match found            break;          case 211: // Found Inexact Matches. List Follows.          case 210: // Found Exact Matches. List Follows.            matches = ParseMultiLine(urlRdr);            retval = new CDInfo[matches.Length];            foreach (string line in matches)            {              match = line.Split(sep);                retval[index] = new CDInfo();              retval[index].Category = match[0];              retval[index].DiscId = match[1];              for (int i = 2; i < match.Length; i++)                title += match[i] + " ";              retval[index].Title = title.Trim();              index++;            }            break;          case 403: // Database Entry is Corrupt.            retval = null;            break;          case 409: // No handshake... Should not happen!            retval = null;            break;          default:            retval = null;            break;        }
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetDiscInfoByID,The following statement contains a magic number: switch (code)        {          case 200: // Exact Match...            match = m_message.Split(sep);            retval = new CDInfo[1];              retval[0] = new CDInfo();            retval[0].Category = match[0];            retval[0].DiscId = match[1];            for (int i = 2; i < match.Length; i++)              title += match[i] + " ";            retval[0].Title = title.Trim();            break;          case 202: // no match found            break;          case 211: // Found Inexact Matches. List Follows.          case 210: // Found Exact Matches. List Follows.            matches = ParseMultiLine(urlRdr);            retval = new CDInfo[matches.Length];            foreach (string line in matches)            {              match = line.Split(sep);                retval[index] = new CDInfo();              retval[index].Category = match[0];              retval[index].DiscId = match[1];              for (int i = 2; i < match.Length; i++)                title += match[i] + " ";              retval[index].Title = title.Trim();              index++;            }            break;          case 403: // Database Entry is Corrupt.            retval = null;            break;          case 409: // No handshake... Should not happen!            retval = null;            break;          default:            retval = null;            break;        }
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetDiscInfoByID,The following statement contains a magic number: switch (code)        {          case 200: // Exact Match...            match = m_message.Split(sep);            retval = new CDInfo[1];              retval[0] = new CDInfo();            retval[0].Category = match[0];            retval[0].DiscId = match[1];            for (int i = 2; i < match.Length; i++)              title += match[i] + " ";            retval[0].Title = title.Trim();            break;          case 202: // no match found            break;          case 211: // Found Inexact Matches. List Follows.          case 210: // Found Exact Matches. List Follows.            matches = ParseMultiLine(urlRdr);            retval = new CDInfo[matches.Length];            foreach (string line in matches)            {              match = line.Split(sep);                retval[index] = new CDInfo();              retval[index].Category = match[0];              retval[index].DiscId = match[1];              for (int i = 2; i < match.Length; i++)                title += match[i] + " ";              retval[index].Title = title.Trim();              index++;            }            break;          case 403: // Database Entry is Corrupt.            retval = null;            break;          case 409: // No handshake... Should not happen!            retval = null;            break;          default:            retval = null;            break;        }
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetInfo,The following statement contains a magic number: m_message = m_message.Substring(4);
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetInfo,The following statement contains a magic number: switch (code / 100)        {          case 2: // no problem            retval = ParseMultiLine(urlRdr);            break;          case 4: // no permission            retval = null;            break;          case 5: // problem            retval = null;            break;          default:            retval = null;            break;        }
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetInfo,The following statement contains a magic number: switch (code / 100)        {          case 2: // no problem            retval = ParseMultiLine(urlRdr);            break;          case 4: // no permission            retval = null;            break;          case 5: // problem            retval = null;            break;          default:            retval = null;            break;        }
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetInfo,The following statement contains a magic number: switch (code / 100)        {          case 2: // no problem            retval = ParseMultiLine(urlRdr);            break;          case 4: // no permission            retval = null;            break;          case 5: // problem            retval = null;            break;          default:            retval = null;            break;        }
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetInfo,The following statement contains a magic number: switch (code / 100)        {          case 2: // no problem            retval = ParseMultiLine(urlRdr);            break;          case 4: // no permission            retval = null;            break;          case 5: // problem            retval = null;            break;          default:            retval = null;            break;        }
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetStreamFromSite,The following statement contains a magic number: req.Timeout = 50000;
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetCode,The following statement contains a magic number: m_code = Convert.ToInt32(content.Substring(0' 3));
Magic Number,MPTagThat.Core.Freedb,FreeDBQuery,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\FreeDBQuery.cs,GetCDDBDiscID,The following statement contains a magic number: retval = id.Substring(0' 8);
Magic Number,MPTagThat.Core.Freedb,XMCDParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\XMCDParser.cs,parse,The following statement contains a magic number: StringBuilder buff = new StringBuilder(1024);
Magic Number,MPTagThat.Core.Freedb,XMCDParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\XMCDParser.cs,Parse2,The following statement contains a magic number: curcomment = new string[2];
Magic Number,MPTagThat.Core.Freedb,XMCDParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\XMCDParser.cs,Parse2,The following statement contains a magic number: curcomment.Length == 2 && curcomment[0].Length > 0 && curcomment[1].Length > 0
Magic Number,MPTagThat.Core.Freedb,XMCDParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\XMCDParser.cs,calculateDurations,The following statement contains a magic number: durations[i - 1] = (offsets[i] - offsets[i - 1]) / 75;
Magic Number,MPTagThat.Core.Freedb,XMCDParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\XMCDParser.cs,calculateDurations,The following statement contains a magic number: durations[i - 1] = totalDuration - (offsets[i - 1] / 75);
Magic Number,MPTagThat.Core.Freedb,XMCDParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\XMCDParser.cs,extendedParseTrackTitle,The following statement contains a magic number: return title.Substring(j + 3);
Magic Number,MPTagThat.Core.Freedb,XMCDParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\XMCDParser.cs,parseTrackTitle,The following statement contains a magic number: return title.Substring(j + 3);
Magic Number,MPTagThat.Core.Freedb,XMCDParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\XMCDParser.cs,getTagText,The following statement contains a magic number: s2 += " " + m_content.Substring(i + key.Length + 2' m_content.IndexOf("\n"' i + key.Length + 2)).Trim();
Magic Number,MPTagThat.Core.Freedb,XMCDParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\XMCDParser.cs,getTagText,The following statement contains a magic number: s2 += " " + m_content.Substring(i + key.Length + 2' m_content.IndexOf("\n"' i + key.Length + 2)).Trim();
Magic Number,MPTagThat.Core.Freedb,XMCDParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\XMCDParser.cs,createXMCD,The following statement contains a magic number: StringBuilder content = new StringBuilder(400);
Magic Number,MPTagThat.Core.Freedb,XMCDParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\XMCDParser.cs,createXMCD,The following statement contains a magic number: StringBuilder tracks = new StringBuilder(100);
Magic Number,MPTagThat.Core.Freedb,XMCDParser,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\FreeDB\XMCDParser.cs,createXMCD,The following statement contains a magic number: StringBuilder extt = new StringBuilder(100);
Magic Number,MPTagThat.Core.MediaChangeMonitor,DeviceVolumeMonitor,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\MediaChangeMonitor\DeviceVolumeMonitor.cs,MaskToLogicalPaths,The following statement contains a magic number: StringBuilder lReturn = new StringBuilder(128);
Magic Number,MPTagThat.Core.MediaChangeMonitor,DeviceVolumeMonitor,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\MediaChangeMonitor\DeviceVolumeMonitor.cs,MaskToLogicalPaths,The following statement contains a magic number: lReturn = new StringBuilder(128);
Magic Number,MPTagThat.Core.MediaChangeMonitor,DeviceVolumeMonitor,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\MediaChangeMonitor\DeviceVolumeMonitor.cs,MaskToLogicalPaths,The following statement contains a magic number: lReturn.Append((char)(65 + lValue));
Magic Number,MPTagThat.Core.MediaChangeMonitor,DeviceVolumeMonitor,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\MediaChangeMonitor\DeviceVolumeMonitor.cs,MaskToDevicePaths,The following statement contains a magic number: lBuffer = new StringBuilder(256);
Magic Number,MPTagThat.Core.MediaChangeMonitor,DeviceVolumeMonitor,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\MediaChangeMonitor\DeviceVolumeMonitor.cs,MaskToDevicePaths,The following statement contains a magic number: lReturn = new StringBuilder(256);
Magic Number,MPTagThat.Core.Services.MusicDatabase,MusicDatabase,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\MusicDatabase\MusicDatabase.cs,ExecuteQuery,The following statement contains a magic number: Array.Resize(ref order' 3);
Magic Number,MPTagThat.Core.Services.MusicDatabase,MusicDatabase,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\MusicDatabase\MusicDatabase.cs,ExecuteQuery,The following statement contains a magic number: order[2] = "Track";
Magic Number,MPTagThat.Core.Services.MusicDatabase,MusicDatabase,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\MusicDatabase\MusicDatabase.cs,ScanShare_DoWork,The following statement contains a magic number: BulkInsertOptions bulkInsertOptions = new BulkInsertOptions          {            BatchSize = 1000'            OverwriteExisting = true          };
Magic Number,MPTagThat.Core.Services.MusicDatabase,MusicDatabase,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\MusicDatabase\MusicDatabase.cs,ScanShare_DoWork,The following statement contains a magic number: _audioFiles%1000 == 0
Magic Number,MPTagThat.Core.Services.MusicDatabase,MusicDatabase,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\MusicDatabase\MusicDatabase.cs,CreateDocumentStore,The following statement contains a magic number: return new Lazy<IDocumentStore>(() =>        {                 var docStore = new EmbeddableDocumentStore()          {            UseEmbeddedHttpServer = databaseName == "MusicDatabase" && Options.StartupSettings.RavenStudio'            DataDirectory = $"{Options.StartupSettings.DatabaseFolder}{databaseName}"'            RunInMemory = false'            Configuration =            {              Port = Options.StartupSettings.RavenStudioPort'              MaxPageSize = 300000'            }'          };          if (Options.StartupSettings.RavenStudio)          {            Raven.Database.Server.NonAdminHttp.EnsureCanListenToWhenInNonAdminContext(Options.StartupSettings.RavenStudioPort);          }          docStore.Initialize();            docStore.Conventions.MaxNumberOfRequestsPerSession = 1000000;          docStore.Conventions.AllowMultipuleAsyncOperations = true;            return docStore;        });
Magic Number,MPTagThat.Core.Services.MusicDatabase,MusicDatabase,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\MusicDatabase\MusicDatabase.cs,CreateDocumentStore,The following statement contains a magic number: return new Lazy<IDocumentStore>(() =>        {                 var docStore = new EmbeddableDocumentStore()          {            UseEmbeddedHttpServer = databaseName == "MusicDatabase" && Options.StartupSettings.RavenStudio'            DataDirectory = $"{Options.StartupSettings.DatabaseFolder}{databaseName}"'            RunInMemory = false'            Configuration =            {              Port = Options.StartupSettings.RavenStudioPort'              MaxPageSize = 300000'            }'          };          if (Options.StartupSettings.RavenStudio)          {            Raven.Database.Server.NonAdminHttp.EnsureCanListenToWhenInNonAdminContext(Options.StartupSettings.RavenStudioPort);          }          docStore.Initialize();            docStore.Conventions.MaxNumberOfRequestsPerSession = 1000000;          docStore.Conventions.AllowMultipuleAsyncOperations = true;            return docStore;        });
Magic Number,MPTagThat.Core.ShellLib,ShellBrowseForFolderDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\ShellLib\ShellBrowseForFolderDialog.cs,ShowDialog,The following statement contains a magic number: bi.pszDisplayName = new String(' '' 256);
Magic Number,MPTagThat.Core.ShellLib,ShellExecute,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\ShellLib\ShellExecute.cs,Execute,The following statement contains a magic number: return (iRetVal > 32) ? true : false;
Magic Number,MPTagThat.Core.ShellLib,ShellOpenFileDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\ShellLib\ShellOpenFileDialog.cs,ShellOpenFileDialog,The following statement contains a magic number: _ofn.file = new String(new char[256]);
Magic Number,MPTagThat.Core.ShellLib,ShellOpenFileDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\ShellLib\ShellOpenFileDialog.cs,ShellOpenFileDialog,The following statement contains a magic number: _ofn.fileTitle = new String(new char[64]);
Missing Default,MPTagThat.Core,Track,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\Track.cs,SaveFile,The following switch statement is missing a default case: switch (dlgResult)          {            case DialogResult.Yes:              Options.ReadOnlyFileHandling = 0; // Yes               break;              case DialogResult.OK:              Options.ReadOnlyFileHandling = 1; // Yes to All               break;              case DialogResult.No:              Options.ReadOnlyFileHandling = 2; // No               break;              case DialogResult.Cancel:              Options.ReadOnlyFileHandling = 3; // No to All               break;          }
Missing Default,MPTagThat.Core,Track,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Common\Track.cs,SaveFile,The following switch statement is missing a default case: switch (Options.MainSettings.CharacterEncoding)              {                case 0:                  TagLib.Id3v2.Tag.DefaultEncoding = StringType.Latin1;                  break;                  case 1:                  TagLib.Id3v2.Tag.DefaultEncoding = StringType.UTF16;                  break;                  case 2:                  TagLib.Id3v2.Tag.DefaultEncoding = StringType.UTF16BE;                  break;                  case 3:                  TagLib.Id3v2.Tag.DefaultEncoding = StringType.UTF8;                  break;                  case 4:                  TagLib.Id3v2.Tag.DefaultEncoding = StringType.UTF16LE;                  break;              }
Missing Default,MPTagThat.Core,ColorSlider,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\Colorslider\ColorSlider.cs,OnKeyUp,The following switch statement is missing a default case: switch (e.KeyCode)        {          case Keys.Down:          case Keys.Left:            SetProperValue(Value - (int)smallChange);            if (Scroll != null) Scroll(this' new ScrollEventArgs(ScrollEventType.SmallDecrement' Value));            break;          case Keys.Up:          case Keys.Right:            SetProperValue(Value + (int)smallChange);            if (Scroll != null) Scroll(this' new ScrollEventArgs(ScrollEventType.SmallIncrement' Value));            break;          case Keys.Home:            Value = barMinimum;            break;          case Keys.End:            Value = barMaximum;            break;          case Keys.PageDown:            SetProperValue(Value - (int)largeChange);            if (Scroll != null) Scroll(this' new ScrollEventArgs(ScrollEventType.LargeDecrement' Value));            break;          case Keys.PageUp:            SetProperValue(Value + (int)largeChange);            if (Scroll != null) Scroll(this' new ScrollEventArgs(ScrollEventType.LargeIncrement' Value));            break;        }
Missing Default,MPTagThat.Core,ThemeManager,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\ThemeManager\ThemeManager.cs,LoadTheme,The following switch statement is missing a default case: switch (attr.Name)              {                case "Label":                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.LabelForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                        Convert.ToInt16(colorArray[2]));                  theme.LabelFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                             (float)                                             Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                               CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "PanelHeading":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.PanelHeadingBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("directionctrlcolor").Value.Split(''');                  theme.PanelHeadingDirectionCtrlColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                        Convert.ToInt16(colorArray[1])'                                                                        Convert.ToInt16(colorArray[2]));                  theme.PanelHeadingFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                    (float)                                                    Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                      CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "FormHeader":                  colorArray = attr.Attributes.GetNamedItem("forecolor").Value.Split(''');                  theme.FormHeaderForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                             Convert.ToInt16(colorArray[1])'                                                             Convert.ToInt16(colorArray[2]));                  theme.FormHeaderFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                                  (float)                                                  Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                    CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;                  case "GridView":                  colorArray = attr.Attributes.GetNamedItem("defaultbackcolor").Value.Split(''');                  theme.DefaultBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("selectionbackcolor").Value.Split(''');                  theme.SelectionBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                            Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowbackcolor").Value.Split(''');                  theme.AlternatingRowBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("alternatingrowforecolor").Value.Split(''');                  theme.AlternatingRowForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                 Convert.ToInt16(colorArray[1])'                                                                 Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedbackcolor").Value.Split(''');                  theme.ChangedBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("changedforecolor").Value.Split(''');                  theme.ChangedForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                          Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorbackcolor").Value.Split(''');                  theme.FixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("fixableerrorforecolor").Value.Split(''');                  theme.FixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                               Convert.ToInt16(colorArray[1])'                                                               Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorbackcolor").Value.Split(''');                  theme.NonFixableErrorBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("nonfixableerrorforecolor").Value.Split(''');                  theme.NonFixableErrorForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                                  Convert.ToInt16(colorArray[1])'                                                                  Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplacebackcolor").Value.Split(''');                  theme.FindReplaceBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("findreplaceforecolor").Value.Split(''');                  theme.FindReplaceForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])'                                                              Convert.ToInt16(colorArray[1])'                                                              Convert.ToInt16(colorArray[2]));                  break;                  case "Button":                  colorArray = attr.Attributes.GetNamedItem("backcolor").Value.Split(''');                  theme.ButtonBackColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  colorArray = attr.Attributes.GetNamedItem("color").Value.Split(''');                  theme.ButtonForeColor = Color.FromArgb(Convert.ToInt16(colorArray[0])' Convert.ToInt16(colorArray[1])'                                                         Convert.ToInt16(colorArray[2]));                  theme.ButtonFont = new Font(attr.Attributes.GetNamedItem("font").Value'                                              (float)                                              Convert.ToDecimal(attr.Attributes.GetNamedItem("size").Value'                                                                CultureInfo.InvariantCulture)' FontStyle.Regular);                  break;              }
Missing Default,MPTagThat.Core,Util,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\Util.cs,IsAudio,The following switch statement is missing a default case: switch (ext)        {          case ".aif":          case ".aiff":          case ".ape":          case ".asf":          case ".dsf":          case ".flac":          case ".mp3":          case ".ogg":          case ".opus":          case ".wv":          case ".wma":          case ".mp4":          case ".m4a":          case ".m4b":          case ".m4p":          case ".mpc":          case ".mp+":          case ".mpp":          case ".wav":            return true;        }
Missing Default,MPTagThat.Core,Util,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\Util.cs,IsPicture,The following switch statement is missing a default case: switch (ext)        {          case ".bmp":          case ".gif":          case ".jpg":          case ".png":            return true;        }
Missing Default,MPTagThat.Core,Util,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\Util.cs,IsReplayGain,The following switch statement is missing a default case: switch (description.ToLowerInvariant())        {          case "replaygain_track_gain":          case "replaygain_track_peak":          case "replaygain_album_gain":          case "replaygain_album_peak":            return true;        }
Missing Default,MPTagThat.Core,Util,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\Util.cs,LabelToParameter,The following switch statement is missing a default case: switch (label)        {          case "lblParmArtist":            parameter = "<A>";            break;            case "lblParmTitle":            parameter = "<T>";            break;            case "lblParmAlbum":            parameter = "<B>";            break;            case "lblParmYear":            parameter = "<Y>";            break;            case "lblParmTrack":            parameter = "<K>";            break;            case "lblParmTrackTotal":            parameter = "<k>";            break;            case "lblParmDisc":            parameter = "<D>";            break;            case "lblParmDiscTotal":            parameter = "<d>";            break;            case "lblParmGenre":            parameter = "<G>";            break;            case "lblAlbumArtist":            parameter = "<O>";            break;            case "lblParmComment":            parameter = "<C>";            break;            case "lblConductor":            parameter = "<N>";            break;            case "lblComposer":            parameter = "<R>";            break;            case "lblModifiedBy":            parameter = "<M>";            break;            case "lblBPM":            parameter = "<E>";            break;            case "lblSubTitle":            parameter = "<S>";            break;            case "lblContentGroup":            parameter = "<U>";            break;            case "lblParmFileName":            parameter = "<F>";            break;            case "lblParmEnumerate":            parameter = "<#>";            break;            case "lblParmBitRate":            parameter = "<I>";            break;            case "lblParmFirstArtist":            parameter = "<A:n>";            break;            case "lblParmFirstAlbumArtist":            parameter = "<O:n>";            break;            case "lblParmUnused":            parameter = "<X>";            break;            case "lblParmFolder":            parameter = @"\";            break;        }
Missing Default,MPTagThat.Core,Util,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Utils\Util.cs,FormatGridColumn,The following switch statement is missing a default case: switch (setting.Type.ToLower())        {          case "text":          case "process":            column.ValueType = typeof (string);            break;          case "number":          case "check":          case "rating":            column.ValueType = typeof (int);            break;        }
Missing Default,MPTagThat.Core.AudioEncoder,AudioEncoder,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\AudioEncoder\AudioEncoder.cs,SetOutFileExtension,The following switch statement is missing a default case: switch (_encoder)        {          case "mp3":            outFileName += ".mp3";            break;            case "ogg":            outFileName += ".ogg";            break;            case "flac":            outFileName += ".flac";            break;            case "m4a":            outFileName += ".m4a";            break;            case "wav":            outFileName += ".wav";            break;            case "wma":            outFileName += ".wma";            break;            case "mpc":            outFileName += ".mpc";            break;            case "wv":            outFileName += ".wv";            break;        }
Missing Default,MPTagThat.Core.AudioEncoder,AudioEncoder,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\AudioEncoder\AudioEncoder.cs,SetEncoderSettings,The following switch statement is missing a default case: switch (_encoder)        {          case "mp3":            EncoderLAME encLame = new EncoderLAME(stream);            if (Options.MainSettings.RipLameExpert.Length > 0)            {              encLame.LAME_CustomOptions = Options.MainSettings.RipLameExpert;              encLame.LAME_UseCustomOptionsOnly = true;            }            else            {              if (Options.MainSettings.RipLamePreset == (int)Options.LamePreset.ABR)                encLame.LAME_PresetName = Options.MainSettings.RipLameABRBitRate.ToString();              else                encLame.LAME_PresetName =                  Enum.GetName(typeof (Options.LamePreset)' Options.MainSettings.RipLamePreset).ToLower();            }            encoder = encLame;            break;            case "ogg":            EncoderOGG encOgg = new EncoderOGG(stream);            if (Options.MainSettings.RipOggExpert.Length > 0)            {              encOgg.OGG_CustomOptions = Options.MainSettings.RipOggExpert;              encOgg.OGG_UseCustomOptionsOnly = true;            }            else            {              encOgg.OGG_Quality = Convert.ToInt32(Options.MainSettings.RipOggQuality);            }            encoder = encOgg;            break;            case "flac":            EncoderFLAC encFlac = new EncoderFLAC(stream);            if (Options.MainSettings.RipFlacExpert.Length > 0)            {              encFlac.FLAC_CustomOptions = Options.MainSettings.RipFlacExpert;              encFlac.FLAC_UseCustomOptionsOnly = true;            }            else            {              encFlac.FLAC_CompressionLevel = Options.MainSettings.RipFlacQuality;            }            // put a 1k padding block for Tagging in front            encFlac.FLAC_Padding = 1024;            encoder = encFlac;            break;            case "m4a":            EncoderFAAC encAAC = new EncoderFAAC(stream);              int bitrate =              Convert.ToInt32(Options.MainSettings.RipEncoderAACBitRate.Substring(0'                                                                                  Options.MainSettings.                                                                                    RipEncoderAACBitRate.IndexOf(' ')));            encAAC.FAAC_Bitrate = bitrate;            encAAC.FAAC_Quality = 100;            encAAC.FAAC_UseQualityMode = true;            encAAC.FAAC_WrapMP4 = true;              encoder = encAAC;            break;            case "wav":            EncoderWAV encWav = new EncoderWAV(stream);            encoder = encWav;            break;            case "wma":            EncoderWMA encWma = new EncoderWMA(stream);            string[] sampleFormat = Options.MainSettings.RipEncoderWMASample.Split(''');            string encoderFormat = Options.MainSettings.RipEncoderWMA;            if (encoderFormat == "wmapro" || encoderFormat == "wmalossless")              encWma.WMA_UsePro = true;            else              encWma.WMA_ForceStandard = true;              if (Options.MainSettings.RipEncoderWMACbrVbr == "Vbr")            {              encWma.WMA_UseVBR = true;              encWma.WMA_VBRQuality = Convert.ToInt32(Options.MainSettings.RipEncoderWMABitRate);            }            else              encWma.WMA_Bitrate = Convert.ToInt32(Options.MainSettings.RipEncoderWMABitRate) / 1000;                if (sampleFormat[0] == "24")              encWma.WMA_Use24Bit = true;              encoder = encWma;            break;            case "mpc":            EncoderMPC encMpc = new EncoderMPC(stream);            if (Options.MainSettings.RipEncoderMPCExpert.Length > 0)            {              encMpc.MPC_CustomOptions = Options.MainSettings.RipEncoderMPCExpert;              encMpc.MPC_UseCustomOptionsOnly = true;            }            else            {              encMpc.MPC_Preset =                (EncoderMPC.MPCPreset)Enum.Parse(typeof (EncoderMPC.MPCPreset)' Options.MainSettings.RipEncoderMPCPreset);            }            encoder = encMpc;            break;            case "wv":            EncoderWavPack encWv = new EncoderWavPack(stream);            if (Options.MainSettings.RipEncoderWVExpert.Length > 0)            {              encWv.WV_CustomOptions = Options.MainSettings.RipEncoderWVExpert;              encWv.WV_UseCustomOptionsOnly = true;            }            else            {              if (Options.MainSettings.RipEncoderWVPreset == "-f")                encWv.WV_FastMode = true;              else                encWv.WV_HighQuality = true;            }            encoder = encWv;            break;        }
Missing Default,MPTagThat.Core.Burning,DeviceHelper,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Services\Burner\DeviceHelper.cs,ProcessErrorHandler,The following switch statement is missing a default case: switch (aAppName)        {          case "cdrecord.exe":            if (!aArguments.Contains(@"-minfo"))              log.Warn("Devicehelper: {0} did not exit properly with arguments: {1}' exitcode: {2}"' aAppName'                          aArguments' aExitcode);            break;          case "mkisofs.exe":            if (aExitcode == 253)              log.Error("Devicehelper: ISO creation failed. Possible error: The source files did change.");            else              log.Warn("Devicehelper: {0} did not exit properly with arguments: {1}' exitcode: {2}"' aAppName'                          aArguments' aExitcode);            break;        }
Missing Default,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,animationTimerTick,The following switch statement is missing a default case: switch (currentState)        {          case SplitterState.Collapsing:              if (Dock == DockStyle.Left || Dock == DockStyle.Right)            {              // vertical splitter              if (controlToHide.Width > animationStep)              {                if (expandParentForm && parentForm.WindowState != FormWindowState.Maximized                    && parentForm != null)                {                  parentForm.Width -= animationStep;                }                controlToHide.Width -= animationStep;              }              else              {                if (expandParentForm && parentForm.WindowState != FormWindowState.Maximized                    && parentForm != null)                {                  parentForm.Width = parentFormWidth;                }                controlToHide.Visible = false;                animationTimer.Enabled = false;                controlToHide.Width = controlWidth;                currentState = SplitterState.Collapsed;                Invalidate();              }            }            else            {              // horizontal splitter              if (controlToHide.Height > animationStep)              {                if (expandParentForm && parentForm.WindowState != FormWindowState.Maximized                    && parentForm != null)                {                  parentForm.Height -= animationStep;                }                controlToHide.Height -= animationStep;              }              else              {                if (expandParentForm && parentForm.WindowState != FormWindowState.Maximized                    && parentForm != null)                {                  parentForm.Height = parentFormHeight;                }                controlToHide.Visible = false;                animationTimer.Enabled = false;                controlToHide.Height = controlHeight;                currentState = SplitterState.Collapsed;                Invalidate();              }            }            break;            case SplitterState.Expanding:              if (Dock == DockStyle.Left || Dock == DockStyle.Right)            {              // vertical splitter              if (controlToHide.Width < (controlWidth - animationStep))              {                if (expandParentForm && parentForm.WindowState != FormWindowState.Maximized                    && parentForm != null)                {                  parentForm.Width += animationStep;                }                controlToHide.Width += animationStep;              }              else              {                if (expandParentForm && parentForm.WindowState != FormWindowState.Maximized                    && parentForm != null)                {                  parentForm.Width = parentFormWidth;                }                controlToHide.Width = controlWidth;                controlToHide.Visible = true;                animationTimer.Enabled = false;                currentState = SplitterState.Expanded;                Invalidate();              }            }            else            {              // horizontal splitter              if (controlToHide.Height < (controlHeight - animationStep))              {                if (expandParentForm && parentForm.WindowState != FormWindowState.Maximized                    && parentForm != null)                {                  parentForm.Height += animationStep;                }                controlToHide.Height += animationStep;              }              else              {                if (expandParentForm && parentForm.WindowState != FormWindowState.Maximized                    && parentForm != null)                {                  parentForm.Height = parentFormHeight;                }                controlToHide.Height = controlHeight;                controlToHide.Visible = true;                animationTimer.Enabled = false;                currentState = SplitterState.Expanded;                Invalidate();              }            }            break;        }
Missing Default,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following switch statement is missing a default case: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i * 3)' x + 1' y + 1 + (i * 3));                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 2' y + 1 + (i * 3)' x + 2' y + 2 + (i * 3));                }              }              break;              case VisualStyles.DoubleDots:              for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y + (i * 3)' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i * 3)' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y + (i * 3)' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i * 5)' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i * 5)' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y + (i * 5)' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x' y + (i * 5) + 1);                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 5)' x + 1' y + (i * 5));              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i * 2)' x + 2' y + (i * 2));              }                break;          }
Missing Default,NJFLib.Controls,CollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\CollapsibleSplitter\CollapsibleSplitter.cs,OnPaint,The following switch statement is missing a default case: switch (visualStyle)          {            case VisualStyles.Mozilla:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i * 3)' y' x + 1 + (i * 3)' y + 1);                // dark dot                g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i * 3)' y + 1' x + 2 + (i * 3)' y + 2);                // overdraw the background color as we actually drew 2px diagonal lines' not just dots                if (hot)                {                  g.DrawLine(new Pen(hotColor)' x + 1 + (i * 3)' y + 2' x + 2 + (i * 3)' y + 2);                }                else                {                  g.DrawLine(new Pen(BackColor)' x + 1 + (i * 3)' y + 2' x + 2 + (i * 3)' y + 2);                }              }              break;              case VisualStyles.DoubleDots:                for (int i = 0; i < 30; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i * 3)' y' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i * 3)' y - 1' 1' 1);                i++;                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i * 3)' y + 2' 1' 1);                // dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i * 3)' y + 1' 1' 1);              }              break;              case VisualStyles.Win9x:                g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);              g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);              g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);              g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);              break;              case VisualStyles.XP:                for (int i = 0; i < 18; i++)              {                // light dot                g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i * 5)' y' 2' 2);                // light light dot                g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i * 5)' y + 1' 1' 1);                // dark dark dot                g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x + (i * 5)' y' 1' 1);                // dark fill                g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i * 5)' y' x + (i * 5) + 1' y);                g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i * 5)' y' x + (i * 5)' y + 1);              }              break;              case VisualStyles.Lines:                for (int i = 0; i < 44; i++)              {                g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i * 2)' y' x + (i * 2)' y + 2);              }                break;          }
Missing Default,Stepi.UI,ExtendedPanel,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\ExtendedPanel.cs,Collapse,The following switch statement is missing a default case: switch (captionAlign)        {          case DirectionStyle.Up: //set above            break;            case DirectionStyle.Left:            oldStyle = DirectionStyle.Left;            newStyle = DirectionStyle.Right;            break;            case DirectionStyle.Right:            oldStyle = DirectionStyle.Right;            newStyle = DirectionStyle.Left;            break;            case DirectionStyle.Down:            oldStyle = DirectionStyle.Down;            newStyle = DirectionStyle.Up;            break;        }
Missing Default,Stepi.UI,ExtendedPanel,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\ExtendedPanel.cs,Expand,The following switch statement is missing a default case: switch (captionAlign)        {          case DirectionStyle.Up: //set above            break;            case DirectionStyle.Left:            oldStyle = DirectionStyle.Right;            newStyle = DirectionStyle.Left;            break;            case DirectionStyle.Right:            oldStyle = DirectionStyle.Left;            newStyle = DirectionStyle.Right;            break;            case DirectionStyle.Down:            oldStyle = DirectionStyle.Up;            newStyle = DirectionStyle.Down;            break;        }
Missing Default,Stepi.UI,ExtendedPanel,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\ExtendedPanel.cs,CheckDocking,The following switch statement is missing a default case: switch (captionAlign)          {            case DirectionStyle.Up:              SuspendLayout();              foreach (Control control in Controls)              {                if (control != captionCtrl)                {                  control.Top += offset;                }              }              ResumeLayout(false);              break;              case DirectionStyle.Down:              SuspendLayout();              foreach (Control control in Controls)              {                if (control != captionCtrl)                {                  control.Top -= offset;                }              }              ResumeLayout(false);                break;              case DirectionStyle.Left:              SuspendLayout();              foreach (Control control in Controls)              {                if (control != captionCtrl)                {                  control.Left += offset;                }              }              ResumeLayout(false);              break;              case DirectionStyle.Right:              SuspendLayout();              foreach (Control control in Controls)              {                if (control != captionCtrl)                {                  control.Left -= offset;                }              }              ResumeLayout(false);              break;          }
Missing Default,Stepi.UI,ExtendedPanel,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\ExtendedPanel.cs,SetSizeCallback,The following switch statement is missing a default case: switch (captionAlign)        {          case DirectionStyle.Down:            int tempY = Height - size;            //set the new location of the panel            Win32Wrapper.SetWindowPos(Handle' IntPtr.Zero' Location.X' Location.Y + tempY' Width' size'                                      Win32Wrapper.FlagsSetWindowPos.SWP_NOZORDER |                                      Win32Wrapper.FlagsSetWindowPos.SWP_SHOWWINDOW);            break;            case DirectionStyle.Up:            Height = size;            break;            case DirectionStyle.Right:            int tempX = Width - size;            Win32Wrapper.SetWindowPos(Handle' IntPtr.Zero' Location.X + tempX' Location.Y' size' Height'                                      Win32Wrapper.FlagsSetWindowPos.SWP_NOZORDER |                                      Win32Wrapper.FlagsSetWindowPos.SWP_SHOWWINDOW);            break;            case DirectionStyle.Left:            Width = size;            if (Width < captionCtrl.Width)            {              Width = captionCtrl.Width;            }            break;        }
Missing Default,Stepi.UI,ExtendedPanel,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\ExtendedPanel.cs,SetCaptionControl,The following switch statement is missing a default case: switch (captionAlign)        {          case DirectionStyle.Up:            if (flag)            {              captionCtrl.Height = captionSize; //(int)(this.Height * captionSize / 100);              captionCtrl.Location = new Point(0' 0);            }            if (Width != captionCtrl.Width)            {              captionCtrl.Width = Width;            }            break;            case DirectionStyle.Down:            if (flag)            {              captionCtrl.Height = captionSize; //(int)(this.Height * captionSize / 100);              captionCtrl.Location = new Point(0' Height - captionCtrl.Height);            }            if (Width != captionCtrl.Width)            {              captionCtrl.Width = Width;            }              break;            case DirectionStyle.Left:            if (flag)            {              captionCtrl.Width = captionSize; // (int)(this.Width * captionSize / 100);              captionCtrl.Location = new Point(0' 0);            }            if (captionCtrl.Height != Height)            {              captionCtrl.Height = Height;            }            break;            case DirectionStyle.Right:            if (flag)            {              captionCtrl.Width = captionSize; // (int)(this.Width * captionSize / 100);              captionCtrl.Location = new Point(Width - captionCtrl.Width' 0);            }            if (captionCtrl.Height != Height)            {              captionCtrl.Height = Height;            }              break;        }
Missing Default,Stepi.UI,ExtendedPanel,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\ExtendedPanel.cs,WndProc,The following switch statement is missing a default case: switch (captionAlign)          {            case DirectionStyle.Down:              //set the new location of the panel              Win32Wrapper.SetWindowPos(Handle' IntPtr.Zero' Location.X' Location.Y + captionCtrl.Location.Y' Width'                                        captionCtrl.Height' Win32Wrapper.FlagsSetWindowPos.SWP_NOZORDER);              captionCtrl.SetDirectionStyle(DirectionStyle.Up);              break;              case DirectionStyle.Up:              Height = captionCtrl.Height;              captionCtrl.SetDirectionStyle(DirectionStyle.Down);              break;              case DirectionStyle.Right:              //int tempX = this.Width - size;              Win32Wrapper.SetWindowPos(Handle' IntPtr.Zero' Location.X + Width - captionCtrl.Location.X' Location.Y'                                        captionCtrl.Width' Height' Win32Wrapper.FlagsSetWindowPos.SWP_NOZORDER);              captionCtrl.SetDirectionStyle(DirectionStyle.Left);              break;              case DirectionStyle.Left:              Width = captionCtrl.Width;              captionCtrl.SetDirectionStyle(DirectionStyle.Right);              break;          }
Missing Default,Stepi.UI,ExtendedPanel,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\ExtendedPanel.cs,CollapsingHandler,The following switch statement is missing a default case: switch (captionAlign)        {          case DirectionStyle.Up:            if (e.Old == DirectionStyle.Up)            {              backupHeight = Height;              backupWidth = Width;                collapseAnimation.Maximum = Height;              collapseAnimation.Minimum = captionCtrl.Height;              if (animation == Animation.Yes)              {                collapseAnimation.Step = step;              }              else              {                collapseAnimation.Step = Height - captionCtrl.Height;              }            }            else            {              collapseAnimation.Maximum = backupHeight;              collapseAnimation.Minimum = captionCtrl.Height;              if (animation == Animation.Yes)              {                collapseAnimation.Step = -step;              }              else              {                collapseAnimation.Step = -(backupHeight - captionCtrl.Height);              }            }            break;            case DirectionStyle.Down:            if (e.Old == DirectionStyle.Down)            {              //have to extract caption ctrl because of the flickering involved              ChangeCaptionParent();                //save the size as will need them for expanding the control back              backupHeight = Height;              backupWidth = Width;                collapseAnimation.Maximum = Height;              collapseAnimation.Minimum = captionCtrl.Height;              if (animation == Animation.Yes)              {                collapseAnimation.Step = step;              }              else              {                collapseAnimation.Step = Height - captionCtrl.Height;              }            }            else            {              //have to extract caption ctrl because of the flickering involved              ChangeCaptionParent();                collapseAnimation.Maximum = backupHeight;              collapseAnimation.Minimum = captionCtrl.Height;              if (animation == Animation.Yes)              {                collapseAnimation.Step = -step;              }              else              {                collapseAnimation.Step = -(backupHeight - captionCtrl.Height);              }            }            break;              case DirectionStyle.Left:            if (e.Old == DirectionStyle.Left)            {              //save the size as will need them for expanding the control back              backupHeight = Height;              backupWidth = Width;                collapseAnimation.Maximum = Width;              collapseAnimation.Minimum = captionCtrl.Width;              if (animation == Animation.Yes)              {                collapseAnimation.Step = step;              }              else              {                collapseAnimation.Step = Width - captionCtrl.Width;              }            }            else            {              collapseAnimation.Maximum = backupWidth;              collapseAnimation.Minimum = captionCtrl.Width;              if (animation == Animation.Yes)              {                collapseAnimation.Step = -step;              }              else              {                collapseAnimation.Step = -(backupWidth - captionCtrl.Width);              }            }            break;            case DirectionStyle.Right:            if (e.Old == DirectionStyle.Right)            {              //have to extract caption ctrl because of the flickering involved              ChangeCaptionParent();                backupHeight = Height;              backupWidth = Width;                collapseAnimation.Maximum = Width;              collapseAnimation.Minimum = captionCtrl.Width;              if (animation == Animation.Yes)              {                collapseAnimation.Step = step;              }              else              {                collapseAnimation.Step = Width - captionCtrl.Width;              }            }            else            {              //have to extract caption ctrl because of the flickering involved              ChangeCaptionParent();                collapseAnimation.Maximum = backupWidth;              collapseAnimation.Minimum = captionCtrl.Width;              if (animation == Animation.Yes)              {                collapseAnimation.Step = -step;              }              else              {                collapseAnimation.Step = -(backupWidth - captionCtrl.Width);              }            }            break;        }
Missing Default,Stepi.UI,DirectionCtrl,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\ExtendedPanel\Helpers\DirectionCtrl.cs,OnMouseClickEvent,The following switch statement is missing a default case: switch (directionStyle)        {          case DirectionStyle.Up:            directionStyle = DirectionStyle.Down;            break;            case DirectionStyle.Down:            directionStyle = DirectionStyle.Up;            break;            case DirectionStyle.Left:            directionStyle = DirectionStyle.Right;            break;            case DirectionStyle.Right:            directionStyle = DirectionStyle.Left;            break;        }
Missing Default,Raccoom.Windows.Forms,TreeViewFolderBrowserDataProviderMusicDb,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\TreeviewBrowser\TreeViewFolderBrowserDataProviderMusicDb.cs,RequestSubDirs,The following switch statement is missing a default case: switch ((string)parent.Tag)          {            case "artist":              _rootFolder = RootFolder.Artist;              result = ServiceScope.Get<IMusicDatabase>().GetArtists();              break;              case "albumartist":              _rootFolder = RootFolder.AlbumArtist;              result = ServiceScope.Get<IMusicDatabase>().GetAlbumArtists();              break;              case "genre":              _rootFolder = RootFolder.Genre;              result = ServiceScope.Get<IMusicDatabase>().GetGenres();              break;          }
Missing Default,MPTagThat.Core.WinControls,MPTCollapsibleSplitter,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\WinControls\MPTCollapsibleSplitter.cs,OnMessageReceive,The following switch statement is missing a default case: switch (action.ToLower())        {            // Message sent' when a Theme is changing          case "themechanged":            {              BackColor = themeManager.CurrentTheme.BackColor;              break;            }        }
Missing Default,MPTagThat.Core.WinControls,TTExtendedPanel,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\WinControls\MPTExtendedPanel.cs,OnMessageReceive,The following switch statement is missing a default case: switch (action.ToLower())        {            // Message sent' when a Theme is changing          case "themechanged":            {              BackColor = themeManager.CurrentTheme.BackColor;              CaptionColorOne = themeManager.CurrentTheme.PanelHeadingBackColor;              CaptionFont = themeManager.CurrentTheme.PanelHeadingFont;              CaptionTextColor = themeManager.CurrentTheme.LabelForeColor;              DirectionCtrlColor = themeManager.CurrentTheme.PanelHeadingDirectionCtrlColor;              break;            }            case "languagechanged":            Refresh();            break;        }
Missing Default,MPTagThat.Core.WinControls,MPTRadioButton,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\WinControls\MPTRadioButton.cs,OnMessageReceive,The following switch statement is missing a default case: switch (action.ToLower())        {          case "themechanged":            {              Font = themeManager.CurrentTheme.LabelFont;              break;            }            case "languagechanged":            Text = MPTWinControlsCommon.Localise(_localisationContext' _localisation);            Refresh();            break;        }
Missing Default,MPTagThat.Core.WinControls,MPTPanel,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\WinControls\MPTPanel.cs,OnMessageReceive,The following switch statement is missing a default case: switch (action.ToLower())        {            // Message sent' when a Theme is changing          case "themechanged":            {              BackColor = themeManager.CurrentTheme.BackColor;              break;            }        }
Missing Default,MPTagThat.Core.WinControls,MPTTabPage,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\WinControls\MPTTabPage.cs,OnMessageReceive,The following switch statement is missing a default case: switch (action.ToLower())        {          case "themechanged":            {              Font = themeManager.CurrentTheme.LabelFont;              if (TabControl != null)              {                TabControl.Font = themeManager.CurrentTheme.LabelFont;              }              break;            }             case "languagechanged":            Text = MPTWinControlsCommon.Localise(_localisationContext' _localisation);            Refresh();            break;        }
Missing Default,MPTagThat.Core.WinControls,MPTCheckBox,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\WinControls\MPTCheckBox.cs,OnMessageReceive,The following switch statement is missing a default case: switch (action.ToLower())        {            // Message sent' when a Theme is changing          case "themechanged":            {              Font = themeManager.CurrentTheme.LabelFont;              break;            }            case "languagechanged":            Text = MPTWinControlsCommon.Localise(_localisationContext' _localisation);            Refresh();            break;        }
Missing Default,MPTagThat.Core.WinControls,MPTButton,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\WinControls\MPTButton.cs,OnMessageReceive,The following switch statement is missing a default case: switch (action.ToLower())        {          case "themechanged":            {              Font = themeManager.CurrentTheme.LabelFont;              break;            }            case "languagechanged":            Text = MPTWinControlsCommon.Localise(_localisationContext' _localisation);            Refresh();            break;        }
Missing Default,MPTagThat.Core.WinControls,MPTGroupBox,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\WinControls\MPTGroupBox.cs,OnMessageReceive,The following switch statement is missing a default case: switch (action.ToLower())        {          case "themechanged":            {              Font = themeManager.CurrentTheme.LabelFont;              break;            }            case "languagechanged":            Text = MPTWinControlsCommon.Localise(_localisationContext' _localisation);            Refresh();            break;        }
Missing Default,MPTagThat.Core.WinControls,MPTLabel,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\Controls\WinControls\MPTLabel.cs,OnMessageReceive,The following switch statement is missing a default case: switch (action.ToLower())        {          // Message sent' when a Theme is changing          case "themechanged":            {              Font = themeManager.CurrentTheme.LabelFont;              break;            }            case "languagechanged":            Text = MPTWinControlsCommon.Localise(_localisationContext' _localisation);            Refresh();            break;        }
Missing Default,MPTagThat.Core.ShellLib,ApplicationDesktopToolbar,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\ShellLib\ApplicationDesktopToolbar.cs,SizeAppBar,The following switch statement is missing a default case: switch (m_Edge)        {          case AppBarEdges.Left:            rt.right = rt.left + m_PrevSize.Width;            break;          case AppBarEdges.Right:            rt.left = rt.right - m_PrevSize.Width;            break;          case AppBarEdges.Top:            rt.bottom = rt.top + m_PrevSize.Height;            break;          case AppBarEdges.Bottom:            rt.top = rt.bottom - m_PrevSize.Height;            break;        }
Missing Default,MPTagThat.Core.ShellLib,ApplicationDesktopToolbar,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\ShellLib\ApplicationDesktopToolbar.cs,OnAppbarNotification,The following switch statement is missing a default case: switch (msgType)        {          case AppBarNotifications.PosChanged:            SizeAppBar();            break;            case AppBarNotifications.StateChange:            state = AppbarGetTaskbarState();            if ((state & AppBarStates.AlwaysOnTop) != 0)            {              TopMost = true;              BringToFront();            }            else            {              TopMost = false;              SendToBack();            }            break;            case AppBarNotifications.FullScreenApp:            if ((int)msg.LParam != 0)            {              TopMost = false;              SendToBack();            }            else            {              state = AppbarGetTaskbarState();              if ((state & AppBarStates.AlwaysOnTop) != 0)              {                TopMost = true;                BringToFront();              }              else              {                TopMost = false;                SendToBack();              }            }              break;            case AppBarNotifications.WindowArrange:            if ((int)msg.LParam != 0) // before              Visible = false;            else // after              Visible = true;              break;        }
Missing Default,MPTagThat.Core.ShellLib,ShellBrowseForFolderDialog,D:\research\architectureSmells\repos\MediaPortal_MPTagThat\MPTagThat.Core\ShellLib\ShellBrowseForFolderDialog.cs,myBrowseCallbackProc,The following switch statement is missing a default case: switch ((BrowseForFolderMessages)uMsg)        {          case BrowseForFolderMessages.BFFM_INITIALIZED:            Debug.WriteLine("BFFM_INITIALIZED");              if (OnInitialized != null)            {              InitializedEventArgs args = new InitializedEventArgs(hwnd);              OnInitialized(this' args);            }              break;            case BrowseForFolderMessages.BFFM_IUNKNOWN:            Debug.WriteLine("BFFM_IUNKNOWN");              if (OnIUnknown != null)            {              IUnknownEventArgs args = new IUnknownEventArgs(hwnd' (IntPtr)lParam);              OnIUnknown(this' args);            }              break;            case BrowseForFolderMessages.BFFM_SELCHANGED:            Debug.WriteLine("BFFM_SELCHANGED");              if (OnSelChanged != null)            {              SelChangedEventArgs args = new SelChangedEventArgs(hwnd' (IntPtr)lParam);              OnSelChanged(this' args);            }              break;            case BrowseForFolderMessages.BFFM_VALIDATEFAILEDA:            Debug.WriteLine("BFFM_VALIDATEFAILEDA");              if (OnValidateFailed != null)            {              string failedSel = Marshal.PtrToStringAnsi((IntPtr)lParam);              ValidateFailedEventArgs args = new ValidateFailedEventArgs(hwnd' failedSel);              return OnValidateFailed(this' args);            }            break;            case BrowseForFolderMessages.BFFM_VALIDATEFAILEDW:            Debug.WriteLine("BFFM_VALIDATEFAILEDW");              if (OnValidateFailed != null)            {              string failedSel = Marshal.PtrToStringUni((IntPtr)lParam);              ValidateFailedEventArgs args = new ValidateFailedEventArgs(hwnd' failedSel);              return OnValidateFailed(this' args);            }              break;        }
