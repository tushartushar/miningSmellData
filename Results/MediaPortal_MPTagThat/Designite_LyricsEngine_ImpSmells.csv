Implementation smell,Namespace,Class,File,Method,Description
Long Method,LyricsEngine.LyricsSites,Shironet,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\Shironet.cs,SecondCallbackMethod,The method has 146 lines of code.
Complex Method,LyricsEngine.LRC,SimpleLRC,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LRC\SimpleLRC.cs,GetLRCinfoFromFile,Cyclomatic complexity of the method is 10
Complex Method,LyricsEngine.LyricsSites,Lyrster,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\Lyrster.cs,CallbackMethod,Cyclomatic complexity of the method is 8
Complex Method,LyricsEngine.LyricsSites,Lyrics007,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\Lyrics007.cs,CallbackMethod,Cyclomatic complexity of the method is 8
Complex Method,LyricsEngine.LyricsSites,Shironet,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\Shironet.cs,SecondCallbackMethod,Cyclomatic complexity of the method is 21
Long Parameter List,LyricsEngine,LyricSearch,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricSearch.cs,LyricSearch,The method has 7 parameters. Parameters: lyricsController' artist' title' strippedArtistName' row' allowAllToComplete' automaticUpdate
Long Parameter List,LyricsEngine,LyricsController,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsController.cs,LyricsController,The method has 7 parameters. Parameters: mainForm' eventStopThread' lyricSites' allowAllToComplete' automaticUpdate' find' replace
Long Parameter List,LyricsEngine,LyricsController,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsController.cs,LyricFound,The method has 5 parameters. Parameters: lyricStrings' artist' title' site' row
Long Parameter List,LyricsEngine,LyricsController,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsController.cs,LyricNotFound,The method has 5 parameters. Parameters: artist' title' message' site' row
Long Parameter List,LyricsEngine.LyricsSites,LyricsSiteFactory,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\LyricsSiteFactory.cs,Create,The method has 5 parameters. Parameters: identifier' artist' title' mEventStopSiteSearches' timeLimit
Long Parameter List,LyricsEngine.LyricsSites,LyricsSiteFactory,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\LyricsSiteFactory.cs,Create,The method has 5 parameters. Parameters: type' artist' title' mEventStopSiteSearches' timeLimit
Long Identifier,LyricsEngine.LRC,SimpleLRC,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LRC\SimpleLRC.cs,,The length of the parameter _simpleLRCTimeAndLineCollection is 31.
Long Identifier,LyricsEngine.LRC,SimpleLRC,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LRC\SimpleLRC.cs,,The length of the parameter _simpleLRCTimeAndLineCollectionWithOffset is 41.
Long Identifier,LyricsEngine.LyricsSites,LyricsSiteFactory,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\LyricsSiteFactory.cs,,The length of the parameter NoPaymentprocessorHasBeenRegisteredWithTheIdentifier is 52.
Long Identifier,LyricsEngine.lrcfinder,LrcFinder,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\Web References\lrcfinder\Reference.cs,,The length of the parameter SaveLRCWithGuidOperationCompleted is 33.
Long Identifier,LyricsEngine.lrcfinder,LrcFinder,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\Web References\lrcfinder\Reference.cs,,The length of the parameter useDefaultCredentialsSetExplicitly is 34.
Long Statement,LyricsEngine,LyricSearch,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricSearch.cs,RunSearchForSiteInThread,The length of the statement  "                    var lyricsSearchSite = LyricsSiteFactory.Create(lyricsSearchSiteName' _mArtist' _mTitle' _mEventStopSiteSearches' TimeLimitForSite); " is 132.
Long Statement,LyricsEngine,LyricSearch,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricSearch.cs,ValidateSearchOutput,The length of the statement  "                        _mLyricsController.LyricNotFound(_mOriginalArtist' _mOriginalTrack' "A matching lyric could not be found!"' site' _mRow); " is 121.
Long Statement,LyricsEngine,LyricSearch,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricSearch.cs,ValidateSearchOutputForAllowAllToComplete,The length of the statement  "                        _mLyricsController.LyricNotFound(_mOriginalArtist' _mOriginalTrack' "A matching lyric could not be found!"' site' _mRow); " is 121.
Long Statement,LyricsEngine,LyricSearch,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricSearch.cs,StopDueToTimeLimit,The length of the statement  "            _mLyricsController.LyricNotFound(_mOriginalArtist' _mOriginalTrack' "A matching lyric could not be found!"' "All (timed out)"' _mRow); " is 134.
Long Statement,LyricsEngine,LyricsController,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsController.cs,AddNewLyricSearch,The length of the statement  "                        var lyricSearch = new LyricSearch(this' artist' title' strippedArtistName' row' _mAllowAllToComplete' _mAutomaticUpdate); " is 121.
Long Statement,LyricsEngine.lrcfinder,LrcFinder,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\Web References\lrcfinder\Reference.cs,OnFindLRCOperationCompleted,The length of the statement  "                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,LyricsEngine.lrcfinder,LrcFinder,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\Web References\lrcfinder\Reference.cs,OnFindLRCOperationCompleted,The length of the statement  "                this.FindLRCCompleted(this' new FindLRCCompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 141.
Long Statement,LyricsEngine.lrcfinder,LrcFinder,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\Web References\lrcfinder\Reference.cs,OnFindLRCsOperationCompleted,The length of the statement  "                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,LyricsEngine.lrcfinder,LrcFinder,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\Web References\lrcfinder\Reference.cs,OnFindLRCsOperationCompleted,The length of the statement  "                this.FindLRCsCompleted(this' new FindLRCsCompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 143.
Long Statement,LyricsEngine.lrcfinder,LrcFinder,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\Web References\lrcfinder\Reference.cs,OnSaveLRCOperationCompleted,The length of the statement  "                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,LyricsEngine.lrcfinder,LrcFinder,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\Web References\lrcfinder\Reference.cs,OnSaveLRCOperationCompleted,The length of the statement  "                this.SaveLRCCompleted(this' new SaveLRCCompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 141.
Long Statement,LyricsEngine.lrcfinder,LrcFinder,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\Web References\lrcfinder\Reference.cs,SaveLRCWithGuidAsync,The length of the statement  "                this.SaveLRCWithGuidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveLRCWithGuidOperationCompleted); " is 123.
Long Statement,LyricsEngine.lrcfinder,LrcFinder,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\Web References\lrcfinder\Reference.cs,OnSaveLRCWithGuidOperationCompleted,The length of the statement  "                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,LyricsEngine.lrcfinder,LrcFinder,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\Web References\lrcfinder\Reference.cs,OnSaveLRCWithGuidOperationCompleted,The length of the statement  "                this.SaveLRCWithGuidCompleted(this' new SaveLRCWithGuidCompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 157.
Long Statement,LyricsEngine.lrcfinder,LrcFinder,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\Web References\lrcfinder\Reference.cs,OnNewDomainOperationCompleted,The length of the statement  "                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg)); " is 132.
Long Statement,LyricsEngine.lrcfinder,LrcFinder,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\Web References\lrcfinder\Reference.cs,OnNewDomainOperationCompleted,The length of the statement  "                this.NewDomainCompleted(this' new NewDomainCompletedEventArgs(invokeArgs.Results' invokeArgs.Error' invokeArgs.Cancelled' invokeArgs.UserState)); " is 145.
Complex Conditional,LyricsEngine.LyricsSites,LyricsNet,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\LyricsNet.cs,SecondCallbackMethod,The conditional expression  "LyricText.Length == 0 || (LyricText.Contains("<") || LyricText.Contains(">") || LyricText.Contains("a href"))"  is complex.
Complex Conditional,LyricsEngine.LyricsSites,Shironet,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\Shironet.cs,SecondCallbackMethod,The conditional expression  "LyricText.Length == 0 || (LyricText.Contains("<") || LyricText.Contains(">") || LyricText.Contains("a href"))"  is complex.
Magic Number,LyricsEngine.LRC,SimpleLRCTimeAndLine,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LRC\SimpleLRCTimeAndLine.cs,IncludeOffset,The following statement contains a magic number: if ((_min*60*1000 + _sec*1000 + _msec) < offset)              {                  _min = 0;                  _sec = 0;                  _msec = 0;                  return this;              }
Magic Number,LyricsEngine.LRC,SimpleLRCTimeAndLine,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LRC\SimpleLRCTimeAndLine.cs,IncludeOffset,The following statement contains a magic number: if ((_min*60*1000 + _sec*1000 + _msec) < offset)              {                  _min = 0;                  _sec = 0;                  _msec = 0;                  return this;              }
Magic Number,LyricsEngine.LRC,SimpleLRCTimeAndLine,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LRC\SimpleLRCTimeAndLine.cs,IncludeOffset,The following statement contains a magic number: if ((_min*60*1000 + _sec*1000 + _msec) < offset)              {                  _min = 0;                  _sec = 0;                  _msec = 0;                  return this;              }
Magic Number,LyricsEngine.LRC,SimpleLRCTimeAndLine,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LRC\SimpleLRCTimeAndLine.cs,IncludeOffset,The following statement contains a magic number: var time = new DateTime(1111' 11' 11' 0' _min' _sec' _msec);
Magic Number,LyricsEngine.LRC,SimpleLRCTimeAndLine,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LRC\SimpleLRCTimeAndLine.cs,IncludeOffset,The following statement contains a magic number: var time = new DateTime(1111' 11' 11' 0' _min' _sec' _msec);
Magic Number,LyricsEngine.LRC,SimpleLRCTimeAndLine,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LRC\SimpleLRCTimeAndLine.cs,IncludeOffset,The following statement contains a magic number: var time = new DateTime(1111' 11' 11' 0' _min' _sec' _msec);
Magic Number,LyricsEngine.LRC,SimpleLRCTimeAndLine,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LRC\SimpleLRCTimeAndLine.cs,CompareTo,The following statement contains a magic number: long thisTime = _min*60*1000 + _sec*1000 + _msec;
Magic Number,LyricsEngine.LRC,SimpleLRCTimeAndLine,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LRC\SimpleLRCTimeAndLine.cs,CompareTo,The following statement contains a magic number: long thisTime = _min*60*1000 + _sec*1000 + _msec;
Magic Number,LyricsEngine.LRC,SimpleLRCTimeAndLine,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LRC\SimpleLRCTimeAndLine.cs,CompareTo,The following statement contains a magic number: long thisTime = _min*60*1000 + _sec*1000 + _msec;
Magic Number,LyricsEngine.LRC,SimpleLRCTimeAndLine,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LRC\SimpleLRCTimeAndLine.cs,CompareTo,The following statement contains a magic number: long objTime = objSLRC._min*60*1000 + objSLRC._sec*1000 + objSLRC._msec;
Magic Number,LyricsEngine.LRC,SimpleLRCTimeAndLine,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LRC\SimpleLRCTimeAndLine.cs,CompareTo,The following statement contains a magic number: long objTime = objSLRC._min*60*1000 + objSLRC._sec*1000 + objSLRC._msec;
Magic Number,LyricsEngine.LRC,SimpleLRCTimeAndLine,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LRC\SimpleLRCTimeAndLine.cs,CompareTo,The following statement contains a magic number: long objTime = objSLRC._min*60*1000 + objSLRC._sec*1000 + objSLRC._msec;
Magic Number,LyricsEngine,LyricSearch,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricSearch.cs,Run,The following statement contains a magic number: while (!_mSearchHasEnded)              {                  Thread.Sleep(300);              }
Magic Number,LyricsEngine,LyricsController,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsController.cs,Run,The following statement contains a magic number: while (true)              {                  Thread.Sleep(100);                    // check if thread is cancelled                  if (_mEventStopLyricController.WaitOne())                  {                      // clean-up operations may be placed here                      foreach (var thread in _threadList)                      {                          thread.Abort();                      }                        _mStopSearches = true;                        var stillThreadsAlive = _threadList.Count > 0;                      while (stillThreadsAlive)                      {                          stillThreadsAlive = false;                          foreach (var thread in _threadList)                          {                              if (thread.IsAlive)                              {                                  stillThreadsAlive = true;                              }                          }                      }                        _mEventStoppedLyricController.Set();                      break;                  }              }
Magic Number,LyricsEngine,LyricsController,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsController.cs,FinishThread,The following statement contains a magic number: while (!_mEventStoppedLyricController.WaitOne(Timeout.Infinite' true))              {                  Thread.Sleep(50);              }
Magic Number,LyricsEngine.LyricsSites,Actionext,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\Actionext.cs,FindLyricsWithTimer,The following statement contains a magic number: while (Complete == false)              {                  if (MEventStopSiteSearches.WaitOne(1' true))                  {                      Complete = true;                  }                  else                  {                      Thread.Sleep(300);                  }              }
Magic Number,LyricsEngine.LyricsSites,Actionext,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\Actionext.cs,CallbackMethod,The following statement contains a magic number: try              {                  reply = e.Result;                  reader = new StreamReader(reply' Encoding.UTF8);                    var line = "";                  var noOfLinesCount = 0;                    while (line.IndexOf(@"<div class=""lyrics-text"">"' StringComparison.Ordinal) == -1)                  {                      if (reader.EndOfStream || ++noOfLinesCount > 300)                      {                          thisMayBeTheCorrectLyric = false;                          break;                      }                      line = reader.ReadLine() ?? "";                  }                    if (thisMayBeTheCorrectLyric)                  {                      var lyricTemp = new StringBuilder();                      line = reader.ReadLine() ?? "";                        while (line.IndexOf("</div>"' StringComparison.Ordinal) == -1)                      {                          lyricTemp.Append(line);                          if (reader.EndOfStream)                          {                              break;                          }                          line = reader.ReadLine() ?? "";                      }                        lyricTemp.Replace("<br>"' Environment.NewLine);                      lyricTemp.Replace("'<br />"' Environment.NewLine);                      lyricTemp.Replace("<br />"' Environment.NewLine);                      lyricTemp.Replace("&amp;"' "&");                        LyricText = lyricTemp.ToString().Trim();                        if (LyricText.Contains("but we do not have the lyrics"))                      {                          LyricText = NotFound;                      }                  }                  else                  {                      LyricText = NotFound;                  }              }              catch              {                  LyricText = NotFound;              }              finally              {                  if (reader != null)                  {                      reader.Close();                  }                  if (reply != null)                  {                      reply.Close();                  }                  Complete = true;              }
Magic Number,LyricsEngine.LyricsSites,LyricsNet,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\LyricsNet.cs,FindLyricsWithTimer,The following statement contains a magic number: while (_firstStepComplete == false)              {                  if (MEventStopSiteSearches.WaitOne(1' true))                  {                      _firstStepComplete = true;                  }                  else                  {                      Thread.Sleep(100);                  }              }
Magic Number,LyricsEngine.LyricsSites,LyricsNet,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\LyricsNet.cs,FindLyricsWithTimer,The following statement contains a magic number: while (Complete == false)              {                  if (MEventStopSiteSearches.WaitOne(1' true))                  {                      Complete = true;                  }                  else                  {                      Thread.Sleep(100);                  }              }
Magic Number,LyricsEngine.LyricsSites,LyricsNet,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\LyricsNet.cs,FirstCallbackMethod,The following statement contains a magic number: try              {                  reply = e.Result;                  reader = new StreamReader(reply' Encoding.UTF8);                    while (!thisMayBeTheCorrectPage)                  {                      // Read line                      if (reader.EndOfStream)                      {                          break;                      }                      var line = reader.ReadLine() ?? "";                        // Try to find match in line                      var findLyricsPagePattern = FindLyricsPagePatternPrefix + Title + FindLyricsPagePatternSuffix;                      var findLyricsPageMatch = Regex.Match(line' findLyricsPagePattern' RegexOptions.IgnoreCase);                        if (findLyricsPageMatch.Groups.Count == 2)                      {                          _lyricsIndex = findLyricsPageMatch.Groups[1].Value;                            if (Convert.ToUInt32(_lyricsIndex) > 0)                          {                              // Found page                              thisMayBeTheCorrectPage = true;                          }                      }                  }                    // Not found                  if (!thisMayBeTheCorrectPage)                  {                      LyricText = NotFound;                  }              }              catch              {                  LyricText = NotFound;              }              finally              {                  if (reader != null)                  {                      reader.Close();                  }                    if (reply != null)                  {                      reply.Close();                  }                  _firstStepComplete = true;              }
Magic Number,LyricsEngine.LyricsSites,ViewLyrics,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\ViewLyrics.cs,FindLyricsWithTimer,The following statement contains a magic number: while (Complete == false)              {                  if (MEventStopSiteSearches.WaitOne(1' true))                  {                      Complete = true;                  }                  else                  {                      Thread.Sleep(300);                  }              }
Magic Number,LyricsEngine.LyricsSites,Lyricsmode,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\Lyricsmode.cs,FindLyricsWithTimer,The following statement contains a magic number: while (Complete == false)              {                  if (MEventStopSiteSearches.WaitOne(1' true))                  {                      Complete = true;                  }                  else                  {                      Thread.Sleep(300);                  }              }
Magic Number,LyricsEngine.LyricsSites,Lyrster,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\Lyrster.cs,FindLyricsWithTimer,The following statement contains a magic number: while (Complete == false)              {                  if (MEventStopSiteSearches.WaitOne(1' true))                  {                      Complete = true;                  }                  else                  {                      Thread.Sleep(300);                  }              }
Magic Number,LyricsEngine.LyricsSites,LyrDb,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\LyrDb.cs,FindLyricsWithTimer,The following statement contains a magic number: while (Complete == false)              {                  if (MEventStopSiteSearches.WaitOne(1' true))                  {                      Complete = true;                  }                  else                  {                      Thread.Sleep(300);                  }              }
Magic Number,LyricsEngine.LyricsSites,LyrDb,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\LyrDb.cs,CallbackMethodSearch,The following statement contains a magic number: try              {                  reply = e.Result;                  reader = new StreamReader(reply' Encoding.UTF8);                    var result = reader.ReadToEnd();                    if (result.Equals(""))                  {                      LyricText = NotFound;                      return;                  }                    var id = result.Substring(0' result.IndexOf(@"\"' StringComparison.Ordinal));                    var urlString = string.Format(BaseUrl + "/getlyr.php?q={0}"' id);                    var client2 = new LyricsWebClient();                    var uri = new Uri(urlString);                  client2.OpenReadCompleted += CallbackMethodGetLyric;                  client2.OpenReadAsync(uri);                    while (Complete == false)                  {                      if (MEventStopSiteSearches.WaitOne(1' true))                      {                          Complete = true;                      }                      else                      {                          Thread.Sleep(300);                      }                  }              }              catch              {                  LyricText = NotFound;              }              finally              {                  if (reader != null)                  {                      reader.Close();                  }                    if (reply != null)                  {                      reply.Close();                  }              }
Magic Number,LyricsEngine.LyricsSites,HotLyrics,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\HotLyrics.cs,FindLyricsWithTimer,The following statement contains a magic number: while (Complete == false)              {                  if (MEventStopSiteSearches.WaitOne(1' true))                  {                      Complete = true;                  }                  else                  {                      Thread.Sleep(300);                  }              }
Magic Number,LyricsEngine.LyricsSites,Lyrics007,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\Lyrics007.cs,FindLyricsWithTimer,The following statement contains a magic number: while (Complete == false)              {                  if (MEventStopSiteSearches.WaitOne(500' true))                  {                      Complete = true;                  }              }
Magic Number,LyricsEngine.LyricsSites,Lyrics007,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\Lyrics007.cs,CallbackMethod,The following statement contains a magic number: try              {                  reply = e.Result;                  reader = new StreamReader(reply' Encoding.UTF8);                    // Look for start                  var inLyrics = false;                  while (true)                  {                      if (reader.EndOfStream)                      {                          break;                      }                        // Read next line                      var line = reader.ReadLine() ?? "";                        // Find lyrics mark                      var match = Regex.Match(line' LyricsMarkPattern' RegexOptions.IgnoreCase);                        // Handle line                      if (!inLyrics) // before lyrics started                      {                          // mark start of lyrics                          if (match.Success)                          {                              if (match.Groups.Count == 3)                              {                                  if (match.Groups[1].Value.Equals(Artist' StringComparison.OrdinalIgnoreCase) &&                                      match.Groups[2].Value.Equals(Title' StringComparison.OrdinalIgnoreCase))                                  {                                      inLyrics = true;                                  }                                  else                                  {                                      LyricText = NotFound;                                      break;                                  }                              }                          }                      }                      else // after lyrics started                      {                          // end of lyrics                          if (match.Success)                          {                              break;                          }                            // Add line                          lyricTemp.Append(line);                      }                  }                    LyricText = lyricTemp.ToString();                    if (LyricText.Length > 0)                  {                      CleanLyrics();                  }                  else                  {                      LyricText = NotFound;                  }              }              catch              {                  LyricText = NotFound;              }              finally              {                  if (reader != null)                  {                      reader.Close();                  }                    if (reply != null)                  {                      reply.Close();                  }                  Complete = true;              }
Magic Number,LyricsEngine.LyricsSites,Lyrics007,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\Lyrics007.cs,CallbackMethod,The following statement contains a magic number: try              {                  reply = e.Result;                  reader = new StreamReader(reply' Encoding.UTF8);                    // Look for start                  var inLyrics = false;                  while (true)                  {                      if (reader.EndOfStream)                      {                          break;                      }                        // Read next line                      var line = reader.ReadLine() ?? "";                        // Find lyrics mark                      var match = Regex.Match(line' LyricsMarkPattern' RegexOptions.IgnoreCase);                        // Handle line                      if (!inLyrics) // before lyrics started                      {                          // mark start of lyrics                          if (match.Success)                          {                              if (match.Groups.Count == 3)                              {                                  if (match.Groups[1].Value.Equals(Artist' StringComparison.OrdinalIgnoreCase) &&                                      match.Groups[2].Value.Equals(Title' StringComparison.OrdinalIgnoreCase))                                  {                                      inLyrics = true;                                  }                                  else                                  {                                      LyricText = NotFound;                                      break;                                  }                              }                          }                      }                      else // after lyrics started                      {                          // end of lyrics                          if (match.Success)                          {                              break;                          }                            // Add line                          lyricTemp.Append(line);                      }                  }                    LyricText = lyricTemp.ToString();                    if (LyricText.Length > 0)                  {                      CleanLyrics();                  }                  else                  {                      LyricText = NotFound;                  }              }              catch              {                  LyricText = NotFound;              }              finally              {                  if (reader != null)                  {                      reader.Close();                  }                    if (reply != null)                  {                      reply.Close();                  }                  Complete = true;              }
Magic Number,LyricsEngine.LyricsSites,LyricsOnDemand,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\LyricsOnDemand.cs,FindLyricsWithTimer,The following statement contains a magic number: while (Complete == false)              {                  if (MEventStopSiteSearches.WaitOne(1' true))                  {                      Complete = true;                  }                  else                  {                      Thread.Sleep(100);                  }              }
Magic Number,LyricsEngine.LyricsSites,LyricsOnDemand,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\LyricsOnDemand.cs,CallbackMethod,The following statement contains a magic number: try              {                  reply = e.Result;                  reader = new StreamReader(reply' Encoding.UTF8);                    var line = "";                  var noOfLinesCount = 0;                    while (line.IndexOf(@"<font size=""2"" face=""Verdana"">"' StringComparison.Ordinal) == -1)                  {                      if (reader.EndOfStream || ++noOfLinesCount > 300)                      {                          thisMayBeTheCorrectLyric = false;                          break;                      }                      line = (reader.ReadLine() ?? "").Trim();                  }                    if (thisMayBeTheCorrectLyric)                  {                      var lyricTemp = new StringBuilder();                      line = (reader.ReadLine() ?? "").Trim();                        while (!line.StartsWith("<script") && !line.StartsWith("<!--"))                      {                          lyricTemp.Append(line);                          if (reader.EndOfStream || ++noOfLinesCount > 300)                          {                              break;                          }                          line = (reader.ReadLine() ?? "").Trim();                      }                        lyricTemp.Replace("<br>"' " \r\n");                      lyricTemp.Replace("</font></p>"' " \r\n");                      lyricTemp.Replace("<p><font size=\"2\" face=\"Verdana\">"' " \r\n");                      lyricTemp.Replace("</p>"' "");                      lyricTemp.Replace("<p>"' "");                      lyricTemp.Replace("<i>"' "");                      lyricTemp.Replace("</i>"' "");                      lyricTemp.Replace("*"' "");                      lyricTemp.Replace("?s"' "'s");                      lyricTemp.Replace("?t"' "'t");                      lyricTemp.Replace("?m"' "'m");                      lyricTemp.Replace("?l"' "'l");                      lyricTemp.Replace("?v"' "'v");                      lyricTemp.Replace("<p>"' " \r\n");                      lyricTemp.Replace("<BR>"' " \r\n");                      lyricTemp.Replace("<br />"' " \r\n");                      lyricTemp.Replace("&#039;"' "'");                      lyricTemp.Replace("&amp;"' "&");                        LyricText = lyricTemp.ToString().Trim();                        if (LyricText.Contains("<td") || LyricText.Contains("<IFRAME"))                      {                          LyricText = NotFound;                      }                  }                  else                  {                      LyricText = NotFound;                  }              }              catch              {                  LyricText = NotFound;              }              finally              {                  if (reader != null)                  {                      reader.Close();                  }                    if (reply != null)                  {                      reply.Close();                  }                  Complete = true;              }
Magic Number,LyricsEngine.LyricsSites,LyricsOnDemand,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\LyricsOnDemand.cs,CallbackMethod,The following statement contains a magic number: try              {                  reply = e.Result;                  reader = new StreamReader(reply' Encoding.UTF8);                    var line = "";                  var noOfLinesCount = 0;                    while (line.IndexOf(@"<font size=""2"" face=""Verdana"">"' StringComparison.Ordinal) == -1)                  {                      if (reader.EndOfStream || ++noOfLinesCount > 300)                      {                          thisMayBeTheCorrectLyric = false;                          break;                      }                      line = (reader.ReadLine() ?? "").Trim();                  }                    if (thisMayBeTheCorrectLyric)                  {                      var lyricTemp = new StringBuilder();                      line = (reader.ReadLine() ?? "").Trim();                        while (!line.StartsWith("<script") && !line.StartsWith("<!--"))                      {                          lyricTemp.Append(line);                          if (reader.EndOfStream || ++noOfLinesCount > 300)                          {                              break;                          }                          line = (reader.ReadLine() ?? "").Trim();                      }                        lyricTemp.Replace("<br>"' " \r\n");                      lyricTemp.Replace("</font></p>"' " \r\n");                      lyricTemp.Replace("<p><font size=\"2\" face=\"Verdana\">"' " \r\n");                      lyricTemp.Replace("</p>"' "");                      lyricTemp.Replace("<p>"' "");                      lyricTemp.Replace("<i>"' "");                      lyricTemp.Replace("</i>"' "");                      lyricTemp.Replace("*"' "");                      lyricTemp.Replace("?s"' "'s");                      lyricTemp.Replace("?t"' "'t");                      lyricTemp.Replace("?m"' "'m");                      lyricTemp.Replace("?l"' "'l");                      lyricTemp.Replace("?v"' "'v");                      lyricTemp.Replace("<p>"' " \r\n");                      lyricTemp.Replace("<BR>"' " \r\n");                      lyricTemp.Replace("<br />"' " \r\n");                      lyricTemp.Replace("&#039;"' "'");                      lyricTemp.Replace("&amp;"' "&");                        LyricText = lyricTemp.ToString().Trim();                        if (LyricText.Contains("<td") || LyricText.Contains("<IFRAME"))                      {                          LyricText = NotFound;                      }                  }                  else                  {                      LyricText = NotFound;                  }              }              catch              {                  LyricText = NotFound;              }              finally              {                  if (reader != null)                  {                      reader.Close();                  }                    if (reply != null)                  {                      reply.Close();                  }                  Complete = true;              }
Magic Number,LyricsEngine.LyricsSites,Shironet,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\Shironet.cs,FindLyricsWithTimer,The following statement contains a magic number: while (_firstStepComplete == false)              {                  if (MEventStopSiteSearches.WaitOne(1' true))                  {                      _firstStepComplete = true;                  }                  else                  {                      Thread.Sleep(100);                  }              }
Magic Number,LyricsEngine.LyricsSites,Shironet,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\Shironet.cs,FindLyricsWithTimer,The following statement contains a magic number: while (Complete == false)              {                  if (MEventStopSiteSearches.WaitOne(1' true))                  {                      Complete = true;                  }                  else                  {                      Thread.Sleep(100);                  }              }
Magic Number,LyricsEngine.LyricsSites,Shironet,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\Shironet.cs,FirstCallbackMethod,The following statement contains a magic number: try              {                  reply = e.Result;                  reader = new StreamReader(reply' Encoding.UTF8);                    while (!thisMayBeTheCorrectPage)                  {                      // Read line                      if (reader.EndOfStream)                      {                          break;                      }                      var line = reader.ReadLine() ?? "";                        // Try to find match in line                      var findLyricsPageMatch = Regex.Match(line' FindLyricsPagePattern' RegexOptions.IgnoreCase);                        if (findLyricsPageMatch.Groups.Count == 3)                      {                          _prfid = findLyricsPageMatch.Groups[1].Value;                          _wrkid = findLyricsPageMatch.Groups[2].Value;                            if (Convert.ToUInt32(_prfid) > 0 && Convert.ToUInt32(_wrkid) > 0)                          {                              // Found page                              thisMayBeTheCorrectPage = true;                          }                      }                  }                    // Not found                  if (!thisMayBeTheCorrectPage)                  {                      LyricText = NotFound;                  }              }              catch              {                  LyricText = NotFound;              }              finally              {                  if (reader != null)                  {                      reader.Close();                  }                    if (reply != null)                  {                      reply.Close();                  }                  _firstStepComplete = true;              }
Magic Number,LyricsEngine.LyricsSites,Shironet,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\Shironet.cs,FirstCallbackMethod,The following statement contains a magic number: try              {                  reply = e.Result;                  reader = new StreamReader(reply' Encoding.UTF8);                    while (!thisMayBeTheCorrectPage)                  {                      // Read line                      if (reader.EndOfStream)                      {                          break;                      }                      var line = reader.ReadLine() ?? "";                        // Try to find match in line                      var findLyricsPageMatch = Regex.Match(line' FindLyricsPagePattern' RegexOptions.IgnoreCase);                        if (findLyricsPageMatch.Groups.Count == 3)                      {                          _prfid = findLyricsPageMatch.Groups[1].Value;                          _wrkid = findLyricsPageMatch.Groups[2].Value;                            if (Convert.ToUInt32(_prfid) > 0 && Convert.ToUInt32(_wrkid) > 0)                          {                              // Found page                              thisMayBeTheCorrectPage = true;                          }                      }                  }                    // Not found                  if (!thisMayBeTheCorrectPage)                  {                      LyricText = NotFound;                  }              }              catch              {                  LyricText = NotFound;              }              finally              {                  if (reader != null)                  {                      reader.Close();                  }                    if (reply != null)                  {                      reply.Close();                  }                  _firstStepComplete = true;              }
Magic Number,LyricsEngine.LyricsSites,Shironet,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\Shironet.cs,SecondCallbackMethod,The following statement contains a magic number: try              {                  reply = e.Result;                  reader = new StreamReader(reply' Encoding.UTF8);                    // Validation                  var titleAndArtistInPage = string.Empty;                  var inTitle = false;                  var titleInPage = string.Empty;                  var artistInPage = string.Empty;                  var validateArtistAndTitle = false;                  var validateArtist = false;                  var validateTitle = false;                    var foundStart = false;                    while (!Complete)                  {                      // Read line                      if (reader.EndOfStream)                      {                          break;                      }                      var line = reader.ReadLine() ?? string.Empty;                        // Find artist + title in <title> line and validate correct artist/title                      if (titleAndArtistInPage == string.Empty)                      {                          var findTitleAndArtistMatch = Regex.Match(line' TitleAndArtistSearchPattern' RegexOptions.IgnoreCase);                          if (findTitleAndArtistMatch.Groups.Count == 2)                          {                              titleAndArtistInPage = findTitleAndArtistMatch.Groups[1].Value;                                // validation ArtistAndTitle                              if (ValidateArtistAndTitle(titleAndArtistInPage))                              {                                  validateArtistAndTitle = true;                              }                          }                      }                        //Find title in <span class="artist_song_name_txt">(?.*)</span> line                      if (titleInPage == String.Empty)                      {                          var findTitleStartMatch = Regex.Match(line' TitleSearchStartPattern' RegexOptions.IgnoreCase);                          if (findTitleStartMatch.Success)                          {                              inTitle = true;                          }                      }                      if (inTitle) // title found in page                      {                          titleInPage += line;                            // Search for ending of title                           var findTitleEndMatch = Regex.Match(line' TitleSearchEndPattern' RegexOptions.IgnoreCase);                          if (findTitleEndMatch.Success)                          {                              inTitle = false;                          }                      }                      // Finish and validate                      if (titleInPage != string.Empty && !inTitle)                      {                          // Search for ending of artist                           var findTitleMatch = Regex.Match(titleInPage' TitleSearchPattern' RegexOptions.IgnoreCase | RegexOptions.Singleline);                          if (findTitleMatch.Groups.Count == 2)                          {                              titleInPage = findTitleMatch.Groups[1].Value;                                // validation Title                              if (IgnoreSpecialChars(Title).Equals(IgnoreSpecialChars(titleInPage).Trim()))                              {                                  validateTitle = true;                              }                          }                      }                        // Find artist in <a class="artist_singer_title" href="/artist?prfid=975&lang=1">()</a>                      if (artistInPage == string.Empty)                      {                          var findArtistMatch = Regex.Match(line' ArtistSearchPattern' RegexOptions.IgnoreCase);                          if (findArtistMatch.Groups.Count == 2)                          {                              artistInPage = findArtistMatch.Groups[1].Value;                                // validation Artist                              if (IgnoreSpecialChars(Artist).Equals(IgnoreSpecialChars(artistInPage).Trim()))                              {                                  validateArtist = true;                              }                          }                      }                        if (!foundStart)                      {                          // Try to find lyrics start in line                          var findLyricsPageMatch = Regex.Match(line' LyricsStartSearchPattern' RegexOptions.IgnoreCase);                            if (findLyricsPageMatch.Groups.Count == 2)                          {                              foundStart = true;                                // Here's where we use the data from the validation - just when we hit the first lyrics row                              if (!((validateArtist && validateTitle) || validateArtistAndTitle))                              {                                  throw new ArgumentException(CannotFindExactMatch);                              }                                // Initialize with first line                              lyricTemp.Append(findLyricsPageMatch.Groups[1].Value).Append(Environment.NewLine);                          }                      }                      else // already found start                      {                          // Try to find lyrics end in line                          var findLyricsPageMatch = Regex.Match(line' LyricsEndSearchPattern' RegexOptions.IgnoreCase);                          if (findLyricsPageMatch.Groups.Count == 2)                          {                              // Add last line                              lyricTemp.Append(findLyricsPageMatch.Groups[1].Value).Append(Environment.NewLine);                              thisMayBeTheCorrectLyric = true;                              break;                          }                            // Add line to lyrics                          lyricTemp.Append(line).Append(Environment.NewLine);                      }                  }                    if (thisMayBeTheCorrectLyric)                  {                      // Clean lyrics                      LyricText = CleanLyrics(lyricTemp);                        if (LyricText.Length == 0 || (LyricText.Contains("<") || LyricText.Contains(">") || LyricText.Contains("a href")))                      {                          LyricText = NotFound;                      }                  }              }              catch              {                  LyricText = NotFound;              }              finally              {                  if (reader != null)                  {                      reader.Close();                  }                    if (reply != null)                  {                      reply.Close();                  }                  Complete = true;              }
Magic Number,LyricsEngine.LyricsSites,Shironet,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\Shironet.cs,SecondCallbackMethod,The following statement contains a magic number: try              {                  reply = e.Result;                  reader = new StreamReader(reply' Encoding.UTF8);                    // Validation                  var titleAndArtistInPage = string.Empty;                  var inTitle = false;                  var titleInPage = string.Empty;                  var artistInPage = string.Empty;                  var validateArtistAndTitle = false;                  var validateArtist = false;                  var validateTitle = false;                    var foundStart = false;                    while (!Complete)                  {                      // Read line                      if (reader.EndOfStream)                      {                          break;                      }                      var line = reader.ReadLine() ?? string.Empty;                        // Find artist + title in <title> line and validate correct artist/title                      if (titleAndArtistInPage == string.Empty)                      {                          var findTitleAndArtistMatch = Regex.Match(line' TitleAndArtistSearchPattern' RegexOptions.IgnoreCase);                          if (findTitleAndArtistMatch.Groups.Count == 2)                          {                              titleAndArtistInPage = findTitleAndArtistMatch.Groups[1].Value;                                // validation ArtistAndTitle                              if (ValidateArtistAndTitle(titleAndArtistInPage))                              {                                  validateArtistAndTitle = true;                              }                          }                      }                        //Find title in <span class="artist_song_name_txt">(?.*)</span> line                      if (titleInPage == String.Empty)                      {                          var findTitleStartMatch = Regex.Match(line' TitleSearchStartPattern' RegexOptions.IgnoreCase);                          if (findTitleStartMatch.Success)                          {                              inTitle = true;                          }                      }                      if (inTitle) // title found in page                      {                          titleInPage += line;                            // Search for ending of title                           var findTitleEndMatch = Regex.Match(line' TitleSearchEndPattern' RegexOptions.IgnoreCase);                          if (findTitleEndMatch.Success)                          {                              inTitle = false;                          }                      }                      // Finish and validate                      if (titleInPage != string.Empty && !inTitle)                      {                          // Search for ending of artist                           var findTitleMatch = Regex.Match(titleInPage' TitleSearchPattern' RegexOptions.IgnoreCase | RegexOptions.Singleline);                          if (findTitleMatch.Groups.Count == 2)                          {                              titleInPage = findTitleMatch.Groups[1].Value;                                // validation Title                              if (IgnoreSpecialChars(Title).Equals(IgnoreSpecialChars(titleInPage).Trim()))                              {                                  validateTitle = true;                              }                          }                      }                        // Find artist in <a class="artist_singer_title" href="/artist?prfid=975&lang=1">()</a>                      if (artistInPage == string.Empty)                      {                          var findArtistMatch = Regex.Match(line' ArtistSearchPattern' RegexOptions.IgnoreCase);                          if (findArtistMatch.Groups.Count == 2)                          {                              artistInPage = findArtistMatch.Groups[1].Value;                                // validation Artist                              if (IgnoreSpecialChars(Artist).Equals(IgnoreSpecialChars(artistInPage).Trim()))                              {                                  validateArtist = true;                              }                          }                      }                        if (!foundStart)                      {                          // Try to find lyrics start in line                          var findLyricsPageMatch = Regex.Match(line' LyricsStartSearchPattern' RegexOptions.IgnoreCase);                            if (findLyricsPageMatch.Groups.Count == 2)                          {                              foundStart = true;                                // Here's where we use the data from the validation - just when we hit the first lyrics row                              if (!((validateArtist && validateTitle) || validateArtistAndTitle))                              {                                  throw new ArgumentException(CannotFindExactMatch);                              }                                // Initialize with first line                              lyricTemp.Append(findLyricsPageMatch.Groups[1].Value).Append(Environment.NewLine);                          }                      }                      else // already found start                      {                          // Try to find lyrics end in line                          var findLyricsPageMatch = Regex.Match(line' LyricsEndSearchPattern' RegexOptions.IgnoreCase);                          if (findLyricsPageMatch.Groups.Count == 2)                          {                              // Add last line                              lyricTemp.Append(findLyricsPageMatch.Groups[1].Value).Append(Environment.NewLine);                              thisMayBeTheCorrectLyric = true;                              break;                          }                            // Add line to lyrics                          lyricTemp.Append(line).Append(Environment.NewLine);                      }                  }                    if (thisMayBeTheCorrectLyric)                  {                      // Clean lyrics                      LyricText = CleanLyrics(lyricTemp);                        if (LyricText.Length == 0 || (LyricText.Contains("<") || LyricText.Contains(">") || LyricText.Contains("a href")))                      {                          LyricText = NotFound;                      }                  }              }              catch              {                  LyricText = NotFound;              }              finally              {                  if (reader != null)                  {                      reader.Close();                  }                    if (reply != null)                  {                      reply.Close();                  }                  Complete = true;              }
Magic Number,LyricsEngine.LyricsSites,Shironet,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\Shironet.cs,SecondCallbackMethod,The following statement contains a magic number: try              {                  reply = e.Result;                  reader = new StreamReader(reply' Encoding.UTF8);                    // Validation                  var titleAndArtistInPage = string.Empty;                  var inTitle = false;                  var titleInPage = string.Empty;                  var artistInPage = string.Empty;                  var validateArtistAndTitle = false;                  var validateArtist = false;                  var validateTitle = false;                    var foundStart = false;                    while (!Complete)                  {                      // Read line                      if (reader.EndOfStream)                      {                          break;                      }                      var line = reader.ReadLine() ?? string.Empty;                        // Find artist + title in <title> line and validate correct artist/title                      if (titleAndArtistInPage == string.Empty)                      {                          var findTitleAndArtistMatch = Regex.Match(line' TitleAndArtistSearchPattern' RegexOptions.IgnoreCase);                          if (findTitleAndArtistMatch.Groups.Count == 2)                          {                              titleAndArtistInPage = findTitleAndArtistMatch.Groups[1].Value;                                // validation ArtistAndTitle                              if (ValidateArtistAndTitle(titleAndArtistInPage))                              {                                  validateArtistAndTitle = true;                              }                          }                      }                        //Find title in <span class="artist_song_name_txt">(?.*)</span> line                      if (titleInPage == String.Empty)                      {                          var findTitleStartMatch = Regex.Match(line' TitleSearchStartPattern' RegexOptions.IgnoreCase);                          if (findTitleStartMatch.Success)                          {                              inTitle = true;                          }                      }                      if (inTitle) // title found in page                      {                          titleInPage += line;                            // Search for ending of title                           var findTitleEndMatch = Regex.Match(line' TitleSearchEndPattern' RegexOptions.IgnoreCase);                          if (findTitleEndMatch.Success)                          {                              inTitle = false;                          }                      }                      // Finish and validate                      if (titleInPage != string.Empty && !inTitle)                      {                          // Search for ending of artist                           var findTitleMatch = Regex.Match(titleInPage' TitleSearchPattern' RegexOptions.IgnoreCase | RegexOptions.Singleline);                          if (findTitleMatch.Groups.Count == 2)                          {                              titleInPage = findTitleMatch.Groups[1].Value;                                // validation Title                              if (IgnoreSpecialChars(Title).Equals(IgnoreSpecialChars(titleInPage).Trim()))                              {                                  validateTitle = true;                              }                          }                      }                        // Find artist in <a class="artist_singer_title" href="/artist?prfid=975&lang=1">()</a>                      if (artistInPage == string.Empty)                      {                          var findArtistMatch = Regex.Match(line' ArtistSearchPattern' RegexOptions.IgnoreCase);                          if (findArtistMatch.Groups.Count == 2)                          {                              artistInPage = findArtistMatch.Groups[1].Value;                                // validation Artist                              if (IgnoreSpecialChars(Artist).Equals(IgnoreSpecialChars(artistInPage).Trim()))                              {                                  validateArtist = true;                              }                          }                      }                        if (!foundStart)                      {                          // Try to find lyrics start in line                          var findLyricsPageMatch = Regex.Match(line' LyricsStartSearchPattern' RegexOptions.IgnoreCase);                            if (findLyricsPageMatch.Groups.Count == 2)                          {                              foundStart = true;                                // Here's where we use the data from the validation - just when we hit the first lyrics row                              if (!((validateArtist && validateTitle) || validateArtistAndTitle))                              {                                  throw new ArgumentException(CannotFindExactMatch);                              }                                // Initialize with first line                              lyricTemp.Append(findLyricsPageMatch.Groups[1].Value).Append(Environment.NewLine);                          }                      }                      else // already found start                      {                          // Try to find lyrics end in line                          var findLyricsPageMatch = Regex.Match(line' LyricsEndSearchPattern' RegexOptions.IgnoreCase);                          if (findLyricsPageMatch.Groups.Count == 2)                          {                              // Add last line                              lyricTemp.Append(findLyricsPageMatch.Groups[1].Value).Append(Environment.NewLine);                              thisMayBeTheCorrectLyric = true;                              break;                          }                            // Add line to lyrics                          lyricTemp.Append(line).Append(Environment.NewLine);                      }                  }                    if (thisMayBeTheCorrectLyric)                  {                      // Clean lyrics                      LyricText = CleanLyrics(lyricTemp);                        if (LyricText.Length == 0 || (LyricText.Contains("<") || LyricText.Contains(">") || LyricText.Contains("a href")))                      {                          LyricText = NotFound;                      }                  }              }              catch              {                  LyricText = NotFound;              }              finally              {                  if (reader != null)                  {                      reader.Close();                  }                    if (reply != null)                  {                      reply.Close();                  }                  Complete = true;              }
Magic Number,LyricsEngine.LyricsSites,Shironet,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\Shironet.cs,SecondCallbackMethod,The following statement contains a magic number: try              {                  reply = e.Result;                  reader = new StreamReader(reply' Encoding.UTF8);                    // Validation                  var titleAndArtistInPage = string.Empty;                  var inTitle = false;                  var titleInPage = string.Empty;                  var artistInPage = string.Empty;                  var validateArtistAndTitle = false;                  var validateArtist = false;                  var validateTitle = false;                    var foundStart = false;                    while (!Complete)                  {                      // Read line                      if (reader.EndOfStream)                      {                          break;                      }                      var line = reader.ReadLine() ?? string.Empty;                        // Find artist + title in <title> line and validate correct artist/title                      if (titleAndArtistInPage == string.Empty)                      {                          var findTitleAndArtistMatch = Regex.Match(line' TitleAndArtistSearchPattern' RegexOptions.IgnoreCase);                          if (findTitleAndArtistMatch.Groups.Count == 2)                          {                              titleAndArtistInPage = findTitleAndArtistMatch.Groups[1].Value;                                // validation ArtistAndTitle                              if (ValidateArtistAndTitle(titleAndArtistInPage))                              {                                  validateArtistAndTitle = true;                              }                          }                      }                        //Find title in <span class="artist_song_name_txt">(?.*)</span> line                      if (titleInPage == String.Empty)                      {                          var findTitleStartMatch = Regex.Match(line' TitleSearchStartPattern' RegexOptions.IgnoreCase);                          if (findTitleStartMatch.Success)                          {                              inTitle = true;                          }                      }                      if (inTitle) // title found in page                      {                          titleInPage += line;                            // Search for ending of title                           var findTitleEndMatch = Regex.Match(line' TitleSearchEndPattern' RegexOptions.IgnoreCase);                          if (findTitleEndMatch.Success)                          {                              inTitle = false;                          }                      }                      // Finish and validate                      if (titleInPage != string.Empty && !inTitle)                      {                          // Search for ending of artist                           var findTitleMatch = Regex.Match(titleInPage' TitleSearchPattern' RegexOptions.IgnoreCase | RegexOptions.Singleline);                          if (findTitleMatch.Groups.Count == 2)                          {                              titleInPage = findTitleMatch.Groups[1].Value;                                // validation Title                              if (IgnoreSpecialChars(Title).Equals(IgnoreSpecialChars(titleInPage).Trim()))                              {                                  validateTitle = true;                              }                          }                      }                        // Find artist in <a class="artist_singer_title" href="/artist?prfid=975&lang=1">()</a>                      if (artistInPage == string.Empty)                      {                          var findArtistMatch = Regex.Match(line' ArtistSearchPattern' RegexOptions.IgnoreCase);                          if (findArtistMatch.Groups.Count == 2)                          {                              artistInPage = findArtistMatch.Groups[1].Value;                                // validation Artist                              if (IgnoreSpecialChars(Artist).Equals(IgnoreSpecialChars(artistInPage).Trim()))                              {                                  validateArtist = true;                              }                          }                      }                        if (!foundStart)                      {                          // Try to find lyrics start in line                          var findLyricsPageMatch = Regex.Match(line' LyricsStartSearchPattern' RegexOptions.IgnoreCase);                            if (findLyricsPageMatch.Groups.Count == 2)                          {                              foundStart = true;                                // Here's where we use the data from the validation - just when we hit the first lyrics row                              if (!((validateArtist && validateTitle) || validateArtistAndTitle))                              {                                  throw new ArgumentException(CannotFindExactMatch);                              }                                // Initialize with first line                              lyricTemp.Append(findLyricsPageMatch.Groups[1].Value).Append(Environment.NewLine);                          }                      }                      else // already found start                      {                          // Try to find lyrics end in line                          var findLyricsPageMatch = Regex.Match(line' LyricsEndSearchPattern' RegexOptions.IgnoreCase);                          if (findLyricsPageMatch.Groups.Count == 2)                          {                              // Add last line                              lyricTemp.Append(findLyricsPageMatch.Groups[1].Value).Append(Environment.NewLine);                              thisMayBeTheCorrectLyric = true;                              break;                          }                            // Add line to lyrics                          lyricTemp.Append(line).Append(Environment.NewLine);                      }                  }                    if (thisMayBeTheCorrectLyric)                  {                      // Clean lyrics                      LyricText = CleanLyrics(lyricTemp);                        if (LyricText.Length == 0 || (LyricText.Contains("<") || LyricText.Contains(">") || LyricText.Contains("a href")))                      {                          LyricText = NotFound;                      }                  }              }              catch              {                  LyricText = NotFound;              }              finally              {                  if (reader != null)                  {                      reader.Close();                  }                    if (reply != null)                  {                      reply.Close();                  }                  Complete = true;              }
Magic Number,LyricsEngine.LyricsSites,Shironet,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\Shironet.cs,SecondCallbackMethod,The following statement contains a magic number: try              {                  reply = e.Result;                  reader = new StreamReader(reply' Encoding.UTF8);                    // Validation                  var titleAndArtistInPage = string.Empty;                  var inTitle = false;                  var titleInPage = string.Empty;                  var artistInPage = string.Empty;                  var validateArtistAndTitle = false;                  var validateArtist = false;                  var validateTitle = false;                    var foundStart = false;                    while (!Complete)                  {                      // Read line                      if (reader.EndOfStream)                      {                          break;                      }                      var line = reader.ReadLine() ?? string.Empty;                        // Find artist + title in <title> line and validate correct artist/title                      if (titleAndArtistInPage == string.Empty)                      {                          var findTitleAndArtistMatch = Regex.Match(line' TitleAndArtistSearchPattern' RegexOptions.IgnoreCase);                          if (findTitleAndArtistMatch.Groups.Count == 2)                          {                              titleAndArtistInPage = findTitleAndArtistMatch.Groups[1].Value;                                // validation ArtistAndTitle                              if (ValidateArtistAndTitle(titleAndArtistInPage))                              {                                  validateArtistAndTitle = true;                              }                          }                      }                        //Find title in <span class="artist_song_name_txt">(?.*)</span> line                      if (titleInPage == String.Empty)                      {                          var findTitleStartMatch = Regex.Match(line' TitleSearchStartPattern' RegexOptions.IgnoreCase);                          if (findTitleStartMatch.Success)                          {                              inTitle = true;                          }                      }                      if (inTitle) // title found in page                      {                          titleInPage += line;                            // Search for ending of title                           var findTitleEndMatch = Regex.Match(line' TitleSearchEndPattern' RegexOptions.IgnoreCase);                          if (findTitleEndMatch.Success)                          {                              inTitle = false;                          }                      }                      // Finish and validate                      if (titleInPage != string.Empty && !inTitle)                      {                          // Search for ending of artist                           var findTitleMatch = Regex.Match(titleInPage' TitleSearchPattern' RegexOptions.IgnoreCase | RegexOptions.Singleline);                          if (findTitleMatch.Groups.Count == 2)                          {                              titleInPage = findTitleMatch.Groups[1].Value;                                // validation Title                              if (IgnoreSpecialChars(Title).Equals(IgnoreSpecialChars(titleInPage).Trim()))                              {                                  validateTitle = true;                              }                          }                      }                        // Find artist in <a class="artist_singer_title" href="/artist?prfid=975&lang=1">()</a>                      if (artistInPage == string.Empty)                      {                          var findArtistMatch = Regex.Match(line' ArtistSearchPattern' RegexOptions.IgnoreCase);                          if (findArtistMatch.Groups.Count == 2)                          {                              artistInPage = findArtistMatch.Groups[1].Value;                                // validation Artist                              if (IgnoreSpecialChars(Artist).Equals(IgnoreSpecialChars(artistInPage).Trim()))                              {                                  validateArtist = true;                              }                          }                      }                        if (!foundStart)                      {                          // Try to find lyrics start in line                          var findLyricsPageMatch = Regex.Match(line' LyricsStartSearchPattern' RegexOptions.IgnoreCase);                            if (findLyricsPageMatch.Groups.Count == 2)                          {                              foundStart = true;                                // Here's where we use the data from the validation - just when we hit the first lyrics row                              if (!((validateArtist && validateTitle) || validateArtistAndTitle))                              {                                  throw new ArgumentException(CannotFindExactMatch);                              }                                // Initialize with first line                              lyricTemp.Append(findLyricsPageMatch.Groups[1].Value).Append(Environment.NewLine);                          }                      }                      else // already found start                      {                          // Try to find lyrics end in line                          var findLyricsPageMatch = Regex.Match(line' LyricsEndSearchPattern' RegexOptions.IgnoreCase);                          if (findLyricsPageMatch.Groups.Count == 2)                          {                              // Add last line                              lyricTemp.Append(findLyricsPageMatch.Groups[1].Value).Append(Environment.NewLine);                              thisMayBeTheCorrectLyric = true;                              break;                          }                            // Add line to lyrics                          lyricTemp.Append(line).Append(Environment.NewLine);                      }                  }                    if (thisMayBeTheCorrectLyric)                  {                      // Clean lyrics                      LyricText = CleanLyrics(lyricTemp);                        if (LyricText.Length == 0 || (LyricText.Contains("<") || LyricText.Contains(">") || LyricText.Contains("a href")))                      {                          LyricText = NotFound;                      }                  }              }              catch              {                  LyricText = NotFound;              }              finally              {                  if (reader != null)                  {                      reader.Close();                  }                    if (reply != null)                  {                      reply.Close();                  }                  Complete = true;              }
Magic Number,LyricsEngine.LyricsSites,Shironet,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\Shironet.cs,ValidateArtistAndTitle,The following statement contains a magic number: if (strings.Length == 2)              {                  // check artist                  if (!IgnoreSpecialChars(Artist).Equals(IgnoreSpecialChars(strings[1]).Trim()))                  {                      return false;                  }                  // check title                  if (!IgnoreSpecialChars(Title).Equals(IgnoreSpecialChars(strings[0]).Trim()))                  {                      return false;                  }                  return true;              }
Magic Number,LyricsEngine.LyricsSites,LyricWiki,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\LyricsSites\LyricWiki.cs,FindLyricsWithTimer,The following statement contains a magic number: while (Complete == false)              {                  if (MEventStopSiteSearches.WaitOne(1' true))                  {                      Complete = true;                  }                  else                  {                      Thread.Sleep(300);                  }              }
Magic Number,LyricsEngine.lrcfinder,LrcFinder,C:\repos\MediaPortal_MPTagThat\Libraries\LyricsEngine\Web References\lrcfinder\Reference.cs,IsLocalFileSystemWebService,The following statement contains a magic number: if (((wsUri.Port >= 1024)                           && (string.Compare(wsUri.Host' "localHost"' System.StringComparison.OrdinalIgnoreCase) == 0))) {                  return true;              }
