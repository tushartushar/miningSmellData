Implementation smell,Namespace,Class,File,Method,Description
Long Method,EditorExtensions,SettingsWindow,C:\repos\MachXXV_EditorExtensions\EditorExtensions\SettingsWindow.cs,WindowContent,The method has 166 lines of code.
Complex Method,EditorExtensions,EditorExtensions,C:\repos\MachXXV_EditorExtensions\EditorExtensions\EditorExtensions.cs,Update,Cyclomatic complexity of the method is 15
Complex Method,EditorExtensions,SettingsWindow,C:\repos\MachXXV_EditorExtensions\EditorExtensions\SettingsWindow.cs,WindowContent,Cyclomatic complexity of the method is 25
Complex Method,EditorExtensions,PartInfoWindow,C:\repos\MachXXV_EditorExtensions\EditorExtensions\PartInfoWindow.cs,WindowContent,Cyclomatic complexity of the method is 12
Long Statement,EditorExtensions,EditorExtensions,C:\repos\MachXXV_EditorExtensions\EditorExtensions\EditorExtensions.cs,InitConfig,The length of the statement  "						bool versionMismatch = (cfg.FileVersion == null || fileVersion.Major < pluginVersion.Major || (fileVersion.Major == pluginVersion.Major && fileVersion.Minor < pluginVersion.Minor)); " is 181.
Long Statement,EditorExtensions,EditorExtensions,C:\repos\MachXXV_EditorExtensions\EditorExtensions\EditorExtensions.cs,VerticalAlign,The length of the statement  "				if (sp != null && sp.srfAttachNode != null && sp.srfAttachNode.attachedPart != null && !GizmoActive() && !IsPartNodeAttached(sp)) { " is 131.
Long Statement,EditorExtensions,EditorExtensions,C:\repos\MachXXV_EditorExtensions\EditorExtensions\EditorExtensions.cs,HorizontalAlign,The length of the statement  "				if (sp != null && sp.srfAttachNode != null && sp.srfAttachNode.attachedPart != null && !GizmoActive() && !IsPartNodeAttached(sp)) { " is 131.
Long Statement,EditorExtensions,EditorExtensions,C:\repos\MachXXV_EditorExtensions\EditorExtensions\EditorExtensions.cs,GizmoActive,The length of the statement  "				if (HighLogic.FindObjectsOfType<EditorGizmos.GizmoOffset> ().Length > 0 || HighLogic.FindObjectsOfType<EditorGizmos.GizmoRotate> ().Length > 0) { " is 145.
Long Statement,EditorExtensions,PartInfoWindow,C:\repos\MachXXV_EditorExtensions\EditorExtensions\PartInfoWindow.cs,WindowContent,The length of the statement  "//				activeGizmos = HighLogic.FindObjectsOfType<EditorGizmos.GizmoOffset>().Length + HighLogic.FindObjectsOfType<EditorGizmos.GizmoRotate>().Length; " is 149.
Long Statement,EditorExtensions,CompoundPartUtil,C:\repos\MachXXV_EditorExtensions\EditorExtensions\CompoundPartUtil.cs,AlignCompoundPartSnapped,The length of the statement  "			Log.Debug(string.Format("new collider startPosition: {0} destPosition: {1}"' startPosition.ToString()' destPosition.ToString())); " is 129.
Long Statement,EditorExtensions,CompoundPartUtil,C:\repos\MachXXV_EditorExtensions\EditorExtensions\CompoundPartUtil.cs,AlignCompoundPartLevel,The length of the statement  "			Log.Debug(string.Format("new level startPosition: {0} destPosition: {1}"' startPosition.ToString()' destPosition.ToString())); " is 126.
Long Statement,EditorExtensions,CompoundPartUtil,C:\repos\MachXXV_EditorExtensions\EditorExtensions\CompoundPartUtil.cs,RepositionPart,The length of the statement  "			part.transform.LookAt(destPosition); //this rotates the strut base towards the target' need to keep it flush with the parent " is 124.
Long Statement,EditorExtensions,CompoundPartUtil,C:\repos\MachXXV_EditorExtensions\EditorExtensions\CompoundPartUtil.cs,GetCompoundPartPositionHeight,The length of the statement  "			Log.Debug(string.Format("localHeight: {0} parentHeight: {1}"' localHeight.ToString("F3")' parentHeight.ToString("F3"))); " is 120.
Long Statement,EditorExtensions,CompoundPartUtil,C:\repos\MachXXV_EditorExtensions\EditorExtensions\CompoundPartUtil.cs,GetPartCollisionPointByDirection,The length of the statement  "			Log.Debug (string.Format("GetPartCollisionPointByDirection: collider raycast from {0} in direction {1}"' origin.ToString (VectorFormat)' targetDirection.ToString (VectorFormat))); " is 179.
Long Statement,EditorExtensions,CompoundPartUtil,C:\repos\MachXXV_EditorExtensions\EditorExtensions\CompoundPartUtil.cs,GetPartCollisionPointByDirection,The length of the statement  "			//collider property is deprecated' removed in 5.0 - use GetComponent<Collider>' but need to identify collider type' eg BoxCollider " is 130.
Complex Conditional,EditorExtensions,EditorExtensions,C:\repos\MachXXV_EditorExtensions\EditorExtensions\EditorExtensions.cs,VerticalAlign,The conditional expression  "sp != null && sp.srfAttachNode != null && sp.srfAttachNode.attachedPart != null && !GizmoActive() && !IsPartNodeAttached(sp)"  is complex.
Complex Conditional,EditorExtensions,EditorExtensions,C:\repos\MachXXV_EditorExtensions\EditorExtensions\EditorExtensions.cs,HorizontalAlign,The conditional expression  "sp != null && sp.srfAttachNode != null && sp.srfAttachNode.attachedPart != null && !GizmoActive() && !IsPartNodeAttached(sp)"  is complex.
Empty Catch Block,EditorExtensions,PartInfoWindow,C:\repos\MachXXV_EditorExtensions\EditorExtensions\PartInfoWindow.cs,PartInfoLabels,The method has an empty catch block.
Magic Number,EditorExtensions,EditorExtensions,C:\repos\MachXXV_EditorExtensions\EditorExtensions\EditorExtensions.cs,Update,The following statement contains a magic number: if (enableHotkeys) {    				//check for the configured modifier key  				bool modKeyDown = GameSettings.MODIFIER_KEY.GetKey();  				//check for configured editor fine key  				bool fineKeyDown = GameSettings.Editor_fineTweak.GetKey();    				Camera cam = editor.editorCamera;  				//Zoom selected part - rotate camera around part  				if (Input.GetKeyDown (cfg.KeyMap.ZoomSelected)) {  					Part p = Utility.GetPartUnderCursor ();  					if (p != null) {  						zoomSelected = true;  						cameraLookAt = p.transform.position;  						cam.transform.position = new Vector3 (cam.transform.position.x' p.transform.position.y' cam.transform.position.z);  						OSDMessage (string.Format ("Zoom Camera on {0}"' p.name));  					} else {  						cameraLookAt = new Vector3(0'15'0);  						OSDMessage ("Default Camera");  						ResetCamera ();  						zoomSelected = false;  					}  				}    				if (zoomSelected) {  					cam.transform.LookAt(cameraLookAt);  				}					    				// U - strut/fuel line alignment  				// U - snap heights on both parts  				// mod-U level/perpendicular to parent part  				if (Input.GetKeyDown (cfg.KeyMap.CompoundPartAlign)) {  					Part p = Utility.GetPartUnderCursor ();  					if (p != null && p.GetType () == typeof(CompoundPart)) {  						AlignCompoundPart ((CompoundPart)p' !modKeyDown);  					}  				}  			  				// V - Vertically align part under cursor with the part it is attached to  				if (Input.GetKeyDown (cfg.KeyMap.VerticalSnap)) {  					VerticalAlign ();  					return;  				}    				// H - Horizontally align part under cursor with the part it is attached to  				if (Input.GetKeyDown (cfg.KeyMap.HorizontalSnap)) {  					HorizontalAlign ();  					return;  				}         				//Space - when no part is selected' reset camera  				if (Input.GetKeyDown (cfg.KeyMap.ResetCamera) && !EditorLogic.SelectedPart) {  					ResetCamera ();  					return;  				}  	  				// T: Surface attachment toggle  				if (Input.GetKeyDown (cfg.KeyMap.AttachmentMode)) {  					SurfaceAttachToggle ();  					return;  				}  	  				// ALT+Z : Toggle part clipping (From cheat options)  				if (modKeyDown && Input.GetKeyDown (cfg.KeyMap.PartClipping)) {  					PartClippingToggle ();  					return;  				}    				//KSP v1.0.3: Change angle snap and symmetry mode actions to GetKeyUp() so that it fires after internal editor actions    				//using gamesettings keybinding Input.GetKeyDown (cfg.KeyMap.AngleSnap)  				// C' Shift+C : Increment/Decrement Angle snap  				if (GameSettings.Editor_toggleAngleSnap.GetKeyUp()) {  					AngleSnapCycle (modKeyDown' fineKeyDown);  					return;	  				}  	  				//using gamesettings keybinding Input.GetKeyDown (cfg.KeyMap.Symmetry)  				// X' Shift+X : Increment/decrement symmetry mode  				if (GameSettings.Editor_toggleSymMode.GetKeyUp()) {  					SymmetryModeCycle (modKeyDown' fineKeyDown);  					return;  				}    			}
Magic Number,EditorExtensions,EditorExtensions,C:\repos\MachXXV_EditorExtensions\EditorExtensions\EditorExtensions.cs,SymmetryModeCycle,The following statement contains a magic number: if (editor.symmetryMethod == SymmetryMethod.Radial) {  				if (modKeyDown || (_symmetryMode < 2 && fineKeyDown)) {  					//Alt+X or Symmetry is at 1(index 2) or lower  					_symmetryMode = 0;  				} else if (_symmetryMode > cfg.MaxSymmetry - 2 && !fineKeyDown) {  					//Stop adding at max symmetry  					_symmetryMode = cfg.MaxSymmetry - 1;  				} else {  					//inc/dec symmetry  					_symmetryMode = _symmetryMode + (fineKeyDown ? -1 : 1);  				}  				editor.symmetryMode = _symmetryMode;  				Log.Debug ("Setting symmetryMode to " + _symmetryMode.ToString ());  			} else {  				//editor.symmetryMethod == SymmetryMethod.Mirror  				//update var with stock action's result  				_symmetryMode = editor.symmetryMode;  			}
Magic Number,EditorExtensions,EditorExtensions,C:\repos\MachXXV_EditorExtensions\EditorExtensions\EditorExtensions.cs,SymmetryModeCycle,The following statement contains a magic number: if (editor.symmetryMethod == SymmetryMethod.Radial) {  				if (modKeyDown || (_symmetryMode < 2 && fineKeyDown)) {  					//Alt+X or Symmetry is at 1(index 2) or lower  					_symmetryMode = 0;  				} else if (_symmetryMode > cfg.MaxSymmetry - 2 && !fineKeyDown) {  					//Stop adding at max symmetry  					_symmetryMode = cfg.MaxSymmetry - 1;  				} else {  					//inc/dec symmetry  					_symmetryMode = _symmetryMode + (fineKeyDown ? -1 : 1);  				}  				editor.symmetryMode = _symmetryMode;  				Log.Debug ("Setting symmetryMode to " + _symmetryMode.ToString ());  			} else {  				//editor.symmetryMethod == SymmetryMethod.Mirror  				//update var with stock action's result  				_symmetryMode = editor.symmetryMode;  			}
Magic Number,EditorExtensions,EditorExtensions,C:\repos\MachXXV_EditorExtensions\EditorExtensions\EditorExtensions.cs,InitializeGUI,The following statement contains a magic number: osdLabelStyle = new GUIStyle () {  				stretchWidth = true'  				stretchHeight = true'  				alignment = TextAnchor.MiddleCenter'  				fontSize = 22'  				fontStyle = FontStyle.Bold'  				name = "OSDLabel"  			};
Magic Number,EditorExtensions,EditorExtensions,C:\repos\MachXXV_EditorExtensions\EditorExtensions\EditorExtensions.cs,InitializeGUI,The following statement contains a magic number: symmetryLabelStyle = new GUIStyle () {  				stretchWidth = true'  				stretchHeight = true'  				alignment = TextAnchor.MiddleCenter'  				fontSize = 18'  				fontStyle = FontStyle.Bold'  				name = "SymmetryLabel"  			};
Magic Number,EditorExtensions,EditorExtensions,C:\repos\MachXXV_EditorExtensions\EditorExtensions\EditorExtensions.cs,ShowMenu,The following statement contains a magic number: _menuRect = new Rect () {  				xMin = position.x - _menuWidth / 2'  				xMax = position.x + _menuWidth / 2'  				yMin = Screen.height - _toolbarHeight - _menuHeight'  				yMax = Screen.height - _toolbarHeight  			};
Magic Number,EditorExtensions,EditorExtensions,C:\repos\MachXXV_EditorExtensions\EditorExtensions\EditorExtensions.cs,ShowMenu,The following statement contains a magic number: _menuRect = new Rect () {  				xMin = position.x - _menuWidth / 2'  				xMax = position.x + _menuWidth / 2'  				yMin = Screen.height - _toolbarHeight - _menuHeight'  				yMax = Screen.height - _toolbarHeight  			};
Magic Number,EditorExtensions,ConfigManager,C:\repos\MachXXV_EditorExtensions\EditorExtensions\Config\ConfigManager.cs,CreateDefaultConfig,The following statement contains a magic number: try {  				ConfigData defaultConfig = new ConfigData () {  					AngleSnapValues = new List<float>{ 0.0f' 1.0f' 5.0f' 15.0f' 22.5f' 30.0f' 45.0f' 60.0f' 90.0f }'  					MaxSymmetry = 20'  					FileVersion = version'  					OnScreenMessageTime = 1.5f'  					ShowDebugInfo = true  				};    				KeyMaps defaultKeys = new KeyMaps () {  					AttachmentMode = KeyCode.T'  					PartClipping = KeyCode.Z'  					ResetCamera = KeyCode.Space'  					ZoomSelected = KeyCode.KeypadPeriod'  					VerticalSnap = KeyCode.V'  					HorizontalSnap = KeyCode.H'  					CompoundPartAlign = KeyCode.U  				};  				defaultConfig.KeyMap = defaultKeys;    				if (ConfigManager.SaveConfig (defaultConfig' configFilePath))  					Log.Debug ("Created default config");  				else  					Log.Error ("Failed to save default config");    				return defaultConfig;  			} catch (Exception ex) {  				Log.Error ("Error defaulting config: " + ex.Message);  				return null;  			}
Magic Number,EditorExtensions,PartInfoWindow,C:\repos\MachXXV_EditorExtensions\EditorExtensions\PartInfoWindow.cs,WindowContent,The following statement contains a magic number: if (sp != null) {    				GUILayout.BeginHorizontal ();  				GUILayout.Label ("Current Part:");  				GUILayout.Label (sp ? sp.name : "none");  				GUILayout.EndHorizontal ();    				GUILayout.Label ("Type: " + sp.GetType ().ToString ());    				if (_toolbarInt == 0) {    					PartInfoLabels (sp);    					if (sp.srfAttachNode != null) {  						GUILayout.Label ("srfAttachNode.position: " + sp.srfAttachNode.position.ToString (vectFormat));  						GUILayout.BeginVertical ("box");  						GUILayout.Label ("Attached part:");  						if (sp.srfAttachNode.attachedPart != null) {  							PartInfoLabels (sp.srfAttachNode.attachedPart);  						}  						GUILayout.EndVertical ();  					}  				}    				if (_toolbarInt == 1) {  					if (sp.GetType () == typeof(CompoundPart)) {  						CompoundPartInfo ((CompoundPart)sp);  					}  				}    				if (_toolbarInt == 2) {  					SrfAttaches (sp);  				}    				if (_toolbarInt == 3) {  					AttachNodeLabels (sp);  				}          			} else {  				GUILayout.Label ("No part selected");  			}
Magic Number,EditorExtensions,PartInfoWindow,C:\repos\MachXXV_EditorExtensions\EditorExtensions\PartInfoWindow.cs,WindowContent,The following statement contains a magic number: if (sp != null) {    				GUILayout.BeginHorizontal ();  				GUILayout.Label ("Current Part:");  				GUILayout.Label (sp ? sp.name : "none");  				GUILayout.EndHorizontal ();    				GUILayout.Label ("Type: " + sp.GetType ().ToString ());    				if (_toolbarInt == 0) {    					PartInfoLabels (sp);    					if (sp.srfAttachNode != null) {  						GUILayout.Label ("srfAttachNode.position: " + sp.srfAttachNode.position.ToString (vectFormat));  						GUILayout.BeginVertical ("box");  						GUILayout.Label ("Attached part:");  						if (sp.srfAttachNode.attachedPart != null) {  							PartInfoLabels (sp.srfAttachNode.attachedPart);  						}  						GUILayout.EndVertical ();  					}  				}    				if (_toolbarInt == 1) {  					if (sp.GetType () == typeof(CompoundPart)) {  						CompoundPartInfo ((CompoundPart)sp);  					}  				}    				if (_toolbarInt == 2) {  					SrfAttaches (sp);  				}    				if (_toolbarInt == 3) {  					AttachNodeLabels (sp);  				}          			} else {  				GUILayout.Label ("No part selected");  			}
Magic Number,EditorExtensions,PartInfoWindow,C:\repos\MachXXV_EditorExtensions\EditorExtensions\PartInfoWindow.cs,WindowContent,The following statement contains a magic number: if (_toolbarInt == 4) {  				CameraInfoLabels (EditorLogic.fetch.editorCamera);  			}
Magic Number,EditorExtensions,CompoundPartUtil,C:\repos\MachXXV_EditorExtensions\EditorExtensions\CompoundPartUtil.cs,RepositionPart,The following statement contains a magic number: part.transform.Rotate(0' 90' 0);
Magic Number,EditorExtensions,CompoundPartUtil,C:\repos\MachXXV_EditorExtensions\EditorExtensions\CompoundPartUtil.cs,GetCompoundPartPositionHeight,The following statement contains a magic number: if (parentHeight < parentSizeCutoff) {  				//for small parts' just center on them  				Log.Debug ("Parent is small' defaulting to center");  				localHeight = 0f;  			} else if (parentHeight >= 1.5f) {  				//only do quarter snapping for parts >= 3.0 total height  				if (Math.Abs(localHeight) < parentHeight * 0.125f) {  					//middle 25% of parent' snap to center (12.5% of extent)  					Log.Debug("Centering on parent");  					localHeight = 0f;  				} else if (Math.Abs(localHeight) < parentHeight * 0.7f) {  					//top/bottom quarter (70% of extent)  					Log.Debug("Centering quarter on parent");  					localHeight = parentHeight / 2 * upOrDown;  				} else {  					//top/bottom edge  					Log.Debug("Aligning to edge of parent");  					localHeight = (parentHeight - strutOffset) * upOrDown;  				}  			  			} else if (Math.Abs(localHeight) < parentHeight * 0.5f) {  				//middle 50% of parent' snap to center  				Log.Debug("Centering on parent");  				localHeight = 0f;  			} else {  				//top/bottom edge  				Log.Debug("Aligning to edge of parent");  				localHeight = (parentHeight - strutOffset) * upOrDown;  			}
Magic Number,EditorExtensions,LineDrawer,C:\repos\MachXXV_EditorExtensions\EditorExtensions\LineDrawer.cs,DrawLine,The following statement contains a magic number: line.SetVertexCount (2);
