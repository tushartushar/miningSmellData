Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ClientDependency.Core,HtmlAttributesStringParser,C:\repos\Shandem_ClientDependency\ClientDependency.Core\HtmlAttributesStringParser.cs,ParseIntoDictionary,Cyclomatic complexity of the method is 10
Complex Method,ClientDependency.Core,RequestHelper,C:\repos\Shandem_ClientDependency\ClientDependency.Core\RequestHelper.cs,TryReadUri,Cyclomatic complexity of the method is 9
Complex Method,ClientDependency.Core.CompositeFiles,CssMinifier,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\CssMinifier.cs,Action,Cyclomatic complexity of the method is 12
Complex Method,ClientDependency.Core.CompositeFiles,JSMin,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\JSMin.cs,HandleRegexLiteral,Cyclomatic complexity of the method is 11
Complex Method,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\CompositeDependencyHandler.cs,ProcessRequest,Cyclomatic complexity of the method is 8
Complex Method,ClientDependency.Core.CompositeFiles.Providers,BaseCompositeFileProcessingProvider,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\Providers\BaseCompositeFileProcessingProvider.cs,Initialize,Cyclomatic complexity of the method is 12
Complex Method,ClientDependency.Core.CompositeFiles.Providers,PathBasedUrlFormatter,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\Providers\PathBasedUrlFormatter.cs,Validate,Cyclomatic complexity of the method is 11
Long Parameter List,ClientDependency.Core,BaseLoader,C:\repos\Shandem_ClientDependency\ClientDependency.Core\BaseLoader.cs,RegisterDependency,The method has 5 parameters. Parameters: group' priority' filePath' type' htmlAttributes
Long Parameter List,ClientDependency.Core,BaseLoader,C:\repos\Shandem_ClientDependency\ClientDependency.Core\BaseLoader.cs,RegisterDependency,The method has 5 parameters. Parameters: priority' filePath' pathNameAlias' type' htmlAttributes
Long Parameter List,ClientDependency.Core,BaseLoader,C:\repos\Shandem_ClientDependency\ClientDependency.Core\BaseLoader.cs,RegisterDependency,The method has 5 parameters. Parameters: group' priority' filePath' pathNameAlias' type
Long Parameter List,ClientDependency.Core,BaseLoader,C:\repos\Shandem_ClientDependency\ClientDependency.Core\BaseLoader.cs,RegisterDependencyWithProvider,The method has 6 parameters. Parameters: group' priority' filePath' pathNameAlias' type' provider
Long Parameter List,ClientDependency.Core,BaseLoader,C:\repos\Shandem_ClientDependency\ClientDependency.Core\BaseLoader.cs,RegisterDependency,The method has 6 parameters. Parameters: group' priority' filePath' pathNameAlias' type' provider
Long Parameter List,ClientDependency.Core,BaseLoader,C:\repos\Shandem_ClientDependency\ClientDependency.Core\BaseLoader.cs,RegisterDependency,The method has 7 parameters. Parameters: group' priority' filePath' pathNameAlias' type' provider' forceBundle
Long Parameter List,ClientDependency.Core,BaseLoader,C:\repos\Shandem_ClientDependency\ClientDependency.Core\BaseLoader.cs,RegisterDependency,The method has 6 parameters. Parameters: group' priority' filePath' pathNameAlias' type' htmlAttributes
Long Parameter List,ClientDependency.Core,BaseLoader,C:\repos\Shandem_ClientDependency\ClientDependency.Core\BaseLoader.cs,RegisterDependency,The method has 7 parameters. Parameters: group' priority' filePath' pathNameAlias' type' htmlAttributes' provider
Long Parameter List,ClientDependency.Core,BaseLoader,C:\repos\Shandem_ClientDependency\ClientDependency.Core\BaseLoader.cs,RegisterDependency,The method has 8 parameters. Parameters: group' priority' filePath' pathNameAlias' type' htmlAttributes' provider' forceBundle
Long Parameter List,ClientDependency.Core,PlaceholderParser,C:\repos\Shandem_ClientDependency\ClientDependency.Core\PlaceholderParser.cs,ParseHtmlPlaceholders,The method has 5 parameters. Parameters: currentContext' html' jsMarkupRegex' cssMarkupRegex' output
Long Parameter List,ClientDependency.Core,ClientDependencyAttribute,C:\repos\Shandem_ClientDependency\ClientDependency.Core\ClientDependencyAttribute.cs,ClientDependencyAttribute,The method has 6 parameters. Parameters: group' priority' dependencyType' fileName' pathNameAlias' forceBundle
Long Parameter List,ClientDependency.Core,RequestHelper,C:\repos\Shandem_ClientDependency\ClientDependency.Core\RequestHelper.cs,TryReadUri,The method has 5 parameters. Parameters: url' http' approvedDomains' requestContents' resultUri
Long Parameter List,ClientDependency.Core.CompositeFiles,IVirtualFileWriter,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\IVirtualFileWriter.cs,WriteToStream,The method has 6 parameters. Parameters: provider' sw' vf' type' origUrl' http
Long Parameter List,ClientDependency.Core.CompositeFiles,DefaultFileWriter,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\DefaultFileWriter.cs,WriteToStream,The method has 6 parameters. Parameters: provider' sw' fi' type' origUrl' http
Long Parameter List,ClientDependency.Core.CompositeFiles,DefaultFileWriter,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\DefaultFileWriter.cs,WriteContentToStream,The method has 6 parameters. Parameters: provider' sw' content' type' context' originalUrl
Long Parameter List,ClientDependency.Core.CompositeFiles,DefaultFileWriter,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\DefaultFileWriter.cs,WriteContentToStream,The method has 6 parameters. Parameters: provider' sw' stream' type' context' originalUrl
Long Parameter List,ClientDependency.Core.CompositeFiles,IFileWriter,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\IFileWriter.cs,WriteToStream,The method has 6 parameters. Parameters: provider' sw' fi' type' origUrl' http
Long Parameter List,ClientDependency.Core.CompositeFiles,CompositeFileMap,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\CompositeFileMap.cs,CompositeFileMap,The method has 5 parameters. Parameters: key' compressionType' file' filePaths' version
Long Parameter List,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\CompositeDependencyHandler.cs,ProcessRequestInternal,The method has 6 parameters. Parameters: context' fileset' type' version' outputBytes' page
Long Parameter List,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\CompositeDependencyHandler.cs,SetCaching,The method has 5 parameters. Parameters: context' fileName' fileset' compressionType' page
Long Parameter List,ClientDependency.Core.CompositeFiles.Providers,BaseCompositeFileProcessingProvider,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\Providers\BaseCompositeFileProcessingProvider.cs,WriteFileToStream,The method has 5 parameters. Parameters: sw' fi' type' origUrl' http
Long Parameter List,ClientDependency.Core.CompositeFiles.Providers,BaseCompositeFileProcessingProvider,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\Providers\BaseCompositeFileProcessingProvider.cs,WriteVirtualFileToStream,The method has 5 parameters. Parameters: sw' vf' virtualWriter' type' http
Long Parameter List,ClientDependency.Core.CompositeFiles.Providers,BaseCompositeFileProcessingProvider,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\Providers\BaseCompositeFileProcessingProvider.cs,GetCompositeFileUrls,The method has 6 parameters. Parameters: type' dependencies' compositeFileHandlerPath' http' maxLength' version
Long Parameter List,ClientDependency.Core.CompositeFiles.Providers,BaseCompositeFileProcessingProvider,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\Providers\BaseCompositeFileProcessingProvider.cs,GetCompositeFileUrl,The method has 6 parameters. Parameters: fileKey' type' http' urlType' compositeFileHandlerPath' version
Long Parameter List,ClientDependency.Core.CompositeFiles.Providers,BaseFileMapProvider,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\Providers\BaseFileMapProvider.cs,CreateUpdateMap,The method has 5 parameters. Parameters: fileKey' compressionType' dependentFiles' compositeFile' version
Long Parameter List,ClientDependency.Core.CompositeFiles.Providers,PathBasedUrlFormatter,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\Providers\PathBasedUrlFormatter.cs,Parse,The method has 5 parameters. Parameters: pathBasedUrlFormat' path' fileKey' type' version
Long Parameter List,ClientDependency.Core.CompositeFiles.Providers,CompositeFileProcessingProvider,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\Providers\CompositeFileProcessingProvider.cs,WriteFileToStream,The method has 5 parameters. Parameters: sw' url' type' fileDefs' http
Long Parameter List,ClientDependency.Core.CompositeFiles.Providers,CompositeFileProcessingProvider,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\Providers\CompositeFileProcessingProvider.cs,WriteFileToStream,The method has 6 parameters. Parameters: sw' fi' type' origUrl' fileDefs' http
Long Parameter List,ClientDependency.Core.CompositeFiles.Providers,XmlFileMapper,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\Providers\XmlFileMapper.cs,CreateUpdateMap,The method has 5 parameters. Parameters: fileKey' compressionType' dependentFiles' compositeFile' version
Long Parameter List,ClientDependency.Core.Controls,ClientDependencyLoader,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Controls\ClientDependencyLoader.cs,RegisterDependency,The method has 5 parameters. Parameters: group' priority' filePath' pathNameAlias' type
Long Parameter List,ClientDependency.Core.Controls,ClientDependencyLoader,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Controls\ClientDependencyLoader.cs,RegisterDependency,The method has 6 parameters. Parameters: group' priority' filePath' pathNameAlias' type' provider
Long Parameter List,ClientDependency.Core.Controls,ClientDependencyLoader,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Controls\ClientDependencyLoader.cs,RegisterDependency,The method has 7 parameters. Parameters: group' priority' filePath' pathNameAlias' type' provider' forceBundle
Long Parameter List,ClientDependency.Core.Controls,ClientDependencyLoader,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Controls\ClientDependencyLoader.cs,RegisterDependency,The method has 8 parameters. Parameters: group' priority' filePath' pathNameAlias' type' htmlAttributes' provider' forceBundle
Long Parameter List,ClientDependency.Core.Controls,ClientDependencyLoader,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Controls\ClientDependencyLoader.cs,RegisterDependency,The method has 7 parameters. Parameters: group' priority' filePath' pathNameAlias' type' htmlAttributes' provider
Long Parameter List,ClientDependency.Core.FileRegistration.Providers,BaseRenderer,C:\repos\Shandem_ClientDependency\ClientDependency.Core\FileRegistration\Providers\BaseRenderer.cs,RegisterDependencies,The method has 5 parameters. Parameters: allDependencies' paths' jsOutput' cssOutput' http
Long Parameter List,ClientDependency.Core.FileRegistration.Providers,StandardRenderer,C:\repos\Shandem_ClientDependency\ClientDependency.Core\FileRegistration\Providers\StandardRenderer.cs,RegisterDependencies,The method has 5 parameters. Parameters: allDependencies' paths' jsOutput' cssOutput' http
Long Parameter List,ClientDependency.Core.FileRegistration.Providers,BaseFileRegistrationProvider,C:\repos\Shandem_ClientDependency\ClientDependency.Core\FileRegistration\Providers\BaseFileRegistrationProvider.cs,WriteStaggeredDependencies,The method has 5 parameters. Parameters: dependencies' http' builder' renderCompositeFiles' renderSingle
Long Parameter List,ClientDependency.Core.FileRegistration.Providers,BaseFileRegistrationProvider,C:\repos\Shandem_ClientDependency\ClientDependency.Core\FileRegistration\Providers\BaseFileRegistrationProvider.cs,WriteDependencies,The method has 5 parameters. Parameters: allDependencies' paths' jsOutput' cssOutput' http
Long Parameter List,ClientDependency.Core.Module,RogueFileFilter,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Module\RogueFileFilter.cs,ReplaceContent,The method has 6 parameters. Parameters: html' namedGroup' extensions' type' regex' http
Long Identifier,ClientDependency.Core.Config,ClientDependencySettings,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Config\ClientDependencySettings.cs,,The length of the parameter _fileBasedDependencyExtensionList is 33.
Long Identifier,ClientDependency.Core.FileRegistration.Providers,LazyLoadRenderer,C:\repos\Shandem_ClientDependency\ClientDependency.Core\FileRegistration\Providers\LazyLoadRenderer.cs,,The length of the parameter PlaceholderReplacementProcessing is 32.
Long Identifier,ClientDependency.Core.FileRegistration.Providers,BaseFileRegistrationProvider,C:\repos\Shandem_ClientDependency\ClientDependency.Core\FileRegistration\Providers\BaseFileRegistrationProvider.cs,,The length of the parameter _compositeFileHandlerPathInitialized is 36.
Long Statement,ClientDependency.Core,BaseLoader,C:\repos\Shandem_ClientDependency\ClientDependency.Core\BaseLoader.cs,RegisterClientDependencies,The length of the statement  "            //We will combine both the MVC and web forms providers here to pass in to the method since this method could be executing " is 121.
Long Statement,ClientDependency.Core,BaseLoader,C:\repos\Shandem_ClientDependency\ClientDependency.Core\BaseLoader.cs,RegisterClientDependencies,The length of the statement  "            //We will combine both the MVC and web forms providers here to pass in to the method since this method could be executing " is 121.
Long Statement,ClientDependency.Core,BaseLoader,C:\repos\Shandem_ClientDependency\ClientDependency.Core\BaseLoader.cs,RegisterDependency,The length of the statement  "            var file = new BasicFile(type) { Group = group' Priority = priority' FilePath = filePath' PathNameAlias = pathNameAlias }; " is 122.
Long Statement,ClientDependency.Core,BaseLoader,C:\repos\Shandem_ClientDependency\ClientDependency.Core\BaseLoader.cs,RegisterDependency,The length of the statement  "            RegisterClientDependencies(new List<IClientDependencyFile> { file }' new List<IClientDependencyPath>()); //send an empty paths collection " is 137.
Long Statement,ClientDependency.Core,BaseLoader,C:\repos\Shandem_ClientDependency\ClientDependency.Core\BaseLoader.cs,RegisterDependency,The length of the statement  "            RegisterClientDependencies(new List<IClientDependencyFile> { file }' new List<IClientDependencyPath>()); //send an empty paths collection " is 137.
Long Statement,ClientDependency.Core,BasicFile,C:\repos\Shandem_ClientDependency\ClientDependency.Core\BasicFile.cs,Equals,The length of the statement  "            return string.Equals(FilePath' other.FilePath' StringComparison.InvariantCultureIgnoreCase) && DependencyType == other.DependencyType && Priority == other.Priority && Group == other.Group && string.Equals(PathNameAlias' other.PathNameAlias' StringComparison.InvariantCultureIgnoreCase) && string.Equals(ForceProvider' other.ForceProvider) && Equals(HtmlAttributes' other.HtmlAttributes); " is 387.
Long Statement,ClientDependency.Core,BundleManager,C:\repos\Shandem_ClientDependency\ClientDependency.Core\BundleManager.cs,GetCssBundle,The length of the statement  "            var found = Bundles.Where(x => x.Key.Type == ClientDependencyType.Css && x.Key.Name.Equals(bundleName' StringComparison.InvariantCultureIgnoreCase)); " is 149.
Long Statement,ClientDependency.Core,BundleManager,C:\repos\Shandem_ClientDependency\ClientDependency.Core\BundleManager.cs,GetJsBundle,The length of the statement  "            var found = Bundles.Where(x => x.Key.Type == ClientDependencyType.Javascript && x.Key.Name.Equals(bundleName' StringComparison.InvariantCultureIgnoreCase)); " is 156.
Long Statement,ClientDependency.Core,BundleManager,C:\repos\Shandem_ClientDependency\ClientDependency.Core\BundleManager.cs,CreateCssBundle,The length of the statement  "            Bundles.AddOrUpdate(new BundleDefinition(ClientDependencyType.Css' name)' s => OrderFiles(files)' (s' enumerable) => OrderFiles(files)); " is 136.
Long Statement,ClientDependency.Core,BundleManager,C:\repos\Shandem_ClientDependency\ClientDependency.Core\BundleManager.cs,CreateCssBundle,The length of the statement  "            Bundles.AddOrUpdate(new BundleDefinition(ClientDependencyType.Css' name)' s => OrderFiles(files)' (s' enumerable) => OrderFiles(files)); " is 136.
Long Statement,ClientDependency.Core,BundleManager,C:\repos\Shandem_ClientDependency\ClientDependency.Core\BundleManager.cs,CreateCssBundle,The length of the statement  "            Bundles.AddOrUpdate(new BundleDefinition(ClientDependencyType.Css' name)' s => OrderFiles(files)' (s' enumerable) => OrderFiles(files)); " is 136.
Long Statement,ClientDependency.Core,BundleManager,C:\repos\Shandem_ClientDependency\ClientDependency.Core\BundleManager.cs,CreateJsBundle,The length of the statement  "            Bundles.AddOrUpdate(new BundleDefinition(ClientDependencyType.Javascript' name)' s => OrderFiles(files)' (s' enumerable) => OrderFiles(files)); " is 143.
Long Statement,ClientDependency.Core,BundleManager,C:\repos\Shandem_ClientDependency\ClientDependency.Core\BundleManager.cs,CreateJsBundle,The length of the statement  "            Bundles.AddOrUpdate(new BundleDefinition(ClientDependencyType.Javascript' name)' s => OrderFiles(files)' (s' enumerable) => OrderFiles(files)); " is 143.
Long Statement,ClientDependency.Core,BundleManager,C:\repos\Shandem_ClientDependency\ClientDependency.Core\BundleManager.cs,CreateJsBundle,The length of the statement  "            Bundles.AddOrUpdate(new BundleDefinition(ClientDependencyType.Javascript' name)' s => OrderFiles(files)' (s' enumerable) => OrderFiles(files)); " is 143.
Long Statement,ClientDependency.Core,CssHelper,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CssHelper.cs,ReplaceUrlsWithAbsolutePaths,The length of the statement  "                                             || match.StartsWith("//"' StringComparison.InvariantCultureIgnoreCase)) ? match : new Uri(cssLocation' match).PathAndQuery' " is 123.
Long Statement,ClientDependency.Core,HttpContextBaseExtensions,C:\repos\Shandem_ClientDependency\ClientDependency.Core\HttpContextBaseExtensions.cs,IsAbsolute,The length of the statement  "                throw new InvalidOperationException("IsAbsolute method will check if a Virtual path is absolute' it is not supported for full URLs"); " is 133.
Long Statement,ClientDependency.Core,ClientDependencyFileExtensions,C:\repos\Shandem_ClientDependency\ClientDependency.Core\IClientDependencyFileExtensions.cs,ResolveFilePath,The length of the statement  "                var path = http.Request.AppRelativeCurrentExecutionFilePath.Substring(0' http.Request.AppRelativeCurrentExecutionFilePath.LastIndexOf('/') + 1); " is 144.
Long Statement,ClientDependency.Core,PhysicalFileReader,C:\repos\Shandem_ClientDependency\ClientDependency.Core\IFileReader.cs,ReadFile,The length of the statement  "                ClientDependencySettings.Instance.Logger.Error(string.Format("Could not read file {0}. EXCEPTION: {1}"' physicalPath' ex.Message)' ex); " is 135.
Long Statement,ClientDependency.Core,ClientDependencyAttribute,C:\repos\Shandem_ClientDependency\ClientDependency.Core\ClientDependencyAttribute.cs,Equals,The length of the statement  "            return string.Equals(FilePath' other.FilePath' StringComparison.InvariantCultureIgnoreCase) && DependencyType == other.DependencyType && Priority == other.Priority && Group == other.Group && string.Equals(PathNameAlias' other.PathNameAlias' StringComparison.InvariantCultureIgnoreCase) && string.Equals(ForceProvider' other.ForceProvider) && Equals(HtmlAttributes' other.HtmlAttributes); " is 387.
Long Statement,ClientDependency.Core,RequestHelper,C:\repos\Shandem_ClientDependency\ClientDependency.Core\RequestHelper.cs,TryReadUri,The length of the statement  "                            ClientDependencySettings.Instance.Logger.Error(string.Format("Could not load file contents from {0}. EXCEPTION: {1}"' url' ex.Message)' ex); " is 140.
Long Statement,ClientDependency.Core,RequestHelper,C:\repos\Shandem_ClientDependency\ClientDependency.Core\RequestHelper.cs,TryReadUri,The length of the statement  "                    if (url.StartsWith(http.Request.ApplicationPath.TrimEnd('/') + "/webresource.axd"' StringComparison.InvariantCultureIgnoreCase)) " is 128.
Long Statement,ClientDependency.Core,RequestHelper,C:\repos\Shandem_ClientDependency\ClientDependency.Core\RequestHelper.cs,TryReadUri,The length of the statement  "                        ClientDependencySettings.Instance.Logger.Error(string.Format("Could not load file contents from {0}. Domain is not white-listed."' url)' null); " is 143.
Long Statement,ClientDependency.Core,RequestHelper,C:\repos\Shandem_ClientDependency\ClientDependency.Core\RequestHelper.cs,TryReadUri,The length of the statement  "                    ClientDependencySettings.Instance.Logger.Error(string.Format("Could not load file contents from {0}. EXCEPTION: {1}"' url' ex.Message)' ex); " is 140.
Long Statement,ClientDependency.Core,UriExtensions,C:\repos\Shandem_ClientDependency\ClientDependency.Core\UriExtensions.cs,ToAbsolutePath,The length of the statement  "                                 || path.StartsWith("//"' StringComparison.InvariantCultureIgnoreCase)) ? path : new Uri(originalUri' path).PathAndQuery' " is 120.
Long Statement,ClientDependency.Core.CompositeFiles,DefaultFileWriter,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\DefaultFileWriter.cs,WriteToStream,The length of the statement  "                ClientDependencySettings.Instance.Logger.Error($"Could not write file {fi.FullName} contents to stream. EXCEPTION: {ex.Message}"' ex); " is 134.
Long Statement,ClientDependency.Core.CompositeFiles,DefaultFileWriter,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\DefaultFileWriter.cs,WriteContentToStream,The length of the statement  "                //need to write the imported sheets first since these theoretically should *always* be at the top for browser to support them " is 125.
Long Statement,ClientDependency.Core.CompositeFiles,DefaultFileWriter,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\DefaultFileWriter.cs,WriteContentToStream,The length of the statement  "                //need to write the imported sheets first since these theoretically should *always* be at the top for browser to support them " is 125.
Long Statement,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\CompositeDependencyHandler.cs,ProcessRequest,The length of the statement  "                ClientDependencySettings.Instance.Logger.Error(string.Format("No bytes were returned' this is attempt {0}. Fileset: {1}' Type: {2}' Version: {3}"' i' fileKey' type' version)' null); " is 181.
Long Statement,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\CompositeDependencyHandler.cs,ProcessRequest,The length of the statement  "                ClientDependencySettings.Instance.Logger.Fatal(string.Format("No bytes were returned after 5 attempts. Fileset: {0}' Type: {1}' Version: {2}"' fileKey' type' version)' null); " is 174.
Long Statement,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\CompositeDependencyHandler.cs,ProcessRequestInternal,The length of the statement  "            var map = ClientDependencySettings.Instance.DefaultFileMapProvider.GetCompositeFile(fileset' version' clientCompression.ToString()); " is 132.
Long Statement,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\CompositeDependencyHandler.cs,ProcessRequestInternal,The length of the statement  "                        outputBytes = ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.CompressBytes(clientCompression' fileBytes); " is 131.
Long Statement,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\CompositeDependencyHandler.cs,ValidateTypeFromFileNames,The length of the statement  "                // sanity check of file types' we see a bug when javascript bundles are saved as cdC bundles and are minified as CSS which breaks them completely " is 145.
Long Statement,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\CompositeDependencyHandler.cs,ValidateTypeFromFileNames,The length of the statement  "                    ClientDependencySettings.Instance.Logger.Error(string.Format("Mismatched ClientDependencyType' attempt to treat .js files bundle as css' forcing js type' Url={0}' UserAgent={1}"' context.Request.Url' context.Request.UserAgent)' null); " is 234.
Long Statement,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\CompositeDependencyHandler.cs,ValidateTypeFromFileNames,The length of the statement  "                    ClientDependencySettings.Instance.Logger.Error(string.Format("Mismatched ClientDependencyType' attempt to treat .css files bundle as js' forcing css type' Url={0}' UserAgent={1}"' context.Request.Url' context.Request.UserAgent)' null); " is 235.
Long Statement,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\CompositeDependencyHandler.cs,GetCombinedFiles,The length of the statement  "            return ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.CombineFiles(filePaths' context' type' out fDefs); " is 130.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,BaseCompositeFileProcessingProvider,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\Providers\BaseCompositeFileProcessingProvider.cs,WritePathToStream,The length of the statement  "                                    ClientDependencySettings.Instance.Logger.Error($"Could not load file contents from {path}. EXCEPTION: {ex1.Message}"' ex1); " is 123.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,BaseCompositeFileProcessingProvider,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\Providers\BaseCompositeFileProcessingProvider.cs,WritePathToStream,The length of the statement  "                        ClientDependencySettings.Instance.Logger.Error($"Could not load file contents from {path}. EXCEPTION: {ex.Message}"' ex); " is 121.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,BaseCompositeFileProcessingProvider,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\Providers\BaseCompositeFileProcessingProvider.cs,GetCompositeFileUrls,The length of the statement  "                        throw new InvalidOperationException("The path for the single dependency: '" + current.FilePath + "' exceeds the max length (" + maxLength + ")' either reduce the single dependency's path length or increase the CompositeDependencyHandler.MaxHandlerUrlLength value"); " is 265.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,BaseCompositeFileProcessingProvider,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\Providers\BaseCompositeFileProcessingProvider.cs,ProcessCompositeList,The length of the statement  "                    return GetCompositeFileUrls(type' asArray' compositeFileHandlerPath' http' CompositeDependencyHandler.MaxHandlerUrlLength' ClientDependencySettings.Instance.Version).ToArray(); " is 176.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,PathBasedUrlFormatter,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\Providers\PathBasedUrlFormatter.cs,Parse,The length of the statement  "                var typeDelimiter = pathBasedUrlFormat.Substring(versionIndex + "{version}".Length' typeIndex - (versionIndex + "{version}".Length)); " is 133.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,PathBasedUrlFormatter,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\Providers\PathBasedUrlFormatter.cs,Validate,The length of the statement  "                    throw new FormatException("The ordering of the tokens in the pathUrlFormat must be in the order: dependencyId' version' type"); " is 127.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,PathBasedUrlFormatter,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\Providers\PathBasedUrlFormatter.cs,Validate,The length of the statement  "                throw new FormatException("The value specified for pathUrlFormat contains a '{' character outside of the token declaration which is invalid"); " is 142.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,PathBasedUrlFormatter,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\Providers\PathBasedUrlFormatter.cs,Validate,The length of the statement  "                throw new FormatException("The value specified for pathUrlFormat contains a '}' character outside of the token declaration which is invalid"); " is 142.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,PathBasedUrlFormatter,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\Providers\PathBasedUrlFormatter.cs,Validate,The length of the statement  "            if (pathChars[pathBasedUrlFormat.IndexOf('}'' pathBasedUrlFormat.IndexOf('}') + 1) + 1] == '{' || pathChars[pathBasedUrlFormat.IndexOf('}'' pathBasedUrlFormat.IndexOf('}') + 1) + 1] == '}') " is 189.
Long Statement,ClientDependency.Core.CompositeFiles.Providers,XmlFileMapper,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\Providers\XmlFileMapper.cs,CreateNewMap,The length of the statement  "                //now' create a map with the file key so that it can be filled out later with the actual composite file that is created by the handler " is 134.
Long Statement,ClientDependency.Core.Config,ClientDependencySettings,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Config\ClientDependencySettings.cs,LoadProviders,The length of the statement  "            //    DefaultCompositeFileProcessingProvider = CompositeFileProcessingProviderCollection[ConfigSection.CompositeFileElement.DefaultFileProcessingProviderLegacy]; " is 161.
Long Statement,ClientDependency.Core.Config,ClientDependencySettings,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Config\ClientDependencySettings.cs,LoadProviders,The length of the statement  "            //    DefaultCompositeFileProcessingProvider = CompositeFileProcessingProviderCollection[ConfigSection.CompositeFileElement.DefaultFileProcessingProvider];    " is 155.
Long Statement,ClientDependency.Core.Config,ClientDependencySettings,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Config\ClientDependencySettings.cs,LoadProviders,The length of the statement  "            DefaultCompositeFileProcessingProvider = CompositeFileProcessingProviderCollection[ConfigSection.CompositeFileElement.DefaultFileProcessingProvider]; " is 149.
Long Statement,ClientDependency.Core.Config,ClientDependencySettings,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Config\ClientDependencySettings.cs,LoadProviders,The length of the statement  "            DefaultFileRegistrationProvider = FileRegistrationProviderCollection[ConfigSection.FileRegistrationElement.DefaultProvider]; " is 124.
Long Statement,ClientDependency.Core.Config,ClientDependencySettings,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Config\ClientDependencySettings.cs,LoadProviders,The length of the statement  "                    throw new ArgumentException("The loggerType '" + ConfigSection.LoggerType + "' does not inherit from ClientDependency.Core.Logging.ILogger"); " is 141.
Long Statement,ClientDependency.Core.Config,ClientDependencySettings,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Config\ClientDependencySettings.cs,LoadDefaultFileRegConfig,The length of the statement  "                ProvidersHelper.InstantiateProviders(section.FileRegistrationElement.Providers' FileRegistrationProviderCollection' typeof(BaseFileRegistrationProvider)); " is 154.
Long Statement,ClientDependency.Core.Config,ClientDependencySettings,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Config\ClientDependencySettings.cs,LoadDefaultFileMapConfig,The length of the statement  "                ProvidersHelper.InstantiateProviders(section.CompositeFileElement.FileMapProviders' FileMapProviderCollection' typeof(BaseFileMapProvider)); " is 140.
Long Statement,ClientDependency.Core.Config,ClientDependencySettings,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Config\ClientDependencySettings.cs,LoadDefaultCompositeFileConfig,The length of the statement  "                ProvidersHelper.InstantiateProviders(section.CompositeFileElement.FileProcessingProviders' CompositeFileProcessingProviderCollection' typeof(BaseCompositeFileProcessingProvider)); " is 179.
Long Statement,ClientDependency.Core.Controls,HtmlInclude,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Controls\HtmlInclude.cs,RegisterIncludes,The length of the statement  "                loader.RegisterDependency(file.Group' file.Priority' file.FilePath' ""' dependencyType' file.HtmlAttributes' file.ForceProvider); " is 129.
Long Statement,ClientDependency.Core.Controls,HtmlInclude,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Controls\HtmlInclude.cs,GetIncludes,The length of the statement  "            foreach (Match match in Regex.Matches(innerHtml' tagPattern' RegexOptions.Compiled | RegexOptions.IgnoreCase | RegexOptions.CultureInvariant)) " is 142.
Long Statement,ClientDependency.Core.Controls,ClientDependencyInclude,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Controls\ClientDependencyInclude.cs,Equals,The length of the statement  "            return string.Equals(FilePath' other.FilePath' StringComparison.InvariantCultureIgnoreCase) && DependencyType == other.DependencyType && Priority == other.Priority && Group == other.Group && string.Equals(PathNameAlias' other.PathNameAlias' StringComparison.InvariantCultureIgnoreCase) && string.Equals(ForceProvider' other.ForceProvider) && Equals(HtmlAttributes' other.HtmlAttributes); " is 387.
Long Statement,ClientDependency.Core.Controls,ClientDependencyLoader,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Controls\ClientDependencyLoader.cs,RegisterClientDependencies,The length of the statement  "            RegisterClientDependencies((WebFormsFileRegistrationProvider)_base.Provider' control' paths.Cast<IClientDependencyPath>()); " is 123.
Long Statement,ClientDependency.Core.Controls,ClientDependencyLoader,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Controls\ClientDependencyLoader.cs,RegisterClientDependencies,The length of the statement  "			RegisterClientDependencies(ClientDependencySettings.Instance.FileRegistrationProviderCollection[providerName]' control' paths); " is 127.
Long Statement,ClientDependency.Core.Controls,ClientDependencyLoader,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Controls\ClientDependencyLoader.cs,RegisterClientDependencies,The length of the statement  "            _base.RegisterClientDependencies(provider' dependencies' paths' ClientDependencySettings.Instance.FileRegistrationProviderCollection); " is 134.
Long Statement,ClientDependency.Core.FileRegistration.Providers,PlaceHolderProvider,C:\repos\Shandem_ClientDependency\ClientDependency.Core\FileRegistration\Providers\PlaceHolderProvider.cs,RegisterDependencies,The length of the statement  "                throw new NullReferenceException("Could not find the placeholder control to render the JavaScript:" + JavaScriptPlaceHolderId); " is 127.
Long Statement,ClientDependency.Core.FileRegistration.Providers,BaseFileRegistrationProvider,C:\repos\Shandem_ClientDependency\ClientDependency.Core\FileRegistration\Providers\BaseFileRegistrationProvider.cs,Initialize,The length of the statement  "            if (config != null && config["disableCompositeBundling"] != null && !string.IsNullOrEmpty(config["disableCompositeBundling"])) " is 126.
Long Statement,ClientDependency.Core.FileRegistration.Providers,BaseFileRegistrationProvider,C:\repos\Shandem_ClientDependency\ClientDependency.Core\FileRegistration\Providers\BaseFileRegistrationProvider.cs,Initialize,The length of the statement  "            if (config != null && config["enableDebugVersionQueryString"] != null && !string.IsNullOrEmpty(config["enableDebugVersionQueryString"])) " is 136.
Long Statement,ClientDependency.Core.FileRegistration.Providers,BaseFileRegistrationProvider,C:\repos\Shandem_ClientDependency\ClientDependency.Core\FileRegistration\Providers\BaseFileRegistrationProvider.cs,UpdateFilePaths,The length of the statement  "                        throw new NullReferenceException("The PathNameAlias specified for dependency " + dependency.FilePath + " does not exist in the ClientDependencyPathCollection"); " is 160.
Long Statement,ClientDependency.Core.FileRegistration.Providers,BaseFileRegistrationProvider,C:\repos\Shandem_ClientDependency\ClientDependency.Core\FileRegistration\Providers\BaseFileRegistrationProvider.cs,AppendVersion,The length of the statement  "                || ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.UrlType == CompositeUrlType.Base64QueryStrings) " is 123.
Long Statement,ClientDependency.Core.FileRegistration.Providers,LazyLoadProvider,C:\repos\Shandem_ClientDependency\ClientDependency.Core\FileRegistration\Providers\LazyLoadProvider.cs,RegisterDependencies,The length of the statement  "                throw new InvalidOperationException("The current HttpHandler in a WebFormsFileRegistrationProvider must be of type Page"); " is 122.
Long Statement,ClientDependency.Core.FileRegistration.Providers,LazyLoadProvider,C:\repos\Shandem_ClientDependency\ClientDependency.Core\FileRegistration\Providers\LazyLoadProvider.cs,RegisterScript,The length of the statement  "                    throw new InvalidOperationException("A form tag must be present on the page with a runat='server' attribute specified"); " is 120.
Long Statement,ClientDependency.Core.FileRegistration.Providers,PageHeaderProvider,C:\repos\Shandem_ClientDependency\ClientDependency.Core\FileRegistration\Providers\PageHeaderProvider.cs,RegisterDependencies,The length of the statement  "                throw new InvalidOperationException("The current HttpHandler in a WebFormsFileRegistrationProvider must be of type Page"); " is 122.
Long Statement,ClientDependency.Core.Module,RogueFileFilter,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Module\RogueFileFilter.cs,ValidateCurrentHandler,The length of the statement  "            if (CurrentContext.IsDebuggingEnabled || !ClientDependencySettings.Instance.DefaultFileRegistrationProvider.EnableCompositeFiles) " is 129.
Long Statement,ClientDependency.Core.Module,RogueFileFilter,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Module\RogueFileFilter.cs,GetSupportedPath,The length of the statement  "                    let isGood = m.ExcludePaths.Cast<RogueFileCompressionExcludeElement>().Select(e => Regex.IsMatch(rawUrl' e.FilePath' RegexOptions.Compiled | RegexOptions.IgnoreCase)).All(excluded => !excluded) " is 193.
Long Statement,ClientDependency.Core.Module,RogueFileFilter,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Module\RogueFileFilter.cs,ReplaceScripts,The length of the statement  "                return ReplaceContent(html' "src"' m_FoundPath.JsRequestExtension.Split(''')' ClientDependencyType.Javascript' m_MatchScript' CurrentContext); " is 142.
Long Statement,ClientDependency.Core.Module,RogueFileFilter,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Module\RogueFileFilter.cs,ReplaceStyles,The length of the statement  "                return ReplaceContent(html' "href"' m_FoundPath.CssRequestExtension.Split(''')' ClientDependencyType.Css' m_MatchLink' CurrentContext); " is 135.
Long Statement,ClientDependency.Core.Module,RogueFileFilter,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Module\RogueFileFilter.cs,ReplaceContent,The length of the statement  "                    //if there is no namedGroup group name or it doesn't end with a js/css extension or it's already using the composite handler' " is 125.
Complex Conditional,ClientDependency.Core,HttpContextBaseExtensions,C:\repos\Shandem_ClientDependency\ClientDependency.Core\HttpContextBaseExtensions.cs,IsAbsolutePath,The conditional expression  "indexOfSlashes > -1 &&                   (indexOfQuestionMarks < 0 ||                    (indexOfQuestionMarks > -1 && indexOfQuestionMarks > indexOfSlashes)                    )"  is complex.
Complex Conditional,ClientDependency.Core.CompositeFiles,CssMinifier,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\CssMinifier.cs,Action,The conditional expression  "_theB == '/' && (_theA == '(' || _theA == ''' || _theA == '=' ||                                      _theA == '[' || _theA == '!' || _theA == ':' ||                                      _theA == '&' || _theA == '|' || _theA == '?' ||                                      _theA == '{' || _theA == '}' || _theA == ';' ||                                      _theA == '\n')"  is complex.
Complex Conditional,ClientDependency.Core.CompositeFiles,JSMin,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\JSMin.cs,HandleUnaryOperator,The conditional expression  "(_theY == '\n' || _theY == ' ') &&                 (operators.IndexOf((char)_theA) >= 0) && (operators.IndexOf((char)_theB) >= 0)"  is complex.
Complex Conditional,ClientDependency.Core.CompositeFiles,JSMin,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\JSMin.cs,TrackReturnStatement,The conditional expression  "_retStatement == -1 && _theA == 'r' &&                 (preReturn.IndexOf((char)_theY) >= 0 || char.IsWhiteSpace((char)_theY) || _theY == 'r')"  is complex.
Complex Conditional,ClientDependency.Core.FileRegistration.Providers,BaseFileRegistrationProvider,C:\repos\Shandem_ClientDependency\ClientDependency.Core\FileRegistration\Providers\BaseFileRegistrationProvider.cs,WriteStaggeredDependencies,The conditional expression  "(!http.IsAbsolutePath(f.FilePath) && !fileBasedExtensions.Contains(stringExt))                      //now check for external resources                      || (http.IsAbsolutePath(f.FilePath)                          //remote dependencies aren't local                          && !new Uri(f.FilePath' UriKind.RelativeOrAbsolute).IsLocalUri(http)                          // not required to be bundled                          && !f.ForceBundle)"  is complex.
Complex Conditional,ClientDependency.Core.Module,RogueFileFilter,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Module\RogueFileFilter.cs,ReplaceContent,The conditional expression  "grp == null                          || string.IsNullOrEmpty(grp.ToString())                          || !grp.ToString().EndsWithOneOf(extensions)                          || grp.ToString().StartsWith(ClientDependencySettings.Instance.CompositeFileHandlerPath)"  is complex.
Empty Catch Block,ClientDependency.Core.CompositeFiles.Providers,BaseCompositeFileProcessingProvider,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\Providers\BaseCompositeFileProcessingProvider.cs,Initialize,The method has an empty catch block.
Magic Number,ClientDependency.Core,BasicFile,C:\repos\Shandem_ClientDependency\ClientDependency.Core\BasicFile.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (FilePath != null ? FilePath.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (int) DependencyType;                  hashCode = (hashCode*397) ^ Priority;                  hashCode = (hashCode*397) ^ Group;                  hashCode = (hashCode*397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (ForceProvider != null ? ForceProvider.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode() : 0);                  return hashCode;              }
Magic Number,ClientDependency.Core,BasicFile,C:\repos\Shandem_ClientDependency\ClientDependency.Core\BasicFile.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (FilePath != null ? FilePath.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (int) DependencyType;                  hashCode = (hashCode*397) ^ Priority;                  hashCode = (hashCode*397) ^ Group;                  hashCode = (hashCode*397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (ForceProvider != null ? ForceProvider.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode() : 0);                  return hashCode;              }
Magic Number,ClientDependency.Core,BasicFile,C:\repos\Shandem_ClientDependency\ClientDependency.Core\BasicFile.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (FilePath != null ? FilePath.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (int) DependencyType;                  hashCode = (hashCode*397) ^ Priority;                  hashCode = (hashCode*397) ^ Group;                  hashCode = (hashCode*397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (ForceProvider != null ? ForceProvider.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode() : 0);                  return hashCode;              }
Magic Number,ClientDependency.Core,BasicFile,C:\repos\Shandem_ClientDependency\ClientDependency.Core\BasicFile.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (FilePath != null ? FilePath.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (int) DependencyType;                  hashCode = (hashCode*397) ^ Priority;                  hashCode = (hashCode*397) ^ Group;                  hashCode = (hashCode*397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (ForceProvider != null ? ForceProvider.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode() : 0);                  return hashCode;              }
Magic Number,ClientDependency.Core,BasicFile,C:\repos\Shandem_ClientDependency\ClientDependency.Core\BasicFile.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (FilePath != null ? FilePath.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (int) DependencyType;                  hashCode = (hashCode*397) ^ Priority;                  hashCode = (hashCode*397) ^ Group;                  hashCode = (hashCode*397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (ForceProvider != null ? ForceProvider.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode() : 0);                  return hashCode;              }
Magic Number,ClientDependency.Core,BasicFile,C:\repos\Shandem_ClientDependency\ClientDependency.Core\BasicFile.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (FilePath != null ? FilePath.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (int) DependencyType;                  hashCode = (hashCode*397) ^ Priority;                  hashCode = (hashCode*397) ^ Group;                  hashCode = (hashCode*397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (ForceProvider != null ? ForceProvider.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode() : 0);                  return hashCode;              }
Magic Number,ClientDependency.Core,BasicPath,C:\repos\Shandem_ClientDependency\ClientDependency.Core\BasicPath.cs,GetHashCode,The following statement contains a magic number: unchecked  	        {  	            return (Name.GetHashCode()*397) ^ Path.GetHashCode();  	        }
Magic Number,ClientDependency.Core,BundleDefinition,C:\repos\Shandem_ClientDependency\ClientDependency.Core\BundleDefinition.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  return ((int) Type*397) ^ Name.GetHashCode();              }
Magic Number,ClientDependency.Core,CssHelper,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CssHelper.cs,ParseImportStatements,The following statement contains a magic number: foreach (Match match in matches)              {                  //Ignore external imports                  var urlMatch = CssUrlRegex.Match(match.Value);                  if (urlMatch.Success && urlMatch.Groups.Count >= 2)                  {                      var path = urlMatch.Groups[1].Value.Trim('\''' '"');                       if ((path.StartsWith("http://"' StringComparison.InvariantCultureIgnoreCase)                           || path.StartsWith("https://"' StringComparison.InvariantCultureIgnoreCase)                           || path.StartsWith("//"' StringComparison.InvariantCultureIgnoreCase)))                      {                          continue;                      }                  }                    //Strip the import statement                                  content = content.ReplaceFirst(match.Value' "");                    //write import css content                  var filePath = match.Groups[1].Value.Trim('\''' '"');                  pathsFound.Add(filePath);              }
Magic Number,ClientDependency.Core,CssHelper,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CssHelper.cs,ParseImportStatements,The following statement contains a magic number: while (true)              {                  var next = reader.Read();                  if (next == -1)                  {                      break;                  }                    var c = (char) next;                    //still searching for the '@import' block at the top                  if (currIndex == -1 && char.IsWhiteSpace(c))                  {                      //maintain whitespace with the output                      tempImports.Append(c);                  }                  else if (currIndex == -2)                  {                      //we've found the entire searchStatement' keep processing until we hit the semicolon                        tempImports.Append(c);                        if (c == ';')                      {                          //we're at the end' reset the index so that it looks for the searchStatement again                          currIndex = -1;                          //write to the main imports and reset the temp one                          imports.Append(tempImports);                          tempImports.Clear();                      }                  }                  else if (searchStatement[currIndex + 1] == c)                  {                      //we've found the next char in the search statement                      tempImports.Append(c);                      currIndex++;                      if (currIndex == (searchStatement.Length - 1))                      {                          //we've found the whole statement' set the flag that we are processing                          currIndex = -2;                      }                  }                  else                  {                      //reset and start again                      currIndex = -1;                      tempImports.Clear();                  }                           }
Magic Number,ClientDependency.Core,CssHelper,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CssHelper.cs,ParseImportStatements,The following statement contains a magic number: while (true)              {                  var next = reader.Read();                  if (next == -1)                  {                      break;                  }                    var c = (char) next;                    //still searching for the '@import' block at the top                  if (currIndex == -1 && char.IsWhiteSpace(c))                  {                      //maintain whitespace with the output                      tempImports.Append(c);                  }                  else if (currIndex == -2)                  {                      //we've found the entire searchStatement' keep processing until we hit the semicolon                        tempImports.Append(c);                        if (c == ';')                      {                          //we're at the end' reset the index so that it looks for the searchStatement again                          currIndex = -1;                          //write to the main imports and reset the temp one                          imports.Append(tempImports);                          tempImports.Clear();                      }                  }                  else if (searchStatement[currIndex + 1] == c)                  {                      //we've found the next char in the search statement                      tempImports.Append(c);                      currIndex++;                      if (currIndex == (searchStatement.Length - 1))                      {                          //we've found the whole statement' set the flag that we are processing                          currIndex = -2;                      }                  }                  else                  {                      //reset and start again                      currIndex = -1;                      tempImports.Clear();                  }                           }
Magic Number,ClientDependency.Core,CssHelper,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CssHelper.cs,ReplaceUrlsWithAbsolutePaths,The following statement contains a magic number: var str = CssUrlRegex.Replace(fileContent' m =>                  {                      if (m.Groups.Count == 2)                      {                          var match = m.Groups[1].Value.Trim('\''' '"');                          var hashSplit = match.Split(new[] {'#'}' StringSplitOptions.RemoveEmptyEntries);                            return string.Format(@"url(""{0}{1}"")"'                                               (match.StartsWith("http://"' StringComparison.InvariantCultureIgnoreCase)                                               || match.StartsWith("https://"' StringComparison.InvariantCultureIgnoreCase)                                               || match.StartsWith("//"' StringComparison.InvariantCultureIgnoreCase)) ? match : new Uri(cssLocation' match).PathAndQuery'                                               hashSplit.Length > 1 ? ("#" + hashSplit[1]) : "");                      }                      return m.Value;                  });
Magic Number,ClientDependency.Core,HashCodeCombiner,C:\repos\Shandem_ClientDependency\ClientDependency.Core\HashCodeCombiner.cs,AddInt,The following statement contains a magic number: _combinedHash = ((_combinedHash << 5) + _combinedHash) ^ i;
Magic Number,ClientDependency.Core,ClientDependencyAttribute,C:\repos\Shandem_ClientDependency\ClientDependency.Core\ClientDependencyAttribute.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (FilePath != null ? FilePath.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (int)DependencyType;                  hashCode = (hashCode * 397) ^ Priority;                  hashCode = (hashCode * 397) ^ Group;                  hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode() : 0);                  return hashCode;              }
Magic Number,ClientDependency.Core,ClientDependencyAttribute,C:\repos\Shandem_ClientDependency\ClientDependency.Core\ClientDependencyAttribute.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (FilePath != null ? FilePath.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (int)DependencyType;                  hashCode = (hashCode * 397) ^ Priority;                  hashCode = (hashCode * 397) ^ Group;                  hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode() : 0);                  return hashCode;              }
Magic Number,ClientDependency.Core,ClientDependencyAttribute,C:\repos\Shandem_ClientDependency\ClientDependency.Core\ClientDependencyAttribute.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (FilePath != null ? FilePath.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (int)DependencyType;                  hashCode = (hashCode * 397) ^ Priority;                  hashCode = (hashCode * 397) ^ Group;                  hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode() : 0);                  return hashCode;              }
Magic Number,ClientDependency.Core,ClientDependencyAttribute,C:\repos\Shandem_ClientDependency\ClientDependency.Core\ClientDependencyAttribute.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (FilePath != null ? FilePath.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (int)DependencyType;                  hashCode = (hashCode * 397) ^ Priority;                  hashCode = (hashCode * 397) ^ Group;                  hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode() : 0);                  return hashCode;              }
Magic Number,ClientDependency.Core,ClientDependencyAttribute,C:\repos\Shandem_ClientDependency\ClientDependency.Core\ClientDependencyAttribute.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (FilePath != null ? FilePath.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (int)DependencyType;                  hashCode = (hashCode * 397) ^ Priority;                  hashCode = (hashCode * 397) ^ Group;                  hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode() : 0);                  return hashCode;              }
Magic Number,ClientDependency.Core,ClientDependencyAttribute,C:\repos\Shandem_ClientDependency\ClientDependency.Core\ClientDependencyAttribute.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (FilePath != null ? FilePath.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (int)DependencyType;                  hashCode = (hashCode * 397) ^ Priority;                  hashCode = (hashCode * 397) ^ Group;                  hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode() : 0);                  return hashCode;              }
Magic Number,ClientDependency.Core,StringExtensions,C:\repos\Shandem_ClientDependency\ClientDependency.Core\StringExtensions.cs,DecodeFrom64Url,The following statement contains a magic number: int rem = toDecode.Length % 4;
Magic Number,ClientDependency.Core,StringExtensions,C:\repos\Shandem_ClientDependency\ClientDependency.Core\StringExtensions.cs,DecodeFrom64Url,The following statement contains a magic number: if (rem > 0)                  toDecode = toDecode.PadRight(toDecode.Length + 4 - rem' '=');
Magic Number,ClientDependency.Core.CompositeFiles,CssMinifier,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\CssMinifier.cs,ExecuteCssMin,The following statement contains a magic number: Action(3);
Magic Number,ClientDependency.Core.CompositeFiles,CssMinifier,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\CssMinifier.cs,ExecuteCssMin,The following statement contains a magic number: while (_theA != Eof)              {                  switch (_theA)                  {                      case ' ':                          {                              switch (_theB)                              {                                  case ' ':        //body.Replace("  "' String.Empty);                                  case '{':        //body = body.Replace(" {"' "{");                                  case ':':        //body = body.Replace(" {"' "{");                                  case '\n':       //body = body.Replace(" \n"' "\n");                                  case '\r':       //body = body.Replace(" \r"' "\r");                                  case '\t':       //body = body.Replace(" \t"' "\t");                                      Action(2);                                      break;                                  default:                                      Action(1);                                      break;                              }                              break;                          }                      case '\t':              //body = body.Replace("\t"' "");                      case '\r':              //body = body.Replace("\r"' "");                          Action(2);                          break;                      case '\n':              //body = body.Replace("\n"' "");                          if (char.IsWhiteSpace((char)_theB))                          {                              //skip over whitespace                              Action(3);                          }                          else                          {                              //convert the line break to a space except when in the beginning                              //TODO: this isn't the best place to put this logic since all puts are done                              // in the action' but i don't see any other way to do this'                              //we could set theA = ' ' and call action(1) ?                              if (_sb.Length > 0) Put(' ');                              Action(2);                          }                          break;                      case '}':                      case '{':                      case ':':                      case ''':                      case ';':                          //skip over whitespace                          Action(char.IsWhiteSpace((char)_theB) ? 3 : 1);                          break;                      default:                          Action(1);                          break;                  }              }
Magic Number,ClientDependency.Core.CompositeFiles,CssMinifier,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\CssMinifier.cs,ExecuteCssMin,The following statement contains a magic number: while (_theA != Eof)              {                  switch (_theA)                  {                      case ' ':                          {                              switch (_theB)                              {                                  case ' ':        //body.Replace("  "' String.Empty);                                  case '{':        //body = body.Replace(" {"' "{");                                  case ':':        //body = body.Replace(" {"' "{");                                  case '\n':       //body = body.Replace(" \n"' "\n");                                  case '\r':       //body = body.Replace(" \r"' "\r");                                  case '\t':       //body = body.Replace(" \t"' "\t");                                      Action(2);                                      break;                                  default:                                      Action(1);                                      break;                              }                              break;                          }                      case '\t':              //body = body.Replace("\t"' "");                      case '\r':              //body = body.Replace("\r"' "");                          Action(2);                          break;                      case '\n':              //body = body.Replace("\n"' "");                          if (char.IsWhiteSpace((char)_theB))                          {                              //skip over whitespace                              Action(3);                          }                          else                          {                              //convert the line break to a space except when in the beginning                              //TODO: this isn't the best place to put this logic since all puts are done                              // in the action' but i don't see any other way to do this'                              //we could set theA = ' ' and call action(1) ?                              if (_sb.Length > 0) Put(' ');                              Action(2);                          }                          break;                      case '}':                      case '{':                      case ':':                      case ''':                      case ';':                          //skip over whitespace                          Action(char.IsWhiteSpace((char)_theB) ? 3 : 1);                          break;                      default:                          Action(1);                          break;                  }              }
Magic Number,ClientDependency.Core.CompositeFiles,CssMinifier,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\CssMinifier.cs,ExecuteCssMin,The following statement contains a magic number: while (_theA != Eof)              {                  switch (_theA)                  {                      case ' ':                          {                              switch (_theB)                              {                                  case ' ':        //body.Replace("  "' String.Empty);                                  case '{':        //body = body.Replace(" {"' "{");                                  case ':':        //body = body.Replace(" {"' "{");                                  case '\n':       //body = body.Replace(" \n"' "\n");                                  case '\r':       //body = body.Replace(" \r"' "\r");                                  case '\t':       //body = body.Replace(" \t"' "\t");                                      Action(2);                                      break;                                  default:                                      Action(1);                                      break;                              }                              break;                          }                      case '\t':              //body = body.Replace("\t"' "");                      case '\r':              //body = body.Replace("\r"' "");                          Action(2);                          break;                      case '\n':              //body = body.Replace("\n"' "");                          if (char.IsWhiteSpace((char)_theB))                          {                              //skip over whitespace                              Action(3);                          }                          else                          {                              //convert the line break to a space except when in the beginning                              //TODO: this isn't the best place to put this logic since all puts are done                              // in the action' but i don't see any other way to do this'                              //we could set theA = ' ' and call action(1) ?                              if (_sb.Length > 0) Put(' ');                              Action(2);                          }                          break;                      case '}':                      case '{':                      case ':':                      case ''':                      case ';':                          //skip over whitespace                          Action(char.IsWhiteSpace((char)_theB) ? 3 : 1);                          break;                      default:                          Action(1);                          break;                  }              }
Magic Number,ClientDependency.Core.CompositeFiles,CssMinifier,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\CssMinifier.cs,ExecuteCssMin,The following statement contains a magic number: while (_theA != Eof)              {                  switch (_theA)                  {                      case ' ':                          {                              switch (_theB)                              {                                  case ' ':        //body.Replace("  "' String.Empty);                                  case '{':        //body = body.Replace(" {"' "{");                                  case ':':        //body = body.Replace(" {"' "{");                                  case '\n':       //body = body.Replace(" \n"' "\n");                                  case '\r':       //body = body.Replace(" \r"' "\r");                                  case '\t':       //body = body.Replace(" \t"' "\t");                                      Action(2);                                      break;                                  default:                                      Action(1);                                      break;                              }                              break;                          }                      case '\t':              //body = body.Replace("\t"' "");                      case '\r':              //body = body.Replace("\r"' "");                          Action(2);                          break;                      case '\n':              //body = body.Replace("\n"' "");                          if (char.IsWhiteSpace((char)_theB))                          {                              //skip over whitespace                              Action(3);                          }                          else                          {                              //convert the line break to a space except when in the beginning                              //TODO: this isn't the best place to put this logic since all puts are done                              // in the action' but i don't see any other way to do this'                              //we could set theA = ' ' and call action(1) ?                              if (_sb.Length > 0) Put(' ');                              Action(2);                          }                          break;                      case '}':                      case '{':                      case ':':                      case ''':                      case ';':                          //skip over whitespace                          Action(char.IsWhiteSpace((char)_theB) ? 3 : 1);                          break;                      default:                          Action(1);                          break;                  }              }
Magic Number,ClientDependency.Core.CompositeFiles,CssMinifier,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\CssMinifier.cs,ExecuteCssMin,The following statement contains a magic number: while (_theA != Eof)              {                  switch (_theA)                  {                      case ' ':                          {                              switch (_theB)                              {                                  case ' ':        //body.Replace("  "' String.Empty);                                  case '{':        //body = body.Replace(" {"' "{");                                  case ':':        //body = body.Replace(" {"' "{");                                  case '\n':       //body = body.Replace(" \n"' "\n");                                  case '\r':       //body = body.Replace(" \r"' "\r");                                  case '\t':       //body = body.Replace(" \t"' "\t");                                      Action(2);                                      break;                                  default:                                      Action(1);                                      break;                              }                              break;                          }                      case '\t':              //body = body.Replace("\t"' "");                      case '\r':              //body = body.Replace("\r"' "");                          Action(2);                          break;                      case '\n':              //body = body.Replace("\n"' "");                          if (char.IsWhiteSpace((char)_theB))                          {                              //skip over whitespace                              Action(3);                          }                          else                          {                              //convert the line break to a space except when in the beginning                              //TODO: this isn't the best place to put this logic since all puts are done                              // in the action' but i don't see any other way to do this'                              //we could set theA = ' ' and call action(1) ?                              if (_sb.Length > 0) Put(' ');                              Action(2);                          }                          break;                      case '}':                      case '{':                      case ':':                      case ''':                      case ';':                          //skip over whitespace                          Action(char.IsWhiteSpace((char)_theB) ? 3 : 1);                          break;                      default:                          Action(1);                          break;                  }              }
Magic Number,ClientDependency.Core.CompositeFiles,CssMinifier,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\CssMinifier.cs,Action,The following statement contains a magic number: if (d <= 2)              {                  _theA = _theB;                  if (_theA == '\'' || _theA == '"')                  {                      for (;;)                      {                          Put(_theA);                          _theA = Get();                          if (_theA == _theB)                          {                              break;                          }                          if (_theA <= '\n')                          {                              throw new FormatException(string.Format("Error: unterminated string literal: {0}\n"' _theA));                          }                          if (_theA == '\\')                          {                              Put(_theA);                              _theA = Get();                          }                      }                  }              }
Magic Number,ClientDependency.Core.CompositeFiles,CssMinifier,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\CssMinifier.cs,Action,The following statement contains a magic number: if (d <= 3)              {                  _theB = Next();                  if (_theB == '/' && (_theA == '(' || _theA == ''' || _theA == '=' ||                                      _theA == '[' || _theA == '!' || _theA == ':' ||                                      _theA == '&' || _theA == '|' || _theA == '?' ||                                      _theA == '{' || _theA == '}' || _theA == ';' ||                                      _theA == '\n'))                  {                      Put(_theA);                      Put(_theB);                      for (;;)                      {                          _theA = Get();                          if (_theA == '/')                          {                              break;                          }                          else if (_theA == '\\')                          {                              Put(_theA);                              _theA = Get();                          }                          else if (_theA <= '\n')                          {                              throw new FormatException(string.Format("Error: unterminated Regular Expression literal : {0}.\n"' _theA));                          }                          Put(_theA);                      }                      _theB = Next();                  }              }
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\JSMin.cs,ExecuteJsMin,The following statement contains a magic number: Action(3);
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\JSMin.cs,ExecuteJsMin,The following statement contains a magic number: while (_theA != Eof)             {                 switch (_theA)                 {                     case ' ':                         Action(IsAlphanum(_theB) ? 1 : 2);                         break;                     case '\n':                     case '\u2028':                     case '\u2029':                          switch (_theB)                         {                             case '{':                             case '[':                             case '(':                             case '+':                             case '-':                             case '!':                             case '~':                                 if (!_start)                                 {                                     //this is the first write' we don't want to write a new line to begin'                                     // read next                                     Action(2);                                     break;                                 }                                 //Maintain the line break                                 Action(1);                                 break;                             case ' ':                                  Action(3);                                 break;                              default:                                 if (!_start)                                 {                                     //this is the first write' we don't want to write a new line to begin'                                     // read next                                     Action(2);                                     break;                                 }                                 Action(IsAlphanum(_theB) ? 1 : 2);                                 break;                         }                         break;                     default:                         switch (_theB)                         {                              case ' ':                                 Action(IsAlphanum(_theA) ? 1 : 3);                                 break;                             case '\n':                             case '\u2028':                             case '\u2029':                                 switch (_theA)                                 {                                     case '}':                                     case ']':                                     case ')':                                     case '+':                                     case '-':                                     case '"':                                     case '\'':                                     case '`':                                         Action(1);                                         break;                                     default:                                         Action(IsAlphanum(_theA) ? 1 : 3);                                         break;                                 }                                 break;                             default:                                 Action(1);                                 break;                         }                         break;                 }             }
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\JSMin.cs,ExecuteJsMin,The following statement contains a magic number: while (_theA != Eof)             {                 switch (_theA)                 {                     case ' ':                         Action(IsAlphanum(_theB) ? 1 : 2);                         break;                     case '\n':                     case '\u2028':                     case '\u2029':                          switch (_theB)                         {                             case '{':                             case '[':                             case '(':                             case '+':                             case '-':                             case '!':                             case '~':                                 if (!_start)                                 {                                     //this is the first write' we don't want to write a new line to begin'                                     // read next                                     Action(2);                                     break;                                 }                                 //Maintain the line break                                 Action(1);                                 break;                             case ' ':                                  Action(3);                                 break;                              default:                                 if (!_start)                                 {                                     //this is the first write' we don't want to write a new line to begin'                                     // read next                                     Action(2);                                     break;                                 }                                 Action(IsAlphanum(_theB) ? 1 : 2);                                 break;                         }                         break;                     default:                         switch (_theB)                         {                              case ' ':                                 Action(IsAlphanum(_theA) ? 1 : 3);                                 break;                             case '\n':                             case '\u2028':                             case '\u2029':                                 switch (_theA)                                 {                                     case '}':                                     case ']':                                     case ')':                                     case '+':                                     case '-':                                     case '"':                                     case '\'':                                     case '`':                                         Action(1);                                         break;                                     default:                                         Action(IsAlphanum(_theA) ? 1 : 3);                                         break;                                 }                                 break;                             default:                                 Action(1);                                 break;                         }                         break;                 }             }
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\JSMin.cs,ExecuteJsMin,The following statement contains a magic number: while (_theA != Eof)             {                 switch (_theA)                 {                     case ' ':                         Action(IsAlphanum(_theB) ? 1 : 2);                         break;                     case '\n':                     case '\u2028':                     case '\u2029':                          switch (_theB)                         {                             case '{':                             case '[':                             case '(':                             case '+':                             case '-':                             case '!':                             case '~':                                 if (!_start)                                 {                                     //this is the first write' we don't want to write a new line to begin'                                     // read next                                     Action(2);                                     break;                                 }                                 //Maintain the line break                                 Action(1);                                 break;                             case ' ':                                  Action(3);                                 break;                              default:                                 if (!_start)                                 {                                     //this is the first write' we don't want to write a new line to begin'                                     // read next                                     Action(2);                                     break;                                 }                                 Action(IsAlphanum(_theB) ? 1 : 2);                                 break;                         }                         break;                     default:                         switch (_theB)                         {                              case ' ':                                 Action(IsAlphanum(_theA) ? 1 : 3);                                 break;                             case '\n':                             case '\u2028':                             case '\u2029':                                 switch (_theA)                                 {                                     case '}':                                     case ']':                                     case ')':                                     case '+':                                     case '-':                                     case '"':                                     case '\'':                                     case '`':                                         Action(1);                                         break;                                     default:                                         Action(IsAlphanum(_theA) ? 1 : 3);                                         break;                                 }                                 break;                             default:                                 Action(1);                                 break;                         }                         break;                 }             }
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\JSMin.cs,ExecuteJsMin,The following statement contains a magic number: while (_theA != Eof)             {                 switch (_theA)                 {                     case ' ':                         Action(IsAlphanum(_theB) ? 1 : 2);                         break;                     case '\n':                     case '\u2028':                     case '\u2029':                          switch (_theB)                         {                             case '{':                             case '[':                             case '(':                             case '+':                             case '-':                             case '!':                             case '~':                                 if (!_start)                                 {                                     //this is the first write' we don't want to write a new line to begin'                                     // read next                                     Action(2);                                     break;                                 }                                 //Maintain the line break                                 Action(1);                                 break;                             case ' ':                                  Action(3);                                 break;                              default:                                 if (!_start)                                 {                                     //this is the first write' we don't want to write a new line to begin'                                     // read next                                     Action(2);                                     break;                                 }                                 Action(IsAlphanum(_theB) ? 1 : 2);                                 break;                         }                         break;                     default:                         switch (_theB)                         {                              case ' ':                                 Action(IsAlphanum(_theA) ? 1 : 3);                                 break;                             case '\n':                             case '\u2028':                             case '\u2029':                                 switch (_theA)                                 {                                     case '}':                                     case ']':                                     case ')':                                     case '+':                                     case '-':                                     case '"':                                     case '\'':                                     case '`':                                         Action(1);                                         break;                                     default:                                         Action(IsAlphanum(_theA) ? 1 : 3);                                         break;                                 }                                 break;                             default:                                 Action(1);                                 break;                         }                         break;                 }             }
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\JSMin.cs,ExecuteJsMin,The following statement contains a magic number: while (_theA != Eof)             {                 switch (_theA)                 {                     case ' ':                         Action(IsAlphanum(_theB) ? 1 : 2);                         break;                     case '\n':                     case '\u2028':                     case '\u2029':                          switch (_theB)                         {                             case '{':                             case '[':                             case '(':                             case '+':                             case '-':                             case '!':                             case '~':                                 if (!_start)                                 {                                     //this is the first write' we don't want to write a new line to begin'                                     // read next                                     Action(2);                                     break;                                 }                                 //Maintain the line break                                 Action(1);                                 break;                             case ' ':                                  Action(3);                                 break;                              default:                                 if (!_start)                                 {                                     //this is the first write' we don't want to write a new line to begin'                                     // read next                                     Action(2);                                     break;                                 }                                 Action(IsAlphanum(_theB) ? 1 : 2);                                 break;                         }                         break;                     default:                         switch (_theB)                         {                              case ' ':                                 Action(IsAlphanum(_theA) ? 1 : 3);                                 break;                             case '\n':                             case '\u2028':                             case '\u2029':                                 switch (_theA)                                 {                                     case '}':                                     case ']':                                     case ')':                                     case '+':                                     case '-':                                     case '"':                                     case '\'':                                     case '`':                                         Action(1);                                         break;                                     default:                                         Action(IsAlphanum(_theA) ? 1 : 3);                                         break;                                 }                                 break;                             default:                                 Action(1);                                 break;                         }                         break;                 }             }
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\JSMin.cs,ExecuteJsMin,The following statement contains a magic number: while (_theA != Eof)             {                 switch (_theA)                 {                     case ' ':                         Action(IsAlphanum(_theB) ? 1 : 2);                         break;                     case '\n':                     case '\u2028':                     case '\u2029':                          switch (_theB)                         {                             case '{':                             case '[':                             case '(':                             case '+':                             case '-':                             case '!':                             case '~':                                 if (!_start)                                 {                                     //this is the first write' we don't want to write a new line to begin'                                     // read next                                     Action(2);                                     break;                                 }                                 //Maintain the line break                                 Action(1);                                 break;                             case ' ':                                  Action(3);                                 break;                              default:                                 if (!_start)                                 {                                     //this is the first write' we don't want to write a new line to begin'                                     // read next                                     Action(2);                                     break;                                 }                                 Action(IsAlphanum(_theB) ? 1 : 2);                                 break;                         }                         break;                     default:                         switch (_theB)                         {                              case ' ':                                 Action(IsAlphanum(_theA) ? 1 : 3);                                 break;                             case '\n':                             case '\u2028':                             case '\u2029':                                 switch (_theA)                                 {                                     case '}':                                     case ']':                                     case ')':                                     case '+':                                     case '-':                                     case '"':                                     case '\'':                                     case '`':                                         Action(1);                                         break;                                     default:                                         Action(IsAlphanum(_theA) ? 1 : 3);                                         break;                                 }                                 break;                             default:                                 Action(1);                                 break;                         }                         break;                 }             }
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\JSMin.cs,ExecuteJsMin,The following statement contains a magic number: while (_theA != Eof)             {                 switch (_theA)                 {                     case ' ':                         Action(IsAlphanum(_theB) ? 1 : 2);                         break;                     case '\n':                     case '\u2028':                     case '\u2029':                          switch (_theB)                         {                             case '{':                             case '[':                             case '(':                             case '+':                             case '-':                             case '!':                             case '~':                                 if (!_start)                                 {                                     //this is the first write' we don't want to write a new line to begin'                                     // read next                                     Action(2);                                     break;                                 }                                 //Maintain the line break                                 Action(1);                                 break;                             case ' ':                                  Action(3);                                 break;                              default:                                 if (!_start)                                 {                                     //this is the first write' we don't want to write a new line to begin'                                     // read next                                     Action(2);                                     break;                                 }                                 Action(IsAlphanum(_theB) ? 1 : 2);                                 break;                         }                         break;                     default:                         switch (_theB)                         {                              case ' ':                                 Action(IsAlphanum(_theA) ? 1 : 3);                                 break;                             case '\n':                             case '\u2028':                             case '\u2029':                                 switch (_theA)                                 {                                     case '}':                                     case ']':                                     case ')':                                     case '+':                                     case '-':                                     case '"':                                     case '\'':                                     case '`':                                         Action(1);                                         break;                                     default:                                         Action(IsAlphanum(_theA) ? 1 : 3);                                         break;                                 }                                 break;                             default:                                 Action(1);                                 break;                         }                         break;                 }             }
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\JSMin.cs,Action,The following statement contains a magic number: switch (d)             {                 case 1:                     Put(_theA);                     _start = true;                      //process unary operator                     HandleUnaryOperator();                      goto case 2;                 case 2:                     _theA = _theB;                      //process string literals or end of statement and track return statement                     if (!HandleStringLiteral())                         HandleEndOfStatement();                        goto case 3;                 case 3:                     _theB = NextCharExcludingComments();                      //track return statement                     TrackReturnStatement();                      //Check for a regex literal and process it if it is found                     HandleRegexLiteral();                      goto default;                 default:                     break;             }
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\JSMin.cs,Action,The following statement contains a magic number: switch (d)             {                 case 1:                     Put(_theA);                     _start = true;                      //process unary operator                     HandleUnaryOperator();                      goto case 2;                 case 2:                     _theA = _theB;                      //process string literals or end of statement and track return statement                     if (!HandleStringLiteral())                         HandleEndOfStatement();                        goto case 3;                 case 3:                     _theB = NextCharExcludingComments();                      //track return statement                     TrackReturnStatement();                      //Check for a regex literal and process it if it is found                     HandleRegexLiteral();                      goto default;                 default:                     break;             }
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\JSMin.cs,Action,The following statement contains a magic number: switch (d)             {                 case 1:                     Put(_theA);                     _start = true;                      //process unary operator                     HandleUnaryOperator();                      goto case 2;                 case 2:                     _theA = _theB;                      //process string literals or end of statement and track return statement                     if (!HandleStringLiteral())                         HandleEndOfStatement();                        goto case 3;                 case 3:                     _theB = NextCharExcludingComments();                      //track return statement                     TrackReturnStatement();                      //Check for a regex literal and process it if it is found                     HandleRegexLiteral();                      goto default;                 default:                     break;             }
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\JSMin.cs,Action,The following statement contains a magic number: switch (d)             {                 case 1:                     Put(_theA);                     _start = true;                      //process unary operator                     HandleUnaryOperator();                      goto case 2;                 case 2:                     _theA = _theB;                      //process string literals or end of statement and track return statement                     if (!HandleStringLiteral())                         HandleEndOfStatement();                        goto case 3;                 case 3:                     _theB = NextCharExcludingComments();                      //track return statement                     TrackReturnStatement();                      //Check for a regex literal and process it if it is found                     HandleRegexLiteral();                      goto default;                 default:                     break;             }
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\JSMin.cs,HandleRegexLiteral,The following statement contains a magic number: if (toMatch.IndexOf((char)_theA) < 0 && (char)_theY != '\n' && _retStatement != 5)                 return false;
Magic Number,ClientDependency.Core.CompositeFiles,JSMin,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\JSMin.cs,IsAlphanum,The following statement contains a magic number: return ((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9') ||                     (c >= 'A' && c <= 'Z') || c == '_' || c == '$' || c == '\\' ||                     c > 126);
Magic Number,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\CompositeDependencyHandler.cs,ProcessRequest,The following statement contains a magic number: if (string.IsNullOrEmpty(context.Request.PathInfo))              {                  var decodedUrl = HttpUtility.HtmlDecode(context.Request.Url.OriginalString);                  var query = decodedUrl.Split(new char[] { '?' });                  if (query.Length < 2)                  {                      throw new ArgumentException("No query string found in request");                  }                  var queryStrings = HttpUtility.ParseQueryString(query[1]);                    // querystring format                  fileKey = queryStrings["s"];                  var clientDepdendencyVersion = queryStrings["cdv"].TrimEnd('/');                  if (!string.IsNullOrEmpty(clientDepdendencyVersion) && !Int32.TryParse(clientDepdendencyVersion' out version))                      throw new ArgumentException("Could not parse the version in the request");                  try                  {                      type = (ClientDependencyType)Enum.Parse(typeof(ClientDependencyType)' queryStrings["t"]' true);                  }                  catch                  {                      throw new ArgumentException("Could not parse the type set in the request");                  }              }              else              {                    //get path to parse                  var path = context.Request.PathInfo.TrimStart('/');                  var pathFormat = ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.PathBasedUrlFormat;                  //parse using the parser                  if (!PathBasedUrlFormatter.Parse(pathFormat' path' out fileKey' out type' out version))                  {                      throw new FormatException("Could not parse the URL path: " + path + " with the format specified: " + pathFormat);                  }              }
Magic Number,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\CompositeDependencyHandler.cs,ProcessRequest,The following statement contains a magic number: var page = new OutputCachedPage(new OutputCacheParameters              {                  Duration = Convert.ToInt32(TimeSpan.FromDays(10).TotalSeconds)'                  Enabled = true'                  VaryByParam = "t;s;cdv"'                  VaryByContentEncoding = "gzip;deflate"'                  VaryByHeader = "Accept-Encoding"'                  Location = OutputCacheLocation.Any              });
Magic Number,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\CompositeDependencyHandler.cs,ProcessRequest,The following statement contains a magic number: for (int i = 0; i < 5; i++)              {                  outputBytes = ProcessRequestInternal(contextBase' fileKey' type' version' outputBytes' page);                  if (outputBytes != null && outputBytes.Length > 0)                      break;                    ClientDependencySettings.Instance.Logger.Error(string.Format("No bytes were returned' this is attempt {0}. Fileset: {1}' Type: {2}' Version: {3}"' i' fileKey' type' version)' null);              }
Magic Number,ClientDependency.Core.CompositeFiles,CompositeDependencyHandler,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\CompositeDependencyHandler.cs,SetCaching,The following statement contains a magic number: context.SetClientCachingResponse(                  //the e-tag to use                  (fileset + compressionType.ToString()).GenerateHash()'                  //10 days                  10'                  //vary-by params                  new[] { "t"' "s"' "cdv" });
Magic Number,ClientDependency.Core.CompositeFiles.Providers,BaseCompositeFileProcessingProvider,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\Providers\BaseCompositeFileProcessingProvider.cs,GetCompositeFileUrls,The following statement contains a magic number: while (remaining.Any())              {                  var current = remaining.Peek();                    //update the base64 output to get the length                  base64Builder.Append(current.FilePath.EncodeTo64());                    //test if the current base64 string exceeds the max length' if so we need to split                  if ((base64Builder.Length                       + compositeFileHandlerPath.Length                       + stringType.Length                       + version.ToString(CultureInfo.InvariantCulture).Length                      //this number deals with the ampersands' etc...                       + 10)                      >= (maxLength))                  {                      //we need to do a check here' this is the first one and it's already exceeded the max length we cannot continue                      if (currBuilder.Length == 0)                      {                          throw new InvalidOperationException("The path for the single dependency: '" + current.FilePath + "' exceeds the max length (" + maxLength + ")' either reduce the single dependency's path length or increase the CompositeDependencyHandler.MaxHandlerUrlLength value");                      }                        //flush the current output to the array                      files.Add(currBuilder.ToString());                      //create some new output                      currBuilder = new StringBuilder();                      base64Builder = new StringBuilder();                      builderCount++;                  }                  else                  {                      //update the normal builder                      currBuilder.Append(current.FilePath + ";");                      //remove from the queue                      remaining.Dequeue();                  }              }
Magic Number,ClientDependency.Core.CompositeFiles.Providers,PathBasedUrlFormatter,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\Providers\PathBasedUrlFormatter.cs,CreatePath,The following statement contains a magic number: while (fileKey.Length > pos)              {                  if (dependencyId.Length > 0)                  {                      dependencyId.Append('/');                  }                  var len = Math.Min(fileKey.Length - pos' 240);                  dependencyId.Append(fileKey.Substring(pos' len));                  pos += 240;              }
Magic Number,ClientDependency.Core.CompositeFiles.Providers,PathBasedUrlFormatter,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\Providers\PathBasedUrlFormatter.cs,CreatePath,The following statement contains a magic number: while (fileKey.Length > pos)              {                  if (dependencyId.Length > 0)                  {                      dependencyId.Append('/');                  }                  var len = Math.Min(fileKey.Length - pos' 240);                  dependencyId.Append(fileKey.Substring(pos' len));                  pos += 240;              }
Magic Number,ClientDependency.Core.CompositeFiles.Providers,PathBasedUrlFormatter,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\Providers\PathBasedUrlFormatter.cs,Validate,The following statement contains a magic number: if (pathChars.Count(x => x == '{') > 3)              {                  throw new FormatException("The value specified for pathUrlFormat contains a '{' character outside of the token declaration which is invalid");              }
Magic Number,ClientDependency.Core.CompositeFiles.Providers,PathBasedUrlFormatter,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\Providers\PathBasedUrlFormatter.cs,Validate,The following statement contains a magic number: if (pathChars.Count(x => x == '}') > 3)              {                  throw new FormatException("The value specified for pathUrlFormat contains a '}' character outside of the token declaration which is invalid");              }
Magic Number,ClientDependency.Core.CompositeFiles.Providers,CompositeFileProcessingProvider,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\Providers\CompositeFileProcessingProvider.cs,CombineFiles,The following statement contains a magic number: var ms = new MemoryStream(5000);
Magic Number,ClientDependency.Core.Controls,HtmlInclude,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Controls\HtmlInclude.cs,GetIncludes,The following statement contains a magic number: foreach (Match match in Regex.Matches(innerHtml' tagPattern' RegexOptions.Compiled | RegexOptions.IgnoreCase | RegexOptions.CultureInvariant))              {                  var allAttributes = Regex.Matches(match.Value' MatchAllAttributes'                                                    RegexOptions.Compiled | RegexOptions.IgnoreCase |                                                    RegexOptions.CultureInvariant)                                           .Cast<Match>()                                           .ToArray();                    var type = allAttributes.FirstOrDefault(x =>                  {                      if (x.Groups.Count < 3) return false;                      return x.Groups[1].Value == "type";                  });                    var href = allAttributes.FirstOrDefault(x =>                  {                      if (x.Groups.Count < 3) return false;                      return x.Groups[1].Value == sourceAttribute;                  });                    if (type == null || href == null || type.Groups[2].Value != mime) continue;                    var attributes = allAttributes.Where(x =>                  {                      if (x.Groups.Count < 3) return false;                      return x.Groups[1].Value != sourceAttribute && x.Groups[1].Value != "type";                  }).ToDictionary(x => x.Groups[1].Value' x => x.Groups[2].Value);                    var file = new BasicFile(dependencyType)                      {                          FilePath = href.Groups[2].Value'                          Group = Group'                          Priority = Priority'                          ForceProvider = ForceProvider                      };                    foreach (var a in attributes)                  {                      file.HtmlAttributes.Add(a.Key' a.Value);                  }                    files.Add(file);              }
Magic Number,ClientDependency.Core.Controls,HtmlInclude,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Controls\HtmlInclude.cs,GetIncludes,The following statement contains a magic number: foreach (Match match in Regex.Matches(innerHtml' tagPattern' RegexOptions.Compiled | RegexOptions.IgnoreCase | RegexOptions.CultureInvariant))              {                  var allAttributes = Regex.Matches(match.Value' MatchAllAttributes'                                                    RegexOptions.Compiled | RegexOptions.IgnoreCase |                                                    RegexOptions.CultureInvariant)                                           .Cast<Match>()                                           .ToArray();                    var type = allAttributes.FirstOrDefault(x =>                  {                      if (x.Groups.Count < 3) return false;                      return x.Groups[1].Value == "type";                  });                    var href = allAttributes.FirstOrDefault(x =>                  {                      if (x.Groups.Count < 3) return false;                      return x.Groups[1].Value == sourceAttribute;                  });                    if (type == null || href == null || type.Groups[2].Value != mime) continue;                    var attributes = allAttributes.Where(x =>                  {                      if (x.Groups.Count < 3) return false;                      return x.Groups[1].Value != sourceAttribute && x.Groups[1].Value != "type";                  }).ToDictionary(x => x.Groups[1].Value' x => x.Groups[2].Value);                    var file = new BasicFile(dependencyType)                      {                          FilePath = href.Groups[2].Value'                          Group = Group'                          Priority = Priority'                          ForceProvider = ForceProvider                      };                    foreach (var a in attributes)                  {                      file.HtmlAttributes.Add(a.Key' a.Value);                  }                    files.Add(file);              }
Magic Number,ClientDependency.Core.Controls,HtmlInclude,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Controls\HtmlInclude.cs,GetIncludes,The following statement contains a magic number: foreach (Match match in Regex.Matches(innerHtml' tagPattern' RegexOptions.Compiled | RegexOptions.IgnoreCase | RegexOptions.CultureInvariant))              {                  var allAttributes = Regex.Matches(match.Value' MatchAllAttributes'                                                    RegexOptions.Compiled | RegexOptions.IgnoreCase |                                                    RegexOptions.CultureInvariant)                                           .Cast<Match>()                                           .ToArray();                    var type = allAttributes.FirstOrDefault(x =>                  {                      if (x.Groups.Count < 3) return false;                      return x.Groups[1].Value == "type";                  });                    var href = allAttributes.FirstOrDefault(x =>                  {                      if (x.Groups.Count < 3) return false;                      return x.Groups[1].Value == sourceAttribute;                  });                    if (type == null || href == null || type.Groups[2].Value != mime) continue;                    var attributes = allAttributes.Where(x =>                  {                      if (x.Groups.Count < 3) return false;                      return x.Groups[1].Value != sourceAttribute && x.Groups[1].Value != "type";                  }).ToDictionary(x => x.Groups[1].Value' x => x.Groups[2].Value);                    var file = new BasicFile(dependencyType)                      {                          FilePath = href.Groups[2].Value'                          Group = Group'                          Priority = Priority'                          ForceProvider = ForceProvider                      };                    foreach (var a in attributes)                  {                      file.HtmlAttributes.Add(a.Key' a.Value);                  }                    files.Add(file);              }
Magic Number,ClientDependency.Core.Controls,HtmlInclude,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Controls\HtmlInclude.cs,GetIncludes,The following statement contains a magic number: foreach (Match match in Regex.Matches(innerHtml' tagPattern' RegexOptions.Compiled | RegexOptions.IgnoreCase | RegexOptions.CultureInvariant))              {                  var allAttributes = Regex.Matches(match.Value' MatchAllAttributes'                                                    RegexOptions.Compiled | RegexOptions.IgnoreCase |                                                    RegexOptions.CultureInvariant)                                           .Cast<Match>()                                           .ToArray();                    var type = allAttributes.FirstOrDefault(x =>                  {                      if (x.Groups.Count < 3) return false;                      return x.Groups[1].Value == "type";                  });                    var href = allAttributes.FirstOrDefault(x =>                  {                      if (x.Groups.Count < 3) return false;                      return x.Groups[1].Value == sourceAttribute;                  });                    if (type == null || href == null || type.Groups[2].Value != mime) continue;                    var attributes = allAttributes.Where(x =>                  {                      if (x.Groups.Count < 3) return false;                      return x.Groups[1].Value != sourceAttribute && x.Groups[1].Value != "type";                  }).ToDictionary(x => x.Groups[1].Value' x => x.Groups[2].Value);                    var file = new BasicFile(dependencyType)                      {                          FilePath = href.Groups[2].Value'                          Group = Group'                          Priority = Priority'                          ForceProvider = ForceProvider                      };                    foreach (var a in attributes)                  {                      file.HtmlAttributes.Add(a.Key' a.Value);                  }                    files.Add(file);              }
Magic Number,ClientDependency.Core.Controls,HtmlInclude,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Controls\HtmlInclude.cs,GetIncludes,The following statement contains a magic number: foreach (Match match in Regex.Matches(innerHtml' tagPattern' RegexOptions.Compiled | RegexOptions.IgnoreCase | RegexOptions.CultureInvariant))              {                  var allAttributes = Regex.Matches(match.Value' MatchAllAttributes'                                                    RegexOptions.Compiled | RegexOptions.IgnoreCase |                                                    RegexOptions.CultureInvariant)                                           .Cast<Match>()                                           .ToArray();                    var type = allAttributes.FirstOrDefault(x =>                  {                      if (x.Groups.Count < 3) return false;                      return x.Groups[1].Value == "type";                  });                    var href = allAttributes.FirstOrDefault(x =>                  {                      if (x.Groups.Count < 3) return false;                      return x.Groups[1].Value == sourceAttribute;                  });                    if (type == null || href == null || type.Groups[2].Value != mime) continue;                    var attributes = allAttributes.Where(x =>                  {                      if (x.Groups.Count < 3) return false;                      return x.Groups[1].Value != sourceAttribute && x.Groups[1].Value != "type";                  }).ToDictionary(x => x.Groups[1].Value' x => x.Groups[2].Value);                    var file = new BasicFile(dependencyType)                      {                          FilePath = href.Groups[2].Value'                          Group = Group'                          Priority = Priority'                          ForceProvider = ForceProvider                      };                    foreach (var a in attributes)                  {                      file.HtmlAttributes.Add(a.Key' a.Value);                  }                    files.Add(file);              }
Magic Number,ClientDependency.Core.Controls,HtmlInclude,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Controls\HtmlInclude.cs,GetIncludes,The following statement contains a magic number: foreach (Match match in Regex.Matches(innerHtml' tagPattern' RegexOptions.Compiled | RegexOptions.IgnoreCase | RegexOptions.CultureInvariant))              {                  var allAttributes = Regex.Matches(match.Value' MatchAllAttributes'                                                    RegexOptions.Compiled | RegexOptions.IgnoreCase |                                                    RegexOptions.CultureInvariant)                                           .Cast<Match>()                                           .ToArray();                    var type = allAttributes.FirstOrDefault(x =>                  {                      if (x.Groups.Count < 3) return false;                      return x.Groups[1].Value == "type";                  });                    var href = allAttributes.FirstOrDefault(x =>                  {                      if (x.Groups.Count < 3) return false;                      return x.Groups[1].Value == sourceAttribute;                  });                    if (type == null || href == null || type.Groups[2].Value != mime) continue;                    var attributes = allAttributes.Where(x =>                  {                      if (x.Groups.Count < 3) return false;                      return x.Groups[1].Value != sourceAttribute && x.Groups[1].Value != "type";                  }).ToDictionary(x => x.Groups[1].Value' x => x.Groups[2].Value);                    var file = new BasicFile(dependencyType)                      {                          FilePath = href.Groups[2].Value'                          Group = Group'                          Priority = Priority'                          ForceProvider = ForceProvider                      };                    foreach (var a in attributes)                  {                      file.HtmlAttributes.Add(a.Key' a.Value);                  }                    files.Add(file);              }
Magic Number,ClientDependency.Core.Controls,ClientDependencyInclude,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Controls\ClientDependencyInclude.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (FilePath != null ? FilePath.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (int)DependencyType;                  hashCode = (hashCode * 397) ^ Priority;                  hashCode = (hashCode * 397) ^ Group;                  hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode() : 0);                  return hashCode;              }
Magic Number,ClientDependency.Core.Controls,ClientDependencyInclude,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Controls\ClientDependencyInclude.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (FilePath != null ? FilePath.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (int)DependencyType;                  hashCode = (hashCode * 397) ^ Priority;                  hashCode = (hashCode * 397) ^ Group;                  hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode() : 0);                  return hashCode;              }
Magic Number,ClientDependency.Core.Controls,ClientDependencyInclude,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Controls\ClientDependencyInclude.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (FilePath != null ? FilePath.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (int)DependencyType;                  hashCode = (hashCode * 397) ^ Priority;                  hashCode = (hashCode * 397) ^ Group;                  hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode() : 0);                  return hashCode;              }
Magic Number,ClientDependency.Core.Controls,ClientDependencyInclude,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Controls\ClientDependencyInclude.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (FilePath != null ? FilePath.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (int)DependencyType;                  hashCode = (hashCode * 397) ^ Priority;                  hashCode = (hashCode * 397) ^ Group;                  hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode() : 0);                  return hashCode;              }
Magic Number,ClientDependency.Core.Controls,ClientDependencyInclude,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Controls\ClientDependencyInclude.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (FilePath != null ? FilePath.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (int)DependencyType;                  hashCode = (hashCode * 397) ^ Priority;                  hashCode = (hashCode * 397) ^ Group;                  hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode() : 0);                  return hashCode;              }
Magic Number,ClientDependency.Core.Controls,ClientDependencyInclude,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Controls\ClientDependencyInclude.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hashCode = (FilePath != null ? FilePath.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (int)DependencyType;                  hashCode = (hashCode * 397) ^ Priority;                  hashCode = (hashCode * 397) ^ Group;                  hashCode = (hashCode * 397) ^ (PathNameAlias != null ? PathNameAlias.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (ForceProvider != null ? ForceProvider.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (HtmlAttributes != null ? HtmlAttributes.GetHashCode() : 0);                  return hashCode;              }
Magic Number,ClientDependency.Core.Controls,ClientDependencyPath,C:\repos\Shandem_ClientDependency\ClientDependency.Core\Controls\ClientDependencyPath.cs,GetHashCode,The following statement contains a magic number: unchecked  	        {  	            return ((_name != null ? _name.GetHashCode() : 0)*397) ^ (_path != null ? _path.GetHashCode() : 0);  	        }
Magic Number,ClientDependency.Core.FileRegistration.Providers,BaseFileRegistrationProvider,C:\repos\Shandem_ClientDependency\ClientDependency.Core\FileRegistration\Providers\BaseFileRegistrationProvider.cs,AppendVersion,The following statement contains a magic number: if ((http.IsDebuggingEnabled || !EnableCompositeFiles)                  || ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.UrlType == CompositeUrlType.Base64QueryStrings)              {                  //don't append if it is already there!                  if (url.Contains("cdv=" + ClientDependencySettings.Instance.Version))                      return url;                    //move hash to the end of the file name if present. Eg: /s/myscript.js?cdv=3#myhash                  var hash = url.Contains("#") ? "#" + url.Split(new[] { '#' }' 2)[1] : "";                  if (!String.IsNullOrEmpty(hash))                      url = url.Split(new[] { '#' }' 2)[0];                    //ensure there's not duplicated query string syntax                  url += url.Contains('?') ? "&" : "?";                  //append a version                  url += "cdv=" + ClientDependencySettings.Instance.Version + hash;              }              else              {                  if (url.EndsWith(ClientDependencySettings.Instance.Version.ToString()))                      return url;                    //the URL should end with a '0'                  url = url.TrimEnd('0') + ClientDependencySettings.Instance.Version;              }
Magic Number,ClientDependency.Core.FileRegistration.Providers,BaseFileRegistrationProvider,C:\repos\Shandem_ClientDependency\ClientDependency.Core\FileRegistration\Providers\BaseFileRegistrationProvider.cs,AppendVersion,The following statement contains a magic number: if ((http.IsDebuggingEnabled || !EnableCompositeFiles)                  || ClientDependencySettings.Instance.DefaultCompositeFileProcessingProvider.UrlType == CompositeUrlType.Base64QueryStrings)              {                  //don't append if it is already there!                  if (url.Contains("cdv=" + ClientDependencySettings.Instance.Version))                      return url;                    //move hash to the end of the file name if present. Eg: /s/myscript.js?cdv=3#myhash                  var hash = url.Contains("#") ? "#" + url.Split(new[] { '#' }' 2)[1] : "";                  if (!String.IsNullOrEmpty(hash))                      url = url.Split(new[] { '#' }' 2)[0];                    //ensure there's not duplicated query string syntax                  url += url.Contains('?') ? "&" : "?";                  //append a version                  url += "cdv=" + ClientDependencySettings.Instance.Version + hash;              }              else              {                  if (url.EndsWith(ClientDependencySettings.Instance.Version.ToString()))                      return url;                    //the URL should end with a '0'                  url = url.TrimEnd('0') + ClientDependencySettings.Instance.Version;              }
Missing Default,ClientDependency.Core.CompositeFiles,CssMinifier,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\CssMinifier.cs,Next,The following switch statement is missing a default case: switch (Get())                                  {                                      case '*':                                          {                                              if (Peek() == '/')                                              {                                                  Get();                                                  return ' ';                                              }                                              break;                                          }                                      case Eof:                                          {                                              throw new FormatException("Error: Unterminated comment.\n");                                          }                                  }
Missing Default,ClientDependency.Core.CompositeFiles,JSMin,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\JSMin.cs,HandleStringTemplateBlock,The following switch statement is missing a default case: switch (_theA)                 {                     case '}':                         //write the end bracket and read                         Put(_theA);                         _theA = Get();                         //exit!                         return;                     case '$':                         //check for inner string templates (i.e. ${ } )                         if (Peek() == '{')                         {                             //recurse                             HandleStringTemplateBlock();                         }                         break;                     case Eof:                         throw new Exception($"Error: JSMIN unterminated string template block: {_theA}\n");                 }
Missing Default,ClientDependency.Core.CompositeFiles,JSMin,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\JSMin.cs,HandleRegexLiteral,The following switch statement is missing a default case: switch (Peek())                     {                         case 'i':                         case 'g':                             //regex modifiers' do we care?                             break;                         case ' ':                             //skip the space                             Put(_theA);                             Get();                             _theA = Get();                             break;                         case '/':                         case '*':                             throw new Exception($"Error: JSMIN Unterminated set in Regular Expression literal: {_theA}\n");                     }
Missing Default,ClientDependency.Core.CompositeFiles,JSMin,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\JSMin.cs,NextCharExcludingComments,The following switch statement is missing a default case: switch (Peek())                 {                     case '/':                         //handle single line comments                         for (;;)                         {                             c = Get();                             if (IsLineSeparator(c))                             {                                 break;                             }                         }                         break;                     case '*':                         //handle multi-line comments                         Get(); //move to *                          for (;;)                         {                             var exit = false;                             c = Get(); //read next                             switch (c)                             {                                 case '*':                                     var currPeek = Peek();                                     if (currPeek == '/')                                     {                                         //we're at the end of the comment                                          Get(); //move to /                                          //In one very peculiar circumstance' if the JS value is like:                                         // val(1 /* Calendar */.toString());                                         // if we strip the comment out' JS will produce an error because                                         // 1.toString() is not valid' however 1..toString() is valid and                                          // similarly keeping the comment is valid. So we can check if the next value                                         // is a '.' and if the current value is numeric and perform this operation.                                         // The reason why .. works is because the JS parser cannot do 1.toString() because it                                          // sees the '.' as a decimal                                          if (char.IsDigit((char)_theY))                                         {                                             currPeek = Peek();                                             if (currPeek == '.')                                             {                                                 //we actually want to write another '.'                                                 return '.';                                             }                                         }                                          c = Get(); //move past the comment                                         exit = true;                                     }                                     break;                                 case Eof:                                     throw new Exception("Error: JSMIN Unterminated comment.\n");                             }                              if (exit)                                 break;                         }                         break;                 }
Missing Default,ClientDependency.Core.CompositeFiles,JSMin,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\JSMin.cs,NextCharExcludingComments,The following switch statement is missing a default case: switch (c)                             {                                 case '*':                                     var currPeek = Peek();                                     if (currPeek == '/')                                     {                                         //we're at the end of the comment                                          Get(); //move to /                                          //In one very peculiar circumstance' if the JS value is like:                                         // val(1 /* Calendar */.toString());                                         // if we strip the comment out' JS will produce an error because                                         // 1.toString() is not valid' however 1..toString() is valid and                                          // similarly keeping the comment is valid. So we can check if the next value                                         // is a '.' and if the current value is numeric and perform this operation.                                         // The reason why .. works is because the JS parser cannot do 1.toString() because it                                          // sees the '.' as a decimal                                          if (char.IsDigit((char)_theY))                                         {                                             currPeek = Peek();                                             if (currPeek == '.')                                             {                                                 //we actually want to write another '.'                                                 return '.';                                             }                                         }                                          c = Get(); //move past the comment                                         exit = true;                                     }                                     break;                                 case Eof:                                     throw new Exception("Error: JSMIN Unterminated comment.\n");                             }
Missing Default,ClientDependency.Core.CompositeFiles.Providers,PathBasedUrlFormatter,C:\repos\Shandem_ClientDependency\ClientDependency.Core\CompositeFiles\Providers\PathBasedUrlFormatter.cs,CreatePath,The following switch statement is missing a default case: switch (type)              {                  case ClientDependencyType.Css:                      pathUrl = pathUrl.Replace("{type}"' "css");                      break;                  case ClientDependencyType.Javascript:                      pathUrl = pathUrl.Replace("{type}"' "js");                      break;              }
