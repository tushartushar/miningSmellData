Implementation smell,Namespace,Class,File,Method,Description
Complex Method,XLR8.CGLib,FastBase,C:\repos\ajaxx_XLR8.CGLib\XLR8.CGLib\FastBase.cs,EmitLoadInt,Cyclomatic complexity of the method is 30
Complex Method,XLR8.CGLib,FastEmitter,C:\repos\ajaxx_XLR8.CGLib\XLR8.CGLib\FastEmitter.cs,EmitLoadArg,Cyclomatic complexity of the method is 15
Long Statement,XLR8.CGLib,CapsuleEmitter,C:\repos\ajaxx_XLR8.CGLib\XLR8.CGLib\CapsuleEmitter.cs,CreateCapsule,The length of the statement  "	TypeBuilder typeBuilder = moduleBuilder.DefineType (name' TypeAttributes.Public | TypeAttributes.Class | TypeAttributes.AutoClass | TypeAttributes.AnsiClass | TypeAttributes.BeforeFieldInit | TypeAttributes.AutoLayout' typeof(object)); " is 235.
Long Statement,XLR8.CGLib,FastClass,C:\repos\ajaxx_XLR8.CGLib\XLR8.CGLib\FastClass.cs,NewInstance,The length of the statement  "		var ctor = _targetType.GetConstructors (bindingFlags).FirstOrDefault (constructorInfo => constructorInfo.GetParameters ().Length == 0); " is 135.
Long Statement,XLR8.CGLib,FastField,C:\repos\ajaxx_XLR8.CGLib\XLR8.CGLib\FastField.cs,CreateDynamicGetMethod,The length of the statement  "	dynamicGetMethod = new DynamicMethod (dynamicMethodName' MethodAttributes.Public | MethodAttributes.Static' CallingConventions.Standard' typeof(Object)' new Type[] { " is 165.
Long Statement,XLR8.CGLib,FastField,C:\repos\ajaxx_XLR8.CGLib\XLR8.CGLib\FastField.cs,CreateDynamicSetMethod,The length of the statement  "	dynamicSetMethod = new DynamicMethod (dynamicMethodName' MethodAttributes.Public | MethodAttributes.Static' CallingConventions.Standard' typeof(void)' new Type[] { " is 163.
Long Statement,XLR8.CGLib,FastProperty,C:\repos\ajaxx_XLR8.CGLib\XLR8.CGLib\FastProperty.cs,CreateDynamicSetMethod,The length of the statement  "	dynamicSetMethod = new DynamicMethod (dynamicMethodName' MethodAttributes.Public | MethodAttributes.Static' CallingConventions.Standard' typeof(void)' new Type[] { " is 163.
Magic Number,XLR8.CGLib,FastBase,C:\repos\ajaxx_XLR8.CGLib\XLR8.CGLib\FastBase.cs,EmitLoadInt,The following statement contains a magic number: switch (value) {  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	il.Emit (OpCodes.Ldc_I4' value);  	break;  }  
Magic Number,XLR8.CGLib,FastBase,C:\repos\ajaxx_XLR8.CGLib\XLR8.CGLib\FastBase.cs,EmitLoadInt,The following statement contains a magic number: switch (value) {  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	il.Emit (OpCodes.Ldc_I4' value);  	break;  }  
Magic Number,XLR8.CGLib,FastBase,C:\repos\ajaxx_XLR8.CGLib\XLR8.CGLib\FastBase.cs,EmitLoadInt,The following statement contains a magic number: switch (value) {  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	il.Emit (OpCodes.Ldc_I4' value);  	break;  }  
Magic Number,XLR8.CGLib,FastBase,C:\repos\ajaxx_XLR8.CGLib\XLR8.CGLib\FastBase.cs,EmitLoadInt,The following statement contains a magic number: switch (value) {  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	il.Emit (OpCodes.Ldc_I4' value);  	break;  }  
Magic Number,XLR8.CGLib,FastBase,C:\repos\ajaxx_XLR8.CGLib\XLR8.CGLib\FastBase.cs,EmitLoadInt,The following statement contains a magic number: switch (value) {  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	il.Emit (OpCodes.Ldc_I4' value);  	break;  }  
Magic Number,XLR8.CGLib,FastBase,C:\repos\ajaxx_XLR8.CGLib\XLR8.CGLib\FastBase.cs,EmitLoadInt,The following statement contains a magic number: switch (value) {  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	il.Emit (OpCodes.Ldc_I4' value);  	break;  }  
Magic Number,XLR8.CGLib,FastBase,C:\repos\ajaxx_XLR8.CGLib\XLR8.CGLib\FastBase.cs,EmitLoadInt,The following statement contains a magic number: switch (value) {  case 0:  	il.Emit (OpCodes.Ldc_I4_0);  	break;  case 1:  	il.Emit (OpCodes.Ldc_I4_1);  	break;  case 2:  	il.Emit (OpCodes.Ldc_I4_2);  	break;  case 3:  	il.Emit (OpCodes.Ldc_I4_3);  	break;  case 4:  	il.Emit (OpCodes.Ldc_I4_4);  	break;  case 5:  	il.Emit (OpCodes.Ldc_I4_5);  	break;  case 6:  	il.Emit (OpCodes.Ldc_I4_6);  	break;  case 7:  	il.Emit (OpCodes.Ldc_I4_7);  	break;  case 8:  	il.Emit (OpCodes.Ldc_I4_8);  	break;  default:  	il.Emit (OpCodes.Ldc_I4' value);  	break;  }  
Magic Number,XLR8.CGLib,FastEmitter,C:\repos\ajaxx_XLR8.CGLib\XLR8.CGLib\FastEmitter.cs,EmitLoadArg,The following statement contains a magic number: switch (arg) {  case 0:  	il.Emit (OpCodes.Ldarg_0);  	break;  case 1:  	il.Emit (OpCodes.Ldarg_1);  	break;  case 2:  	il.Emit (OpCodes.Ldarg_2);  	break;  case 3:  	il.Emit (OpCodes.Ldarg_3);  	break;  default:  	il.Emit (OpCodes.Ldarg' arg);  	break;  }  
Magic Number,XLR8.CGLib,FastEmitter,C:\repos\ajaxx_XLR8.CGLib\XLR8.CGLib\FastEmitter.cs,EmitLoadArg,The following statement contains a magic number: switch (arg) {  case 0:  	il.Emit (OpCodes.Ldarg_0);  	break;  case 1:  	il.Emit (OpCodes.Ldarg_1);  	break;  case 2:  	il.Emit (OpCodes.Ldarg_2);  	break;  case 3:  	il.Emit (OpCodes.Ldarg_3);  	break;  default:  	il.Emit (OpCodes.Ldarg' arg);  	break;  }  
