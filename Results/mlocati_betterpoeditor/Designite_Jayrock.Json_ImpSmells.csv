Implementation smell,Namespace,Class,File,Method,Description
Long Method,Jayrock,InternetDate,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\InternetDate.cs,Parse,The method has 103 lines of code.
Complex Method,Jayrock.Json,JsonTextReader,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Json\JsonTextReader.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,Jayrock.Json.Conversion,CustomTypeDescriptor,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Json\Conversion\CustomTypeDescriptor.cs,CustomTypeDescriptor,Cyclomatic complexity of the method is 9
Long Statement,Jayrock.Configuration,DictionarySectionHandler,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Configuration\DictionarySectionHandler.cs,Create,The length of the statement  "                        throw new ConfigurationException(string.Format("'{0}' is not a valid dictionary node. Use add' remove or clear."' nodeName)' childNode); " is 136.
Long Statement,Jayrock.Configuration,ListSectionHandler,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Configuration\ListSectionHandler.cs,Create,The length of the statement  "                    throw new ConfigurationException(string.Format("Element <{0}> is not valid here in configuration. Use <{1}> elements only."'  " is 124.
Long Statement,Jayrock.Configuration,TypeListSectionHandler,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Configuration\TypeListSectionHandler.cs,GetItem,The length of the statement  "                throw new ConfigurationException(string.Format("Missing type name specification on <{0}> element."' ElementName)' element); " is 123.
Long Statement,Jayrock.Configuration,TypeListSectionHandler,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Configuration\TypeListSectionHandler.cs,ValidateType,The length of the statement  "                throw new ConfigurationException(string.Format("The type {0} is not valid for the <{2}> configuration element. It must be compatible with the type {1}."' type.FullName' ExpectedType.FullName' element.Name)' element); " is 216.
Long Statement,Jayrock.Json,JsonObject,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Json\JsonObject.cs,OnValidate,The length of the statement  "                throw new ArgumentException("key"' string.Format("The key cannot be of the supplied type {0}. It must be typed System.String."' key.GetType().FullName)); " is 153.
Long Statement,Jayrock.Json,JsonTokenClass,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Json\JsonTokenClass.cs,GetRealObject,The length of the statement  "            throw new SerializationException(string.Format("{0} is not a valid {1} instance."' Name' typeof(JsonTokenClass).FullName)); " is 123.
Long Statement,Jayrock.Json.Conversion.Converters,ArrayImporter,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Json\Conversion\Converters\ArrayImporter.cs,AssertArrayType,The length of the statement  "                throw new ArgumentException(string.Format("{0} is not one-dimension array. Multi-dimensional arrays are not supported."' type.FullName)' "arrayType"); " is 150.
Long Statement,Jayrock.Json.Conversion.Converters,BooleanImporter,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Json\Conversion\Converters\BooleanImporter.cs,ImportFromNumber,The length of the statement  "                throw new JsonException(string.Format("The JSON Number {0} must be an integer to be convertible to System.Boolean."' reader.Text)' e); " is 134.
Long Statement,Jayrock.Json.Conversion.Converters,ByteArrayImporter,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Json\Conversion\Converters\ByteArrayImporter.cs,ImportFromString,The length of the statement  "                throw new JsonException("Error converting JSON String containing base64-encode data to " + OutputType.FullName + "."' e); " is 121.
Long Statement,Jayrock.Json.Conversion.Converters,ObjectReferenceTracker,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Json\Conversion\Converters\ComponentExporter.cs,PushNew,The length of the statement  "                        throw new JsonException(string.Format("{0} does not support export of an object graph containing circular references. A value of type {1} has already been exported."' typeof(ComponentExporter).FullName' value.GetType().FullName)); " is 230.
Long Statement,Jayrock.Json.Conversion.Converters,DateTimeImporter,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Json\Conversion\Converters\DateTimeImporter.cs,GetImportException,The length of the statement  "            return new JsonException(string.Format("Found {0} where expecting a JSON String in ISO 8601 time format or a JSON Number expressed in Unix time."' jsonValueType)); " is 163.
Long Statement,Jayrock.Json.Conversion.Converters,EnumImporter,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Json\Conversion\Converters\EnumImporter.cs,Error,The length of the statement  "            return new JsonException(string.Format("The value '{0}' cannot be imported as {1}."' DebugString.Format(s)' OutputType.FullName)' e); " is 133.
Long Statement,Jayrock.Json.Conversion.Converters,NameValueCollectionImporter,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Json\Conversion\Converters\NameValueCollectionImporter.cs,GetValueAsString,The length of the statement  "                throw new JsonException(string.Format("Cannot put a JSON {0} value in a NameValueCollection instance."' reader.TokenClass)); " is 124.
Complex Conditional,Jayrock.Json,JsonReader,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Json\JsonReader.cs,ReadToken,The conditional expression  "depth == 0 && TokenClass == JsonTokenClass.Array &&                  (token.IsScalar || token == JsonTokenClass.Null)"  is complex.
Complex Conditional,Jayrock.Json,JsonTextReader,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Json\JsonTextReader.cs,Parse,The conditional expression  "(b >= '0' && b <= '9') || b == '.' || b == '-' || b == '+'"  is complex.
Complex Conditional,Jayrock.Json.Conversion,ExportContext,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Json\Conversion\ExportContext.cs,FindCompatibleExporter,The conditional expression  "(type.IsPublic || type.IsNestedPublic) &&                  !type.IsPrimitive && type.GetConstructor(Type.EmptyTypes) != null"  is complex.
Complex Conditional,Jayrock.Json.Conversion,ImportContext,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Json\Conversion\ImportContext.cs,FindCompatibleImporter,The conditional expression  "(type.IsPublic || type.IsNestedPublic) &&                   !type.IsPrimitive && type.GetConstructor(Type.EmptyTypes) != null"  is complex.
Virtual Method Call from Constructor,Jayrock.Json,JsonObject,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Json\JsonObject.cs,JsonObject,The constructor "JsonObject" calls a virtual method "Accumulate".
Magic Number,Jayrock,InternetDate,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\InternetDate.cs,Parse,The following statement contains a magic number: switch (zone)              {                  //                  // Greenwich Mean Time (GMT) or Universal Time (UT)                  //                    case "UT" :                  case "GMT" : zzz = +0000; break;                    //                  // Common North American time zones                  //                                    case "EDT" : zzz = -0400; break;                  case "EST" :                   case "CDT" : zzz = -0500; break;                  case "CST" :                   case "MDT" : zzz = -0600; break;                  case "MST" :                   case "PDT" : zzz = -0700; break;                  case "PST" : zzz = -0800; break;                    //                  // Local differential = ( "+" / "-" ) HHMM                  //                    default :                  {                      if (zone.Length < 4)                          throw new FormatException("Length of local differential component must be at least 4 characters (HHMM).");                        try                      {                          zzz = int.Parse(zone' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                      }                      catch (FormatException e)                      {                          throw new FormatException("Invalid local differential."' e);                      }                        break;                  }              }
Magic Number,Jayrock,InternetDate,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\InternetDate.cs,Parse,The following statement contains a magic number: switch (zone)              {                  //                  // Greenwich Mean Time (GMT) or Universal Time (UT)                  //                    case "UT" :                  case "GMT" : zzz = +0000; break;                    //                  // Common North American time zones                  //                                    case "EDT" : zzz = -0400; break;                  case "EST" :                   case "CDT" : zzz = -0500; break;                  case "CST" :                   case "MDT" : zzz = -0600; break;                  case "MST" :                   case "PDT" : zzz = -0700; break;                  case "PST" : zzz = -0800; break;                    //                  // Local differential = ( "+" / "-" ) HHMM                  //                    default :                  {                      if (zone.Length < 4)                          throw new FormatException("Length of local differential component must be at least 4 characters (HHMM).");                        try                      {                          zzz = int.Parse(zone' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                      }                      catch (FormatException e)                      {                          throw new FormatException("Invalid local differential."' e);                      }                        break;                  }              }
Magic Number,Jayrock,InternetDate,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\InternetDate.cs,Parse,The following statement contains a magic number: switch (zone)              {                  //                  // Greenwich Mean Time (GMT) or Universal Time (UT)                  //                    case "UT" :                  case "GMT" : zzz = +0000; break;                    //                  // Common North American time zones                  //                                    case "EDT" : zzz = -0400; break;                  case "EST" :                   case "CDT" : zzz = -0500; break;                  case "CST" :                   case "MDT" : zzz = -0600; break;                  case "MST" :                   case "PDT" : zzz = -0700; break;                  case "PST" : zzz = -0800; break;                    //                  // Local differential = ( "+" / "-" ) HHMM                  //                    default :                  {                      if (zone.Length < 4)                          throw new FormatException("Length of local differential component must be at least 4 characters (HHMM).");                        try                      {                          zzz = int.Parse(zone' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                      }                      catch (FormatException e)                      {                          throw new FormatException("Invalid local differential."' e);                      }                        break;                  }              }
Magic Number,Jayrock,InternetDate,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\InternetDate.cs,Parse,The following statement contains a magic number: switch (zone)              {                  //                  // Greenwich Mean Time (GMT) or Universal Time (UT)                  //                    case "UT" :                  case "GMT" : zzz = +0000; break;                    //                  // Common North American time zones                  //                                    case "EDT" : zzz = -0400; break;                  case "EST" :                   case "CDT" : zzz = -0500; break;                  case "CST" :                   case "MDT" : zzz = -0600; break;                  case "MST" :                   case "PDT" : zzz = -0700; break;                  case "PST" : zzz = -0800; break;                    //                  // Local differential = ( "+" / "-" ) HHMM                  //                    default :                  {                      if (zone.Length < 4)                          throw new FormatException("Length of local differential component must be at least 4 characters (HHMM).");                        try                      {                          zzz = int.Parse(zone' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                      }                      catch (FormatException e)                      {                          throw new FormatException("Invalid local differential."' e);                      }                        break;                  }              }
Magic Number,Jayrock,InternetDate,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\InternetDate.cs,Parse,The following statement contains a magic number: switch (zone)              {                  //                  // Greenwich Mean Time (GMT) or Universal Time (UT)                  //                    case "UT" :                  case "GMT" : zzz = +0000; break;                    //                  // Common North American time zones                  //                                    case "EDT" : zzz = -0400; break;                  case "EST" :                   case "CDT" : zzz = -0500; break;                  case "CST" :                   case "MDT" : zzz = -0600; break;                  case "MST" :                   case "PDT" : zzz = -0700; break;                  case "PST" : zzz = -0800; break;                    //                  // Local differential = ( "+" / "-" ) HHMM                  //                    default :                  {                      if (zone.Length < 4)                          throw new FormatException("Length of local differential component must be at least 4 characters (HHMM).");                        try                      {                          zzz = int.Parse(zone' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                      }                      catch (FormatException e)                      {                          throw new FormatException("Invalid local differential."' e);                      }                        break;                  }              }
Magic Number,Jayrock,InternetDate,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\InternetDate.cs,Parse,The following statement contains a magic number: switch (zone)              {                  //                  // Greenwich Mean Time (GMT) or Universal Time (UT)                  //                    case "UT" :                  case "GMT" : zzz = +0000; break;                    //                  // Common North American time zones                  //                                    case "EDT" : zzz = -0400; break;                  case "EST" :                   case "CDT" : zzz = -0500; break;                  case "CST" :                   case "MDT" : zzz = -0600; break;                  case "MST" :                   case "PDT" : zzz = -0700; break;                  case "PST" : zzz = -0800; break;                    //                  // Local differential = ( "+" / "-" ) HHMM                  //                    default :                  {                      if (zone.Length < 4)                          throw new FormatException("Length of local differential component must be at least 4 characters (HHMM).");                        try                      {                          zzz = int.Parse(zone' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                      }                      catch (FormatException e)                      {                          throw new FormatException("Invalid local differential."' e);                      }                        break;                  }              }
Magic Number,Jayrock,InternetDate,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\InternetDate.cs,Parse,The following statement contains a magic number: TimeSpan offset = new TimeSpan(zzz / 100' zzz % 100' 0);
Magic Number,Jayrock,InternetDate,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\InternetDate.cs,Parse,The following statement contains a magic number: TimeSpan offset = new TimeSpan(zzz / 100' zzz % 100' 0);
Magic Number,Jayrock,UnixTime,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\UnixTime.cs,ToDateTime,The following statement contains a magic number: const long secondsPerDay = 24 * 60 * 60;
Magic Number,Jayrock,UnixTime,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\UnixTime.cs,ToDateTime,The following statement contains a magic number: const long secondsPerDay = 24 * 60 * 60;
Magic Number,Jayrock,UnixTime,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\UnixTime.cs,ToDateTime,The following statement contains a magic number: const long secondsPerDay = 24 * 60 * 60;
Magic Number,Jayrock,UnixTime,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\UnixTime.cs,ToDateTime,The following statement contains a magic number: const long secondsPerYear = (365 * secondsPerDay);
Magic Number,Jayrock,UnixTime,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\UnixTime.cs,ToDateTime,The following statement contains a magic number: int tmp = (int) (time / secondsPerYear) + 70;
Magic Number,Jayrock,UnixTime,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\UnixTime.cs,ToDateTime,The following statement contains a magic number: time -= ((tmp - 70) * secondsPerYear);
Magic Number,Jayrock,UnixTime,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\UnixTime.cs,ToDateTime,The following statement contains a magic number: int hour = (int) (time / 3600);
Magic Number,Jayrock,UnixTime,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\UnixTime.cs,ToDateTime,The following statement contains a magic number: int min = (int) (time / 60);
Magic Number,Jayrock,UnixTime,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\UnixTime.cs,ToDateTime,The following statement contains a magic number: int sec = (int) (time - (min) * 60);
Magic Number,Jayrock,UnixTime,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\UnixTime.cs,ToDateTime,The following statement contains a magic number: return (new DateTime(year + 1900' month' mday' hour' min' sec)).ToLocalTime();
Magic Number,Jayrock,UnixTime,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\UnixTime.cs,ToInt64,The following statement contains a magic number: return (long) (time.ToUniversalTime() - new DateTime(1970' 1' 1)).TotalSeconds;
Magic Number,Jayrock,UnixTime,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\UnixTime.cs,IsLeapYear,The following statement contains a magic number: return (((y % 4 == 0) && (y % 100 != 0)) || ((y + 1900) % 400 == 0));
Magic Number,Jayrock,UnixTime,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\UnixTime.cs,IsLeapYear,The following statement contains a magic number: return (((y % 4 == 0) && (y % 100 != 0)) || ((y + 1900) % 400 == 0));
Magic Number,Jayrock,UnixTime,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\UnixTime.cs,IsLeapYear,The following statement contains a magic number: return (((y % 4 == 0) && (y % 100 != 0)) || ((y + 1900) % 400 == 0));
Magic Number,Jayrock,UnixTime,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\UnixTime.cs,IsLeapYear,The following statement contains a magic number: return (((y % 4 == 0) && (y % 100 != 0)) || ((y + 1900) % 400 == 0));
Magic Number,Jayrock,UnixTime,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\UnixTime.cs,ElapsedLeapYears,The following statement contains a magic number: return (((y - 1) / 4) - ((y - 1) / 100) + ((y + 299) / 400) - /* Leap years 1900 - 1970 = */ 17);
Magic Number,Jayrock,UnixTime,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\UnixTime.cs,ElapsedLeapYears,The following statement contains a magic number: return (((y - 1) / 4) - ((y - 1) / 100) + ((y + 299) / 400) - /* Leap years 1900 - 1970 = */ 17);
Magic Number,Jayrock,UnixTime,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\UnixTime.cs,ElapsedLeapYears,The following statement contains a magic number: return (((y - 1) / 4) - ((y - 1) / 100) + ((y + 299) / 400) - /* Leap years 1900 - 1970 = */ 17);
Magic Number,Jayrock,UnixTime,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\UnixTime.cs,ElapsedLeapYears,The following statement contains a magic number: return (((y - 1) / 4) - ((y - 1) / 100) + ((y + 299) / 400) - /* Leap years 1900 - 1970 = */ 17);
Magic Number,Jayrock,UnixTime,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\UnixTime.cs,ElapsedLeapYears,The following statement contains a magic number: return (((y - 1) / 4) - ((y - 1) / 100) + ((y + 299) / 400) - /* Leap years 1900 - 1970 = */ 17);
Magic Number,Jayrock.Configuration,ListSectionHandler,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Configuration\ListSectionHandler.cs,CreateList,The following statement contains a magic number: return parent != null ?                  new ArrayList((ICollection) parent) :                  new ArrayList(/* capacity */ 4);
Magic Number,Jayrock.Diagnostics,DebugString,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Diagnostics\DebugString.cs,Format,The following statement contains a magic number: return Format(s' 50);
Magic Number,Jayrock.Json,BufferedCharReader,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Json\BufferedCharReader.cs,BufferedCharReader,The following statement contains a magic number: _bufferSize = Math.Max(256' bufferSize);
Magic Number,Jayrock.Json,JsonRecorder,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Json\JsonRecorder.cs,CreatePlayer,The following statement contains a magic number: JsonToken[] tokens = new JsonToken[count + 2];
Magic Number,Jayrock.Json,JsonString,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Json\JsonString.cs,Enquote,The following statement contains a magic number: if (sb == null)                  sb = new StringBuilder(length + 4);
Magic Number,Jayrock.Json,JsonString,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Json\JsonString.cs,Dequote,The following statement contains a magic number: while (true)              {                  char ch = input.Next();                    if ((ch == BufferedCharReader.EOF) || (ch == '\n') || (ch == '\r'))                       throw new FormatException("Unterminated string.");                    if (ch == '\\')                  {                      ch = input.Next();                        switch (ch)                      {                          case 'b': output.Append('\b'); break; // Backspace                          case 't': output.Append('\t'); break; // Horizontal tab                          case 'n': output.Append('\n'); break; // Newline                          case 'f': output.Append('\f'); break; // Form feed                          case 'r': output.Append('\r'); break; // Carriage return                                                         case 'u':                          {                              if (hexDigits == null)                                  hexDigits = new char[4];                                                            output.Append(ParseHex(input' hexDigits));                               break;                          }                                                        default:                              output.Append(ch);                              break;                      }                  }                  else                  {                      if (ch == quote)                          return output;                        output.Append(ch);                  }              }
Magic Number,Jayrock.Json,JsonString,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Json\JsonString.cs,ParseHex,The following statement contains a magic number: Debug.Assert(hexDigits.Length == 4);
Magic Number,Jayrock.Json,JsonString,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Json\JsonString.cs,ParseHex,The following statement contains a magic number: hexDigits[2] = input.Next();
Magic Number,Jayrock.Json,JsonString,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Json\JsonString.cs,ParseHex,The following statement contains a magic number: hexDigits[3] = input.Next();
Magic Number,Jayrock.Json,JsonTextReader,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Json\JsonTextReader.cs,Push,The following statement contains a magic number: if (_stack == null)                  _stack = new Stack(6);
Magic Number,Jayrock.Json,JsonTextWriter,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Json\JsonTextWriter.cs,PrettyIndent,The following statement contains a magic number: if (_newLine)              {                  if (_indent > 0)                  {                      int spaces = _indent * 4;                                            if (_indentBuffer == null || _indentBuffer.Length < spaces)                          _indentBuffer = new string(' '' spaces * 4).ToCharArray();                                            _writer.Write(_indentBuffer' 0' spaces);                  }                                    _newLine = false;              }
Magic Number,Jayrock.Json,JsonTextWriter,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Json\JsonTextWriter.cs,PrettyIndent,The following statement contains a magic number: if (_newLine)              {                  if (_indent > 0)                  {                      int spaces = _indent * 4;                                            if (_indentBuffer == null || _indentBuffer.Length < spaces)                          _indentBuffer = new string(' '' spaces * 4).ToCharArray();                                            _writer.Write(_indentBuffer' 0' spaces);                  }                                    _newLine = false;              }
Magic Number,Jayrock.Json,WriterStateStack,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Json\JsonWriterBase.cs,Push,The following statement contains a magic number: if (_states == null)                  {                      _states = new WriterState[6];                  }                  else if (_count == _states.Length)                  {                      WriterState[] items = new WriterState[_states.Length * 2];                      _states.CopyTo(items' 0);                      _states = items;                  }
Magic Number,Jayrock.Json,WriterStateStack,C:\repos\mlocati_betterpoeditor\src\Jayrock.Json\Json\JsonWriterBase.cs,Push,The following statement contains a magic number: if (_states == null)                  {                      _states = new WriterState[6];                  }                  else if (_count == _states.Length)                  {                      WriterState[] items = new WriterState[_states.Length * 2];                      _states.CopyTo(items' 0);                      _states = items;                  }
