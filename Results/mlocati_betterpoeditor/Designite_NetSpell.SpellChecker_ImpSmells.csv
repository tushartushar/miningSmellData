Implementation smell,Namespace,Class,File,Method,Description
Long Method,NetSpell.SpellChecker.Dictionary.Affix,AffixUtility,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Dictionary\Affix\AffixUtility.cs,EncodeConditions,The method has 100 lines of code.
Long Method,NetSpell.SpellChecker.Dictionary,WordDictionary,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Dictionary\WordDictionary.cs,Initialize,The method has 132 lines of code.
Long Method,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The method has 285 lines of code.
Long Method,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The method has 208 lines of code.
Complex Method,NetSpell.SpellChecker,Spelling,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Spelling.cs,EditDistance,Cyclomatic complexity of the method is 8
Complex Method,NetSpell.SpellChecker,Spelling,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Spelling.cs,GetWordIndexFromTextIndex,Cyclomatic complexity of the method is 8
Complex Method,NetSpell.SpellChecker,Spelling,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Spelling.cs,SpellCheck,Cyclomatic complexity of the method is 10
Complex Method,NetSpell.SpellChecker,Spelling,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Spelling.cs,Suggest,Cyclomatic complexity of the method is 13
Complex Method,NetSpell.SpellChecker.Dictionary.Affix,AffixUtility,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Dictionary\Affix\AffixUtility.cs,EncodeConditions,Cyclomatic complexity of the method is 16
Complex Method,NetSpell.SpellChecker.Dictionary.Phonetic,PhoneticUtility,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Dictionary\Phonetic\PhoneticUtility.cs,EncodeRule,Cyclomatic complexity of the method is 14
Complex Method,NetSpell.SpellChecker.Dictionary,WordDictionary,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Dictionary\WordDictionary.cs,Contains,Cyclomatic complexity of the method is 15
Complex Method,NetSpell.SpellChecker.Dictionary,WordDictionary,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Dictionary\WordDictionary.cs,ExpandWord,Cyclomatic complexity of the method is 9
Complex Method,NetSpell.SpellChecker.Dictionary,WordDictionary,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Dictionary\WordDictionary.cs,Initialize,Cyclomatic complexity of the method is 18
Complex Method,NetSpell.SpellChecker.Dictionary,WordDictionary,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Dictionary\WordDictionary.cs,PhoneticCode,Cyclomatic complexity of the method is 10
Long Identifier,NetSpell.SpellChecker,Spelling,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Spelling.cs,,The length of the parameter _modalDialogShown_startWordIndex is 32.
Long Identifier,NetSpell.SpellChecker,Spelling,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Spelling.cs,,The length of the parameter _modalDialogShown_endWordIndex is 30.
Long Statement,NetSpell.SpellChecker.Dictionary,WordDictionary,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Dictionary\WordDictionary.cs,LoadUserFile,The length of the statement  "			string userPath = Path.Combine(System.Environment.GetFolderPath(System.Environment.SpecialFolder.ApplicationData)' "NetSpell"); " is 127.
Long Statement,NetSpell.SpellChecker.Dictionary,WordDictionary,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Dictionary\WordDictionary.cs,SaveUserFile,The length of the statement  "			string userPath = Path.Combine(System.Environment.GetFolderPath(System.Environment.SpecialFolder.ApplicationData)' "NetSpell"); " is 127.
Long Statement,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The length of the statement  "			this.optionsTabControl.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 153.
Long Statement,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The length of the statement  "			this.linkWebSite.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.linkWebSite_LinkClicked); " is 120.
Long Statement,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The length of the statement  "			this.OkButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The length of the statement  "			this.CancelBtn.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 148.
Complex Conditional,NetSpell.SpellChecker,Spelling,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Spelling.cs,DeleteWord,The conditional expression  "index > 0  				&& index + length < _text.Length  				&& _text[index - 1] == ' '  				&& _text[index + length] == ' '"  is complex.
Complex Conditional,NetSpell.SpellChecker,Spelling,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Spelling.cs,DeleteWord,The conditional expression  "index > 0  				&& index + length < _text.Length  				&& _text[index - 1] == ' '  				&& char.IsPunctuation(_text[index + length])"  is complex.
Complex Conditional,NetSpell.SpellChecker.Dictionary,WordDictionary,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Dictionary\WordDictionary.cs,PhoneticCode,The conditional expression  "(rule.BeginningOnly == begining || !rule.BeginningOnly)  						&& (rule.EndOnly == ending || !rule.EndOnly)  						&& rule.ConditionCount <= tempWord.Length"  is complex.
Magic Number,NetSpell.SpellChecker,Spelling,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Spelling.cs,GetWordIndexFromTextIndex,The following statement contains a magic number: int mid = (low + high) / 2;
Magic Number,NetSpell.SpellChecker.Dictionary.Affix,AffixUtility,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Dictionary\Affix\AffixUtility.cs,EncodeConditions,The following statement contains a magic number: char [] memberChars = new char[200];
Magic Number,NetSpell.SpellChecker.Dictionary.Phonetic,PhoneticUtility,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Dictionary\Phonetic\PhoneticUtility.cs,EncodeRule,The following statement contains a magic number: char [] memberChars = new char[200];
Magic Number,NetSpell.SpellChecker.Dictionary,WordDictionary,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Dictionary\WordDictionary.cs,Initialize,The following statement contains a magic number: switch (tempLine)  					{  						case "[Copyright]" :  						case "[Try]" :   						case "[Replace]" :   						case "[Prefix]" :  						case "[Suffix]" :  						case "[Phonetic]" :  						case "[Words]" :  							// set current section that is being parsed  							currentSection = tempLine;  							break;  						default :		  							// parse line and place in correct object  						switch (currentSection)  						{  							case "[Copyright]" :  								this.Copyright += tempLine + "\r\n";  								break;  							case "[Try]" : // ISpell try chars  								this.TryCharacters += tempLine;  								break;  							case "[Replace]" : // ISpell replace chars  								this.ReplaceCharacters.Add(tempLine);  								break;  							case "[Prefix]" : // MySpell prefix rules  							case "[Suffix]" : // MySpell suffix rules    								// split line by white space  								partMatches = _spaceRegx.Matches(tempLine);  									  								// if 3 parts' then new rule    								if (partMatches.Count == 3)  								{  									currentRule = new AffixRule();  									  									// part 1 = affix key  									currentRule.Name = partMatches[0].Value;  									// part 2 = combine flag  									if (partMatches[1].Value == "Y") currentRule.AllowCombine = true;  									// part 3 = entry count' not used    									if (currentSection == "[Prefix]")  									{  										// add to prefix collection  										this.PrefixRules.Add(currentRule.Name' currentRule);  									}  									else   									{  										// add to suffix collection  										this.SuffixRules.Add(currentRule.Name' currentRule);  									}  								}  									//if 4 parts' then entry for current rule  								else if (partMatches.Count == 4)  								{  									// part 1 = affix key  									if (currentRule.Name == partMatches[0].Value)  									{  										AffixEntry entry = new AffixEntry();    										// part 2 = strip char  										if (partMatches[1].Value != "0") entry.StripCharacters = partMatches[1].Value;  										// part 3 = add chars  										entry.AddCharacters = partMatches[2].Value;  										// part 4 = conditions  										AffixUtility.EncodeConditions(partMatches[3].Value' entry);    										currentRule.AffixEntries.Add(entry);  									}  								}	  								break;  							case "[Phonetic]" : // ASpell phonetic rules  								// split line by white space  								partMatches = _spaceRegx.Matches(tempLine);  								if (partMatches.Count >= 2)  								{  									PhoneticRule rule = new PhoneticRule();  									PhoneticUtility.EncodeRule(partMatches[0].Value' ref rule);  									rule.ReplaceString = partMatches[1].Value;  									_phoneticRules.Add(rule);  								}  								break;  							case "[Words]" : // dictionary word list  								// splits word into its parts  								string[] parts = tempLine.Split('/');  								Word tempWord = new Word();  								// part 1 = base word  								tempWord.Text = parts[0];  								// part 2 = affix keys  								if (parts.Length >= 2) tempWord.AffixKeys = parts[1];  								// part 3 = phonetic code  								if (parts.Length >= 3) tempWord.PhoneticCode = parts[2];  								  								this.BaseWords.Add(tempWord.Text' tempWord);  								break;  						} // currentSection swith  							break;  					}
Magic Number,NetSpell.SpellChecker.Dictionary,WordDictionary,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Dictionary\WordDictionary.cs,Initialize,The following statement contains a magic number: switch (tempLine)  					{  						case "[Copyright]" :  						case "[Try]" :   						case "[Replace]" :   						case "[Prefix]" :  						case "[Suffix]" :  						case "[Phonetic]" :  						case "[Words]" :  							// set current section that is being parsed  							currentSection = tempLine;  							break;  						default :		  							// parse line and place in correct object  						switch (currentSection)  						{  							case "[Copyright]" :  								this.Copyright += tempLine + "\r\n";  								break;  							case "[Try]" : // ISpell try chars  								this.TryCharacters += tempLine;  								break;  							case "[Replace]" : // ISpell replace chars  								this.ReplaceCharacters.Add(tempLine);  								break;  							case "[Prefix]" : // MySpell prefix rules  							case "[Suffix]" : // MySpell suffix rules    								// split line by white space  								partMatches = _spaceRegx.Matches(tempLine);  									  								// if 3 parts' then new rule    								if (partMatches.Count == 3)  								{  									currentRule = new AffixRule();  									  									// part 1 = affix key  									currentRule.Name = partMatches[0].Value;  									// part 2 = combine flag  									if (partMatches[1].Value == "Y") currentRule.AllowCombine = true;  									// part 3 = entry count' not used    									if (currentSection == "[Prefix]")  									{  										// add to prefix collection  										this.PrefixRules.Add(currentRule.Name' currentRule);  									}  									else   									{  										// add to suffix collection  										this.SuffixRules.Add(currentRule.Name' currentRule);  									}  								}  									//if 4 parts' then entry for current rule  								else if (partMatches.Count == 4)  								{  									// part 1 = affix key  									if (currentRule.Name == partMatches[0].Value)  									{  										AffixEntry entry = new AffixEntry();    										// part 2 = strip char  										if (partMatches[1].Value != "0") entry.StripCharacters = partMatches[1].Value;  										// part 3 = add chars  										entry.AddCharacters = partMatches[2].Value;  										// part 4 = conditions  										AffixUtility.EncodeConditions(partMatches[3].Value' entry);    										currentRule.AffixEntries.Add(entry);  									}  								}	  								break;  							case "[Phonetic]" : // ASpell phonetic rules  								// split line by white space  								partMatches = _spaceRegx.Matches(tempLine);  								if (partMatches.Count >= 2)  								{  									PhoneticRule rule = new PhoneticRule();  									PhoneticUtility.EncodeRule(partMatches[0].Value' ref rule);  									rule.ReplaceString = partMatches[1].Value;  									_phoneticRules.Add(rule);  								}  								break;  							case "[Words]" : // dictionary word list  								// splits word into its parts  								string[] parts = tempLine.Split('/');  								Word tempWord = new Word();  								// part 1 = base word  								tempWord.Text = parts[0];  								// part 2 = affix keys  								if (parts.Length >= 2) tempWord.AffixKeys = parts[1];  								// part 3 = phonetic code  								if (parts.Length >= 3) tempWord.PhoneticCode = parts[2];  								  								this.BaseWords.Add(tempWord.Text' tempWord);  								break;  						} // currentSection swith  							break;  					}
Magic Number,NetSpell.SpellChecker.Dictionary,WordDictionary,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Dictionary\WordDictionary.cs,Initialize,The following statement contains a magic number: switch (tempLine)  					{  						case "[Copyright]" :  						case "[Try]" :   						case "[Replace]" :   						case "[Prefix]" :  						case "[Suffix]" :  						case "[Phonetic]" :  						case "[Words]" :  							// set current section that is being parsed  							currentSection = tempLine;  							break;  						default :		  							// parse line and place in correct object  						switch (currentSection)  						{  							case "[Copyright]" :  								this.Copyright += tempLine + "\r\n";  								break;  							case "[Try]" : // ISpell try chars  								this.TryCharacters += tempLine;  								break;  							case "[Replace]" : // ISpell replace chars  								this.ReplaceCharacters.Add(tempLine);  								break;  							case "[Prefix]" : // MySpell prefix rules  							case "[Suffix]" : // MySpell suffix rules    								// split line by white space  								partMatches = _spaceRegx.Matches(tempLine);  									  								// if 3 parts' then new rule    								if (partMatches.Count == 3)  								{  									currentRule = new AffixRule();  									  									// part 1 = affix key  									currentRule.Name = partMatches[0].Value;  									// part 2 = combine flag  									if (partMatches[1].Value == "Y") currentRule.AllowCombine = true;  									// part 3 = entry count' not used    									if (currentSection == "[Prefix]")  									{  										// add to prefix collection  										this.PrefixRules.Add(currentRule.Name' currentRule);  									}  									else   									{  										// add to suffix collection  										this.SuffixRules.Add(currentRule.Name' currentRule);  									}  								}  									//if 4 parts' then entry for current rule  								else if (partMatches.Count == 4)  								{  									// part 1 = affix key  									if (currentRule.Name == partMatches[0].Value)  									{  										AffixEntry entry = new AffixEntry();    										// part 2 = strip char  										if (partMatches[1].Value != "0") entry.StripCharacters = partMatches[1].Value;  										// part 3 = add chars  										entry.AddCharacters = partMatches[2].Value;  										// part 4 = conditions  										AffixUtility.EncodeConditions(partMatches[3].Value' entry);    										currentRule.AffixEntries.Add(entry);  									}  								}	  								break;  							case "[Phonetic]" : // ASpell phonetic rules  								// split line by white space  								partMatches = _spaceRegx.Matches(tempLine);  								if (partMatches.Count >= 2)  								{  									PhoneticRule rule = new PhoneticRule();  									PhoneticUtility.EncodeRule(partMatches[0].Value' ref rule);  									rule.ReplaceString = partMatches[1].Value;  									_phoneticRules.Add(rule);  								}  								break;  							case "[Words]" : // dictionary word list  								// splits word into its parts  								string[] parts = tempLine.Split('/');  								Word tempWord = new Word();  								// part 1 = base word  								tempWord.Text = parts[0];  								// part 2 = affix keys  								if (parts.Length >= 2) tempWord.AffixKeys = parts[1];  								// part 3 = phonetic code  								if (parts.Length >= 3) tempWord.PhoneticCode = parts[2];  								  								this.BaseWords.Add(tempWord.Text' tempWord);  								break;  						} // currentSection swith  							break;  					}
Magic Number,NetSpell.SpellChecker.Dictionary,WordDictionary,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Dictionary\WordDictionary.cs,Initialize,The following statement contains a magic number: switch (tempLine)  					{  						case "[Copyright]" :  						case "[Try]" :   						case "[Replace]" :   						case "[Prefix]" :  						case "[Suffix]" :  						case "[Phonetic]" :  						case "[Words]" :  							// set current section that is being parsed  							currentSection = tempLine;  							break;  						default :		  							// parse line and place in correct object  						switch (currentSection)  						{  							case "[Copyright]" :  								this.Copyright += tempLine + "\r\n";  								break;  							case "[Try]" : // ISpell try chars  								this.TryCharacters += tempLine;  								break;  							case "[Replace]" : // ISpell replace chars  								this.ReplaceCharacters.Add(tempLine);  								break;  							case "[Prefix]" : // MySpell prefix rules  							case "[Suffix]" : // MySpell suffix rules    								// split line by white space  								partMatches = _spaceRegx.Matches(tempLine);  									  								// if 3 parts' then new rule    								if (partMatches.Count == 3)  								{  									currentRule = new AffixRule();  									  									// part 1 = affix key  									currentRule.Name = partMatches[0].Value;  									// part 2 = combine flag  									if (partMatches[1].Value == "Y") currentRule.AllowCombine = true;  									// part 3 = entry count' not used    									if (currentSection == "[Prefix]")  									{  										// add to prefix collection  										this.PrefixRules.Add(currentRule.Name' currentRule);  									}  									else   									{  										// add to suffix collection  										this.SuffixRules.Add(currentRule.Name' currentRule);  									}  								}  									//if 4 parts' then entry for current rule  								else if (partMatches.Count == 4)  								{  									// part 1 = affix key  									if (currentRule.Name == partMatches[0].Value)  									{  										AffixEntry entry = new AffixEntry();    										// part 2 = strip char  										if (partMatches[1].Value != "0") entry.StripCharacters = partMatches[1].Value;  										// part 3 = add chars  										entry.AddCharacters = partMatches[2].Value;  										// part 4 = conditions  										AffixUtility.EncodeConditions(partMatches[3].Value' entry);    										currentRule.AffixEntries.Add(entry);  									}  								}	  								break;  							case "[Phonetic]" : // ASpell phonetic rules  								// split line by white space  								partMatches = _spaceRegx.Matches(tempLine);  								if (partMatches.Count >= 2)  								{  									PhoneticRule rule = new PhoneticRule();  									PhoneticUtility.EncodeRule(partMatches[0].Value' ref rule);  									rule.ReplaceString = partMatches[1].Value;  									_phoneticRules.Add(rule);  								}  								break;  							case "[Words]" : // dictionary word list  								// splits word into its parts  								string[] parts = tempLine.Split('/');  								Word tempWord = new Word();  								// part 1 = base word  								tempWord.Text = parts[0];  								// part 2 = affix keys  								if (parts.Length >= 2) tempWord.AffixKeys = parts[1];  								// part 3 = phonetic code  								if (parts.Length >= 3) tempWord.PhoneticCode = parts[2];  								  								this.BaseWords.Add(tempWord.Text' tempWord);  								break;  						} // currentSection swith  							break;  					}
Magic Number,NetSpell.SpellChecker.Dictionary,WordDictionary,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Dictionary\WordDictionary.cs,Initialize,The following statement contains a magic number: switch (tempLine)  					{  						case "[Copyright]" :  						case "[Try]" :   						case "[Replace]" :   						case "[Prefix]" :  						case "[Suffix]" :  						case "[Phonetic]" :  						case "[Words]" :  							// set current section that is being parsed  							currentSection = tempLine;  							break;  						default :		  							// parse line and place in correct object  						switch (currentSection)  						{  							case "[Copyright]" :  								this.Copyright += tempLine + "\r\n";  								break;  							case "[Try]" : // ISpell try chars  								this.TryCharacters += tempLine;  								break;  							case "[Replace]" : // ISpell replace chars  								this.ReplaceCharacters.Add(tempLine);  								break;  							case "[Prefix]" : // MySpell prefix rules  							case "[Suffix]" : // MySpell suffix rules    								// split line by white space  								partMatches = _spaceRegx.Matches(tempLine);  									  								// if 3 parts' then new rule    								if (partMatches.Count == 3)  								{  									currentRule = new AffixRule();  									  									// part 1 = affix key  									currentRule.Name = partMatches[0].Value;  									// part 2 = combine flag  									if (partMatches[1].Value == "Y") currentRule.AllowCombine = true;  									// part 3 = entry count' not used    									if (currentSection == "[Prefix]")  									{  										// add to prefix collection  										this.PrefixRules.Add(currentRule.Name' currentRule);  									}  									else   									{  										// add to suffix collection  										this.SuffixRules.Add(currentRule.Name' currentRule);  									}  								}  									//if 4 parts' then entry for current rule  								else if (partMatches.Count == 4)  								{  									// part 1 = affix key  									if (currentRule.Name == partMatches[0].Value)  									{  										AffixEntry entry = new AffixEntry();    										// part 2 = strip char  										if (partMatches[1].Value != "0") entry.StripCharacters = partMatches[1].Value;  										// part 3 = add chars  										entry.AddCharacters = partMatches[2].Value;  										// part 4 = conditions  										AffixUtility.EncodeConditions(partMatches[3].Value' entry);    										currentRule.AffixEntries.Add(entry);  									}  								}	  								break;  							case "[Phonetic]" : // ASpell phonetic rules  								// split line by white space  								partMatches = _spaceRegx.Matches(tempLine);  								if (partMatches.Count >= 2)  								{  									PhoneticRule rule = new PhoneticRule();  									PhoneticUtility.EncodeRule(partMatches[0].Value' ref rule);  									rule.ReplaceString = partMatches[1].Value;  									_phoneticRules.Add(rule);  								}  								break;  							case "[Words]" : // dictionary word list  								// splits word into its parts  								string[] parts = tempLine.Split('/');  								Word tempWord = new Word();  								// part 1 = base word  								tempWord.Text = parts[0];  								// part 2 = affix keys  								if (parts.Length >= 2) tempWord.AffixKeys = parts[1];  								// part 3 = phonetic code  								if (parts.Length >= 3) tempWord.PhoneticCode = parts[2];  								  								this.BaseWords.Add(tempWord.Text' tempWord);  								break;  						} // currentSection swith  							break;  					}
Magic Number,NetSpell.SpellChecker.Dictionary,WordDictionary,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Dictionary\WordDictionary.cs,Initialize,The following statement contains a magic number: switch (tempLine)  					{  						case "[Copyright]" :  						case "[Try]" :   						case "[Replace]" :   						case "[Prefix]" :  						case "[Suffix]" :  						case "[Phonetic]" :  						case "[Words]" :  							// set current section that is being parsed  							currentSection = tempLine;  							break;  						default :		  							// parse line and place in correct object  						switch (currentSection)  						{  							case "[Copyright]" :  								this.Copyright += tempLine + "\r\n";  								break;  							case "[Try]" : // ISpell try chars  								this.TryCharacters += tempLine;  								break;  							case "[Replace]" : // ISpell replace chars  								this.ReplaceCharacters.Add(tempLine);  								break;  							case "[Prefix]" : // MySpell prefix rules  							case "[Suffix]" : // MySpell suffix rules    								// split line by white space  								partMatches = _spaceRegx.Matches(tempLine);  									  								// if 3 parts' then new rule    								if (partMatches.Count == 3)  								{  									currentRule = new AffixRule();  									  									// part 1 = affix key  									currentRule.Name = partMatches[0].Value;  									// part 2 = combine flag  									if (partMatches[1].Value == "Y") currentRule.AllowCombine = true;  									// part 3 = entry count' not used    									if (currentSection == "[Prefix]")  									{  										// add to prefix collection  										this.PrefixRules.Add(currentRule.Name' currentRule);  									}  									else   									{  										// add to suffix collection  										this.SuffixRules.Add(currentRule.Name' currentRule);  									}  								}  									//if 4 parts' then entry for current rule  								else if (partMatches.Count == 4)  								{  									// part 1 = affix key  									if (currentRule.Name == partMatches[0].Value)  									{  										AffixEntry entry = new AffixEntry();    										// part 2 = strip char  										if (partMatches[1].Value != "0") entry.StripCharacters = partMatches[1].Value;  										// part 3 = add chars  										entry.AddCharacters = partMatches[2].Value;  										// part 4 = conditions  										AffixUtility.EncodeConditions(partMatches[3].Value' entry);    										currentRule.AffixEntries.Add(entry);  									}  								}	  								break;  							case "[Phonetic]" : // ASpell phonetic rules  								// split line by white space  								partMatches = _spaceRegx.Matches(tempLine);  								if (partMatches.Count >= 2)  								{  									PhoneticRule rule = new PhoneticRule();  									PhoneticUtility.EncodeRule(partMatches[0].Value' ref rule);  									rule.ReplaceString = partMatches[1].Value;  									_phoneticRules.Add(rule);  								}  								break;  							case "[Words]" : // dictionary word list  								// splits word into its parts  								string[] parts = tempLine.Split('/');  								Word tempWord = new Word();  								// part 1 = base word  								tempWord.Text = parts[0];  								// part 2 = affix keys  								if (parts.Length >= 2) tempWord.AffixKeys = parts[1];  								// part 3 = phonetic code  								if (parts.Length >= 3) tempWord.PhoneticCode = parts[2];  								  								this.BaseWords.Add(tempWord.Text' tempWord);  								break;  						} // currentSection swith  							break;  					}
Magic Number,NetSpell.SpellChecker.Dictionary,WordDictionary,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Dictionary\WordDictionary.cs,Initialize,The following statement contains a magic number: switch (tempLine)  					{  						case "[Copyright]" :  						case "[Try]" :   						case "[Replace]" :   						case "[Prefix]" :  						case "[Suffix]" :  						case "[Phonetic]" :  						case "[Words]" :  							// set current section that is being parsed  							currentSection = tempLine;  							break;  						default :		  							// parse line and place in correct object  						switch (currentSection)  						{  							case "[Copyright]" :  								this.Copyright += tempLine + "\r\n";  								break;  							case "[Try]" : // ISpell try chars  								this.TryCharacters += tempLine;  								break;  							case "[Replace]" : // ISpell replace chars  								this.ReplaceCharacters.Add(tempLine);  								break;  							case "[Prefix]" : // MySpell prefix rules  							case "[Suffix]" : // MySpell suffix rules    								// split line by white space  								partMatches = _spaceRegx.Matches(tempLine);  									  								// if 3 parts' then new rule    								if (partMatches.Count == 3)  								{  									currentRule = new AffixRule();  									  									// part 1 = affix key  									currentRule.Name = partMatches[0].Value;  									// part 2 = combine flag  									if (partMatches[1].Value == "Y") currentRule.AllowCombine = true;  									// part 3 = entry count' not used    									if (currentSection == "[Prefix]")  									{  										// add to prefix collection  										this.PrefixRules.Add(currentRule.Name' currentRule);  									}  									else   									{  										// add to suffix collection  										this.SuffixRules.Add(currentRule.Name' currentRule);  									}  								}  									//if 4 parts' then entry for current rule  								else if (partMatches.Count == 4)  								{  									// part 1 = affix key  									if (currentRule.Name == partMatches[0].Value)  									{  										AffixEntry entry = new AffixEntry();    										// part 2 = strip char  										if (partMatches[1].Value != "0") entry.StripCharacters = partMatches[1].Value;  										// part 3 = add chars  										entry.AddCharacters = partMatches[2].Value;  										// part 4 = conditions  										AffixUtility.EncodeConditions(partMatches[3].Value' entry);    										currentRule.AffixEntries.Add(entry);  									}  								}	  								break;  							case "[Phonetic]" : // ASpell phonetic rules  								// split line by white space  								partMatches = _spaceRegx.Matches(tempLine);  								if (partMatches.Count >= 2)  								{  									PhoneticRule rule = new PhoneticRule();  									PhoneticUtility.EncodeRule(partMatches[0].Value' ref rule);  									rule.ReplaceString = partMatches[1].Value;  									_phoneticRules.Add(rule);  								}  								break;  							case "[Words]" : // dictionary word list  								// splits word into its parts  								string[] parts = tempLine.Split('/');  								Word tempWord = new Word();  								// part 1 = base word  								tempWord.Text = parts[0];  								// part 2 = affix keys  								if (parts.Length >= 2) tempWord.AffixKeys = parts[1];  								// part 3 = phonetic code  								if (parts.Length >= 3) tempWord.PhoneticCode = parts[2];  								  								this.BaseWords.Add(tempWord.Text' tempWord);  								break;  						} // currentSection swith  							break;  					}
Magic Number,NetSpell.SpellChecker.Dictionary,WordDictionary,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Dictionary\WordDictionary.cs,Initialize,The following statement contains a magic number: switch (tempLine)  					{  						case "[Copyright]" :  						case "[Try]" :   						case "[Replace]" :   						case "[Prefix]" :  						case "[Suffix]" :  						case "[Phonetic]" :  						case "[Words]" :  							// set current section that is being parsed  							currentSection = tempLine;  							break;  						default :		  							// parse line and place in correct object  						switch (currentSection)  						{  							case "[Copyright]" :  								this.Copyright += tempLine + "\r\n";  								break;  							case "[Try]" : // ISpell try chars  								this.TryCharacters += tempLine;  								break;  							case "[Replace]" : // ISpell replace chars  								this.ReplaceCharacters.Add(tempLine);  								break;  							case "[Prefix]" : // MySpell prefix rules  							case "[Suffix]" : // MySpell suffix rules    								// split line by white space  								partMatches = _spaceRegx.Matches(tempLine);  									  								// if 3 parts' then new rule    								if (partMatches.Count == 3)  								{  									currentRule = new AffixRule();  									  									// part 1 = affix key  									currentRule.Name = partMatches[0].Value;  									// part 2 = combine flag  									if (partMatches[1].Value == "Y") currentRule.AllowCombine = true;  									// part 3 = entry count' not used    									if (currentSection == "[Prefix]")  									{  										// add to prefix collection  										this.PrefixRules.Add(currentRule.Name' currentRule);  									}  									else   									{  										// add to suffix collection  										this.SuffixRules.Add(currentRule.Name' currentRule);  									}  								}  									//if 4 parts' then entry for current rule  								else if (partMatches.Count == 4)  								{  									// part 1 = affix key  									if (currentRule.Name == partMatches[0].Value)  									{  										AffixEntry entry = new AffixEntry();    										// part 2 = strip char  										if (partMatches[1].Value != "0") entry.StripCharacters = partMatches[1].Value;  										// part 3 = add chars  										entry.AddCharacters = partMatches[2].Value;  										// part 4 = conditions  										AffixUtility.EncodeConditions(partMatches[3].Value' entry);    										currentRule.AffixEntries.Add(entry);  									}  								}	  								break;  							case "[Phonetic]" : // ASpell phonetic rules  								// split line by white space  								partMatches = _spaceRegx.Matches(tempLine);  								if (partMatches.Count >= 2)  								{  									PhoneticRule rule = new PhoneticRule();  									PhoneticUtility.EncodeRule(partMatches[0].Value' ref rule);  									rule.ReplaceString = partMatches[1].Value;  									_phoneticRules.Add(rule);  								}  								break;  							case "[Words]" : // dictionary word list  								// splits word into its parts  								string[] parts = tempLine.Split('/');  								Word tempWord = new Word();  								// part 1 = base word  								tempWord.Text = parts[0];  								// part 2 = affix keys  								if (parts.Length >= 2) tempWord.AffixKeys = parts[1];  								// part 3 = phonetic code  								if (parts.Length >= 3) tempWord.PhoneticCode = parts[2];  								  								this.BaseWords.Add(tempWord.Text' tempWord);  								break;  						} // currentSection swith  							break;  					}
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.optionsTabControl.Location = new System.Drawing.Point(8' 8);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.optionsTabControl.Location = new System.Drawing.Point(8' 8);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.optionsTabControl.Size = new System.Drawing.Size(386' 184);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.optionsTabControl.Size = new System.Drawing.Size(386' 184);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.generalTab.Location = new System.Drawing.Point(4' 22);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.generalTab.Location = new System.Drawing.Point(4' 22);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.generalTab.Size = new System.Drawing.Size(378' 158);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.generalTab.Size = new System.Drawing.Size(378' 158);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.IgnoreHtmlCheck.Location = new System.Drawing.Point(32' 72);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.IgnoreHtmlCheck.Location = new System.Drawing.Point(32' 72);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.IgnoreHtmlCheck.Size = new System.Drawing.Size(296' 24);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.IgnoreHtmlCheck.Size = new System.Drawing.Size(296' 24);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.IgnoreHtmlCheck.TabIndex = 9;
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.lbllabel1.Location = new System.Drawing.Point(48' 112);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.lbllabel1.Location = new System.Drawing.Point(48' 112);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.lbllabel1.Size = new System.Drawing.Size(264' 16);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.lbllabel1.Size = new System.Drawing.Size(264' 16);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.lbllabel1.TabIndex = 8;
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.MaxSuggestions.Location = new System.Drawing.Point(24' 112);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.MaxSuggestions.Location = new System.Drawing.Point(24' 112);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.MaxSuggestions.MaxLength = 2;
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.MaxSuggestions.Size = new System.Drawing.Size(24' 20);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.MaxSuggestions.Size = new System.Drawing.Size(24' 20);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.MaxSuggestions.TabIndex = 3;
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.IgnoreUpperCheck.Location = new System.Drawing.Point(32' 48);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.IgnoreUpperCheck.Location = new System.Drawing.Point(32' 48);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.IgnoreUpperCheck.Size = new System.Drawing.Size(296' 24);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.IgnoreUpperCheck.Size = new System.Drawing.Size(296' 24);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.IgnoreUpperCheck.TabIndex = 2;
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.IgnoreDigitsCheck.Location = new System.Drawing.Point(32' 24);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.IgnoreDigitsCheck.Location = new System.Drawing.Point(32' 24);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.IgnoreDigitsCheck.Size = new System.Drawing.Size(296' 24);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.IgnoreDigitsCheck.Size = new System.Drawing.Size(296' 24);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.dictionaryTab.Location = new System.Drawing.Point(4' 22);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.dictionaryTab.Location = new System.Drawing.Point(4' 22);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.dictionaryTab.Size = new System.Drawing.Size(378' 158);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.dictionaryTab.Size = new System.Drawing.Size(378' 158);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.dictionaryTab.TabIndex = 2;
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.txtCopyright.Location = new System.Drawing.Point(8' 32);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.txtCopyright.Location = new System.Drawing.Point(8' 32);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.txtCopyright.Size = new System.Drawing.Size(360' 112);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.txtCopyright.Size = new System.Drawing.Size(360' 112);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(8' 16);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(8' 16);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(208' 16);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(208' 16);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.versionsTab.Location = new System.Drawing.Point(4' 22);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.versionsTab.Location = new System.Drawing.Point(4' 22);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.versionsTab.Size = new System.Drawing.Size(378' 158);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.versionsTab.Size = new System.Drawing.Size(378' 158);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.versionsTab.TabIndex = 3;
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.assembliesListView.Size = new System.Drawing.Size(378' 158);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.assembliesListView.Size = new System.Drawing.Size(378' 158);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.assembliesListView.TabIndex = 5;
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.assemblyColumnHeader.Width = 176;
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.versionColumnHeader.Width = 92;
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.dateColumnHeader.Width = 87;
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.aboutTab.Location = new System.Drawing.Point(4' 22);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.aboutTab.Location = new System.Drawing.Point(4' 22);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.aboutTab.Size = new System.Drawing.Size(378' 158);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.aboutTab.Size = new System.Drawing.Size(378' 158);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.aboutTab.TabIndex = 4;
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.linkWebSite.Location = new System.Drawing.Point(64' 128);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.linkWebSite.Location = new System.Drawing.Point(64' 128);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.linkWebSite.Size = new System.Drawing.Size(296' 23);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.linkWebSite.Size = new System.Drawing.Size(296' 23);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.linkWebSite.TabIndex = 16;
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.lblCopyright.Location = new System.Drawing.Point(64' 64);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.lblCopyright.Location = new System.Drawing.Point(64' 64);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.lblCopyright.Size = new System.Drawing.Size(296' 23);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.lblCopyright.Size = new System.Drawing.Size(296' 23);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.lblCopyright.TabIndex = 12;
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.lblDescription.Location = new System.Drawing.Point(64' 88);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.lblDescription.Location = new System.Drawing.Point(64' 88);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.lblDescription.Size = new System.Drawing.Size(296' 40);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.lblDescription.Size = new System.Drawing.Size(296' 40);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.lblDescription.TabIndex = 11;
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.lblVersion.Location = new System.Drawing.Point(64' 40);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.lblVersion.Location = new System.Drawing.Point(64' 40);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.lblVersion.Size = new System.Drawing.Size(296' 23);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.lblVersion.Size = new System.Drawing.Size(296' 23);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.lblVersion.TabIndex = 10;
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.Location = new System.Drawing.Point(64' 16);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.Location = new System.Drawing.Point(64' 16);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.Size = new System.Drawing.Size(296' 24);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.Size = new System.Drawing.Size(296' 24);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.TabIndex = 9;
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.pbIcon.Location = new System.Drawing.Point(16' 16);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.pbIcon.Location = new System.Drawing.Point(16' 16);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.pbIcon.Size = new System.Drawing.Size(32' 32);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.pbIcon.Size = new System.Drawing.Size(32' 32);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.pbIcon.TabIndex = 15;
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.OkButton.Location = new System.Drawing.Point(226' 200);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.OkButton.Location = new System.Drawing.Point(226' 200);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.OkButton.TabIndex = 6;
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.CancelBtn.Location = new System.Drawing.Point(314' 200);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.CancelBtn.Location = new System.Drawing.Point(314' 200);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.CancelBtn.TabIndex = 7;
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 13);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 13);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(402' 232);
Magic Number,NetSpell.SpellChecker.Forms,OptionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\OptionsForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(402' 232);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.SuggestionList.Location = new System.Drawing.Point(8' 176);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.SuggestionList.Location = new System.Drawing.Point(8' 176);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.SuggestionList.Size = new System.Drawing.Size(336' 95);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.SuggestionList.Size = new System.Drawing.Size(336' 95);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.SuggestionList.TabIndex = 4;
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.ReplacementWord.Location = new System.Drawing.Point(8' 128);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.ReplacementWord.Location = new System.Drawing.Point(8' 128);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.ReplacementWord.Size = new System.Drawing.Size(336' 20);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.ReplacementWord.Size = new System.Drawing.Size(336' 20);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.ReplacementWord.TabIndex = 2;
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.ReplaceLabel.Location = new System.Drawing.Point(8' 112);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.ReplaceLabel.Location = new System.Drawing.Point(8' 112);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.ReplaceLabel.Size = new System.Drawing.Size(72' 16);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.ReplaceLabel.Size = new System.Drawing.Size(72' 16);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.SuggestionsLabel.Location = new System.Drawing.Point(8' 160);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.SuggestionsLabel.Location = new System.Drawing.Point(8' 160);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.SuggestionsLabel.Size = new System.Drawing.Size(70' 16);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.SuggestionsLabel.Size = new System.Drawing.Size(70' 16);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.SuggestionsLabel.TabIndex = 3;
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.IgnoreButton.Location = new System.Drawing.Point(360' 24);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.IgnoreButton.Location = new System.Drawing.Point(360' 24);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.IgnoreButton.TabIndex = 5;
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.ReplaceButton.Location = new System.Drawing.Point(360' 136);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.ReplaceButton.Location = new System.Drawing.Point(360' 136);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.ReplaceButton.TabIndex = 8;
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.ReplaceAllButton.Location = new System.Drawing.Point(360' 168);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.ReplaceAllButton.Location = new System.Drawing.Point(360' 168);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.ReplaceAllButton.TabIndex = 9;
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.IgnoreAllButton.Location = new System.Drawing.Point(360' 56);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.IgnoreAllButton.Location = new System.Drawing.Point(360' 56);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.IgnoreAllButton.TabIndex = 6;
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.CancelBtn.Location = new System.Drawing.Point(360' 248);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.CancelBtn.Location = new System.Drawing.Point(360' 248);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.CancelBtn.TabIndex = 11;
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.TextBeingChecked.Location = new System.Drawing.Point(8' 24);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.TextBeingChecked.Location = new System.Drawing.Point(8' 24);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.TextBeingChecked.Size = new System.Drawing.Size(336' 72);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.TextBeingChecked.Size = new System.Drawing.Size(336' 72);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.TextLabel.Location = new System.Drawing.Point(8' 8);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.TextLabel.Location = new System.Drawing.Point(8' 8);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.TextLabel.Size = new System.Drawing.Size(109' 16);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.TextLabel.Size = new System.Drawing.Size(109' 16);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.spellStatus.Location = new System.Drawing.Point(0' 288);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.spellStatus.Size = new System.Drawing.Size(450' 16);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.spellStatus.Size = new System.Drawing.Size(450' 16);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.spellStatus.TabIndex = 14;
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.statusPaneWord.Width = 254;
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.statusPaneIndex.Width = 80;
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.OptionsButton.Location = new System.Drawing.Point(360' 208);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.OptionsButton.Location = new System.Drawing.Point(360' 208);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.OptionsButton.TabIndex = 10;
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.AddButton.Location = new System.Drawing.Point(360' 96);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.AddButton.Location = new System.Drawing.Point(360' 96);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.AddButton.TabIndex = 7;
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 13);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size(5' 13);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(450' 304);
Magic Number,NetSpell.SpellChecker.Forms,SuggestionForm,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Forms\SuggestionForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(450' 304);
Missing Default,NetSpell.SpellChecker.Dictionary,WordDictionary,D:\research\architectureSmells\repos\mlocati_betterpoeditor\src\NetSpell.SpellChecker\Dictionary\WordDictionary.cs,Initialize,The following switch statement is missing a default case: switch (currentSection)  						{  							case "[Copyright]" :  								this.Copyright += tempLine + "\r\n";  								break;  							case "[Try]" : // ISpell try chars  								this.TryCharacters += tempLine;  								break;  							case "[Replace]" : // ISpell replace chars  								this.ReplaceCharacters.Add(tempLine);  								break;  							case "[Prefix]" : // MySpell prefix rules  							case "[Suffix]" : // MySpell suffix rules    								// split line by white space  								partMatches = _spaceRegx.Matches(tempLine);  									  								// if 3 parts' then new rule    								if (partMatches.Count == 3)  								{  									currentRule = new AffixRule();  									  									// part 1 = affix key  									currentRule.Name = partMatches[0].Value;  									// part 2 = combine flag  									if (partMatches[1].Value == "Y") currentRule.AllowCombine = true;  									// part 3 = entry count' not used    									if (currentSection == "[Prefix]")  									{  										// add to prefix collection  										this.PrefixRules.Add(currentRule.Name' currentRule);  									}  									else   									{  										// add to suffix collection  										this.SuffixRules.Add(currentRule.Name' currentRule);  									}  								}  									//if 4 parts' then entry for current rule  								else if (partMatches.Count == 4)  								{  									// part 1 = affix key  									if (currentRule.Name == partMatches[0].Value)  									{  										AffixEntry entry = new AffixEntry();    										// part 2 = strip char  										if (partMatches[1].Value != "0") entry.StripCharacters = partMatches[1].Value;  										// part 3 = add chars  										entry.AddCharacters = partMatches[2].Value;  										// part 4 = conditions  										AffixUtility.EncodeConditions(partMatches[3].Value' entry);    										currentRule.AffixEntries.Add(entry);  									}  								}	  								break;  							case "[Phonetic]" : // ASpell phonetic rules  								// split line by white space  								partMatches = _spaceRegx.Matches(tempLine);  								if (partMatches.Count >= 2)  								{  									PhoneticRule rule = new PhoneticRule();  									PhoneticUtility.EncodeRule(partMatches[0].Value' ref rule);  									rule.ReplaceString = partMatches[1].Value;  									_phoneticRules.Add(rule);  								}  								break;  							case "[Words]" : // dictionary word list  								// splits word into its parts  								string[] parts = tempLine.Split('/');  								Word tempWord = new Word();  								// part 1 = base word  								tempWord.Text = parts[0];  								// part 2 = affix keys  								if (parts.Length >= 2) tempWord.AffixKeys = parts[1];  								// part 3 = phonetic code  								if (parts.Length >= 3) tempWord.PhoneticCode = parts[2];  								  								this.BaseWords.Add(tempWord.Text' tempWord);  								break;  						}
