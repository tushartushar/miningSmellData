Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Orleankka.Features.Actor_behaviors,BehaviorTester,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Actor_behaviors\BehaviorTester.cs,State,The method has 5 parameters. Parameters: name' receive' super' extend' trait
Long Statement,Reminders_idempotency,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Reminders_idempotency.cs,CleanRemindersTable,The length of the statement  "                var getGrain = getGrainGeneric.MakeGenericMethod(typeof(IReminderTable).Assembly.GetType("Orleans.IReminderTableGrain")); " is 121.
Long Statement,Orleankka.Testing,RequiresSiloAttribute,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Testing\TestActions.cs,BeforeTest,The length of the statement  "                .UseDevelopmentClustering(options => options.PrimarySiloEndpoint = new IPEndPoint(LocalhostSiloAddress' LocalhostSiloPort)) " is 123.
Magic Number,Orleankka.Checks,DispatcherFixture,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Checks\DispatcherFixture.cs,Calls_fallback_when_handler_not_found,The following statement contains a magic number: Assert.DoesNotThrowAsync(async () => await dispatcher.DispatchResultAsync(target' unknownMessage' message =>              {                  bouncedMessage = message;                  return Task.FromResult((object)42);              }));
Magic Number,Orleankka.Checks,DispatcherFixture,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Checks\DispatcherFixture.cs,Custom_naming_conventions,The following statement contains a magic number: Assert.That(await dispatcher.DispatchResultAsync(target' "custom handler name")' Is.EqualTo(42));
Magic Number,Intercepting_requests,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Intercepting_requests.cs,Intercepting_stream_messages,The following statement contains a magic number: await Task.Delay(TimeSpan.FromMilliseconds(10));
Magic Number,Message_based_timers,TestInterleavedTimerMessageActor,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Message_based_timers.cs,Receive,The following statement contains a magic number: switch (message)                  {                      case NumberOfTimesTimerTicked x:                           if (Timers.IsRegistered("test"))                              Timers.Unregister("test");                          return TaskResult.From(ticked);                                            case SetOneOffTimer x:                           Timers.Register("test"' TimeSpan.FromMilliseconds(10));                          return TaskResult.Done;                        case SetPeriodicTimer x:                           Timers.Register("test"' x.Period' x.Period);                          return TaskResult.Done;                                            case Timer x:                          ticked++;                          return TaskResult.Done;                                          }
Magic Number,Message_based_timers,TestCustomTimerMessageActor,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Message_based_timers.cs,Receive,The following statement contains a magic number: switch (message)                  {                      case CustomTimerMessageReceived x:                           return TaskResult.From(customMessageReceived);                                            case SetCustomTimerMessage x:                           Timers.Register("test"' TimeSpan.FromMilliseconds(10)' message: new CustomTimerMessage());                          return TaskResult.Done;                                            case CustomTimerMessage x:                          customMessageReceived = true;                          return TaskResult.Done;                                          }
Magic Number,Message_based_timers,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Message_based_timers.cs,When_setting_interleaved_one_off_timer,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Message_based_timers,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Message_based_timers.cs,When_setting_interleaved_periodic_timer,The following statement contains a magic number: const int times = 10;
Magic Number,Message_based_timers,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Message_based_timers.cs,When_setting_interleaved_periodic_timer,The following statement contains a magic number: var period = TimeSpan.FromMilliseconds(15);
Magic Number,Message_based_timers,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Message_based_timers.cs,When_setting_interleaved_periodic_timer,The following statement contains a magic number: Thread.Sleep(period * times * 2);
Magic Number,Message_based_timers,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Message_based_timers.cs,When_sending_custom_timer_message,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Message_based_timers,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Message_based_timers.cs,When_sending_interleaved_fire_and_forget_message,The following statement contains a magic number: var period = TimeSpan.FromMilliseconds(15);
Magic Number,Message_based_timers,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Message_based_timers.cs,When_sending_interleaved_fire_and_forget_message,The following statement contains a magic number: const int times = 10;
Magic Number,Message_based_timers,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Message_based_timers.cs,When_sending_interleaved_fire_and_forget_message,The following statement contains a magic number: Thread.Sleep(period * times * 2);
Magic Number,Message_based_timers,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Message_based_timers.cs,When_sending_non_interleaved_fire_and_forget_message,The following statement contains a magic number: var period = TimeSpan.FromMilliseconds(15);
Magic Number,Message_based_timers,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Message_based_timers.cs,When_sending_non_interleaved_fire_and_forget_message,The following statement contains a magic number: const int times = 10;
Magic Number,Message_based_timers,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Message_based_timers.cs,When_sending_non_interleaved_fire_and_forget_message,The following statement contains a magic number: Thread.Sleep(period * times * 2);
Magic Number,Observing_notifications,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Observing_notifications.cs,CheckClientRef,The following statement contains a magic number: done.WaitOne(TimeSpan.FromMilliseconds(100));
Magic Number,Observing_notifications,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Observing_notifications.cs,CheckClientRef,The following statement contains a magic number: done.WaitOne(TimeSpan.FromMilliseconds(100));
Magic Number,One_off_timers,TestActor,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\One_off_timers.cs,On,The following statement contains a magic number: Timers.Register("test"' TimeSpan.FromMilliseconds(10)' () =>                  {                      fired++;                      return Task.CompletedTask;                  });
Magic Number,One_off_timers,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\One_off_timers.cs,When_setting_one_off_timer,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,Reentrant_messages,TestReentrantStreamConsumerActor,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Reentrant_messages.cs,On,The following statement contains a magic number: await stream1.Subscribe<int>(item =>                  {                      streamMessagesInProgress.Add(item);                      return Task.Delay(500);                  });
Magic Number,Reentrant_messages,TestReentrantStreamConsumerActor,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Reentrant_messages.cs,On,The following statement contains a magic number: await stream2.Subscribe<string>(item =>                  {                      streamMessagesInProgress.Add(item);                      return Task.Delay(500);                  });
Magic Number,Reentrant_messages,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Reentrant_messages.cs,TestReentrantReceive,The following statement contains a magic number: var nr1 = actor.Tell(new NonReentrantMessage {Id = 1' Delay = TimeSpan.FromMilliseconds(500)});
Magic Number,Reentrant_messages,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Reentrant_messages.cs,TestReentrantReceive,The following statement contains a magic number: await Task.Delay(50);
Magic Number,Reentrant_messages,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Reentrant_messages.cs,TestReentrantReceive,The following statement contains a magic number: var nr2 = actor.Tell(new NonReentrantMessage {Id = 2' Delay = TimeSpan.FromMilliseconds(500)});
Magic Number,Reentrant_messages,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Reentrant_messages.cs,TestReentrantReceive,The following statement contains a magic number: var nr2 = actor.Tell(new NonReentrantMessage {Id = 2' Delay = TimeSpan.FromMilliseconds(500)});
Magic Number,Reentrant_messages,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Reentrant_messages.cs,TestReentrantReceive,The following statement contains a magic number: await Task.Delay(50);
Magic Number,Reentrant_messages,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Reentrant_messages.cs,TestReentrantReceive,The following statement contains a magic number: var r1 = actor.Ask(new ReentrantMessage {Id = 1' Delay = TimeSpan.FromMilliseconds(100)});
Magic Number,Reentrant_messages,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Reentrant_messages.cs,TestReentrantReceive,The following statement contains a magic number: await Task.Delay(50);
Magic Number,Reentrant_messages,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Reentrant_messages.cs,TestReentrantReceive,The following statement contains a magic number: var r2 = actor.Ask(new ReentrantMessage {Id = 2' Delay = TimeSpan.FromMilliseconds(100)});
Magic Number,Reentrant_messages,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Reentrant_messages.cs,TestReentrantReceive,The following statement contains a magic number: var r2 = actor.Ask(new ReentrantMessage {Id = 2' Delay = TimeSpan.FromMilliseconds(100)});
Magic Number,Reentrant_messages,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Reentrant_messages.cs,TestReentrantReceive,The following statement contains a magic number: await Task.Delay(50);
Magic Number,Reentrant_messages,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Reentrant_messages.cs,TestReentrantReceive,The following statement contains a magic number: Assert.That(state.ReentrantInProgress[0]' Is.EqualTo(2)' "Should be the second message");
Magic Number,Reentrant_messages,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Reentrant_messages.cs,When_actor_received_reentrant_message_via_Stream,The following statement contains a magic number: await Task.Delay(100);
Magic Number,Reentrant_messages,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Reentrant_messages.cs,When_actor_received_reentrant_message_via_Stream,The following statement contains a magic number: var i2 = stream1.Push(2);
Magic Number,Reentrant_messages,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Reentrant_messages.cs,When_actor_received_reentrant_message_via_Stream,The following statement contains a magic number: await Task.Delay(100);
Magic Number,Reentrant_messages,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Reentrant_messages.cs,When_actor_received_reentrant_message_via_Stream,The following statement contains a magic number: Assert.That(inProgress' Has.Count.EqualTo(2));
Magic Number,Reentrant_messages,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Reentrant_messages.cs,When_actor_received_reentrant_message_via_Stream,The following statement contains a magic number: Assert.That(inProgress[1]' Is.EqualTo(2));
Magic Number,Reentrant_messages,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Reentrant_messages.cs,When_actor_received_non_reentrant_message_via_Stream,The following statement contains a magic number: await Task.Delay(100);
Magic Number,Reentrant_messages,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Reentrant_messages.cs,When_actor_received_non_reentrant_message_via_Stream,The following statement contains a magic number: await Task.Delay(100);
Magic Number,Reminders_idempotency,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Reminders_idempotency.cs,CleanRemindersTable,The following statement contains a magic number: var grain = (IReminderTable)getGrain.Invoke(TestActorSystem.Client' new object[]{12345' null});
Magic Number,Stream_subscriptions,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Stream_subscriptions.cs,Resuming_on_reactivation,The following statement contains a magic number: await Task.Delay(TimeSpan.FromSeconds(61));
Magic Number,Stream_subscriptions,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Stream_subscriptions.cs,Select_all_filter,The following statement contains a magic number: await stream.Push(123);
Magic Number,Strongly_typed_actors,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Strongly_typed_actors.cs,Request_response,The following statement contains a magic number: Assert.That(await actor.Ask(new TestActorQuery())' Is.EqualTo(42));
Magic Number,Using_reminders,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Using_reminders.cs,When_reminder_is_fired_an_instance_of_correct_actor_type_should_be_activated,The following statement contains a magic number: await actor.Tell(new SetReminder {Period = TimeSpan.FromMinutes(1.5)});
Magic Number,Using_reminders,Tests,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Using_reminders.cs,When_reminder_is_fired_an_instance_of_correct_actor_type_should_be_activated,The following statement contains a magic number: await Task.Delay(TimeSpan.FromMinutes(2.0));
Magic Number,Orleankka.Testing,TeardownSiloAttribute,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Testing\TestActions.cs,AfterTest,The following statement contains a magic number: var timeout = TimeSpan.FromSeconds(5);
Missing Default,Orleankka.Features.Actor_behaviors,BehaviorTester,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Actor_behaviors\BehaviorTester.cs,RecordTransitions,The following switch statement is missing a default case: switch (message)              {                  case Become _ :                      events.Add($"OnBecome_{behavior}");                      break;                  case Unbecome _ :                      events.Add($"OnUnbecome_{behavior}");                      break;                                          case Activate _ :                      events.Add($"OnActivate_{behavior}");                      break;                                          case Deactivate _ :                      events.Add($"OnDeactivate_{behavior}");                      break;              }
Missing Default,Intercepting_requests,TestActorMiddleware,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Intercepting_requests.cs,Receive,The following switch statement is missing a default case: switch (message)                  {                      case SetText msg:                                                    if (msg.Text == "interrupt")                              throw new InvalidOperationException();                                                    msg.Text += ".intercepted";                          break;                        case StreamItem item:                          item.Text += ".intercepted";                          break;                  }
Missing Default,Message_based_timers,TestInterleavedTimerMessageActor,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Message_based_timers.cs,Receive,The following switch statement is missing a default case: switch (message)                  {                      case NumberOfTimesTimerTicked x:                           if (Timers.IsRegistered("test"))                              Timers.Unregister("test");                          return TaskResult.From(ticked);                                            case SetOneOffTimer x:                           Timers.Register("test"' TimeSpan.FromMilliseconds(10));                          return TaskResult.Done;                        case SetPeriodicTimer x:                           Timers.Register("test"' x.Period' x.Period);                          return TaskResult.Done;                                            case Timer x:                          ticked++;                          return TaskResult.Done;                                          }
Missing Default,Message_based_timers,TestCustomTimerMessageActor,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Message_based_timers.cs,Receive,The following switch statement is missing a default case: switch (message)                  {                      case CustomTimerMessageReceived x:                           return TaskResult.From(customMessageReceived);                                            case SetCustomTimerMessage x:                           Timers.Register("test"' TimeSpan.FromMilliseconds(10)' message: new CustomTimerMessage());                          return TaskResult.Done;                                            case CustomTimerMessage x:                          customMessageReceived = true;                          return TaskResult.Done;                                          }
Missing Default,Message_based_timers,TestFireAndForgetWithNonInterleavedTimerMessageActor,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Message_based_timers.cs,Receive,The following switch statement is missing a default case: switch (message)                  {                      case NumberOfTimesTimerTicked _:                           Timers.Unregister("test");                          outstanding.ForEach(x => x.SetResult(true));                          return outstanding.Count;                                            case SetTimer x:                          Timers.Register("test"' x.Period' x.Period' interleave: x.Interleave' fireAndForget: x.FireAndForget);                          return Done;                                            case Timer x:                          var tcs = new TaskCompletionSource<bool>();                          outstanding.Add(tcs);                          await tcs.Task;                          return Done;                  }
Missing Default,Storage_provider_facet,TestActor,D:\research\architectureSmells\repos\yevhen_Orleankka\Tests\Orleankka.Tests\Features\Storage_provider_facet.cs,Receive,The following switch statement is missing a default case: switch (message)                  {                     case GetState _:                         return TaskResult.From(storage.State.Data);                  }
