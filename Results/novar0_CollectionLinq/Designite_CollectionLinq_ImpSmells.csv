Implementation smell,Namespace,Class,File,Method,Description
Complex Method,BusinessClassLibrary.Collections.Linq,ReadOnlyFiniteSet,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\ReadOnlyFiniteSet.cs,Except,Cyclomatic complexity of the method is 10
Complex Method,BusinessClassLibrary.Collections.Linq,ReadOnlyFiniteSet,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\ReadOnlyFiniteSet.cs,SymmetricExcept,Cyclomatic complexity of the method is 10
Complex Method,BusinessClassLibrary.Collections.Linq,ReadOnlyFiniteSet,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\ReadOnlyFiniteSet.cs,Intersect,Cyclomatic complexity of the method is 8
Complex Method,BusinessClassLibrary.Collections.Linq,ReadOnlyFiniteSet,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\ReadOnlyFiniteSet.cs,Union,Cyclomatic complexity of the method is 8
Long Statement,BusinessClassLibrary.Collections.Linq,ReadOnlyCollection,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\ReadOnlyCollection.cs,Select,The length of the statement  "	return (source.Count < 1) ? (IReadOnlyCollection<TResult>)ReadOnlyList.Empty<TResult> () : new SelectReadOnlyCollection<TSource' TResult> (source' selector); " is 157.
Long Statement,BusinessClassLibrary.Collections.Linq,ReadOnlyCollection,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\ReadOnlyCollection.cs,Select,The length of the statement  "	return (source.Count < 1) ? (IReadOnlyCollection<TResult>)ReadOnlyList.Empty<TResult> () : new SelectIndexReadOnlyCollection<TSource' TResult> (source' selector); " is 162.
Long Statement,BusinessClassLibrary.Collections.Linq,ReadOnlyCollection,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\ReadOnlyCollection.cs,Zip,The length of the statement  "	return ((first.Count < 1) || (second.Count < 1)) ? (IReadOnlyCollection<TResult>)ReadOnlyList.Empty<TResult> () : new ZipReadOnlyCollection<TFirst' TSecond' TResult> (first' second' selector); " is 192.
Long Statement,BusinessClassLibrary.Collections.Linq,ReadOnlyList,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\ReadOnlyList.cs,Select,The length of the statement  "	return (source.Count < 1) ? (IReadOnlyList<TResult>)EmptyReadOnlyList<TResult>.GetInstance () : new SelectReadOnlyList<TSource' TResult> (source' selector); " is 156.
Long Statement,BusinessClassLibrary.Collections.Linq,ReadOnlyList,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\ReadOnlyList.cs,Select,The length of the statement  "	return (source.Count < 1) ? (IReadOnlyList<TResult>)EmptyReadOnlyList<TResult>.GetInstance () : new SelectIndexReadOnlyList<TSource' TResult> (source' selector); " is 161.
Long Statement,BusinessClassLibrary.Collections.Linq,ReadOnlyList,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\ReadOnlyList.cs,Zip,The length of the statement  "	return ((first.Count < 1) || (second.Count < 1)) ? (IReadOnlyList<TResult>)EmptyReadOnlyList<TResult>.GetInstance () : new ZipReadOnlyList<TFirst' TSecond' TResult> (first' second' selector); " is 191.
Magic Number,BusinessClassLibrary.Collections.Linq,ReadOnlyCollection,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\ReadOnlyCollection.cs,Reverse,The following statement contains a magic number: if (source.Count < 2) {  	return source;  }  
Magic Number,BusinessClassLibrary.Collections.Linq,ReadOnlyCollection,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\ReadOnlyCollection.cs,ThenBy,The following statement contains a magic number: if (source.Count < 2) {  	return source;  }  
Magic Number,BusinessClassLibrary.Collections.Linq,ReadOnlyCollection,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\ReadOnlyCollection.cs,ThenByDescending,The following statement contains a magic number: if (source.Count < 2) {  	return source;  }  
Magic Number,BusinessClassLibrary.Collections.Linq,ReadOnlyFiniteSet,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\ReadOnlyFiniteSet.cs,Reverse,The following statement contains a magic number: if (source.Count < 2) {  	return source;  }  
Magic Number,BusinessClassLibrary.Collections.Linq,ReadOnlyList,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\ReadOnlyList.cs,Range,The following statement contains a magic number: switch (count) {  case 0:  	return EmptyReadOnlyList<int>.GetInstance ();  case 1:  	return new int[] {  		start  	};  case 2:  	return new int[] {  		start'  		start + 1  	};  case 3:  	return new int[] {  		start'  		start + 1'  		start + 2  	};  default:  	return new RangeReadOnlyList (start' count);  }  
Magic Number,BusinessClassLibrary.Collections.Linq,ReadOnlyList,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\ReadOnlyList.cs,Range,The following statement contains a magic number: switch (count) {  case 0:  	return EmptyReadOnlyList<int>.GetInstance ();  case 1:  	return new int[] {  		start  	};  case 2:  	return new int[] {  		start'  		start + 1  	};  case 3:  	return new int[] {  		start'  		start + 1'  		start + 2  	};  default:  	return new RangeReadOnlyList (start' count);  }  
Magic Number,BusinessClassLibrary.Collections.Linq,ReadOnlyList,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\ReadOnlyList.cs,Range,The following statement contains a magic number: switch (count) {  case 0:  	return EmptyReadOnlyList<int>.GetInstance ();  case 1:  	return new int[] {  		start  	};  case 2:  	return new int[] {  		start'  		start + 1  	};  case 3:  	return new int[] {  		start'  		start + 1'  		start + 2  	};  default:  	return new RangeReadOnlyList (start' count);  }  
Magic Number,BusinessClassLibrary.Collections.Linq,ReadOnlyList,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\ReadOnlyList.cs,Range,The following statement contains a magic number: return new int[] {  	start'  	start + 1'  	start + 2  };  
Magic Number,BusinessClassLibrary.Collections.Linq,ReadOnlyList,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\ReadOnlyList.cs,Repeat,The following statement contains a magic number: switch (count) {  case 0:  	return EmptyReadOnlyList<TResult>.GetInstance ();  case 1:  	return new TResult[] {  		element  	};  case 2:  	return new TResult[] {  		element'  		element  	};  case 3:  	return new TResult[] {  		element'  		element'  		element  	};  default:  	return new RepeatReadOnlyList<TResult> (element' count);  }  
Magic Number,BusinessClassLibrary.Collections.Linq,ReadOnlyList,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\ReadOnlyList.cs,Repeat,The following statement contains a magic number: switch (count) {  case 0:  	return EmptyReadOnlyList<TResult>.GetInstance ();  case 1:  	return new TResult[] {  		element  	};  case 2:  	return new TResult[] {  		element'  		element  	};  case 3:  	return new TResult[] {  		element'  		element'  		element  	};  default:  	return new RepeatReadOnlyList<TResult> (element' count);  }  
Magic Number,BusinessClassLibrary.Collections.Linq,ReadOnlyList,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\ReadOnlyList.cs,Reverse,The following statement contains a magic number: if (source.Count < 2) {  	return source;  }  
Magic Number,BusinessClassLibrary.Collections.Linq,ReadOnlyList,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\ReadOnlyList.cs,ThenBy,The following statement contains a magic number: if (source.Count < 2) {  	return source;  }  
Magic Number,BusinessClassLibrary.Collections.Linq,ReadOnlyList,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\ReadOnlyList.cs,ThenByDescending,The following statement contains a magic number: if (source.Count < 2) {  	return source;  }  
Magic Number,BusinessClassLibrary.Collections.Linq,ListRangeEnumerator,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\ListRangeEnumerator.cs,MoveNext,The following statement contains a magic number: if (_index == -2) {  	return false;  }  
Magic Number,BusinessClassLibrary.Collections.Linq,ListRangeEnumerator,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\ListRangeEnumerator.cs,MoveNext,The following statement contains a magic number: if (_index == _count) {  	_index = -2;  	_current = default(TSource);  	return false;  }  
Magic Number,BusinessClassLibrary.Collections.Linq,ListRangeEnumerator,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\ListRangeEnumerator.cs,MoveNext,The following statement contains a magic number: _index = -2;  
Magic Number,BusinessClassLibrary.Collections.Linq,ListRangeEnumerator,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\ListRangeEnumerator.cs,Dispose,The following statement contains a magic number: _index = -2;  
Magic Number,BusinessClassLibrary.Collections.Linq,ReverseListEnumerator,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\ReverseListEnumerator.cs,MoveNext,The following statement contains a magic number: if (_index == -2) {  	return false;  }  
Magic Number,BusinessClassLibrary.Collections.Linq,ReverseListEnumerator,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\ReverseListEnumerator.cs,MoveNext,The following statement contains a magic number: if (_index == _source.Count) {  	_index = -2;  	_current = default(TSource);  	return false;  }  
Magic Number,BusinessClassLibrary.Collections.Linq,ReverseListEnumerator,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\ReverseListEnumerator.cs,MoveNext,The following statement contains a magic number: _index = -2;  
Magic Number,BusinessClassLibrary.Collections.Linq,ReverseListEnumerator,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\ReverseListEnumerator.cs,Dispose,The following statement contains a magic number: _index = -2;  
Magic Number,BusinessClassLibrary.Collections.Linq,TwoListConcatEnumerator,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\TwoListConcatEnumerator.cs,MoveNext,The following statement contains a magic number: if (_index == -2) {  	return false;  }  
Magic Number,BusinessClassLibrary.Collections.Linq,TwoListConcatEnumerator,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\TwoListConcatEnumerator.cs,MoveNext,The following statement contains a magic number: if (_index == (_first.Count + _second.Count)) {  	_index = -2;  	_current = default(TSource);  	return false;  }  
Magic Number,BusinessClassLibrary.Collections.Linq,TwoListConcatEnumerator,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\TwoListConcatEnumerator.cs,MoveNext,The following statement contains a magic number: _index = -2;  
Magic Number,BusinessClassLibrary.Collections.Linq,TwoListConcatEnumerator,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\TwoListConcatEnumerator.cs,Dispose,The following statement contains a magic number: _index = -2;  
Magic Number,BusinessClassLibrary.Collections.Linq,TwoListZipEnumerator,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\TwoListZipEnumerator.cs,MoveNext,The following statement contains a magic number: if (_index == -2) {  	return false;  }  
Magic Number,BusinessClassLibrary.Collections.Linq,TwoListZipEnumerator,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\TwoListZipEnumerator.cs,MoveNext,The following statement contains a magic number: if (_index == Math.Min (_first.Count' _second.Count)) {  	_index = -2;  	_current = default(TResult);  	return false;  }  
Magic Number,BusinessClassLibrary.Collections.Linq,TwoListZipEnumerator,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\TwoListZipEnumerator.cs,MoveNext,The following statement contains a magic number: _index = -2;  
Magic Number,BusinessClassLibrary.Collections.Linq,TwoListZipEnumerator,C:\repos\novar0_CollectionLinq\CollectionLinq\CollectionLinq\TwoListZipEnumerator.cs,Dispose,The following statement contains a magic number: _index = -2;  
