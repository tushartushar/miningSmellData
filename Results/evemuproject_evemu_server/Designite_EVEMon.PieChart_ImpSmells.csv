Implementation smell,Namespace,Class,File,Method,Description
Complex Method,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,FindPieSliceUnderPoint,Cyclomatic complexity of the method is 18
Complex Method,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,InitializePieSlices,Cyclomatic complexity of the method is 9
Long Parameter List,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,PieChart3D,The method has 5 parameters. Parameters: xBoundingRect' yBoundingRect' widthBoundingRect' heightBoundingRect' values
Long Parameter List,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,PieChart3D,The method has 6 parameters. Parameters: xBoundingRect' yBoundingRect' widthBoundingRect' heightBoundingRect' values' sliceRelativeHeight
Long Parameter List,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,PieChart3D,The method has 7 parameters. Parameters: xBoundingRect' yBoundingRect' widthBoundingRect' heightBoundingRect' values' sliceColors' sliceRelativeHeight
Long Parameter List,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,PieChart3D,The method has 8 parameters. Parameters: xBoundingRect' yBoundingRect' widthBoundingRect' heightBoundingRect' values' sliceColors' sliceRelativeHeight' texts
Long Parameter List,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,PieChart3D,The method has 7 parameters. Parameters: xBoundingRect' yBoundingRect' widthBoundingRect' heightBoundingRect' values' sliceRelativeHeight' texts
Long Parameter List,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,CreatePieSlice,The method has 11 parameters. Parameters: boundingRectLeft' boundingRectTop' boundingRectWidth' boundingRectHeight' sliceHeight' startAngle' sweepAngle' color' shadowStyle' edgeColorType' edgeLineWidth
Long Parameter List,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,CreatePieSliceHighlighted,The method has 11 parameters. Parameters: boundingRectLeft' boundingRectTop' boundingRectWidth' boundingRectHeight' sliceHeight' startAngle' sweepAngle' color' shadowStyle' edgeColorType' edgeLineWidth
Long Parameter List,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,PieSlice,The method has 7 parameters. Parameters: xBoundingRect' yBoundingRect' widthBoundingRect' heightBoundingRect' startAngle' sweepAngle' surfaceColor
Long Parameter List,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,PieSlice,The method has 10 parameters. Parameters: xBoundingRect' yBoundingRect' widthBoundingRect' heightBoundingRect' sliceHeight' startAngle' sweepAngle' surfaceColor' shadowStyle' edgeColorType
Long Parameter List,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,PieSlice,The method has 7 parameters. Parameters: boundingRect' sliceHeight' startAngle' sweepAngle' surfaceColor' shadowStyle' edgeColorType
Long Parameter List,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,PieSlice,The method has 11 parameters. Parameters: xBoundingRect' yBoundingRect' widthBoundingRect' heightBoundingRect' sliceHeight' startAngle' sweepAngle' surfaceColor' shadowStyle' edgeColorType' edgeLineWidth
Long Parameter List,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,PieSlice,The method has 8 parameters. Parameters: boundingRect' sliceHeight' startAngle' sweepAngle' surfaceColor' shadowStyle' edgeColorType' edgeLineWidth
Long Parameter List,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,Readjust,The method has 5 parameters. Parameters: xBoundingRect' yBoundingRect' widthBoundingRect' heightBoundingRect' sliceHeight
Long Parameter List,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,DrawCylinderSurfaceSection,The method has 7 parameters. Parameters: graphics' pen' brush' startAngle' endAngle' pointStart' pointEnd
Long Parameter List,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,PeripheralPoint,The method has 5 parameters. Parameters: xCenter' yCenter' semiMajor' semiMinor' angleDegrees
Long Parameter List,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,InitializePieSlice,The method has 5 parameters. Parameters: xBoundingRect' yBoundingRect' widthBoundingRect' heightBoundingRect' sliceHeight
Long Parameter List,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,CylinderSurfaceSectionContainsPoint,The method has 5 parameters. Parameters: point' startAngle' endAngle' point1' point2
Long Parameter List,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,PieSliceContainsPoint,The method has 7 parameters. Parameters: point' xBoundingRectangle' yBoundingRectangle' widthBoundingRectangle' heightBoundingRectangle' startAngle' sweepAngle
Long Parameter List,EVEMon.PieChart,Quadrilateral,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\Quadrilateral.cs,Quadrilateral,The method has 5 parameters. Parameters: point1' point2' point3' point4' toClose
Long Identifier,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,InitializePieSlices,The length of the parameter largestDisplacementEllipseSize is 30.
Long Identifier,EVEMon.PieChart,PieChartControl,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChartControl.cs,,The length of the parameter m_drawRelativeSliceDisplacements is 32.
Long Statement,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,GetForemostPieSlice,The length of the statement  "                    ((pieSlice.StartAngle + pieSlice.SweepAngle > 360) && ((pieSlice.StartAngle) <= 450) && (pieSlice.StartAngle + pieSlice.SweepAngle) >= 450)) " is 140.
Long Statement,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,InitializePieSlices,The length of the statement  "                    SizeF pieDisplacement = GetSliceDisplacement((float)(startAngle + sweepAngle / 2)' m_sliceRelativeDisplacements[displacementIndex]); " is 132.
Long Statement,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,InitializePieSlices,The length of the statement  "                    slice = CreatePieSliceHighlighted(m_xBoundingRect + largestDisplacementEllipseSize.Width / 2 + xDisplacement' m_yBoundingRect + largestDisplacementEllipseSize.Height / 2 + yDisplacement' topEllipeSize.Width' topEllipeSize.Height' PieHeight' (float)(startAngle % 360)' (float)(sweepAngle)' m_sliceColors[colorIndex]' m_shadowStyle' m_edgeColorType' m_edgeLineWidth); " is 365.
Long Statement,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,InitializePieSlices,The length of the statement  "                    slice = CreatePieSlice(m_xBoundingRect + largestDisplacementEllipseSize.Width / 2 + xDisplacement' m_yBoundingRect + largestDisplacementEllipseSize.Height / 2 + yDisplacement' topEllipeSize.Width' topEllipeSize.Height' PieHeight' (float)(startAngle % 360)' (float)(sweepAngle)' m_sliceColors[colorIndex]' m_shadowStyle' m_edgeColorType' m_edgeLineWidth); " is 354.
Long Statement,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,InitializePieSlices,The length of the statement  "                if (backPieIndex > -1 || ((startAngle <= 270) && (startAngle + sweepAngle > 270)) || ((startAngle >= 270) && (startAngle + sweepAngle > 630))) " is 142.
Long Statement,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,CreatePieSlice,The length of the statement  "            return new PieSlice(boundingRectLeft' boundingRectTop' boundingRectWidth' boundingRectHeight' sliceHeight' (float)(startAngle % 360)' sweepAngle' color' shadowStyle' edgeColorType' edgeLineWidth); " is 196.
Long Statement,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,CreatePieSliceHighlighted,The length of the statement  "            return new PieSlice(boundingRectLeft' boundingRectTop' boundingRectWidth' boundingRectHeight' sliceHeight' (float)(startAngle % 360)' sweepAngle' highLightedColor' shadowStyle' edgeColorType' edgeLineWidth); " is 207.
Long Statement,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,DrawSliceSides,The length of the statement  "            if ((m_pieSlices[0].StartAngle > 90) && (m_pieSlices[0].StartAngle <= 270) && (m_pieSlices[0].StartAngle + m_pieSlices[0].SweepAngle > 450)) " is 140.
Long Statement,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,DrawSliceSides,The length of the statement  "            else if (((m_pieSlices[0].StartAngle > 270) && (m_pieSlices[0].StartAngle + m_pieSlices[0].SweepAngle > 450)) || ((m_pieSlices[0].StartAngle < 90) && (m_pieSlices[0].StartAngle + m_pieSlices[0].SweepAngle > 270))) " is 213.
Long Statement,EVEMon.PieChart,PieChartControl,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChartControl.cs,DoDraw,The length of the statement  "                    m_pieChart = new PieChart3D(m_leftMargin' m_topMargin' width' height' m_drawValues' m_drawColors' m_sliceRelativeHeight' m_drawTexts); " is 134.
Long Statement,EVEMon.PieChart,PieChartControl,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChartControl.cs,DoDraw,The length of the statement  "                    m_pieChart = new PieChart3D(m_leftMargin' m_topMargin' width' height' m_drawValues' m_sliceRelativeHeight' m_drawTexts); " is 120.
Long Statement,EVEMon.PieChart,PieChartControl,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChartControl.cs,OnMouseMove,The length of the statement  "                        if (m_drawToolTipTexts == null || m_drawToolTipTexts.Length <= m_highlightedIndex || m_drawToolTipTexts[m_highlightedIndex].Length == 0) " is 136.
Long Statement,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,Clone,The length of the statement  "            return new PieSlice(BoundingRectangle' SliceHeight' StartAngle' SweepAngle' m_surfaceColor' m_shadowStyle' m_edgeColorType); " is 124.
Long Statement,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetTextPosition,The length of the statement  "                return PeripheralPoint(m_center.X' m_center.Y' m_boundingRectangle.Width / 3' m_boundingRectangle.Height / 3' GetActualAngle(StartAngle) + SweepAngle / 2); " is 155.
Long Statement,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetTextPosition,The length of the statement  "            return PeripheralPoint(m_center.X' m_center.Y' m_boundingRectangle.Width / 3' m_boundingRectangle.Height / 3' GetActualAngle(angle)); " is 133.
Long Statement,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetTextPositionOut,The length of the statement  "                return PeripheralPoint(m_center.X' m_center.Y' m_boundingRectangle.Width / div' m_boundingRectangle.Height / div' GetActualAngle(StartAngle) + SweepAngle / 2); " is 159.
Long Statement,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetTextPositionOut,The length of the statement  "            return PeripheralPoint(m_center.X' m_center.Y' m_boundingRectangle.Width / div' m_boundingRectangle.Height / div' GetActualAngle(angle)); " is 137.
Long Statement,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,Split,The length of the statement  "            PieSlice pieSlice1 = new PieSlice(BoundingRectangle' SliceHeight' actualStartAngle' newSweepAngle' m_surfaceColor' m_shadowStyle' m_edgeColorType); " is 147.
Long Statement,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,Split,The length of the statement  "            PieSlice pieSlice2 = new PieSlice(BoundingRectangle' SliceHeight' splitAngle' newSweepAngle' m_surfaceColor' m_shadowStyle' m_edgeColorType); " is 141.
Long Statement,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,DrawVisiblePeriphery,The length of the statement  "                DrawCylinderSurfaceSection(graphics' m_pen' m_brushPeripherySurface' surfaceBounds.StartAngle' surfaceBounds.EndAngle' surfaceBounds.StartPoint' surfaceBounds.EndPoint); " is 169.
Long Statement,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,DrawHiddenPeriphery,The length of the statement  "                DrawCylinderSurfaceSection(graphics' m_pen' m_brushSurface' surfaceBounds.StartAngle' surfaceBounds.EndAngle' surfaceBounds.StartPoint' surfaceBounds.EndPoint); " is 160.
Long Statement,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,DrawBottom,The length of the statement  "            graphics.FillPie(m_brushSurface' m_boundingRectangle.X' m_boundingRectangle.Y + m_sliceHeight' m_boundingRectangle.Width' m_boundingRectangle.Height' m_startAngle' m_sweepAngle); " is 178.
Long Statement,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,DrawBottom,The length of the statement  "            graphics.DrawPie(m_pen' m_boundingRectangle.X' m_boundingRectangle.Y + m_sliceHeight' m_boundingRectangle.Width' m_boundingRectangle.Height' m_startAngle' m_sweepAngle); " is 169.
Long Statement,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,DrawTop,The length of the statement  "            graphics.FillPie(m_brushSurface' m_boundingRectangle.X' m_boundingRectangle.Y' m_boundingRectangle.Width' m_boundingRectangle.Height' m_startAngle' m_sweepAngle); " is 162.
Long Statement,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,PieSliceContainsPoint,The length of the statement  "            return PieSliceContainsPoint(point' m_boundingRectangle.X' m_boundingRectangle.Y' m_boundingRectangle.Width' m_boundingRectangle.Height' m_startAngle' m_sweepAngle); " is 165.
Long Statement,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,PeripheryContainsPoint,The length of the statement  "                if (CylinderSurfaceSectionContainsPoint(point' surfaceBounds.StartAngle' surfaceBounds.EndAngle' surfaceBounds.StartPoint' surfaceBounds.EndPoint)) " is 147.
Long Statement,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,BottomSurfaceSectionContainsPoint,The length of the statement  "                return (PieSliceContainsPoint(point' m_boundingRectangle.X' m_boundingRectangle.Y + m_sliceHeight' m_boundingRectangle.Width' m_boundingRectangle.Height' m_startAngle' m_sweepAngle)); " is 183.
Long Statement,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,CreateSurfaceBrushes,The length of the statement  "            m_brushSurfaceHighlighted = new SolidBrush(ColorUtil.CreateColorWithCorrectedLightness(surfaceColor' ColorUtil.BrightnessEnhancementFactor1)); " is 142.
Long Statement,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,CreateSurfaceBrushes,The length of the statement  "                m_brushStartSide = m_brushEndSide = m_brushPeripherySurface = new SolidBrush(ColorUtil.CreateColorWithCorrectedLightness(surfaceColor' -ColorUtil.BrightnessEnhancementFactor1)); " is 177.
Long Statement,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,CreateBrushForSide,The length of the statement  "            return new SolidBrush(ColorUtil.CreateColorWithCorrectedLightness(color' -(float)(ColorUtil.BrightnessEnhancementFactor1 * (1 - 0.8 * Math.Cos(angle * Math.PI / 180))))); " is 170.
Long Statement,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,CreateBrushForPeriphery,The length of the statement  "            LinearGradientBrush brush = new LinearGradientBrush(m_boundingRectangle' Color.Blue' Color.White' LinearGradientMode.Horizontal); " is 129.
Long Statement,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,PeripheralPoint,The length of the statement  "            return new PointF(xCenter + (float)(semiMajor * Math.Cos(angleRadians))' yCenter + (float)(semiMinor * Math.Sin(angleRadians))); " is 128.
Long Statement,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,InitializePieSlice,The length of the statement  "            m_pointEnd = PeripheralPoint(xCenter' yCenter' widthBoundingRect / 2' heightBoundingRect / 2' m_actualStartAngle + m_actualSweepAngle); " is 135.
Long Statement,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,CreatePathForCylinderSurfaceSection,The length of the statement  "            path.AddArc(m_boundingRectangle.X' m_boundingRectangle.Y + m_sliceHeight' m_boundingRectangle.Width' m_boundingRectangle.Height' endAngle' startAngle - endAngle); " is 162.
Long Statement,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,CylinderSurfaceSectionContainsPoint,The length of the statement  "                return Quadrilateral.Contains(point' new PointF[] { point1' new PointF(point1.X' point1.Y + m_sliceHeight)' new PointF(point2.X' point2.Y + m_sliceHeight)' point2 } ); " is 167.
Complex Conditional,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,GetForemostPieSlice,The conditional expression  "((pieSlice.StartAngle <= 90) && ((pieSlice.StartAngle + pieSlice.SweepAngle) >= 90)) ||                      ((pieSlice.StartAngle + pieSlice.SweepAngle > 360) && ((pieSlice.StartAngle) <= 450) && (pieSlice.StartAngle + pieSlice.SweepAngle) >= 450)"  is complex.
Complex Conditional,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,InitializePieSlices,The conditional expression  "backPieIndex > -1 || ((startAngle <= 270) && (startAngle + sweepAngle > 270)) || ((startAngle >= 270) && (startAngle + sweepAngle > 630))"  is complex.
Complex Conditional,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,DrawSliceSides,The conditional expression  "((m_pieSlices[0].StartAngle > 270) && (m_pieSlices[0].StartAngle + m_pieSlices[0].SweepAngle > 450)) || ((m_pieSlices[0].StartAngle < 90) && (m_pieSlices[0].StartAngle + m_pieSlices[0].SweepAngle > 270))"  is complex.
Complex Conditional,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,PieSliceContainsPoint,The conditional expression  "(angleDegrees >= startAngle && angleDegrees <= (startAngle + sweepAngle)) ||                  (startAngle + sweepAngle > 360) && ((angleDegrees + 360) <= (startAngle + sweepAngle))"  is complex.
Complex Conditional,EVEMon.PieChart,Quadrilateral,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\Quadrilateral.cs,DoesIntersect,The conditional expression  "(x2 < point.X && x1 >= point.X) || (x2 >= point.X && x1 < point.X)"  is complex.
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,PlaceTexts,The following statement contains a magic number: using (Brush fontBrush = new SolidBrush(m_foreColor))              {                  int num = 0;                  PointF[] points = new PointF[m_pieSlices.Length];                  foreach (PieSlice slice in m_pieSlices)                  {                      if (slice.Text != null && slice.Text.Length > 0)                      {                          PointF point = slice.GetTextPosition();                            foreach (PointF oldpoint in points)                          {                              for (int x = 0; x <= 1; x++)                              {                                  float diffy = oldpoint.Y - point.Y;                                  float diffx = oldpoint.X - point.X;                                    if (diffy < 0) diffy *= -1;                                  if (diffx < 0) diffx *= -1;                                    if (diffx < 70 && diffy < 16)                                  {                                      if (x == 0)                                      {                                          point = slice.GetTextPositionOut(4.5f);                                      }                                      else                                      {                                          point = slice.GetTextPositionOut(2.2f);                                      }                                  }                              }                          }                            points[num] = point;                          graphics.DrawString(slice.Text' m_font' fontBrush' point' drawFormat);                      }                        num++;                  }              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,PlaceTexts,The following statement contains a magic number: using (Brush fontBrush = new SolidBrush(m_foreColor))              {                  int num = 0;                  PointF[] points = new PointF[m_pieSlices.Length];                  foreach (PieSlice slice in m_pieSlices)                  {                      if (slice.Text != null && slice.Text.Length > 0)                      {                          PointF point = slice.GetTextPosition();                            foreach (PointF oldpoint in points)                          {                              for (int x = 0; x <= 1; x++)                              {                                  float diffy = oldpoint.Y - point.Y;                                  float diffx = oldpoint.X - point.X;                                    if (diffy < 0) diffy *= -1;                                  if (diffx < 0) diffx *= -1;                                    if (diffx < 70 && diffy < 16)                                  {                                      if (x == 0)                                      {                                          point = slice.GetTextPositionOut(4.5f);                                      }                                      else                                      {                                          point = slice.GetTextPositionOut(2.2f);                                      }                                  }                              }                          }                            points[num] = point;                          graphics.DrawString(slice.Text' m_font' fontBrush' point' drawFormat);                      }                        num++;                  }              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,FindPieSliceUnderPoint,The following statement contains a magic number: while (incrementIndex <= decrementIndex)              {                  PieSlice sliceLeft = pieSlices[decrementIndex];                  float angle1 = 270 - sliceLeft.StartAngle;                  PieSlice sliceRight = pieSlices[incrementIndex];                  float angle2 = (sliceRight.EndAngle + 90) % 360;                  Debug.Assert(angle2 >= 0);                  if (angle2 < angle1)                  {                      if (sliceRight.PeripheryContainsPoint(point))                          indexFound = incrementIndex;                      ++incrementIndex;                  }                  else                  {                      if (sliceLeft.PeripheryContainsPoint(point))                          indexFound = decrementIndex;                      --decrementIndex;                  }              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,FindPieSliceUnderPoint,The following statement contains a magic number: while (incrementIndex <= decrementIndex)              {                  PieSlice sliceLeft = pieSlices[decrementIndex];                  float angle1 = 270 - sliceLeft.StartAngle;                  PieSlice sliceRight = pieSlices[incrementIndex];                  float angle2 = (sliceRight.EndAngle + 90) % 360;                  Debug.Assert(angle2 >= 0);                  if (angle2 < angle1)                  {                      if (sliceRight.PeripheryContainsPoint(point))                          indexFound = incrementIndex;                      ++incrementIndex;                  }                  else                  {                      if (sliceLeft.PeripheryContainsPoint(point))                          indexFound = decrementIndex;                      --decrementIndex;                  }              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,FindPieSliceUnderPoint,The following statement contains a magic number: while (incrementIndex <= decrementIndex)              {                  PieSlice sliceLeft = pieSlices[decrementIndex];                  float angle1 = 270 - sliceLeft.StartAngle;                  PieSlice sliceRight = pieSlices[incrementIndex];                  float angle2 = (sliceRight.EndAngle + 90) % 360;                  Debug.Assert(angle2 >= 0);                  if (angle2 < angle1)                  {                      if (sliceRight.PeripheryContainsPoint(point))                          indexFound = incrementIndex;                      ++incrementIndex;                  }                  else                  {                      if (sliceLeft.PeripheryContainsPoint(point))                          indexFound = decrementIndex;                      --decrementIndex;                  }              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,GetForemostPieSlice,The following statement contains a magic number: for (int i = 0; i < pieSlices.Length; ++i)              {                  PieSlice pieSlice = pieSlices[i];                  if (((pieSlice.StartAngle <= 90) && ((pieSlice.StartAngle + pieSlice.SweepAngle) >= 90)) ||                      ((pieSlice.StartAngle + pieSlice.SweepAngle > 360) && ((pieSlice.StartAngle) <= 450) && (pieSlice.StartAngle + pieSlice.SweepAngle) >= 450))                  {                      return i;                  }              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,GetForemostPieSlice,The following statement contains a magic number: for (int i = 0; i < pieSlices.Length; ++i)              {                  PieSlice pieSlice = pieSlices[i];                  if (((pieSlice.StartAngle <= 90) && ((pieSlice.StartAngle + pieSlice.SweepAngle) >= 90)) ||                      ((pieSlice.StartAngle + pieSlice.SweepAngle > 360) && ((pieSlice.StartAngle) <= 450) && (pieSlice.StartAngle + pieSlice.SweepAngle) >= 450))                  {                      return i;                  }              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,GetForemostPieSlice,The following statement contains a magic number: for (int i = 0; i < pieSlices.Length; ++i)              {                  PieSlice pieSlice = pieSlices[i];                  if (((pieSlice.StartAngle <= 90) && ((pieSlice.StartAngle + pieSlice.SweepAngle) >= 90)) ||                      ((pieSlice.StartAngle + pieSlice.SweepAngle > 360) && ((pieSlice.StartAngle) <= 450) && (pieSlice.StartAngle + pieSlice.SweepAngle) >= 450))                  {                      return i;                  }              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,GetForemostPieSlice,The following statement contains a magic number: for (int i = 0; i < pieSlices.Length; ++i)              {                  PieSlice pieSlice = pieSlices[i];                  if (((pieSlice.StartAngle <= 90) && ((pieSlice.StartAngle + pieSlice.SweepAngle) >= 90)) ||                      ((pieSlice.StartAngle + pieSlice.SweepAngle > 360) && ((pieSlice.StartAngle) <= 450) && (pieSlice.StartAngle + pieSlice.SweepAngle) >= 450))                  {                      return i;                  }              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,GetForemostPieSlice,The following statement contains a magic number: for (int i = 0; i < pieSlices.Length; ++i)              {                  PieSlice pieSlice = pieSlices[i];                  if (((pieSlice.StartAngle <= 90) && ((pieSlice.StartAngle + pieSlice.SweepAngle) >= 90)) ||                      ((pieSlice.StartAngle + pieSlice.SweepAngle > 360) && ((pieSlice.StartAngle) <= 450) && (pieSlice.StartAngle + pieSlice.SweepAngle) >= 450))                  {                      return i;                  }              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,InitializePieSlices,The following statement contains a magic number: for (int i = 0; i < m_values.Length; ++i)              {                  decimal itemValue = m_values[i];                  double sweepAngle = (double)itemValue / sum * 360;                  // displacement from the center of the ellipse                  float xDisplacement = m_sliceRelativeDisplacements[displacementIndex];                  float yDisplacement = m_sliceRelativeDisplacements[displacementIndex];                  if (xDisplacement > 0F)                  {                      Debug.Assert(largestDisplacement > 0F);                      SizeF pieDisplacement = GetSliceDisplacement((float)(startAngle + sweepAngle / 2)' m_sliceRelativeDisplacements[displacementIndex]);                      xDisplacement = pieDisplacement.Width;                      yDisplacement = pieDisplacement.Height;                  }                  PieSlice slice = null;                  if (i == m_highlightedIndex)                      slice = CreatePieSliceHighlighted(m_xBoundingRect + largestDisplacementEllipseSize.Width / 2 + xDisplacement' m_yBoundingRect + largestDisplacementEllipseSize.Height / 2 + yDisplacement' topEllipeSize.Width' topEllipeSize.Height' PieHeight' (float)(startAngle % 360)' (float)(sweepAngle)' m_sliceColors[colorIndex]' m_shadowStyle' m_edgeColorType' m_edgeLineWidth);                  else                      slice = CreatePieSlice(m_xBoundingRect + largestDisplacementEllipseSize.Width / 2 + xDisplacement' m_yBoundingRect + largestDisplacementEllipseSize.Height / 2 + yDisplacement' topEllipeSize.Width' topEllipeSize.Height' PieHeight' (float)(startAngle % 360)' (float)(sweepAngle)' m_sliceColors[colorIndex]' m_shadowStyle' m_edgeColorType' m_edgeLineWidth);                  slice.Text = m_texts[i];                  // the backmost pie is inserted to the front of the list for correct drawing                  if (backPieIndex > -1 || ((startAngle <= 270) && (startAngle + sweepAngle > 270)) || ((startAngle >= 270) && (startAngle + sweepAngle > 630)))                  {                      ++backPieIndex;                      listPieSlices.Insert(backPieIndex' slice);                      m_pieSlicesMapping.Insert(backPieIndex' i);                  }                  else                  {                      listPieSlices.Add(slice);                      m_pieSlicesMapping.Add(i);                  }                  // increment displacementIndex only if there are more displacements available                  if (displacementIndex < maxDisplacementIndex)                      ++displacementIndex;                  ++colorIndex;                  // if all colors have been exhausted' reset color index                  if (colorIndex >= m_sliceColors.Length)                      colorIndex = 0;                  // prepare for the next pie slice                  startAngle += sweepAngle;                  if (startAngle > 360)                      startAngle -= 360;              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,InitializePieSlices,The following statement contains a magic number: for (int i = 0; i < m_values.Length; ++i)              {                  decimal itemValue = m_values[i];                  double sweepAngle = (double)itemValue / sum * 360;                  // displacement from the center of the ellipse                  float xDisplacement = m_sliceRelativeDisplacements[displacementIndex];                  float yDisplacement = m_sliceRelativeDisplacements[displacementIndex];                  if (xDisplacement > 0F)                  {                      Debug.Assert(largestDisplacement > 0F);                      SizeF pieDisplacement = GetSliceDisplacement((float)(startAngle + sweepAngle / 2)' m_sliceRelativeDisplacements[displacementIndex]);                      xDisplacement = pieDisplacement.Width;                      yDisplacement = pieDisplacement.Height;                  }                  PieSlice slice = null;                  if (i == m_highlightedIndex)                      slice = CreatePieSliceHighlighted(m_xBoundingRect + largestDisplacementEllipseSize.Width / 2 + xDisplacement' m_yBoundingRect + largestDisplacementEllipseSize.Height / 2 + yDisplacement' topEllipeSize.Width' topEllipeSize.Height' PieHeight' (float)(startAngle % 360)' (float)(sweepAngle)' m_sliceColors[colorIndex]' m_shadowStyle' m_edgeColorType' m_edgeLineWidth);                  else                      slice = CreatePieSlice(m_xBoundingRect + largestDisplacementEllipseSize.Width / 2 + xDisplacement' m_yBoundingRect + largestDisplacementEllipseSize.Height / 2 + yDisplacement' topEllipeSize.Width' topEllipeSize.Height' PieHeight' (float)(startAngle % 360)' (float)(sweepAngle)' m_sliceColors[colorIndex]' m_shadowStyle' m_edgeColorType' m_edgeLineWidth);                  slice.Text = m_texts[i];                  // the backmost pie is inserted to the front of the list for correct drawing                  if (backPieIndex > -1 || ((startAngle <= 270) && (startAngle + sweepAngle > 270)) || ((startAngle >= 270) && (startAngle + sweepAngle > 630)))                  {                      ++backPieIndex;                      listPieSlices.Insert(backPieIndex' slice);                      m_pieSlicesMapping.Insert(backPieIndex' i);                  }                  else                  {                      listPieSlices.Add(slice);                      m_pieSlicesMapping.Add(i);                  }                  // increment displacementIndex only if there are more displacements available                  if (displacementIndex < maxDisplacementIndex)                      ++displacementIndex;                  ++colorIndex;                  // if all colors have been exhausted' reset color index                  if (colorIndex >= m_sliceColors.Length)                      colorIndex = 0;                  // prepare for the next pie slice                  startAngle += sweepAngle;                  if (startAngle > 360)                      startAngle -= 360;              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,InitializePieSlices,The following statement contains a magic number: for (int i = 0; i < m_values.Length; ++i)              {                  decimal itemValue = m_values[i];                  double sweepAngle = (double)itemValue / sum * 360;                  // displacement from the center of the ellipse                  float xDisplacement = m_sliceRelativeDisplacements[displacementIndex];                  float yDisplacement = m_sliceRelativeDisplacements[displacementIndex];                  if (xDisplacement > 0F)                  {                      Debug.Assert(largestDisplacement > 0F);                      SizeF pieDisplacement = GetSliceDisplacement((float)(startAngle + sweepAngle / 2)' m_sliceRelativeDisplacements[displacementIndex]);                      xDisplacement = pieDisplacement.Width;                      yDisplacement = pieDisplacement.Height;                  }                  PieSlice slice = null;                  if (i == m_highlightedIndex)                      slice = CreatePieSliceHighlighted(m_xBoundingRect + largestDisplacementEllipseSize.Width / 2 + xDisplacement' m_yBoundingRect + largestDisplacementEllipseSize.Height / 2 + yDisplacement' topEllipeSize.Width' topEllipeSize.Height' PieHeight' (float)(startAngle % 360)' (float)(sweepAngle)' m_sliceColors[colorIndex]' m_shadowStyle' m_edgeColorType' m_edgeLineWidth);                  else                      slice = CreatePieSlice(m_xBoundingRect + largestDisplacementEllipseSize.Width / 2 + xDisplacement' m_yBoundingRect + largestDisplacementEllipseSize.Height / 2 + yDisplacement' topEllipeSize.Width' topEllipeSize.Height' PieHeight' (float)(startAngle % 360)' (float)(sweepAngle)' m_sliceColors[colorIndex]' m_shadowStyle' m_edgeColorType' m_edgeLineWidth);                  slice.Text = m_texts[i];                  // the backmost pie is inserted to the front of the list for correct drawing                  if (backPieIndex > -1 || ((startAngle <= 270) && (startAngle + sweepAngle > 270)) || ((startAngle >= 270) && (startAngle + sweepAngle > 630)))                  {                      ++backPieIndex;                      listPieSlices.Insert(backPieIndex' slice);                      m_pieSlicesMapping.Insert(backPieIndex' i);                  }                  else                  {                      listPieSlices.Add(slice);                      m_pieSlicesMapping.Add(i);                  }                  // increment displacementIndex only if there are more displacements available                  if (displacementIndex < maxDisplacementIndex)                      ++displacementIndex;                  ++colorIndex;                  // if all colors have been exhausted' reset color index                  if (colorIndex >= m_sliceColors.Length)                      colorIndex = 0;                  // prepare for the next pie slice                  startAngle += sweepAngle;                  if (startAngle > 360)                      startAngle -= 360;              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,InitializePieSlices,The following statement contains a magic number: for (int i = 0; i < m_values.Length; ++i)              {                  decimal itemValue = m_values[i];                  double sweepAngle = (double)itemValue / sum * 360;                  // displacement from the center of the ellipse                  float xDisplacement = m_sliceRelativeDisplacements[displacementIndex];                  float yDisplacement = m_sliceRelativeDisplacements[displacementIndex];                  if (xDisplacement > 0F)                  {                      Debug.Assert(largestDisplacement > 0F);                      SizeF pieDisplacement = GetSliceDisplacement((float)(startAngle + sweepAngle / 2)' m_sliceRelativeDisplacements[displacementIndex]);                      xDisplacement = pieDisplacement.Width;                      yDisplacement = pieDisplacement.Height;                  }                  PieSlice slice = null;                  if (i == m_highlightedIndex)                      slice = CreatePieSliceHighlighted(m_xBoundingRect + largestDisplacementEllipseSize.Width / 2 + xDisplacement' m_yBoundingRect + largestDisplacementEllipseSize.Height / 2 + yDisplacement' topEllipeSize.Width' topEllipeSize.Height' PieHeight' (float)(startAngle % 360)' (float)(sweepAngle)' m_sliceColors[colorIndex]' m_shadowStyle' m_edgeColorType' m_edgeLineWidth);                  else                      slice = CreatePieSlice(m_xBoundingRect + largestDisplacementEllipseSize.Width / 2 + xDisplacement' m_yBoundingRect + largestDisplacementEllipseSize.Height / 2 + yDisplacement' topEllipeSize.Width' topEllipeSize.Height' PieHeight' (float)(startAngle % 360)' (float)(sweepAngle)' m_sliceColors[colorIndex]' m_shadowStyle' m_edgeColorType' m_edgeLineWidth);                  slice.Text = m_texts[i];                  // the backmost pie is inserted to the front of the list for correct drawing                  if (backPieIndex > -1 || ((startAngle <= 270) && (startAngle + sweepAngle > 270)) || ((startAngle >= 270) && (startAngle + sweepAngle > 630)))                  {                      ++backPieIndex;                      listPieSlices.Insert(backPieIndex' slice);                      m_pieSlicesMapping.Insert(backPieIndex' i);                  }                  else                  {                      listPieSlices.Add(slice);                      m_pieSlicesMapping.Add(i);                  }                  // increment displacementIndex only if there are more displacements available                  if (displacementIndex < maxDisplacementIndex)                      ++displacementIndex;                  ++colorIndex;                  // if all colors have been exhausted' reset color index                  if (colorIndex >= m_sliceColors.Length)                      colorIndex = 0;                  // prepare for the next pie slice                  startAngle += sweepAngle;                  if (startAngle > 360)                      startAngle -= 360;              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,InitializePieSlices,The following statement contains a magic number: for (int i = 0; i < m_values.Length; ++i)              {                  decimal itemValue = m_values[i];                  double sweepAngle = (double)itemValue / sum * 360;                  // displacement from the center of the ellipse                  float xDisplacement = m_sliceRelativeDisplacements[displacementIndex];                  float yDisplacement = m_sliceRelativeDisplacements[displacementIndex];                  if (xDisplacement > 0F)                  {                      Debug.Assert(largestDisplacement > 0F);                      SizeF pieDisplacement = GetSliceDisplacement((float)(startAngle + sweepAngle / 2)' m_sliceRelativeDisplacements[displacementIndex]);                      xDisplacement = pieDisplacement.Width;                      yDisplacement = pieDisplacement.Height;                  }                  PieSlice slice = null;                  if (i == m_highlightedIndex)                      slice = CreatePieSliceHighlighted(m_xBoundingRect + largestDisplacementEllipseSize.Width / 2 + xDisplacement' m_yBoundingRect + largestDisplacementEllipseSize.Height / 2 + yDisplacement' topEllipeSize.Width' topEllipeSize.Height' PieHeight' (float)(startAngle % 360)' (float)(sweepAngle)' m_sliceColors[colorIndex]' m_shadowStyle' m_edgeColorType' m_edgeLineWidth);                  else                      slice = CreatePieSlice(m_xBoundingRect + largestDisplacementEllipseSize.Width / 2 + xDisplacement' m_yBoundingRect + largestDisplacementEllipseSize.Height / 2 + yDisplacement' topEllipeSize.Width' topEllipeSize.Height' PieHeight' (float)(startAngle % 360)' (float)(sweepAngle)' m_sliceColors[colorIndex]' m_shadowStyle' m_edgeColorType' m_edgeLineWidth);                  slice.Text = m_texts[i];                  // the backmost pie is inserted to the front of the list for correct drawing                  if (backPieIndex > -1 || ((startAngle <= 270) && (startAngle + sweepAngle > 270)) || ((startAngle >= 270) && (startAngle + sweepAngle > 630)))                  {                      ++backPieIndex;                      listPieSlices.Insert(backPieIndex' slice);                      m_pieSlicesMapping.Insert(backPieIndex' i);                  }                  else                  {                      listPieSlices.Add(slice);                      m_pieSlicesMapping.Add(i);                  }                  // increment displacementIndex only if there are more displacements available                  if (displacementIndex < maxDisplacementIndex)                      ++displacementIndex;                  ++colorIndex;                  // if all colors have been exhausted' reset color index                  if (colorIndex >= m_sliceColors.Length)                      colorIndex = 0;                  // prepare for the next pie slice                  startAngle += sweepAngle;                  if (startAngle > 360)                      startAngle -= 360;              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,InitializePieSlices,The following statement contains a magic number: for (int i = 0; i < m_values.Length; ++i)              {                  decimal itemValue = m_values[i];                  double sweepAngle = (double)itemValue / sum * 360;                  // displacement from the center of the ellipse                  float xDisplacement = m_sliceRelativeDisplacements[displacementIndex];                  float yDisplacement = m_sliceRelativeDisplacements[displacementIndex];                  if (xDisplacement > 0F)                  {                      Debug.Assert(largestDisplacement > 0F);                      SizeF pieDisplacement = GetSliceDisplacement((float)(startAngle + sweepAngle / 2)' m_sliceRelativeDisplacements[displacementIndex]);                      xDisplacement = pieDisplacement.Width;                      yDisplacement = pieDisplacement.Height;                  }                  PieSlice slice = null;                  if (i == m_highlightedIndex)                      slice = CreatePieSliceHighlighted(m_xBoundingRect + largestDisplacementEllipseSize.Width / 2 + xDisplacement' m_yBoundingRect + largestDisplacementEllipseSize.Height / 2 + yDisplacement' topEllipeSize.Width' topEllipeSize.Height' PieHeight' (float)(startAngle % 360)' (float)(sweepAngle)' m_sliceColors[colorIndex]' m_shadowStyle' m_edgeColorType' m_edgeLineWidth);                  else                      slice = CreatePieSlice(m_xBoundingRect + largestDisplacementEllipseSize.Width / 2 + xDisplacement' m_yBoundingRect + largestDisplacementEllipseSize.Height / 2 + yDisplacement' topEllipeSize.Width' topEllipeSize.Height' PieHeight' (float)(startAngle % 360)' (float)(sweepAngle)' m_sliceColors[colorIndex]' m_shadowStyle' m_edgeColorType' m_edgeLineWidth);                  slice.Text = m_texts[i];                  // the backmost pie is inserted to the front of the list for correct drawing                  if (backPieIndex > -1 || ((startAngle <= 270) && (startAngle + sweepAngle > 270)) || ((startAngle >= 270) && (startAngle + sweepAngle > 630)))                  {                      ++backPieIndex;                      listPieSlices.Insert(backPieIndex' slice);                      m_pieSlicesMapping.Insert(backPieIndex' i);                  }                  else                  {                      listPieSlices.Add(slice);                      m_pieSlicesMapping.Add(i);                  }                  // increment displacementIndex only if there are more displacements available                  if (displacementIndex < maxDisplacementIndex)                      ++displacementIndex;                  ++colorIndex;                  // if all colors have been exhausted' reset color index                  if (colorIndex >= m_sliceColors.Length)                      colorIndex = 0;                  // prepare for the next pie slice                  startAngle += sweepAngle;                  if (startAngle > 360)                      startAngle -= 360;              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,InitializePieSlices,The following statement contains a magic number: for (int i = 0; i < m_values.Length; ++i)              {                  decimal itemValue = m_values[i];                  double sweepAngle = (double)itemValue / sum * 360;                  // displacement from the center of the ellipse                  float xDisplacement = m_sliceRelativeDisplacements[displacementIndex];                  float yDisplacement = m_sliceRelativeDisplacements[displacementIndex];                  if (xDisplacement > 0F)                  {                      Debug.Assert(largestDisplacement > 0F);                      SizeF pieDisplacement = GetSliceDisplacement((float)(startAngle + sweepAngle / 2)' m_sliceRelativeDisplacements[displacementIndex]);                      xDisplacement = pieDisplacement.Width;                      yDisplacement = pieDisplacement.Height;                  }                  PieSlice slice = null;                  if (i == m_highlightedIndex)                      slice = CreatePieSliceHighlighted(m_xBoundingRect + largestDisplacementEllipseSize.Width / 2 + xDisplacement' m_yBoundingRect + largestDisplacementEllipseSize.Height / 2 + yDisplacement' topEllipeSize.Width' topEllipeSize.Height' PieHeight' (float)(startAngle % 360)' (float)(sweepAngle)' m_sliceColors[colorIndex]' m_shadowStyle' m_edgeColorType' m_edgeLineWidth);                  else                      slice = CreatePieSlice(m_xBoundingRect + largestDisplacementEllipseSize.Width / 2 + xDisplacement' m_yBoundingRect + largestDisplacementEllipseSize.Height / 2 + yDisplacement' topEllipeSize.Width' topEllipeSize.Height' PieHeight' (float)(startAngle % 360)' (float)(sweepAngle)' m_sliceColors[colorIndex]' m_shadowStyle' m_edgeColorType' m_edgeLineWidth);                  slice.Text = m_texts[i];                  // the backmost pie is inserted to the front of the list for correct drawing                  if (backPieIndex > -1 || ((startAngle <= 270) && (startAngle + sweepAngle > 270)) || ((startAngle >= 270) && (startAngle + sweepAngle > 630)))                  {                      ++backPieIndex;                      listPieSlices.Insert(backPieIndex' slice);                      m_pieSlicesMapping.Insert(backPieIndex' i);                  }                  else                  {                      listPieSlices.Add(slice);                      m_pieSlicesMapping.Add(i);                  }                  // increment displacementIndex only if there are more displacements available                  if (displacementIndex < maxDisplacementIndex)                      ++displacementIndex;                  ++colorIndex;                  // if all colors have been exhausted' reset color index                  if (colorIndex >= m_sliceColors.Length)                      colorIndex = 0;                  // prepare for the next pie slice                  startAngle += sweepAngle;                  if (startAngle > 360)                      startAngle -= 360;              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,InitializePieSlices,The following statement contains a magic number: for (int i = 0; i < m_values.Length; ++i)              {                  decimal itemValue = m_values[i];                  double sweepAngle = (double)itemValue / sum * 360;                  // displacement from the center of the ellipse                  float xDisplacement = m_sliceRelativeDisplacements[displacementIndex];                  float yDisplacement = m_sliceRelativeDisplacements[displacementIndex];                  if (xDisplacement > 0F)                  {                      Debug.Assert(largestDisplacement > 0F);                      SizeF pieDisplacement = GetSliceDisplacement((float)(startAngle + sweepAngle / 2)' m_sliceRelativeDisplacements[displacementIndex]);                      xDisplacement = pieDisplacement.Width;                      yDisplacement = pieDisplacement.Height;                  }                  PieSlice slice = null;                  if (i == m_highlightedIndex)                      slice = CreatePieSliceHighlighted(m_xBoundingRect + largestDisplacementEllipseSize.Width / 2 + xDisplacement' m_yBoundingRect + largestDisplacementEllipseSize.Height / 2 + yDisplacement' topEllipeSize.Width' topEllipeSize.Height' PieHeight' (float)(startAngle % 360)' (float)(sweepAngle)' m_sliceColors[colorIndex]' m_shadowStyle' m_edgeColorType' m_edgeLineWidth);                  else                      slice = CreatePieSlice(m_xBoundingRect + largestDisplacementEllipseSize.Width / 2 + xDisplacement' m_yBoundingRect + largestDisplacementEllipseSize.Height / 2 + yDisplacement' topEllipeSize.Width' topEllipeSize.Height' PieHeight' (float)(startAngle % 360)' (float)(sweepAngle)' m_sliceColors[colorIndex]' m_shadowStyle' m_edgeColorType' m_edgeLineWidth);                  slice.Text = m_texts[i];                  // the backmost pie is inserted to the front of the list for correct drawing                  if (backPieIndex > -1 || ((startAngle <= 270) && (startAngle + sweepAngle > 270)) || ((startAngle >= 270) && (startAngle + sweepAngle > 630)))                  {                      ++backPieIndex;                      listPieSlices.Insert(backPieIndex' slice);                      m_pieSlicesMapping.Insert(backPieIndex' i);                  }                  else                  {                      listPieSlices.Add(slice);                      m_pieSlicesMapping.Add(i);                  }                  // increment displacementIndex only if there are more displacements available                  if (displacementIndex < maxDisplacementIndex)                      ++displacementIndex;                  ++colorIndex;                  // if all colors have been exhausted' reset color index                  if (colorIndex >= m_sliceColors.Length)                      colorIndex = 0;                  // prepare for the next pie slice                  startAngle += sweepAngle;                  if (startAngle > 360)                      startAngle -= 360;              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,InitializePieSlices,The following statement contains a magic number: for (int i = 0; i < m_values.Length; ++i)              {                  decimal itemValue = m_values[i];                  double sweepAngle = (double)itemValue / sum * 360;                  // displacement from the center of the ellipse                  float xDisplacement = m_sliceRelativeDisplacements[displacementIndex];                  float yDisplacement = m_sliceRelativeDisplacements[displacementIndex];                  if (xDisplacement > 0F)                  {                      Debug.Assert(largestDisplacement > 0F);                      SizeF pieDisplacement = GetSliceDisplacement((float)(startAngle + sweepAngle / 2)' m_sliceRelativeDisplacements[displacementIndex]);                      xDisplacement = pieDisplacement.Width;                      yDisplacement = pieDisplacement.Height;                  }                  PieSlice slice = null;                  if (i == m_highlightedIndex)                      slice = CreatePieSliceHighlighted(m_xBoundingRect + largestDisplacementEllipseSize.Width / 2 + xDisplacement' m_yBoundingRect + largestDisplacementEllipseSize.Height / 2 + yDisplacement' topEllipeSize.Width' topEllipeSize.Height' PieHeight' (float)(startAngle % 360)' (float)(sweepAngle)' m_sliceColors[colorIndex]' m_shadowStyle' m_edgeColorType' m_edgeLineWidth);                  else                      slice = CreatePieSlice(m_xBoundingRect + largestDisplacementEllipseSize.Width / 2 + xDisplacement' m_yBoundingRect + largestDisplacementEllipseSize.Height / 2 + yDisplacement' topEllipeSize.Width' topEllipeSize.Height' PieHeight' (float)(startAngle % 360)' (float)(sweepAngle)' m_sliceColors[colorIndex]' m_shadowStyle' m_edgeColorType' m_edgeLineWidth);                  slice.Text = m_texts[i];                  // the backmost pie is inserted to the front of the list for correct drawing                  if (backPieIndex > -1 || ((startAngle <= 270) && (startAngle + sweepAngle > 270)) || ((startAngle >= 270) && (startAngle + sweepAngle > 630)))                  {                      ++backPieIndex;                      listPieSlices.Insert(backPieIndex' slice);                      m_pieSlicesMapping.Insert(backPieIndex' i);                  }                  else                  {                      listPieSlices.Add(slice);                      m_pieSlicesMapping.Add(i);                  }                  // increment displacementIndex only if there are more displacements available                  if (displacementIndex < maxDisplacementIndex)                      ++displacementIndex;                  ++colorIndex;                  // if all colors have been exhausted' reset color index                  if (colorIndex >= m_sliceColors.Length)                      colorIndex = 0;                  // prepare for the next pie slice                  startAngle += sweepAngle;                  if (startAngle > 360)                      startAngle -= 360;              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,InitializePieSlices,The following statement contains a magic number: for (int i = 0; i < m_values.Length; ++i)              {                  decimal itemValue = m_values[i];                  double sweepAngle = (double)itemValue / sum * 360;                  // displacement from the center of the ellipse                  float xDisplacement = m_sliceRelativeDisplacements[displacementIndex];                  float yDisplacement = m_sliceRelativeDisplacements[displacementIndex];                  if (xDisplacement > 0F)                  {                      Debug.Assert(largestDisplacement > 0F);                      SizeF pieDisplacement = GetSliceDisplacement((float)(startAngle + sweepAngle / 2)' m_sliceRelativeDisplacements[displacementIndex]);                      xDisplacement = pieDisplacement.Width;                      yDisplacement = pieDisplacement.Height;                  }                  PieSlice slice = null;                  if (i == m_highlightedIndex)                      slice = CreatePieSliceHighlighted(m_xBoundingRect + largestDisplacementEllipseSize.Width / 2 + xDisplacement' m_yBoundingRect + largestDisplacementEllipseSize.Height / 2 + yDisplacement' topEllipeSize.Width' topEllipeSize.Height' PieHeight' (float)(startAngle % 360)' (float)(sweepAngle)' m_sliceColors[colorIndex]' m_shadowStyle' m_edgeColorType' m_edgeLineWidth);                  else                      slice = CreatePieSlice(m_xBoundingRect + largestDisplacementEllipseSize.Width / 2 + xDisplacement' m_yBoundingRect + largestDisplacementEllipseSize.Height / 2 + yDisplacement' topEllipeSize.Width' topEllipeSize.Height' PieHeight' (float)(startAngle % 360)' (float)(sweepAngle)' m_sliceColors[colorIndex]' m_shadowStyle' m_edgeColorType' m_edgeLineWidth);                  slice.Text = m_texts[i];                  // the backmost pie is inserted to the front of the list for correct drawing                  if (backPieIndex > -1 || ((startAngle <= 270) && (startAngle + sweepAngle > 270)) || ((startAngle >= 270) && (startAngle + sweepAngle > 630)))                  {                      ++backPieIndex;                      listPieSlices.Insert(backPieIndex' slice);                      m_pieSlicesMapping.Insert(backPieIndex' i);                  }                  else                  {                      listPieSlices.Add(slice);                      m_pieSlicesMapping.Add(i);                  }                  // increment displacementIndex only if there are more displacements available                  if (displacementIndex < maxDisplacementIndex)                      ++displacementIndex;                  ++colorIndex;                  // if all colors have been exhausted' reset color index                  if (colorIndex >= m_sliceColors.Length)                      colorIndex = 0;                  // prepare for the next pie slice                  startAngle += sweepAngle;                  if (startAngle > 360)                      startAngle -= 360;              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,InitializePieSlices,The following statement contains a magic number: for (int i = 0; i < m_values.Length; ++i)              {                  decimal itemValue = m_values[i];                  double sweepAngle = (double)itemValue / sum * 360;                  // displacement from the center of the ellipse                  float xDisplacement = m_sliceRelativeDisplacements[displacementIndex];                  float yDisplacement = m_sliceRelativeDisplacements[displacementIndex];                  if (xDisplacement > 0F)                  {                      Debug.Assert(largestDisplacement > 0F);                      SizeF pieDisplacement = GetSliceDisplacement((float)(startAngle + sweepAngle / 2)' m_sliceRelativeDisplacements[displacementIndex]);                      xDisplacement = pieDisplacement.Width;                      yDisplacement = pieDisplacement.Height;                  }                  PieSlice slice = null;                  if (i == m_highlightedIndex)                      slice = CreatePieSliceHighlighted(m_xBoundingRect + largestDisplacementEllipseSize.Width / 2 + xDisplacement' m_yBoundingRect + largestDisplacementEllipseSize.Height / 2 + yDisplacement' topEllipeSize.Width' topEllipeSize.Height' PieHeight' (float)(startAngle % 360)' (float)(sweepAngle)' m_sliceColors[colorIndex]' m_shadowStyle' m_edgeColorType' m_edgeLineWidth);                  else                      slice = CreatePieSlice(m_xBoundingRect + largestDisplacementEllipseSize.Width / 2 + xDisplacement' m_yBoundingRect + largestDisplacementEllipseSize.Height / 2 + yDisplacement' topEllipeSize.Width' topEllipeSize.Height' PieHeight' (float)(startAngle % 360)' (float)(sweepAngle)' m_sliceColors[colorIndex]' m_shadowStyle' m_edgeColorType' m_edgeLineWidth);                  slice.Text = m_texts[i];                  // the backmost pie is inserted to the front of the list for correct drawing                  if (backPieIndex > -1 || ((startAngle <= 270) && (startAngle + sweepAngle > 270)) || ((startAngle >= 270) && (startAngle + sweepAngle > 630)))                  {                      ++backPieIndex;                      listPieSlices.Insert(backPieIndex' slice);                      m_pieSlicesMapping.Insert(backPieIndex' i);                  }                  else                  {                      listPieSlices.Add(slice);                      m_pieSlicesMapping.Add(i);                  }                  // increment displacementIndex only if there are more displacements available                  if (displacementIndex < maxDisplacementIndex)                      ++displacementIndex;                  ++colorIndex;                  // if all colors have been exhausted' reset color index                  if (colorIndex >= m_sliceColors.Length)                      colorIndex = 0;                  // prepare for the next pie slice                  startAngle += sweepAngle;                  if (startAngle > 360)                      startAngle -= 360;              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,InitializePieSlices,The following statement contains a magic number: for (int i = 0; i < m_values.Length; ++i)              {                  decimal itemValue = m_values[i];                  double sweepAngle = (double)itemValue / sum * 360;                  // displacement from the center of the ellipse                  float xDisplacement = m_sliceRelativeDisplacements[displacementIndex];                  float yDisplacement = m_sliceRelativeDisplacements[displacementIndex];                  if (xDisplacement > 0F)                  {                      Debug.Assert(largestDisplacement > 0F);                      SizeF pieDisplacement = GetSliceDisplacement((float)(startAngle + sweepAngle / 2)' m_sliceRelativeDisplacements[displacementIndex]);                      xDisplacement = pieDisplacement.Width;                      yDisplacement = pieDisplacement.Height;                  }                  PieSlice slice = null;                  if (i == m_highlightedIndex)                      slice = CreatePieSliceHighlighted(m_xBoundingRect + largestDisplacementEllipseSize.Width / 2 + xDisplacement' m_yBoundingRect + largestDisplacementEllipseSize.Height / 2 + yDisplacement' topEllipeSize.Width' topEllipeSize.Height' PieHeight' (float)(startAngle % 360)' (float)(sweepAngle)' m_sliceColors[colorIndex]' m_shadowStyle' m_edgeColorType' m_edgeLineWidth);                  else                      slice = CreatePieSlice(m_xBoundingRect + largestDisplacementEllipseSize.Width / 2 + xDisplacement' m_yBoundingRect + largestDisplacementEllipseSize.Height / 2 + yDisplacement' topEllipeSize.Width' topEllipeSize.Height' PieHeight' (float)(startAngle % 360)' (float)(sweepAngle)' m_sliceColors[colorIndex]' m_shadowStyle' m_edgeColorType' m_edgeLineWidth);                  slice.Text = m_texts[i];                  // the backmost pie is inserted to the front of the list for correct drawing                  if (backPieIndex > -1 || ((startAngle <= 270) && (startAngle + sweepAngle > 270)) || ((startAngle >= 270) && (startAngle + sweepAngle > 630)))                  {                      ++backPieIndex;                      listPieSlices.Insert(backPieIndex' slice);                      m_pieSlicesMapping.Insert(backPieIndex' i);                  }                  else                  {                      listPieSlices.Add(slice);                      m_pieSlicesMapping.Add(i);                  }                  // increment displacementIndex only if there are more displacements available                  if (displacementIndex < maxDisplacementIndex)                      ++displacementIndex;                  ++colorIndex;                  // if all colors have been exhausted' reset color index                  if (colorIndex >= m_sliceColors.Length)                      colorIndex = 0;                  // prepare for the next pie slice                  startAngle += sweepAngle;                  if (startAngle > 360)                      startAngle -= 360;              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,InitializePieSlices,The following statement contains a magic number: for (int i = 0; i < m_values.Length; ++i)              {                  decimal itemValue = m_values[i];                  double sweepAngle = (double)itemValue / sum * 360;                  // displacement from the center of the ellipse                  float xDisplacement = m_sliceRelativeDisplacements[displacementIndex];                  float yDisplacement = m_sliceRelativeDisplacements[displacementIndex];                  if (xDisplacement > 0F)                  {                      Debug.Assert(largestDisplacement > 0F);                      SizeF pieDisplacement = GetSliceDisplacement((float)(startAngle + sweepAngle / 2)' m_sliceRelativeDisplacements[displacementIndex]);                      xDisplacement = pieDisplacement.Width;                      yDisplacement = pieDisplacement.Height;                  }                  PieSlice slice = null;                  if (i == m_highlightedIndex)                      slice = CreatePieSliceHighlighted(m_xBoundingRect + largestDisplacementEllipseSize.Width / 2 + xDisplacement' m_yBoundingRect + largestDisplacementEllipseSize.Height / 2 + yDisplacement' topEllipeSize.Width' topEllipeSize.Height' PieHeight' (float)(startAngle % 360)' (float)(sweepAngle)' m_sliceColors[colorIndex]' m_shadowStyle' m_edgeColorType' m_edgeLineWidth);                  else                      slice = CreatePieSlice(m_xBoundingRect + largestDisplacementEllipseSize.Width / 2 + xDisplacement' m_yBoundingRect + largestDisplacementEllipseSize.Height / 2 + yDisplacement' topEllipeSize.Width' topEllipeSize.Height' PieHeight' (float)(startAngle % 360)' (float)(sweepAngle)' m_sliceColors[colorIndex]' m_shadowStyle' m_edgeColorType' m_edgeLineWidth);                  slice.Text = m_texts[i];                  // the backmost pie is inserted to the front of the list for correct drawing                  if (backPieIndex > -1 || ((startAngle <= 270) && (startAngle + sweepAngle > 270)) || ((startAngle >= 270) && (startAngle + sweepAngle > 630)))                  {                      ++backPieIndex;                      listPieSlices.Insert(backPieIndex' slice);                      m_pieSlicesMapping.Insert(backPieIndex' i);                  }                  else                  {                      listPieSlices.Add(slice);                      m_pieSlicesMapping.Add(i);                  }                  // increment displacementIndex only if there are more displacements available                  if (displacementIndex < maxDisplacementIndex)                      ++displacementIndex;                  ++colorIndex;                  // if all colors have been exhausted' reset color index                  if (colorIndex >= m_sliceColors.Length)                      colorIndex = 0;                  // prepare for the next pie slice                  startAngle += sweepAngle;                  if (startAngle > 360)                      startAngle -= 360;              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,InitializePieSlices,The following statement contains a magic number: for (int i = 0; i < m_values.Length; ++i)              {                  decimal itemValue = m_values[i];                  double sweepAngle = (double)itemValue / sum * 360;                  // displacement from the center of the ellipse                  float xDisplacement = m_sliceRelativeDisplacements[displacementIndex];                  float yDisplacement = m_sliceRelativeDisplacements[displacementIndex];                  if (xDisplacement > 0F)                  {                      Debug.Assert(largestDisplacement > 0F);                      SizeF pieDisplacement = GetSliceDisplacement((float)(startAngle + sweepAngle / 2)' m_sliceRelativeDisplacements[displacementIndex]);                      xDisplacement = pieDisplacement.Width;                      yDisplacement = pieDisplacement.Height;                  }                  PieSlice slice = null;                  if (i == m_highlightedIndex)                      slice = CreatePieSliceHighlighted(m_xBoundingRect + largestDisplacementEllipseSize.Width / 2 + xDisplacement' m_yBoundingRect + largestDisplacementEllipseSize.Height / 2 + yDisplacement' topEllipeSize.Width' topEllipeSize.Height' PieHeight' (float)(startAngle % 360)' (float)(sweepAngle)' m_sliceColors[colorIndex]' m_shadowStyle' m_edgeColorType' m_edgeLineWidth);                  else                      slice = CreatePieSlice(m_xBoundingRect + largestDisplacementEllipseSize.Width / 2 + xDisplacement' m_yBoundingRect + largestDisplacementEllipseSize.Height / 2 + yDisplacement' topEllipeSize.Width' topEllipeSize.Height' PieHeight' (float)(startAngle % 360)' (float)(sweepAngle)' m_sliceColors[colorIndex]' m_shadowStyle' m_edgeColorType' m_edgeLineWidth);                  slice.Text = m_texts[i];                  // the backmost pie is inserted to the front of the list for correct drawing                  if (backPieIndex > -1 || ((startAngle <= 270) && (startAngle + sweepAngle > 270)) || ((startAngle >= 270) && (startAngle + sweepAngle > 630)))                  {                      ++backPieIndex;                      listPieSlices.Insert(backPieIndex' slice);                      m_pieSlicesMapping.Insert(backPieIndex' i);                  }                  else                  {                      listPieSlices.Add(slice);                      m_pieSlicesMapping.Add(i);                  }                  // increment displacementIndex only if there are more displacements available                  if (displacementIndex < maxDisplacementIndex)                      ++displacementIndex;                  ++colorIndex;                  // if all colors have been exhausted' reset color index                  if (colorIndex >= m_sliceColors.Length)                      colorIndex = 0;                  // prepare for the next pie slice                  startAngle += sweepAngle;                  if (startAngle > 360)                      startAngle -= 360;              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,CreatePieSlice,The following statement contains a magic number: return new PieSlice(boundingRectLeft' boundingRectTop' boundingRectWidth' boundingRectHeight' sliceHeight' (float)(startAngle % 360)' sweepAngle' color' shadowStyle' edgeColorType' edgeLineWidth);
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,CreatePieSliceHighlighted,The following statement contains a magic number: return new PieSlice(boundingRectLeft' boundingRectTop' boundingRectWidth' boundingRectHeight' sliceHeight' (float)(startAngle % 360)' sweepAngle' highLightedColor' shadowStyle' edgeColorType' edgeLineWidth);
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,GetSliceDisplacement,The following statement contains a magic number: float xDisplacement = (float)(TopEllipseSize.Width * displacementFactor / 2 * Math.Cos(angle * Math.PI / 180));
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,GetSliceDisplacement,The following statement contains a magic number: float xDisplacement = (float)(TopEllipseSize.Width * displacementFactor / 2 * Math.Cos(angle * Math.PI / 180));
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,GetSliceDisplacement,The following statement contains a magic number: float yDisplacement = (float)(TopEllipseSize.Height * displacementFactor / 2 * Math.Sin(angle * Math.PI / 180));
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,GetSliceDisplacement,The following statement contains a magic number: float yDisplacement = (float)(TopEllipseSize.Height * displacementFactor / 2 * Math.Sin(angle * Math.PI / 180));
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,DrawSliceSides,The following statement contains a magic number: if ((m_pieSlices[0].StartAngle > 90) && (m_pieSlices[0].StartAngle <= 270) && (m_pieSlices[0].StartAngle + m_pieSlices[0].SweepAngle > 450))              {                  ps = (PieSlice)pieSlicesList[0];                  // this one is split at 0 deg to avoid line of split to be                  // visible on the periphery                  PieSlice[] splitSlices = ps.Split(0F);                  pieSlicesList[0] = splitSlices[0];                  if (splitSlices[1].SweepAngle > 0F)                  {                      pieSlicesList.Insert(1' splitSlices[1]);                  }              }              else if (((m_pieSlices[0].StartAngle > 270) && (m_pieSlices[0].StartAngle + m_pieSlices[0].SweepAngle > 450)) || ((m_pieSlices[0].StartAngle < 90) && (m_pieSlices[0].StartAngle + m_pieSlices[0].SweepAngle > 270)))              {                  ps = (PieSlice)pieSlicesList[0];                  // this one is split at 180 deg to avoid line of split to be                  // visible on the periphery                  PieSlice[] splitSlices = ps.Split(180F);                  pieSlicesList[0] = splitSlices[1];                  if (splitSlices[1].SweepAngle > 0F)                  {                      pieSlicesList.Add(splitSlices[0]);                  }              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,DrawSliceSides,The following statement contains a magic number: if ((m_pieSlices[0].StartAngle > 90) && (m_pieSlices[0].StartAngle <= 270) && (m_pieSlices[0].StartAngle + m_pieSlices[0].SweepAngle > 450))              {                  ps = (PieSlice)pieSlicesList[0];                  // this one is split at 0 deg to avoid line of split to be                  // visible on the periphery                  PieSlice[] splitSlices = ps.Split(0F);                  pieSlicesList[0] = splitSlices[0];                  if (splitSlices[1].SweepAngle > 0F)                  {                      pieSlicesList.Insert(1' splitSlices[1]);                  }              }              else if (((m_pieSlices[0].StartAngle > 270) && (m_pieSlices[0].StartAngle + m_pieSlices[0].SweepAngle > 450)) || ((m_pieSlices[0].StartAngle < 90) && (m_pieSlices[0].StartAngle + m_pieSlices[0].SweepAngle > 270)))              {                  ps = (PieSlice)pieSlicesList[0];                  // this one is split at 180 deg to avoid line of split to be                  // visible on the periphery                  PieSlice[] splitSlices = ps.Split(180F);                  pieSlicesList[0] = splitSlices[1];                  if (splitSlices[1].SweepAngle > 0F)                  {                      pieSlicesList.Add(splitSlices[0]);                  }              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,DrawSliceSides,The following statement contains a magic number: if ((m_pieSlices[0].StartAngle > 90) && (m_pieSlices[0].StartAngle <= 270) && (m_pieSlices[0].StartAngle + m_pieSlices[0].SweepAngle > 450))              {                  ps = (PieSlice)pieSlicesList[0];                  // this one is split at 0 deg to avoid line of split to be                  // visible on the periphery                  PieSlice[] splitSlices = ps.Split(0F);                  pieSlicesList[0] = splitSlices[0];                  if (splitSlices[1].SweepAngle > 0F)                  {                      pieSlicesList.Insert(1' splitSlices[1]);                  }              }              else if (((m_pieSlices[0].StartAngle > 270) && (m_pieSlices[0].StartAngle + m_pieSlices[0].SweepAngle > 450)) || ((m_pieSlices[0].StartAngle < 90) && (m_pieSlices[0].StartAngle + m_pieSlices[0].SweepAngle > 270)))              {                  ps = (PieSlice)pieSlicesList[0];                  // this one is split at 180 deg to avoid line of split to be                  // visible on the periphery                  PieSlice[] splitSlices = ps.Split(180F);                  pieSlicesList[0] = splitSlices[1];                  if (splitSlices[1].SweepAngle > 0F)                  {                      pieSlicesList.Add(splitSlices[0]);                  }              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,DrawSliceSides,The following statement contains a magic number: if ((m_pieSlices[0].StartAngle > 90) && (m_pieSlices[0].StartAngle <= 270) && (m_pieSlices[0].StartAngle + m_pieSlices[0].SweepAngle > 450))              {                  ps = (PieSlice)pieSlicesList[0];                  // this one is split at 0 deg to avoid line of split to be                  // visible on the periphery                  PieSlice[] splitSlices = ps.Split(0F);                  pieSlicesList[0] = splitSlices[0];                  if (splitSlices[1].SweepAngle > 0F)                  {                      pieSlicesList.Insert(1' splitSlices[1]);                  }              }              else if (((m_pieSlices[0].StartAngle > 270) && (m_pieSlices[0].StartAngle + m_pieSlices[0].SweepAngle > 450)) || ((m_pieSlices[0].StartAngle < 90) && (m_pieSlices[0].StartAngle + m_pieSlices[0].SweepAngle > 270)))              {                  ps = (PieSlice)pieSlicesList[0];                  // this one is split at 180 deg to avoid line of split to be                  // visible on the periphery                  PieSlice[] splitSlices = ps.Split(180F);                  pieSlicesList[0] = splitSlices[1];                  if (splitSlices[1].SweepAngle > 0F)                  {                      pieSlicesList.Add(splitSlices[0]);                  }              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,DrawSliceSides,The following statement contains a magic number: if ((m_pieSlices[0].StartAngle > 90) && (m_pieSlices[0].StartAngle <= 270) && (m_pieSlices[0].StartAngle + m_pieSlices[0].SweepAngle > 450))              {                  ps = (PieSlice)pieSlicesList[0];                  // this one is split at 0 deg to avoid line of split to be                  // visible on the periphery                  PieSlice[] splitSlices = ps.Split(0F);                  pieSlicesList[0] = splitSlices[0];                  if (splitSlices[1].SweepAngle > 0F)                  {                      pieSlicesList.Insert(1' splitSlices[1]);                  }              }              else if (((m_pieSlices[0].StartAngle > 270) && (m_pieSlices[0].StartAngle + m_pieSlices[0].SweepAngle > 450)) || ((m_pieSlices[0].StartAngle < 90) && (m_pieSlices[0].StartAngle + m_pieSlices[0].SweepAngle > 270)))              {                  ps = (PieSlice)pieSlicesList[0];                  // this one is split at 180 deg to avoid line of split to be                  // visible on the periphery                  PieSlice[] splitSlices = ps.Split(180F);                  pieSlicesList[0] = splitSlices[1];                  if (splitSlices[1].SweepAngle > 0F)                  {                      pieSlicesList.Add(splitSlices[0]);                  }              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,DrawSliceSides,The following statement contains a magic number: if ((m_pieSlices[0].StartAngle > 90) && (m_pieSlices[0].StartAngle <= 270) && (m_pieSlices[0].StartAngle + m_pieSlices[0].SweepAngle > 450))              {                  ps = (PieSlice)pieSlicesList[0];                  // this one is split at 0 deg to avoid line of split to be                  // visible on the periphery                  PieSlice[] splitSlices = ps.Split(0F);                  pieSlicesList[0] = splitSlices[0];                  if (splitSlices[1].SweepAngle > 0F)                  {                      pieSlicesList.Insert(1' splitSlices[1]);                  }              }              else if (((m_pieSlices[0].StartAngle > 270) && (m_pieSlices[0].StartAngle + m_pieSlices[0].SweepAngle > 450)) || ((m_pieSlices[0].StartAngle < 90) && (m_pieSlices[0].StartAngle + m_pieSlices[0].SweepAngle > 270)))              {                  ps = (PieSlice)pieSlicesList[0];                  // this one is split at 180 deg to avoid line of split to be                  // visible on the periphery                  PieSlice[] splitSlices = ps.Split(180F);                  pieSlicesList[0] = splitSlices[1];                  if (splitSlices[1].SweepAngle > 0F)                  {                      pieSlicesList.Add(splitSlices[0]);                  }              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,DrawSliceSides,The following statement contains a magic number: if ((m_pieSlices[0].StartAngle > 90) && (m_pieSlices[0].StartAngle <= 270) && (m_pieSlices[0].StartAngle + m_pieSlices[0].SweepAngle > 450))              {                  ps = (PieSlice)pieSlicesList[0];                  // this one is split at 0 deg to avoid line of split to be                  // visible on the periphery                  PieSlice[] splitSlices = ps.Split(0F);                  pieSlicesList[0] = splitSlices[0];                  if (splitSlices[1].SweepAngle > 0F)                  {                      pieSlicesList.Insert(1' splitSlices[1]);                  }              }              else if (((m_pieSlices[0].StartAngle > 270) && (m_pieSlices[0].StartAngle + m_pieSlices[0].SweepAngle > 450)) || ((m_pieSlices[0].StartAngle < 90) && (m_pieSlices[0].StartAngle + m_pieSlices[0].SweepAngle > 270)))              {                  ps = (PieSlice)pieSlicesList[0];                  // this one is split at 180 deg to avoid line of split to be                  // visible on the periphery                  PieSlice[] splitSlices = ps.Split(180F);                  pieSlicesList[0] = splitSlices[1];                  if (splitSlices[1].SweepAngle > 0F)                  {                      pieSlicesList.Add(splitSlices[0]);                  }              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,DrawSliceSides,The following statement contains a magic number: while (incrementIndex < decrementIndex)              {                  PieSlice sliceLeft = (PieSlice)pieSlicesList[decrementIndex];                  float angle1 = sliceLeft.StartAngle - 90;                  if (angle1 > 180 || angle1 < 0)                      angle1 = 0;                  PieSlice sliceRight = (PieSlice)pieSlicesList[incrementIndex];                  float angle2 = (450 - sliceRight.EndAngle) % 360;                  if (angle2 > 180 || angle2 < 0)                      angle2 = 0;                  Debug.Assert(angle1 >= 0);                  Debug.Assert(angle2 >= 0);                  if (angle2 >= angle1)                  {                      sliceRight.DrawSides(graphics);                      ++incrementIndex;                  }                  else if (angle2 < angle1)                  {                      sliceLeft.DrawSides(graphics);                      --decrementIndex;                  }              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,DrawSliceSides,The following statement contains a magic number: while (incrementIndex < decrementIndex)              {                  PieSlice sliceLeft = (PieSlice)pieSlicesList[decrementIndex];                  float angle1 = sliceLeft.StartAngle - 90;                  if (angle1 > 180 || angle1 < 0)                      angle1 = 0;                  PieSlice sliceRight = (PieSlice)pieSlicesList[incrementIndex];                  float angle2 = (450 - sliceRight.EndAngle) % 360;                  if (angle2 > 180 || angle2 < 0)                      angle2 = 0;                  Debug.Assert(angle1 >= 0);                  Debug.Assert(angle2 >= 0);                  if (angle2 >= angle1)                  {                      sliceRight.DrawSides(graphics);                      ++incrementIndex;                  }                  else if (angle2 < angle1)                  {                      sliceLeft.DrawSides(graphics);                      --decrementIndex;                  }              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,DrawSliceSides,The following statement contains a magic number: while (incrementIndex < decrementIndex)              {                  PieSlice sliceLeft = (PieSlice)pieSlicesList[decrementIndex];                  float angle1 = sliceLeft.StartAngle - 90;                  if (angle1 > 180 || angle1 < 0)                      angle1 = 0;                  PieSlice sliceRight = (PieSlice)pieSlicesList[incrementIndex];                  float angle2 = (450 - sliceRight.EndAngle) % 360;                  if (angle2 > 180 || angle2 < 0)                      angle2 = 0;                  Debug.Assert(angle1 >= 0);                  Debug.Assert(angle2 >= 0);                  if (angle2 >= angle1)                  {                      sliceRight.DrawSides(graphics);                      ++incrementIndex;                  }                  else if (angle2 < angle1)                  {                      sliceLeft.DrawSides(graphics);                      --decrementIndex;                  }              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,DrawSliceSides,The following statement contains a magic number: while (incrementIndex < decrementIndex)              {                  PieSlice sliceLeft = (PieSlice)pieSlicesList[decrementIndex];                  float angle1 = sliceLeft.StartAngle - 90;                  if (angle1 > 180 || angle1 < 0)                      angle1 = 0;                  PieSlice sliceRight = (PieSlice)pieSlicesList[incrementIndex];                  float angle2 = (450 - sliceRight.EndAngle) % 360;                  if (angle2 > 180 || angle2 < 0)                      angle2 = 0;                  Debug.Assert(angle1 >= 0);                  Debug.Assert(angle2 >= 0);                  if (angle2 >= angle1)                  {                      sliceRight.DrawSides(graphics);                      ++incrementIndex;                  }                  else if (angle2 < angle1)                  {                      sliceLeft.DrawSides(graphics);                      --decrementIndex;                  }              }
Magic Number,EVEMon.PieChart,PieChart3D,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieChart.cs,DrawSliceSides,The following statement contains a magic number: while (incrementIndex < decrementIndex)              {                  PieSlice sliceLeft = (PieSlice)pieSlicesList[decrementIndex];                  float angle1 = sliceLeft.StartAngle - 90;                  if (angle1 > 180 || angle1 < 0)                      angle1 = 0;                  PieSlice sliceRight = (PieSlice)pieSlicesList[incrementIndex];                  float angle2 = (450 - sliceRight.EndAngle) % 360;                  if (angle2 > 180 || angle2 < 0)                      angle2 = 0;                  Debug.Assert(angle1 >= 0);                  Debug.Assert(angle2 >= 0);                  if (angle2 >= angle1)                  {                      sliceRight.DrawSides(graphics);                      ++incrementIndex;                  }                  else if (angle2 < angle1)                  {                      sliceLeft.DrawSides(graphics);                      --decrementIndex;                  }              }
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetTextPosition,The following statement contains a magic number: if (SweepAngle >= 180)                  return PeripheralPoint(m_center.X' m_center.Y' m_boundingRectangle.Width / 3' m_boundingRectangle.Height / 3' GetActualAngle(StartAngle) + SweepAngle / 2);
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetTextPosition,The following statement contains a magic number: if (SweepAngle >= 180)                  return PeripheralPoint(m_center.X' m_center.Y' m_boundingRectangle.Width / 3' m_boundingRectangle.Height / 3' GetActualAngle(StartAngle) + SweepAngle / 2);
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetTextPosition,The following statement contains a magic number: if (SweepAngle >= 180)                  return PeripheralPoint(m_center.X' m_center.Y' m_boundingRectangle.Width / 3' m_boundingRectangle.Height / 3' GetActualAngle(StartAngle) + SweepAngle / 2);
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetTextPosition,The following statement contains a magic number: if (SweepAngle >= 180)                  return PeripheralPoint(m_center.X' m_center.Y' m_boundingRectangle.Width / 3' m_boundingRectangle.Height / 3' GetActualAngle(StartAngle) + SweepAngle / 2);
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetTextPosition,The following statement contains a magic number: float x = (m_pointStart.X + m_pointEnd.X) / 2;
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetTextPosition,The following statement contains a magic number: float y = (m_pointStart.Y + m_pointEnd.Y) / 2;
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetTextPosition,The following statement contains a magic number: float angle = (float)(Math.Atan2(y - m_center.Y' x - m_center.X) * 180 / Math.PI);
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetTextPosition,The following statement contains a magic number: return PeripheralPoint(m_center.X' m_center.Y' m_boundingRectangle.Width / 3' m_boundingRectangle.Height / 3' GetActualAngle(angle));
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetTextPosition,The following statement contains a magic number: return PeripheralPoint(m_center.X' m_center.Y' m_boundingRectangle.Width / 3' m_boundingRectangle.Height / 3' GetActualAngle(angle));
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetTextPositionOut,The following statement contains a magic number: if (SweepAngle >= 180)                  return PeripheralPoint(m_center.X' m_center.Y' m_boundingRectangle.Width / div' m_boundingRectangle.Height / div' GetActualAngle(StartAngle) + SweepAngle / 2);
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetTextPositionOut,The following statement contains a magic number: if (SweepAngle >= 180)                  return PeripheralPoint(m_center.X' m_center.Y' m_boundingRectangle.Width / div' m_boundingRectangle.Height / div' GetActualAngle(StartAngle) + SweepAngle / 2);
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetTextPositionOut,The following statement contains a magic number: float x = (m_pointStart.X + m_pointEnd.X) / 2;
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetTextPositionOut,The following statement contains a magic number: float y = (m_pointStart.Y + m_pointEnd.Y) / 2;
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetTextPositionOut,The following statement contains a magic number: float angle = (float)(Math.Atan2(y - m_center.Y' x - m_center.X) * 180 / Math.PI);
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,DrawSides,The following statement contains a magic number: if (StartAngle > 90 && StartAngle < 270) {                  DrawEndSide(graphics);                  DrawStartSide(graphics);              }              else {                  DrawStartSide(graphics);                  DrawEndSide(graphics);              }
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,DrawSides,The following statement contains a magic number: if (StartAngle > 90 && StartAngle < 270) {                  DrawEndSide(graphics);                  DrawStartSide(graphics);              }              else {                  DrawStartSide(graphics);                  DrawEndSide(graphics);              }
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,Split,The following statement contains a magic number: float newSweepAngle = (splitAngle - actualStartAngle + 360) % 360;
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,Split,The following statement contains a magic number: float newSweepAngle = (splitAngle - actualStartAngle + 360) % 360;
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,DrawStartSide,The following statement contains a magic number: if (m_startSide != null) {                  // checks if the side is visible                   if (StartAngle > 90 && StartAngle < 270)                      m_startSide.Draw(graphics' m_pen' m_brushStartSide);                  else                      m_startSide.Draw(graphics' m_pen' m_brushSurface);              }
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,DrawStartSide,The following statement contains a magic number: if (m_startSide != null) {                  // checks if the side is visible                   if (StartAngle > 90 && StartAngle < 270)                      m_startSide.Draw(graphics' m_pen' m_brushStartSide);                  else                      m_startSide.Draw(graphics' m_pen' m_brushSurface);              }
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,DrawEndSide,The following statement contains a magic number: if (m_endSide != null) {                  // checks if the side is visible                   if (EndAngle > 90 && EndAngle < 270)                      m_endSide.Draw(graphics' m_pen' m_brushSurface);                  else                      m_endSide.Draw(graphics' m_pen' m_brushEndSide);              }
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,DrawEndSide,The following statement contains a magic number: if (m_endSide != null) {                  // checks if the side is visible                   if (EndAngle > 90 && EndAngle < 270)                      m_endSide.Draw(graphics' m_pen' m_brushSurface);                  else                      m_endSide.Draw(graphics' m_pen' m_brushEndSide);              }
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetFittingRectangle,The following statement contains a magic number: if ((m_startAngle == 0F) || (m_startAngle + m_sweepAngle >= 360))                   GraphicsUtil.IncludePointX(ref boundingRectangle' m_boundingRectangle.Right);
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetFittingRectangle,The following statement contains a magic number: if ((m_startAngle <= 90) && (m_startAngle + m_sweepAngle >= 90) || (m_startAngle + m_sweepAngle >= 450))                  GraphicsUtil.IncludePointY(ref boundingRectangle' m_boundingRectangle.Bottom + SliceHeight);
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetFittingRectangle,The following statement contains a magic number: if ((m_startAngle <= 90) && (m_startAngle + m_sweepAngle >= 90) || (m_startAngle + m_sweepAngle >= 450))                  GraphicsUtil.IncludePointY(ref boundingRectangle' m_boundingRectangle.Bottom + SliceHeight);
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetFittingRectangle,The following statement contains a magic number: if ((m_startAngle <= 90) && (m_startAngle + m_sweepAngle >= 90) || (m_startAngle + m_sweepAngle >= 450))                  GraphicsUtil.IncludePointY(ref boundingRectangle' m_boundingRectangle.Bottom + SliceHeight);
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetFittingRectangle,The following statement contains a magic number: if ((m_startAngle <= 180) && (m_startAngle + m_sweepAngle >= 180) || (m_startAngle + m_sweepAngle >= 540))                   GraphicsUtil.IncludePointX(ref boundingRectangle' m_boundingRectangle.Left);
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetFittingRectangle,The following statement contains a magic number: if ((m_startAngle <= 180) && (m_startAngle + m_sweepAngle >= 180) || (m_startAngle + m_sweepAngle >= 540))                   GraphicsUtil.IncludePointX(ref boundingRectangle' m_boundingRectangle.Left);
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetFittingRectangle,The following statement contains a magic number: if ((m_startAngle <= 180) && (m_startAngle + m_sweepAngle >= 180) || (m_startAngle + m_sweepAngle >= 540))                   GraphicsUtil.IncludePointX(ref boundingRectangle' m_boundingRectangle.Left);
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetFittingRectangle,The following statement contains a magic number: if ((m_startAngle <= 270) && (m_startAngle + m_sweepAngle >= 270) || (m_startAngle + m_sweepAngle >= 630))                   GraphicsUtil.IncludePointY(ref boundingRectangle' m_boundingRectangle.Top);
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetFittingRectangle,The following statement contains a magic number: if ((m_startAngle <= 270) && (m_startAngle + m_sweepAngle >= 270) || (m_startAngle + m_sweepAngle >= 630))                   GraphicsUtil.IncludePointY(ref boundingRectangle' m_boundingRectangle.Top);
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetFittingRectangle,The following statement contains a magic number: if ((m_startAngle <= 270) && (m_startAngle + m_sweepAngle >= 270) || (m_startAngle + m_sweepAngle >= 630))                   GraphicsUtil.IncludePointY(ref boundingRectangle' m_boundingRectangle.Top);
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,CreateSurfaceBrushes,The following statement contains a magic number: switch (shadowStyle) {              case ShadowStyle.NoShadow:                  m_brushStartSide = m_brushEndSide = m_brushPeripherySurface = new SolidBrush(surfaceColor);                  break;              case ShadowStyle.UniformShadow:                  m_brushStartSide = m_brushEndSide = m_brushPeripherySurface = new SolidBrush(ColorUtil.CreateColorWithCorrectedLightness(surfaceColor' -ColorUtil.BrightnessEnhancementFactor1));                  break;              case ShadowStyle.GradualShadow:                  double angle = m_startAngle - 180 - s_shadowAngle;                  if (angle < 0)                      angle += 360;                  m_brushStartSide = CreateBrushForSide(surfaceColor' angle);                  angle = m_startAngle + m_sweepAngle - s_shadowAngle;                  if (angle < 0)                      angle += 360;                  m_brushEndSide = CreateBrushForSide(surfaceColor' angle);                  m_brushPeripherySurface = CreateBrushForPeriphery(surfaceColor);                  break;              }
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,CreateSurfaceBrushes,The following statement contains a magic number: switch (shadowStyle) {              case ShadowStyle.NoShadow:                  m_brushStartSide = m_brushEndSide = m_brushPeripherySurface = new SolidBrush(surfaceColor);                  break;              case ShadowStyle.UniformShadow:                  m_brushStartSide = m_brushEndSide = m_brushPeripherySurface = new SolidBrush(ColorUtil.CreateColorWithCorrectedLightness(surfaceColor' -ColorUtil.BrightnessEnhancementFactor1));                  break;              case ShadowStyle.GradualShadow:                  double angle = m_startAngle - 180 - s_shadowAngle;                  if (angle < 0)                      angle += 360;                  m_brushStartSide = CreateBrushForSide(surfaceColor' angle);                  angle = m_startAngle + m_sweepAngle - s_shadowAngle;                  if (angle < 0)                      angle += 360;                  m_brushEndSide = CreateBrushForSide(surfaceColor' angle);                  m_brushPeripherySurface = CreateBrushForPeriphery(surfaceColor);                  break;              }
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,CreateSurfaceBrushes,The following statement contains a magic number: switch (shadowStyle) {              case ShadowStyle.NoShadow:                  m_brushStartSide = m_brushEndSide = m_brushPeripherySurface = new SolidBrush(surfaceColor);                  break;              case ShadowStyle.UniformShadow:                  m_brushStartSide = m_brushEndSide = m_brushPeripherySurface = new SolidBrush(ColorUtil.CreateColorWithCorrectedLightness(surfaceColor' -ColorUtil.BrightnessEnhancementFactor1));                  break;              case ShadowStyle.GradualShadow:                  double angle = m_startAngle - 180 - s_shadowAngle;                  if (angle < 0)                      angle += 360;                  m_brushStartSide = CreateBrushForSide(surfaceColor' angle);                  angle = m_startAngle + m_sweepAngle - s_shadowAngle;                  if (angle < 0)                      angle += 360;                  m_brushEndSide = CreateBrushForSide(surfaceColor' angle);                  m_brushPeripherySurface = CreateBrushForPeriphery(surfaceColor);                  break;              }
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,CreateBrushForSide,The following statement contains a magic number: return new SolidBrush(ColorUtil.CreateColorWithCorrectedLightness(color' -(float)(ColorUtil.BrightnessEnhancementFactor1 * (1 - 0.8 * Math.Cos(angle * Math.PI / 180)))));
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,CreateBrushForSide,The following statement contains a magic number: return new SolidBrush(ColorUtil.CreateColorWithCorrectedLightness(color' -(float)(ColorUtil.BrightnessEnhancementFactor1 * (1 - 0.8 * Math.Cos(angle * Math.PI / 180)))));
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,CreateBrushForPeriphery,The following statement contains a magic number: colorBlend.Colors = new Color[] {                                                   ColorUtil.CreateColorWithCorrectedLightness(color' -ColorUtil.BrightnessEnhancementFactor1 / 2)'                                                   color'                                                   ColorUtil.CreateColorWithCorrectedLightness(color' -ColorUtil.BrightnessEnhancementFactor1)'               };
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,TransformAngle,The following statement contains a magic number: double x = m_boundingRectangle.Width * Math.Cos(angle * Math.PI / 180);
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,TransformAngle,The following statement contains a magic number: double y = m_boundingRectangle.Height * Math.Sin(angle * Math.PI / 180);
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,TransformAngle,The following statement contains a magic number: float result = (float)(Math.Atan2(y' x) * 180 / Math.PI);
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,TransformAngle,The following statement contains a magic number: if (result < 0)                  return result + 360;
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetActualAngle,The following statement contains a magic number: double x = m_boundingRectangle.Height * Math.Cos(transformedAngle * Math.PI / 180);
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetActualAngle,The following statement contains a magic number: double y = m_boundingRectangle.Width * Math.Sin(transformedAngle * Math.PI / 180);
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetActualAngle,The following statement contains a magic number: float result = (float)(Math.Atan2(y' x) * 180 / Math.PI);
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetActualAngle,The following statement contains a magic number: if (result < 0)                  return result + 360;
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,PeripheralPoint,The following statement contains a magic number: double angleRadians = angleDegrees * Math.PI / 180;
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,InitializePieSlice,The following statement contains a magic number: if (m_sweepAngle % 180 != 0F)                  m_sweepAngle = TransformAngle(m_actualStartAngle + m_actualSweepAngle) - m_startAngle;
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,InitializePieSlice,The following statement contains a magic number: if (m_sweepAngle < 0)                  m_sweepAngle += 360;
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,InitializePieSlice,The following statement contains a magic number: float xCenter = xBoundingRect + widthBoundingRect / 2;
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,InitializePieSlice,The following statement contains a magic number: float yCenter = yBoundingRect + heightBoundingRect / 2;
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,InitializePieSlice,The following statement contains a magic number: m_pointStart = PeripheralPoint(xCenter' yCenter' widthBoundingRect / 2' heightBoundingRect / 2' m_actualStartAngle);
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,InitializePieSlice,The following statement contains a magic number: m_pointStart = PeripheralPoint(xCenter' yCenter' widthBoundingRect / 2' heightBoundingRect / 2' m_actualStartAngle);
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,InitializePieSlice,The following statement contains a magic number: m_pointEnd = PeripheralPoint(xCenter' yCenter' widthBoundingRect / 2' heightBoundingRect / 2' m_actualStartAngle + m_actualSweepAngle);
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,InitializePieSlice,The following statement contains a magic number: m_pointEnd = PeripheralPoint(xCenter' yCenter' widthBoundingRect / 2' heightBoundingRect / 2' m_actualStartAngle + m_actualSweepAngle);
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,InitializeSides,The following statement contains a magic number: if (startSideExists)                  m_startSide = new Quadrilateral(m_center' m_pointStart' m_pointStartBelow' m_centerBelow' m_sweepAngle != 180);              else                  m_startSide = Quadrilateral.Empty;
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,InitializeSides,The following statement contains a magic number: if (endSideExists)                  m_endSide = new Quadrilateral(m_center' m_pointEnd' m_pointEndBelow' m_centerBelow' m_sweepAngle != 180);              else                  m_endSide = Quadrilateral.Empty;
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetVisiblePeripherySurfaceBounds,The following statement contains a magic number: if (!(m_sweepAngle == 0 || (m_startAngle >= 180 && m_startAngle + m_sweepAngle <= 360))) {                  // draws the periphery from start angle to the end angle or left                  // edge' whichever comes first                  if (StartAngle < 180) {                      float fi1 = m_startAngle;                      PointF x1 = new PointF(m_pointStart.X' m_pointStart.Y);                      float fi2 = EndAngle;                      PointF x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                      if (m_startAngle + m_sweepAngle > 180) {                          fi2 = 180;                          x2.X = m_boundingRectangle.X;                          x2.Y = m_center.Y;                      }                      peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                  }                  // if lateral surface is visible from the right edge                   if (m_startAngle + m_sweepAngle > 360) {                      float fi1 = 0;                      PointF x1 = new PointF(m_boundingRectangle.Right' m_center.Y);                      float fi2 = EndAngle;                      PointF x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                      if (fi2 > 180) {                          fi2 = 180;                          x2.X = m_boundingRectangle.Left;                          x2.Y = m_center.Y;                      }                      peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                  }              }
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetVisiblePeripherySurfaceBounds,The following statement contains a magic number: if (!(m_sweepAngle == 0 || (m_startAngle >= 180 && m_startAngle + m_sweepAngle <= 360))) {                  // draws the periphery from start angle to the end angle or left                  // edge' whichever comes first                  if (StartAngle < 180) {                      float fi1 = m_startAngle;                      PointF x1 = new PointF(m_pointStart.X' m_pointStart.Y);                      float fi2 = EndAngle;                      PointF x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                      if (m_startAngle + m_sweepAngle > 180) {                          fi2 = 180;                          x2.X = m_boundingRectangle.X;                          x2.Y = m_center.Y;                      }                      peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                  }                  // if lateral surface is visible from the right edge                   if (m_startAngle + m_sweepAngle > 360) {                      float fi1 = 0;                      PointF x1 = new PointF(m_boundingRectangle.Right' m_center.Y);                      float fi2 = EndAngle;                      PointF x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                      if (fi2 > 180) {                          fi2 = 180;                          x2.X = m_boundingRectangle.Left;                          x2.Y = m_center.Y;                      }                      peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                  }              }
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetVisiblePeripherySurfaceBounds,The following statement contains a magic number: if (!(m_sweepAngle == 0 || (m_startAngle >= 180 && m_startAngle + m_sweepAngle <= 360))) {                  // draws the periphery from start angle to the end angle or left                  // edge' whichever comes first                  if (StartAngle < 180) {                      float fi1 = m_startAngle;                      PointF x1 = new PointF(m_pointStart.X' m_pointStart.Y);                      float fi2 = EndAngle;                      PointF x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                      if (m_startAngle + m_sweepAngle > 180) {                          fi2 = 180;                          x2.X = m_boundingRectangle.X;                          x2.Y = m_center.Y;                      }                      peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                  }                  // if lateral surface is visible from the right edge                   if (m_startAngle + m_sweepAngle > 360) {                      float fi1 = 0;                      PointF x1 = new PointF(m_boundingRectangle.Right' m_center.Y);                      float fi2 = EndAngle;                      PointF x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                      if (fi2 > 180) {                          fi2 = 180;                          x2.X = m_boundingRectangle.Left;                          x2.Y = m_center.Y;                      }                      peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                  }              }
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetVisiblePeripherySurfaceBounds,The following statement contains a magic number: if (!(m_sweepAngle == 0 || (m_startAngle >= 180 && m_startAngle + m_sweepAngle <= 360))) {                  // draws the periphery from start angle to the end angle or left                  // edge' whichever comes first                  if (StartAngle < 180) {                      float fi1 = m_startAngle;                      PointF x1 = new PointF(m_pointStart.X' m_pointStart.Y);                      float fi2 = EndAngle;                      PointF x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                      if (m_startAngle + m_sweepAngle > 180) {                          fi2 = 180;                          x2.X = m_boundingRectangle.X;                          x2.Y = m_center.Y;                      }                      peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                  }                  // if lateral surface is visible from the right edge                   if (m_startAngle + m_sweepAngle > 360) {                      float fi1 = 0;                      PointF x1 = new PointF(m_boundingRectangle.Right' m_center.Y);                      float fi2 = EndAngle;                      PointF x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                      if (fi2 > 180) {                          fi2 = 180;                          x2.X = m_boundingRectangle.Left;                          x2.Y = m_center.Y;                      }                      peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                  }              }
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetVisiblePeripherySurfaceBounds,The following statement contains a magic number: if (!(m_sweepAngle == 0 || (m_startAngle >= 180 && m_startAngle + m_sweepAngle <= 360))) {                  // draws the periphery from start angle to the end angle or left                  // edge' whichever comes first                  if (StartAngle < 180) {                      float fi1 = m_startAngle;                      PointF x1 = new PointF(m_pointStart.X' m_pointStart.Y);                      float fi2 = EndAngle;                      PointF x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                      if (m_startAngle + m_sweepAngle > 180) {                          fi2 = 180;                          x2.X = m_boundingRectangle.X;                          x2.Y = m_center.Y;                      }                      peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                  }                  // if lateral surface is visible from the right edge                   if (m_startAngle + m_sweepAngle > 360) {                      float fi1 = 0;                      PointF x1 = new PointF(m_boundingRectangle.Right' m_center.Y);                      float fi2 = EndAngle;                      PointF x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                      if (fi2 > 180) {                          fi2 = 180;                          x2.X = m_boundingRectangle.Left;                          x2.Y = m_center.Y;                      }                      peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                  }              }
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetVisiblePeripherySurfaceBounds,The following statement contains a magic number: if (!(m_sweepAngle == 0 || (m_startAngle >= 180 && m_startAngle + m_sweepAngle <= 360))) {                  // draws the periphery from start angle to the end angle or left                  // edge' whichever comes first                  if (StartAngle < 180) {                      float fi1 = m_startAngle;                      PointF x1 = new PointF(m_pointStart.X' m_pointStart.Y);                      float fi2 = EndAngle;                      PointF x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                      if (m_startAngle + m_sweepAngle > 180) {                          fi2 = 180;                          x2.X = m_boundingRectangle.X;                          x2.Y = m_center.Y;                      }                      peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                  }                  // if lateral surface is visible from the right edge                   if (m_startAngle + m_sweepAngle > 360) {                      float fi1 = 0;                      PointF x1 = new PointF(m_boundingRectangle.Right' m_center.Y);                      float fi2 = EndAngle;                      PointF x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                      if (fi2 > 180) {                          fi2 = 180;                          x2.X = m_boundingRectangle.Left;                          x2.Y = m_center.Y;                      }                      peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                  }              }
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetVisiblePeripherySurfaceBounds,The following statement contains a magic number: if (!(m_sweepAngle == 0 || (m_startAngle >= 180 && m_startAngle + m_sweepAngle <= 360))) {                  // draws the periphery from start angle to the end angle or left                  // edge' whichever comes first                  if (StartAngle < 180) {                      float fi1 = m_startAngle;                      PointF x1 = new PointF(m_pointStart.X' m_pointStart.Y);                      float fi2 = EndAngle;                      PointF x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                      if (m_startAngle + m_sweepAngle > 180) {                          fi2 = 180;                          x2.X = m_boundingRectangle.X;                          x2.Y = m_center.Y;                      }                      peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                  }                  // if lateral surface is visible from the right edge                   if (m_startAngle + m_sweepAngle > 360) {                      float fi1 = 0;                      PointF x1 = new PointF(m_boundingRectangle.Right' m_center.Y);                      float fi2 = EndAngle;                      PointF x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                      if (fi2 > 180) {                          fi2 = 180;                          x2.X = m_boundingRectangle.Left;                          x2.Y = m_center.Y;                      }                      peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                  }              }
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetVisiblePeripherySurfaceBounds,The following statement contains a magic number: if (!(m_sweepAngle == 0 || (m_startAngle >= 180 && m_startAngle + m_sweepAngle <= 360))) {                  // draws the periphery from start angle to the end angle or left                  // edge' whichever comes first                  if (StartAngle < 180) {                      float fi1 = m_startAngle;                      PointF x1 = new PointF(m_pointStart.X' m_pointStart.Y);                      float fi2 = EndAngle;                      PointF x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                      if (m_startAngle + m_sweepAngle > 180) {                          fi2 = 180;                          x2.X = m_boundingRectangle.X;                          x2.Y = m_center.Y;                      }                      peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                  }                  // if lateral surface is visible from the right edge                   if (m_startAngle + m_sweepAngle > 360) {                      float fi1 = 0;                      PointF x1 = new PointF(m_boundingRectangle.Right' m_center.Y);                      float fi2 = EndAngle;                      PointF x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                      if (fi2 > 180) {                          fi2 = 180;                          x2.X = m_boundingRectangle.Left;                          x2.Y = m_center.Y;                      }                      peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                  }              }
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetHiddenPeripherySurfaceBounds,The following statement contains a magic number: if (!(m_sweepAngle == 0 || (m_startAngle >= 0 && m_startAngle + m_sweepAngle <= 180))) {                  // draws the periphery from start angle to the end angle or right                  // edge' whichever comes first                  if (m_startAngle + m_sweepAngle > 180) {                      float fi1 = m_startAngle;                      PointF x1 = new PointF(m_pointStart.X' m_pointStart.Y);                      float fi2 = m_startAngle + m_sweepAngle;                      PointF x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                      if (fi1 < 180) {                          fi1 = 180;                          x1.X = m_boundingRectangle.Left;                          x1.Y = m_center.Y;                      }                      if (fi2 > 360) {                          fi2 = 360;                          x2.X = m_boundingRectangle.Right;                          x2.Y = m_center.Y;                      }                      peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                      // if pie is crossing 360 & 180 deg. boundary' we have to                       // invisible peripheries                      if (m_startAngle < 360 && m_startAngle + m_sweepAngle > 540) {                          fi1 = 180;                          x1 = new PointF(m_boundingRectangle.Left' m_center.Y);                          fi2 = EndAngle;                          x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                          peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                      }                  }              }
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetHiddenPeripherySurfaceBounds,The following statement contains a magic number: if (!(m_sweepAngle == 0 || (m_startAngle >= 0 && m_startAngle + m_sweepAngle <= 180))) {                  // draws the periphery from start angle to the end angle or right                  // edge' whichever comes first                  if (m_startAngle + m_sweepAngle > 180) {                      float fi1 = m_startAngle;                      PointF x1 = new PointF(m_pointStart.X' m_pointStart.Y);                      float fi2 = m_startAngle + m_sweepAngle;                      PointF x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                      if (fi1 < 180) {                          fi1 = 180;                          x1.X = m_boundingRectangle.Left;                          x1.Y = m_center.Y;                      }                      if (fi2 > 360) {                          fi2 = 360;                          x2.X = m_boundingRectangle.Right;                          x2.Y = m_center.Y;                      }                      peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                      // if pie is crossing 360 & 180 deg. boundary' we have to                       // invisible peripheries                      if (m_startAngle < 360 && m_startAngle + m_sweepAngle > 540) {                          fi1 = 180;                          x1 = new PointF(m_boundingRectangle.Left' m_center.Y);                          fi2 = EndAngle;                          x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                          peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                      }                  }              }
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetHiddenPeripherySurfaceBounds,The following statement contains a magic number: if (!(m_sweepAngle == 0 || (m_startAngle >= 0 && m_startAngle + m_sweepAngle <= 180))) {                  // draws the periphery from start angle to the end angle or right                  // edge' whichever comes first                  if (m_startAngle + m_sweepAngle > 180) {                      float fi1 = m_startAngle;                      PointF x1 = new PointF(m_pointStart.X' m_pointStart.Y);                      float fi2 = m_startAngle + m_sweepAngle;                      PointF x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                      if (fi1 < 180) {                          fi1 = 180;                          x1.X = m_boundingRectangle.Left;                          x1.Y = m_center.Y;                      }                      if (fi2 > 360) {                          fi2 = 360;                          x2.X = m_boundingRectangle.Right;                          x2.Y = m_center.Y;                      }                      peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                      // if pie is crossing 360 & 180 deg. boundary' we have to                       // invisible peripheries                      if (m_startAngle < 360 && m_startAngle + m_sweepAngle > 540) {                          fi1 = 180;                          x1 = new PointF(m_boundingRectangle.Left' m_center.Y);                          fi2 = EndAngle;                          x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                          peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                      }                  }              }
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetHiddenPeripherySurfaceBounds,The following statement contains a magic number: if (!(m_sweepAngle == 0 || (m_startAngle >= 0 && m_startAngle + m_sweepAngle <= 180))) {                  // draws the periphery from start angle to the end angle or right                  // edge' whichever comes first                  if (m_startAngle + m_sweepAngle > 180) {                      float fi1 = m_startAngle;                      PointF x1 = new PointF(m_pointStart.X' m_pointStart.Y);                      float fi2 = m_startAngle + m_sweepAngle;                      PointF x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                      if (fi1 < 180) {                          fi1 = 180;                          x1.X = m_boundingRectangle.Left;                          x1.Y = m_center.Y;                      }                      if (fi2 > 360) {                          fi2 = 360;                          x2.X = m_boundingRectangle.Right;                          x2.Y = m_center.Y;                      }                      peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                      // if pie is crossing 360 & 180 deg. boundary' we have to                       // invisible peripheries                      if (m_startAngle < 360 && m_startAngle + m_sweepAngle > 540) {                          fi1 = 180;                          x1 = new PointF(m_boundingRectangle.Left' m_center.Y);                          fi2 = EndAngle;                          x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                          peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                      }                  }              }
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetHiddenPeripherySurfaceBounds,The following statement contains a magic number: if (!(m_sweepAngle == 0 || (m_startAngle >= 0 && m_startAngle + m_sweepAngle <= 180))) {                  // draws the periphery from start angle to the end angle or right                  // edge' whichever comes first                  if (m_startAngle + m_sweepAngle > 180) {                      float fi1 = m_startAngle;                      PointF x1 = new PointF(m_pointStart.X' m_pointStart.Y);                      float fi2 = m_startAngle + m_sweepAngle;                      PointF x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                      if (fi1 < 180) {                          fi1 = 180;                          x1.X = m_boundingRectangle.Left;                          x1.Y = m_center.Y;                      }                      if (fi2 > 360) {                          fi2 = 360;                          x2.X = m_boundingRectangle.Right;                          x2.Y = m_center.Y;                      }                      peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                      // if pie is crossing 360 & 180 deg. boundary' we have to                       // invisible peripheries                      if (m_startAngle < 360 && m_startAngle + m_sweepAngle > 540) {                          fi1 = 180;                          x1 = new PointF(m_boundingRectangle.Left' m_center.Y);                          fi2 = EndAngle;                          x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                          peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                      }                  }              }
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetHiddenPeripherySurfaceBounds,The following statement contains a magic number: if (!(m_sweepAngle == 0 || (m_startAngle >= 0 && m_startAngle + m_sweepAngle <= 180))) {                  // draws the periphery from start angle to the end angle or right                  // edge' whichever comes first                  if (m_startAngle + m_sweepAngle > 180) {                      float fi1 = m_startAngle;                      PointF x1 = new PointF(m_pointStart.X' m_pointStart.Y);                      float fi2 = m_startAngle + m_sweepAngle;                      PointF x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                      if (fi1 < 180) {                          fi1 = 180;                          x1.X = m_boundingRectangle.Left;                          x1.Y = m_center.Y;                      }                      if (fi2 > 360) {                          fi2 = 360;                          x2.X = m_boundingRectangle.Right;                          x2.Y = m_center.Y;                      }                      peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                      // if pie is crossing 360 & 180 deg. boundary' we have to                       // invisible peripheries                      if (m_startAngle < 360 && m_startAngle + m_sweepAngle > 540) {                          fi1 = 180;                          x1 = new PointF(m_boundingRectangle.Left' m_center.Y);                          fi2 = EndAngle;                          x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                          peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                      }                  }              }
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetHiddenPeripherySurfaceBounds,The following statement contains a magic number: if (!(m_sweepAngle == 0 || (m_startAngle >= 0 && m_startAngle + m_sweepAngle <= 180))) {                  // draws the periphery from start angle to the end angle or right                  // edge' whichever comes first                  if (m_startAngle + m_sweepAngle > 180) {                      float fi1 = m_startAngle;                      PointF x1 = new PointF(m_pointStart.X' m_pointStart.Y);                      float fi2 = m_startAngle + m_sweepAngle;                      PointF x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                      if (fi1 < 180) {                          fi1 = 180;                          x1.X = m_boundingRectangle.Left;                          x1.Y = m_center.Y;                      }                      if (fi2 > 360) {                          fi2 = 360;                          x2.X = m_boundingRectangle.Right;                          x2.Y = m_center.Y;                      }                      peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                      // if pie is crossing 360 & 180 deg. boundary' we have to                       // invisible peripheries                      if (m_startAngle < 360 && m_startAngle + m_sweepAngle > 540) {                          fi1 = 180;                          x1 = new PointF(m_boundingRectangle.Left' m_center.Y);                          fi2 = EndAngle;                          x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                          peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                      }                  }              }
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetHiddenPeripherySurfaceBounds,The following statement contains a magic number: if (!(m_sweepAngle == 0 || (m_startAngle >= 0 && m_startAngle + m_sweepAngle <= 180))) {                  // draws the periphery from start angle to the end angle or right                  // edge' whichever comes first                  if (m_startAngle + m_sweepAngle > 180) {                      float fi1 = m_startAngle;                      PointF x1 = new PointF(m_pointStart.X' m_pointStart.Y);                      float fi2 = m_startAngle + m_sweepAngle;                      PointF x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                      if (fi1 < 180) {                          fi1 = 180;                          x1.X = m_boundingRectangle.Left;                          x1.Y = m_center.Y;                      }                      if (fi2 > 360) {                          fi2 = 360;                          x2.X = m_boundingRectangle.Right;                          x2.Y = m_center.Y;                      }                      peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                      // if pie is crossing 360 & 180 deg. boundary' we have to                       // invisible peripheries                      if (m_startAngle < 360 && m_startAngle + m_sweepAngle > 540) {                          fi1 = 180;                          x1 = new PointF(m_boundingRectangle.Left' m_center.Y);                          fi2 = EndAngle;                          x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                          peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                      }                  }              }
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetHiddenPeripherySurfaceBounds,The following statement contains a magic number: if (!(m_sweepAngle == 0 || (m_startAngle >= 0 && m_startAngle + m_sweepAngle <= 180))) {                  // draws the periphery from start angle to the end angle or right                  // edge' whichever comes first                  if (m_startAngle + m_sweepAngle > 180) {                      float fi1 = m_startAngle;                      PointF x1 = new PointF(m_pointStart.X' m_pointStart.Y);                      float fi2 = m_startAngle + m_sweepAngle;                      PointF x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                      if (fi1 < 180) {                          fi1 = 180;                          x1.X = m_boundingRectangle.Left;                          x1.Y = m_center.Y;                      }                      if (fi2 > 360) {                          fi2 = 360;                          x2.X = m_boundingRectangle.Right;                          x2.Y = m_center.Y;                      }                      peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                      // if pie is crossing 360 & 180 deg. boundary' we have to                       // invisible peripheries                      if (m_startAngle < 360 && m_startAngle + m_sweepAngle > 540) {                          fi1 = 180;                          x1 = new PointF(m_boundingRectangle.Left' m_center.Y);                          fi2 = EndAngle;                          x2 = new PointF(m_pointEnd.X' m_pointEnd.Y);                          peripherySurfaceBounds.Add(new PeripherySurfaceBounds(fi1' fi2' x1' x2));                      }                  }              }
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,PieSliceContainsPoint,The following statement contains a magic number: double x = point.X - xBoundingRectangle - widthBoundingRectangle / 2;
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,PieSliceContainsPoint,The following statement contains a magic number: double y = point.Y - yBoundingRectangle - heightBoundingRectangle / 2;
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,PieSliceContainsPoint,The following statement contains a magic number: if (angle < 0)                  angle += (2 * Math.PI);
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,PieSliceContainsPoint,The following statement contains a magic number: double angleDegrees = angle * 180 / Math.PI;
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,PieSliceContainsPoint,The following statement contains a magic number: if ((angleDegrees >= startAngle && angleDegrees <= (startAngle + sweepAngle)) ||                  (startAngle + sweepAngle > 360) && ((angleDegrees + 360) <= (startAngle + sweepAngle))) {                  // distance of the point from the ellipse centre                  double r = Math.Sqrt(y * y + x * x);                  return GetEllipseRadius(angle) > r;              }
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,PieSliceContainsPoint,The following statement contains a magic number: if ((angleDegrees >= startAngle && angleDegrees <= (startAngle + sweepAngle)) ||                  (startAngle + sweepAngle > 360) && ((angleDegrees + 360) <= (startAngle + sweepAngle))) {                  // distance of the point from the ellipse centre                  double r = Math.Sqrt(y * y + x * x);                  return GetEllipseRadius(angle) > r;              }
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetEllipseRadius,The following statement contains a magic number: double a = m_boundingRectangle.Width / 2;
Magic Number,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,GetEllipseRadius,The following statement contains a magic number: double b = m_boundingRectangle.Height / 2;
Magic Number,EVEMon.PieChart,Quadrilateral,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\Quadrilateral.cs,Quadrilateral,The following statement contains a magic number: if (toClose)                  pointTypes[3] |= (byte)PathPointType.CloseSubpath;
Magic Number,EVEMon.PieChart,Quadrilateral,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\Quadrilateral.cs,Contains,The following statement contains a magic number: return (intersections % 2 != 0);
Magic Number,EVEMon.PieChart,ColorUtil,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\Util.cs,CreateColorWithCorrectedLightness,The following statement contains a magic number: if (correctionFactor < 0) {                  correctionFactor = 1 + correctionFactor;                  red   *= correctionFactor;                  green *= correctionFactor;                  blue  *= correctionFactor;              }              else {                  red   = (255 - red) * correctionFactor + red;                  green = (255 - green) * correctionFactor + green;                  blue  = (255 - blue) * correctionFactor + blue;              }
Magic Number,EVEMon.PieChart,ColorUtil,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\Util.cs,CreateColorWithCorrectedLightness,The following statement contains a magic number: if (correctionFactor < 0) {                  correctionFactor = 1 + correctionFactor;                  red   *= correctionFactor;                  green *= correctionFactor;                  blue  *= correctionFactor;              }              else {                  red   = (255 - red) * correctionFactor + red;                  green = (255 - green) * correctionFactor + green;                  blue  = (255 - blue) * correctionFactor + blue;              }
Magic Number,EVEMon.PieChart,ColorUtil,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\Util.cs,CreateColorWithCorrectedLightness,The following statement contains a magic number: if (correctionFactor < 0) {                  correctionFactor = 1 + correctionFactor;                  red   *= correctionFactor;                  green *= correctionFactor;                  blue  *= correctionFactor;              }              else {                  red   = (255 - red) * correctionFactor + red;                  green = (255 - green) * correctionFactor + green;                  blue  = (255 - blue) * correctionFactor + blue;              }
Missing Default,EVEMon.PieChart,PieSlice,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\PieSlice.cs,CreateSurfaceBrushes,The following switch statement is missing a default case: switch (shadowStyle) {              case ShadowStyle.NoShadow:                  m_brushStartSide = m_brushEndSide = m_brushPeripherySurface = new SolidBrush(surfaceColor);                  break;              case ShadowStyle.UniformShadow:                  m_brushStartSide = m_brushEndSide = m_brushPeripherySurface = new SolidBrush(ColorUtil.CreateColorWithCorrectedLightness(surfaceColor' -ColorUtil.BrightnessEnhancementFactor1));                  break;              case ShadowStyle.GradualShadow:                  double angle = m_startAngle - 180 - s_shadowAngle;                  if (angle < 0)                      angle += 360;                  m_brushStartSide = CreateBrushForSide(surfaceColor' angle);                  angle = m_startAngle + m_sweepAngle - s_shadowAngle;                  if (angle < 0)                      angle += 360;                  m_brushEndSide = CreateBrushForSide(surfaceColor' angle);                  m_brushPeripherySurface = CreateBrushForPeriphery(surfaceColor);                  break;              }
Missing Default,EVEMon.PieChart,EdgeColor,C:\repos\evemuproject_evemu_server\utils\playertools\evemon\src\EVEMon.PieChart\Util.cs,GetRenderingColor,The following switch statement is missing a default case: switch (edgeColorType) {              case EdgeColorType.SystemColor:                  return SystemColors.WindowText;              case EdgeColorType.SurfaceColor:                  return color;              case EdgeColorType.FullContrast:                  return GetFullContrastColor(color);              case EdgeColorType.DarkerThanSurface:                  correctionFactor = -ColorUtil.BrightnessEnhancementFactor1;                  break;              case EdgeColorType.DarkerDarkerThanSurface:                  correctionFactor = -ColorUtil.BrightnessEnhancementFactor2;                  break;              case EdgeColorType.LighterThanSurface:                  correctionFactor = +ColorUtil.BrightnessEnhancementFactor1;                  break;              case EdgeColorType.LighterLighterThanSurface:                  correctionFactor = +ColorUtil.BrightnessEnhancementFactor2;                  break;              case EdgeColorType.NoEdge:                  return System.Drawing.Color.Transparent;              }
