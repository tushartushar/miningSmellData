Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Microsoft.VisualStudio.TestTools.UnitTesting,AssertEx,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,SequenceEqual,Cyclomatic complexity of the method is 8
Complex Method,Microsoft.VisualStudio.TestTools.UnitTesting,AssertEx,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,StructuralEqual,Cyclomatic complexity of the method is 9
Long Statement,BigQuery.Linq.Tests.Builder,JoinTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\JoinTest.cs,IndentCheckWithFlatten2,The length of the statement  "                .Join(ctx.From<wikipedia>().Select(x => new { x.title' v = x.contributor_id }).Into().Flatten(x => x.v)' (A' B) => new { A' B }' x => x.A.title == x.B.title) " is 157.
Long Statement,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,WithRange,The length of the statement  "                .WithRange(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc)) " is 120.
Long Statement,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,Join,The length of the statement  "                .Join(context.From<Wikipedia>("[publicdata:samples.wikipedia]").Select(x => new { x.title' x.wp_namespace }).Limit(1000)' " is 121.
Long Statement,Microsoft.VisualStudio.TestTools.UnitTesting,AssertEx,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Is,The length of the statement  "            CollectionAssert.AreEqual(expected.ToArray()' actual.ToArray()' new ComparisonComparer<T>(equalityComparison)' message); " is 120.
Long Statement,Microsoft.VisualStudio.TestTools.UnitTesting,AssertEx,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,IsNot,The length of the statement  "            CollectionAssert.AreNotEqual(notExpected.ToArray()' actual.ToArray()' new ComparisonComparer<T>(equalityComparison)' message); " is 126.
Long Statement,Microsoft.VisualStudio.TestTools.UnitTesting,AssertEx,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Catch,The length of the statement  "                var formatted = string.Format(CultureInfo.InvariantCulture' "{0} Catched:{1}{2}"' headerMsg' exception.GetType().Name' additionalMsg); " is 134.
Long Statement,Microsoft.VisualStudio.TestTools.UnitTesting,AssertEx,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Throws,The length of the statement  "                var formatted = string.Format(CultureInfo.InvariantCulture' "{0} Catched:{1}{2}"' headerMsg' exception.GetType().Name' additionalMsg); " is 134.
Long Statement,Microsoft.VisualStudio.TestTools.UnitTesting,AssertEx,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,DoesNotThrow,The length of the statement  "                var formatted = string.Format("Failed DoesNotThrow. Catched:{0}{1}"' exception.GetType().Name' string.IsNullOrEmpty(message) ? "" : "' " + message); " is 148.
Long Statement,Microsoft.VisualStudio.TestTools.UnitTesting,AssertEx,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,SequenceEqual,The length of the statement  "                            return new EqualInfo { IsEquals = false' Left = lValue' Right = rValue' Names = names.Concat(new[] { "[" + index + "]" }) }; " is 124.
Long Statement,Microsoft.VisualStudio.TestTools.UnitTesting,AssertEx,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,StructuralEqual,The length of the statement  "            if (object.ReferenceEquals(left' right)) return new EqualInfo { IsEquals = true' Left = left' Right = right' Names = names }; " is 125.
Long Statement,Microsoft.VisualStudio.TestTools.UnitTesting,AssertEx,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,StructuralEqual,The length of the statement  "            if (left == null || right == null) return new EqualInfo { IsEquals = false' Left = left' Right = right' Names = names }; " is 120.
Long Statement,Microsoft.VisualStudio.TestTools.UnitTesting,AssertEx,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,StructuralEqual,The length of the statement  "            var properties = left.GetType().GetProperties(BindingFlags.Instance | BindingFlags.Public).Where(x => x.GetGetMethod(false) != null); " is 133.
Long Statement,Microsoft.VisualStudio.TestTools.UnitTesting,DynamicAccessor<T>,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,TrySetIndex,The length of the statement  "                    typeof(T).InvokeMember("Item"' TransparentFlags | BindingFlags.SetProperty' null' target' indexes.Concat(new[] { value }).ToArray()); " is 133.
Long Statement,Microsoft.VisualStudio.TestTools.UnitTesting,DynamicAccessor<T>,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,TrySetIndex,The length of the statement  "                catch (MissingMethodException) { throw new ArgumentException(string.Format("indexer not found : Type <{0}>"' typeof(T).Name)); }; " is 129.
Long Statement,Microsoft.VisualStudio.TestTools.UnitTesting,DynamicAccessor<T>,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,TryGetIndex,The length of the statement  "                catch (MissingMethodException) { throw new ArgumentException(string.Format("indexer not found : Type <{0}>"' typeof(T).Name)); }; " is 129.
Long Statement,Microsoft.VisualStudio.TestTools.UnitTesting,DynamicAccessor<T>,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,TryInvokeMember,The length of the statement  "                var parameterTypes = (binder.GetType().GetField("Cache"' BindingFlags.NonPublic | BindingFlags.Instance).GetValue(binder) as Dictionary<Type' object>) " is 150.
Long Statement,Microsoft.VisualStudio.TestTools.UnitTesting,DynamicAccessor<T>,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,MatchMethod,The length of the statement  "                if (!nameMatched.Any()) throw new ArgumentException(string.Format("\"{0}\" not found : Type <{1}>"' methodName' typeof(T).Name)); " is 129.
Long Statement,Microsoft.VisualStudio.TestTools.UnitTesting,DynamicAccessor<T>,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,MatchMethod,The length of the statement  "                if (!typedMethods.Any()) throw new ArgumentException(string.Format("\"{0}\" not match arguments : Type <{1}>"' methodName' typeof(T).Name)); " is 140.
Long Statement,Microsoft.VisualStudio.TestTools.UnitTesting,DynamicAccessor<T>,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,MatchMethod,The length of the statement  "                if (generic != null) return generic.MethodInfo.MakeGenericMethod(generic.TypeParameters.Select(kvp => kvp.Value).ToArray()); " is 124.
Long Statement,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,AdvancedExample1_BoundingBoxQuery,The length of the statement  "  ((((([lat] / 1000) > 37.46) AND (([lat] / 1000) < 37.65)) AND (([long] / 1000) > -122.5)) AND (([long] / 1000) < -122.3)) " is 121.
Long Statement,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,AdvancedExample2_ApproximateBoundingCircleQuery,The length of the statement  "    ((((ACOS(((SIN(((39.737567 * PI()) / 180)) * SIN(((([lat] / 1000) * PI()) / 180))) + ((COS(((39.737567 * PI()) / 180)) * COS(((([lat] / 1000) * PI()) / 180))) * COS((((-104.9847179 - ([long] / 1000)) * PI()) / 180))))) * 180) / PI()) * 60) * 1.1515) AS [distance]' " is 264.
Long Statement,BigQuery.Linq.Tests.Functions,RegularExpressionTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\RegularExpressionTest.cs,Replace,The length of the statement  "            Ctx.Select(() => BqFunc.RegexpReplace("Hello"' "lo"' "p")).ToFlatSql().Is(@"SELECT REGEXP_REPLACE('Hello'' r'lo'' 'p')"); " is 121.
Long Statement,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,In_Subquery_real,The length of the statement  "                             && BqFunc.ParseUtcUsec(x.repository_created_at) >= BqFunc.ParseUtcUsec(BqFunc.StrftimeUtcUsec(BqFunc.TimestampToUsec(BqFunc.DateAdd(BqFunc.UsecToTimestamp(BqFunc.Now())' -1' IntervalUnit.Day))' "%Y-%m-%d 20:00:00")) " is 215.
Long Statement,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,In_Subquery_real,The length of the statement  "                        && BqFunc.ParseUtcUsec(x.repository_created_at) >= BqFunc.ParseUtcUsec(BqFunc.StrftimeUtcUsec(BqFunc.TimestampToUsec(BqFunc.DateAdd(BqFunc.UsecToTimestamp(BqFunc.Now())' -1' IntervalUnit.Day))' "%Y-%m-%d 20:00:00")) " is 215.
Long Statement,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,In_Subquery_real,The length of the statement  "  ((([type] = 'WatchEvent') AND (PARSE_UTC_USEC([repository_created_at]) >= PARSE_UTC_USEC(STRFTIME_UTC_USEC(TIMESTAMP_TO_USEC(DATE_ADD(USEC_TO_TIMESTAMP(NOW())' -1' 'DAY'))' '%Y-%m-%d 20:00:00')))) AND [repository_url] IN " is 220.
Long Statement,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,In_Subquery_real,The length of the statement  "      (((([type] = 'CreateEvent') AND (PARSE_UTC_USEC([repository_created_at]) >= PARSE_UTC_USEC(STRFTIME_UTC_USEC(TIMESTAMP_TO_USEC(DATE_ADD(USEC_TO_TIMESTAMP(NOW())' -1' 'DAY'))' '%Y-%m-%d 20:00:00')))) AND ([repository_fork] = 'false')) AND ([payload_ref_type] = 'repository')) " is 274.
Long Statement,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,MSecto,The length of the statement  "            Ctx.Select<DateTimeOffset>(() => BqFunc.MsecToTimestamp(1349053323000)).ToFlatSql().Is(@"SELECT MSEC_TO_TIMESTAMP(1349053323000)"); " is 131.
Long Statement,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,ParseUtcUsec,The length of the statement  "            Ctx.Select<long>(() => BqFunc.ParseUtcUsec("2012-10-01 02:03:04")).ToFlatSql().Is(@"SELECT PARSE_UTC_USEC('2012-10-01 02:03:04')"); " is 131.
Long Statement,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,Quater,The length of the statement  "            Ctx.Select<long>(() => BqFunc.Quarter(BqFunc.Timestamp("2012-10-01 02:03:04"))).ToFlatSql().Is("SELECT QUARTER(TIMESTAMP('2012-10-01 02:03:04'))"); " is 147.
Long Statement,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,SecToTimestamp,The length of the statement  "            Ctx.Select<DateTimeOffset>(() => BqFunc.SecToTimestamp(1355968987)).ToFlatSql().Is("SELECT SEC_TO_TIMESTAMP(1355968987)"); " is 122.
Long Statement,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,Strftime,The length of the statement  "            Ctx.Select<string>(() => BqFunc.StrftimeUtcUsec(1274259481071200' "%Y-%m-%d")).ToFlatSql().Is("SELECT STRFTIME_UTC_USEC(1274259481071200' '%Y-%m-%d')"); " is 152.
Long Statement,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,AdvancedExample_2,The length of the statement  "  (((([contributor_username] != '') AND ([contributor_username] IS NOT NULL)) AND ([timestamp] > 1133395200)) AND ([timestamp] < 1157068800)) " is 139.
Long Statement,BigQuery.Linq.Tests,MetaTableTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\MetaTableTest.cs,BuildCSharpClass,The length of the statement  "            var schema = new MetaTableSchema(new MetaTable("bigquery-samples:wikipedia_pageviews_s2.201001")' new List<TableFieldSchema>() " is 126.
Complex Conditional,Microsoft.VisualStudio.TestTools.UnitTesting,AssertEx,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,SequenceEqual,The conditional expression  "(lMove == true && rMove == false) || (lMove == false && rMove == true)"  is complex.
Magic Number,BigQuery.Linq.Tests.Builder,ContextTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\ContextTest.cs,FromSubQuery,The following statement contains a magic number: bqcx.From<MyClass>()                  .Select(x => new { x.age' hoge = 10 })                  .Into()                  .Select(x => new { x.hoge })                  .ToString()                  .Is(@"  SELECT    [hoge]  FROM  (    SELECT      [age]'      10 AS [hoge]    FROM      [aaa:bbb.ccc]  )".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,ContextTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\ContextTest.cs,FromDateRange,The following statement contains a magic number: var from = new DateTime(2014' 3' 25' 0' 0' 0' DateTimeKind.Utc);
Magic Number,BigQuery.Linq.Tests.Builder,ContextTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\ContextTest.cs,FromDateRange,The following statement contains a magic number: var from = new DateTime(2014' 3' 25' 0' 0' 0' DateTimeKind.Utc);
Magic Number,BigQuery.Linq.Tests.Builder,ContextTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\ContextTest.cs,FromDateRange,The following statement contains a magic number: var from = new DateTime(2014' 3' 25' 0' 0' 0' DateTimeKind.Utc);
Magic Number,BigQuery.Linq.Tests.Builder,ContextTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\ContextTest.cs,FromDateRange,The following statement contains a magic number: var to = from.AddDays(2);
Magic Number,BigQuery.Linq.Tests.Builder,ContextTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\ContextTest.cs,FromDateRange,The following statement contains a magic number: ctx.FromDateRange<People>(from' to)                  .Where(x => x.age >= 35)                  .Select(x => new { x.name })                  .ToString()                  .Is(@"  SELECT    [name]  FROM    TABLE_DATE_RANGE([mydata.people]' TIMESTAMP('2014-03-25')' TIMESTAMP('2014-03-27'))  WHERE    ([age] >= 35)  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,ContextTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\ContextTest.cs,FromDateRange,The following statement contains a magic number: ctx.FromDateRange<People>(fromExpr' toExpr)                  .Where(x => x.age >= 35)                  .Select(x => new { x.name })                  .ToString()                  .Is(@"  SELECT    [name]  FROM    TABLE_DATE_RANGE([mydata.people]' TIMESTAMP('2014-03-25')' TIMESTAMP('2014-03-27'))  WHERE    ([age] >= 35)  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,ContextTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\ContextTest.cs,FromDateRange,The following statement contains a magic number: ctx.FromDateRange("[mydata.people]"' new { age = default(int)' name = default(string) }' from' to)                  .Where(x => x.age >= 35)                  .Select(x => new { x.name })                  .ToString()                  .Is(@"  SELECT    [name]  FROM    TABLE_DATE_RANGE([mydata.people]' TIMESTAMP('2014-03-25')' TIMESTAMP('2014-03-27'))  WHERE    ([age] >= 35)  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,ContextTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\ContextTest.cs,FromDateRange,The following statement contains a magic number: ctx.FromDateRange<MyClass>("[mydata.people]"' from' to)                  .Where(x => x.age >= 35)                  .Select(x => new { x.name })                  .ToString()                  .Is(@"  SELECT    [name]  FROM    TABLE_DATE_RANGE([mydata.people]' TIMESTAMP('2014-03-25')' TIMESTAMP('2014-03-27'))  WHERE    ([age] >= 35)  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,ContextTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\ContextTest.cs,FromDateRangeStrict,The following statement contains a magic number: var from = new DateTime(2014' 3' 25' 0' 0' 0' DateTimeKind.Utc);
Magic Number,BigQuery.Linq.Tests.Builder,ContextTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\ContextTest.cs,FromDateRangeStrict,The following statement contains a magic number: var from = new DateTime(2014' 3' 25' 0' 0' 0' DateTimeKind.Utc);
Magic Number,BigQuery.Linq.Tests.Builder,ContextTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\ContextTest.cs,FromDateRangeStrict,The following statement contains a magic number: var from = new DateTime(2014' 3' 25' 0' 0' 0' DateTimeKind.Utc);
Magic Number,BigQuery.Linq.Tests.Builder,ContextTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\ContextTest.cs,FromDateRangeStrict,The following statement contains a magic number: var to = from.AddDays(2);
Magic Number,BigQuery.Linq.Tests.Builder,ContextTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\ContextTest.cs,FromDateRangeStrict,The following statement contains a magic number: ctx.FromDateRangeStrict<People>(from' to)                  .Where(x => x.age >= 35)                  .Select(x => new { x.name })                  .ToString()                  .Is(@"  SELECT    [name]  FROM    TABLE_DATE_RANGE_STRICT([mydata.people]' TIMESTAMP('2014-03-25')' TIMESTAMP('2014-03-27'))  WHERE    ([age] >= 35)  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,ContextTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\ContextTest.cs,FromDateRangeStrict,The following statement contains a magic number: ctx.FromDateRangeStrict<People>(fromExpr' toExpr)                  .Where(x => x.age >= 35)                  .Select(x => new { x.name })                  .ToString()                  .Is(@"  SELECT    [name]  FROM    TABLE_DATE_RANGE_STRICT([mydata.people]' TIMESTAMP('2014-03-25')' TIMESTAMP('2014-03-27'))  WHERE    ([age] >= 35)  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,ContextTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\ContextTest.cs,FromDateRangeStrict,The following statement contains a magic number: ctx.FromDateRangeStrict("[mydata.people]"' new { age = default(int)' name = default(string) }' from' to)                  .Where(x => x.age >= 35)                  .Select(x => new { x.name })                  .ToString()                  .Is(@"  SELECT    [name]  FROM    TABLE_DATE_RANGE_STRICT([mydata.people]' TIMESTAMP('2014-03-25')' TIMESTAMP('2014-03-27'))  WHERE    ([age] >= 35)  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,ContextTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\ContextTest.cs,FromDateRangeStrict,The following statement contains a magic number: ctx.FromDateRangeStrict<MyClass>("[mydata.people]"' from' to)                  .Where(x => x.age >= 35)                  .Select(x => new { x.name })                  .ToString()                  .Is(@"  SELECT    [name]  FROM    TABLE_DATE_RANGE_STRICT([mydata.people]' TIMESTAMP('2014-03-25')' TIMESTAMP('2014-03-27'))  WHERE    ([age] >= 35)  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,ContextTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\ContextTest.cs,FromTableQuery,The following statement contains a magic number: ctx.FromTableQuery<MyClass>("mydata"' x => x.table_id.Contains("oo") && BqFunc.Length(x.table_id) >= 4)                  .Select(x => new { x.age })                  .ToString()                  .Is(@"  SELECT    [age]  FROM    TABLE_QUERY([mydata]' ""([table_id] CONTAINS 'oo' AND (LENGTH([table_id]) >= 4))"")".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,ContextTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\ContextTest.cs,FromTableQuery,The following statement contains a magic number: ctx.FromTableQuery("mydata"' new { age = 0 }' x => x.table_id.Contains("oo") && BqFunc.Length(x.table_id) >= 4)                  .Select(x => new { x.age })                  .ToString()                  .Is(@"  SELECT    [age]  FROM    TABLE_QUERY([mydata]' ""([table_id] CONTAINS 'oo' AND (LENGTH([table_id]) >= 4))"")".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,SubQueryTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\SubQueryTest.cs,Sub,The following statement contains a magic number: context.Select(() => new { v = 100 })                  .Into()                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM  (    SELECT      100 AS [v]  )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,SubQueryTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\SubQueryTest.cs,SubWithoutFrom,The following statement contains a magic number: context.Select(() => new { v = 100 })                  .Into()                  .Join(context.Select(() => new { v4 = 200 })' (a' b) => new { a' b }' x => x.a.v == x.b.v4)                  .Select(x => new { vv = x.a.v })                  .ToString()                  .Is(@"  SELECT    [a.v] AS [vv]  FROM  (    SELECT      100 AS [v]  ) AS [a]  INNER JOIN  (    SELECT      200 AS [v4]  ) AS [b] ON ([a.v] = [b.v4])  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,SubQueryTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\SubQueryTest.cs,SubWithoutFrom,The following statement contains a magic number: context.Select(() => new { v = 100 })                  .Into()                  .Join(context.Select(() => new { v4 = 200 })' (a' b) => new { a' b }' x => x.a.v == x.b.v4)                  .Select(x => new { vv = x.a.v })                  .ToString()                  .Is(@"  SELECT    [a.v] AS [vv]  FROM  (    SELECT      100 AS [v]  ) AS [a]  INNER JOIN  (    SELECT      200 AS [v4]  ) AS [b] ON ([a.v] = [b.v4])  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,SubQueryTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\SubQueryTest.cs,MultiFrom,The following statement contains a magic number: var sub = context.Select(() => new { v = 100 });
Magic Number,BigQuery.Linq.Tests.Builder,SubQueryTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\SubQueryTest.cs,MultiFrom,The following statement contains a magic number: context.From(sub' sub' sub).Select().Limit(1000).ToString()                  .Is(@"  SELECT    *  FROM  (    SELECT      100 AS [v]  )'  (    SELECT      100 AS [v]  )'  (    SELECT      100 AS [v]  )  LIMIT 1000  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,JoinTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\JoinTest.cs,MultiJoinIExecute,The following statement contains a magic number: ctx.From<Wikipe>()                 .Join(ctx.From<Wikipe>().Select().Limit(100)' (A' B) => new { A' B }' x => x.A.title == x.B.title)                 .Join(ctx.From<Wikipe>().Select().Limit(100)' (X' C) => new { X.A' X.B' C }' x => x.C.title == x.B.title)                 .Select(x => x.A.title)                 .Into()                 .Select()                 .ToString()                 .Is(@"  SELECT    *  FROM  (    SELECT      [A.title]    FROM      [publicdata:samples.wikipedia] AS [A]    INNER JOIN    (      SELECT        *      FROM        [publicdata:samples.wikipedia]      LIMIT 100    ) AS [B] ON ([A.title] = [B.title])    INNER JOIN    (      SELECT        *      FROM        [publicdata:samples.wikipedia]      LIMIT 100    ) AS [C] ON ([C.title] = [B.title])  )".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,JoinTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\JoinTest.cs,MultiJoinIExecute,The following statement contains a magic number: ctx.From<Wikipe>()                 .Join(ctx.From<Wikipe>().Select().Limit(100)' (A' B) => new { A' B }' x => x.A.title == x.B.title)                 .Join(ctx.From<Wikipe>().Select().Limit(100)' (X' C) => new { X.A' X.B' C }' x => x.C.title == x.B.title)                 .Select(x => x.A.title)                 .Into()                 .Select()                 .ToString()                 .Is(@"  SELECT    *  FROM  (    SELECT      [A.title]    FROM      [publicdata:samples.wikipedia] AS [A]    INNER JOIN    (      SELECT        *      FROM        [publicdata:samples.wikipedia]      LIMIT 100    ) AS [B] ON ([A.title] = [B.title])    INNER JOIN    (      SELECT        *      FROM        [publicdata:samples.wikipedia]      LIMIT 100    ) AS [C] ON ([C.title] = [B.title])  )".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,FlattenTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\FlattenTest.cs,FlattenDigitMaker,The following statement contains a magic number: var d = digits                  .JoinCross(digits' (d1' d2) => new { d1' d2 })                  .Select(x => new { seq = x.d1.digit + (x.d2.digit * 10) })                  .OrderBy(x => x.seq)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Builder,FlattenTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\FlattenTest.cs,FlattenDigitMakerJoinEach,The following statement contains a magic number: var d = digits                  .JoinCross(digits' (d1' d2) => new { d1' d2 }' each: true)                  .Select(x => new { seq = x.d1.digit + (x.d2.digit * 10) })                  .OrderBy(x => x.seq)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestamp,The following statement contains a magic number: new DateTime(1970' 1' 1' 0' 0' 0).ToBigQueryTimestamp().Is(0);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestamp,The following statement contains a magic number: new DateTime(1970' 1' 1' 0' 0' 0' 1).ToBigQueryTimestamp().Is(1000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestamp,The following statement contains a magic number: new DateTime(1970' 1' 1' 0' 0' 0' 1).ToBigQueryTimestamp().Is(1000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestamp,The following statement contains a magic number: new DateTime(1970' 1' 1' 0' 0' 1).ToBigQueryTimestamp().Is(1000000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestamp,The following statement contains a magic number: new DateTime(1970' 1' 1' 0' 0' 1).ToBigQueryTimestamp().Is(1000000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestamp,The following statement contains a magic number: new DateTime(2014' 8' 8' 13' 20' 14).ToBigQueryTimestamp().Is(1407504014000000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestamp,The following statement contains a magic number: new DateTime(2014' 8' 8' 13' 20' 14).ToBigQueryTimestamp().Is(1407504014000000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestamp,The following statement contains a magic number: new DateTime(2014' 8' 8' 13' 20' 14).ToBigQueryTimestamp().Is(1407504014000000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestamp,The following statement contains a magic number: new DateTime(2014' 8' 8' 13' 20' 14).ToBigQueryTimestamp().Is(1407504014000000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestamp,The following statement contains a magic number: new DateTime(2014' 8' 8' 13' 20' 14).ToBigQueryTimestamp().Is(1407504014000000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestamp,The following statement contains a magic number: new DateTime(2014' 8' 8' 13' 20' 14).ToBigQueryTimestamp().Is(1407504014000000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestamp,The following statement contains a magic number: new DateTime(2014' 8' 8' 13' 20' 14).ToBigQueryTimestamp().Is(1407504014000000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestamp,The following statement contains a magic number: new DateTime(2012' 10' 1' 2' 3' 4).ToBigQueryTimestamp().Is(1349056984000000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestamp,The following statement contains a magic number: new DateTime(2012' 10' 1' 2' 3' 4).ToBigQueryTimestamp().Is(1349056984000000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestamp,The following statement contains a magic number: new DateTime(2012' 10' 1' 2' 3' 4).ToBigQueryTimestamp().Is(1349056984000000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestamp,The following statement contains a magic number: new DateTime(2012' 10' 1' 2' 3' 4).ToBigQueryTimestamp().Is(1349056984000000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestamp,The following statement contains a magic number: new DateTime(2012' 10' 1' 2' 3' 4).ToBigQueryTimestamp().Is(1349056984000000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestamp,The following statement contains a magic number: new DateTime(2012' 10' 1' 2' 3' 4).ToBigQueryTimestamp().Is(1349056984000000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestampOffset,The following statement contains a magic number: new DateTimeOffset(new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc)).ToBigQueryTimestamp().Is(0);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestampOffset,The following statement contains a magic number: new DateTimeOffset(new DateTime(1970' 1' 1' 0' 0' 0' 1' DateTimeKind.Utc)).ToBigQueryTimestamp().Is(1000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestampOffset,The following statement contains a magic number: new DateTimeOffset(new DateTime(1970' 1' 1' 0' 0' 0' 1' DateTimeKind.Utc)).ToBigQueryTimestamp().Is(1000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestampOffset,The following statement contains a magic number: new DateTimeOffset(new DateTime(1970' 1' 1' 0' 0' 1' DateTimeKind.Utc)).ToBigQueryTimestamp().Is(1000000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestampOffset,The following statement contains a magic number: new DateTimeOffset(new DateTime(1970' 1' 1' 0' 0' 1' DateTimeKind.Utc)).ToBigQueryTimestamp().Is(1000000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestampOffset,The following statement contains a magic number: new DateTimeOffset(new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc)).ToBigQueryTimestamp().Is(1407504014000000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestampOffset,The following statement contains a magic number: new DateTimeOffset(new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc)).ToBigQueryTimestamp().Is(1407504014000000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestampOffset,The following statement contains a magic number: new DateTimeOffset(new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc)).ToBigQueryTimestamp().Is(1407504014000000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestampOffset,The following statement contains a magic number: new DateTimeOffset(new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc)).ToBigQueryTimestamp().Is(1407504014000000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestampOffset,The following statement contains a magic number: new DateTimeOffset(new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc)).ToBigQueryTimestamp().Is(1407504014000000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestampOffset,The following statement contains a magic number: new DateTimeOffset(new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc)).ToBigQueryTimestamp().Is(1407504014000000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestampOffset,The following statement contains a magic number: new DateTimeOffset(new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc)).ToBigQueryTimestamp().Is(1407504014000000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestampOffset,The following statement contains a magic number: new DateTimeOffset(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)).ToBigQueryTimestamp().Is(1349056984000000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestampOffset,The following statement contains a magic number: new DateTimeOffset(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)).ToBigQueryTimestamp().Is(1349056984000000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestampOffset,The following statement contains a magic number: new DateTimeOffset(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)).ToBigQueryTimestamp().Is(1349056984000000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestampOffset,The following statement contains a magic number: new DateTimeOffset(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)).ToBigQueryTimestamp().Is(1349056984000000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestampOffset,The following statement contains a magic number: new DateTimeOffset(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)).ToBigQueryTimestamp().Is(1349056984000000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,ToBigQueryTimestampOffset,The following statement contains a magic number: new DateTimeOffset(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)).ToBigQueryTimestamp().Is(1349056984000000);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,FromBigQueryTimestamp,The following statement contains a magic number: var l = 1409549072345L;
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,FromBigQueryTimestamp,The following statement contains a magic number: l.FromTimestampMilliSeconds().DateTime.ToString().Is(new DateTime(2014' 9' 1' 5' 24' 32' DateTimeKind.Utc).ToString());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,FromBigQueryTimestamp,The following statement contains a magic number: l.FromTimestampMilliSeconds().DateTime.ToString().Is(new DateTime(2014' 9' 1' 5' 24' 32' DateTimeKind.Utc).ToString());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,FromBigQueryTimestamp,The following statement contains a magic number: l.FromTimestampMilliSeconds().DateTime.ToString().Is(new DateTime(2014' 9' 1' 5' 24' 32' DateTimeKind.Utc).ToString());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,FromBigQueryTimestamp,The following statement contains a magic number: l.FromTimestampMilliSeconds().DateTime.ToString().Is(new DateTime(2014' 9' 1' 5' 24' 32' DateTimeKind.Utc).ToString());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,FromBigQueryTimestamp,The following statement contains a magic number: l.FromTimestampMilliSeconds().DateTime.ToString().Is(new DateTime(2014' 9' 1' 5' 24' 32' DateTimeKind.Utc).ToString());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,FromBigQueryTimestamp,The following statement contains a magic number: 1349056984000000.FromBigQueryTimestamp().DateTime.Is(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc));
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,FromBigQueryTimestamp,The following statement contains a magic number: 1349056984000000.FromBigQueryTimestamp().DateTime.Is(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc));
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,FromBigQueryTimestamp,The following statement contains a magic number: 1349056984000000.FromBigQueryTimestamp().DateTime.Is(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc));
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,FromBigQueryTimestamp,The following statement contains a magic number: 1349056984000000.FromBigQueryTimestamp().DateTime.Is(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc));
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,FromBigQueryTimestamp,The following statement contains a magic number: 1349056984000000.FromBigQueryTimestamp().DateTime.Is(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc));
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,FromBigQueryTimestamp,The following statement contains a magic number: 1349056984000000.FromBigQueryTimestamp().DateTime.Is(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc));
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,WithSnapshot,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithSnapshot(new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM    [tablewikipedia@1407504014000]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,WithSnapshot,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithSnapshot(new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM    [tablewikipedia@1407504014000]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,WithSnapshot,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithSnapshot(new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM    [tablewikipedia@1407504014000]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,WithSnapshot,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithSnapshot(new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM    [tablewikipedia@1407504014000]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,WithSnapshot,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithSnapshot(new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM    [tablewikipedia@1407504014000]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,WithSnapshot,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithSnapshot(new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM    [tablewikipedia@1407504014000]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,WithRange,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithRange(new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM    [tablewikipedia@1407504014000-]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,WithRange,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithRange(new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM    [tablewikipedia@1407504014000-]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,WithRange,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithRange(new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM    [tablewikipedia@1407504014000-]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,WithRange,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithRange(new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM    [tablewikipedia@1407504014000-]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,WithRange,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithRange(new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM    [tablewikipedia@1407504014000-]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,WithRange,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithRange(new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM    [tablewikipedia@1407504014000-]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,WithRange,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithRange(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM    [tablewikipedia@1349056984000-1407504014000]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,WithRange,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithRange(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM    [tablewikipedia@1349056984000-1407504014000]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,WithRange,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithRange(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM    [tablewikipedia@1349056984000-1407504014000]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,WithRange,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithRange(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM    [tablewikipedia@1349056984000-1407504014000]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,WithRange,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithRange(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM    [tablewikipedia@1349056984000-1407504014000]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,WithRange,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithRange(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM    [tablewikipedia@1349056984000-1407504014000]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,WithRange,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithRange(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM    [tablewikipedia@1349056984000-1407504014000]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,WithRange,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithRange(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM    [tablewikipedia@1349056984000-1407504014000]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,WithRange,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithRange(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM    [tablewikipedia@1349056984000-1407504014000]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,WithRange,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithRange(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM    [tablewikipedia@1349056984000-1407504014000]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,WithRange,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithRange(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM    [tablewikipedia@1349056984000-1407504014000]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,WithRange,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithRange(TimeSpan.FromHours(1)' TimeSpan.FromHours(2))                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM    [tablewikipedia@-3600000--7200000]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,RealQuery,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithRange(new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM    [tablewikipedia@1407504014000-]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,RealQuery,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithRange(new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM    [tablewikipedia@1407504014000-]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,RealQuery,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithRange(new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM    [tablewikipedia@1407504014000-]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,RealQuery,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithRange(new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM    [tablewikipedia@1407504014000-]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,RealQuery,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithRange(new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM    [tablewikipedia@1407504014000-]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,RealQuery,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithRange(new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM    [tablewikipedia@1407504014000-]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,FromIndent,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithRange(new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .Into()                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM  (    SELECT      *    FROM      [tablewikipedia@1407504014000-]  )".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,FromIndent,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithRange(new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .Into()                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM  (    SELECT      *    FROM      [tablewikipedia@1407504014000-]  )".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,FromIndent,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithRange(new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .Into()                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM  (    SELECT      *    FROM      [tablewikipedia@1407504014000-]  )".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,FromIndent,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithRange(new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .Into()                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM  (    SELECT      *    FROM      [tablewikipedia@1407504014000-]  )".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,FromIndent,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithRange(new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .Into()                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM  (    SELECT      *    FROM      [tablewikipedia@1407504014000-]  )".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,FromIndent,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithRange(new DateTime(2014' 8' 8' 13' 20' 14' DateTimeKind.Utc))                  .Select()                  .Into()                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM  (    SELECT      *    FROM      [tablewikipedia@1407504014000-]  )".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,RealEx,The following statement contains a magic number: var date = new DateTime(2014'10'30' 3'59'0' DateTimeKind.Utc);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,RealEx,The following statement contains a magic number: var date = new DateTime(2014'10'30' 3'59'0' DateTimeKind.Utc);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,RealEx,The following statement contains a magic number: var date = new DateTime(2014'10'30' 3'59'0' DateTimeKind.Utc);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,RealEx,The following statement contains a magic number: var date = new DateTime(2014'10'30' 3'59'0' DateTimeKind.Utc);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,RealEx,The following statement contains a magic number: var date = new DateTime(2014'10'30' 3'59'0' DateTimeKind.Utc);
Magic Number,BigQuery.Linq.Tests.Builder,TableDecoratorTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\TableDecoratorTest.cs,RealEx,The following statement contains a magic number: context.From<int>("tablewikipedia")                  .WithRange(date.AddSeconds(-10)' date)                  .Select()                  .ToString()                  .Is(@"  SELECT    *  FROM    [tablewikipedia@1414641530000-1414641540000]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,DirectSelect,The following statement contains a magic number: var s = context.Select(() => new              {                  A = "aaa"'                  B = BqFunc.Abs(-5)'                  FROM = 100'              }).ToString().TrimEnd();
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,DirectSelect,The following statement contains a magic number: var s = context.Select(() => new              {                  A = "aaa"'                  B = BqFunc.Abs(-5)'                  FROM = 100'              }).ToString().TrimEnd();
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,WhereSelect,The following statement contains a magic number: var s = context.From<Wikipedia>("tablewikipedia")                  .Where(x => x.wp_namespace == 100)                  .Select(x => new { x.title' x.wp_namespace })                  .ToString().TrimEnd();
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,WhereWhere,The following statement contains a magic number: var s = context.From<Wikipedia>("tablewikipedia")                  .Where(x => x.wp_namespace == 100)                  .Where(x => x.title != null)                  .Where(x => x.title == "AiUeo")                  .Select(x => new { x.title' x.wp_namespace })                  .ToString().TrimEnd();
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,Join,The following statement contains a magic number: var query1 = context.From<Wikipedia>("[publicdata:samples.wikipedia]")                  .Join(context.From<Wikipedia>("[publicdata:samples.wikipedia]").Select(x => new { x.title' x.wp_namespace }).Limit(1000)'                      (kp' tp) => new { kp' tp }' // alias selector                      x => x.tp.title == x.kp.title) // conditional                  .Select(x => new { x.kp.title' x.tp.wp_namespace })                  .OrderBy(x => x.title)                  .ThenByDescending(x => x.wp_namespace)                  .Limit(100)                  .IgnoreCase()                  .ToString();
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,Join,The following statement contains a magic number: var query1 = context.From<Wikipedia>("[publicdata:samples.wikipedia]")                  .Join(context.From<Wikipedia>("[publicdata:samples.wikipedia]").Select(x => new { x.title' x.wp_namespace }).Limit(1000)'                      (kp' tp) => new { kp' tp }' // alias selector                      x => x.tp.title == x.kp.title) // conditional                  .Select(x => new { x.kp.title' x.tp.wp_namespace })                  .OrderBy(x => x.title)                  .ThenByDescending(x => x.wp_namespace)                  .Limit(100)                  .IgnoreCase()                  .ToString();
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,Sample1,The following statement contains a magic number: var query1 = context.From<Wikipedia>()                  .Where(x => x.wp_namespace == 0)                  .Select(x => new                  {                      x.title'                      hash_value = BqFunc.Hash(x.title)'                      included_in_sample = (BqFunc.Abs(BqFunc.Hash(x.title)) % 2 == 1)                          ? "True"                          : "False"                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,Sample1,The following statement contains a magic number: var query1 = context.From<Wikipedia>()                  .Where(x => x.wp_namespace == 0)                  .Select(x => new                  {                      x.title'                      hash_value = BqFunc.Hash(x.title)'                      included_in_sample = (BqFunc.Abs(BqFunc.Hash(x.title)) % 2 == 1)                          ? "True"                          : "False"                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,GroupByRollup,The following statement contains a magic number: var query1 = context.From<natality>()                  .Where(x => x.year >= 2000 && x.year <= 2002)                  .Select(x => new                  {                      x.year'                      x.is_male'                      count = BqFunc.Count(1)                  })                  .GroupBy(x => new { x.year' x.is_male }' rollup: true)                  .OrderBy(x => x.year)                  .ThenBy(x => x.is_male)                  .ToString()                  .TrimSmart();
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,GroupByRollup,The following statement contains a magic number: var query1 = context.From<natality>()                  .Where(x => x.year >= 2000 && x.year <= 2002)                  .Select(x => new                  {                      x.year'                      x.is_male'                      count = BqFunc.Count(1)                  })                  .GroupBy(x => new { x.year' x.is_male }' rollup: true)                  .OrderBy(x => x.year)                  .ThenBy(x => x.is_male)                  .ToString()                  .TrimSmart();
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,GroupByGrouping,The following statement contains a magic number: var query1 = context.From<natality>()                  .Where(x => x.year >= 2000 && x.year <= 2002)                  .Select(x => new                  {                      x.year'                      rollup_year = BqFunc.Grouping(x.year)'                      x.is_male'                      rollup_gender = BqFunc.Grouping(x.is_male)'                      count = BqFunc.Count(1)                  })                  .GroupBy(x => new { x.year' x.is_male }' rollup: true)                  .OrderBy(x => x.year)                  .ThenBy(x => x.is_male)                  .ToString()                  .TrimSmart();
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,GroupByGrouping,The following statement contains a magic number: var query1 = context.From<natality>()                  .Where(x => x.year >= 2000 && x.year <= 2002)                  .Select(x => new                  {                      x.year'                      rollup_year = BqFunc.Grouping(x.year)'                      x.is_male'                      rollup_gender = BqFunc.Grouping(x.is_male)'                      count = BqFunc.Count(1)                  })                  .GroupBy(x => new { x.year' x.is_male }' rollup: true)                  .OrderBy(x => x.year)                  .ThenBy(x => x.is_male)                  .ToString()                  .TrimSmart();
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,WindowFunction,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello")                  .Select(x => new                  {                      x.word'                      cume_dist = BqFunc.CumulativeDistribution(x)                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,WindowFunction2,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello")                  .Select(x => new                  {                      x.word'                      lag = BqFunc.Lag(x' y => y.word' 1' "aaa")                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,RowNumber1,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      lag = BqFunc.RowNumber(x).Value                      //.PartitionBy(y => y.corpus)                      //.OrderByDescending(y => y.word_count)                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,RowNumber1,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      lag = BqFunc.RowNumber(x).Value                      //.PartitionBy(y => y.corpus)                      //.OrderByDescending(y => y.word_count)                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,RowNumber2,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      lag = BqFunc.RowNumber(x)                        .PartitionBy(y => y.corpus).Value                      //.OrderByDescending(y => y.word_count)                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,RowNumber2,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      lag = BqFunc.RowNumber(x)                        .PartitionBy(y => y.corpus).Value                      //.OrderByDescending(y => y.word_count)                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,RowNumber3,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      lag = BqFunc.RowNumber(x)                      //.PartitionBy(y => y.corpus)                      .OrderByDescending(y => y.word_count)                      .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,RowNumber3,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      lag = BqFunc.RowNumber(x)                      //.PartitionBy(y => y.corpus)                      .OrderByDescending(y => y.word_count)                      .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,RowNumber4,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      lag = BqFunc.RowNumber(x)                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,RowNumber4,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      lag = BqFunc.RowNumber(x)                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,DateTime,The following statement contains a magic number: var local = new DateTime(2014' 10' 16' 21' 0' 0' DateTimeKind.Local);
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,DateTime,The following statement contains a magic number: var local = new DateTime(2014' 10' 16' 21' 0' 0' DateTimeKind.Local);
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,DateTime,The following statement contains a magic number: var local = new DateTime(2014' 10' 16' 21' 0' 0' DateTimeKind.Local);
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,DateTime,The following statement contains a magic number: var local = new DateTime(2014' 10' 16' 21' 0' 0' DateTimeKind.Local);
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,DateTime,The following statement contains a magic number: new BigQueryContext().Select(() => new { dt = new DateTime(2014' 10' 16' 21' 0' 0' DateTimeKind.Utc) })                  .ToString()                  .Is(@"  SELECT    '2014-10-16 21:00:00.000000' AS [dt]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,DateTime,The following statement contains a magic number: new BigQueryContext().Select(() => new { dt = new DateTime(2014' 10' 16' 21' 0' 0' DateTimeKind.Utc) })                  .ToString()                  .Is(@"  SELECT    '2014-10-16 21:00:00.000000' AS [dt]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,DateTime,The following statement contains a magic number: new BigQueryContext().Select(() => new { dt = new DateTime(2014' 10' 16' 21' 0' 0' DateTimeKind.Utc) })                  .ToString()                  .Is(@"  SELECT    '2014-10-16 21:00:00.000000' AS [dt]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,DateTime,The following statement contains a magic number: new BigQueryContext().Select(() => new { dt = new DateTime(2014' 10' 16' 21' 0' 0' DateTimeKind.Utc) })                  .ToString()                  .Is(@"  SELECT    '2014-10-16 21:00:00.000000' AS [dt]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,DateTime,The following statement contains a magic number: new BigQueryContext().Select(() => new { dt = new DateTimeOffset(2014' 10' 16' 21' 0' 0' TimeSpan.Zero) })                  .ToString()                  .Is(@"  SELECT    '2014-10-16 21:00:00.000000' AS [dt]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,DateTime,The following statement contains a magic number: new BigQueryContext().Select(() => new { dt = new DateTimeOffset(2014' 10' 16' 21' 0' 0' TimeSpan.Zero) })                  .ToString()                  .Is(@"  SELECT    '2014-10-16 21:00:00.000000' AS [dt]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,DateTime,The following statement contains a magic number: new BigQueryContext().Select(() => new { dt = new DateTimeOffset(2014' 10' 16' 21' 0' 0' TimeSpan.Zero) })                  .ToString()                  .Is(@"  SELECT    '2014-10-16 21:00:00.000000' AS [dt]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Builder,StandardQueries,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Builder\StandardQueries.cs,DateTime,The following statement contains a magic number: new BigQueryContext().Select(() => new { dt = new DateTimeOffset(2014' 10' 16' 21' 0' 0' TimeSpan.Zero) })                  .ToString()                  .Is(@"  SELECT    '2014-10-16 21:00:00.000000' AS [dt]".TrimSmart());
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,DynamicAccessor<T>,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,TryInvokeMember,The following statement contains a magic number: var parameterTypes = (binder.GetType().GetField("Cache"' BindingFlags.NonPublic | BindingFlags.Instance).GetValue(binder) as Dictionary<Type' object>)                      .First()                      .Key                      .GetGenericArguments()                      .Skip(2)                      .Take(args.Length)                      .ToArray();
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]'                      (T15)parameters[14]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]'                      (T15)parameters[14]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]'                      (T15)parameters[14]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]'                      (T15)parameters[14]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]'                      (T15)parameters[14]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]'                      (T15)parameters[14]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]'                      (T15)parameters[14]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]'                      (T15)parameters[14]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]'                      (T15)parameters[14]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]'                      (T15)parameters[14]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]'                      (T15)parameters[14]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]'                      (T15)parameters[14]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]'                      (T15)parameters[14]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]'                      (T15)parameters[14]'                      (T16)parameters[15]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]'                      (T15)parameters[14]'                      (T16)parameters[15]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]'                      (T15)parameters[14]'                      (T16)parameters[15]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]'                      (T15)parameters[14]'                      (T16)parameters[15]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]'                      (T15)parameters[14]'                      (T16)parameters[15]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]'                      (T15)parameters[14]'                      (T16)parameters[15]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]'                      (T15)parameters[14]'                      (T16)parameters[15]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]'                      (T15)parameters[14]'                      (T16)parameters[15]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]'                      (T15)parameters[14]'                      (T16)parameters[15]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]'                      (T15)parameters[14]'                      (T16)parameters[15]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]'                      (T15)parameters[14]'                      (T16)parameters[15]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]'                      (T15)parameters[14]'                      (T16)parameters[15]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]'                      (T15)parameters[14]'                      (T16)parameters[15]                      );
Magic Number,Microsoft.VisualStudio.TestTools.UnitTesting,TestContextExtensions,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\ChainingAssertion.MSTest.cs,Run,The following statement contains a magic number: assertion(                      (T1)parameters[0]'                      (T2)parameters[1]'                      (T3)parameters[2]'                      (T4)parameters[3]'                      (T5)parameters[4]'                      (T6)parameters[5]'                      (T7)parameters[6]'                      (T8)parameters[7]'                      (T9)parameters[8]'                      (T10)parameters[9]'                      (T11)parameters[10]'                      (T12)parameters[11]'                      (T13)parameters[12]'                      (T14)parameters[13]'                      (T15)parameters[14]'                      (T16)parameters[15]                      );
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,CUME_DIST,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      cume_dist = BqFunc.CumulativeDistribution(x)                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,CUME_DIST,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      cume_dist = BqFunc.CumulativeDistribution(x)                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,DenseRANK,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      dense_rank = BqFunc.DenseRank(x)                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,DenseRANK,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      dense_rank = BqFunc.DenseRank(x)                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,Lag,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      lag = BqFunc.Lag(x' y => y.word' 1)                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,Lag,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      lag = BqFunc.Lag(x' y => y.word' 1)                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,Lag,The following statement contains a magic number: var query2 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      lag = BqFunc.Lag(x' y => y.word' 1' "defv")                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,Lag,The following statement contains a magic number: var query2 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      lag = BqFunc.Lag(x' y => y.word' 1' "defv")                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,Lead,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      lead = BqFunc.Lead(x' y => y.word' 1)                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,Lead,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      lead = BqFunc.Lead(x' y => y.word' 1)                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,Lead,The following statement contains a magic number: var query2 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      lead = BqFunc.Lead(x' y => y.word' 1' "defv")                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,Lead,The following statement contains a magic number: var query2 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      lead = BqFunc.Lead(x' y => y.word' 1' "defv")                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,NthValue,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      nth = BqFunc.NthValue(x' y => y.word' 1)                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,NthValue,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      nth = BqFunc.NthValue(x' y => y.word' 1)                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,Ntile,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      ntile = BqFunc.Ntile(x' 2)                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,Ntile,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      ntile = BqFunc.Ntile(x' 2)                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,Ntile,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      ntile = BqFunc.Ntile(x' 2)                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,PercentRank,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      prank = BqFunc.PercentRank(x)                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,PercentRank,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      prank = BqFunc.PercentRank(x)                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,Percentile,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      p_cont = BqFunc.PercentileCont(x' 0.5)                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,Percentile,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      p_cont = BqFunc.PercentileCont(x' 0.5)                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,Percentile,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      p_cont = BqFunc.PercentileCont(x' 0.5)                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,Percentile,The following statement contains a magic number: var query2 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      p_disc = BqFunc.PercentileDisc(x' 0.5)                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,Percentile,The following statement contains a magic number: var query2 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      p_disc = BqFunc.PercentileDisc(x' 0.5)                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,Percentile,The following statement contains a magic number: var query2 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      p_disc = BqFunc.PercentileDisc(x' 0.5)                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,Rank,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      rank = BqFunc.Rank(x)                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,Rank,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      rank = BqFunc.Rank(x)                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,RatioToReport,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      r_to_r = BqFunc.RatioToReport(x' y => y.word_count)                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,RatioToReport,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      r_to_r = BqFunc.RatioToReport(x' y => y.word_count)                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,Rownumber,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      row_num = BqFunc.RowNumber(x)                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,Rownumber,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      row_num = BqFunc.RowNumber(x)                          .PartitionBy(y => y.corpus)                          .OrderByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,DescendingOrderingOnMultipleColumnsWhenPartitioning,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      row_num = BqFunc.RowNumber(x)                          .PartitionBy(y => y.corpus)                          .OrderBy(y => y.word)                          .ThenByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,DescendingOrderingOnMultipleColumnsWhenPartitioning,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      row_num = BqFunc.RowNumber(x)                          .PartitionBy(y => y.corpus)                          .OrderBy(y => y.word)                          .ThenByDescending(y => y.word_count)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,DescendingOrderingOnMultipleColumns,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      row_num = BqFunc.RowNumber(x)                          .OrderByDescending(y => y.word)                          .ThenBy(y => y.word_count)                          .ThenByDescending(y => y.corpus)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,WindowTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\WindowTest.cs,DescendingOrderingOnMultipleColumns,The following statement contains a magic number: var query1 = context.From<Shakespeare>()                  .Where(x => x.corpus == "othello" && BqFunc.Length(x.word) > 10)                  .Select(x => new                  {                      x.word'                      x.word_count'                      row_num = BqFunc.RowNumber(x)                          .OrderByDescending(y => y.word)                          .ThenBy(y => y.word_count)                          .ThenByDescending(y => y.corpus)                          .Value                  })                  .Limit(5)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,ArithmeticTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ArithmeticTest.cs,AddSubMulDivModulo,The following statement contains a magic number: var two = 2;
Magic Number,BigQuery.Linq.Tests.Functions,ArithmeticTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ArithmeticTest.cs,AddSubMulDivModulo,The following statement contains a magic number: var four = 4;
Magic Number,BigQuery.Linq.Tests.Functions,ArithmeticTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ArithmeticTest.cs,AddSubMulDivModulo,The following statement contains a magic number: var five = 5;
Magic Number,BigQuery.Linq.Tests.Functions,ArithmeticTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ArithmeticTest.cs,AddSubMulDivModulo,The following statement contains a magic number: var six = 6;
Magic Number,BigQuery.Linq.Tests.Functions,ArithmeticTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ArithmeticTest.cs,BitCount,The following statement contains a magic number: context.Select<long>(() => BqFunc.BitCount(1000)).ToString().TrimFlat()                  .Is("SELECT BIT_COUNT(1000)");
Magic Number,BigQuery.Linq.Tests.Functions,CastingTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\CastingTest.cs,Boolean,The following statement contains a magic number: Ctx.Select<bool?>(() => BqFunc.Boolean(100)).ToFlatSql().Is(@"SELECT BOOLEAN(100)");
Magic Number,BigQuery.Linq.Tests.Functions,CastingTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\CastingTest.cs,Boolean,The following statement contains a magic number: Ctx.Select<bool?>(() => BqFunc.Boolean(100.1)).ToFlatSql().Is(@"SELECT BOOLEAN(100.1)");
Magic Number,BigQuery.Linq.Tests.Functions,CastingTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\CastingTest.cs,Float,The following statement contains a magic number: Ctx.Select<double?>(() => BqFunc.Float(10)).ToFlatSql().Is(@"SELECT FLOAT(10)");
Magic Number,BigQuery.Linq.Tests.Functions,CastingTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\CastingTest.cs,HexString,The following statement contains a magic number: Ctx.Select<string>(() => BqFunc.HexString(10)).ToFlatSql().Is(@"SELECT HEX_STRING(10)");
Magic Number,BigQuery.Linq.Tests.Functions,CastingTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\CastingTest.cs,HexString,The following statement contains a magic number: Ctx.Select<string>(() => BqFunc.HexString(10.1)).ToFlatSql().Is(@"SELECT HEX_STRING(10.1)");
Magic Number,BigQuery.Linq.Tests.Functions,CastingTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\CastingTest.cs,Integer,The following statement contains a magic number: Ctx.Select<long?>(() => BqFunc.Integer(100)).ToFlatSql().Is(@"SELECT INTEGER(100)");
Magic Number,BigQuery.Linq.Tests.Functions,CastingTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\CastingTest.cs,Integer,The following statement contains a magic number: Ctx.Select<long?>(() => BqFunc.Integer(100.32)).ToFlatSql().Is(@"SELECT INTEGER(100.32)");
Magic Number,BigQuery.Linq.Tests.Functions,CastingTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\CastingTest.cs,String,The following statement contains a magic number: Ctx.Select<string>(() => BqFunc.String(10)).ToFlatSql().Is(@"SELECT STRING(10)");
Magic Number,BigQuery.Linq.Tests.Functions,CastingTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\CastingTest.cs,String,The following statement contains a magic number: Ctx.Select<string>(() => BqFunc.String(45.49)).ToFlatSql().Is(@"SELECT STRING(45.49)");
Magic Number,BigQuery.Linq.Tests.Functions,CastingTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\CastingTest.cs,Cast,The following statement contains a magic number: Ctx.Select<int>(() => BqFunc.Cast<int>(10)).ToFlatSql().Is(@"SELECT CAST(10 AS INTEGER)");
Magic Number,BigQuery.Linq.Tests.Functions,CastingTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\CastingTest.cs,Cast,The following statement contains a magic number: Ctx.Select<string>(() => BqFunc.Cast<string>(10)).ToFlatSql().Is(@"SELECT CAST(10 AS STRING)");
Magic Number,BigQuery.Linq.Tests.Functions,CastingTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\CastingTest.cs,Cast,The following statement contains a magic number: Ctx.Select<double>(() => BqFunc.Cast<double>(10)).ToFlatSql().Is(@"SELECT CAST(10 AS FLOAT)");
Magic Number,BigQuery.Linq.Tests.Functions,CastingTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\CastingTest.cs,Cast,The following statement contains a magic number: Ctx.Select<bool>(() => BqFunc.Cast<bool>(10)).ToFlatSql().Is(@"SELECT CAST(10 AS BOOLEAN)");
Magic Number,BigQuery.Linq.Tests.Functions,CastingTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\CastingTest.cs,Cast,The following statement contains a magic number: Ctx.Select<DateTimeOffset>(() => BqFunc.Cast<DateTimeOffset>(10)).ToFlatSql().Is(@"SELECT CAST(10 AS TIMESTAMP)");
Magic Number,BigQuery.Linq.Tests.Functions,CastingTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\CastingTest.cs,Cast,The following statement contains a magic number: Ctx.Select<DateTime>(() => BqFunc.Cast<DateTime>(10)).ToFlatSql().Is(@"SELECT CAST(10 AS TIMESTAMP)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,Abs,The following statement contains a magic number: Ctx.Select(() => BqFunc.Abs(-100L)).ToFlatSql().Is("SELECT ABS(-100)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,Abs,The following statement contains a magic number: Ctx.Select(() => BqFunc.Abs(-100.5)).ToFlatSql().Is("SELECT ABS(-100.5)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,Exp,The following statement contains a magic number: Ctx.Select(() => BqFunc.Exp(100L)).ToFlatSql().Is("SELECT EXP(100)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,Exp,The following statement contains a magic number: Ctx.Select(() => BqFunc.Exp(100.5)).ToFlatSql().Is("SELECT EXP(100.5)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,Trigonometric,The following statement contains a magic number: Ctx.Select(() => BqFunc.Acos(0.5)).ToFlatSql().Is("SELECT ACOS(0.5)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,Trigonometric,The following statement contains a magic number: Ctx.Select(() => BqFunc.Acosh(2.4)).ToFlatSql().Is("SELECT ACOSH(2.4)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,Trigonometric,The following statement contains a magic number: Ctx.Select(() => BqFunc.Asin(1.2)).ToFlatSql().Is("SELECT ASIN(1.2)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,Trigonometric,The following statement contains a magic number: Ctx.Select(() => BqFunc.Asinh(2.3)).ToFlatSql().Is("SELECT ASINH(2.3)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,Trigonometric,The following statement contains a magic number: Ctx.Select(() => BqFunc.Atan(2.3)).ToFlatSql().Is("SELECT ATAN(2.3)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,Trigonometric,The following statement contains a magic number: Ctx.Select(() => BqFunc.Atanh(0.4)).ToFlatSql().Is("SELECT ATANH(0.4)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,Trigonometric,The following statement contains a magic number: Ctx.Select(() => BqFunc.Cos(2.3)).ToFlatSql().Is("SELECT COS(2.3)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,Trigonometric,The following statement contains a magic number: Ctx.Select(() => BqFunc.Cosh(2.3)).ToFlatSql().Is("SELECT COSH(2.3)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,Trigonometric,The following statement contains a magic number: Ctx.Select(() => BqFunc.Sin(2.3)).ToFlatSql().Is("SELECT SIN(2.3)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,Trigonometric,The following statement contains a magic number: Ctx.Select(() => BqFunc.Sinh(2.3)).ToFlatSql().Is("SELECT SINH(2.3)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,Trigonometric,The following statement contains a magic number: Ctx.Select(() => BqFunc.Tan(2.3)).ToFlatSql().Is("SELECT TAN(2.3)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,Trigonometric,The following statement contains a magic number: Ctx.Select(() => BqFunc.Tanh(2.3)).ToFlatSql().Is("SELECT TANH(2.3)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,Trigonometric,The following statement contains a magic number: Ctx.Select(() => BqFunc.Atan2(2.4' 1.2)).ToFlatSql().Is("SELECT ATAN2(2.4' 1.2)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,Trigonometric,The following statement contains a magic number: Ctx.Select(() => BqFunc.Atan2(2.4' 1.2)).ToFlatSql().Is("SELECT ATAN2(2.4' 1.2)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,CeilFloorRound,The following statement contains a magic number: Ctx.Select(() => BqFunc.Ceil(15.123)).ToFlatSql().Is("SELECT CEIL(15.123)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,CeilFloorRound,The following statement contains a magic number: Ctx.Select(() => BqFunc.Floor(15.123)).ToFlatSql().Is("SELECT FLOOR(15.123)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,CeilFloorRound,The following statement contains a magic number: Ctx.Select(() => BqFunc.Round(15.123)).ToFlatSql().Is("SELECT ROUND(15.123)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,CeilFloorRound,The following statement contains a magic number: Ctx.Select(() => BqFunc.Round(15.123' 2)).ToFlatSql().Is("SELECT ROUND(15.123' 2)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,CeilFloorRound,The following statement contains a magic number: Ctx.Select(() => BqFunc.Round(15.123' 2)).ToFlatSql().Is("SELECT ROUND(15.123' 2)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,DegreeRadian,The following statement contains a magic number: Ctx.Select(() => BqFunc.Degrees(1.4)).ToFlatSql().Is("SELECT DEGREES(1.4)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,DegreeRadian,The following statement contains a magic number: Ctx.Select(() => BqFunc.Radians(80.2140913183152)).ToFlatSql().Is("SELECT RADIANS(80.2140913183152)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,Log,The following statement contains a magic number: Ctx.Select(() => BqFunc.Log(1.4)).ToFlatSql().Is("SELECT LOG(1.4)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,Log,The following statement contains a magic number: Ctx.Select(() => BqFunc.Log2(1.4)).ToFlatSql().Is("SELECT LOG2(1.4)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,Log,The following statement contains a magic number: Ctx.Select(() => BqFunc.Log10(1.4)).ToFlatSql().Is("SELECT LOG10(1.4)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,Pow,The following statement contains a magic number: Ctx.Select(() => BqFunc.Pow(2' 4)).ToFlatSql().Is("SELECT POW(2' 4)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,Pow,The following statement contains a magic number: Ctx.Select(() => BqFunc.Pow(2' 4)).ToFlatSql().Is("SELECT POW(2' 4)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,Random,The following statement contains a magic number: Ctx.Select(() => BqFunc.Random(1213)).ToFlatSql().Is("SELECT RAND(1213)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,Sqrt,The following statement contains a magic number: Ctx.Select(() => BqFunc.Sqrt(2.4)).ToFlatSql().Is("SELECT SQRT(2.4)");
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,AdvancedExample1_BoundingBoxQuery,The following statement contains a magic number: Ctx.From<WeatherGeoTable>()                 .Where(x => x.lat / 1000 > 37.46                          && x.lat / 1000 < 37.65                          && x.@long / 1000 > -122.5                          && x.@long / 1000 < -122.3)                 .Select(x => new                 {                     x.year'                     x.month'                     avg_temp = BqFunc.Average(x.mean_temp)'                     min_temp = BqFunc.Min(x.min_temperature)'                     max_temp = BqFunc.Max(x.max_temperature)                 })                 .GroupBy(x => new { x.year' x.month })                 .OrderBy(x => x.year)                 .ThenBy(x => x.month)                 .ToString()                 .Is(@"  SELECT    [year]'    [month]'    AVG([mean_temp]) AS [avg_temp]'    MIN([min_temperature]) AS [min_temp]'    MAX([max_temperature]) AS [max_temp]  FROM    [weather_geo.table]  WHERE    ((((([lat] / 1000) > 37.46) AND (([lat] / 1000) < 37.65)) AND (([long] / 1000) > -122.5)) AND (([long] / 1000) < -122.3))  GROUP BY    [year]'    [month]  ORDER BY    [year]' [month]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,AdvancedExample1_BoundingBoxQuery,The following statement contains a magic number: Ctx.From<WeatherGeoTable>()                 .Where(x => x.lat / 1000 > 37.46                          && x.lat / 1000 < 37.65                          && x.@long / 1000 > -122.5                          && x.@long / 1000 < -122.3)                 .Select(x => new                 {                     x.year'                     x.month'                     avg_temp = BqFunc.Average(x.mean_temp)'                     min_temp = BqFunc.Min(x.min_temperature)'                     max_temp = BqFunc.Max(x.max_temperature)                 })                 .GroupBy(x => new { x.year' x.month })                 .OrderBy(x => x.year)                 .ThenBy(x => x.month)                 .ToString()                 .Is(@"  SELECT    [year]'    [month]'    AVG([mean_temp]) AS [avg_temp]'    MIN([min_temperature]) AS [min_temp]'    MAX([max_temperature]) AS [max_temp]  FROM    [weather_geo.table]  WHERE    ((((([lat] / 1000) > 37.46) AND (([lat] / 1000) < 37.65)) AND (([long] / 1000) > -122.5)) AND (([long] / 1000) < -122.3))  GROUP BY    [year]'    [month]  ORDER BY    [year]' [month]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,AdvancedExample1_BoundingBoxQuery,The following statement contains a magic number: Ctx.From<WeatherGeoTable>()                 .Where(x => x.lat / 1000 > 37.46                          && x.lat / 1000 < 37.65                          && x.@long / 1000 > -122.5                          && x.@long / 1000 < -122.3)                 .Select(x => new                 {                     x.year'                     x.month'                     avg_temp = BqFunc.Average(x.mean_temp)'                     min_temp = BqFunc.Min(x.min_temperature)'                     max_temp = BqFunc.Max(x.max_temperature)                 })                 .GroupBy(x => new { x.year' x.month })                 .OrderBy(x => x.year)                 .ThenBy(x => x.month)                 .ToString()                 .Is(@"  SELECT    [year]'    [month]'    AVG([mean_temp]) AS [avg_temp]'    MIN([min_temperature]) AS [min_temp]'    MAX([max_temperature]) AS [max_temp]  FROM    [weather_geo.table]  WHERE    ((((([lat] / 1000) > 37.46) AND (([lat] / 1000) < 37.65)) AND (([long] / 1000) > -122.5)) AND (([long] / 1000) < -122.3))  GROUP BY    [year]'    [month]  ORDER BY    [year]' [month]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,AdvancedExample1_BoundingBoxQuery,The following statement contains a magic number: Ctx.From<WeatherGeoTable>()                 .Where(x => x.lat / 1000 > 37.46                          && x.lat / 1000 < 37.65                          && x.@long / 1000 > -122.5                          && x.@long / 1000 < -122.3)                 .Select(x => new                 {                     x.year'                     x.month'                     avg_temp = BqFunc.Average(x.mean_temp)'                     min_temp = BqFunc.Min(x.min_temperature)'                     max_temp = BqFunc.Max(x.max_temperature)                 })                 .GroupBy(x => new { x.year' x.month })                 .OrderBy(x => x.year)                 .ThenBy(x => x.month)                 .ToString()                 .Is(@"  SELECT    [year]'    [month]'    AVG([mean_temp]) AS [avg_temp]'    MIN([min_temperature]) AS [min_temp]'    MAX([max_temperature]) AS [max_temp]  FROM    [weather_geo.table]  WHERE    ((((([lat] / 1000) > 37.46) AND (([lat] / 1000) < 37.65)) AND (([long] / 1000) > -122.5)) AND (([long] / 1000) < -122.3))  GROUP BY    [year]'    [month]  ORDER BY    [year]' [month]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,AdvancedExample1_BoundingBoxQuery,The following statement contains a magic number: Ctx.From<WeatherGeoTable>()                 .Where(x => x.lat / 1000 > 37.46                          && x.lat / 1000 < 37.65                          && x.@long / 1000 > -122.5                          && x.@long / 1000 < -122.3)                 .Select(x => new                 {                     x.year'                     x.month'                     avg_temp = BqFunc.Average(x.mean_temp)'                     min_temp = BqFunc.Min(x.min_temperature)'                     max_temp = BqFunc.Max(x.max_temperature)                 })                 .GroupBy(x => new { x.year' x.month })                 .OrderBy(x => x.year)                 .ThenBy(x => x.month)                 .ToString()                 .Is(@"  SELECT    [year]'    [month]'    AVG([mean_temp]) AS [avg_temp]'    MIN([min_temperature]) AS [min_temp]'    MAX([max_temperature]) AS [max_temp]  FROM    [weather_geo.table]  WHERE    ((((([lat] / 1000) > 37.46) AND (([lat] / 1000) < 37.65)) AND (([long] / 1000) > -122.5)) AND (([long] / 1000) < -122.3))  GROUP BY    [year]'    [month]  ORDER BY    [year]' [month]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,AdvancedExample1_BoundingBoxQuery,The following statement contains a magic number: Ctx.From<WeatherGeoTable>()                 .Where(x => x.lat / 1000 > 37.46                          && x.lat / 1000 < 37.65                          && x.@long / 1000 > -122.5                          && x.@long / 1000 < -122.3)                 .Select(x => new                 {                     x.year'                     x.month'                     avg_temp = BqFunc.Average(x.mean_temp)'                     min_temp = BqFunc.Min(x.min_temperature)'                     max_temp = BqFunc.Max(x.max_temperature)                 })                 .GroupBy(x => new { x.year' x.month })                 .OrderBy(x => x.year)                 .ThenBy(x => x.month)                 .ToString()                 .Is(@"  SELECT    [year]'    [month]'    AVG([mean_temp]) AS [avg_temp]'    MIN([min_temperature]) AS [min_temp]'    MAX([max_temperature]) AS [max_temp]  FROM    [weather_geo.table]  WHERE    ((((([lat] / 1000) > 37.46) AND (([lat] / 1000) < 37.65)) AND (([long] / 1000) > -122.5)) AND (([long] / 1000) < -122.3))  GROUP BY    [year]'    [month]  ORDER BY    [year]' [month]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,AdvancedExample1_BoundingBoxQuery,The following statement contains a magic number: Ctx.From<WeatherGeoTable>()                 .Where(x => x.lat / 1000 > 37.46                          && x.lat / 1000 < 37.65                          && x.@long / 1000 > -122.5                          && x.@long / 1000 < -122.3)                 .Select(x => new                 {                     x.year'                     x.month'                     avg_temp = BqFunc.Average(x.mean_temp)'                     min_temp = BqFunc.Min(x.min_temperature)'                     max_temp = BqFunc.Max(x.max_temperature)                 })                 .GroupBy(x => new { x.year' x.month })                 .OrderBy(x => x.year)                 .ThenBy(x => x.month)                 .ToString()                 .Is(@"  SELECT    [year]'    [month]'    AVG([mean_temp]) AS [avg_temp]'    MIN([min_temperature]) AS [min_temp]'    MAX([max_temperature]) AS [max_temp]  FROM    [weather_geo.table]  WHERE    ((((([lat] / 1000) > 37.46) AND (([lat] / 1000) < 37.65)) AND (([long] / 1000) > -122.5)) AND (([long] / 1000) < -122.3))  GROUP BY    [year]'    [month]  ORDER BY    [year]' [month]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,AdvancedExample1_BoundingBoxQuery,The following statement contains a magic number: Ctx.From<WeatherGeoTable>()                 .Where(x => x.lat / 1000 > 37.46                          && x.lat / 1000 < 37.65                          && x.@long / 1000 > -122.5                          && x.@long / 1000 < -122.3)                 .Select(x => new                 {                     x.year'                     x.month'                     avg_temp = BqFunc.Average(x.mean_temp)'                     min_temp = BqFunc.Min(x.min_temperature)'                     max_temp = BqFunc.Max(x.max_temperature)                 })                 .GroupBy(x => new { x.year' x.month })                 .OrderBy(x => x.year)                 .ThenBy(x => x.month)                 .ToString()                 .Is(@"  SELECT    [year]'    [month]'    AVG([mean_temp]) AS [avg_temp]'    MIN([min_temperature]) AS [min_temp]'    MAX([max_temperature]) AS [max_temp]  FROM    [weather_geo.table]  WHERE    ((((([lat] / 1000) > 37.46) AND (([lat] / 1000) < 37.65)) AND (([long] / 1000) > -122.5)) AND (([long] / 1000) < -122.3))  GROUP BY    [year]'    [month]  ORDER BY    [year]' [month]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,AdvancedExample2_ApproximateBoundingCircleQuery,The following statement contains a magic number: Ctx.From<WeatherGeoTable>()                 .Where(x => x.month == 1)                 .Select(x => new                 {                     distance = (BqFunc.Acos(BqFunc.Sin(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Sin((x.lat / 1000) * BqFunc.PI() / 180)                                          + BqFunc.Cos(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Cos((x.lat / 1000) * BqFunc.PI() / 180)                                          * BqFunc.Cos((-104.9847179 - (x.@long / 1000)) * BqFunc.PI() / 180)) * 180 / BqFunc.PI())                                  * 60 * 1.1515'                     temp = BqFunc.Average(x.mean_temp)'                     lat = BqFunc.Average(x.lat / 1000)'                     @long = BqFunc.Average(x.@long / 1000)                 })                 .GroupBy(x => x.distance)                 .Into()                 .Where(x => x.distance < 100)                 .Select(x => new { x.distance' x.lat' x.@long' x.temp })                 .OrderBy(x => x.distance)                 .Limit(100)                 .ToString()                 .Is(@"  SELECT    [distance]'    [lat]'    [long]'    [temp]  FROM  (    SELECT      ((((ACOS(((SIN(((39.737567 * PI()) / 180)) * SIN(((([lat] / 1000) * PI()) / 180))) + ((COS(((39.737567 * PI()) / 180)) * COS(((([lat] / 1000) * PI()) / 180))) * COS((((-104.9847179 - ([long] / 1000)) * PI()) / 180))))) * 180) / PI()) * 60) * 1.1515) AS [distance]'      AVG([mean_temp]) AS [temp]'      AVG(([lat] / 1000)) AS [lat]'      AVG(([long] / 1000)) AS [long]    FROM      [weather_geo.table]    WHERE      ([month] = 1)    GROUP BY      [distance]  )  WHERE    ([distance] < 100)  ORDER BY    [distance]  LIMIT 100  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,AdvancedExample2_ApproximateBoundingCircleQuery,The following statement contains a magic number: Ctx.From<WeatherGeoTable>()                 .Where(x => x.month == 1)                 .Select(x => new                 {                     distance = (BqFunc.Acos(BqFunc.Sin(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Sin((x.lat / 1000) * BqFunc.PI() / 180)                                          + BqFunc.Cos(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Cos((x.lat / 1000) * BqFunc.PI() / 180)                                          * BqFunc.Cos((-104.9847179 - (x.@long / 1000)) * BqFunc.PI() / 180)) * 180 / BqFunc.PI())                                  * 60 * 1.1515'                     temp = BqFunc.Average(x.mean_temp)'                     lat = BqFunc.Average(x.lat / 1000)'                     @long = BqFunc.Average(x.@long / 1000)                 })                 .GroupBy(x => x.distance)                 .Into()                 .Where(x => x.distance < 100)                 .Select(x => new { x.distance' x.lat' x.@long' x.temp })                 .OrderBy(x => x.distance)                 .Limit(100)                 .ToString()                 .Is(@"  SELECT    [distance]'    [lat]'    [long]'    [temp]  FROM  (    SELECT      ((((ACOS(((SIN(((39.737567 * PI()) / 180)) * SIN(((([lat] / 1000) * PI()) / 180))) + ((COS(((39.737567 * PI()) / 180)) * COS(((([lat] / 1000) * PI()) / 180))) * COS((((-104.9847179 - ([long] / 1000)) * PI()) / 180))))) * 180) / PI()) * 60) * 1.1515) AS [distance]'      AVG([mean_temp]) AS [temp]'      AVG(([lat] / 1000)) AS [lat]'      AVG(([long] / 1000)) AS [long]    FROM      [weather_geo.table]    WHERE      ([month] = 1)    GROUP BY      [distance]  )  WHERE    ([distance] < 100)  ORDER BY    [distance]  LIMIT 100  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,AdvancedExample2_ApproximateBoundingCircleQuery,The following statement contains a magic number: Ctx.From<WeatherGeoTable>()                 .Where(x => x.month == 1)                 .Select(x => new                 {                     distance = (BqFunc.Acos(BqFunc.Sin(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Sin((x.lat / 1000) * BqFunc.PI() / 180)                                          + BqFunc.Cos(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Cos((x.lat / 1000) * BqFunc.PI() / 180)                                          * BqFunc.Cos((-104.9847179 - (x.@long / 1000)) * BqFunc.PI() / 180)) * 180 / BqFunc.PI())                                  * 60 * 1.1515'                     temp = BqFunc.Average(x.mean_temp)'                     lat = BqFunc.Average(x.lat / 1000)'                     @long = BqFunc.Average(x.@long / 1000)                 })                 .GroupBy(x => x.distance)                 .Into()                 .Where(x => x.distance < 100)                 .Select(x => new { x.distance' x.lat' x.@long' x.temp })                 .OrderBy(x => x.distance)                 .Limit(100)                 .ToString()                 .Is(@"  SELECT    [distance]'    [lat]'    [long]'    [temp]  FROM  (    SELECT      ((((ACOS(((SIN(((39.737567 * PI()) / 180)) * SIN(((([lat] / 1000) * PI()) / 180))) + ((COS(((39.737567 * PI()) / 180)) * COS(((([lat] / 1000) * PI()) / 180))) * COS((((-104.9847179 - ([long] / 1000)) * PI()) / 180))))) * 180) / PI()) * 60) * 1.1515) AS [distance]'      AVG([mean_temp]) AS [temp]'      AVG(([lat] / 1000)) AS [lat]'      AVG(([long] / 1000)) AS [long]    FROM      [weather_geo.table]    WHERE      ([month] = 1)    GROUP BY      [distance]  )  WHERE    ([distance] < 100)  ORDER BY    [distance]  LIMIT 100  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,AdvancedExample2_ApproximateBoundingCircleQuery,The following statement contains a magic number: Ctx.From<WeatherGeoTable>()                 .Where(x => x.month == 1)                 .Select(x => new                 {                     distance = (BqFunc.Acos(BqFunc.Sin(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Sin((x.lat / 1000) * BqFunc.PI() / 180)                                          + BqFunc.Cos(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Cos((x.lat / 1000) * BqFunc.PI() / 180)                                          * BqFunc.Cos((-104.9847179 - (x.@long / 1000)) * BqFunc.PI() / 180)) * 180 / BqFunc.PI())                                  * 60 * 1.1515'                     temp = BqFunc.Average(x.mean_temp)'                     lat = BqFunc.Average(x.lat / 1000)'                     @long = BqFunc.Average(x.@long / 1000)                 })                 .GroupBy(x => x.distance)                 .Into()                 .Where(x => x.distance < 100)                 .Select(x => new { x.distance' x.lat' x.@long' x.temp })                 .OrderBy(x => x.distance)                 .Limit(100)                 .ToString()                 .Is(@"  SELECT    [distance]'    [lat]'    [long]'    [temp]  FROM  (    SELECT      ((((ACOS(((SIN(((39.737567 * PI()) / 180)) * SIN(((([lat] / 1000) * PI()) / 180))) + ((COS(((39.737567 * PI()) / 180)) * COS(((([lat] / 1000) * PI()) / 180))) * COS((((-104.9847179 - ([long] / 1000)) * PI()) / 180))))) * 180) / PI()) * 60) * 1.1515) AS [distance]'      AVG([mean_temp]) AS [temp]'      AVG(([lat] / 1000)) AS [lat]'      AVG(([long] / 1000)) AS [long]    FROM      [weather_geo.table]    WHERE      ([month] = 1)    GROUP BY      [distance]  )  WHERE    ([distance] < 100)  ORDER BY    [distance]  LIMIT 100  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,AdvancedExample2_ApproximateBoundingCircleQuery,The following statement contains a magic number: Ctx.From<WeatherGeoTable>()                 .Where(x => x.month == 1)                 .Select(x => new                 {                     distance = (BqFunc.Acos(BqFunc.Sin(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Sin((x.lat / 1000) * BqFunc.PI() / 180)                                          + BqFunc.Cos(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Cos((x.lat / 1000) * BqFunc.PI() / 180)                                          * BqFunc.Cos((-104.9847179 - (x.@long / 1000)) * BqFunc.PI() / 180)) * 180 / BqFunc.PI())                                  * 60 * 1.1515'                     temp = BqFunc.Average(x.mean_temp)'                     lat = BqFunc.Average(x.lat / 1000)'                     @long = BqFunc.Average(x.@long / 1000)                 })                 .GroupBy(x => x.distance)                 .Into()                 .Where(x => x.distance < 100)                 .Select(x => new { x.distance' x.lat' x.@long' x.temp })                 .OrderBy(x => x.distance)                 .Limit(100)                 .ToString()                 .Is(@"  SELECT    [distance]'    [lat]'    [long]'    [temp]  FROM  (    SELECT      ((((ACOS(((SIN(((39.737567 * PI()) / 180)) * SIN(((([lat] / 1000) * PI()) / 180))) + ((COS(((39.737567 * PI()) / 180)) * COS(((([lat] / 1000) * PI()) / 180))) * COS((((-104.9847179 - ([long] / 1000)) * PI()) / 180))))) * 180) / PI()) * 60) * 1.1515) AS [distance]'      AVG([mean_temp]) AS [temp]'      AVG(([lat] / 1000)) AS [lat]'      AVG(([long] / 1000)) AS [long]    FROM      [weather_geo.table]    WHERE      ([month] = 1)    GROUP BY      [distance]  )  WHERE    ([distance] < 100)  ORDER BY    [distance]  LIMIT 100  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,AdvancedExample2_ApproximateBoundingCircleQuery,The following statement contains a magic number: Ctx.From<WeatherGeoTable>()                 .Where(x => x.month == 1)                 .Select(x => new                 {                     distance = (BqFunc.Acos(BqFunc.Sin(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Sin((x.lat / 1000) * BqFunc.PI() / 180)                                          + BqFunc.Cos(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Cos((x.lat / 1000) * BqFunc.PI() / 180)                                          * BqFunc.Cos((-104.9847179 - (x.@long / 1000)) * BqFunc.PI() / 180)) * 180 / BqFunc.PI())                                  * 60 * 1.1515'                     temp = BqFunc.Average(x.mean_temp)'                     lat = BqFunc.Average(x.lat / 1000)'                     @long = BqFunc.Average(x.@long / 1000)                 })                 .GroupBy(x => x.distance)                 .Into()                 .Where(x => x.distance < 100)                 .Select(x => new { x.distance' x.lat' x.@long' x.temp })                 .OrderBy(x => x.distance)                 .Limit(100)                 .ToString()                 .Is(@"  SELECT    [distance]'    [lat]'    [long]'    [temp]  FROM  (    SELECT      ((((ACOS(((SIN(((39.737567 * PI()) / 180)) * SIN(((([lat] / 1000) * PI()) / 180))) + ((COS(((39.737567 * PI()) / 180)) * COS(((([lat] / 1000) * PI()) / 180))) * COS((((-104.9847179 - ([long] / 1000)) * PI()) / 180))))) * 180) / PI()) * 60) * 1.1515) AS [distance]'      AVG([mean_temp]) AS [temp]'      AVG(([lat] / 1000)) AS [lat]'      AVG(([long] / 1000)) AS [long]    FROM      [weather_geo.table]    WHERE      ([month] = 1)    GROUP BY      [distance]  )  WHERE    ([distance] < 100)  ORDER BY    [distance]  LIMIT 100  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,AdvancedExample2_ApproximateBoundingCircleQuery,The following statement contains a magic number: Ctx.From<WeatherGeoTable>()                 .Where(x => x.month == 1)                 .Select(x => new                 {                     distance = (BqFunc.Acos(BqFunc.Sin(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Sin((x.lat / 1000) * BqFunc.PI() / 180)                                          + BqFunc.Cos(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Cos((x.lat / 1000) * BqFunc.PI() / 180)                                          * BqFunc.Cos((-104.9847179 - (x.@long / 1000)) * BqFunc.PI() / 180)) * 180 / BqFunc.PI())                                  * 60 * 1.1515'                     temp = BqFunc.Average(x.mean_temp)'                     lat = BqFunc.Average(x.lat / 1000)'                     @long = BqFunc.Average(x.@long / 1000)                 })                 .GroupBy(x => x.distance)                 .Into()                 .Where(x => x.distance < 100)                 .Select(x => new { x.distance' x.lat' x.@long' x.temp })                 .OrderBy(x => x.distance)                 .Limit(100)                 .ToString()                 .Is(@"  SELECT    [distance]'    [lat]'    [long]'    [temp]  FROM  (    SELECT      ((((ACOS(((SIN(((39.737567 * PI()) / 180)) * SIN(((([lat] / 1000) * PI()) / 180))) + ((COS(((39.737567 * PI()) / 180)) * COS(((([lat] / 1000) * PI()) / 180))) * COS((((-104.9847179 - ([long] / 1000)) * PI()) / 180))))) * 180) / PI()) * 60) * 1.1515) AS [distance]'      AVG([mean_temp]) AS [temp]'      AVG(([lat] / 1000)) AS [lat]'      AVG(([long] / 1000)) AS [long]    FROM      [weather_geo.table]    WHERE      ([month] = 1)    GROUP BY      [distance]  )  WHERE    ([distance] < 100)  ORDER BY    [distance]  LIMIT 100  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,AdvancedExample2_ApproximateBoundingCircleQuery,The following statement contains a magic number: Ctx.From<WeatherGeoTable>()                 .Where(x => x.month == 1)                 .Select(x => new                 {                     distance = (BqFunc.Acos(BqFunc.Sin(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Sin((x.lat / 1000) * BqFunc.PI() / 180)                                          + BqFunc.Cos(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Cos((x.lat / 1000) * BqFunc.PI() / 180)                                          * BqFunc.Cos((-104.9847179 - (x.@long / 1000)) * BqFunc.PI() / 180)) * 180 / BqFunc.PI())                                  * 60 * 1.1515'                     temp = BqFunc.Average(x.mean_temp)'                     lat = BqFunc.Average(x.lat / 1000)'                     @long = BqFunc.Average(x.@long / 1000)                 })                 .GroupBy(x => x.distance)                 .Into()                 .Where(x => x.distance < 100)                 .Select(x => new { x.distance' x.lat' x.@long' x.temp })                 .OrderBy(x => x.distance)                 .Limit(100)                 .ToString()                 .Is(@"  SELECT    [distance]'    [lat]'    [long]'    [temp]  FROM  (    SELECT      ((((ACOS(((SIN(((39.737567 * PI()) / 180)) * SIN(((([lat] / 1000) * PI()) / 180))) + ((COS(((39.737567 * PI()) / 180)) * COS(((([lat] / 1000) * PI()) / 180))) * COS((((-104.9847179 - ([long] / 1000)) * PI()) / 180))))) * 180) / PI()) * 60) * 1.1515) AS [distance]'      AVG([mean_temp]) AS [temp]'      AVG(([lat] / 1000)) AS [lat]'      AVG(([long] / 1000)) AS [long]    FROM      [weather_geo.table]    WHERE      ([month] = 1)    GROUP BY      [distance]  )  WHERE    ([distance] < 100)  ORDER BY    [distance]  LIMIT 100  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,AdvancedExample2_ApproximateBoundingCircleQuery,The following statement contains a magic number: Ctx.From<WeatherGeoTable>()                 .Where(x => x.month == 1)                 .Select(x => new                 {                     distance = (BqFunc.Acos(BqFunc.Sin(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Sin((x.lat / 1000) * BqFunc.PI() / 180)                                          + BqFunc.Cos(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Cos((x.lat / 1000) * BqFunc.PI() / 180)                                          * BqFunc.Cos((-104.9847179 - (x.@long / 1000)) * BqFunc.PI() / 180)) * 180 / BqFunc.PI())                                  * 60 * 1.1515'                     temp = BqFunc.Average(x.mean_temp)'                     lat = BqFunc.Average(x.lat / 1000)'                     @long = BqFunc.Average(x.@long / 1000)                 })                 .GroupBy(x => x.distance)                 .Into()                 .Where(x => x.distance < 100)                 .Select(x => new { x.distance' x.lat' x.@long' x.temp })                 .OrderBy(x => x.distance)                 .Limit(100)                 .ToString()                 .Is(@"  SELECT    [distance]'    [lat]'    [long]'    [temp]  FROM  (    SELECT      ((((ACOS(((SIN(((39.737567 * PI()) / 180)) * SIN(((([lat] / 1000) * PI()) / 180))) + ((COS(((39.737567 * PI()) / 180)) * COS(((([lat] / 1000) * PI()) / 180))) * COS((((-104.9847179 - ([long] / 1000)) * PI()) / 180))))) * 180) / PI()) * 60) * 1.1515) AS [distance]'      AVG([mean_temp]) AS [temp]'      AVG(([lat] / 1000)) AS [lat]'      AVG(([long] / 1000)) AS [long]    FROM      [weather_geo.table]    WHERE      ([month] = 1)    GROUP BY      [distance]  )  WHERE    ([distance] < 100)  ORDER BY    [distance]  LIMIT 100  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,AdvancedExample2_ApproximateBoundingCircleQuery,The following statement contains a magic number: Ctx.From<WeatherGeoTable>()                 .Where(x => x.month == 1)                 .Select(x => new                 {                     distance = (BqFunc.Acos(BqFunc.Sin(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Sin((x.lat / 1000) * BqFunc.PI() / 180)                                          + BqFunc.Cos(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Cos((x.lat / 1000) * BqFunc.PI() / 180)                                          * BqFunc.Cos((-104.9847179 - (x.@long / 1000)) * BqFunc.PI() / 180)) * 180 / BqFunc.PI())                                  * 60 * 1.1515'                     temp = BqFunc.Average(x.mean_temp)'                     lat = BqFunc.Average(x.lat / 1000)'                     @long = BqFunc.Average(x.@long / 1000)                 })                 .GroupBy(x => x.distance)                 .Into()                 .Where(x => x.distance < 100)                 .Select(x => new { x.distance' x.lat' x.@long' x.temp })                 .OrderBy(x => x.distance)                 .Limit(100)                 .ToString()                 .Is(@"  SELECT    [distance]'    [lat]'    [long]'    [temp]  FROM  (    SELECT      ((((ACOS(((SIN(((39.737567 * PI()) / 180)) * SIN(((([lat] / 1000) * PI()) / 180))) + ((COS(((39.737567 * PI()) / 180)) * COS(((([lat] / 1000) * PI()) / 180))) * COS((((-104.9847179 - ([long] / 1000)) * PI()) / 180))))) * 180) / PI()) * 60) * 1.1515) AS [distance]'      AVG([mean_temp]) AS [temp]'      AVG(([lat] / 1000)) AS [lat]'      AVG(([long] / 1000)) AS [long]    FROM      [weather_geo.table]    WHERE      ([month] = 1)    GROUP BY      [distance]  )  WHERE    ([distance] < 100)  ORDER BY    [distance]  LIMIT 100  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,AdvancedExample2_ApproximateBoundingCircleQuery,The following statement contains a magic number: Ctx.From<WeatherGeoTable>()                 .Where(x => x.month == 1)                 .Select(x => new                 {                     distance = (BqFunc.Acos(BqFunc.Sin(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Sin((x.lat / 1000) * BqFunc.PI() / 180)                                          + BqFunc.Cos(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Cos((x.lat / 1000) * BqFunc.PI() / 180)                                          * BqFunc.Cos((-104.9847179 - (x.@long / 1000)) * BqFunc.PI() / 180)) * 180 / BqFunc.PI())                                  * 60 * 1.1515'                     temp = BqFunc.Average(x.mean_temp)'                     lat = BqFunc.Average(x.lat / 1000)'                     @long = BqFunc.Average(x.@long / 1000)                 })                 .GroupBy(x => x.distance)                 .Into()                 .Where(x => x.distance < 100)                 .Select(x => new { x.distance' x.lat' x.@long' x.temp })                 .OrderBy(x => x.distance)                 .Limit(100)                 .ToString()                 .Is(@"  SELECT    [distance]'    [lat]'    [long]'    [temp]  FROM  (    SELECT      ((((ACOS(((SIN(((39.737567 * PI()) / 180)) * SIN(((([lat] / 1000) * PI()) / 180))) + ((COS(((39.737567 * PI()) / 180)) * COS(((([lat] / 1000) * PI()) / 180))) * COS((((-104.9847179 - ([long] / 1000)) * PI()) / 180))))) * 180) / PI()) * 60) * 1.1515) AS [distance]'      AVG([mean_temp]) AS [temp]'      AVG(([lat] / 1000)) AS [lat]'      AVG(([long] / 1000)) AS [long]    FROM      [weather_geo.table]    WHERE      ([month] = 1)    GROUP BY      [distance]  )  WHERE    ([distance] < 100)  ORDER BY    [distance]  LIMIT 100  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,AdvancedExample2_ApproximateBoundingCircleQuery,The following statement contains a magic number: Ctx.From<WeatherGeoTable>()                 .Where(x => x.month == 1)                 .Select(x => new                 {                     distance = (BqFunc.Acos(BqFunc.Sin(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Sin((x.lat / 1000) * BqFunc.PI() / 180)                                          + BqFunc.Cos(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Cos((x.lat / 1000) * BqFunc.PI() / 180)                                          * BqFunc.Cos((-104.9847179 - (x.@long / 1000)) * BqFunc.PI() / 180)) * 180 / BqFunc.PI())                                  * 60 * 1.1515'                     temp = BqFunc.Average(x.mean_temp)'                     lat = BqFunc.Average(x.lat / 1000)'                     @long = BqFunc.Average(x.@long / 1000)                 })                 .GroupBy(x => x.distance)                 .Into()                 .Where(x => x.distance < 100)                 .Select(x => new { x.distance' x.lat' x.@long' x.temp })                 .OrderBy(x => x.distance)                 .Limit(100)                 .ToString()                 .Is(@"  SELECT    [distance]'    [lat]'    [long]'    [temp]  FROM  (    SELECT      ((((ACOS(((SIN(((39.737567 * PI()) / 180)) * SIN(((([lat] / 1000) * PI()) / 180))) + ((COS(((39.737567 * PI()) / 180)) * COS(((([lat] / 1000) * PI()) / 180))) * COS((((-104.9847179 - ([long] / 1000)) * PI()) / 180))))) * 180) / PI()) * 60) * 1.1515) AS [distance]'      AVG([mean_temp]) AS [temp]'      AVG(([lat] / 1000)) AS [lat]'      AVG(([long] / 1000)) AS [long]    FROM      [weather_geo.table]    WHERE      ([month] = 1)    GROUP BY      [distance]  )  WHERE    ([distance] < 100)  ORDER BY    [distance]  LIMIT 100  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,AdvancedExample2_ApproximateBoundingCircleQuery,The following statement contains a magic number: Ctx.From<WeatherGeoTable>()                 .Where(x => x.month == 1)                 .Select(x => new                 {                     distance = (BqFunc.Acos(BqFunc.Sin(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Sin((x.lat / 1000) * BqFunc.PI() / 180)                                          + BqFunc.Cos(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Cos((x.lat / 1000) * BqFunc.PI() / 180)                                          * BqFunc.Cos((-104.9847179 - (x.@long / 1000)) * BqFunc.PI() / 180)) * 180 / BqFunc.PI())                                  * 60 * 1.1515'                     temp = BqFunc.Average(x.mean_temp)'                     lat = BqFunc.Average(x.lat / 1000)'                     @long = BqFunc.Average(x.@long / 1000)                 })                 .GroupBy(x => x.distance)                 .Into()                 .Where(x => x.distance < 100)                 .Select(x => new { x.distance' x.lat' x.@long' x.temp })                 .OrderBy(x => x.distance)                 .Limit(100)                 .ToString()                 .Is(@"  SELECT    [distance]'    [lat]'    [long]'    [temp]  FROM  (    SELECT      ((((ACOS(((SIN(((39.737567 * PI()) / 180)) * SIN(((([lat] / 1000) * PI()) / 180))) + ((COS(((39.737567 * PI()) / 180)) * COS(((([lat] / 1000) * PI()) / 180))) * COS((((-104.9847179 - ([long] / 1000)) * PI()) / 180))))) * 180) / PI()) * 60) * 1.1515) AS [distance]'      AVG([mean_temp]) AS [temp]'      AVG(([lat] / 1000)) AS [lat]'      AVG(([long] / 1000)) AS [long]    FROM      [weather_geo.table]    WHERE      ([month] = 1)    GROUP BY      [distance]  )  WHERE    ([distance] < 100)  ORDER BY    [distance]  LIMIT 100  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,AdvancedExample2_ApproximateBoundingCircleQuery,The following statement contains a magic number: Ctx.From<WeatherGeoTable>()                 .Where(x => x.month == 1)                 .Select(x => new                 {                     distance = (BqFunc.Acos(BqFunc.Sin(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Sin((x.lat / 1000) * BqFunc.PI() / 180)                                          + BqFunc.Cos(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Cos((x.lat / 1000) * BqFunc.PI() / 180)                                          * BqFunc.Cos((-104.9847179 - (x.@long / 1000)) * BqFunc.PI() / 180)) * 180 / BqFunc.PI())                                  * 60 * 1.1515'                     temp = BqFunc.Average(x.mean_temp)'                     lat = BqFunc.Average(x.lat / 1000)'                     @long = BqFunc.Average(x.@long / 1000)                 })                 .GroupBy(x => x.distance)                 .Into()                 .Where(x => x.distance < 100)                 .Select(x => new { x.distance' x.lat' x.@long' x.temp })                 .OrderBy(x => x.distance)                 .Limit(100)                 .ToString()                 .Is(@"  SELECT    [distance]'    [lat]'    [long]'    [temp]  FROM  (    SELECT      ((((ACOS(((SIN(((39.737567 * PI()) / 180)) * SIN(((([lat] / 1000) * PI()) / 180))) + ((COS(((39.737567 * PI()) / 180)) * COS(((([lat] / 1000) * PI()) / 180))) * COS((((-104.9847179 - ([long] / 1000)) * PI()) / 180))))) * 180) / PI()) * 60) * 1.1515) AS [distance]'      AVG([mean_temp]) AS [temp]'      AVG(([lat] / 1000)) AS [lat]'      AVG(([long] / 1000)) AS [long]    FROM      [weather_geo.table]    WHERE      ([month] = 1)    GROUP BY      [distance]  )  WHERE    ([distance] < 100)  ORDER BY    [distance]  LIMIT 100  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,AdvancedExample2_ApproximateBoundingCircleQuery,The following statement contains a magic number: Ctx.From<WeatherGeoTable>()                 .Where(x => x.month == 1)                 .Select(x => new                 {                     distance = (BqFunc.Acos(BqFunc.Sin(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Sin((x.lat / 1000) * BqFunc.PI() / 180)                                          + BqFunc.Cos(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Cos((x.lat / 1000) * BqFunc.PI() / 180)                                          * BqFunc.Cos((-104.9847179 - (x.@long / 1000)) * BqFunc.PI() / 180)) * 180 / BqFunc.PI())                                  * 60 * 1.1515'                     temp = BqFunc.Average(x.mean_temp)'                     lat = BqFunc.Average(x.lat / 1000)'                     @long = BqFunc.Average(x.@long / 1000)                 })                 .GroupBy(x => x.distance)                 .Into()                 .Where(x => x.distance < 100)                 .Select(x => new { x.distance' x.lat' x.@long' x.temp })                 .OrderBy(x => x.distance)                 .Limit(100)                 .ToString()                 .Is(@"  SELECT    [distance]'    [lat]'    [long]'    [temp]  FROM  (    SELECT      ((((ACOS(((SIN(((39.737567 * PI()) / 180)) * SIN(((([lat] / 1000) * PI()) / 180))) + ((COS(((39.737567 * PI()) / 180)) * COS(((([lat] / 1000) * PI()) / 180))) * COS((((-104.9847179 - ([long] / 1000)) * PI()) / 180))))) * 180) / PI()) * 60) * 1.1515) AS [distance]'      AVG([mean_temp]) AS [temp]'      AVG(([lat] / 1000)) AS [lat]'      AVG(([long] / 1000)) AS [long]    FROM      [weather_geo.table]    WHERE      ([month] = 1)    GROUP BY      [distance]  )  WHERE    ([distance] < 100)  ORDER BY    [distance]  LIMIT 100  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,AdvancedExample2_ApproximateBoundingCircleQuery,The following statement contains a magic number: Ctx.From<WeatherGeoTable>()                 .Where(x => x.month == 1)                 .Select(x => new                 {                     distance = (BqFunc.Acos(BqFunc.Sin(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Sin((x.lat / 1000) * BqFunc.PI() / 180)                                          + BqFunc.Cos(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Cos((x.lat / 1000) * BqFunc.PI() / 180)                                          * BqFunc.Cos((-104.9847179 - (x.@long / 1000)) * BqFunc.PI() / 180)) * 180 / BqFunc.PI())                                  * 60 * 1.1515'                     temp = BqFunc.Average(x.mean_temp)'                     lat = BqFunc.Average(x.lat / 1000)'                     @long = BqFunc.Average(x.@long / 1000)                 })                 .GroupBy(x => x.distance)                 .Into()                 .Where(x => x.distance < 100)                 .Select(x => new { x.distance' x.lat' x.@long' x.temp })                 .OrderBy(x => x.distance)                 .Limit(100)                 .ToString()                 .Is(@"  SELECT    [distance]'    [lat]'    [long]'    [temp]  FROM  (    SELECT      ((((ACOS(((SIN(((39.737567 * PI()) / 180)) * SIN(((([lat] / 1000) * PI()) / 180))) + ((COS(((39.737567 * PI()) / 180)) * COS(((([lat] / 1000) * PI()) / 180))) * COS((((-104.9847179 - ([long] / 1000)) * PI()) / 180))))) * 180) / PI()) * 60) * 1.1515) AS [distance]'      AVG([mean_temp]) AS [temp]'      AVG(([lat] / 1000)) AS [lat]'      AVG(([long] / 1000)) AS [long]    FROM      [weather_geo.table]    WHERE      ([month] = 1)    GROUP BY      [distance]  )  WHERE    ([distance] < 100)  ORDER BY    [distance]  LIMIT 100  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,AdvancedExample2_ApproximateBoundingCircleQuery,The following statement contains a magic number: Ctx.From<WeatherGeoTable>()                 .Where(x => x.month == 1)                 .Select(x => new                 {                     distance = (BqFunc.Acos(BqFunc.Sin(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Sin((x.lat / 1000) * BqFunc.PI() / 180)                                          + BqFunc.Cos(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Cos((x.lat / 1000) * BqFunc.PI() / 180)                                          * BqFunc.Cos((-104.9847179 - (x.@long / 1000)) * BqFunc.PI() / 180)) * 180 / BqFunc.PI())                                  * 60 * 1.1515'                     temp = BqFunc.Average(x.mean_temp)'                     lat = BqFunc.Average(x.lat / 1000)'                     @long = BqFunc.Average(x.@long / 1000)                 })                 .GroupBy(x => x.distance)                 .Into()                 .Where(x => x.distance < 100)                 .Select(x => new { x.distance' x.lat' x.@long' x.temp })                 .OrderBy(x => x.distance)                 .Limit(100)                 .ToString()                 .Is(@"  SELECT    [distance]'    [lat]'    [long]'    [temp]  FROM  (    SELECT      ((((ACOS(((SIN(((39.737567 * PI()) / 180)) * SIN(((([lat] / 1000) * PI()) / 180))) + ((COS(((39.737567 * PI()) / 180)) * COS(((([lat] / 1000) * PI()) / 180))) * COS((((-104.9847179 - ([long] / 1000)) * PI()) / 180))))) * 180) / PI()) * 60) * 1.1515) AS [distance]'      AVG([mean_temp]) AS [temp]'      AVG(([lat] / 1000)) AS [lat]'      AVG(([long] / 1000)) AS [long]    FROM      [weather_geo.table]    WHERE      ([month] = 1)    GROUP BY      [distance]  )  WHERE    ([distance] < 100)  ORDER BY    [distance]  LIMIT 100  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,MathematicalTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\MathematicalTest.cs,AdvancedExample2_ApproximateBoundingCircleQuery,The following statement contains a magic number: Ctx.From<WeatherGeoTable>()                 .Where(x => x.month == 1)                 .Select(x => new                 {                     distance = (BqFunc.Acos(BqFunc.Sin(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Sin((x.lat / 1000) * BqFunc.PI() / 180)                                          + BqFunc.Cos(39.737567 * BqFunc.PI() / 180)                                          * BqFunc.Cos((x.lat / 1000) * BqFunc.PI() / 180)                                          * BqFunc.Cos((-104.9847179 - (x.@long / 1000)) * BqFunc.PI() / 180)) * 180 / BqFunc.PI())                                  * 60 * 1.1515'                     temp = BqFunc.Average(x.mean_temp)'                     lat = BqFunc.Average(x.lat / 1000)'                     @long = BqFunc.Average(x.@long / 1000)                 })                 .GroupBy(x => x.distance)                 .Into()                 .Where(x => x.distance < 100)                 .Select(x => new { x.distance' x.lat' x.@long' x.temp })                 .OrderBy(x => x.distance)                 .Limit(100)                 .ToString()                 .Is(@"  SELECT    [distance]'    [lat]'    [long]'    [temp]  FROM  (    SELECT      ((((ACOS(((SIN(((39.737567 * PI()) / 180)) * SIN(((([lat] / 1000) * PI()) / 180))) + ((COS(((39.737567 * PI()) / 180)) * COS(((([lat] / 1000) * PI()) / 180))) * COS((((-104.9847179 - ([long] / 1000)) * PI()) / 180))))) * 180) / PI()) * 60) * 1.1515) AS [distance]'      AVG([mean_temp]) AS [temp]'      AVG(([lat] / 1000)) AS [lat]'      AVG(([long] / 1000)) AS [long]    FROM      [weather_geo.table]    WHERE      ([month] = 1)    GROUP BY      [distance]  )  WHERE    ([distance] < 100)  ORDER BY    [distance]  LIMIT 100  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,RegularExpressionTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\RegularExpressionTest.cs,RegexpMatch,The following statement contains a magic number: Ctx.From<Shakespeare>()                  .Where(x => BqFunc.RegexpMatch(x.word' @"\w\w'\w\w"))                  .Select(x => new { x.word' count = BqFunc.Count(x.word) })                  .GroupBy(x => x.word)                  .OrderByDescending(x => x.count)                  .Limit(3)                  .ToString()                  .Is(@"  SELECT    [word]'    COUNT([word]) AS [count]  FROM    [publicdata:samples.shakespeare]  WHERE    REGEXP_MATCH([word]' r'\w\w\'\w\w')  GROUP BY    [word]  ORDER BY    [count] DESC  LIMIT 3  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,RegularExpressionTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\RegularExpressionTest.cs,RegexpExtract,The following statement contains a magic number: Ctx.From<Shakespeare>()                  .Select(x => new { fragment = BqFunc.RegexpExtract(x.word' @"(\w\w'\w\w)") })                  .GroupBy(x => x.fragment)                  .OrderBy(x => x.fragment)                  .Limit(3)                  .ToString()                  .Is(@"  SELECT    REGEXP_EXTRACT([word]' r'(\w\w\'\w\w)') AS [fragment]  FROM    [publicdata:samples.shakespeare]  GROUP BY    [fragment]  ORDER BY    [fragment]  LIMIT 3  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,OtherTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\OtherTest.cs,If,The following statement contains a magic number: Ctx.From<MyClass>()                  .Select(x => new { F1 = (x.field1 >= 100) ? "A" : "B" })                  .ToString()                  .Is(@"  SELECT    IF(([field1] >= 100)' 'A'' 'B') AS [F1]  FROM    [MyClass]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,OtherTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\OtherTest.cs,Case,The following statement contains a magic number: Ctx.From<MyClass>()                  .Select(x => new                  {                      F1 = (x.field1 == 100) ? "A" :                           (x.field1 >= 200) ? "B" :                           (x.field1 == 1000 && x.field2 == "hoge") ? "C"                           : "D"'                      Len = BqFunc.Length(x.field2)                  })                  .ToString()                  .Is(@"  SELECT    CASE      WHEN ([field1] = 100) THEN 'A'      WHEN ([field1] >= 200) THEN 'B'      WHEN (([field1] = 1000) AND ([field2] = 'hoge')) THEN 'C'      ELSE 'D'    END AS [F1]'    LENGTH([field2]) AS [Len]  FROM    [MyClass]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,OtherTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\OtherTest.cs,Case,The following statement contains a magic number: Ctx.From<MyClass>()                  .Select(x => new                  {                      F1 = (x.field1 == 100) ? "A" :                           (x.field1 >= 200) ? "B" :                           (x.field1 == 1000 && x.field2 == "hoge") ? "C"                           : "D"'                      Len = BqFunc.Length(x.field2)                  })                  .ToString()                  .Is(@"  SELECT    CASE      WHEN ([field1] = 100) THEN 'A'      WHEN ([field1] >= 200) THEN 'B'      WHEN (([field1] = 1000) AND ([field2] = 'hoge')) THEN 'C'      ELSE 'D'    END AS [F1]'    LENGTH([field2]) AS [Len]  FROM    [MyClass]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,OtherTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\OtherTest.cs,Case,The following statement contains a magic number: Ctx.From<MyClass>()                  .Select(x => new                  {                      F1 = (x.field1 == 100) ? "A" :                           (x.field1 >= 200) ? "B" :                           (x.field1 == 1000 && x.field2 == "hoge") ? "C"                           : "D"'                      Len = BqFunc.Length(x.field2)                  })                  .ToString()                  .Is(@"  SELECT    CASE      WHEN ([field1] = 100) THEN 'A'      WHEN ([field1] >= 200) THEN 'B'      WHEN (([field1] = 1000) AND ([field2] = 'hoge')) THEN 'C'      ELSE 'D'    END AS [F1]'    LENGTH([field2]) AS [Len]  FROM    [MyClass]".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,StringTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\StringTest.cs,IgnoreCase,The following statement contains a magic number: Ctx.Select<int>(() => 100).Limit(100).IgnoreCase().ToString().Is(@"  SELECT    100  LIMIT 100  IGNORE CASE".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,StringTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\StringTest.cs,IgnoreCase,The following statement contains a magic number: Ctx.Select<int>(() => 100).Limit(100).IgnoreCase().ToString().Is(@"  SELECT    100  LIMIT 100  IGNORE CASE".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,StringTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\StringTest.cs,IgnoreCase,The following statement contains a magic number: Ctx.Select<int>(() => 100).Limit(100).ToString().Is(@"  SELECT    100  LIMIT 100".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,StringTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\StringTest.cs,IgnoreCase,The following statement contains a magic number: Ctx.Select<int>(() => 100).Limit(100).ToString().Is(@"  SELECT    100  LIMIT 100".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,StringTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\StringTest.cs,Left,The following statement contains a magic number: Ctx.Select<string>(() => BqFunc.Left("seatle"' 3)).ToFlatSql().Is("SELECT LEFT('seatle'' 3)");
Magic Number,BigQuery.Linq.Tests.Functions,StringTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\StringTest.cs,PadLeft,The following statement contains a magic number: Ctx.Select<string>(() => BqFunc.PadLeft("1"' 7' "?")).ToFlatSql().Is("SELECT LPAD('1'' 7' '?')");
Magic Number,BigQuery.Linq.Tests.Functions,StringTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\StringTest.cs,PadRight,The following statement contains a magic number: Ctx.Select<string>(() => BqFunc.PadRight("1"' 7' "?")).ToFlatSql().Is("SELECT RPAD('1'' 7' '?')");
Magic Number,BigQuery.Linq.Tests.Functions,StringTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\StringTest.cs,Right,The following statement contains a magic number: Ctx.Select<string>(() => BqFunc.Right("kirkland"' 4)).ToFlatSql().Is("SELECT RIGHT('kirkland'' 4)");
Magic Number,BigQuery.Linq.Tests.Functions,StringTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\StringTest.cs,Split,The following statement contains a magic number: Ctx.From<Github>().Select(x => BqFunc.Split(x.repository_url)).Limit(1000).ToString().Is(@"  SELECT    SPLIT([repository_url])  FROM    [publicdata:samples.github_timeline]  LIMIT 1000".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,StringTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\StringTest.cs,Split,The following statement contains a magic number: Ctx.From<Github>().Select(x => BqFunc.Split(x.repository_url' "/")).Limit(1000).ToString().Is(@"  SELECT    SPLIT([repository_url]' '/')  FROM    [publicdata:samples.github_timeline]  LIMIT 1000".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,StringTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\StringTest.cs,Substring,The following statement contains a magic number: Ctx.Select<string>(() => BqFunc.Substring("awesome"' 3)).ToFlatSql().Is("SELECT SUBSTR('awesome'' 3)");
Magic Number,BigQuery.Linq.Tests.Functions,StringTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\StringTest.cs,Substring,The following statement contains a magic number: Ctx.Select<string>(() => BqFunc.Substring("awesome"' -4' 4)).ToFlatSql().Is("SELECT SUBSTR('awesome'' -4' 4)");
Magic Number,BigQuery.Linq.Tests.Functions,StringTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\StringTest.cs,Substring,The following statement contains a magic number: Ctx.Select<string>(() => BqFunc.Substring("awesome"' -4' 4)).ToFlatSql().Is("SELECT SUBSTR('awesome'' -4' 4)");
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,Symbol,The following statement contains a magic number: var x = 1000;
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,Symbol,The following statement contains a magic number: context.Select(() => x == 1000).ToFlatSql().Is("SELECT (1000 = 1000)");
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,Symbol,The following statement contains a magic number: context.Select(() => x != 1000).ToFlatSql().Is("SELECT (1000 != 1000)");
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,Symbol,The following statement contains a magic number: context.Select(() => x > 1000).ToFlatSql().Is("SELECT (1000 > 1000)");
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,Symbol,The following statement contains a magic number: context.Select(() => x < 1000).ToFlatSql().Is("SELECT (1000 < 1000)");
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,Symbol,The following statement contains a magic number: context.Select(() => x >= 1000).ToFlatSql().Is("SELECT (1000 >= 1000)");
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,Symbol,The following statement contains a magic number: context.Select(() => x <= 1000).ToFlatSql().Is("SELECT (1000 <= 1000)");
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,Symbol,The following statement contains a magic number: long? x2 = 1000;
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,Symbol,The following statement contains a magic number: context.Select(() => x2 == 1000).ToFlatSql().Is("SELECT (1000 = 1000)");
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,Symbol,The following statement contains a magic number: context.Select(() => x2.Value == 1000).ToFlatSql().Is("SELECT (1000 = 1000)");
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,Between,The following statement contains a magic number: var x = 1000;
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,Between,The following statement contains a magic number: context.Select<bool>(() => BqFunc.Between(x' BqFunc.Abs(10)' 100)).ToFlatSql()                  .Is("SELECT (1000 BETWEEN ABS(10) AND 100)");
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,Between,The following statement contains a magic number: context.Select<bool>(() => BqFunc.Between(x' BqFunc.Abs(10)' 100)).ToFlatSql()                  .Is("SELECT (1000 BETWEEN ABS(10) AND 100)");
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,In,The following statement contains a magic number: context.Select(() => new { value = 100 })                  .Into()                  .Select(x => (BqFunc.In(x.value' 10' 20' 50' 1000)) ? 10000 : -10)                  .ToString()                  .Is(@"  SELECT    IF([value] IN(10' 20' 50' 1000)' 10000' -10)  FROM  (    SELECT      100 AS [value]  )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,In,The following statement contains a magic number: context.Select(() => new { value = 100 })                  .Into()                  .Select(x => (BqFunc.In(x.value' 10' 20' 50' 1000)) ? 10000 : -10)                  .ToString()                  .Is(@"  SELECT    IF([value] IN(10' 20' 50' 1000)' 10000' -10)  FROM  (    SELECT      100 AS [value]  )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,In,The following statement contains a magic number: context.Select(() => new { value = 100 })                  .Into()                  .Select(x => (BqFunc.In(x.value' 10' 20' 50' 1000)) ? 10000 : -10)                  .ToString()                  .Is(@"  SELECT    IF([value] IN(10' 20' 50' 1000)' 10000' -10)  FROM  (    SELECT      100 AS [value]  )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,In,The following statement contains a magic number: context.Select(() => new { value = 100 })                  .Into()                  .Select(x => (BqFunc.In(x.value' 10' 20' 50' 1000)) ? 10000 : -10)                  .ToString()                  .Is(@"  SELECT    IF([value] IN(10' 20' 50' 1000)' 10000' -10)  FROM  (    SELECT      100 AS [value]  )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,In,The following statement contains a magic number: context.Select(() => new { value = 100 })                  .Into()                  .Select(x => (BqFunc.In(x.value' 10' 20' 50' 1000)) ? 10000 : -10)                  .ToString()                  .Is(@"  SELECT    IF([value] IN(10' 20' 50' 1000)' 10000' -10)  FROM  (    SELECT      100 AS [value]  )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,In,The following statement contains a magic number: context.Select(() => new { value = 100 })                  .Into()                  .Select(x => (BqFunc.In(x.value' 10' 20' 50' 1000)) ? 10000 : -10)                  .ToString()                  .Is(@"  SELECT    IF([value] IN(10' 20' 50' 1000)' 10000' -10)  FROM  (    SELECT      100 AS [value]  )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,In,The following statement contains a magic number: context.Select(() => new { value = 100 })                  .Into()                  .Select(x => (BqFunc.In(x.value' 10' 20' 50' 1000)) ? 10000 : -10)                  .ToString()                  .Is(@"  SELECT    IF([value] IN(10' 20' 50' 1000)' 10000' -10)  FROM  (    SELECT      100 AS [value]  )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,In,The following statement contains a magic number: context.Select(() => new { value = 100 })                  .Into()                  .Select(x => (!BqFunc.In(x.value' 10' 20' 50' 1000)) ? 10000 : -10)                  .ToString()                  .Is(@"  SELECT    IF(NOT [value] IN(10' 20' 50' 1000)' 10000' -10)  FROM  (    SELECT      100 AS [value]  )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,In,The following statement contains a magic number: context.Select(() => new { value = 100 })                  .Into()                  .Select(x => (!BqFunc.In(x.value' 10' 20' 50' 1000)) ? 10000 : -10)                  .ToString()                  .Is(@"  SELECT    IF(NOT [value] IN(10' 20' 50' 1000)' 10000' -10)  FROM  (    SELECT      100 AS [value]  )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,In,The following statement contains a magic number: context.Select(() => new { value = 100 })                  .Into()                  .Select(x => (!BqFunc.In(x.value' 10' 20' 50' 1000)) ? 10000 : -10)                  .ToString()                  .Is(@"  SELECT    IF(NOT [value] IN(10' 20' 50' 1000)' 10000' -10)  FROM  (    SELECT      100 AS [value]  )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,In,The following statement contains a magic number: context.Select(() => new { value = 100 })                  .Into()                  .Select(x => (!BqFunc.In(x.value' 10' 20' 50' 1000)) ? 10000 : -10)                  .ToString()                  .Is(@"  SELECT    IF(NOT [value] IN(10' 20' 50' 1000)' 10000' -10)  FROM  (    SELECT      100 AS [value]  )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,In,The following statement contains a magic number: context.Select(() => new { value = 100 })                  .Into()                  .Select(x => (!BqFunc.In(x.value' 10' 20' 50' 1000)) ? 10000 : -10)                  .ToString()                  .Is(@"  SELECT    IF(NOT [value] IN(10' 20' 50' 1000)' 10000' -10)  FROM  (    SELECT      100 AS [value]  )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,In,The following statement contains a magic number: context.Select(() => new { value = 100 })                  .Into()                  .Select(x => (!BqFunc.In(x.value' 10' 20' 50' 1000)) ? 10000 : -10)                  .ToString()                  .Is(@"  SELECT    IF(NOT [value] IN(10' 20' 50' 1000)' 10000' -10)  FROM  (    SELECT      100 AS [value]  )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,In,The following statement contains a magic number: context.Select(() => new { value = 100 })                  .Into()                  .Select(x => (!BqFunc.In(x.value' 10' 20' 50' 1000)) ? 10000 : -10)                  .ToString()                  .Is(@"  SELECT    IF(NOT [value] IN(10' 20' 50' 1000)' 10000' -10)  FROM  (    SELECT      100 AS [value]  )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,In_SubQuery,The following statement contains a magic number: context.Select(() => new { value = 100L })                  .Into()                  .Where(x => (BqFunc.In(x.value' context.From<wikipedia>().Select(y => y.id ?? -1).Limit(1000))))                  .Select(x => x.value)                  .ToString()                  .Is(@"  SELECT    [value]  FROM  (    SELECT      100 AS [value]  )  WHERE    [value] IN    (      SELECT        IFNULL([id]' -1)      FROM        [publicdata:samples.wikipedia]      LIMIT 1000    )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,In_SubQuery,The following statement contains a magic number: context.Select(() => new { value = 100L })                  .Into()                  .Where(x => (BqFunc.In(x.value' context.From<wikipedia>().Select(y => y.id ?? -1).Limit(1000))))                  .Select(x => x.value)                  .ToString()                  .Is(@"  SELECT    [value]  FROM  (    SELECT      100 AS [value]  )  WHERE    [value] IN    (      SELECT        IFNULL([id]' -1)      FROM        [publicdata:samples.wikipedia]      LIMIT 1000    )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,In_SubQuery2,The following statement contains a magic number: context.Select(() => new { value = 100L })                  .Into()                  .Select(x => new{x.value})                  .GroupBy(x => x.value)                  .Having(x => (BqFunc.In(x.value' context.From<wikipedia>().Select(y => y.id ?? -1).Limit(1000))))                  .ToString()                  .Is(@"  SELECT    [value]  FROM  (    SELECT      100 AS [value]  )  GROUP BY    [value]  HAVING    [value] IN    (      SELECT        IFNULL([id]' -1)      FROM        [publicdata:samples.wikipedia]      LIMIT 1000    )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,In_SubQuery2,The following statement contains a magic number: context.Select(() => new { value = 100L })                  .Into()                  .Select(x => new{x.value})                  .GroupBy(x => x.value)                  .Having(x => (BqFunc.In(x.value' context.From<wikipedia>().Select(y => y.id ?? -1).Limit(1000))))                  .ToString()                  .Is(@"  SELECT    [value]  FROM  (    SELECT      100 AS [value]  )  GROUP BY    [value]  HAVING    [value] IN    (      SELECT        IFNULL([id]' -1)      FROM        [publicdata:samples.wikipedia]      LIMIT 1000    )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,InWithArray,The following statement contains a magic number: var vals = new object[] {10' 20' 50' 1000};
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,InWithArray,The following statement contains a magic number: var vals = new object[] {10' 20' 50' 1000};
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,InWithArray,The following statement contains a magic number: var vals = new object[] {10' 20' 50' 1000};
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,InWithArray,The following statement contains a magic number: var vals = new object[] {10' 20' 50' 1000};
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,InWithArray,The following statement contains a magic number: context.Select(() => new { value = 100 })                  .Into()                  .Select(x => (BqFunc.In(x.value' vals)) ? 10000 : -10)                  .ToString()                  .Is(@"  SELECT    IF([value] IN(10' 20' 50' 1000)' 10000' -10)  FROM  (    SELECT      100 AS [value]  )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,InWithArray,The following statement contains a magic number: context.Select(() => new { value = 100 })                  .Into()                  .Select(x => (BqFunc.In(x.value' vals)) ? 10000 : -10)                  .ToString()                  .Is(@"  SELECT    IF([value] IN(10' 20' 50' 1000)' 10000' -10)  FROM  (    SELECT      100 AS [value]  )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,InWithArray,The following statement contains a magic number: context.Select(() => new { value = 100 })                  .Into()                  .Select(x => (BqFunc.In(x.value' vals)) ? 10000 : -10)                  .ToString()                  .Is(@"  SELECT    IF([value] IN(10' 20' 50' 1000)' 10000' -10)  FROM  (    SELECT      100 AS [value]  )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,InWithTypedArray,The following statement contains a magic number: var vals = new int[] { 10' 20' 50' 1000 };
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,InWithTypedArray,The following statement contains a magic number: var vals = new int[] { 10' 20' 50' 1000 };
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,InWithTypedArray,The following statement contains a magic number: var vals = new int[] { 10' 20' 50' 1000 };
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,InWithTypedArray,The following statement contains a magic number: var vals = new int[] { 10' 20' 50' 1000 };
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,InWithTypedArray,The following statement contains a magic number: context.Select(() => new { value = 100 })                  .Into()                  .Select(x => (BqFunc.In(x.value' vals)) ? 10000 : -10)                  .ToString()                  .Is(@"  SELECT    IF([value] IN(10' 20' 50' 1000)' 10000' -10)  FROM  (    SELECT      100 AS [value]  )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,InWithTypedArray,The following statement contains a magic number: context.Select(() => new { value = 100 })                  .Into()                  .Select(x => (BqFunc.In(x.value' vals)) ? 10000 : -10)                  .ToString()                  .Is(@"  SELECT    IF([value] IN(10' 20' 50' 1000)' 10000' -10)  FROM  (    SELECT      100 AS [value]  )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,InWithTypedArray,The following statement contains a magic number: context.Select(() => new { value = 100 })                  .Into()                  .Select(x => (BqFunc.In(x.value' vals)) ? 10000 : -10)                  .ToString()                  .Is(@"  SELECT    IF([value] IN(10' 20' 50' 1000)' 10000' -10)  FROM  (    SELECT      100 AS [value]  )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,NotIn,The following statement contains a magic number: context.Select(() => new { value = 100 })                  .Into()                  .Select(x => (BqFunc.NotIn(x.value' 10' 20' 50' 1000)) ? 10000 : -10)                  .ToString()                  .Is(@"  SELECT    IF([value] NOT IN(10' 20' 50' 1000)' 10000' -10)  FROM  (    SELECT      100 AS [value]  )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,NotIn,The following statement contains a magic number: context.Select(() => new { value = 100 })                  .Into()                  .Select(x => (BqFunc.NotIn(x.value' 10' 20' 50' 1000)) ? 10000 : -10)                  .ToString()                  .Is(@"  SELECT    IF([value] NOT IN(10' 20' 50' 1000)' 10000' -10)  FROM  (    SELECT      100 AS [value]  )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,NotIn,The following statement contains a magic number: context.Select(() => new { value = 100 })                  .Into()                  .Select(x => (BqFunc.NotIn(x.value' 10' 20' 50' 1000)) ? 10000 : -10)                  .ToString()                  .Is(@"  SELECT    IF([value] NOT IN(10' 20' 50' 1000)' 10000' -10)  FROM  (    SELECT      100 AS [value]  )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,NotIn,The following statement contains a magic number: context.Select(() => new { value = 100 })                  .Into()                  .Select(x => (BqFunc.NotIn(x.value' 10' 20' 50' 1000)) ? 10000 : -10)                  .ToString()                  .Is(@"  SELECT    IF([value] NOT IN(10' 20' 50' 1000)' 10000' -10)  FROM  (    SELECT      100 AS [value]  )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,NotIn,The following statement contains a magic number: context.Select(() => new { value = 100 })                  .Into()                  .Select(x => (BqFunc.NotIn(x.value' 10' 20' 50' 1000)) ? 10000 : -10)                  .ToString()                  .Is(@"  SELECT    IF([value] NOT IN(10' 20' 50' 1000)' 10000' -10)  FROM  (    SELECT      100 AS [value]  )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,NotIn,The following statement contains a magic number: context.Select(() => new { value = 100 })                  .Into()                  .Select(x => (BqFunc.NotIn(x.value' 10' 20' 50' 1000)) ? 10000 : -10)                  .ToString()                  .Is(@"  SELECT    IF([value] NOT IN(10' 20' 50' 1000)' 10000' -10)  FROM  (    SELECT      100 AS [value]  )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,NotIn,The following statement contains a magic number: context.Select(() => new { value = 100 })                  .Into()                  .Select(x => (BqFunc.NotIn(x.value' 10' 20' 50' 1000)) ? 10000 : -10)                  .ToString()                  .Is(@"  SELECT    IF([value] NOT IN(10' 20' 50' 1000)' 10000' -10)  FROM  (    SELECT      100 AS [value]  )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,NotIn_SubQuery,The following statement contains a magic number: context.Select(() => new { value = 100L })                  .Into()                  .Where(x => (BqFunc.NotIn(x.value' context.From<wikipedia>().Select(y => y.id ?? -1).Limit(1000))))                  .Select(x => x.value)                  .ToString()                  .Is(@"  SELECT    [value]  FROM  (    SELECT      100 AS [value]  )  WHERE    [value] NOT IN    (      SELECT        IFNULL([id]' -1)      FROM        [publicdata:samples.wikipedia]      LIMIT 1000    )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,NotIn_SubQuery,The following statement contains a magic number: context.Select(() => new { value = 100L })                  .Into()                  .Where(x => (BqFunc.NotIn(x.value' context.From<wikipedia>().Select(y => y.id ?? -1).Limit(1000))))                  .Select(x => x.value)                  .ToString()                  .Is(@"  SELECT    [value]  FROM  (    SELECT      100 AS [value]  )  WHERE    [value] NOT IN    (      SELECT        IFNULL([id]' -1)      FROM        [publicdata:samples.wikipedia]      LIMIT 1000    )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,NotIn_SubQuery2,The following statement contains a magic number: context.Select(() => new { value = 100L })                  .Into()                  .Select(x => new { x.value })                  .GroupBy(x => x.value)                  .Having(x => (BqFunc.NotIn(x.value' context.From<wikipedia>().Select(y => y.id ?? -1).Limit(1000))))                  .ToString()                  .Is(@"  SELECT    [value]  FROM  (    SELECT      100 AS [value]  )  GROUP BY    [value]  HAVING    [value] NOT IN    (      SELECT        IFNULL([id]' -1)      FROM        [publicdata:samples.wikipedia]      LIMIT 1000    )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,NotIn_SubQuery2,The following statement contains a magic number: context.Select(() => new { value = 100L })                  .Into()                  .Select(x => new { x.value })                  .GroupBy(x => x.value)                  .Having(x => (BqFunc.NotIn(x.value' context.From<wikipedia>().Select(y => y.id ?? -1).Limit(1000))))                  .ToString()                  .Is(@"  SELECT    [value]  FROM  (    SELECT      100 AS [value]  )  GROUP BY    [value]  HAVING    [value] NOT IN    (      SELECT        IFNULL([id]' -1)      FROM        [publicdata:samples.wikipedia]      LIMIT 1000    )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,In_Subquery_real,The following statement contains a magic number: context                  .From<github_timeline>("[githubarchive:github.timeline]")                  .Where(x => x.type == "WatchEvent"                          && BqFunc.ParseUtcUsec(x.repository_created_at) >= BqFunc.ParseUtcUsec(BqFunc.StrftimeUtcUsec(BqFunc.TimestampToUsec(BqFunc.DateAdd(BqFunc.UsecToTimestamp(BqFunc.Now())' -1' IntervalUnit.Day))' "%Y-%m-%d 20:00:00"))                      && BqFunc.In(x.repository_url' inTarget))                  .Select(x => new                  {                      x.repository_name'                      x.repository_language'                      x.repository_description'                      cnt = BqFunc.Count(x.repository_name)'                      x.repository_url                  })                  .GroupBy(x => new { x.repository_name' x.repository_language' x.repository_description' x.repository_url })                  .Having(x => x.cnt >= 5)                  .OrderByDescending(x => x.cnt)                  .Limit(25)                  .ToString()                  .Is(@"  SELECT    [repository_name]'    [repository_language]'    [repository_description]'    COUNT([repository_name]) AS [cnt]'    [repository_url]  FROM    [githubarchive:github.timeline]  WHERE    ((([type] = 'WatchEvent') AND (PARSE_UTC_USEC([repository_created_at]) >= PARSE_UTC_USEC(STRFTIME_UTC_USEC(TIMESTAMP_TO_USEC(DATE_ADD(USEC_TO_TIMESTAMP(NOW())' -1' 'DAY'))' '%Y-%m-%d 20:00:00')))) AND [repository_url] IN    (      SELECT        [repository_url]      FROM        [githubarchive:github.timeline]      WHERE        (((([type] = 'CreateEvent') AND (PARSE_UTC_USEC([repository_created_at]) >= PARSE_UTC_USEC(STRFTIME_UTC_USEC(TIMESTAMP_TO_USEC(DATE_ADD(USEC_TO_TIMESTAMP(NOW())' -1' 'DAY'))' '%Y-%m-%d 20:00:00')))) AND ([repository_fork] = 'false')) AND ([payload_ref_type] = 'repository'))      GROUP BY        [repository_url]    ))  GROUP BY    [repository_name]'    [repository_language]'    [repository_description]'    [repository_url]  HAVING    ([cnt] >= 5)  ORDER BY    [cnt] DESC  LIMIT 25".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,In_Subquery_real,The following statement contains a magic number: context                  .From<github_timeline>("[githubarchive:github.timeline]")                  .Where(x => x.type == "WatchEvent"                          && BqFunc.ParseUtcUsec(x.repository_created_at) >= BqFunc.ParseUtcUsec(BqFunc.StrftimeUtcUsec(BqFunc.TimestampToUsec(BqFunc.DateAdd(BqFunc.UsecToTimestamp(BqFunc.Now())' -1' IntervalUnit.Day))' "%Y-%m-%d 20:00:00"))                      && BqFunc.In(x.repository_url' inTarget))                  .Select(x => new                  {                      x.repository_name'                      x.repository_language'                      x.repository_description'                      cnt = BqFunc.Count(x.repository_name)'                      x.repository_url                  })                  .GroupBy(x => new { x.repository_name' x.repository_language' x.repository_description' x.repository_url })                  .Having(x => x.cnt >= 5)                  .OrderByDescending(x => x.cnt)                  .Limit(25)                  .ToString()                  .Is(@"  SELECT    [repository_name]'    [repository_language]'    [repository_description]'    COUNT([repository_name]) AS [cnt]'    [repository_url]  FROM    [githubarchive:github.timeline]  WHERE    ((([type] = 'WatchEvent') AND (PARSE_UTC_USEC([repository_created_at]) >= PARSE_UTC_USEC(STRFTIME_UTC_USEC(TIMESTAMP_TO_USEC(DATE_ADD(USEC_TO_TIMESTAMP(NOW())' -1' 'DAY'))' '%Y-%m-%d 20:00:00')))) AND [repository_url] IN    (      SELECT        [repository_url]      FROM        [githubarchive:github.timeline]      WHERE        (((([type] = 'CreateEvent') AND (PARSE_UTC_USEC([repository_created_at]) >= PARSE_UTC_USEC(STRFTIME_UTC_USEC(TIMESTAMP_TO_USEC(DATE_ADD(USEC_TO_TIMESTAMP(NOW())' -1' 'DAY'))' '%Y-%m-%d 20:00:00')))) AND ([repository_fork] = 'false')) AND ([payload_ref_type] = 'repository'))      GROUP BY        [repository_url]    ))  GROUP BY    [repository_name]'    [repository_language]'    [repository_description]'    [repository_url]  HAVING    ([cnt] >= 5)  ORDER BY    [cnt] DESC  LIMIT 25".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,Greatest,The following statement contains a magic number: context.Select(() => BqFunc.Greatest(1' 10000' 100' 20)).ToFlatSql().Is("SELECT GREATEST(1' 10000' 100' 20)");
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,Greatest,The following statement contains a magic number: context.Select(() => BqFunc.Greatest(1' 10000' 100' 20)).ToFlatSql().Is("SELECT GREATEST(1' 10000' 100' 20)");
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,Greatest,The following statement contains a magic number: context.Select(() => BqFunc.Greatest(1' 10000' 100' 20)).ToFlatSql().Is("SELECT GREATEST(1' 10000' 100' 20)");
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,Greatest,The following statement contains a magic number: context.Select(() => BqFunc.Greatest(1.5' 3.54' 2.3' 0.3)).ToFlatSql().Is("SELECT GREATEST(1.5' 3.54' 2.3' 0.3)");
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,Greatest,The following statement contains a magic number: context.Select(() => BqFunc.Greatest(1.5' 3.54' 2.3' 0.3)).ToFlatSql().Is("SELECT GREATEST(1.5' 3.54' 2.3' 0.3)");
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,Greatest,The following statement contains a magic number: context.Select(() => BqFunc.Greatest(1.5' 3.54' 2.3' 0.3)).ToFlatSql().Is("SELECT GREATEST(1.5' 3.54' 2.3' 0.3)");
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,Greatest,The following statement contains a magic number: context.Select(() => BqFunc.Greatest(1.5' 3.54' 2.3' 0.3)).ToFlatSql().Is("SELECT GREATEST(1.5' 3.54' 2.3' 0.3)");
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,Least,The following statement contains a magic number: context.Select(() => BqFunc.Least(1' 10000' 100' 20)).ToFlatSql().Is("SELECT LEAST(1' 10000' 100' 20)");
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,Least,The following statement contains a magic number: context.Select(() => BqFunc.Least(1' 10000' 100' 20)).ToFlatSql().Is("SELECT LEAST(1' 10000' 100' 20)");
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,Least,The following statement contains a magic number: context.Select(() => BqFunc.Least(1' 10000' 100' 20)).ToFlatSql().Is("SELECT LEAST(1' 10000' 100' 20)");
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,Least,The following statement contains a magic number: context.Select(() => BqFunc.Least(1.5' 3.54' 2.3' 0.3)).ToFlatSql().Is("SELECT LEAST(1.5' 3.54' 2.3' 0.3)");
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,Least,The following statement contains a magic number: context.Select(() => BqFunc.Least(1.5' 3.54' 2.3' 0.3)).ToFlatSql().Is("SELECT LEAST(1.5' 3.54' 2.3' 0.3)");
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,Least,The following statement contains a magic number: context.Select(() => BqFunc.Least(1.5' 3.54' 2.3' 0.3)).ToFlatSql().Is("SELECT LEAST(1.5' 3.54' 2.3' 0.3)");
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,Least,The following statement contains a magic number: context.Select(() => BqFunc.Least(1.5' 3.54' 2.3' 0.3)).ToFlatSql().Is("SELECT LEAST(1.5' 3.54' 2.3' 0.3)");
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,IsInf_Nan,The following statement contains a magic number: context.Select(() => BqFunc.IsInfinity(10.5)).ToFlatSql().Is("SELECT IS_INF(10.5)");
Magic Number,BigQuery.Linq.Tests.Functions,ComparisonTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\ComparisonTest.cs,IsInf_Nan,The following statement contains a magic number: context.Select(() => BqFunc.IsNAN(10.5)).ToFlatSql().Is("SELECT IS_NAN(10.5)");
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,Date,The following statement contains a magic number: Ctx.Select(() => new              {                  A = BqFunc.Date(BqFunc.Timestamp("2012-10-01 02:03:04"))'                  A2 = BqFunc.Date(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc))'                  B = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' 5' IntervalUnit.Year)'                  B2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' 5' IntervalUnit.Day)'                  C = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' -5' IntervalUnit.Year)'                  C2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' -5' IntervalUnit.Second)'                  D = BqFunc.DateDiff(BqFunc.Timestamp("2012-10-02 05:23:48")' BqFunc.Timestamp("2011-06-24 12:18:35"))              }).ToString().Is(@"  SELECT    DATE(TIMESTAMP('2012-10-01 02:03:04')) AS [A]'    DATE('2012-10-01 02:03:04.000000') AS [A2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' 5' 'YEAR') AS [B]'    DATE_ADD('2012-10-01 02:03:04.000000'' 5' 'DAY') AS [B2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' -5' 'YEAR') AS [C]'    DATE_ADD('2012-10-01 02:03:04.000000'' -5' 'SECOND') AS [C2]'    DATEDIFF(TIMESTAMP('2012-10-02 05:23:48')' TIMESTAMP('2011-06-24 12:18:35')) AS [D]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,Date,The following statement contains a magic number: Ctx.Select(() => new              {                  A = BqFunc.Date(BqFunc.Timestamp("2012-10-01 02:03:04"))'                  A2 = BqFunc.Date(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc))'                  B = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' 5' IntervalUnit.Year)'                  B2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' 5' IntervalUnit.Day)'                  C = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' -5' IntervalUnit.Year)'                  C2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' -5' IntervalUnit.Second)'                  D = BqFunc.DateDiff(BqFunc.Timestamp("2012-10-02 05:23:48")' BqFunc.Timestamp("2011-06-24 12:18:35"))              }).ToString().Is(@"  SELECT    DATE(TIMESTAMP('2012-10-01 02:03:04')) AS [A]'    DATE('2012-10-01 02:03:04.000000') AS [A2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' 5' 'YEAR') AS [B]'    DATE_ADD('2012-10-01 02:03:04.000000'' 5' 'DAY') AS [B2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' -5' 'YEAR') AS [C]'    DATE_ADD('2012-10-01 02:03:04.000000'' -5' 'SECOND') AS [C2]'    DATEDIFF(TIMESTAMP('2012-10-02 05:23:48')' TIMESTAMP('2011-06-24 12:18:35')) AS [D]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,Date,The following statement contains a magic number: Ctx.Select(() => new              {                  A = BqFunc.Date(BqFunc.Timestamp("2012-10-01 02:03:04"))'                  A2 = BqFunc.Date(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc))'                  B = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' 5' IntervalUnit.Year)'                  B2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' 5' IntervalUnit.Day)'                  C = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' -5' IntervalUnit.Year)'                  C2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' -5' IntervalUnit.Second)'                  D = BqFunc.DateDiff(BqFunc.Timestamp("2012-10-02 05:23:48")' BqFunc.Timestamp("2011-06-24 12:18:35"))              }).ToString().Is(@"  SELECT    DATE(TIMESTAMP('2012-10-01 02:03:04')) AS [A]'    DATE('2012-10-01 02:03:04.000000') AS [A2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' 5' 'YEAR') AS [B]'    DATE_ADD('2012-10-01 02:03:04.000000'' 5' 'DAY') AS [B2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' -5' 'YEAR') AS [C]'    DATE_ADD('2012-10-01 02:03:04.000000'' -5' 'SECOND') AS [C2]'    DATEDIFF(TIMESTAMP('2012-10-02 05:23:48')' TIMESTAMP('2011-06-24 12:18:35')) AS [D]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,Date,The following statement contains a magic number: Ctx.Select(() => new              {                  A = BqFunc.Date(BqFunc.Timestamp("2012-10-01 02:03:04"))'                  A2 = BqFunc.Date(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc))'                  B = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' 5' IntervalUnit.Year)'                  B2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' 5' IntervalUnit.Day)'                  C = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' -5' IntervalUnit.Year)'                  C2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' -5' IntervalUnit.Second)'                  D = BqFunc.DateDiff(BqFunc.Timestamp("2012-10-02 05:23:48")' BqFunc.Timestamp("2011-06-24 12:18:35"))              }).ToString().Is(@"  SELECT    DATE(TIMESTAMP('2012-10-01 02:03:04')) AS [A]'    DATE('2012-10-01 02:03:04.000000') AS [A2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' 5' 'YEAR') AS [B]'    DATE_ADD('2012-10-01 02:03:04.000000'' 5' 'DAY') AS [B2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' -5' 'YEAR') AS [C]'    DATE_ADD('2012-10-01 02:03:04.000000'' -5' 'SECOND') AS [C2]'    DATEDIFF(TIMESTAMP('2012-10-02 05:23:48')' TIMESTAMP('2011-06-24 12:18:35')) AS [D]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,Date,The following statement contains a magic number: Ctx.Select(() => new              {                  A = BqFunc.Date(BqFunc.Timestamp("2012-10-01 02:03:04"))'                  A2 = BqFunc.Date(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc))'                  B = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' 5' IntervalUnit.Year)'                  B2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' 5' IntervalUnit.Day)'                  C = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' -5' IntervalUnit.Year)'                  C2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' -5' IntervalUnit.Second)'                  D = BqFunc.DateDiff(BqFunc.Timestamp("2012-10-02 05:23:48")' BqFunc.Timestamp("2011-06-24 12:18:35"))              }).ToString().Is(@"  SELECT    DATE(TIMESTAMP('2012-10-01 02:03:04')) AS [A]'    DATE('2012-10-01 02:03:04.000000') AS [A2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' 5' 'YEAR') AS [B]'    DATE_ADD('2012-10-01 02:03:04.000000'' 5' 'DAY') AS [B2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' -5' 'YEAR') AS [C]'    DATE_ADD('2012-10-01 02:03:04.000000'' -5' 'SECOND') AS [C2]'    DATEDIFF(TIMESTAMP('2012-10-02 05:23:48')' TIMESTAMP('2011-06-24 12:18:35')) AS [D]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,Date,The following statement contains a magic number: Ctx.Select(() => new              {                  A = BqFunc.Date(BqFunc.Timestamp("2012-10-01 02:03:04"))'                  A2 = BqFunc.Date(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc))'                  B = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' 5' IntervalUnit.Year)'                  B2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' 5' IntervalUnit.Day)'                  C = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' -5' IntervalUnit.Year)'                  C2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' -5' IntervalUnit.Second)'                  D = BqFunc.DateDiff(BqFunc.Timestamp("2012-10-02 05:23:48")' BqFunc.Timestamp("2011-06-24 12:18:35"))              }).ToString().Is(@"  SELECT    DATE(TIMESTAMP('2012-10-01 02:03:04')) AS [A]'    DATE('2012-10-01 02:03:04.000000') AS [A2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' 5' 'YEAR') AS [B]'    DATE_ADD('2012-10-01 02:03:04.000000'' 5' 'DAY') AS [B2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' -5' 'YEAR') AS [C]'    DATE_ADD('2012-10-01 02:03:04.000000'' -5' 'SECOND') AS [C2]'    DATEDIFF(TIMESTAMP('2012-10-02 05:23:48')' TIMESTAMP('2011-06-24 12:18:35')) AS [D]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,Date,The following statement contains a magic number: Ctx.Select(() => new              {                  A = BqFunc.Date(BqFunc.Timestamp("2012-10-01 02:03:04"))'                  A2 = BqFunc.Date(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc))'                  B = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' 5' IntervalUnit.Year)'                  B2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' 5' IntervalUnit.Day)'                  C = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' -5' IntervalUnit.Year)'                  C2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' -5' IntervalUnit.Second)'                  D = BqFunc.DateDiff(BqFunc.Timestamp("2012-10-02 05:23:48")' BqFunc.Timestamp("2011-06-24 12:18:35"))              }).ToString().Is(@"  SELECT    DATE(TIMESTAMP('2012-10-01 02:03:04')) AS [A]'    DATE('2012-10-01 02:03:04.000000') AS [A2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' 5' 'YEAR') AS [B]'    DATE_ADD('2012-10-01 02:03:04.000000'' 5' 'DAY') AS [B2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' -5' 'YEAR') AS [C]'    DATE_ADD('2012-10-01 02:03:04.000000'' -5' 'SECOND') AS [C2]'    DATEDIFF(TIMESTAMP('2012-10-02 05:23:48')' TIMESTAMP('2011-06-24 12:18:35')) AS [D]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,Date,The following statement contains a magic number: Ctx.Select(() => new              {                  A = BqFunc.Date(BqFunc.Timestamp("2012-10-01 02:03:04"))'                  A2 = BqFunc.Date(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc))'                  B = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' 5' IntervalUnit.Year)'                  B2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' 5' IntervalUnit.Day)'                  C = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' -5' IntervalUnit.Year)'                  C2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' -5' IntervalUnit.Second)'                  D = BqFunc.DateDiff(BqFunc.Timestamp("2012-10-02 05:23:48")' BqFunc.Timestamp("2011-06-24 12:18:35"))              }).ToString().Is(@"  SELECT    DATE(TIMESTAMP('2012-10-01 02:03:04')) AS [A]'    DATE('2012-10-01 02:03:04.000000') AS [A2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' 5' 'YEAR') AS [B]'    DATE_ADD('2012-10-01 02:03:04.000000'' 5' 'DAY') AS [B2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' -5' 'YEAR') AS [C]'    DATE_ADD('2012-10-01 02:03:04.000000'' -5' 'SECOND') AS [C2]'    DATEDIFF(TIMESTAMP('2012-10-02 05:23:48')' TIMESTAMP('2011-06-24 12:18:35')) AS [D]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,Date,The following statement contains a magic number: Ctx.Select(() => new              {                  A = BqFunc.Date(BqFunc.Timestamp("2012-10-01 02:03:04"))'                  A2 = BqFunc.Date(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc))'                  B = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' 5' IntervalUnit.Year)'                  B2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' 5' IntervalUnit.Day)'                  C = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' -5' IntervalUnit.Year)'                  C2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' -5' IntervalUnit.Second)'                  D = BqFunc.DateDiff(BqFunc.Timestamp("2012-10-02 05:23:48")' BqFunc.Timestamp("2011-06-24 12:18:35"))              }).ToString().Is(@"  SELECT    DATE(TIMESTAMP('2012-10-01 02:03:04')) AS [A]'    DATE('2012-10-01 02:03:04.000000') AS [A2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' 5' 'YEAR') AS [B]'    DATE_ADD('2012-10-01 02:03:04.000000'' 5' 'DAY') AS [B2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' -5' 'YEAR') AS [C]'    DATE_ADD('2012-10-01 02:03:04.000000'' -5' 'SECOND') AS [C2]'    DATEDIFF(TIMESTAMP('2012-10-02 05:23:48')' TIMESTAMP('2011-06-24 12:18:35')) AS [D]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,Date,The following statement contains a magic number: Ctx.Select(() => new              {                  A = BqFunc.Date(BqFunc.Timestamp("2012-10-01 02:03:04"))'                  A2 = BqFunc.Date(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc))'                  B = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' 5' IntervalUnit.Year)'                  B2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' 5' IntervalUnit.Day)'                  C = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' -5' IntervalUnit.Year)'                  C2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' -5' IntervalUnit.Second)'                  D = BqFunc.DateDiff(BqFunc.Timestamp("2012-10-02 05:23:48")' BqFunc.Timestamp("2011-06-24 12:18:35"))              }).ToString().Is(@"  SELECT    DATE(TIMESTAMP('2012-10-01 02:03:04')) AS [A]'    DATE('2012-10-01 02:03:04.000000') AS [A2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' 5' 'YEAR') AS [B]'    DATE_ADD('2012-10-01 02:03:04.000000'' 5' 'DAY') AS [B2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' -5' 'YEAR') AS [C]'    DATE_ADD('2012-10-01 02:03:04.000000'' -5' 'SECOND') AS [C2]'    DATEDIFF(TIMESTAMP('2012-10-02 05:23:48')' TIMESTAMP('2011-06-24 12:18:35')) AS [D]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,Date,The following statement contains a magic number: Ctx.Select(() => new              {                  A = BqFunc.Date(BqFunc.Timestamp("2012-10-01 02:03:04"))'                  A2 = BqFunc.Date(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc))'                  B = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' 5' IntervalUnit.Year)'                  B2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' 5' IntervalUnit.Day)'                  C = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' -5' IntervalUnit.Year)'                  C2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' -5' IntervalUnit.Second)'                  D = BqFunc.DateDiff(BqFunc.Timestamp("2012-10-02 05:23:48")' BqFunc.Timestamp("2011-06-24 12:18:35"))              }).ToString().Is(@"  SELECT    DATE(TIMESTAMP('2012-10-01 02:03:04')) AS [A]'    DATE('2012-10-01 02:03:04.000000') AS [A2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' 5' 'YEAR') AS [B]'    DATE_ADD('2012-10-01 02:03:04.000000'' 5' 'DAY') AS [B2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' -5' 'YEAR') AS [C]'    DATE_ADD('2012-10-01 02:03:04.000000'' -5' 'SECOND') AS [C2]'    DATEDIFF(TIMESTAMP('2012-10-02 05:23:48')' TIMESTAMP('2011-06-24 12:18:35')) AS [D]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,Date,The following statement contains a magic number: Ctx.Select(() => new              {                  A = BqFunc.Date(BqFunc.Timestamp("2012-10-01 02:03:04"))'                  A2 = BqFunc.Date(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc))'                  B = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' 5' IntervalUnit.Year)'                  B2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' 5' IntervalUnit.Day)'                  C = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' -5' IntervalUnit.Year)'                  C2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' -5' IntervalUnit.Second)'                  D = BqFunc.DateDiff(BqFunc.Timestamp("2012-10-02 05:23:48")' BqFunc.Timestamp("2011-06-24 12:18:35"))              }).ToString().Is(@"  SELECT    DATE(TIMESTAMP('2012-10-01 02:03:04')) AS [A]'    DATE('2012-10-01 02:03:04.000000') AS [A2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' 5' 'YEAR') AS [B]'    DATE_ADD('2012-10-01 02:03:04.000000'' 5' 'DAY') AS [B2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' -5' 'YEAR') AS [C]'    DATE_ADD('2012-10-01 02:03:04.000000'' -5' 'SECOND') AS [C2]'    DATEDIFF(TIMESTAMP('2012-10-02 05:23:48')' TIMESTAMP('2011-06-24 12:18:35')) AS [D]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,Date,The following statement contains a magic number: Ctx.Select(() => new              {                  A = BqFunc.Date(BqFunc.Timestamp("2012-10-01 02:03:04"))'                  A2 = BqFunc.Date(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc))'                  B = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' 5' IntervalUnit.Year)'                  B2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' 5' IntervalUnit.Day)'                  C = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' -5' IntervalUnit.Year)'                  C2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' -5' IntervalUnit.Second)'                  D = BqFunc.DateDiff(BqFunc.Timestamp("2012-10-02 05:23:48")' BqFunc.Timestamp("2011-06-24 12:18:35"))              }).ToString().Is(@"  SELECT    DATE(TIMESTAMP('2012-10-01 02:03:04')) AS [A]'    DATE('2012-10-01 02:03:04.000000') AS [A2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' 5' 'YEAR') AS [B]'    DATE_ADD('2012-10-01 02:03:04.000000'' 5' 'DAY') AS [B2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' -5' 'YEAR') AS [C]'    DATE_ADD('2012-10-01 02:03:04.000000'' -5' 'SECOND') AS [C2]'    DATEDIFF(TIMESTAMP('2012-10-02 05:23:48')' TIMESTAMP('2011-06-24 12:18:35')) AS [D]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,Date,The following statement contains a magic number: Ctx.Select(() => new              {                  A = BqFunc.Date(BqFunc.Timestamp("2012-10-01 02:03:04"))'                  A2 = BqFunc.Date(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc))'                  B = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' 5' IntervalUnit.Year)'                  B2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' 5' IntervalUnit.Day)'                  C = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' -5' IntervalUnit.Year)'                  C2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' -5' IntervalUnit.Second)'                  D = BqFunc.DateDiff(BqFunc.Timestamp("2012-10-02 05:23:48")' BqFunc.Timestamp("2011-06-24 12:18:35"))              }).ToString().Is(@"  SELECT    DATE(TIMESTAMP('2012-10-01 02:03:04')) AS [A]'    DATE('2012-10-01 02:03:04.000000') AS [A2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' 5' 'YEAR') AS [B]'    DATE_ADD('2012-10-01 02:03:04.000000'' 5' 'DAY') AS [B2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' -5' 'YEAR') AS [C]'    DATE_ADD('2012-10-01 02:03:04.000000'' -5' 'SECOND') AS [C2]'    DATEDIFF(TIMESTAMP('2012-10-02 05:23:48')' TIMESTAMP('2011-06-24 12:18:35')) AS [D]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,Date,The following statement contains a magic number: Ctx.Select(() => new              {                  A = BqFunc.Date(BqFunc.Timestamp("2012-10-01 02:03:04"))'                  A2 = BqFunc.Date(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc))'                  B = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' 5' IntervalUnit.Year)'                  B2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' 5' IntervalUnit.Day)'                  C = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' -5' IntervalUnit.Year)'                  C2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' -5' IntervalUnit.Second)'                  D = BqFunc.DateDiff(BqFunc.Timestamp("2012-10-02 05:23:48")' BqFunc.Timestamp("2011-06-24 12:18:35"))              }).ToString().Is(@"  SELECT    DATE(TIMESTAMP('2012-10-01 02:03:04')) AS [A]'    DATE('2012-10-01 02:03:04.000000') AS [A2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' 5' 'YEAR') AS [B]'    DATE_ADD('2012-10-01 02:03:04.000000'' 5' 'DAY') AS [B2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' -5' 'YEAR') AS [C]'    DATE_ADD('2012-10-01 02:03:04.000000'' -5' 'SECOND') AS [C2]'    DATEDIFF(TIMESTAMP('2012-10-02 05:23:48')' TIMESTAMP('2011-06-24 12:18:35')) AS [D]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,Date,The following statement contains a magic number: Ctx.Select(() => new              {                  A = BqFunc.Date(BqFunc.Timestamp("2012-10-01 02:03:04"))'                  A2 = BqFunc.Date(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc))'                  B = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' 5' IntervalUnit.Year)'                  B2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' 5' IntervalUnit.Day)'                  C = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' -5' IntervalUnit.Year)'                  C2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' -5' IntervalUnit.Second)'                  D = BqFunc.DateDiff(BqFunc.Timestamp("2012-10-02 05:23:48")' BqFunc.Timestamp("2011-06-24 12:18:35"))              }).ToString().Is(@"  SELECT    DATE(TIMESTAMP('2012-10-01 02:03:04')) AS [A]'    DATE('2012-10-01 02:03:04.000000') AS [A2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' 5' 'YEAR') AS [B]'    DATE_ADD('2012-10-01 02:03:04.000000'' 5' 'DAY') AS [B2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' -5' 'YEAR') AS [C]'    DATE_ADD('2012-10-01 02:03:04.000000'' -5' 'SECOND') AS [C2]'    DATEDIFF(TIMESTAMP('2012-10-02 05:23:48')' TIMESTAMP('2011-06-24 12:18:35')) AS [D]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,Date,The following statement contains a magic number: Ctx.Select(() => new              {                  A = BqFunc.Date(BqFunc.Timestamp("2012-10-01 02:03:04"))'                  A2 = BqFunc.Date(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc))'                  B = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' 5' IntervalUnit.Year)'                  B2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' 5' IntervalUnit.Day)'                  C = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' -5' IntervalUnit.Year)'                  C2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' -5' IntervalUnit.Second)'                  D = BqFunc.DateDiff(BqFunc.Timestamp("2012-10-02 05:23:48")' BqFunc.Timestamp("2011-06-24 12:18:35"))              }).ToString().Is(@"  SELECT    DATE(TIMESTAMP('2012-10-01 02:03:04')) AS [A]'    DATE('2012-10-01 02:03:04.000000') AS [A2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' 5' 'YEAR') AS [B]'    DATE_ADD('2012-10-01 02:03:04.000000'' 5' 'DAY') AS [B2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' -5' 'YEAR') AS [C]'    DATE_ADD('2012-10-01 02:03:04.000000'' -5' 'SECOND') AS [C2]'    DATEDIFF(TIMESTAMP('2012-10-02 05:23:48')' TIMESTAMP('2011-06-24 12:18:35')) AS [D]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,Date,The following statement contains a magic number: Ctx.Select(() => new              {                  A = BqFunc.Date(BqFunc.Timestamp("2012-10-01 02:03:04"))'                  A2 = BqFunc.Date(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc))'                  B = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' 5' IntervalUnit.Year)'                  B2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' 5' IntervalUnit.Day)'                  C = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' -5' IntervalUnit.Year)'                  C2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' -5' IntervalUnit.Second)'                  D = BqFunc.DateDiff(BqFunc.Timestamp("2012-10-02 05:23:48")' BqFunc.Timestamp("2011-06-24 12:18:35"))              }).ToString().Is(@"  SELECT    DATE(TIMESTAMP('2012-10-01 02:03:04')) AS [A]'    DATE('2012-10-01 02:03:04.000000') AS [A2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' 5' 'YEAR') AS [B]'    DATE_ADD('2012-10-01 02:03:04.000000'' 5' 'DAY') AS [B2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' -5' 'YEAR') AS [C]'    DATE_ADD('2012-10-01 02:03:04.000000'' -5' 'SECOND') AS [C2]'    DATEDIFF(TIMESTAMP('2012-10-02 05:23:48')' TIMESTAMP('2011-06-24 12:18:35')) AS [D]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,Date,The following statement contains a magic number: Ctx.Select(() => new              {                  A = BqFunc.Date(BqFunc.Timestamp("2012-10-01 02:03:04"))'                  A2 = BqFunc.Date(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc))'                  B = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' 5' IntervalUnit.Year)'                  B2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' 5' IntervalUnit.Day)'                  C = BqFunc.DateAdd(BqFunc.Timestamp("2012-10-01 02:03:04")' -5' IntervalUnit.Year)'                  C2 = BqFunc.DateAdd(new DateTime(2012' 10' 1' 2' 3' 4' DateTimeKind.Utc)' -5' IntervalUnit.Second)'                  D = BqFunc.DateDiff(BqFunc.Timestamp("2012-10-02 05:23:48")' BqFunc.Timestamp("2011-06-24 12:18:35"))              }).ToString().Is(@"  SELECT    DATE(TIMESTAMP('2012-10-01 02:03:04')) AS [A]'    DATE('2012-10-01 02:03:04.000000') AS [A2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' 5' 'YEAR') AS [B]'    DATE_ADD('2012-10-01 02:03:04.000000'' 5' 'DAY') AS [B2]'    DATE_ADD(TIMESTAMP('2012-10-01 02:03:04')' -5' 'YEAR') AS [C]'    DATE_ADD('2012-10-01 02:03:04.000000'' -5' 'SECOND') AS [C2]'    DATEDIFF(TIMESTAMP('2012-10-02 05:23:48')' TIMESTAMP('2011-06-24 12:18:35')) AS [D]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,FormatUtcUsec,The following statement contains a magic number: Ctx.Select(() => new              {                  A = BqFunc.FormatUtcUsec(1274259481071200)'              }).ToString().Is(@"  SELECT    FORMAT_UTC_USEC(1274259481071200) AS [A]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,MSecto,The following statement contains a magic number: Ctx.Select<DateTimeOffset>(() => BqFunc.MsecToTimestamp(1349053323000)).ToFlatSql().Is(@"SELECT MSEC_TO_TIMESTAMP(1349053323000)");
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,SecToTimestamp,The following statement contains a magic number: Ctx.Select<DateTimeOffset>(() => BqFunc.SecToTimestamp(1355968987)).ToFlatSql().Is("SELECT SEC_TO_TIMESTAMP(1355968987)");
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,Strftime,The following statement contains a magic number: Ctx.Select<string>(() => BqFunc.StrftimeUtcUsec(1274259481071200' "%Y-%m-%d")).ToFlatSql().Is("SELECT STRFTIME_UTC_USEC(1274259481071200' '%Y-%m-%d')");
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,USEC_,The following statement contains a magic number: Ctx.Select(() => new              {                  A = BqFunc.UsecToTimestamp(1349053323000000)'                  B = BqFunc.UtcUsecToDay(1274259481071200)'                  C = BqFunc.UtcUsecToHour(1274259481071200)'                  D = BqFunc.UtcUsecToMonth(1274259481071200)'                  E = BqFunc.UtcUsecToWeek(1274259481071200' (long)System.DayOfWeek.Tuesday)'                  F = BqFunc.UtcUsecToYear(1274259481071200)              }).ToString().Is(@"  SELECT    USEC_TO_TIMESTAMP(1349053323000000) AS [A]'    UTC_USEC_TO_DAY(1274259481071200) AS [B]'    UTC_USEC_TO_HOUR(1274259481071200) AS [C]'    UTC_USEC_TO_MONTH(1274259481071200) AS [D]'    UTC_USEC_TO_WEEK(1274259481071200' 2) AS [E]'    UTC_USEC_TO_YEAR(1274259481071200) AS [F]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,USEC_,The following statement contains a magic number: Ctx.Select(() => new              {                  A = BqFunc.UsecToTimestamp(1349053323000000)'                  B = BqFunc.UtcUsecToDay(1274259481071200)'                  C = BqFunc.UtcUsecToHour(1274259481071200)'                  D = BqFunc.UtcUsecToMonth(1274259481071200)'                  E = BqFunc.UtcUsecToWeek(1274259481071200' (long)System.DayOfWeek.Tuesday)'                  F = BqFunc.UtcUsecToYear(1274259481071200)              }).ToString().Is(@"  SELECT    USEC_TO_TIMESTAMP(1349053323000000) AS [A]'    UTC_USEC_TO_DAY(1274259481071200) AS [B]'    UTC_USEC_TO_HOUR(1274259481071200) AS [C]'    UTC_USEC_TO_MONTH(1274259481071200) AS [D]'    UTC_USEC_TO_WEEK(1274259481071200' 2) AS [E]'    UTC_USEC_TO_YEAR(1274259481071200) AS [F]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,USEC_,The following statement contains a magic number: Ctx.Select(() => new              {                  A = BqFunc.UsecToTimestamp(1349053323000000)'                  B = BqFunc.UtcUsecToDay(1274259481071200)'                  C = BqFunc.UtcUsecToHour(1274259481071200)'                  D = BqFunc.UtcUsecToMonth(1274259481071200)'                  E = BqFunc.UtcUsecToWeek(1274259481071200' (long)System.DayOfWeek.Tuesday)'                  F = BqFunc.UtcUsecToYear(1274259481071200)              }).ToString().Is(@"  SELECT    USEC_TO_TIMESTAMP(1349053323000000) AS [A]'    UTC_USEC_TO_DAY(1274259481071200) AS [B]'    UTC_USEC_TO_HOUR(1274259481071200) AS [C]'    UTC_USEC_TO_MONTH(1274259481071200) AS [D]'    UTC_USEC_TO_WEEK(1274259481071200' 2) AS [E]'    UTC_USEC_TO_YEAR(1274259481071200) AS [F]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,USEC_,The following statement contains a magic number: Ctx.Select(() => new              {                  A = BqFunc.UsecToTimestamp(1349053323000000)'                  B = BqFunc.UtcUsecToDay(1274259481071200)'                  C = BqFunc.UtcUsecToHour(1274259481071200)'                  D = BqFunc.UtcUsecToMonth(1274259481071200)'                  E = BqFunc.UtcUsecToWeek(1274259481071200' (long)System.DayOfWeek.Tuesday)'                  F = BqFunc.UtcUsecToYear(1274259481071200)              }).ToString().Is(@"  SELECT    USEC_TO_TIMESTAMP(1349053323000000) AS [A]'    UTC_USEC_TO_DAY(1274259481071200) AS [B]'    UTC_USEC_TO_HOUR(1274259481071200) AS [C]'    UTC_USEC_TO_MONTH(1274259481071200) AS [D]'    UTC_USEC_TO_WEEK(1274259481071200' 2) AS [E]'    UTC_USEC_TO_YEAR(1274259481071200) AS [F]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,USEC_,The following statement contains a magic number: Ctx.Select(() => new              {                  A = BqFunc.UsecToTimestamp(1349053323000000)'                  B = BqFunc.UtcUsecToDay(1274259481071200)'                  C = BqFunc.UtcUsecToHour(1274259481071200)'                  D = BqFunc.UtcUsecToMonth(1274259481071200)'                  E = BqFunc.UtcUsecToWeek(1274259481071200' (long)System.DayOfWeek.Tuesday)'                  F = BqFunc.UtcUsecToYear(1274259481071200)              }).ToString().Is(@"  SELECT    USEC_TO_TIMESTAMP(1349053323000000) AS [A]'    UTC_USEC_TO_DAY(1274259481071200) AS [B]'    UTC_USEC_TO_HOUR(1274259481071200) AS [C]'    UTC_USEC_TO_MONTH(1274259481071200) AS [D]'    UTC_USEC_TO_WEEK(1274259481071200' 2) AS [E]'    UTC_USEC_TO_YEAR(1274259481071200) AS [F]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,USEC_,The following statement contains a magic number: Ctx.Select(() => new              {                  A = BqFunc.UsecToTimestamp(1349053323000000)'                  B = BqFunc.UtcUsecToDay(1274259481071200)'                  C = BqFunc.UtcUsecToHour(1274259481071200)'                  D = BqFunc.UtcUsecToMonth(1274259481071200)'                  E = BqFunc.UtcUsecToWeek(1274259481071200' (long)System.DayOfWeek.Tuesday)'                  F = BqFunc.UtcUsecToYear(1274259481071200)              }).ToString().Is(@"  SELECT    USEC_TO_TIMESTAMP(1349053323000000) AS [A]'    UTC_USEC_TO_DAY(1274259481071200) AS [B]'    UTC_USEC_TO_HOUR(1274259481071200) AS [C]'    UTC_USEC_TO_MONTH(1274259481071200) AS [D]'    UTC_USEC_TO_WEEK(1274259481071200' 2) AS [E]'    UTC_USEC_TO_YEAR(1274259481071200) AS [F]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,AdvancedExample_1,The following statement contains a magic number: Ctx.From<Wikipedia>()                  .Select(x => new                  {                      top_revision_time = BqFunc.Top(BqFunc.FormatUtcUsec(x.timestamp * 1000000)' 5)'                      revision_count = BqFunc.Count()                  })                  .ToString()                  .Is(@"  SELECT    TOP(FORMAT_UTC_USEC(([timestamp] * 1000000))' 5) AS [top_revision_time]'    COUNT(*) AS [revision_count]  FROM    [publicdata:samples.wikipedia]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,AdvancedExample_1,The following statement contains a magic number: Ctx.From<Wikipedia>()                  .Select(x => new                  {                      top_revision_time = BqFunc.Top(BqFunc.FormatUtcUsec(x.timestamp * 1000000)' 5)'                      revision_count = BqFunc.Count()                  })                  .ToString()                  .Is(@"  SELECT    TOP(FORMAT_UTC_USEC(([timestamp] * 1000000))' 5) AS [top_revision_time]'    COUNT(*) AS [revision_count]  FROM    [publicdata:samples.wikipedia]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,AdvancedExample_2,The following statement contains a magic number: Ctx.From<Wikipedia>()                  .Where(x => (x.contributor_username != "" && x.contributor_username != null)                           && x.timestamp > 1133395200                           && x.timestamp < 1157068800)                  .Select(x => new                  {                      x.contributor_username'                      month = BqFunc.Left(BqFunc.FormatUtcUsec(BqFunc.UtcUsecToMonth(x.timestamp * 1000000))' 7)'                      total_chars_used = BqFunc.Sum(BqFunc.Length(x.comment))                  })                  .GroupBy(x => new { x.contributor_username' x.month })                  .OrderByDescending(x => x.total_chars_used)                  .ToString()                  .Is(@"  SELECT    [contributor_username]'    LEFT(FORMAT_UTC_USEC(UTC_USEC_TO_MONTH(([timestamp] * 1000000)))' 7) AS [month]'    SUM(LENGTH([comment])) AS [total_chars_used]  FROM    [publicdata:samples.wikipedia]  WHERE    (((([contributor_username] != '') AND ([contributor_username] IS NOT NULL)) AND ([timestamp] > 1133395200)) AND ([timestamp] < 1157068800))  GROUP BY    [contributor_username]'    [month]  ORDER BY    [total_chars_used] DESC  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,AdvancedExample_2,The following statement contains a magic number: Ctx.From<Wikipedia>()                  .Where(x => (x.contributor_username != "" && x.contributor_username != null)                           && x.timestamp > 1133395200                           && x.timestamp < 1157068800)                  .Select(x => new                  {                      x.contributor_username'                      month = BqFunc.Left(BqFunc.FormatUtcUsec(BqFunc.UtcUsecToMonth(x.timestamp * 1000000))' 7)'                      total_chars_used = BqFunc.Sum(BqFunc.Length(x.comment))                  })                  .GroupBy(x => new { x.contributor_username' x.month })                  .OrderByDescending(x => x.total_chars_used)                  .ToString()                  .Is(@"  SELECT    [contributor_username]'    LEFT(FORMAT_UTC_USEC(UTC_USEC_TO_MONTH(([timestamp] * 1000000)))' 7) AS [month]'    SUM(LENGTH([comment])) AS [total_chars_used]  FROM    [publicdata:samples.wikipedia]  WHERE    (((([contributor_username] != '') AND ([contributor_username] IS NOT NULL)) AND ([timestamp] > 1133395200)) AND ([timestamp] < 1157068800))  GROUP BY    [contributor_username]'    [month]  ORDER BY    [total_chars_used] DESC  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,AdvancedExample_2,The following statement contains a magic number: Ctx.From<Wikipedia>()                  .Where(x => (x.contributor_username != "" && x.contributor_username != null)                           && x.timestamp > 1133395200                           && x.timestamp < 1157068800)                  .Select(x => new                  {                      x.contributor_username'                      month = BqFunc.Left(BqFunc.FormatUtcUsec(BqFunc.UtcUsecToMonth(x.timestamp * 1000000))' 7)'                      total_chars_used = BqFunc.Sum(BqFunc.Length(x.comment))                  })                  .GroupBy(x => new { x.contributor_username' x.month })                  .OrderByDescending(x => x.total_chars_used)                  .ToString()                  .Is(@"  SELECT    [contributor_username]'    LEFT(FORMAT_UTC_USEC(UTC_USEC_TO_MONTH(([timestamp] * 1000000)))' 7) AS [month]'    SUM(LENGTH([comment])) AS [total_chars_used]  FROM    [publicdata:samples.wikipedia]  WHERE    (((([contributor_username] != '') AND ([contributor_username] IS NOT NULL)) AND ([timestamp] > 1133395200)) AND ([timestamp] < 1157068800))  GROUP BY    [contributor_username]'    [month]  ORDER BY    [total_chars_used] DESC  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,DateAndTimeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\DateAndTimeTest.cs,AdvancedExample_2,The following statement contains a magic number: Ctx.From<Wikipedia>()                  .Where(x => (x.contributor_username != "" && x.contributor_username != null)                           && x.timestamp > 1133395200                           && x.timestamp < 1157068800)                  .Select(x => new                  {                      x.contributor_username'                      month = BqFunc.Left(BqFunc.FormatUtcUsec(BqFunc.UtcUsecToMonth(x.timestamp * 1000000))' 7)'                      total_chars_used = BqFunc.Sum(BqFunc.Length(x.comment))                  })                  .GroupBy(x => new { x.contributor_username' x.month })                  .OrderByDescending(x => x.total_chars_used)                  .ToString()                  .Is(@"  SELECT    [contributor_username]'    LEFT(FORMAT_UTC_USEC(UTC_USEC_TO_MONTH(([timestamp] * 1000000)))' 7) AS [month]'    SUM(LENGTH([comment])) AS [total_chars_used]  FROM    [publicdata:samples.wikipedia]  WHERE    (((([contributor_username] != '') AND ([contributor_username] IS NOT NULL)) AND ([timestamp] > 1133395200)) AND ([timestamp] < 1157068800))  GROUP BY    [contributor_username]'    [month]  ORDER BY    [total_chars_used] DESC  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,AggreagteTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\AggreagteTest.cs,Count,The following statement contains a magic number: shakespear.Select(x => new              {                  A = BqFunc.Count()'                  B = BqFunc.Count(x.corpus_date)'                  C = BqFunc.CountDistinct(x.word_count)'                  D = BqFunc.CountDistinct(x.word_count' 10000)'                  E = BqFunc.ExactCountDistinct(x.word_count)              }).ToString().Is(@"  SELECT    COUNT(*) AS [A]'    COUNT([corpus_date]) AS [B]'    COUNT(DISTINCT [word_count]) AS [C]'    COUNT(DISTINCT [word_count]' 10000) AS [D]'    EXACT_COUNT_DISTINCT([word_count]) AS [E]  FROM    [publicdata:samples.shakespeare]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,AggreagteTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\AggreagteTest.cs,Nth,The following statement contains a magic number: var r = context.From<wikipedia>()                  .Where(x => x.contributor_ip != null)                  .Select(x => new                  {                      clientIpNum = BqFunc.Integer(BqFunc.ParseIP(x.contributor_ip))'                      classB = BqFunc.Integer(BqFunc.ParseIP(x.contributor_ip) / (256 * 256))                  })                  .Into()                  .Join(JoinType.InnerEach' context.From<geolite_city_bq_b2b>()' (a' b) => new { a' b }' x => x.a.classB == x.b.classB)                  .Where(x => BqFunc.Between(x.a.clientIpNum' x.b.startIpNum' x.b.endIpNum) && x.b.city != "")                  .Select(x => new                  {                      c = BqFunc.Count()'                      x.b.city'                      x.b.countryLabel'                      lat = BqFunc.Nth(1' x.b.latitude)'                      lng = BqFunc.Nth(1' x.b.longitude)                  })                  .GroupBy(x => new { x.city' x.countryLabel })                  .OrderByDescending(x => x.c)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,AggreagteTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\AggreagteTest.cs,Nth,The following statement contains a magic number: var r = context.From<wikipedia>()                  .Where(x => x.contributor_ip != null)                  .Select(x => new                  {                      clientIpNum = BqFunc.Integer(BqFunc.ParseIP(x.contributor_ip))'                      classB = BqFunc.Integer(BqFunc.ParseIP(x.contributor_ip) / (256 * 256))                  })                  .Into()                  .Join(JoinType.InnerEach' context.From<geolite_city_bq_b2b>()' (a' b) => new { a' b }' x => x.a.classB == x.b.classB)                  .Where(x => BqFunc.Between(x.a.clientIpNum' x.b.startIpNum' x.b.endIpNum) && x.b.city != "")                  .Select(x => new                  {                      c = BqFunc.Count()'                      x.b.city'                      x.b.countryLabel'                      lat = BqFunc.Nth(1' x.b.latitude)'                      lng = BqFunc.Nth(1' x.b.longitude)                  })                  .GroupBy(x => new { x.city' x.countryLabel })                  .OrderByDescending(x => x.c)                  .ToString();
Magic Number,BigQuery.Linq.Tests.Functions,AggreagteTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\AggreagteTest.cs,Quantiles,The following statement contains a magic number: shakespear.Select(x => new              {                  A = BqFunc.Quantiles(x.word)'                  B = BqFunc.Quantiles(x.word_count' 10)'              }).ToString().Is(@"  SELECT    QUANTILES([word]) AS [A]'    QUANTILES([word_count]' 10) AS [B]  FROM    [publicdata:samples.shakespeare]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,AggreagteTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\AggreagteTest.cs,Sum,The following statement contains a magic number: new BigQueryContext().Select(() => new              {                  A = 10'                  B = 10.5'                  C = BqFunc.Timestamp("2013-12-12 01:01:01")              })              .Into()              .Select(x => new              {                  S1 = BqFunc.Sum(x.A)'                  S2 = BqFunc.Sum(x.B)'                  S3 = BqFunc.Sum(x.C)'              }).ToString().Is(@"  SELECT    SUM([A]) AS [S1]'    SUM([B]) AS [S2]'    SUM([C]) AS [S3]  FROM  (    SELECT      10 AS [A]'      10.5 AS [B]'      TIMESTAMP('2013-12-12 01:01:01') AS [C]  )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,AggreagteTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\AggreagteTest.cs,Sum,The following statement contains a magic number: new BigQueryContext().Select(() => new              {                  A = 10'                  B = 10.5'                  C = BqFunc.Timestamp("2013-12-12 01:01:01")              })              .Into()              .Select(x => new              {                  S1 = BqFunc.Sum(x.A)'                  S2 = BqFunc.Sum(x.B)'                  S3 = BqFunc.Sum(x.C)'              }).ToString().Is(@"  SELECT    SUM([A]) AS [S1]'    SUM([B]) AS [S2]'    SUM([C]) AS [S3]  FROM  (    SELECT      10 AS [A]'      10.5 AS [B]'      TIMESTAMP('2013-12-12 01:01:01') AS [C]  )  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,AggreagteTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\AggreagteTest.cs,Advanced1,The following statement contains a magic number: context.From<Natality>()                  .Where(x => x.year == 2003 && x.state == "OH")                  .Select(x => new                  {                      x.cigarette_use'                      baby_weight = BqFunc.Average(x.weight_pounds)'                      baby_weight_stdev = BqFunc.StandardDeviation(x.weight_pounds)'                      mother_age = BqFunc.Average(x.mother_age)                  })                  .GroupBy(x => x.cigarette_use)                  .ToString()                  .Is(@"  SELECT    [cigarette_use]'    AVG([weight_pounds]) AS [baby_weight]'    STDDEV([weight_pounds]) AS [baby_weight_stdev]'    AVG([mother_age]) AS [mother_age]  FROM    [publicdata:samples.natality]  WHERE    (([year] = 2003) AND ([state] = 'OH'))  GROUP BY    [cigarette_use]  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests.Functions,AggreagteTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\Functions\AggreagteTest.cs,Advanced2,The following statement contains a magic number: context.From<Natality>()                  .Where(x => x.state != "")                  .Select(x => new                  {                      x.state'                      sex = (x.is_male) ? "Male" : "Female"'                      cnt = BqFunc.Count()                  })                  .GroupBy(x => new { x.state' x.sex })                  .Having(x => x.cnt > 3000000)                  .OrderByDescending(x => x.cnt)                  .ToString()                  .Is(@"  SELECT    [state]'    IF([is_male]' 'Male'' 'Female') AS [sex]'    COUNT(*) AS [cnt]  FROM    [publicdata:samples.natality]  WHERE    ([state] != '')  GROUP BY    [state]'    [sex]  HAVING    ([cnt] > 3000000)  ORDER BY    [cnt] DESC  ".TrimSmart());
Magic Number,BigQuery.Linq.Tests,QueryTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\QueryTest.cs,ConnectTest,The following statement contains a magic number: var result = context.From<Wikipedia>()                  .Select(x => new { x.title' x.wp_namespace })                  .Limit(1000)                  .RunDry();
Magic Number,BigQuery.Linq.Tests,DataTypeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\DataTypeTest.cs,CustomSerialization,The following statement contains a magic number: schema[2].Is(x => x.Name == "MyProperty" && x.Type == "STRING");
Magic Number,BigQuery.Linq.Tests,DataTypeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\DataTypeTest.cs,CustomSerialization,The following statement contains a magic number: schema[3].Is(x => x.Name == "Next" && x.Type == "RECORD");
Magic Number,BigQuery.Linq.Tests,DataTypeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\DataTypeTest.cs,CustomSerialization,The following statement contains a magic number: schema[4].Is(x => x.Name == "Xs" && x.Type == "INTEGER" && x.Mode == "REPEATED");
Magic Number,BigQuery.Linq.Tests,DataTypeTest,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\BigQuery.Linq.Tests\DataTypeTest.cs,CustomSerialization,The following statement contains a magic number: value.Hoge.Is(100);
