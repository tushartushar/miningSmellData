Implementation smell,Namespace,Class,File,Method,Description
Long Statement,StoreTwitterTimeline,Program,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\SampleApps\StoreTwitterTimeline\Program.cs,InsertStatus,The length of the statement  "                            message = string.Join("\r\n\r\n"' failed.InternalErrorInfos.Where(x => x.Reason != "stopped").Select(x => x.ToString())); " is 121.
Long Statement,StoreTwitterTimeline,Program,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\SampleApps\StoreTwitterTimeline\Program.cs,InsertStatus,The length of the statement  "                        errorTable.InsertAllAsync(context.BigQueryService' new[] { new ErrorTable { Timestamp = DateTimeOffset.UtcNow' Type = ex.GetType().Name' StackTrace = ex.StackTrace' Message = message' Source = ex.Source } }).Wait(); " is 215.
Long Statement,StoreTwitterTimeline,Program,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\SampleApps\StoreTwitterTimeline\Program.cs,InsertStatus,The length of the statement  "                        errorTable.InsertAllAsync(context.BigQueryService' new[] { new ErrorTable { Timestamp = DateTimeOffset.UtcNow' Type = ex.GetType().Name' StackTrace = ex.StackTrace' Message = ex.Message' Source = ex.Source } }).Wait(); " is 218.
Long Statement,StoreTwitterTimeline,StatusResolver,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\SampleApps\StoreTwitterTimeline\Program.cs,CreateProperties,The length of the statement  "                    target.ValueProvider = new GenericValueProvider<Place>(x => (x.ContainedWithin != null) ? x.ContainedWithin.Select(y => y.Id).ToArray() : new string[0]); " is 153.
Long Statement,StoreTwitterTimeline,StatusResolver,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\SampleApps\StoreTwitterTimeline\Program.cs,CreateProperties,The length of the statement  "                    target.ValueProvider = new GenericValueProvider<Status>(x => (x.RetweetedStatus != null) ? (long?)x.RetweetedStatus.Id : null); " is 127.
Long Statement,StoreTwitterTimeline,Account,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\SampleApps\StoreTwitterTimeline\Account.cs,GetService,The length of the statement  "            var path = Path.Combine(new FileInfo(Assembly.GetExecutingAssembly().Location).Directory.FullName' certificateFileName); " is 120.
Magic Number,StoreTwitterTimeline,Program,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\SampleApps\StoreTwitterTimeline\Program.cs,InsertStatus,The following statement contains a magic number: return stream                  .OfType<StatusMessage>()                  .Select(x => x.Status)                  .Buffer(TimeSpan.FromSeconds(10)' 200)                  .SelectMany(tweets =>                  {                      if (tweets.Count == 0) return Observable.Empty<System.Reactive.Unit>();                        count += tweets.Count;                      var c1 = Interlocked.Increment(ref concurrentCount);                      Console.WriteLine("Start:" + c1);                      var backoff = new RetryCountExponentialBackoff();                      var sw = Stopwatch.StartNew();                      return insertTable.InsertAllAsync(                              context.BigQueryService'                              tweets'                              backoff'                              insertIdSelector: x => x.Id.ToString()'                              serializerSettings: resolverSettings)                          .ToObservable()                          .SelectMany(_ =>                          {                              sw.Stop();                              Console.WriteLine(tweets.Count + "|" + sw.Elapsed);                              return responseTable.InsertAllAsync(                                  context.BigQueryService'                                  new[] { new ResponseTable                                   {                                      Timestamp = DateTimeOffset.UtcNow'                                      RetryCount = backoff.RetryCount'                                      RowCount = tweets.Count'                                      Duration = sw.Elapsed.TotalMilliseconds                                   }})                                  .ToObservable();                          })                          .Finally(() =>                          {                              var c2 = Interlocked.Decrement(ref concurrentCount);                              Console.WriteLine("Decrement:" + c2);                          });                  })                  .Do(_ => { }' ex =>                  {                      string message;                      if (ex is InsertAllFailedException)                      {                          var failed = (ex as InsertAllFailedException);                          if (failed.InnerException != null)                          {                              ex = failed.InnerException;                              message = ex.Message;                          }                          else                          {                              message = string.Join("\r\n\r\n"' failed.InternalErrorInfos.Where(x => x.Reason != "stopped").Select(x => x.ToString()));                          }                      }                      else                      {                          message = ex.Message;                      }                        Console.WriteLine(message);                      try                      {                          errorTable.InsertAllAsync(context.BigQueryService' new[] { new ErrorTable { Timestamp = DateTimeOffset.UtcNow' Type = ex.GetType().Name' StackTrace = ex.StackTrace' Message = message' Source = ex.Source } }).Wait();                      }                      catch (Exception ex2)                      {                          ex = ex2;                          Console.WriteLine(ex.ToString());                          errorTable.InsertAllAsync(context.BigQueryService' new[] { new ErrorTable { Timestamp = DateTimeOffset.UtcNow' Type = ex.GetType().Name' StackTrace = ex.StackTrace' Message = ex.Message' Source = ex.Source } }).Wait();                      }                  })                  .Select(_ => count)                  .Retry();
Magic Number,StoreTwitterTimeline,Program,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\SampleApps\StoreTwitterTimeline\Program.cs,InsertStatus,The following statement contains a magic number: return stream                  .OfType<StatusMessage>()                  .Select(x => x.Status)                  .Buffer(TimeSpan.FromSeconds(10)' 200)                  .SelectMany(tweets =>                  {                      if (tweets.Count == 0) return Observable.Empty<System.Reactive.Unit>();                        count += tweets.Count;                      var c1 = Interlocked.Increment(ref concurrentCount);                      Console.WriteLine("Start:" + c1);                      var backoff = new RetryCountExponentialBackoff();                      var sw = Stopwatch.StartNew();                      return insertTable.InsertAllAsync(                              context.BigQueryService'                              tweets'                              backoff'                              insertIdSelector: x => x.Id.ToString()'                              serializerSettings: resolverSettings)                          .ToObservable()                          .SelectMany(_ =>                          {                              sw.Stop();                              Console.WriteLine(tweets.Count + "|" + sw.Elapsed);                              return responseTable.InsertAllAsync(                                  context.BigQueryService'                                  new[] { new ResponseTable                                   {                                      Timestamp = DateTimeOffset.UtcNow'                                      RetryCount = backoff.RetryCount'                                      RowCount = tweets.Count'                                      Duration = sw.Elapsed.TotalMilliseconds                                   }})                                  .ToObservable();                          })                          .Finally(() =>                          {                              var c2 = Interlocked.Decrement(ref concurrentCount);                              Console.WriteLine("Decrement:" + c2);                          });                  })                  .Do(_ => { }' ex =>                  {                      string message;                      if (ex is InsertAllFailedException)                      {                          var failed = (ex as InsertAllFailedException);                          if (failed.InnerException != null)                          {                              ex = failed.InnerException;                              message = ex.Message;                          }                          else                          {                              message = string.Join("\r\n\r\n"' failed.InternalErrorInfos.Where(x => x.Reason != "stopped").Select(x => x.ToString()));                          }                      }                      else                      {                          message = ex.Message;                      }                        Console.WriteLine(message);                      try                      {                          errorTable.InsertAllAsync(context.BigQueryService' new[] { new ErrorTable { Timestamp = DateTimeOffset.UtcNow' Type = ex.GetType().Name' StackTrace = ex.StackTrace' Message = message' Source = ex.Source } }).Wait();                      }                      catch (Exception ex2)                      {                          ex = ex2;                          Console.WriteLine(ex.ToString());                          errorTable.InsertAllAsync(context.BigQueryService' new[] { new ErrorTable { Timestamp = DateTimeOffset.UtcNow' Type = ex.GetType().Name' StackTrace = ex.StackTrace' Message = ex.Message' Source = ex.Source } }).Wait();                      }                  })                  .Select(_ => count)                  .Retry();
Magic Number,StoreTwitterTimeline,Program,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\SampleApps\StoreTwitterTimeline\Program.cs,Main,The following statement contains a magic number: sampleInsert.CombineLatest(userInsert' (sampleCount' userCount) => new { sampleCount' userCount })                      .Sample(TimeSpan.FromSeconds(10))                      .ForEachAsync(x =>                      {                          Console.WriteLine(x.ToString());                      })                      .Wait();
Magic Number,StoreTwitterTimeline,Account,C:\research\architectureSmells\repos\neuecc_LINQ-to-BigQuery\SampleApps\StoreTwitterTimeline\Account.cs,GetContext,The following statement contains a magic number: context.TimeoutMs = (long)TimeSpan.FromMinutes(5).TotalMilliseconds;
