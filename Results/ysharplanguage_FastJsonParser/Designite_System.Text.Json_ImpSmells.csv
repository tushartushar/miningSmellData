Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The method has 348 lines of code.
Long Method,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The method has 348 lines of code.
Long Method,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The method has 348 lines of code.
Long Method,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The method has 348 lines of code.
Long Method,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The method has 348 lines of code.
Long Method,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The method has 348 lines of code.
Long Method,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The method has 348 lines of code.
Long Method,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The method has 348 lines of code.
Long Method,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The method has 348 lines of code.
Long Method,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The method has 348 lines of code.
Long Method,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The method has 348 lines of code.
Long Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The method has 659 lines of code.
Long Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The method has 659 lines of code.
Long Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The method has 659 lines of code.
Long Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The method has 659 lines of code.
Long Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The method has 659 lines of code.
Long Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The method has 659 lines of code.
Long Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The method has 659 lines of code.
Long Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The method has 659 lines of code.
Long Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The method has 659 lines of code.
Long Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The method has 659 lines of code.
Long Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The method has 659 lines of code.
Long Method,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The method has 348 lines of code.
Long Method,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The method has 659 lines of code.
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetEnumInfo,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseSByte,Cyclomatic complexity of the method is 9
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseByte,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt16,Cyclomatic complexity of the method is 9
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseUInt16,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt32,Cyclomatic complexity of the method is 9
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseUInt32,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt64,Cyclomatic complexity of the method is 9
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseUInt64,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseSingle,Cyclomatic complexity of the method is 12
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseDouble,Cyclomatic complexity of the method is 12
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseDecimal,Cyclomatic complexity of the method is 9
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseString,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Num,Cyclomatic complexity of the method is 10
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Obj,Cyclomatic complexity of the method is 10
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Arr,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetEnumInfo,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseSByte,Cyclomatic complexity of the method is 9
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseByte,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt16,Cyclomatic complexity of the method is 9
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseUInt16,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt32,Cyclomatic complexity of the method is 9
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseUInt32,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt64,Cyclomatic complexity of the method is 9
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseUInt64,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseSingle,Cyclomatic complexity of the method is 12
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseDouble,Cyclomatic complexity of the method is 12
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseDecimal,Cyclomatic complexity of the method is 9
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseString,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Num,Cyclomatic complexity of the method is 10
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Obj,Cyclomatic complexity of the method is 10
Complex Method,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Arr,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,Cyclomatic complexity of the method is 9
Complex Method,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,Cyclomatic complexity of the method is 9
Complex Method,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetEnumInfo,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseSByte,Cyclomatic complexity of the method is 9
Complex Method,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseByte,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt16,Cyclomatic complexity of the method is 9
Complex Method,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseUInt16,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt32,Cyclomatic complexity of the method is 9
Complex Method,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseUInt32,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt64,Cyclomatic complexity of the method is 9
Complex Method,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseUInt64,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseSingle,Cyclomatic complexity of the method is 12
Complex Method,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseDouble,Cyclomatic complexity of the method is 12
Complex Method,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseDecimal,Cyclomatic complexity of the method is 9
Complex Method,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseString,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Num,Cyclomatic complexity of the method is 10
Complex Method,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Obj,Cyclomatic complexity of the method is 10
Complex Method,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Arr,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,Cyclomatic complexity of the method is 9
Complex Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ToLambdaExpression,Cyclomatic complexity of the method is 11
Complex Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadType,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ToLambdaExpression,Cyclomatic complexity of the method is 11
Complex Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadType,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ToLambdaExpression,Cyclomatic complexity of the method is 11
Complex Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadType,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ToLambdaExpression,Cyclomatic complexity of the method is 11
Complex Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadType,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ToLambdaExpression,Cyclomatic complexity of the method is 11
Complex Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadType,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ToLambdaExpression,Cyclomatic complexity of the method is 11
Complex Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadType,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ToLambdaExpression,Cyclomatic complexity of the method is 11
Complex Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadType,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ToLambdaExpression,Cyclomatic complexity of the method is 11
Complex Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadType,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ToLambdaExpression,Cyclomatic complexity of the method is 11
Complex Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadType,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ToLambdaExpression,Cyclomatic complexity of the method is 11
Complex Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadType,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ToLambdaExpression,Cyclomatic complexity of the method is 11
Complex Method,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadType,Cyclomatic complexity of the method is 8
Complex Method,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ToLambdaExpression,Cyclomatic complexity of the method is 11
Complex Method,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadType,Cyclomatic complexity of the method is 8
Long Parameter List,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,TypeInfo,The method has 5 parameters. Parameters: type' self' eType' kType' vType
Long Parameter List,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,TypeInfo,The method has 5 parameters. Parameters: type' self' eType' kType' vType
Long Parameter List,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Walk,The method has 7 parameters. Parameters: loc' expression' value' path' callback' lambdas' clambda
Long Parameter List,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,WalkWild,The method has 7 parameters. Parameters: member' loc' expression' value' path' lambdas' clambda
Long Parameter List,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,WalkTree,The method has 7 parameters. Parameters: member' loc' expression' value' path' lambdas' clambda
Long Parameter List,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,WalkFiltered,The method has 7 parameters. Parameters: member' loc' expression' value' path' lambdas' clambda
Long Parameter List,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Slice,The method has 5 parameters. Parameters: loc' expression' value' path' lambdas
Long Parameter List,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Walk,The method has 7 parameters. Parameters: loc' expression' value' path' callback' lambdas' clambda
Long Parameter List,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,WalkWild,The method has 7 parameters. Parameters: member' loc' expression' value' path' lambdas' clambda
Long Parameter List,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,WalkTree,The method has 7 parameters. Parameters: member' loc' expression' value' path' lambdas' clambda
Long Parameter List,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,WalkFiltered,The method has 7 parameters. Parameters: member' loc' expression' value' path' lambdas' clambda
Long Parameter List,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Slice,The method has 5 parameters. Parameters: loc' expression' value' path' lambdas
Long Parameter List,System.Text.Json,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,TypeInfo,The method has 5 parameters. Parameters: type' self' eType' kType' vType
Long Parameter List,System.Text.Json,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Walk,The method has 7 parameters. Parameters: loc' expression' value' path' callback' lambdas' clambda
Long Parameter List,System.Text.Json,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,WalkWild,The method has 7 parameters. Parameters: member' loc' expression' value' path' lambdas' clambda
Long Parameter List,System.Text.Json,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,WalkTree,The method has 7 parameters. Parameters: member' loc' expression' value' path' lambdas' clambda
Long Parameter List,System.Text.Json,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,WalkFiltered,The method has 7 parameters. Parameters: member' loc' expression' value' path' lambdas' clambda
Long Parameter List,System.Text.Json,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Slice,The method has 5 parameters. Parameters: loc' expression' value' path' lambdas
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The method has 5 parameters. Parameters: lambdaCode' defaultInstance' paramTypes' includeExecutingAssembly' namespaces
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ParseCore,The method has 7 parameters. Parameters: delegateType' lambdaCode' defaultInstanceType' firstTypeIsDefaultInstance' paramTypes' includeExecutingAssembly' namespaces
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The method has 5 parameters. Parameters: lambdaCode' defaultInstance' paramTypes' includeExecutingAssembly' namespaces
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ParseCore,The method has 7 parameters. Parameters: delegateType' lambdaCode' defaultInstanceType' firstTypeIsDefaultInstance' paramTypes' includeExecutingAssembly' namespaces
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The method has 5 parameters. Parameters: lambdaCode' defaultInstance' paramTypes' includeExecutingAssembly' namespaces
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ParseCore,The method has 7 parameters. Parameters: delegateType' lambdaCode' defaultInstanceType' firstTypeIsDefaultInstance' paramTypes' includeExecutingAssembly' namespaces
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The method has 5 parameters. Parameters: lambdaCode' defaultInstance' paramTypes' includeExecutingAssembly' namespaces
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ParseCore,The method has 7 parameters. Parameters: delegateType' lambdaCode' defaultInstanceType' firstTypeIsDefaultInstance' paramTypes' includeExecutingAssembly' namespaces
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The method has 5 parameters. Parameters: lambdaCode' defaultInstance' paramTypes' includeExecutingAssembly' namespaces
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ParseCore,The method has 7 parameters. Parameters: delegateType' lambdaCode' defaultInstanceType' firstTypeIsDefaultInstance' paramTypes' includeExecutingAssembly' namespaces
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The method has 5 parameters. Parameters: lambdaCode' defaultInstance' paramTypes' includeExecutingAssembly' namespaces
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ParseCore,The method has 7 parameters. Parameters: delegateType' lambdaCode' defaultInstanceType' firstTypeIsDefaultInstance' paramTypes' includeExecutingAssembly' namespaces
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The method has 5 parameters. Parameters: lambdaCode' defaultInstance' paramTypes' includeExecutingAssembly' namespaces
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ParseCore,The method has 7 parameters. Parameters: delegateType' lambdaCode' defaultInstanceType' firstTypeIsDefaultInstance' paramTypes' includeExecutingAssembly' namespaces
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The method has 5 parameters. Parameters: lambdaCode' defaultInstance' paramTypes' includeExecutingAssembly' namespaces
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ParseCore,The method has 7 parameters. Parameters: delegateType' lambdaCode' defaultInstanceType' firstTypeIsDefaultInstance' paramTypes' includeExecutingAssembly' namespaces
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The method has 5 parameters. Parameters: lambdaCode' defaultInstance' paramTypes' includeExecutingAssembly' namespaces
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ParseCore,The method has 7 parameters. Parameters: delegateType' lambdaCode' defaultInstanceType' firstTypeIsDefaultInstance' paramTypes' includeExecutingAssembly' namespaces
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The method has 5 parameters. Parameters: lambdaCode' defaultInstance' paramTypes' includeExecutingAssembly' namespaces
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ParseCore,The method has 7 parameters. Parameters: delegateType' lambdaCode' defaultInstanceType' firstTypeIsDefaultInstance' paramTypes' includeExecutingAssembly' namespaces
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The method has 5 parameters. Parameters: lambdaCode' defaultInstance' paramTypes' includeExecutingAssembly' namespaces
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ParseCore,The method has 7 parameters. Parameters: delegateType' lambdaCode' defaultInstanceType' firstTypeIsDefaultInstance' paramTypes' includeExecutingAssembly' namespaces
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The method has 6 parameters. Parameters: delegateType' code' includeExecutingAssembly' defaultInstanceType' paramTypes' firstTypeIsDefaultInstance
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The method has 6 parameters. Parameters: delegateType' code' includeExecutingAssembly' defaultInstanceType' paramTypes' firstTypeIsDefaultInstance
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The method has 6 parameters. Parameters: delegateType' code' includeExecutingAssembly' defaultInstanceType' paramTypes' firstTypeIsDefaultInstance
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The method has 6 parameters. Parameters: delegateType' code' includeExecutingAssembly' defaultInstanceType' paramTypes' firstTypeIsDefaultInstance
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The method has 6 parameters. Parameters: delegateType' code' includeExecutingAssembly' defaultInstanceType' paramTypes' firstTypeIsDefaultInstance
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The method has 6 parameters. Parameters: delegateType' code' includeExecutingAssembly' defaultInstanceType' paramTypes' firstTypeIsDefaultInstance
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The method has 6 parameters. Parameters: delegateType' code' includeExecutingAssembly' defaultInstanceType' paramTypes' firstTypeIsDefaultInstance
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The method has 6 parameters. Parameters: delegateType' code' includeExecutingAssembly' defaultInstanceType' paramTypes' firstTypeIsDefaultInstance
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The method has 6 parameters. Parameters: delegateType' code' includeExecutingAssembly' defaultInstanceType' paramTypes' firstTypeIsDefaultInstance
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The method has 6 parameters. Parameters: delegateType' code' includeExecutingAssembly' defaultInstanceType' paramTypes' firstTypeIsDefaultInstance
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The method has 6 parameters. Parameters: delegateType' code' includeExecutingAssembly' defaultInstanceType' paramTypes' firstTypeIsDefaultInstance
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ObjectDynamicExtension,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,E,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ObjectDynamicExtension,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,E,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ObjectDynamicExtension,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,E,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ObjectDynamicExtension,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,E,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ObjectDynamicExtension,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,E,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ObjectDynamicExtension,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,E,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ObjectDynamicExtension,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,E,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ObjectDynamicExtension,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,E,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ObjectDynamicExtension,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,E,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ObjectDynamicExtension,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,E,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ObjectDynamicExtension,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,E,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ObjectDynamicExtension,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,E,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ObjectDynamicExtension,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,E,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ObjectDynamicExtension,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,E,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ObjectDynamicExtension,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,E,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ObjectDynamicExtension,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,E,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ObjectDynamicExtension,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,E,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ObjectDynamicExtension,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,E,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ObjectDynamicExtension,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,E,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ObjectDynamicExtension,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,E,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ObjectDynamicExtension,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,E,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation,ObjectDynamicExtension,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,E,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The method has 5 parameters. Parameters: lambdaCode' defaultInstance' paramTypes' includeExecutingAssembly' namespaces
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ParseCore,The method has 7 parameters. Parameters: delegateType' lambdaCode' defaultInstanceType' firstTypeIsDefaultInstance' paramTypes' includeExecutingAssembly' namespaces
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The method has 6 parameters. Parameters: delegateType' code' includeExecutingAssembly' defaultInstanceType' paramTypes' firstTypeIsDefaultInstance
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ObjectDynamicExtension,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,E,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Parameter List,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ObjectDynamicExtension,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,E,The method has 5 parameters. Parameters: instance' code' includeExecutingAssembly' namespaces' objects
Long Statement,System.Text.Json.JsonPath,JsonPathValueSystem,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetEntry,The length of the statement  "            var propertyInfos = type.GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public); " is 120.
Long Statement,System.Text.Json.JsonPath,JsonPathValueSystem,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetEntry,The length of the statement  "            cache.Add(type' entry = new Tuple<IDictionary<string' Reflection.PropertyInfo>' string[]>(properties' properties.Keys.ToArray())); " is 130.
Long Statement,System.Text.Json.JsonPath,JsonPathValueSystem,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,HasMember,The length of the statement  "                    return ((value is IDictionary) ? ((IDictionary)value).Contains(member) : (GetProperty(value.GetType()' member) != null)); " is 121.
Long Statement,System.Text.Json.JsonPath,JsonPathValueSystem,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetMemberValue,The length of the statement  "                return ((value is IDictionary) ? ((IDictionary)value)[member] : GetProperty(value.GetType()' member).GetValue(value' null)); " is 124.
Long Statement,System.Text.Json.JsonPath,JsonPathValueSystem,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetEntry,The length of the statement  "            var propertyInfos = type.GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public); " is 120.
Long Statement,System.Text.Json.JsonPath,JsonPathValueSystem,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetEntry,The length of the statement  "            cache.Add(type' entry = new Tuple<IDictionary<string' Reflection.PropertyInfo>' string[]>(properties' properties.Keys.ToArray())); " is 130.
Long Statement,System.Text.Json.JsonPath,JsonPathValueSystem,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,HasMember,The length of the statement  "                    return ((value is IDictionary) ? ((IDictionary)value).Contains(member) : (GetProperty(value.GetType()' member) != null)); " is 121.
Long Statement,System.Text.Json.JsonPath,JsonPathValueSystem,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetMemberValue,The length of the statement  "                return ((value is IDictionary) ? ((IDictionary)value)[member] : GetProperty(value.GetType()' member).GetValue(value' null)); " is 124.
Long Statement,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Error,The length of the statement  "{ return new Exception(System.String.Format("{0} at {1} (found: '{2}')"' message' at' ((chr < EOF) ? ("\\" + chr) : "EOF"))); }" is 127.
Long Statement,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseSingle,The length of the statement  "            if ((ch == 'e') || (ch == 'E')) { ch = Char(ch); if ((ch == '-') || (ch == '+')) ch = Char(ch); while ((ch >= '0') && (ch <= '9')) ch = Char(ch); } " is 147.
Long Statement,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseDouble,The length of the statement  "            if ((ch == 'e') || (ch == 'E')) { ch = Char(ch); if ((ch == '-') || (ch == '+')) ch = Char(ch); while ((ch >= '0') && (ch <= '9')) ch = Char(ch); } " is 147.
Long Statement,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseDateTime,The length of the statement  "            if (!DateTime.TryParse(ParseString(0)' System.Globalization.CultureInfo.CurrentCulture' System.Globalization.DateTimeStyles.RoundtripKind' out dateTime)) " is 153.
Long Statement,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseDateTimeOffset,The length of the statement  "            if (!DateTimeOffset.TryParse(ParseString(0)' System.Globalization.CultureInfo.CurrentCulture' System.Globalization.DateTimeStyles.RoundtripKind' out dateTimeOffset)) " is 165.
Long Statement,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Num,The length of the statement  "            if ((ch == 'e') || (ch == 'E')) { ch = Char(ch); if ((ch == '-') || (ch == '+')) ch = Char(ch); while ((ch >= '0') && (ch <= '9')) ch = Char(ch); } " is 147.
Long Statement,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Parse,The length of the statement  "                return (types[typed].Type.IsValueType ? (types[typed].IsNullable ? types[types[typed].Inner].Parse(this' types[typed].Inner) : types[typed].Parse(this' typed)) : Val(typed)); " is 174.
Long Statement,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Obj,The length of the statement  "            var cached = types[outer]; var isAnon = cached.IsAnonymous; var hash = types[cached.Key]; var select = cached.Select; var props = cached.Props; var ctor = cached.Ctor; " is 167.
Long Statement,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Arr,The length of the statement  "                    items.Set(obj' this' (types[val].IsNullable ? types[val].Inner : val)' (types[key].IsNullable ? types[key].Inner : key)); " is 121.
Long Statement,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Entry,The length of the statement  "                types[outer] = (TypeInfo)Activator.CreateInstance(typeof(TypeInfo<>).MakeGenericType(type)' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic' null' new object[] { outer' et' kt' vt }' null); " is 224.
Long Statement,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Entry,The length of the statement  "                types[outer].Inner = ((et != null) ? Entry(et' filter) : (dico ? Entry(vt' filter) : (types[outer].IsNullable ? Entry(types[outer].VType' filter) : 0))); " is 153.
Long Statement,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Error,The length of the statement  "{ return new Exception(System.String.Format("{0} at {1} (found: '{2}')"' message' at' ((chr < EOF) ? ("\\" + chr) : "EOF"))); }" is 127.
Long Statement,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseSingle,The length of the statement  "            if ((ch == 'e') || (ch == 'E')) { ch = Char(ch); if ((ch == '-') || (ch == '+')) ch = Char(ch); while ((ch >= '0') && (ch <= '9')) ch = Char(ch); } " is 147.
Long Statement,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseDouble,The length of the statement  "            if ((ch == 'e') || (ch == 'E')) { ch = Char(ch); if ((ch == '-') || (ch == '+')) ch = Char(ch); while ((ch >= '0') && (ch <= '9')) ch = Char(ch); } " is 147.
Long Statement,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseDateTime,The length of the statement  "            if (!DateTime.TryParse(ParseString(0)' System.Globalization.CultureInfo.CurrentCulture' System.Globalization.DateTimeStyles.RoundtripKind' out dateTime)) " is 153.
Long Statement,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseDateTimeOffset,The length of the statement  "            if (!DateTimeOffset.TryParse(ParseString(0)' System.Globalization.CultureInfo.CurrentCulture' System.Globalization.DateTimeStyles.RoundtripKind' out dateTimeOffset)) " is 165.
Long Statement,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Num,The length of the statement  "            if ((ch == 'e') || (ch == 'E')) { ch = Char(ch); if ((ch == '-') || (ch == '+')) ch = Char(ch); while ((ch >= '0') && (ch <= '9')) ch = Char(ch); } " is 147.
Long Statement,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Parse,The length of the statement  "                return (types[typed].Type.IsValueType ? (types[typed].IsNullable ? types[types[typed].Inner].Parse(this' types[typed].Inner) : types[typed].Parse(this' typed)) : Val(typed)); " is 174.
Long Statement,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Obj,The length of the statement  "            var cached = types[outer]; var isAnon = cached.IsAnonymous; var hash = types[cached.Key]; var select = cached.Select; var props = cached.Props; var ctor = cached.Ctor; " is 167.
Long Statement,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Arr,The length of the statement  "                    items.Set(obj' this' (types[val].IsNullable ? types[val].Inner : val)' (types[key].IsNullable ? types[key].Inner : key)); " is 121.
Long Statement,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Entry,The length of the statement  "                types[outer] = (TypeInfo)Activator.CreateInstance(typeof(TypeInfo<>).MakeGenericType(type)' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic' null' new object[] { outer' et' kt' vt }' null); " is 224.
Long Statement,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Entry,The length of the statement  "                types[outer].Inner = ((et != null) ? Entry(et' filter) : (dico ? Entry(vt' filter) : (types[outer].IsNullable ? Entry(types[outer].VType' filter) : 0))); " is 153.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetCtor,The length of the statement  "                var type = (!list ? ((clr == typeof(object)) ? typeof(Dictionary<string' object>) : clr) : typeof(List<>).MakeGenericType(clr)); " is 128.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetCtor,The length of the statement  "                var ctor = type.GetConstructor(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.CreateInstance' null' System.Type.EmptyTypes' null); " is 196.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetCtor,The length of the statement  "                var ctor = (((type != clr) && clr.IsClass) ? clr : type).GetConstructor(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.CreateInstance' null' System.Type.EmptyTypes' null); " is 237.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetEnumInfos,The length of the statement  "                var actual = (type.IsGenericType && (type.GetGenericTypeDefinition() == typeof(Nullable<>)) ? type.GetGenericArguments()[0] : type); " is 132.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetEnumInfos,The length of the statement  "                var einfo = System.Enum.GetNames(actual).ToDictionary(name => name' name => new EnumInfo {Name = name' Value = System.Enum.Parse(actual' name)' Len = name.Length}); " is 164.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                var method = new System.Reflection.Emit.DynamicMethod("Set" + name' null' new[] { typeof(object)' typeof(JsonParser)' typeof(int)' typeof(int) }' typeof(string)' true); " is 168.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                var nType = (type.IsGenericType && (type.GetGenericTypeDefinition() == typeof(Nullable<>)) ? new[] { type.GetGenericArguments()[0] } : null); " is 141.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                return new ItemInfo { Type = type' Name = name' Set = (Action<object' JsonParser' int' int>)method.CreateDelegate(typeof(Action<object' JsonParser' int' int>))' Len = name.Length }; " is 181.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                var method = new System.Reflection.Emit.DynamicMethod("Add"' null' new[] { typeof(object)' typeof(JsonParser)' typeof(int)' typeof(int) }' typeof(string)' true); " is 161.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                var sBrace = typeof(JsonParser).GetMethod("SBrace"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic); " is 136.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                var eBrace = typeof(JsonParser).GetMethod("EBrace"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic); " is 136.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                var kColon = typeof(JsonParser).GetMethod("KColon"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic); " is 136.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                var sComma = typeof(JsonParser).GetMethod("SComma"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic); " is 136.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                var vnType = (value.IsGenericType && (value.GetGenericTypeDefinition() == typeof(Nullable<>)) ? new[] { value.GetGenericArguments()[0] } : null); " is 145.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                var knType = (key.IsGenericType && (key.GetGenericTypeDefinition() == typeof(Nullable<>)) ? new[] { key.GetGenericArguments()[0] } : null); " is 139.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                return new ItemInfo { Type = type' Name = String.Empty' Set = (Action<object' JsonParser' int' int>)method.CreateDelegate(typeof(Action<object' JsonParser' int' int>)) }; " is 170.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetEnumUnderlyingType,The length of the statement  "                return enumType.GetFields(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)[0].FieldType; " is 163.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetParseName,The length of the statement  "                var actual = (type.IsGenericType && (type.GetGenericTypeDefinition() == typeof(Nullable<>)) ? type.GetGenericArguments()[0] : type); " is 132.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetParseName,The length of the statement  "                var name = (!WellKnown.Contains(actual) ? ((actual.IsEnum && WellKnown.Contains(GetEnumUnderlyingType(actual))) ? GetEnumUnderlyingType(actual).Name : null) : actual.Name); " is 172.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetParserParse,The length of the statement  "                return typeof(JsonParser).GetMethod((pName ?? "Val")' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic); " is 138.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetCtor,The length of the statement  "                var type = (!list ? ((clr == typeof(object)) ? typeof(Dictionary<string' object>) : clr) : typeof(List<>).MakeGenericType(clr)); " is 128.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetCtor,The length of the statement  "                var ctor = type.GetConstructor(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.CreateInstance' null' System.Type.EmptyTypes' null); " is 196.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetCtor,The length of the statement  "                var ctor = (((type != clr) && clr.IsClass) ? clr : type).GetConstructor(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.CreateInstance' null' System.Type.EmptyTypes' null); " is 237.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetEnumInfos,The length of the statement  "                var actual = (type.IsGenericType && (type.GetGenericTypeDefinition() == typeof(Nullable<>)) ? type.GetGenericArguments()[0] : type); " is 132.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetEnumInfos,The length of the statement  "                var einfo = System.Enum.GetNames(actual).ToDictionary(name => name' name => new EnumInfo {Name = name' Value = System.Enum.Parse(actual' name)' Len = name.Length}); " is 164.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                var method = new System.Reflection.Emit.DynamicMethod("Set" + name' null' new[] { typeof(object)' typeof(JsonParser)' typeof(int)' typeof(int) }' typeof(string)' true); " is 168.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                var nType = (type.IsGenericType && (type.GetGenericTypeDefinition() == typeof(Nullable<>)) ? new[] { type.GetGenericArguments()[0] } : null); " is 141.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                return new ItemInfo { Type = type' Name = name' Set = (Action<object' JsonParser' int' int>)method.CreateDelegate(typeof(Action<object' JsonParser' int' int>))' Len = name.Length }; " is 181.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                var method = new System.Reflection.Emit.DynamicMethod("Add"' null' new[] { typeof(object)' typeof(JsonParser)' typeof(int)' typeof(int) }' typeof(string)' true); " is 161.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                var sBrace = typeof(JsonParser).GetMethod("SBrace"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic); " is 136.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                var eBrace = typeof(JsonParser).GetMethod("EBrace"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic); " is 136.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                var kColon = typeof(JsonParser).GetMethod("KColon"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic); " is 136.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                var sComma = typeof(JsonParser).GetMethod("SComma"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic); " is 136.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                var vnType = (value.IsGenericType && (value.GetGenericTypeDefinition() == typeof(Nullable<>)) ? new[] { value.GetGenericArguments()[0] } : null); " is 145.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                var knType = (key.IsGenericType && (key.GetGenericTypeDefinition() == typeof(Nullable<>)) ? new[] { key.GetGenericArguments()[0] } : null); " is 139.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                return new ItemInfo { Type = type' Name = String.Empty' Set = (Action<object' JsonParser' int' int>)method.CreateDelegate(typeof(Action<object' JsonParser' int' int>)) }; " is 170.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetEnumUnderlyingType,The length of the statement  "                return enumType.GetFields(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)[0].FieldType; " is 163.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetParseName,The length of the statement  "                var actual = (type.IsGenericType && (type.GetGenericTypeDefinition() == typeof(Nullable<>)) ? type.GetGenericArguments()[0] : type); " is 132.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetParseName,The length of the statement  "                var name = (!WellKnown.Contains(actual) ? ((actual.IsEnum && WellKnown.Contains(GetEnumUnderlyingType(actual))) ? GetEnumUnderlyingType(actual).Name : null) : actual.Name); " is 172.
Long Statement,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetParserParse,The length of the statement  "                return typeof(JsonParser).GetMethod((pName ?? "Val")' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic); " is 138.
Long Statement,System.Text.Json.JsonPath,TypeInfo<T>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetParseFunc,The length of the statement  "                    var method = new System.Reflection.Emit.DynamicMethod(parse.Name' typeof(R)' new[] { typeof(JsonParser)' typeof(int) }' typeof(string)' true); " is 142.
Long Statement,System.Text.Json.JsonPath,TypeInfo<T>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetParseFunc,The length of the statement  "                    var method = new System.Reflection.Emit.DynamicMethod(parse.Name' typeof(R)' new[] { typeof(JsonParser)' typeof(int) }' typeof(string)' true); " is 142.
Long Statement,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Trace,The length of the statement  "                    Walk(atom' tail' value' path' WalkFiltered' lambdas' int.Parse(atom.Substring(2' atom.Length - 3)' CultureInfo.InvariantCulture)); " is 130.
Long Statement,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,WalkFiltered,The length of the statement  "                object result = ((clambda < 0) ? Eval(script' value' member.ToString()' true) : lambdas[clambda].DynamicInvoke(script' value' Bindings)); " is 137.
Long Statement,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Eval,The length of the statement  "                    string lambda = String.Format("(string script' ~ value' IJsonPathContext context) => (object)({0})"' script.Replace("@"' "value")); " is 131.
Long Statement,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Eval,The length of the statement  "                    type = typeof(Func<'''>).MakeGenericType(typeof(string)' (forFilter ? type : (target is IEnumerable ? type : typeof(object)))' typeof(IJsonPathContext)' typeof(object)); " is 169.
Long Statement,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Trace,The length of the statement  "                    Walk(atom' tail' value' path' WalkFiltered' lambdas' int.Parse(atom.Substring(2' atom.Length - 3)' CultureInfo.InvariantCulture)); " is 130.
Long Statement,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,WalkFiltered,The length of the statement  "                object result = ((clambda < 0) ? Eval(script' value' member.ToString()' true) : lambdas[clambda].DynamicInvoke(script' value' Bindings)); " is 137.
Long Statement,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Eval,The length of the statement  "                    string lambda = String.Format("(string script' ~ value' IJsonPathContext context) => (object)({0})"' script.Replace("@"' "value")); " is 131.
Long Statement,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Eval,The length of the statement  "                    type = typeof(Func<'''>).MakeGenericType(typeof(string)' (forFilter ? type : (target is IEnumerable ? type : typeof(object)))' typeof(IJsonPathContext)' typeof(object)); " is 169.
Long Statement,System.Text.Json,JsonPathValueSystem,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetEntry,The length of the statement  "            var propertyInfos = type.GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public); " is 120.
Long Statement,System.Text.Json,JsonPathValueSystem,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetEntry,The length of the statement  "            cache.Add(type' entry = new Tuple<IDictionary<string' Reflection.PropertyInfo>' string[]>(properties' properties.Keys.ToArray())); " is 130.
Long Statement,System.Text.Json,JsonPathValueSystem,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,HasMember,The length of the statement  "                    return ((value is IDictionary) ? ((IDictionary)value).Contains(member) : (GetProperty(value.GetType()' member) != null)); " is 121.
Long Statement,System.Text.Json,JsonPathValueSystem,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetMemberValue,The length of the statement  "                return ((value is IDictionary) ? ((IDictionary)value)[member] : GetProperty(value.GetType()' member).GetValue(value' null)); " is 124.
Long Statement,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Error,The length of the statement  "{ return new Exception(System.String.Format("{0} at {1} (found: '{2}')"' message' at' ((chr < EOF) ? ("\\" + chr) : "EOF"))); }" is 127.
Long Statement,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseSingle,The length of the statement  "            if ((ch == 'e') || (ch == 'E')) { ch = Char(ch); if ((ch == '-') || (ch == '+')) ch = Char(ch); while ((ch >= '0') && (ch <= '9')) ch = Char(ch); } " is 147.
Long Statement,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseDouble,The length of the statement  "            if ((ch == 'e') || (ch == 'E')) { ch = Char(ch); if ((ch == '-') || (ch == '+')) ch = Char(ch); while ((ch >= '0') && (ch <= '9')) ch = Char(ch); } " is 147.
Long Statement,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseDateTime,The length of the statement  "            if (!DateTime.TryParse(ParseString(0)' System.Globalization.CultureInfo.CurrentCulture' System.Globalization.DateTimeStyles.RoundtripKind' out dateTime)) " is 153.
Long Statement,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseDateTimeOffset,The length of the statement  "            if (!DateTimeOffset.TryParse(ParseString(0)' System.Globalization.CultureInfo.CurrentCulture' System.Globalization.DateTimeStyles.RoundtripKind' out dateTimeOffset)) " is 165.
Long Statement,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Num,The length of the statement  "            if ((ch == 'e') || (ch == 'E')) { ch = Char(ch); if ((ch == '-') || (ch == '+')) ch = Char(ch); while ((ch >= '0') && (ch <= '9')) ch = Char(ch); } " is 147.
Long Statement,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Parse,The length of the statement  "                return (types[typed].Type.IsValueType ? (types[typed].IsNullable ? types[types[typed].Inner].Parse(this' types[typed].Inner) : types[typed].Parse(this' typed)) : Val(typed)); " is 174.
Long Statement,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Obj,The length of the statement  "            var cached = types[outer]; var isAnon = cached.IsAnonymous; var hash = types[cached.Key]; var select = cached.Select; var props = cached.Props; var ctor = cached.Ctor; " is 167.
Long Statement,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Arr,The length of the statement  "                    items.Set(obj' this' (types[val].IsNullable ? types[val].Inner : val)' (types[key].IsNullable ? types[key].Inner : key)); " is 121.
Long Statement,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Entry,The length of the statement  "                types[outer] = (TypeInfo)Activator.CreateInstance(typeof(TypeInfo<>).MakeGenericType(type)' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic' null' new object[] { outer' et' kt' vt }' null); " is 224.
Long Statement,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Entry,The length of the statement  "                types[outer].Inner = ((et != null) ? Entry(et' filter) : (dico ? Entry(vt' filter) : (types[outer].IsNullable ? Entry(types[outer].VType' filter) : 0))); " is 153.
Long Statement,System.Text.Json,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetCtor,The length of the statement  "                var type = (!list ? ((clr == typeof(object)) ? typeof(Dictionary<string' object>) : clr) : typeof(List<>).MakeGenericType(clr)); " is 128.
Long Statement,System.Text.Json,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetCtor,The length of the statement  "                var ctor = type.GetConstructor(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.CreateInstance' null' System.Type.EmptyTypes' null); " is 196.
Long Statement,System.Text.Json,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetCtor,The length of the statement  "                var ctor = (((type != clr) && clr.IsClass) ? clr : type).GetConstructor(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.CreateInstance' null' System.Type.EmptyTypes' null); " is 237.
Long Statement,System.Text.Json,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetEnumInfos,The length of the statement  "                var actual = (type.IsGenericType && (type.GetGenericTypeDefinition() == typeof(Nullable<>)) ? type.GetGenericArguments()[0] : type); " is 132.
Long Statement,System.Text.Json,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetEnumInfos,The length of the statement  "                var einfo = System.Enum.GetNames(actual).ToDictionary(name => name' name => new EnumInfo {Name = name' Value = System.Enum.Parse(actual' name)' Len = name.Length}); " is 164.
Long Statement,System.Text.Json,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                var method = new System.Reflection.Emit.DynamicMethod("Set" + name' null' new[] { typeof(object)' typeof(JsonParser)' typeof(int)' typeof(int) }' typeof(string)' true); " is 168.
Long Statement,System.Text.Json,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                var nType = (type.IsGenericType && (type.GetGenericTypeDefinition() == typeof(Nullable<>)) ? new[] { type.GetGenericArguments()[0] } : null); " is 141.
Long Statement,System.Text.Json,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                return new ItemInfo { Type = type' Name = name' Set = (Action<object' JsonParser' int' int>)method.CreateDelegate(typeof(Action<object' JsonParser' int' int>))' Len = name.Length }; " is 181.
Long Statement,System.Text.Json,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                var method = new System.Reflection.Emit.DynamicMethod("Add"' null' new[] { typeof(object)' typeof(JsonParser)' typeof(int)' typeof(int) }' typeof(string)' true); " is 161.
Long Statement,System.Text.Json,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                var sBrace = typeof(JsonParser).GetMethod("SBrace"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic); " is 136.
Long Statement,System.Text.Json,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                var eBrace = typeof(JsonParser).GetMethod("EBrace"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic); " is 136.
Long Statement,System.Text.Json,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                var kColon = typeof(JsonParser).GetMethod("KColon"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic); " is 136.
Long Statement,System.Text.Json,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                var sComma = typeof(JsonParser).GetMethod("SComma"' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic); " is 136.
Long Statement,System.Text.Json,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                var vnType = (value.IsGenericType && (value.GetGenericTypeDefinition() == typeof(Nullable<>)) ? new[] { value.GetGenericArguments()[0] } : null); " is 145.
Long Statement,System.Text.Json,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                var knType = (key.IsGenericType && (key.GetGenericTypeDefinition() == typeof(Nullable<>)) ? new[] { key.GetGenericArguments()[0] } : null); " is 139.
Long Statement,System.Text.Json,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetItemInfo,The length of the statement  "                return new ItemInfo { Type = type' Name = String.Empty' Set = (Action<object' JsonParser' int' int>)method.CreateDelegate(typeof(Action<object' JsonParser' int' int>)) }; " is 170.
Long Statement,System.Text.Json,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetEnumUnderlyingType,The length of the statement  "                return enumType.GetFields(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)[0].FieldType; " is 163.
Long Statement,System.Text.Json,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetParseName,The length of the statement  "                var actual = (type.IsGenericType && (type.GetGenericTypeDefinition() == typeof(Nullable<>)) ? type.GetGenericArguments()[0] : type); " is 132.
Long Statement,System.Text.Json,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetParseName,The length of the statement  "                var name = (!WellKnown.Contains(actual) ? ((actual.IsEnum && WellKnown.Contains(GetEnumUnderlyingType(actual))) ? GetEnumUnderlyingType(actual).Name : null) : actual.Name); " is 172.
Long Statement,System.Text.Json,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetParserParse,The length of the statement  "                return typeof(JsonParser).GetMethod((pName ?? "Val")' System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic); " is 138.
Long Statement,System.Text.Json,TypeInfo<T>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetParseFunc,The length of the statement  "                    var method = new System.Reflection.Emit.DynamicMethod(parse.Name' typeof(R)' new[] { typeof(JsonParser)' typeof(int) }' typeof(string)' true); " is 142.
Long Statement,System.Text.Json,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Trace,The length of the statement  "                    Walk(atom' tail' value' path' WalkFiltered' lambdas' int.Parse(atom.Substring(2' atom.Length - 3)' CultureInfo.InvariantCulture)); " is 130.
Long Statement,System.Text.Json,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,WalkFiltered,The length of the statement  "                object result = ((clambda < 0) ? Eval(script' value' member.ToString()' true) : lambdas[clambda].DynamicInvoke(script' value' Bindings)); " is 137.
Long Statement,System.Text.Json,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Eval,The length of the statement  "                    string lambda = String.Format("(string script' ~ value' IJsonPathContext context) => (object)({0})"' script.Replace("@"' "value")); " is 131.
Long Statement,System.Text.Json,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Eval,The length of the statement  "                    type = typeof(Func<'''>).MakeGenericType(typeof(string)' (forFilter ? type : (target is IEnumerable ? type : typeof(object)))' typeof(IJsonPathContext)' typeof(object)); " is 169.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The length of the statement  "                                if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x') " is 165.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The length of the statement  "                                if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x') " is 165.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The length of the statement  "                                if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x') " is 165.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The length of the statement  "                                if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x') " is 165.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The length of the statement  "                                if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x') " is 165.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The length of the statement  "                                if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x') " is 165.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The length of the statement  "                                if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x') " is 165.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The length of the statement  "                                if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x') " is 165.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The length of the statement  "                                if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x') " is 165.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The length of the statement  "                                if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x') " is 165.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The length of the statement  "                                if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x') " is 165.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(null' lambdaCode' defaultInstance' false' null' includeExecutingAssembly' namespaces); " is 130.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(null' lambdaCode' defaultInstance' false' paramTypes' includeExecutingAssembly' namespaces); " is 136.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(delegateType' lambdaCode' null' false' null' includeExecutingAssembly' namespaces); " is 127.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return (Expression<TDelegate>)ExpressionParser.ParseCore<TDelegate>(null' lambdaCode' null' false' null' includeExecutingAssembly' namespaces); " is 143.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The length of the statement  "            return (T)((object)ExpressionParser.Parse(lambdaCode' instance.GetType()' paramTypes' includeExecutingAssembly' namespaces).Compile().DynamicInvoke(array2)); " is 157.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ParseCore,The length of the statement  "            ExpressionParserCore<TDelegate> expressionParserCore = new ExpressionParserCore<TDelegate>(delegateType' lambdaCode' includeExecutingAssembly' defaultInstanceType' paramTypes' firstTypeIsDefaultInstance); " is 204.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(null' lambdaCode' defaultInstance' false' null' includeExecutingAssembly' namespaces); " is 130.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(null' lambdaCode' defaultInstance' false' paramTypes' includeExecutingAssembly' namespaces); " is 136.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(delegateType' lambdaCode' null' false' null' includeExecutingAssembly' namespaces); " is 127.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return (Expression<TDelegate>)ExpressionParser.ParseCore<TDelegate>(null' lambdaCode' null' false' null' includeExecutingAssembly' namespaces); " is 143.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The length of the statement  "            return (T)((object)ExpressionParser.Parse(lambdaCode' instance.GetType()' paramTypes' includeExecutingAssembly' namespaces).Compile().DynamicInvoke(array2)); " is 157.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ParseCore,The length of the statement  "            ExpressionParserCore<TDelegate> expressionParserCore = new ExpressionParserCore<TDelegate>(delegateType' lambdaCode' includeExecutingAssembly' defaultInstanceType' paramTypes' firstTypeIsDefaultInstance); " is 204.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(null' lambdaCode' defaultInstance' false' null' includeExecutingAssembly' namespaces); " is 130.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(null' lambdaCode' defaultInstance' false' paramTypes' includeExecutingAssembly' namespaces); " is 136.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(delegateType' lambdaCode' null' false' null' includeExecutingAssembly' namespaces); " is 127.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return (Expression<TDelegate>)ExpressionParser.ParseCore<TDelegate>(null' lambdaCode' null' false' null' includeExecutingAssembly' namespaces); " is 143.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The length of the statement  "            return (T)((object)ExpressionParser.Parse(lambdaCode' instance.GetType()' paramTypes' includeExecutingAssembly' namespaces).Compile().DynamicInvoke(array2)); " is 157.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ParseCore,The length of the statement  "            ExpressionParserCore<TDelegate> expressionParserCore = new ExpressionParserCore<TDelegate>(delegateType' lambdaCode' includeExecutingAssembly' defaultInstanceType' paramTypes' firstTypeIsDefaultInstance); " is 204.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(null' lambdaCode' defaultInstance' false' null' includeExecutingAssembly' namespaces); " is 130.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(null' lambdaCode' defaultInstance' false' paramTypes' includeExecutingAssembly' namespaces); " is 136.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(delegateType' lambdaCode' null' false' null' includeExecutingAssembly' namespaces); " is 127.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return (Expression<TDelegate>)ExpressionParser.ParseCore<TDelegate>(null' lambdaCode' null' false' null' includeExecutingAssembly' namespaces); " is 143.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The length of the statement  "            return (T)((object)ExpressionParser.Parse(lambdaCode' instance.GetType()' paramTypes' includeExecutingAssembly' namespaces).Compile().DynamicInvoke(array2)); " is 157.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ParseCore,The length of the statement  "            ExpressionParserCore<TDelegate> expressionParserCore = new ExpressionParserCore<TDelegate>(delegateType' lambdaCode' includeExecutingAssembly' defaultInstanceType' paramTypes' firstTypeIsDefaultInstance); " is 204.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(null' lambdaCode' defaultInstance' false' null' includeExecutingAssembly' namespaces); " is 130.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(null' lambdaCode' defaultInstance' false' paramTypes' includeExecutingAssembly' namespaces); " is 136.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(delegateType' lambdaCode' null' false' null' includeExecutingAssembly' namespaces); " is 127.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return (Expression<TDelegate>)ExpressionParser.ParseCore<TDelegate>(null' lambdaCode' null' false' null' includeExecutingAssembly' namespaces); " is 143.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The length of the statement  "            return (T)((object)ExpressionParser.Parse(lambdaCode' instance.GetType()' paramTypes' includeExecutingAssembly' namespaces).Compile().DynamicInvoke(array2)); " is 157.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ParseCore,The length of the statement  "            ExpressionParserCore<TDelegate> expressionParserCore = new ExpressionParserCore<TDelegate>(delegateType' lambdaCode' includeExecutingAssembly' defaultInstanceType' paramTypes' firstTypeIsDefaultInstance); " is 204.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(null' lambdaCode' defaultInstance' false' null' includeExecutingAssembly' namespaces); " is 130.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(null' lambdaCode' defaultInstance' false' paramTypes' includeExecutingAssembly' namespaces); " is 136.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(delegateType' lambdaCode' null' false' null' includeExecutingAssembly' namespaces); " is 127.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return (Expression<TDelegate>)ExpressionParser.ParseCore<TDelegate>(null' lambdaCode' null' false' null' includeExecutingAssembly' namespaces); " is 143.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The length of the statement  "            return (T)((object)ExpressionParser.Parse(lambdaCode' instance.GetType()' paramTypes' includeExecutingAssembly' namespaces).Compile().DynamicInvoke(array2)); " is 157.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ParseCore,The length of the statement  "            ExpressionParserCore<TDelegate> expressionParserCore = new ExpressionParserCore<TDelegate>(delegateType' lambdaCode' includeExecutingAssembly' defaultInstanceType' paramTypes' firstTypeIsDefaultInstance); " is 204.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(null' lambdaCode' defaultInstance' false' null' includeExecutingAssembly' namespaces); " is 130.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(null' lambdaCode' defaultInstance' false' paramTypes' includeExecutingAssembly' namespaces); " is 136.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(delegateType' lambdaCode' null' false' null' includeExecutingAssembly' namespaces); " is 127.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return (Expression<TDelegate>)ExpressionParser.ParseCore<TDelegate>(null' lambdaCode' null' false' null' includeExecutingAssembly' namespaces); " is 143.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The length of the statement  "            return (T)((object)ExpressionParser.Parse(lambdaCode' instance.GetType()' paramTypes' includeExecutingAssembly' namespaces).Compile().DynamicInvoke(array2)); " is 157.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ParseCore,The length of the statement  "            ExpressionParserCore<TDelegate> expressionParserCore = new ExpressionParserCore<TDelegate>(delegateType' lambdaCode' includeExecutingAssembly' defaultInstanceType' paramTypes' firstTypeIsDefaultInstance); " is 204.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(null' lambdaCode' defaultInstance' false' null' includeExecutingAssembly' namespaces); " is 130.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(null' lambdaCode' defaultInstance' false' paramTypes' includeExecutingAssembly' namespaces); " is 136.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(delegateType' lambdaCode' null' false' null' includeExecutingAssembly' namespaces); " is 127.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return (Expression<TDelegate>)ExpressionParser.ParseCore<TDelegate>(null' lambdaCode' null' false' null' includeExecutingAssembly' namespaces); " is 143.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The length of the statement  "            return (T)((object)ExpressionParser.Parse(lambdaCode' instance.GetType()' paramTypes' includeExecutingAssembly' namespaces).Compile().DynamicInvoke(array2)); " is 157.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ParseCore,The length of the statement  "            ExpressionParserCore<TDelegate> expressionParserCore = new ExpressionParserCore<TDelegate>(delegateType' lambdaCode' includeExecutingAssembly' defaultInstanceType' paramTypes' firstTypeIsDefaultInstance); " is 204.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(null' lambdaCode' defaultInstance' false' null' includeExecutingAssembly' namespaces); " is 130.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(null' lambdaCode' defaultInstance' false' paramTypes' includeExecutingAssembly' namespaces); " is 136.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(delegateType' lambdaCode' null' false' null' includeExecutingAssembly' namespaces); " is 127.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return (Expression<TDelegate>)ExpressionParser.ParseCore<TDelegate>(null' lambdaCode' null' false' null' includeExecutingAssembly' namespaces); " is 143.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The length of the statement  "            return (T)((object)ExpressionParser.Parse(lambdaCode' instance.GetType()' paramTypes' includeExecutingAssembly' namespaces).Compile().DynamicInvoke(array2)); " is 157.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ParseCore,The length of the statement  "            ExpressionParserCore<TDelegate> expressionParserCore = new ExpressionParserCore<TDelegate>(delegateType' lambdaCode' includeExecutingAssembly' defaultInstanceType' paramTypes' firstTypeIsDefaultInstance); " is 204.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(null' lambdaCode' defaultInstance' false' null' includeExecutingAssembly' namespaces); " is 130.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(null' lambdaCode' defaultInstance' false' paramTypes' includeExecutingAssembly' namespaces); " is 136.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(delegateType' lambdaCode' null' false' null' includeExecutingAssembly' namespaces); " is 127.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return (Expression<TDelegate>)ExpressionParser.ParseCore<TDelegate>(null' lambdaCode' null' false' null' includeExecutingAssembly' namespaces); " is 143.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The length of the statement  "            return (T)((object)ExpressionParser.Parse(lambdaCode' instance.GetType()' paramTypes' includeExecutingAssembly' namespaces).Compile().DynamicInvoke(array2)); " is 157.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ParseCore,The length of the statement  "            ExpressionParserCore<TDelegate> expressionParserCore = new ExpressionParserCore<TDelegate>(delegateType' lambdaCode' includeExecutingAssembly' defaultInstanceType' paramTypes' firstTypeIsDefaultInstance); " is 204.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(null' lambdaCode' defaultInstance' false' null' includeExecutingAssembly' namespaces); " is 130.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(null' lambdaCode' defaultInstance' false' paramTypes' includeExecutingAssembly' namespaces); " is 136.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(delegateType' lambdaCode' null' false' null' includeExecutingAssembly' namespaces); " is 127.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return (Expression<TDelegate>)ExpressionParser.ParseCore<TDelegate>(null' lambdaCode' null' false' null' includeExecutingAssembly' namespaces); " is 143.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The length of the statement  "            return (T)((object)ExpressionParser.Parse(lambdaCode' instance.GetType()' paramTypes' includeExecutingAssembly' namespaces).Compile().DynamicInvoke(array2)); " is 157.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ParseCore,The length of the statement  "            ExpressionParserCore<TDelegate> expressionParserCore = new ExpressionParserCore<TDelegate>(delegateType' lambdaCode' includeExecutingAssembly' defaultInstanceType' paramTypes' firstTypeIsDefaultInstance); " is 204.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ToLambdaExpression,The length of the statement  "                    this._params.Add(Expression.Parameter(this._paramTypes != null ? this._paramTypes[0 + paramIndexPrefix] : typeof(object)' val)); " is 128.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                currentExpression = Expression.Convert(ReadExpression(GetOperatorLevel("convert()"' true)' wrapStart' out isClosedWrap)' type); " is 127.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                                MethodInfo methodInfo = type.GetMethod(strMember' BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic' null' " is 123.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                                PropertyInfo propertyInfo = type.GetProperty(strMember' BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic); " is 124.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextPriorityLevel,The length of the statement  "            if (string.IsNullOrEmpty(nextString) || nextString == ";" || nextString == "}" || nextString == "'" || nextString == ":") " is 121.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ToLambdaExpression,The length of the statement  "                    this._params.Add(Expression.Parameter(this._paramTypes != null ? this._paramTypes[0 + paramIndexPrefix] : typeof(object)' val)); " is 128.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                currentExpression = Expression.Convert(ReadExpression(GetOperatorLevel("convert()"' true)' wrapStart' out isClosedWrap)' type); " is 127.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                                MethodInfo methodInfo = type.GetMethod(strMember' BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic' null' " is 123.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                                PropertyInfo propertyInfo = type.GetProperty(strMember' BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic); " is 124.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextPriorityLevel,The length of the statement  "            if (string.IsNullOrEmpty(nextString) || nextString == ";" || nextString == "}" || nextString == "'" || nextString == ":") " is 121.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ToLambdaExpression,The length of the statement  "                    this._params.Add(Expression.Parameter(this._paramTypes != null ? this._paramTypes[0 + paramIndexPrefix] : typeof(object)' val)); " is 128.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                currentExpression = Expression.Convert(ReadExpression(GetOperatorLevel("convert()"' true)' wrapStart' out isClosedWrap)' type); " is 127.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                                MethodInfo methodInfo = type.GetMethod(strMember' BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic' null' " is 123.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                                PropertyInfo propertyInfo = type.GetProperty(strMember' BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic); " is 124.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextPriorityLevel,The length of the statement  "            if (string.IsNullOrEmpty(nextString) || nextString == ";" || nextString == "}" || nextString == "'" || nextString == ":") " is 121.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ToLambdaExpression,The length of the statement  "                    this._params.Add(Expression.Parameter(this._paramTypes != null ? this._paramTypes[0 + paramIndexPrefix] : typeof(object)' val)); " is 128.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                currentExpression = Expression.Convert(ReadExpression(GetOperatorLevel("convert()"' true)' wrapStart' out isClosedWrap)' type); " is 127.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                                MethodInfo methodInfo = type.GetMethod(strMember' BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic' null' " is 123.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                                PropertyInfo propertyInfo = type.GetProperty(strMember' BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic); " is 124.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextPriorityLevel,The length of the statement  "            if (string.IsNullOrEmpty(nextString) || nextString == ";" || nextString == "}" || nextString == "'" || nextString == ":") " is 121.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ToLambdaExpression,The length of the statement  "                    this._params.Add(Expression.Parameter(this._paramTypes != null ? this._paramTypes[0 + paramIndexPrefix] : typeof(object)' val)); " is 128.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                currentExpression = Expression.Convert(ReadExpression(GetOperatorLevel("convert()"' true)' wrapStart' out isClosedWrap)' type); " is 127.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                                MethodInfo methodInfo = type.GetMethod(strMember' BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic' null' " is 123.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                                PropertyInfo propertyInfo = type.GetProperty(strMember' BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic); " is 124.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextPriorityLevel,The length of the statement  "            if (string.IsNullOrEmpty(nextString) || nextString == ";" || nextString == "}" || nextString == "'" || nextString == ":") " is 121.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ToLambdaExpression,The length of the statement  "                    this._params.Add(Expression.Parameter(this._paramTypes != null ? this._paramTypes[0 + paramIndexPrefix] : typeof(object)' val)); " is 128.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                currentExpression = Expression.Convert(ReadExpression(GetOperatorLevel("convert()"' true)' wrapStart' out isClosedWrap)' type); " is 127.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                                MethodInfo methodInfo = type.GetMethod(strMember' BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic' null' " is 123.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                                PropertyInfo propertyInfo = type.GetProperty(strMember' BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic); " is 124.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextPriorityLevel,The length of the statement  "            if (string.IsNullOrEmpty(nextString) || nextString == ";" || nextString == "}" || nextString == "'" || nextString == ":") " is 121.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ToLambdaExpression,The length of the statement  "                    this._params.Add(Expression.Parameter(this._paramTypes != null ? this._paramTypes[0 + paramIndexPrefix] : typeof(object)' val)); " is 128.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                currentExpression = Expression.Convert(ReadExpression(GetOperatorLevel("convert()"' true)' wrapStart' out isClosedWrap)' type); " is 127.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                                MethodInfo methodInfo = type.GetMethod(strMember' BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic' null' " is 123.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                                PropertyInfo propertyInfo = type.GetProperty(strMember' BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic); " is 124.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextPriorityLevel,The length of the statement  "            if (string.IsNullOrEmpty(nextString) || nextString == ";" || nextString == "}" || nextString == "'" || nextString == ":") " is 121.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ToLambdaExpression,The length of the statement  "                    this._params.Add(Expression.Parameter(this._paramTypes != null ? this._paramTypes[0 + paramIndexPrefix] : typeof(object)' val)); " is 128.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                currentExpression = Expression.Convert(ReadExpression(GetOperatorLevel("convert()"' true)' wrapStart' out isClosedWrap)' type); " is 127.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                                MethodInfo methodInfo = type.GetMethod(strMember' BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic' null' " is 123.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                                PropertyInfo propertyInfo = type.GetProperty(strMember' BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic); " is 124.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextPriorityLevel,The length of the statement  "            if (string.IsNullOrEmpty(nextString) || nextString == ";" || nextString == "}" || nextString == "'" || nextString == ":") " is 121.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ToLambdaExpression,The length of the statement  "                    this._params.Add(Expression.Parameter(this._paramTypes != null ? this._paramTypes[0 + paramIndexPrefix] : typeof(object)' val)); " is 128.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                currentExpression = Expression.Convert(ReadExpression(GetOperatorLevel("convert()"' true)' wrapStart' out isClosedWrap)' type); " is 127.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                                MethodInfo methodInfo = type.GetMethod(strMember' BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic' null' " is 123.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                                PropertyInfo propertyInfo = type.GetProperty(strMember' BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic); " is 124.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextPriorityLevel,The length of the statement  "            if (string.IsNullOrEmpty(nextString) || nextString == ";" || nextString == "}" || nextString == "'" || nextString == ":") " is 121.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ToLambdaExpression,The length of the statement  "                    this._params.Add(Expression.Parameter(this._paramTypes != null ? this._paramTypes[0 + paramIndexPrefix] : typeof(object)' val)); " is 128.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                currentExpression = Expression.Convert(ReadExpression(GetOperatorLevel("convert()"' true)' wrapStart' out isClosedWrap)' type); " is 127.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                                MethodInfo methodInfo = type.GetMethod(strMember' BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic' null' " is 123.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                                PropertyInfo propertyInfo = type.GetProperty(strMember' BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic); " is 124.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextPriorityLevel,The length of the statement  "            if (string.IsNullOrEmpty(nextString) || nextString == ";" || nextString == "}" || nextString == "'" || nextString == ":") " is 121.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ToLambdaExpression,The length of the statement  "                    this._params.Add(Expression.Parameter(this._paramTypes != null ? this._paramTypes[0 + paramIndexPrefix] : typeof(object)' val)); " is 128.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                currentExpression = Expression.Convert(ReadExpression(GetOperatorLevel("convert()"' true)' wrapStart' out isClosedWrap)' type); " is 127.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                                MethodInfo methodInfo = type.GetMethod(strMember' BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic' null' " is 123.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                                PropertyInfo propertyInfo = type.GetProperty(strMember' BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic); " is 124.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextPriorityLevel,The length of the statement  "            if (string.IsNullOrEmpty(nextString) || nextString == ";" || nextString == "}" || nextString == "'" || nextString == ":") " is 121.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The length of the statement  "                                if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x') " is 165.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(null' lambdaCode' defaultInstance' false' null' includeExecutingAssembly' namespaces); " is 130.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(null' lambdaCode' defaultInstance' false' paramTypes' includeExecutingAssembly' namespaces); " is 136.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return ExpressionParser.ParseCore<Delegate>(delegateType' lambdaCode' null' false' null' includeExecutingAssembly' namespaces); " is 127.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Parse,The length of the statement  "            return (Expression<TDelegate>)ExpressionParser.ParseCore<TDelegate>(null' lambdaCode' null' false' null' includeExecutingAssembly' namespaces); " is 143.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The length of the statement  "            return (T)((object)ExpressionParser.Parse(lambdaCode' instance.GetType()' paramTypes' includeExecutingAssembly' namespaces).Compile().DynamicInvoke(array2)); " is 157.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ParseCore,The length of the statement  "            ExpressionParserCore<TDelegate> expressionParserCore = new ExpressionParserCore<TDelegate>(delegateType' lambdaCode' includeExecutingAssembly' defaultInstanceType' paramTypes' firstTypeIsDefaultInstance); " is 204.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ToLambdaExpression,The length of the statement  "                    this._params.Add(Expression.Parameter(this._paramTypes != null ? this._paramTypes[0 + paramIndexPrefix] : typeof(object)' val)); " is 128.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                currentExpression = Expression.Convert(ReadExpression(GetOperatorLevel("convert()"' true)' wrapStart' out isClosedWrap)' type); " is 127.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                                MethodInfo methodInfo = type.GetMethod(strMember' BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic' null' " is 123.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ReadExpression,The length of the statement  "                                                PropertyInfo propertyInfo = type.GetProperty(strMember' BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic); " is 124.
Long Statement,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextPriorityLevel,The length of the statement  "            if (string.IsNullOrEmpty(nextString) || nextString == ";" || nextString == "}" || nextString == "'" || nextString == ":") " is 121.
Complex Conditional,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseSByte,The conditional expression  "(t = types[outer]).IsEnum && (ch != '-') && ((ch < '0') || (ch > '9'))"  is complex.
Complex Conditional,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt16,The conditional expression  "(t = types[outer]).IsEnum && (ch != '-') && ((ch < '0') || (ch > '9'))"  is complex.
Complex Conditional,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt32,The conditional expression  "(t = types[outer]).IsEnum && (ch != '-') && ((ch < '0') || (ch > '9'))"  is complex.
Complex Conditional,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt64,The conditional expression  "(t = types[outer]).IsEnum && (ch != '-') && ((ch < '0') || (ch > '9'))"  is complex.
Complex Conditional,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseSByte,The conditional expression  "(t = types[outer]).IsEnum && (ch != '-') && ((ch < '0') || (ch > '9'))"  is complex.
Complex Conditional,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt16,The conditional expression  "(t = types[outer]).IsEnum && (ch != '-') && ((ch < '0') || (ch > '9'))"  is complex.
Complex Conditional,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt32,The conditional expression  "(t = types[outer]).IsEnum && (ch != '-') && ((ch < '0') || (ch > '9'))"  is complex.
Complex Conditional,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt64,The conditional expression  "(t = types[outer]).IsEnum && (ch != '-') && ((ch < '0') || (ch > '9'))"  is complex.
Complex Conditional,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Trace,The conditional expression  "atom.Length > 3 && atom[0] == '?' && atom[1] == '(' && atom[atom.Length - 1] == ')'"  is complex.
Complex Conditional,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Trace,The conditional expression  "atom.Length > 3 && atom[0] == '?' && atom[1] == '{' && atom[atom.Length - 1] == '}'"  is complex.
Complex Conditional,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Trace,The conditional expression  "atom.Length > 3 && atom[0] == '?' && atom[1] == '(' && atom[atom.Length - 1] == ')'"  is complex.
Complex Conditional,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Trace,The conditional expression  "atom.Length > 3 && atom[0] == '?' && atom[1] == '{' && atom[atom.Length - 1] == '}'"  is complex.
Complex Conditional,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseSByte,The conditional expression  "(t = types[outer]).IsEnum && (ch != '-') && ((ch < '0') || (ch > '9'))"  is complex.
Complex Conditional,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt16,The conditional expression  "(t = types[outer]).IsEnum && (ch != '-') && ((ch < '0') || (ch > '9'))"  is complex.
Complex Conditional,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt32,The conditional expression  "(t = types[outer]).IsEnum && (ch != '-') && ((ch < '0') || (ch > '9'))"  is complex.
Complex Conditional,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt64,The conditional expression  "(t = types[outer]).IsEnum && (ch != '-') && ((ch < '0') || (ch > '9'))"  is complex.
Complex Conditional,System.Text.Json,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Trace,The conditional expression  "atom.Length > 3 && atom[0] == '?' && atom[1] == '(' && atom[atom.Length - 1] == ')'"  is complex.
Complex Conditional,System.Text.Json,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Trace,The conditional expression  "atom.Length > 3 && atom[0] == '?' && atom[1] == '{' && atom[atom.Length - 1] == '}'"  is complex.
Complex Conditional,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The conditional expression  "!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x'"  is complex.
Complex Conditional,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The conditional expression  "!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x'"  is complex.
Complex Conditional,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The conditional expression  "!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x'"  is complex.
Complex Conditional,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The conditional expression  "!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x'"  is complex.
Complex Conditional,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The conditional expression  "!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x'"  is complex.
Complex Conditional,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The conditional expression  "!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x'"  is complex.
Complex Conditional,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The conditional expression  "!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x'"  is complex.
Complex Conditional,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The conditional expression  "!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x'"  is complex.
Complex Conditional,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The conditional expression  "!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x'"  is complex.
Complex Conditional,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The conditional expression  "!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x'"  is complex.
Complex Conditional,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The conditional expression  "!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x'"  is complex.
Complex Conditional,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextPriorityLevel,The conditional expression  "string.IsNullOrEmpty(nextString) || nextString == ";" || nextString == "}" || nextString == "'" || nextString == ":""  is complex.
Complex Conditional,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextPriorityLevel,The conditional expression  "string.IsNullOrEmpty(nextString) || nextString == ";" || nextString == "}" || nextString == "'" || nextString == ":""  is complex.
Complex Conditional,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextPriorityLevel,The conditional expression  "string.IsNullOrEmpty(nextString) || nextString == ";" || nextString == "}" || nextString == "'" || nextString == ":""  is complex.
Complex Conditional,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextPriorityLevel,The conditional expression  "string.IsNullOrEmpty(nextString) || nextString == ";" || nextString == "}" || nextString == "'" || nextString == ":""  is complex.
Complex Conditional,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextPriorityLevel,The conditional expression  "string.IsNullOrEmpty(nextString) || nextString == ";" || nextString == "}" || nextString == "'" || nextString == ":""  is complex.
Complex Conditional,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextPriorityLevel,The conditional expression  "string.IsNullOrEmpty(nextString) || nextString == ";" || nextString == "}" || nextString == "'" || nextString == ":""  is complex.
Complex Conditional,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextPriorityLevel,The conditional expression  "string.IsNullOrEmpty(nextString) || nextString == ";" || nextString == "}" || nextString == "'" || nextString == ":""  is complex.
Complex Conditional,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextPriorityLevel,The conditional expression  "string.IsNullOrEmpty(nextString) || nextString == ";" || nextString == "}" || nextString == "'" || nextString == ":""  is complex.
Complex Conditional,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextPriorityLevel,The conditional expression  "string.IsNullOrEmpty(nextString) || nextString == ";" || nextString == "}" || nextString == "'" || nextString == ":""  is complex.
Complex Conditional,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextPriorityLevel,The conditional expression  "string.IsNullOrEmpty(nextString) || nextString == ";" || nextString == "}" || nextString == "'" || nextString == ":""  is complex.
Complex Conditional,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextPriorityLevel,The conditional expression  "string.IsNullOrEmpty(nextString) || nextString == ";" || nextString == "}" || nextString == "'" || nextString == ":""  is complex.
Complex Conditional,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The conditional expression  "!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x'"  is complex.
Complex Conditional,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextPriorityLevel,The conditional expression  "string.IsNullOrEmpty(nextString) || nextString == ";" || nextString == "}" || nextString == "'" || nextString == ":""  is complex.
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,JsonParser,The following statement contains a magic number: for (char c = '0'; c <= '9'; c++) { HXD[c] = true; HEX[c] = (byte)(c - 48); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,JsonParser,The following statement contains a magic number: for (char c = 'A'; c <= 'F'; c++) { HXD[c] = HXD[c + 32] = true; HEX[c] = HEX[c + 32] = (byte)(c - 55); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,JsonParser,The following statement contains a magic number: for (char c = 'A'; c <= 'F'; c++) { HXD[c] = HXD[c + 32] = true; HEX[c] = HEX[c + 32] = (byte)(c - 55); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,JsonParser,The following statement contains a magic number: for (char c = 'A'; c <= 'F'; c++) { HXD[c] = HXD[c + 32] = true; HEX[c] = HEX[c + 32] = (byte)(c - 55); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,JsonParser,The following statement contains a magic number: for (int c = ANY; c < 128; c++) if (ESC[c] == ANY) ESC[c] = (char)c;
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,JsonParser,The following statement contains a magic number: for (int c = 'A'; c <= 'Z'; c++) IDF[c] = IDN[c] = IDF[c + 32] = IDN[c + 32] = true;
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,JsonParser,The following statement contains a magic number: for (int c = 'A'; c <= 'Z'; c++) IDF[c] = IDN[c] = IDF[c + 32] = IDN[c + 32] = true;
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Esc,The following statement contains a magic number: if (ec == 'u')              {                  while ((++ic < 4) && ((ch = Read()) <= 'f') && HXD[ch]) { cp *= 16; cp += HEX[ch]; }                  if (ic < 4) throw Error("Invalid Unicode character");                  ch = cp;              }              else                  ch = ESC[ec];
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Esc,The following statement contains a magic number: if (ec == 'u')              {                  while ((++ic < 4) && ((ch = Read()) <= 'f') && HXD[ch]) { cp *= 16; cp += HEX[ch]; }                  if (ic < 4) throw Error("Invalid Unicode character");                  ch = cp;              }              else                  ch = ESC[ec];
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Esc,The following statement contains a magic number: if (ec == 'u')              {                  while ((++ic < 4) && ((ch = Read()) <= 'f') && HXD[ch]) { cp *= 16; cp += HEX[ch]; }                  if (ic < 4) throw Error("Invalid Unicode character");                  ch = cp;              }              else                  ch = ESC[ec];
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,CharEsc,The following statement contains a magic number: if (ec == 'u')              {                  while ((++ic < 4) && ((ch = Read()) <= 'f') && HXD[ch]) { cp *= 16; cp += HEX[ch]; }                  if (ic < 4) throw Error("Invalid Unicode character");                  ch = cp;              }              else                  ch = ESC[ec];
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,CharEsc,The following statement contains a magic number: if (ec == 'u')              {                  while ((++ic < 4) && ((ch = Read()) <= 'f') && HXD[ch]) { cp *= 16; cp += HEX[ch]; }                  if (ic < 4) throw Error("Invalid Unicode character");                  ch = cp;              }              else                  ch = ESC[ec];
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,CharEsc,The following statement contains a magic number: if (ec == 'u')              {                  while ((++ic < 4) && ((ch = Read()) <= 'f') && HXD[ch]) { cp *= 16; cp += HEX[ch]; }                  if (ic < 4) throw Error("Invalid Unicode character");                  ch = cp;              }              else                  ch = ESC[ec];
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetEnumInfo,The following statement contains a magic number: while (true)              {                  int ch;                  if ((ch = chr) == '"')                  {                      Read();                      return (((i < n) && (c > 0)) ? a[i] : null);                  }                  bool e = ch == '\\';                  if (e)                      ch = Read();                  if (ch < EOF)                  {                      if (!e || (ch >= 128))                          Read();                      else                          ch = Esc(ch);                  }                  else                      break;                  EnumInfo ei;                  while ((i < n) && ((c >= (ei = a[i]).Len) || (ei.Name[c] != ch))) i++;                  c++;              }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseSByte,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (sbyte)(it * (ch - 48)); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseSByte,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (sbyte)(it * (ch - 48)); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseByte,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (byte)(ch - 48); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseByte,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (byte)(ch - 48); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt16,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (short)(it * (ch - 48)); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt16,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (short)(it * (ch - 48)); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseUInt16,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (ushort)(ch - 48); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseUInt16,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (ushort)(ch - 48); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt32,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (it * (ch - 48)); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt32,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (it * (ch - 48)); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseUInt32,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (uint)(ch - 48); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseUInt32,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (uint)(ch - 48); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt64,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += it * (ch - 48); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt64,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += it * (ch - 48); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseUInt64,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (ulong)(ch - 48); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseUInt64,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (ulong)(ch - 48); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseString,The following statement contains a magic number: if (ch == '"')              {                  Read();                  lsb.Length = 0;                  lln = 0;                  while (true)                  {                      if ((ch = chr) == '"')                      {                          Read();                          return ((lsb.Length > 0) ? lsb.ToString() : new string(lbf' 0' lln));                      }                      bool e = ch == '\\';                      if (e)                          ch = Read();                      if (ch < EOF)                      {                          if (!e || (ch >= 128))                              Char(ch);                          else                              CharEsc(ch);                          }                      else                          break;                  }              }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,PastKey,The following statement contains a magic number: while (true)              {                  if ((ch = chr) == '"')                  {                      Read();                      return;                  }                  bool e = ch == '\\';                  if (e)                      ch = Read();                  if (ch < EOF)                  {                      if (!e || (ch >= 128))                          Read();                      else                      {                          Esc(ch);                      }                  }                  else break;              }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Str,The following statement contains a magic number: if ((outer != 2) || ((s != null) && (s.Length == 1)))                  return ((outer == 2) ? (object) s[0] : s);
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Str,The following statement contains a magic number: if ((outer != 2) || ((s != null) && (s.Length == 1)))                  return ((outer == 2) ? (object) s[0] : s);
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetKeyValueTypes,The following statement contains a magic number: var kvPair = ((generic != null) && (generic.GetGenericArguments().Length == 2));
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,JsonParser,The following statement contains a magic number: for (var input = 0; input < 128; input++) parse[input] = (parse[input] ?? Error);
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,JsonParser,The following statement contains a magic number: for (char c = '0'; c <= '9'; c++) { HXD[c] = true; HEX[c] = (byte)(c - 48); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,JsonParser,The following statement contains a magic number: for (char c = 'A'; c <= 'F'; c++) { HXD[c] = HXD[c + 32] = true; HEX[c] = HEX[c + 32] = (byte)(c - 55); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,JsonParser,The following statement contains a magic number: for (char c = 'A'; c <= 'F'; c++) { HXD[c] = HXD[c + 32] = true; HEX[c] = HEX[c + 32] = (byte)(c - 55); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,JsonParser,The following statement contains a magic number: for (char c = 'A'; c <= 'F'; c++) { HXD[c] = HXD[c + 32] = true; HEX[c] = HEX[c + 32] = (byte)(c - 55); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,JsonParser,The following statement contains a magic number: for (int c = ANY; c < 128; c++) if (ESC[c] == ANY) ESC[c] = (char)c;
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,JsonParser,The following statement contains a magic number: for (int c = 'A'; c <= 'Z'; c++) IDF[c] = IDN[c] = IDF[c + 32] = IDN[c + 32] = true;
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,JsonParser,The following statement contains a magic number: for (int c = 'A'; c <= 'Z'; c++) IDF[c] = IDN[c] = IDF[c + 32] = IDN[c + 32] = true;
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Esc,The following statement contains a magic number: if (ec == 'u')              {                  while ((++ic < 4) && ((ch = Read()) <= 'f') && HXD[ch]) { cp *= 16; cp += HEX[ch]; }                  if (ic < 4) throw Error("Invalid Unicode character");                  ch = cp;              }              else                  ch = ESC[ec];
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Esc,The following statement contains a magic number: if (ec == 'u')              {                  while ((++ic < 4) && ((ch = Read()) <= 'f') && HXD[ch]) { cp *= 16; cp += HEX[ch]; }                  if (ic < 4) throw Error("Invalid Unicode character");                  ch = cp;              }              else                  ch = ESC[ec];
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Esc,The following statement contains a magic number: if (ec == 'u')              {                  while ((++ic < 4) && ((ch = Read()) <= 'f') && HXD[ch]) { cp *= 16; cp += HEX[ch]; }                  if (ic < 4) throw Error("Invalid Unicode character");                  ch = cp;              }              else                  ch = ESC[ec];
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,CharEsc,The following statement contains a magic number: if (ec == 'u')              {                  while ((++ic < 4) && ((ch = Read()) <= 'f') && HXD[ch]) { cp *= 16; cp += HEX[ch]; }                  if (ic < 4) throw Error("Invalid Unicode character");                  ch = cp;              }              else                  ch = ESC[ec];
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,CharEsc,The following statement contains a magic number: if (ec == 'u')              {                  while ((++ic < 4) && ((ch = Read()) <= 'f') && HXD[ch]) { cp *= 16; cp += HEX[ch]; }                  if (ic < 4) throw Error("Invalid Unicode character");                  ch = cp;              }              else                  ch = ESC[ec];
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,CharEsc,The following statement contains a magic number: if (ec == 'u')              {                  while ((++ic < 4) && ((ch = Read()) <= 'f') && HXD[ch]) { cp *= 16; cp += HEX[ch]; }                  if (ic < 4) throw Error("Invalid Unicode character");                  ch = cp;              }              else                  ch = ESC[ec];
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetEnumInfo,The following statement contains a magic number: while (true)              {                  int ch;                  if ((ch = chr) == '"')                  {                      Read();                      return (((i < n) && (c > 0)) ? a[i] : null);                  }                  bool e = ch == '\\';                  if (e)                      ch = Read();                  if (ch < EOF)                  {                      if (!e || (ch >= 128))                          Read();                      else                          ch = Esc(ch);                  }                  else                      break;                  EnumInfo ei;                  while ((i < n) && ((c >= (ei = a[i]).Len) || (ei.Name[c] != ch))) i++;                  c++;              }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseSByte,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (sbyte)(it * (ch - 48)); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseSByte,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (sbyte)(it * (ch - 48)); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseByte,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (byte)(ch - 48); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseByte,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (byte)(ch - 48); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt16,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (short)(it * (ch - 48)); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt16,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (short)(it * (ch - 48)); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseUInt16,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (ushort)(ch - 48); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseUInt16,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (ushort)(ch - 48); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt32,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (it * (ch - 48)); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt32,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (it * (ch - 48)); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseUInt32,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (uint)(ch - 48); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseUInt32,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (uint)(ch - 48); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt64,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += it * (ch - 48); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt64,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += it * (ch - 48); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseUInt64,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (ulong)(ch - 48); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseUInt64,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (ulong)(ch - 48); } ch = Read(); }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseString,The following statement contains a magic number: if (ch == '"')              {                  Read();                  lsb.Length = 0;                  lln = 0;                  while (true)                  {                      if ((ch = chr) == '"')                      {                          Read();                          return ((lsb.Length > 0) ? lsb.ToString() : new string(lbf' 0' lln));                      }                      bool e = ch == '\\';                      if (e)                          ch = Read();                      if (ch < EOF)                      {                          if (!e || (ch >= 128))                              Char(ch);                          else                              CharEsc(ch);                          }                      else                          break;                  }              }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,PastKey,The following statement contains a magic number: while (true)              {                  if ((ch = chr) == '"')                  {                      Read();                      return;                  }                  bool e = ch == '\\';                  if (e)                      ch = Read();                  if (ch < EOF)                  {                      if (!e || (ch >= 128))                          Read();                      else                      {                          Esc(ch);                      }                  }                  else break;              }
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Str,The following statement contains a magic number: if ((outer != 2) || ((s != null) && (s.Length == 1)))                  return ((outer == 2) ? (object) s[0] : s);
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Str,The following statement contains a magic number: if ((outer != 2) || ((s != null) && (s.Length == 1)))                  return ((outer == 2) ? (object) s[0] : s);
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetKeyValueTypes,The following statement contains a magic number: var kvPair = ((generic != null) && (generic.GetGenericArguments().Length == 2));
Magic Number,System.Text.Json.JsonPath,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,JsonParser,The following statement contains a magic number: for (var input = 0; input < 128; input++) parse[input] = (parse[input] ?? Error);
Magic Number,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,TypeInfo,The following statement contains a magic number: var props = ((self > 2) ? type.GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public) : new System.Reflection.PropertyInfo[] { });
Magic Number,System.Text.Json.JsonPath,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,TypeInfo,The following statement contains a magic number: var props = ((self > 2) ? type.GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public) : new System.Reflection.PropertyInfo[] { });
Magic Number,System.Text.Json.JsonPath,JsonPathContext,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,SelectTo,The following statement contains a magic number: if (expression.Length >= 1 && expression[0] == '$') // ^\$:?                  expression = expression.Substring(expression.Length >= 2 && expression[1] == ';' ? 2 : 1);
Magic Number,System.Text.Json.JsonPath,JsonPathContext,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,SelectTo,The following statement contains a magic number: if (expression.Length >= 1 && expression[0] == '$') // ^\$:?                  expression = expression.Substring(expression.Length >= 2 && expression[1] == ';' ? 2 : 1);
Magic Number,System.Text.Json.JsonPath,JsonPathContext,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,SelectTo,The following statement contains a magic number: if (expression.Length >= 1 && expression[0] == '$') // ^\$:?                  expression = expression.Substring(expression.Length >= 2 && expression[1] == ';' ? 2 : 1);
Magic Number,System.Text.Json.JsonPath,JsonPathContext,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,SelectTo,The following statement contains a magic number: if (expression.Length >= 1 && expression[0] == '$') // ^\$:?                  expression = expression.Substring(expression.Length >= 2 && expression[1] == ';' ? 2 : 1);
Magic Number,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Trace,The following statement contains a magic number: if (value != null && system.HasMember(value' atom))                  {                      Trace(tail' Index(value' atom)' path + ";" + atom' lambdas);                  }                  else if (atom == "*")                  {                      Walk(atom' tail' value' path' WalkWild' lambdas' -1);                  }                  else if (atom == "..")                  {                      Trace(tail' value' path' lambdas);                      Walk(atom' tail' value' path' WalkTree' lambdas' -1);                  }                  else if (atom.Length > 2 && atom[0] == '(' && atom[atom.Length - 1] == ')') // [(exp)]                  {                      Trace(Eval(atom' value' path.Substring(path.LastIndexOf(';') + 1)) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 2 && atom[0] == '{' && atom[atom.Length - 1] == '}') // [{N}]                  {                      var lambda = lambdas[int.Parse(atom.Substring(1' atom.Length - 2)' CultureInfo.InvariantCulture)];                      Trace(lambda.DynamicInvoke(atom' value' Bindings) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '(' && atom[atom.Length - 1] == ')') // [?(exp)]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' -1);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '{' && atom[atom.Length - 1] == '}') // [?{N}]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' int.Parse(atom.Substring(2' atom.Length - 3)' CultureInfo.InvariantCulture));                  }                  else if (REGEXP_SEGMENTED.IsMatch(atom)) // [start:end:step] Phyton slice syntax                  {                      Slice(atom' tail' value' path' lambdas);                  }                  else if (atom.IndexOf(''') >= 0) // [name1'name2'...]                  {                      foreach (string part in REGEXP_ITEMIZED.Split(atom))                          Trace(part + ";" + tail' value' path' lambdas);                  }
Magic Number,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Trace,The following statement contains a magic number: if (value != null && system.HasMember(value' atom))                  {                      Trace(tail' Index(value' atom)' path + ";" + atom' lambdas);                  }                  else if (atom == "*")                  {                      Walk(atom' tail' value' path' WalkWild' lambdas' -1);                  }                  else if (atom == "..")                  {                      Trace(tail' value' path' lambdas);                      Walk(atom' tail' value' path' WalkTree' lambdas' -1);                  }                  else if (atom.Length > 2 && atom[0] == '(' && atom[atom.Length - 1] == ')') // [(exp)]                  {                      Trace(Eval(atom' value' path.Substring(path.LastIndexOf(';') + 1)) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 2 && atom[0] == '{' && atom[atom.Length - 1] == '}') // [{N}]                  {                      var lambda = lambdas[int.Parse(atom.Substring(1' atom.Length - 2)' CultureInfo.InvariantCulture)];                      Trace(lambda.DynamicInvoke(atom' value' Bindings) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '(' && atom[atom.Length - 1] == ')') // [?(exp)]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' -1);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '{' && atom[atom.Length - 1] == '}') // [?{N}]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' int.Parse(atom.Substring(2' atom.Length - 3)' CultureInfo.InvariantCulture));                  }                  else if (REGEXP_SEGMENTED.IsMatch(atom)) // [start:end:step] Phyton slice syntax                  {                      Slice(atom' tail' value' path' lambdas);                  }                  else if (atom.IndexOf(''') >= 0) // [name1'name2'...]                  {                      foreach (string part in REGEXP_ITEMIZED.Split(atom))                          Trace(part + ";" + tail' value' path' lambdas);                  }
Magic Number,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Trace,The following statement contains a magic number: if (value != null && system.HasMember(value' atom))                  {                      Trace(tail' Index(value' atom)' path + ";" + atom' lambdas);                  }                  else if (atom == "*")                  {                      Walk(atom' tail' value' path' WalkWild' lambdas' -1);                  }                  else if (atom == "..")                  {                      Trace(tail' value' path' lambdas);                      Walk(atom' tail' value' path' WalkTree' lambdas' -1);                  }                  else if (atom.Length > 2 && atom[0] == '(' && atom[atom.Length - 1] == ')') // [(exp)]                  {                      Trace(Eval(atom' value' path.Substring(path.LastIndexOf(';') + 1)) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 2 && atom[0] == '{' && atom[atom.Length - 1] == '}') // [{N}]                  {                      var lambda = lambdas[int.Parse(atom.Substring(1' atom.Length - 2)' CultureInfo.InvariantCulture)];                      Trace(lambda.DynamicInvoke(atom' value' Bindings) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '(' && atom[atom.Length - 1] == ')') // [?(exp)]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' -1);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '{' && atom[atom.Length - 1] == '}') // [?{N}]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' int.Parse(atom.Substring(2' atom.Length - 3)' CultureInfo.InvariantCulture));                  }                  else if (REGEXP_SEGMENTED.IsMatch(atom)) // [start:end:step] Phyton slice syntax                  {                      Slice(atom' tail' value' path' lambdas);                  }                  else if (atom.IndexOf(''') >= 0) // [name1'name2'...]                  {                      foreach (string part in REGEXP_ITEMIZED.Split(atom))                          Trace(part + ";" + tail' value' path' lambdas);                  }
Magic Number,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Trace,The following statement contains a magic number: if (value != null && system.HasMember(value' atom))                  {                      Trace(tail' Index(value' atom)' path + ";" + atom' lambdas);                  }                  else if (atom == "*")                  {                      Walk(atom' tail' value' path' WalkWild' lambdas' -1);                  }                  else if (atom == "..")                  {                      Trace(tail' value' path' lambdas);                      Walk(atom' tail' value' path' WalkTree' lambdas' -1);                  }                  else if (atom.Length > 2 && atom[0] == '(' && atom[atom.Length - 1] == ')') // [(exp)]                  {                      Trace(Eval(atom' value' path.Substring(path.LastIndexOf(';') + 1)) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 2 && atom[0] == '{' && atom[atom.Length - 1] == '}') // [{N}]                  {                      var lambda = lambdas[int.Parse(atom.Substring(1' atom.Length - 2)' CultureInfo.InvariantCulture)];                      Trace(lambda.DynamicInvoke(atom' value' Bindings) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '(' && atom[atom.Length - 1] == ')') // [?(exp)]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' -1);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '{' && atom[atom.Length - 1] == '}') // [?{N}]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' int.Parse(atom.Substring(2' atom.Length - 3)' CultureInfo.InvariantCulture));                  }                  else if (REGEXP_SEGMENTED.IsMatch(atom)) // [start:end:step] Phyton slice syntax                  {                      Slice(atom' tail' value' path' lambdas);                  }                  else if (atom.IndexOf(''') >= 0) // [name1'name2'...]                  {                      foreach (string part in REGEXP_ITEMIZED.Split(atom))                          Trace(part + ";" + tail' value' path' lambdas);                  }
Magic Number,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Trace,The following statement contains a magic number: if (value != null && system.HasMember(value' atom))                  {                      Trace(tail' Index(value' atom)' path + ";" + atom' lambdas);                  }                  else if (atom == "*")                  {                      Walk(atom' tail' value' path' WalkWild' lambdas' -1);                  }                  else if (atom == "..")                  {                      Trace(tail' value' path' lambdas);                      Walk(atom' tail' value' path' WalkTree' lambdas' -1);                  }                  else if (atom.Length > 2 && atom[0] == '(' && atom[atom.Length - 1] == ')') // [(exp)]                  {                      Trace(Eval(atom' value' path.Substring(path.LastIndexOf(';') + 1)) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 2 && atom[0] == '{' && atom[atom.Length - 1] == '}') // [{N}]                  {                      var lambda = lambdas[int.Parse(atom.Substring(1' atom.Length - 2)' CultureInfo.InvariantCulture)];                      Trace(lambda.DynamicInvoke(atom' value' Bindings) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '(' && atom[atom.Length - 1] == ')') // [?(exp)]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' -1);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '{' && atom[atom.Length - 1] == '}') // [?{N}]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' int.Parse(atom.Substring(2' atom.Length - 3)' CultureInfo.InvariantCulture));                  }                  else if (REGEXP_SEGMENTED.IsMatch(atom)) // [start:end:step] Phyton slice syntax                  {                      Slice(atom' tail' value' path' lambdas);                  }                  else if (atom.IndexOf(''') >= 0) // [name1'name2'...]                  {                      foreach (string part in REGEXP_ITEMIZED.Split(atom))                          Trace(part + ";" + tail' value' path' lambdas);                  }
Magic Number,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Trace,The following statement contains a magic number: if (value != null && system.HasMember(value' atom))                  {                      Trace(tail' Index(value' atom)' path + ";" + atom' lambdas);                  }                  else if (atom == "*")                  {                      Walk(atom' tail' value' path' WalkWild' lambdas' -1);                  }                  else if (atom == "..")                  {                      Trace(tail' value' path' lambdas);                      Walk(atom' tail' value' path' WalkTree' lambdas' -1);                  }                  else if (atom.Length > 2 && atom[0] == '(' && atom[atom.Length - 1] == ')') // [(exp)]                  {                      Trace(Eval(atom' value' path.Substring(path.LastIndexOf(';') + 1)) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 2 && atom[0] == '{' && atom[atom.Length - 1] == '}') // [{N}]                  {                      var lambda = lambdas[int.Parse(atom.Substring(1' atom.Length - 2)' CultureInfo.InvariantCulture)];                      Trace(lambda.DynamicInvoke(atom' value' Bindings) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '(' && atom[atom.Length - 1] == ')') // [?(exp)]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' -1);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '{' && atom[atom.Length - 1] == '}') // [?{N}]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' int.Parse(atom.Substring(2' atom.Length - 3)' CultureInfo.InvariantCulture));                  }                  else if (REGEXP_SEGMENTED.IsMatch(atom)) // [start:end:step] Phyton slice syntax                  {                      Slice(atom' tail' value' path' lambdas);                  }                  else if (atom.IndexOf(''') >= 0) // [name1'name2'...]                  {                      foreach (string part in REGEXP_ITEMIZED.Split(atom))                          Trace(part + ";" + tail' value' path' lambdas);                  }
Magic Number,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Trace,The following statement contains a magic number: if (value != null && system.HasMember(value' atom))                  {                      Trace(tail' Index(value' atom)' path + ";" + atom' lambdas);                  }                  else if (atom == "*")                  {                      Walk(atom' tail' value' path' WalkWild' lambdas' -1);                  }                  else if (atom == "..")                  {                      Trace(tail' value' path' lambdas);                      Walk(atom' tail' value' path' WalkTree' lambdas' -1);                  }                  else if (atom.Length > 2 && atom[0] == '(' && atom[atom.Length - 1] == ')') // [(exp)]                  {                      Trace(Eval(atom' value' path.Substring(path.LastIndexOf(';') + 1)) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 2 && atom[0] == '{' && atom[atom.Length - 1] == '}') // [{N}]                  {                      var lambda = lambdas[int.Parse(atom.Substring(1' atom.Length - 2)' CultureInfo.InvariantCulture)];                      Trace(lambda.DynamicInvoke(atom' value' Bindings) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '(' && atom[atom.Length - 1] == ')') // [?(exp)]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' -1);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '{' && atom[atom.Length - 1] == '}') // [?{N}]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' int.Parse(atom.Substring(2' atom.Length - 3)' CultureInfo.InvariantCulture));                  }                  else if (REGEXP_SEGMENTED.IsMatch(atom)) // [start:end:step] Phyton slice syntax                  {                      Slice(atom' tail' value' path' lambdas);                  }                  else if (atom.IndexOf(''') >= 0) // [name1'name2'...]                  {                      foreach (string part in REGEXP_ITEMIZED.Split(atom))                          Trace(part + ";" + tail' value' path' lambdas);                  }
Magic Number,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Slice,The following statement contains a magic number: int step = parts.Length > 2 ? ParseInt(parts[2]' 1) : 1;
Magic Number,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Slice,The following statement contains a magic number: int step = parts.Length > 2 ? ParseInt(parts[2]' 1) : 1;
Magic Number,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Trace,The following statement contains a magic number: if (value != null && system.HasMember(value' atom))                  {                      Trace(tail' Index(value' atom)' path + ";" + atom' lambdas);                  }                  else if (atom == "*")                  {                      Walk(atom' tail' value' path' WalkWild' lambdas' -1);                  }                  else if (atom == "..")                  {                      Trace(tail' value' path' lambdas);                      Walk(atom' tail' value' path' WalkTree' lambdas' -1);                  }                  else if (atom.Length > 2 && atom[0] == '(' && atom[atom.Length - 1] == ')') // [(exp)]                  {                      Trace(Eval(atom' value' path.Substring(path.LastIndexOf(';') + 1)) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 2 && atom[0] == '{' && atom[atom.Length - 1] == '}') // [{N}]                  {                      var lambda = lambdas[int.Parse(atom.Substring(1' atom.Length - 2)' CultureInfo.InvariantCulture)];                      Trace(lambda.DynamicInvoke(atom' value' Bindings) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '(' && atom[atom.Length - 1] == ')') // [?(exp)]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' -1);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '{' && atom[atom.Length - 1] == '}') // [?{N}]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' int.Parse(atom.Substring(2' atom.Length - 3)' CultureInfo.InvariantCulture));                  }                  else if (REGEXP_SEGMENTED.IsMatch(atom)) // [start:end:step] Phyton slice syntax                  {                      Slice(atom' tail' value' path' lambdas);                  }                  else if (atom.IndexOf(''') >= 0) // [name1'name2'...]                  {                      foreach (string part in REGEXP_ITEMIZED.Split(atom))                          Trace(part + ";" + tail' value' path' lambdas);                  }
Magic Number,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Trace,The following statement contains a magic number: if (value != null && system.HasMember(value' atom))                  {                      Trace(tail' Index(value' atom)' path + ";" + atom' lambdas);                  }                  else if (atom == "*")                  {                      Walk(atom' tail' value' path' WalkWild' lambdas' -1);                  }                  else if (atom == "..")                  {                      Trace(tail' value' path' lambdas);                      Walk(atom' tail' value' path' WalkTree' lambdas' -1);                  }                  else if (atom.Length > 2 && atom[0] == '(' && atom[atom.Length - 1] == ')') // [(exp)]                  {                      Trace(Eval(atom' value' path.Substring(path.LastIndexOf(';') + 1)) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 2 && atom[0] == '{' && atom[atom.Length - 1] == '}') // [{N}]                  {                      var lambda = lambdas[int.Parse(atom.Substring(1' atom.Length - 2)' CultureInfo.InvariantCulture)];                      Trace(lambda.DynamicInvoke(atom' value' Bindings) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '(' && atom[atom.Length - 1] == ')') // [?(exp)]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' -1);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '{' && atom[atom.Length - 1] == '}') // [?{N}]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' int.Parse(atom.Substring(2' atom.Length - 3)' CultureInfo.InvariantCulture));                  }                  else if (REGEXP_SEGMENTED.IsMatch(atom)) // [start:end:step] Phyton slice syntax                  {                      Slice(atom' tail' value' path' lambdas);                  }                  else if (atom.IndexOf(''') >= 0) // [name1'name2'...]                  {                      foreach (string part in REGEXP_ITEMIZED.Split(atom))                          Trace(part + ";" + tail' value' path' lambdas);                  }
Magic Number,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Trace,The following statement contains a magic number: if (value != null && system.HasMember(value' atom))                  {                      Trace(tail' Index(value' atom)' path + ";" + atom' lambdas);                  }                  else if (atom == "*")                  {                      Walk(atom' tail' value' path' WalkWild' lambdas' -1);                  }                  else if (atom == "..")                  {                      Trace(tail' value' path' lambdas);                      Walk(atom' tail' value' path' WalkTree' lambdas' -1);                  }                  else if (atom.Length > 2 && atom[0] == '(' && atom[atom.Length - 1] == ')') // [(exp)]                  {                      Trace(Eval(atom' value' path.Substring(path.LastIndexOf(';') + 1)) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 2 && atom[0] == '{' && atom[atom.Length - 1] == '}') // [{N}]                  {                      var lambda = lambdas[int.Parse(atom.Substring(1' atom.Length - 2)' CultureInfo.InvariantCulture)];                      Trace(lambda.DynamicInvoke(atom' value' Bindings) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '(' && atom[atom.Length - 1] == ')') // [?(exp)]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' -1);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '{' && atom[atom.Length - 1] == '}') // [?{N}]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' int.Parse(atom.Substring(2' atom.Length - 3)' CultureInfo.InvariantCulture));                  }                  else if (REGEXP_SEGMENTED.IsMatch(atom)) // [start:end:step] Phyton slice syntax                  {                      Slice(atom' tail' value' path' lambdas);                  }                  else if (atom.IndexOf(''') >= 0) // [name1'name2'...]                  {                      foreach (string part in REGEXP_ITEMIZED.Split(atom))                          Trace(part + ";" + tail' value' path' lambdas);                  }
Magic Number,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Trace,The following statement contains a magic number: if (value != null && system.HasMember(value' atom))                  {                      Trace(tail' Index(value' atom)' path + ";" + atom' lambdas);                  }                  else if (atom == "*")                  {                      Walk(atom' tail' value' path' WalkWild' lambdas' -1);                  }                  else if (atom == "..")                  {                      Trace(tail' value' path' lambdas);                      Walk(atom' tail' value' path' WalkTree' lambdas' -1);                  }                  else if (atom.Length > 2 && atom[0] == '(' && atom[atom.Length - 1] == ')') // [(exp)]                  {                      Trace(Eval(atom' value' path.Substring(path.LastIndexOf(';') + 1)) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 2 && atom[0] == '{' && atom[atom.Length - 1] == '}') // [{N}]                  {                      var lambda = lambdas[int.Parse(atom.Substring(1' atom.Length - 2)' CultureInfo.InvariantCulture)];                      Trace(lambda.DynamicInvoke(atom' value' Bindings) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '(' && atom[atom.Length - 1] == ')') // [?(exp)]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' -1);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '{' && atom[atom.Length - 1] == '}') // [?{N}]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' int.Parse(atom.Substring(2' atom.Length - 3)' CultureInfo.InvariantCulture));                  }                  else if (REGEXP_SEGMENTED.IsMatch(atom)) // [start:end:step] Phyton slice syntax                  {                      Slice(atom' tail' value' path' lambdas);                  }                  else if (atom.IndexOf(''') >= 0) // [name1'name2'...]                  {                      foreach (string part in REGEXP_ITEMIZED.Split(atom))                          Trace(part + ";" + tail' value' path' lambdas);                  }
Magic Number,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Trace,The following statement contains a magic number: if (value != null && system.HasMember(value' atom))                  {                      Trace(tail' Index(value' atom)' path + ";" + atom' lambdas);                  }                  else if (atom == "*")                  {                      Walk(atom' tail' value' path' WalkWild' lambdas' -1);                  }                  else if (atom == "..")                  {                      Trace(tail' value' path' lambdas);                      Walk(atom' tail' value' path' WalkTree' lambdas' -1);                  }                  else if (atom.Length > 2 && atom[0] == '(' && atom[atom.Length - 1] == ')') // [(exp)]                  {                      Trace(Eval(atom' value' path.Substring(path.LastIndexOf(';') + 1)) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 2 && atom[0] == '{' && atom[atom.Length - 1] == '}') // [{N}]                  {                      var lambda = lambdas[int.Parse(atom.Substring(1' atom.Length - 2)' CultureInfo.InvariantCulture)];                      Trace(lambda.DynamicInvoke(atom' value' Bindings) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '(' && atom[atom.Length - 1] == ')') // [?(exp)]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' -1);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '{' && atom[atom.Length - 1] == '}') // [?{N}]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' int.Parse(atom.Substring(2' atom.Length - 3)' CultureInfo.InvariantCulture));                  }                  else if (REGEXP_SEGMENTED.IsMatch(atom)) // [start:end:step] Phyton slice syntax                  {                      Slice(atom' tail' value' path' lambdas);                  }                  else if (atom.IndexOf(''') >= 0) // [name1'name2'...]                  {                      foreach (string part in REGEXP_ITEMIZED.Split(atom))                          Trace(part + ";" + tail' value' path' lambdas);                  }
Magic Number,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Trace,The following statement contains a magic number: if (value != null && system.HasMember(value' atom))                  {                      Trace(tail' Index(value' atom)' path + ";" + atom' lambdas);                  }                  else if (atom == "*")                  {                      Walk(atom' tail' value' path' WalkWild' lambdas' -1);                  }                  else if (atom == "..")                  {                      Trace(tail' value' path' lambdas);                      Walk(atom' tail' value' path' WalkTree' lambdas' -1);                  }                  else if (atom.Length > 2 && atom[0] == '(' && atom[atom.Length - 1] == ')') // [(exp)]                  {                      Trace(Eval(atom' value' path.Substring(path.LastIndexOf(';') + 1)) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 2 && atom[0] == '{' && atom[atom.Length - 1] == '}') // [{N}]                  {                      var lambda = lambdas[int.Parse(atom.Substring(1' atom.Length - 2)' CultureInfo.InvariantCulture)];                      Trace(lambda.DynamicInvoke(atom' value' Bindings) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '(' && atom[atom.Length - 1] == ')') // [?(exp)]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' -1);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '{' && atom[atom.Length - 1] == '}') // [?{N}]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' int.Parse(atom.Substring(2' atom.Length - 3)' CultureInfo.InvariantCulture));                  }                  else if (REGEXP_SEGMENTED.IsMatch(atom)) // [start:end:step] Phyton slice syntax                  {                      Slice(atom' tail' value' path' lambdas);                  }                  else if (atom.IndexOf(''') >= 0) // [name1'name2'...]                  {                      foreach (string part in REGEXP_ITEMIZED.Split(atom))                          Trace(part + ";" + tail' value' path' lambdas);                  }
Magic Number,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Trace,The following statement contains a magic number: if (value != null && system.HasMember(value' atom))                  {                      Trace(tail' Index(value' atom)' path + ";" + atom' lambdas);                  }                  else if (atom == "*")                  {                      Walk(atom' tail' value' path' WalkWild' lambdas' -1);                  }                  else if (atom == "..")                  {                      Trace(tail' value' path' lambdas);                      Walk(atom' tail' value' path' WalkTree' lambdas' -1);                  }                  else if (atom.Length > 2 && atom[0] == '(' && atom[atom.Length - 1] == ')') // [(exp)]                  {                      Trace(Eval(atom' value' path.Substring(path.LastIndexOf(';') + 1)) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 2 && atom[0] == '{' && atom[atom.Length - 1] == '}') // [{N}]                  {                      var lambda = lambdas[int.Parse(atom.Substring(1' atom.Length - 2)' CultureInfo.InvariantCulture)];                      Trace(lambda.DynamicInvoke(atom' value' Bindings) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '(' && atom[atom.Length - 1] == ')') // [?(exp)]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' -1);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '{' && atom[atom.Length - 1] == '}') // [?{N}]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' int.Parse(atom.Substring(2' atom.Length - 3)' CultureInfo.InvariantCulture));                  }                  else if (REGEXP_SEGMENTED.IsMatch(atom)) // [start:end:step] Phyton slice syntax                  {                      Slice(atom' tail' value' path' lambdas);                  }                  else if (atom.IndexOf(''') >= 0) // [name1'name2'...]                  {                      foreach (string part in REGEXP_ITEMIZED.Split(atom))                          Trace(part + ";" + tail' value' path' lambdas);                  }
Magic Number,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Slice,The following statement contains a magic number: int step = parts.Length > 2 ? ParseInt(parts[2]' 1) : 1;
Magic Number,System.Text.Json.JsonPath,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Slice,The following statement contains a magic number: int step = parts.Length > 2 ? ParseInt(parts[2]' 1) : 1;
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,JsonParser,The following statement contains a magic number: for (char c = '0'; c <= '9'; c++) { HXD[c] = true; HEX[c] = (byte)(c - 48); }
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,JsonParser,The following statement contains a magic number: for (char c = 'A'; c <= 'F'; c++) { HXD[c] = HXD[c + 32] = true; HEX[c] = HEX[c + 32] = (byte)(c - 55); }
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,JsonParser,The following statement contains a magic number: for (char c = 'A'; c <= 'F'; c++) { HXD[c] = HXD[c + 32] = true; HEX[c] = HEX[c + 32] = (byte)(c - 55); }
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,JsonParser,The following statement contains a magic number: for (char c = 'A'; c <= 'F'; c++) { HXD[c] = HXD[c + 32] = true; HEX[c] = HEX[c + 32] = (byte)(c - 55); }
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,JsonParser,The following statement contains a magic number: for (int c = ANY; c < 128; c++) if (ESC[c] == ANY) ESC[c] = (char)c;
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,JsonParser,The following statement contains a magic number: for (int c = 'A'; c <= 'Z'; c++) IDF[c] = IDN[c] = IDF[c + 32] = IDN[c + 32] = true;
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,JsonParser,The following statement contains a magic number: for (int c = 'A'; c <= 'Z'; c++) IDF[c] = IDN[c] = IDF[c + 32] = IDN[c + 32] = true;
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Esc,The following statement contains a magic number: if (ec == 'u')              {                  while ((++ic < 4) && ((ch = Read()) <= 'f') && HXD[ch]) { cp *= 16; cp += HEX[ch]; }                  if (ic < 4) throw Error("Invalid Unicode character");                  ch = cp;              }              else                  ch = ESC[ec];
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Esc,The following statement contains a magic number: if (ec == 'u')              {                  while ((++ic < 4) && ((ch = Read()) <= 'f') && HXD[ch]) { cp *= 16; cp += HEX[ch]; }                  if (ic < 4) throw Error("Invalid Unicode character");                  ch = cp;              }              else                  ch = ESC[ec];
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Esc,The following statement contains a magic number: if (ec == 'u')              {                  while ((++ic < 4) && ((ch = Read()) <= 'f') && HXD[ch]) { cp *= 16; cp += HEX[ch]; }                  if (ic < 4) throw Error("Invalid Unicode character");                  ch = cp;              }              else                  ch = ESC[ec];
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,CharEsc,The following statement contains a magic number: if (ec == 'u')              {                  while ((++ic < 4) && ((ch = Read()) <= 'f') && HXD[ch]) { cp *= 16; cp += HEX[ch]; }                  if (ic < 4) throw Error("Invalid Unicode character");                  ch = cp;              }              else                  ch = ESC[ec];
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,CharEsc,The following statement contains a magic number: if (ec == 'u')              {                  while ((++ic < 4) && ((ch = Read()) <= 'f') && HXD[ch]) { cp *= 16; cp += HEX[ch]; }                  if (ic < 4) throw Error("Invalid Unicode character");                  ch = cp;              }              else                  ch = ESC[ec];
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,CharEsc,The following statement contains a magic number: if (ec == 'u')              {                  while ((++ic < 4) && ((ch = Read()) <= 'f') && HXD[ch]) { cp *= 16; cp += HEX[ch]; }                  if (ic < 4) throw Error("Invalid Unicode character");                  ch = cp;              }              else                  ch = ESC[ec];
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetEnumInfo,The following statement contains a magic number: while (true)              {                  int ch;                  if ((ch = chr) == '"')                  {                      Read();                      return (((i < n) && (c > 0)) ? a[i] : null);                  }                  bool e = ch == '\\';                  if (e)                      ch = Read();                  if (ch < EOF)                  {                      if (!e || (ch >= 128))                          Read();                      else                          ch = Esc(ch);                  }                  else                      break;                  EnumInfo ei;                  while ((i < n) && ((c >= (ei = a[i]).Len) || (ei.Name[c] != ch))) i++;                  c++;              }
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseSByte,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (sbyte)(it * (ch - 48)); } ch = Read(); }
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseSByte,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (sbyte)(it * (ch - 48)); } ch = Read(); }
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseByte,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (byte)(ch - 48); } ch = Read(); }
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseByte,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (byte)(ch - 48); } ch = Read(); }
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt16,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (short)(it * (ch - 48)); } ch = Read(); }
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt16,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (short)(it * (ch - 48)); } ch = Read(); }
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseUInt16,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (ushort)(ch - 48); } ch = Read(); }
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseUInt16,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (ushort)(ch - 48); } ch = Read(); }
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt32,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (it * (ch - 48)); } ch = Read(); }
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt32,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (it * (ch - 48)); } ch = Read(); }
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseUInt32,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (uint)(ch - 48); } ch = Read(); }
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseUInt32,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (uint)(ch - 48); } ch = Read(); }
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt64,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += it * (ch - 48); } ch = Read(); }
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseInt64,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += it * (ch - 48); } ch = Read(); }
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseUInt64,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (ulong)(ch - 48); } ch = Read(); }
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseUInt64,The following statement contains a magic number: if (b) while ((ch >= '0') && (ch <= '9')) { checked { n *= 10; n += (ulong)(ch - 48); } ch = Read(); }
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,ParseString,The following statement contains a magic number: if (ch == '"')              {                  Read();                  lsb.Length = 0;                  lln = 0;                  while (true)                  {                      if ((ch = chr) == '"')                      {                          Read();                          return ((lsb.Length > 0) ? lsb.ToString() : new string(lbf' 0' lln));                      }                      bool e = ch == '\\';                      if (e)                          ch = Read();                      if (ch < EOF)                      {                          if (!e || (ch >= 128))                              Char(ch);                          else                              CharEsc(ch);                          }                      else                          break;                  }              }
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,PastKey,The following statement contains a magic number: while (true)              {                  if ((ch = chr) == '"')                  {                      Read();                      return;                  }                  bool e = ch == '\\';                  if (e)                      ch = Read();                  if (ch < EOF)                  {                      if (!e || (ch >= 128))                          Read();                      else                      {                          Esc(ch);                      }                  }                  else break;              }
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Str,The following statement contains a magic number: if ((outer != 2) || ((s != null) && (s.Length == 1)))                  return ((outer == 2) ? (object) s[0] : s);
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Str,The following statement contains a magic number: if ((outer != 2) || ((s != null) && (s.Length == 1)))                  return ((outer == 2) ? (object) s[0] : s);
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,GetKeyValueTypes,The following statement contains a magic number: var kvPair = ((generic != null) && (generic.GetGenericArguments().Length == 2));
Magic Number,System.Text.Json,JsonParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,JsonParser,The following statement contains a magic number: for (var input = 0; input < 128; input++) parse[input] = (parse[input] ?? Error);
Magic Number,System.Text.Json,TypeInfo,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,TypeInfo,The following statement contains a magic number: var props = ((self > 2) ? type.GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public) : new System.Reflection.PropertyInfo[] { });
Magic Number,System.Text.Json,JsonPathContext,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,SelectTo,The following statement contains a magic number: if (expression.Length >= 1 && expression[0] == '$') // ^\$:?                  expression = expression.Substring(expression.Length >= 2 && expression[1] == ';' ? 2 : 1);
Magic Number,System.Text.Json,JsonPathContext,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,SelectTo,The following statement contains a magic number: if (expression.Length >= 1 && expression[0] == '$') // ^\$:?                  expression = expression.Substring(expression.Length >= 2 && expression[1] == ';' ? 2 : 1);
Magic Number,System.Text.Json,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Trace,The following statement contains a magic number: if (value != null && system.HasMember(value' atom))                  {                      Trace(tail' Index(value' atom)' path + ";" + atom' lambdas);                  }                  else if (atom == "*")                  {                      Walk(atom' tail' value' path' WalkWild' lambdas' -1);                  }                  else if (atom == "..")                  {                      Trace(tail' value' path' lambdas);                      Walk(atom' tail' value' path' WalkTree' lambdas' -1);                  }                  else if (atom.Length > 2 && atom[0] == '(' && atom[atom.Length - 1] == ')') // [(exp)]                  {                      Trace(Eval(atom' value' path.Substring(path.LastIndexOf(';') + 1)) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 2 && atom[0] == '{' && atom[atom.Length - 1] == '}') // [{N}]                  {                      var lambda = lambdas[int.Parse(atom.Substring(1' atom.Length - 2)' CultureInfo.InvariantCulture)];                      Trace(lambda.DynamicInvoke(atom' value' Bindings) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '(' && atom[atom.Length - 1] == ')') // [?(exp)]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' -1);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '{' && atom[atom.Length - 1] == '}') // [?{N}]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' int.Parse(atom.Substring(2' atom.Length - 3)' CultureInfo.InvariantCulture));                  }                  else if (REGEXP_SEGMENTED.IsMatch(atom)) // [start:end:step] Phyton slice syntax                  {                      Slice(atom' tail' value' path' lambdas);                  }                  else if (atom.IndexOf(''') >= 0) // [name1'name2'...]                  {                      foreach (string part in REGEXP_ITEMIZED.Split(atom))                          Trace(part + ";" + tail' value' path' lambdas);                  }
Magic Number,System.Text.Json,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Trace,The following statement contains a magic number: if (value != null && system.HasMember(value' atom))                  {                      Trace(tail' Index(value' atom)' path + ";" + atom' lambdas);                  }                  else if (atom == "*")                  {                      Walk(atom' tail' value' path' WalkWild' lambdas' -1);                  }                  else if (atom == "..")                  {                      Trace(tail' value' path' lambdas);                      Walk(atom' tail' value' path' WalkTree' lambdas' -1);                  }                  else if (atom.Length > 2 && atom[0] == '(' && atom[atom.Length - 1] == ')') // [(exp)]                  {                      Trace(Eval(atom' value' path.Substring(path.LastIndexOf(';') + 1)) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 2 && atom[0] == '{' && atom[atom.Length - 1] == '}') // [{N}]                  {                      var lambda = lambdas[int.Parse(atom.Substring(1' atom.Length - 2)' CultureInfo.InvariantCulture)];                      Trace(lambda.DynamicInvoke(atom' value' Bindings) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '(' && atom[atom.Length - 1] == ')') // [?(exp)]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' -1);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '{' && atom[atom.Length - 1] == '}') // [?{N}]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' int.Parse(atom.Substring(2' atom.Length - 3)' CultureInfo.InvariantCulture));                  }                  else if (REGEXP_SEGMENTED.IsMatch(atom)) // [start:end:step] Phyton slice syntax                  {                      Slice(atom' tail' value' path' lambdas);                  }                  else if (atom.IndexOf(''') >= 0) // [name1'name2'...]                  {                      foreach (string part in REGEXP_ITEMIZED.Split(atom))                          Trace(part + ";" + tail' value' path' lambdas);                  }
Magic Number,System.Text.Json,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Trace,The following statement contains a magic number: if (value != null && system.HasMember(value' atom))                  {                      Trace(tail' Index(value' atom)' path + ";" + atom' lambdas);                  }                  else if (atom == "*")                  {                      Walk(atom' tail' value' path' WalkWild' lambdas' -1);                  }                  else if (atom == "..")                  {                      Trace(tail' value' path' lambdas);                      Walk(atom' tail' value' path' WalkTree' lambdas' -1);                  }                  else if (atom.Length > 2 && atom[0] == '(' && atom[atom.Length - 1] == ')') // [(exp)]                  {                      Trace(Eval(atom' value' path.Substring(path.LastIndexOf(';') + 1)) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 2 && atom[0] == '{' && atom[atom.Length - 1] == '}') // [{N}]                  {                      var lambda = lambdas[int.Parse(atom.Substring(1' atom.Length - 2)' CultureInfo.InvariantCulture)];                      Trace(lambda.DynamicInvoke(atom' value' Bindings) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '(' && atom[atom.Length - 1] == ')') // [?(exp)]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' -1);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '{' && atom[atom.Length - 1] == '}') // [?{N}]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' int.Parse(atom.Substring(2' atom.Length - 3)' CultureInfo.InvariantCulture));                  }                  else if (REGEXP_SEGMENTED.IsMatch(atom)) // [start:end:step] Phyton slice syntax                  {                      Slice(atom' tail' value' path' lambdas);                  }                  else if (atom.IndexOf(''') >= 0) // [name1'name2'...]                  {                      foreach (string part in REGEXP_ITEMIZED.Split(atom))                          Trace(part + ";" + tail' value' path' lambdas);                  }
Magic Number,System.Text.Json,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Trace,The following statement contains a magic number: if (value != null && system.HasMember(value' atom))                  {                      Trace(tail' Index(value' atom)' path + ";" + atom' lambdas);                  }                  else if (atom == "*")                  {                      Walk(atom' tail' value' path' WalkWild' lambdas' -1);                  }                  else if (atom == "..")                  {                      Trace(tail' value' path' lambdas);                      Walk(atom' tail' value' path' WalkTree' lambdas' -1);                  }                  else if (atom.Length > 2 && atom[0] == '(' && atom[atom.Length - 1] == ')') // [(exp)]                  {                      Trace(Eval(atom' value' path.Substring(path.LastIndexOf(';') + 1)) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 2 && atom[0] == '{' && atom[atom.Length - 1] == '}') // [{N}]                  {                      var lambda = lambdas[int.Parse(atom.Substring(1' atom.Length - 2)' CultureInfo.InvariantCulture)];                      Trace(lambda.DynamicInvoke(atom' value' Bindings) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '(' && atom[atom.Length - 1] == ')') // [?(exp)]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' -1);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '{' && atom[atom.Length - 1] == '}') // [?{N}]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' int.Parse(atom.Substring(2' atom.Length - 3)' CultureInfo.InvariantCulture));                  }                  else if (REGEXP_SEGMENTED.IsMatch(atom)) // [start:end:step] Phyton slice syntax                  {                      Slice(atom' tail' value' path' lambdas);                  }                  else if (atom.IndexOf(''') >= 0) // [name1'name2'...]                  {                      foreach (string part in REGEXP_ITEMIZED.Split(atom))                          Trace(part + ";" + tail' value' path' lambdas);                  }
Magic Number,System.Text.Json,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Trace,The following statement contains a magic number: if (value != null && system.HasMember(value' atom))                  {                      Trace(tail' Index(value' atom)' path + ";" + atom' lambdas);                  }                  else if (atom == "*")                  {                      Walk(atom' tail' value' path' WalkWild' lambdas' -1);                  }                  else if (atom == "..")                  {                      Trace(tail' value' path' lambdas);                      Walk(atom' tail' value' path' WalkTree' lambdas' -1);                  }                  else if (atom.Length > 2 && atom[0] == '(' && atom[atom.Length - 1] == ')') // [(exp)]                  {                      Trace(Eval(atom' value' path.Substring(path.LastIndexOf(';') + 1)) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 2 && atom[0] == '{' && atom[atom.Length - 1] == '}') // [{N}]                  {                      var lambda = lambdas[int.Parse(atom.Substring(1' atom.Length - 2)' CultureInfo.InvariantCulture)];                      Trace(lambda.DynamicInvoke(atom' value' Bindings) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '(' && atom[atom.Length - 1] == ')') // [?(exp)]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' -1);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '{' && atom[atom.Length - 1] == '}') // [?{N}]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' int.Parse(atom.Substring(2' atom.Length - 3)' CultureInfo.InvariantCulture));                  }                  else if (REGEXP_SEGMENTED.IsMatch(atom)) // [start:end:step] Phyton slice syntax                  {                      Slice(atom' tail' value' path' lambdas);                  }                  else if (atom.IndexOf(''') >= 0) // [name1'name2'...]                  {                      foreach (string part in REGEXP_ITEMIZED.Split(atom))                          Trace(part + ";" + tail' value' path' lambdas);                  }
Magic Number,System.Text.Json,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Trace,The following statement contains a magic number: if (value != null && system.HasMember(value' atom))                  {                      Trace(tail' Index(value' atom)' path + ";" + atom' lambdas);                  }                  else if (atom == "*")                  {                      Walk(atom' tail' value' path' WalkWild' lambdas' -1);                  }                  else if (atom == "..")                  {                      Trace(tail' value' path' lambdas);                      Walk(atom' tail' value' path' WalkTree' lambdas' -1);                  }                  else if (atom.Length > 2 && atom[0] == '(' && atom[atom.Length - 1] == ')') // [(exp)]                  {                      Trace(Eval(atom' value' path.Substring(path.LastIndexOf(';') + 1)) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 2 && atom[0] == '{' && atom[atom.Length - 1] == '}') // [{N}]                  {                      var lambda = lambdas[int.Parse(atom.Substring(1' atom.Length - 2)' CultureInfo.InvariantCulture)];                      Trace(lambda.DynamicInvoke(atom' value' Bindings) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '(' && atom[atom.Length - 1] == ')') // [?(exp)]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' -1);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '{' && atom[atom.Length - 1] == '}') // [?{N}]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' int.Parse(atom.Substring(2' atom.Length - 3)' CultureInfo.InvariantCulture));                  }                  else if (REGEXP_SEGMENTED.IsMatch(atom)) // [start:end:step] Phyton slice syntax                  {                      Slice(atom' tail' value' path' lambdas);                  }                  else if (atom.IndexOf(''') >= 0) // [name1'name2'...]                  {                      foreach (string part in REGEXP_ITEMIZED.Split(atom))                          Trace(part + ";" + tail' value' path' lambdas);                  }
Magic Number,System.Text.Json,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Trace,The following statement contains a magic number: if (value != null && system.HasMember(value' atom))                  {                      Trace(tail' Index(value' atom)' path + ";" + atom' lambdas);                  }                  else if (atom == "*")                  {                      Walk(atom' tail' value' path' WalkWild' lambdas' -1);                  }                  else if (atom == "..")                  {                      Trace(tail' value' path' lambdas);                      Walk(atom' tail' value' path' WalkTree' lambdas' -1);                  }                  else if (atom.Length > 2 && atom[0] == '(' && atom[atom.Length - 1] == ')') // [(exp)]                  {                      Trace(Eval(atom' value' path.Substring(path.LastIndexOf(';') + 1)) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 2 && atom[0] == '{' && atom[atom.Length - 1] == '}') // [{N}]                  {                      var lambda = lambdas[int.Parse(atom.Substring(1' atom.Length - 2)' CultureInfo.InvariantCulture)];                      Trace(lambda.DynamicInvoke(atom' value' Bindings) + ";" + tail' value' path' lambdas);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '(' && atom[atom.Length - 1] == ')') // [?(exp)]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' -1);                  }                  else if (atom.Length > 3 && atom[0] == '?' && atom[1] == '{' && atom[atom.Length - 1] == '}') // [?{N}]                  {                      Walk(atom' tail' value' path' WalkFiltered' lambdas' int.Parse(atom.Substring(2' atom.Length - 3)' CultureInfo.InvariantCulture));                  }                  else if (REGEXP_SEGMENTED.IsMatch(atom)) // [start:end:step] Phyton slice syntax                  {                      Slice(atom' tail' value' path' lambdas);                  }                  else if (atom.IndexOf(''') >= 0) // [name1'name2'...]                  {                      foreach (string part in REGEXP_ITEMIZED.Split(atom))                          Trace(part + ";" + tail' value' path' lambdas);                  }
Magic Number,System.Text.Json,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Slice,The following statement contains a magic number: int step = parts.Length > 2 ? ParseInt(parts[2]' 1) : 1;
Magic Number,System.Text.Json,Interpreter,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\JsonParser.cs,Slice,The following statement contains a magic number: int step = parts.Length > 2 ? ParseInt(parts[2]' 1) : 1;
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextChar,The following statement contains a magic number: for (int i = 0; i < 2147483647; i++)              {                  if (this.Index + this.Length + i >= this.Content.Length)                  {                      result = false;                      return result;                  }                  cNext = this.Content[this.Index + this.Length];                  if (!ignoreWhiteSpace || !char.IsWhiteSpace(cNext))                  {                      break;                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextChar,The following statement contains a magic number: for (int i = 0; i < 2147483647; i++)              {                  if (this.Index + this.Length + i >= this.Content.Length)                  {                      result = false;                      return result;                  }                  cNext = this.Content[this.Index + this.Length];                  if (!ignoreWhiteSpace || !char.IsWhiteSpace(cNext))                  {                      break;                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextChar,The following statement contains a magic number: for (int i = 0; i < 2147483647; i++)              {                  if (this.Index + this.Length + i >= this.Content.Length)                  {                      result = false;                      return result;                  }                  cNext = this.Content[this.Index + this.Length];                  if (!ignoreWhiteSpace || !char.IsWhiteSpace(cNext))                  {                      break;                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextChar,The following statement contains a magic number: for (int i = 0; i < 2147483647; i++)              {                  if (this.Index + this.Length + i >= this.Content.Length)                  {                      result = false;                      return result;                  }                  cNext = this.Content[this.Index + this.Length];                  if (!ignoreWhiteSpace || !char.IsWhiteSpace(cNext))                  {                      break;                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextChar,The following statement contains a magic number: for (int i = 0; i < 2147483647; i++)              {                  if (this.Index + this.Length + i >= this.Content.Length)                  {                      result = false;                      return result;                  }                  cNext = this.Content[this.Index + this.Length];                  if (!ignoreWhiteSpace || !char.IsWhiteSpace(cNext))                  {                      break;                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextChar,The following statement contains a magic number: for (int i = 0; i < 2147483647; i++)              {                  if (this.Index + this.Length + i >= this.Content.Length)                  {                      result = false;                      return result;                  }                  cNext = this.Content[this.Index + this.Length];                  if (!ignoreWhiteSpace || !char.IsWhiteSpace(cNext))                  {                      break;                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextChar,The following statement contains a magic number: for (int i = 0; i < 2147483647; i++)              {                  if (this.Index + this.Length + i >= this.Content.Length)                  {                      result = false;                      return result;                  }                  cNext = this.Content[this.Index + this.Length];                  if (!ignoreWhiteSpace || !char.IsWhiteSpace(cNext))                  {                      break;                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextChar,The following statement contains a magic number: for (int i = 0; i < 2147483647; i++)              {                  if (this.Index + this.Length + i >= this.Content.Length)                  {                      result = false;                      return result;                  }                  cNext = this.Content[this.Index + this.Length];                  if (!ignoreWhiteSpace || !char.IsWhiteSpace(cNext))                  {                      break;                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextChar,The following statement contains a magic number: for (int i = 0; i < 2147483647; i++)              {                  if (this.Index + this.Length + i >= this.Content.Length)                  {                      result = false;                      return result;                  }                  cNext = this.Content[this.Index + this.Length];                  if (!ignoreWhiteSpace || !char.IsWhiteSpace(cNext))                  {                      break;                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextChar,The following statement contains a magic number: for (int i = 0; i < 2147483647; i++)              {                  if (this.Index + this.Length + i >= this.Content.Length)                  {                      result = false;                      return result;                  }                  cNext = this.Content[this.Index + this.Length];                  if (!ignoreWhiteSpace || !char.IsWhiteSpace(cNext))                  {                      break;                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextChar,The following statement contains a magic number: for (int i = 0; i < 2147483647; i++)              {                  if (this.Index + this.Length + i >= this.Content.Length)                  {                      result = false;                      return result;                  }                  cNext = this.Content[this.Index + this.Length];                  if (!ignoreWhiteSpace || !char.IsWhiteSpace(cNext))                  {                      break;                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The following statement contains a magic number: object[] array2 = new object[objects.Length + 2];
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The following statement contains a magic number: Array.Copy(objects' 0' array2' 2' objects.Length);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The following statement contains a magic number: object[] array2 = new object[objects.Length + 2];
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The following statement contains a magic number: Array.Copy(objects' 0' array2' 2' objects.Length);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The following statement contains a magic number: object[] array2 = new object[objects.Length + 2];
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The following statement contains a magic number: Array.Copy(objects' 0' array2' 2' objects.Length);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The following statement contains a magic number: object[] array2 = new object[objects.Length + 2];
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The following statement contains a magic number: Array.Copy(objects' 0' array2' 2' objects.Length);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The following statement contains a magic number: object[] array2 = new object[objects.Length + 2];
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The following statement contains a magic number: Array.Copy(objects' 0' array2' 2' objects.Length);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The following statement contains a magic number: object[] array2 = new object[objects.Length + 2];
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The following statement contains a magic number: Array.Copy(objects' 0' array2' 2' objects.Length);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The following statement contains a magic number: object[] array2 = new object[objects.Length + 2];
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The following statement contains a magic number: Array.Copy(objects' 0' array2' 2' objects.Length);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The following statement contains a magic number: object[] array2 = new object[objects.Length + 2];
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The following statement contains a magic number: Array.Copy(objects' 0' array2' 2' objects.Length);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The following statement contains a magic number: object[] array2 = new object[objects.Length + 2];
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The following statement contains a magic number: Array.Copy(objects' 0' array2' 2' objects.Length);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The following statement contains a magic number: object[] array2 = new object[objects.Length + 2];
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The following statement contains a magic number: Array.Copy(objects' 0' array2' 2' objects.Length);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The following statement contains a magic number: object[] array2 = new object[objects.Length + 2];
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The following statement contains a magic number: Array.Copy(objects' 0' array2' 2' objects.Length);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("("' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(")"' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("["' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("]"' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("."' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("function()"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("index[]"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("++behind"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("--behind"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("new"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("typeof"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("checked"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("unchecked"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("->"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("++before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("--before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("!"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("~"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("convert()"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("sizeof"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("*"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("/"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("%"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+"' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-"' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<<"' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">>"' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">="' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<="' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("is"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("as"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("=="' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("!="' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("^"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("|"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&&"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("||"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("?"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("??"' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("*="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("/="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("%="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("|="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("^="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">>="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<<="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(short)' 2);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(ushort)' 3);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(int)' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(uint)' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(long)' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(ulong)' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(float)' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(double)' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(decimal)' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("("' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(")"' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("["' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("]"' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("."' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("function()"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("index[]"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("++behind"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("--behind"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("new"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("typeof"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("checked"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("unchecked"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("->"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("++before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("--before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("!"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("~"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("convert()"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("sizeof"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("*"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("/"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("%"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+"' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-"' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<<"' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">>"' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">="' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<="' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("is"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("as"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("=="' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("!="' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("^"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("|"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&&"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("||"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("?"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("??"' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("*="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("/="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("%="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("|="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("^="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">>="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<<="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(short)' 2);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(ushort)' 3);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(int)' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(uint)' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(long)' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(ulong)' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(float)' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(double)' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(decimal)' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("("' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(")"' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("["' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("]"' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("."' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("function()"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("index[]"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("++behind"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("--behind"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("new"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("typeof"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("checked"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("unchecked"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("->"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("++before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("--before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("!"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("~"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("convert()"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("sizeof"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("*"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("/"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("%"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+"' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-"' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<<"' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">>"' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">="' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<="' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("is"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("as"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("=="' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("!="' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("^"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("|"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&&"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("||"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("?"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("??"' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("*="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("/="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("%="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("|="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("^="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">>="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<<="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(short)' 2);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(ushort)' 3);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(int)' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(uint)' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(long)' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(ulong)' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(float)' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(double)' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(decimal)' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("("' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(")"' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("["' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("]"' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("."' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("function()"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("index[]"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("++behind"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("--behind"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("new"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("typeof"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("checked"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("unchecked"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("->"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("++before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("--before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("!"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("~"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("convert()"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("sizeof"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("*"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("/"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("%"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+"' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-"' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<<"' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">>"' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">="' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<="' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("is"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("as"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("=="' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("!="' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("^"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("|"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&&"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("||"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("?"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("??"' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("*="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("/="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("%="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("|="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("^="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">>="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<<="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(short)' 2);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(ushort)' 3);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(int)' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(uint)' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(long)' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(ulong)' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(float)' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(double)' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(decimal)' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("("' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(")"' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("["' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("]"' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("."' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("function()"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("index[]"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("++behind"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("--behind"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("new"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("typeof"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("checked"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("unchecked"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("->"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("++before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("--before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("!"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("~"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("convert()"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("sizeof"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("*"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("/"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("%"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+"' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-"' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<<"' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">>"' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">="' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<="' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("is"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("as"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("=="' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("!="' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("^"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("|"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&&"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("||"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("?"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("??"' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("*="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("/="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("%="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("|="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("^="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">>="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<<="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(short)' 2);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(ushort)' 3);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(int)' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(uint)' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(long)' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(ulong)' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(float)' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(double)' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(decimal)' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("("' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(")"' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("["' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("]"' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("."' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("function()"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("index[]"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("++behind"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("--behind"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("new"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("typeof"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("checked"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("unchecked"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("->"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("++before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("--before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("!"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("~"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("convert()"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("sizeof"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("*"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("/"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("%"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+"' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-"' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<<"' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">>"' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">="' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<="' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("is"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("as"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("=="' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("!="' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("^"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("|"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&&"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("||"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("?"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("??"' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("*="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("/="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("%="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("|="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("^="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">>="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<<="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(short)' 2);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(ushort)' 3);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(int)' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(uint)' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(long)' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(ulong)' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(float)' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(double)' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(decimal)' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("("' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(")"' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("["' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("]"' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("."' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("function()"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("index[]"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("++behind"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("--behind"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("new"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("typeof"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("checked"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("unchecked"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("->"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("++before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("--before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("!"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("~"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("convert()"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("sizeof"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("*"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("/"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("%"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+"' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-"' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<<"' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">>"' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">="' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<="' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("is"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("as"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("=="' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("!="' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("^"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("|"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&&"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("||"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("?"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("??"' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("*="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("/="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("%="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("|="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("^="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">>="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<<="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(short)' 2);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(ushort)' 3);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(int)' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(uint)' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(long)' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(ulong)' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(float)' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(double)' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(decimal)' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("("' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(")"' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("["' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("]"' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("."' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("function()"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("index[]"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("++behind"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("--behind"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("new"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("typeof"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("checked"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("unchecked"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("->"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("++before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("--before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("!"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("~"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("convert()"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("sizeof"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("*"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("/"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("%"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+"' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-"' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<<"' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">>"' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">="' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<="' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("is"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("as"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("=="' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("!="' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("^"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("|"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&&"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("||"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("?"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("??"' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("*="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("/="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("%="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("|="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("^="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">>="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<<="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(short)' 2);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(ushort)' 3);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(int)' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(uint)' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(long)' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(ulong)' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(float)' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(double)' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(decimal)' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("("' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(")"' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("["' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("]"' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("."' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("function()"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("index[]"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("++behind"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("--behind"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("new"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("typeof"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("checked"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("unchecked"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("->"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("++before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("--before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("!"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("~"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("convert()"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("sizeof"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("*"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("/"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("%"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+"' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-"' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<<"' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">>"' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">="' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<="' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("is"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("as"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("=="' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("!="' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("^"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("|"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&&"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("||"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("?"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("??"' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("*="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("/="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("%="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("|="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("^="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">>="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<<="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(short)' 2);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(ushort)' 3);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(int)' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(uint)' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(long)' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(ulong)' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(float)' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(double)' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(decimal)' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("("' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(")"' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("["' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("]"' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("."' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("function()"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("index[]"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("++behind"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("--behind"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("new"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("typeof"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("checked"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("unchecked"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("->"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("++before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("--before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("!"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("~"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("convert()"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("sizeof"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("*"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("/"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("%"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+"' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-"' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<<"' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">>"' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">="' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<="' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("is"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("as"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("=="' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("!="' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("^"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("|"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&&"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("||"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("?"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("??"' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("*="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("/="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("%="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("|="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("^="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">>="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<<="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(short)' 2);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(ushort)' 3);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(int)' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(uint)' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(long)' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(ulong)' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(float)' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(double)' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(decimal)' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("("' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(")"' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("["' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("]"' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("."' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("function()"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("index[]"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("++behind"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("--behind"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("new"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("typeof"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("checked"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("unchecked"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("->"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("++before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("--before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("!"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("~"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("convert()"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("sizeof"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("*"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("/"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("%"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+"' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-"' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<<"' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">>"' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">="' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<="' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("is"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("as"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("=="' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("!="' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("^"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("|"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&&"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("||"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("?"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("??"' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("*="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("/="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("%="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("|="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("^="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">>="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<<="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(short)' 2);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(ushort)' 3);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(int)' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(uint)' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(long)' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(ulong)' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(float)' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(double)' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(decimal)' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Read,The following statement contains a magic number: if (this.Index == this.Content.Length)              {                  this.Index = 0;                  result = false;              }              else              {                  if (isIgnoreWhiteSpace && char.IsWhiteSpace(this.Content' this.Index))                  {                      result = this.Read(isBuildDefineString' isIgnoreWhiteSpace);                  }                  else                  {                      char c = this.Content[this.Index];                      if (char.IsLetter(c) || c == '_' || c == '$')                      {                          this.Length = 1;                          while (this.Length + this.Index < this.Content.Length)                          {                              char c2 = this.Content[this.Index + this.Length];                              if (!char.IsLetterOrDigit(c2) && c2 != '_')                              {                                  result = true;                                  return result;                              }                              this.Length++;                          }                          result = true;                      }                      else                      {                          if (char.IsDigit(c))                          {                              this.Length = 1;                              while (this.Length + this.Index < this.Content.Length)                              {                                  char c2 = this.Content[this.Index + this.Length];                                  if (c2 == '.')                                  {                                      char c3 = this.Content[this.Index + this.Length + 1];                                      if (!char.IsDigit(c3))                                      {                                          result = true;                                          return result;                                      }                                  }                                  if (!char.IsDigit(c2) && c2 != '.' && c2 != 'M' && c2 != 'm' && c2 != 'D' && c2 != 'd' && c2 != 'F' && c2 != 'f' && c2 != 'L' && c2 != 'l' && c2 != 'X' && c2 != 'x')                                  {                                      result = true;                                      return result;                                  }                                  this.Length++;                              }                              result = true;                          }                          else                          {                              char c4;                              if (!this.TryGetNextChar(false' out c4))                              {                                  result = true;                              }                              else                              {                                  char c5 = c;                                  if (c5 <= '@')                                  {                                      if (c5 != '\t')                                      {                                          switch (c5)                                          {                                              case ' ':                                              case '!':                                              case '%':                                              case '(':                                              case ')':                                              case '*':                                              case '+':                                              case ''':                                              case '-':                                              case '.':                                              case ':':                                              case ';':                                                  break;                                              case '"':                                                  {                                                      StringBuilder stringBuilder = null;                                                      int num = this.Index + this.Length;                                                      if (isBuildDefineString)                                                      {                                                          stringBuilder = new StringBuilder();                                                      }                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '\\')                                                          {                                                              i++;                                                              if (isBuildDefineString)                                                              {                                                                  stringBuilder.Append(this.Content' num' i - num - 1);                                                                  num = i + 1;                                                                  char chOriginal = this.Content[i];                                                                  char transformMeanChar = this.GetTransformMeanChar(chOriginal);                                                                  stringBuilder.Append(transformMeanChar);                                                              }                                                          }                                                          else                                                          {                                                              if (this.Content[i] == '"')                                                              {                                                                  this.Length = i - this.Index + 1;                                                                  if (isBuildDefineString)                                                                  {                                                                      stringBuilder.Append(this.Content' num' i - num);                                                                      this.DefineString = stringBuilder.ToString();                                                                  }                                                                  result = true;                                                                  return result;                                                              }                                                          }                                                      }                                                      throw new ParseNoEndException("\""' this.Index);                                                  }                                              case '#':                                              case '$':                                              case '0':                                              case '1':                                              case '2':                                              case '3':                                              case '4':                                              case '5':                                              case '6':                                              case '7':                                              case '8':                                              case '9':                                                  goto IL_830;                                              case '&':                                              case '?':                                                  goto IL_378;                                              case '\'':                                                  for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                  {                                                      if (this.Content[i] == '\\')                                                      {                                                          i++;                                                      }                                                      else                                                      {                                                          if (this.Content[i] == '\'')                                                          {                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  if (this.Length == 3)                                                                  {                                                                      this.DefineString = this.Content.Substring(this.Index + 1' 1);                                                                  }                                                                  else                                                                  {                                                                      if (this.Length == 4 && this.Content[this.Index + 1] == '\\')                                                                      {                                                                          this.DefineString = this.GetTransformMeanChar(this.Content[this.Index + 2]).ToString();                                                                      }                                                                  }                                                              }                                                              result = true;                                                              return result;                                                          }                                                      }                                                  }                                                  throw new ParseNoEndException("'"' this.Index);                                              case '/':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("\n"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          this.Length = this.Content.Length - this.Index;                                                      }                                                      else                                                      {                                                          this.Length = stringIndex - this.Index + "\n".Length;                                                      }                                                      result = true;                                                      return result;                                                  }                                                  if (c4 == '*')                                                  {                                                      this.Length++;                                                      int stringIndex = this.GetStringIndex("*/"' this.Index + this.Length);                                                      if (stringIndex == -1)                                                      {                                                          throw new ParseNoEndException("/*"' this.Index);                                                      }                                                      this.Length = stringIndex - this.Index + "*/".Length;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '<':                                              case '>':                                                  if (c4 == c)                                                  {                                                      this.Length++;                                                  }                                                  break;                                              case '=':                                                  if (c4 == '>')                                                  {                                                      this.Length++;                                                      result = true;                                                      return result;                                                  }                                                  break;                                              case '@':                                                  if (c4 == '"')                                                  {                                                      this.Length++;                                                      for (int i = this.Index + this.Length; i < this.Content.Length; i++)                                                      {                                                          if (this.Content[i] == '"')                                                          {                                                              if (i + 1 < this.Content.Length)                                                              {                                                                  if (this.Content[i + 1] == '"')                                                                  {                                                                      i++;                                                                      goto IL_80F;                                                                  }                                                              }                                                              this.Length = i - this.Index + 1;                                                              if (isBuildDefineString)                                                              {                                                                  this.DefineString = this.Content.Substring(this.Index + 2' this.Length - 3).Replace("\"\""' "\"");                                                              }                                                              result = true;                                                              return result;                                                          }                                                      IL_80F: ;                                                      }                                                  }                                                  break;                                              default:                                                  goto IL_830;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '[':                                          case ']':                                          case '^':                                              break;                                          case '\\':                                              goto IL_830;                                          default:                                              switch (c5)                                              {                                                  case '{':                                                  case '}':                                                  case '~':                                                      break;                                                  case '|':                                                      goto IL_378;                                                  default:                                                      goto IL_830;                                              }                                              break;                                      }                                  }                                  goto IL_843;                              IL_378:                                  if (c4 == c)                                  {                                      this.Length++;                                      result = true;                                      return result;                                  }                                  goto IL_843;                              IL_830:                                  throw new ParseUnknownException(c.ToString()' this.Index);                              IL_843:                                  c5 = c;                                  if (c5 <= '/')                                  {                                      if (c5 != '!')                                      {                                          switch (c5)                                          {                                              case '%':                                              case '&':                                              case '*':                                              case '+':                                              case '-':                                              case '/':                                                  break;                                              case '\'':                                              case '(':                                              case ')':                                              case ''':                                              case '.':                                                  goto IL_8E4;                                              default:                                                  goto IL_8E4;                                          }                                      }                                  }                                  else                                  {                                      switch (c5)                                      {                                          case '<':                                          case '=':                                          case '>':                                              break;                                          default:                                              if (c5 != '^' && c5 != '|')                                              {                                                  goto IL_8E4;                                              }                                              break;                                      }                                  }                                  if (!this.TryGetNextChar(false' out c4))                                  {                                      result = true;                                      return result;                                  }                                  if (c4 == '=')                                  {                                      this.Length++;                                  }                              IL_8E4:                                  result = true;                              }                          }                      }                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,TryGetNextChar,The following statement contains a magic number: for (int i = 0; i < 2147483647; i++)              {                  if (this.Index + this.Length + i >= this.Content.Length)                  {                      result = false;                      return result;                  }                  cNext = this.Content[this.Index + this.Length];                  if (!ignoreWhiteSpace || !char.IsWhiteSpace(cNext))                  {                      break;                  }              }
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The following statement contains a magic number: object[] array2 = new object[objects.Length + 2];
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,Exec,The following statement contains a magic number: Array.Copy(objects' 0' array2' 2' objects.Length);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("("' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(")"' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("["' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("]"' 100);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("."' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("function()"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("index[]"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("++behind"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("--behind"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("new"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("typeof"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("checked"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("unchecked"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("->"' 13);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("++before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("--before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-before"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("!"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("~"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("convert()"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("sizeof"' 12);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("*"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("/"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("%"' 11);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+"' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-"' 10);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<<"' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">>"' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">="' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<="' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("is"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("as"' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("=="' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("!="' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("^"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("|"' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&&"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("||"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("?"' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("??"' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("+="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("-="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("*="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("/="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("%="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("&="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("|="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("^="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add(">>="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _operatorPriorityLevel.Add("<<="' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(short)' 2);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(ushort)' 3);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(int)' 4);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(uint)' 5);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(long)' 6);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(ulong)' 7);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(float)' 8);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(double)' 9);
Magic Number,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,ExpressionParserCore,The following statement contains a magic number: _numberTypeLevel.Add(typeof(decimal)' 10);
Missing Default,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,GetTransformMeanChar,The following switch statement is missing a default case: switch (chOriginal)                      {                          case 'r':                              {                                  char result = '\r';                                  return result;                              }                          case 't':                              {                                  char result = '\t';                                  return result;                              }                          case 'v':                              {                                  char result = '\v';                                  return result;                              }                      }
Missing Default,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,GetTransformMeanChar,The following switch statement is missing a default case: switch (chOriginal)                      {                          case 'r':                              {                                  char result = '\r';                                  return result;                              }                          case 't':                              {                                  char result = '\t';                                  return result;                              }                          case 'v':                              {                                  char result = '\v';                                  return result;                              }                      }
Missing Default,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,GetTransformMeanChar,The following switch statement is missing a default case: switch (chOriginal)                      {                          case 'r':                              {                                  char result = '\r';                                  return result;                              }                          case 't':                              {                                  char result = '\t';                                  return result;                              }                          case 'v':                              {                                  char result = '\v';                                  return result;                              }                      }
Missing Default,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,GetTransformMeanChar,The following switch statement is missing a default case: switch (chOriginal)                      {                          case 'r':                              {                                  char result = '\r';                                  return result;                              }                          case 't':                              {                                  char result = '\t';                                  return result;                              }                          case 'v':                              {                                  char result = '\v';                                  return result;                              }                      }
Missing Default,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,GetTransformMeanChar,The following switch statement is missing a default case: switch (chOriginal)                      {                          case 'r':                              {                                  char result = '\r';                                  return result;                              }                          case 't':                              {                                  char result = '\t';                                  return result;                              }                          case 'v':                              {                                  char result = '\v';                                  return result;                              }                      }
Missing Default,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,GetTransformMeanChar,The following switch statement is missing a default case: switch (chOriginal)                      {                          case 'r':                              {                                  char result = '\r';                                  return result;                              }                          case 't':                              {                                  char result = '\t';                                  return result;                              }                          case 'v':                              {                                  char result = '\v';                                  return result;                              }                      }
Missing Default,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,GetTransformMeanChar,The following switch statement is missing a default case: switch (chOriginal)                      {                          case 'r':                              {                                  char result = '\r';                                  return result;                              }                          case 't':                              {                                  char result = '\t';                                  return result;                              }                          case 'v':                              {                                  char result = '\v';                                  return result;                              }                      }
Missing Default,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,GetTransformMeanChar,The following switch statement is missing a default case: switch (chOriginal)                      {                          case 'r':                              {                                  char result = '\r';                                  return result;                              }                          case 't':                              {                                  char result = '\t';                                  return result;                              }                          case 'v':                              {                                  char result = '\v';                                  return result;                              }                      }
Missing Default,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,GetTransformMeanChar,The following switch statement is missing a default case: switch (chOriginal)                      {                          case 'r':                              {                                  char result = '\r';                                  return result;                              }                          case 't':                              {                                  char result = '\t';                                  return result;                              }                          case 'v':                              {                                  char result = '\v';                                  return result;                              }                      }
Missing Default,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,GetTransformMeanChar,The following switch statement is missing a default case: switch (chOriginal)                      {                          case 'r':                              {                                  char result = '\r';                                  return result;                              }                          case 't':                              {                                  char result = '\t';                                  return result;                              }                          case 'v':                              {                                  char result = '\v';                                  return result;                              }                      }
Missing Default,System.Text.Json.JsonPath.LambdaCompilation,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,GetTransformMeanChar,The following switch statement is missing a default case: switch (chOriginal)                      {                          case 'r':                              {                                  char result = '\r';                                  return result;                              }                          case 't':                              {                                  char result = '\t';                                  return result;                              }                          case 'v':                              {                                  char result = '\v';                                  return result;                              }                      }
Missing Default,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,GetOperatorLevel,The following switch statement is missing a default case: switch (operatorSymbol)              {                  case "++":                  case "--":                      operatorSymbol += isBefore ? "before" : "behind";                      break;                    case "+":                  case "-":                      operatorSymbol += isBefore ? "before" : null;                      break;              }
Missing Default,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,GetOperatorLevel,The following switch statement is missing a default case: switch (operatorSymbol)              {                  case "++":                  case "--":                      operatorSymbol += isBefore ? "before" : "behind";                      break;                    case "+":                  case "-":                      operatorSymbol += isBefore ? "before" : null;                      break;              }
Missing Default,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,GetOperatorLevel,The following switch statement is missing a default case: switch (operatorSymbol)              {                  case "++":                  case "--":                      operatorSymbol += isBefore ? "before" : "behind";                      break;                    case "+":                  case "-":                      operatorSymbol += isBefore ? "before" : null;                      break;              }
Missing Default,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,GetOperatorLevel,The following switch statement is missing a default case: switch (operatorSymbol)              {                  case "++":                  case "--":                      operatorSymbol += isBefore ? "before" : "behind";                      break;                    case "+":                  case "-":                      operatorSymbol += isBefore ? "before" : null;                      break;              }
Missing Default,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,GetOperatorLevel,The following switch statement is missing a default case: switch (operatorSymbol)              {                  case "++":                  case "--":                      operatorSymbol += isBefore ? "before" : "behind";                      break;                    case "+":                  case "-":                      operatorSymbol += isBefore ? "before" : null;                      break;              }
Missing Default,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,GetOperatorLevel,The following switch statement is missing a default case: switch (operatorSymbol)              {                  case "++":                  case "--":                      operatorSymbol += isBefore ? "before" : "behind";                      break;                    case "+":                  case "-":                      operatorSymbol += isBefore ? "before" : null;                      break;              }
Missing Default,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,GetOperatorLevel,The following switch statement is missing a default case: switch (operatorSymbol)              {                  case "++":                  case "--":                      operatorSymbol += isBefore ? "before" : "behind";                      break;                    case "+":                  case "-":                      operatorSymbol += isBefore ? "before" : null;                      break;              }
Missing Default,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,GetOperatorLevel,The following switch statement is missing a default case: switch (operatorSymbol)              {                  case "++":                  case "--":                      operatorSymbol += isBefore ? "before" : "behind";                      break;                    case "+":                  case "-":                      operatorSymbol += isBefore ? "before" : null;                      break;              }
Missing Default,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,GetOperatorLevel,The following switch statement is missing a default case: switch (operatorSymbol)              {                  case "++":                  case "--":                      operatorSymbol += isBefore ? "before" : "behind";                      break;                    case "+":                  case "-":                      operatorSymbol += isBefore ? "before" : null;                      break;              }
Missing Default,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,GetOperatorLevel,The following switch statement is missing a default case: switch (operatorSymbol)              {                  case "++":                  case "--":                      operatorSymbol += isBefore ? "before" : "behind";                      break;                    case "+":                  case "-":                      operatorSymbol += isBefore ? "before" : null;                      break;              }
Missing Default,System.Text.Json.JsonPath.LambdaCompilation,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,GetOperatorLevel,The following switch statement is missing a default case: switch (operatorSymbol)              {                  case "++":                  case "--":                      operatorSymbol += isBefore ? "before" : "behind";                      break;                    case "+":                  case "-":                      operatorSymbol += isBefore ? "before" : null;                      break;              }
Missing Default,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,CodeParser,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,GetTransformMeanChar,The following switch statement is missing a default case: switch (chOriginal)                      {                          case 'r':                              {                                  char result = '\r';                                  return result;                              }                          case 't':                              {                                  char result = '\t';                                  return result;                              }                          case 'v':                              {                                  char result = '\v';                                  return result;                              }                      }
Missing Default,System.Text.Json.JsonPath.LambdaCompilation.ObjectDynamicExtension,ExpressionParserCore<TDelegate>,C:\repos\ysharplanguage_FastJsonParser\JsonTest\System.Text.Json\LambdaCompilation.cs,GetOperatorLevel,The following switch statement is missing a default case: switch (operatorSymbol)              {                  case "++":                  case "--":                      operatorSymbol += isBefore ? "before" : "behind";                      break;                    case "+":                  case "-":                      operatorSymbol += isBefore ? "before" : null;                      break;              }
