Implementation smell,Namespace,Class,File,Method,Description
Long Statement,N2.Templates.Items,MultipleSelect,C:\repos\n2cms_n2cms\src\WebForms\WebFormsTemplates\Templates\Items\MultipleSelect.cs,AddTo,The length of the statement  "            MultipleSelectControl ssc = new MultipleSelectControl(this' Vertical ? RepeatDirection.Vertical : RepeatDirection.Horizontal);" is 126.
Long Statement,N2.Templates.Services,NotFoundHandler,C:\repos\n2cms_n2cms\src\WebForms\WebFormsTemplates\Templates\Services\NotFoundHandler.cs,parser_PageNotFound,The length of the statement  "            if (startPage != null && startPage.NotFoundPage != null && !e.Url.StartsWith("edit/"' StringComparison.InvariantCultureIgnoreCase))" is 131.
Long Statement,N2.Templates.Services,PermissionDeniedHandler,C:\repos\n2cms_n2cms\src\WebForms\WebFormsTemplates\Templates\Services\PermissionDeniedHandler.cs,securityEnforcer_AuthorizationFailed,The length of the statement  "                context.HttpContext.Response.Redirect(Url.Parse(startPage.LoginPage.Url).AppendQuery("returnUrl"' context.Url.LocalUrl));" is 121.
Long Statement,N2.Templates.Services,PermissionDeniedHandler,C:\repos\n2cms_n2cms\src\WebForms\WebFormsTemplates\Templates\Services\PermissionDeniedHandler.cs,Start,The length of the statement  "            securityEnforcer.AuthorizationFailed += new EventHandler<CancellableItemEventArgs>(securityEnforcer_AuthorizationFailed);" is 121.
Long Statement,N2.Templates.Services,PermissionDeniedHandler,C:\repos\n2cms_n2cms\src\WebForms\WebFormsTemplates\Templates\Services\PermissionDeniedHandler.cs,Stop,The length of the statement  "            securityEnforcer.AuthorizationFailed -= new EventHandler<CancellableItemEventArgs>(securityEnforcer_AuthorizationFailed);" is 121.
Long Statement,N2.Templates.UI.Parts,Login,C:\repos\n2cms_n2cms\src\WebForms\WebFormsTemplates\Templates\UI\Parts\Login.ascx.cs,LoginBox_LoggedIn,The length of the statement  "            else if (CurrentItem.LoginPage != null)                             defaultUrl = CurrentItem.LoginPage.Url ?? string.Empty;" is 123.
Long Statement,N2.Templates.UI.Parts,Register,C:\repos\n2cms_n2cms\src\WebForms\WebFormsTemplates\Templates\UI\Parts\Register.ascx.cs,UserCreator_CreatedUser,The length of the statement  "                string url = Request.Url.Scheme + Uri.SchemeDelimiter + Request.Url.Host + port + CurrentPage.Url + "?verify=" + crypto;" is 120.
Empty Catch Block,N2.Templates.UI.Views,NotFound404,C:\repos\n2cms_n2cms\src\WebForms\WebFormsTemplates\Templates\UI\Views\404.aspx.cs,OnInit,The method has an empty catch block.
Magic Number,N2.Templates.Details,EditableOptionsAttribute,C:\repos\n2cms_n2cms\src\WebForms\WebFormsTemplates\Templates\Details\EditableOptionsAttribute.cs,AddEditor,The following statement contains a magic number: tb.Rows = 5;
Magic Number,N2.Templates.Details,EditableOptionsAttribute,C:\repos\n2cms_n2cms\src\WebForms\WebFormsTemplates\Templates\Details\EditableOptionsAttribute.cs,AddEditor,The following statement contains a magic number: tb.Columns = 40;
Magic Number,N2.Templates.Items,LanguageRoot,C:\repos\n2cms_n2cms\src\WebForms\WebFormsTemplates\Templates\Items\LanguageRoot.cs,LanguageRoot,The following statement contains a magic number: SortOrder = 10000;
Magic Number,N2.Templates.Services,SyndicatableDefinitionAppender,C:\repos\n2cms_n2cms\src\WebForms\WebFormsTemplates\Templates\Services\SyndicatableDefinitionAppender.cs,Start,The following statement contains a magic number: foreach (ItemDefinition definition in definitions.GetDefinitions())             {                 if (typeof (ISyndicatable).IsAssignableFrom(definition.ItemType))                 {                     EditableCheckBoxAttribute ecb = new EditableCheckBoxAttribute(CheckBoxText' 10);                     ecb.Name = SyndicatableDetailName;                     ecb.ContainerName = ContainerName;                     ecb.SortOrder = SortOrder;                      definition.Add(ecb);                 }             }
Magic Number,N2.Templates.UI.Parts,Login,C:\repos\n2cms_n2cms\src\WebForms\WebFormsTemplates\Templates\UI\Parts\Login.ascx.cs,LoginBox_LoggedIn,The following statement contains a magic number: if (CurrentItem.ReturnToUrlIfPossible)             {                 // First' retrieve the url                 returnUrl = FormsAuthentication.GetRedirectUrl(Page.User.Identity.Name' false);                  // Decode the url correctly                 int safeCounter = 25;                 while ((safeCounter > 0) && (!string.IsNullOrEmpty(returnUrl)) && (!returnUrl.StartsWith("/")))                 {                     safeCounter--; // Decrease the counter to prevent lock ups                     returnUrl = Server.UrlDecode(returnUrl); // Try to decode the url again                 }                  // In case the safe counter expired' use default url                 if (safeCounter <= 0) returnUrl = defaultUrl;             }
Magic Number,N2.Templates.UI.Parts,Register,C:\repos\n2cms_n2cms\src\WebForms\WebFormsTemplates\Templates\UI\Parts\Register.ascx.cs,UserCreator_CreatedUser,The following statement contains a magic number: if (CurrentItem.RequireVerification)             {                 user.IsApproved = false;                 Membership.UpdateUser(user);                  string port = (Request.Url.Port != 80) ? (":" + Request.Url.Port) : string.Empty;                  string crypto = FormsAuthentication.Encrypt(new FormsAuthenticationTicket(un' true' 60 * 24 * 7));                 string url = Request.Url.Scheme + Uri.SchemeDelimiter + Request.Url.Host + port + CurrentPage.Url + "?verify=" + crypto;                  string subject = CurrentItem.VerificationSubject;                 string body = CurrentItem.VerificationText.Replace("{VerificationUrl}"' url);                  try                 {                     Engine.Resolve<IMailSender>().Send(CurrentItem.VerificationSender' UserCreator.Email' subject' body);                      if (CurrentItem.SuccessPage != null)                     {                         Response.Redirect(CurrentItem.SuccessPage.Url);                     }                 }                 catch (InvalidOperationException ex)                 {                     cvError.Text = ex.Message;                     cvError.IsValid = false;                     UserCreator.Visible = false;                     Engine.Resolve<IErrorNotifier>().Notify(ex);                 }             }             else if (CurrentItem.SuccessPage != null)             {                 Response.Redirect(CurrentItem.SuccessPage.Url);             }
Magic Number,N2.Templates.UI.Parts,Register,C:\repos\n2cms_n2cms\src\WebForms\WebFormsTemplates\Templates\UI\Parts\Register.ascx.cs,UserCreator_CreatedUser,The following statement contains a magic number: if (CurrentItem.RequireVerification)             {                 user.IsApproved = false;                 Membership.UpdateUser(user);                  string port = (Request.Url.Port != 80) ? (":" + Request.Url.Port) : string.Empty;                  string crypto = FormsAuthentication.Encrypt(new FormsAuthenticationTicket(un' true' 60 * 24 * 7));                 string url = Request.Url.Scheme + Uri.SchemeDelimiter + Request.Url.Host + port + CurrentPage.Url + "?verify=" + crypto;                  string subject = CurrentItem.VerificationSubject;                 string body = CurrentItem.VerificationText.Replace("{VerificationUrl}"' url);                  try                 {                     Engine.Resolve<IMailSender>().Send(CurrentItem.VerificationSender' UserCreator.Email' subject' body);                      if (CurrentItem.SuccessPage != null)                     {                         Response.Redirect(CurrentItem.SuccessPage.Url);                     }                 }                 catch (InvalidOperationException ex)                 {                     cvError.Text = ex.Message;                     cvError.IsValid = false;                     UserCreator.Visible = false;                     Engine.Resolve<IErrorNotifier>().Notify(ex);                 }             }             else if (CurrentItem.SuccessPage != null)             {                 Response.Redirect(CurrentItem.SuccessPage.Url);             }
Magic Number,N2.Templates.UI.Parts,Register,C:\repos\n2cms_n2cms\src\WebForms\WebFormsTemplates\Templates\UI\Parts\Register.ascx.cs,UserCreator_CreatedUser,The following statement contains a magic number: if (CurrentItem.RequireVerification)             {                 user.IsApproved = false;                 Membership.UpdateUser(user);                  string port = (Request.Url.Port != 80) ? (":" + Request.Url.Port) : string.Empty;                  string crypto = FormsAuthentication.Encrypt(new FormsAuthenticationTicket(un' true' 60 * 24 * 7));                 string url = Request.Url.Scheme + Uri.SchemeDelimiter + Request.Url.Host + port + CurrentPage.Url + "?verify=" + crypto;                  string subject = CurrentItem.VerificationSubject;                 string body = CurrentItem.VerificationText.Replace("{VerificationUrl}"' url);                  try                 {                     Engine.Resolve<IMailSender>().Send(CurrentItem.VerificationSender' UserCreator.Email' subject' body);                      if (CurrentItem.SuccessPage != null)                     {                         Response.Redirect(CurrentItem.SuccessPage.Url);                     }                 }                 catch (InvalidOperationException ex)                 {                     cvError.Text = ex.Message;                     cvError.IsValid = false;                     UserCreator.Visible = false;                     Engine.Resolve<IErrorNotifier>().Notify(ex);                 }             }             else if (CurrentItem.SuccessPage != null)             {                 Response.Redirect(CurrentItem.SuccessPage.Url);             }
Magic Number,N2.Templates.UI.Parts,Register,C:\repos\n2cms_n2cms\src\WebForms\WebFormsTemplates\Templates\UI\Parts\Register.ascx.cs,UserCreator_CreatedUser,The following statement contains a magic number: if (CurrentItem.RequireVerification)             {                 user.IsApproved = false;                 Membership.UpdateUser(user);                  string port = (Request.Url.Port != 80) ? (":" + Request.Url.Port) : string.Empty;                  string crypto = FormsAuthentication.Encrypt(new FormsAuthenticationTicket(un' true' 60 * 24 * 7));                 string url = Request.Url.Scheme + Uri.SchemeDelimiter + Request.Url.Host + port + CurrentPage.Url + "?verify=" + crypto;                  string subject = CurrentItem.VerificationSubject;                 string body = CurrentItem.VerificationText.Replace("{VerificationUrl}"' url);                  try                 {                     Engine.Resolve<IMailSender>().Send(CurrentItem.VerificationSender' UserCreator.Email' subject' body);                      if (CurrentItem.SuccessPage != null)                     {                         Response.Redirect(CurrentItem.SuccessPage.Url);                     }                 }                 catch (InvalidOperationException ex)                 {                     cvError.Text = ex.Message;                     cvError.IsValid = false;                     UserCreator.Visible = false;                     Engine.Resolve<IErrorNotifier>().Notify(ex);                 }             }             else if (CurrentItem.SuccessPage != null)             {                 Response.Redirect(CurrentItem.SuccessPage.Url);             }
Magic Number,N2.Templates.UI.Parts,Result,C:\repos\n2cms_n2cms\src\WebForms\WebFormsTemplates\Templates\UI\Parts\Result.ascx.cs,LoadTotal,The following statement contains a magic number: if (Total == 0)                 Total = 100;
Magic Number,N2.Templates.UI.Views,Search,C:\repos\n2cms_n2cms\src\WebForms\WebFormsTemplates\Templates\UI\Views\Search.aspx.cs,btnSearch_Click,The following statement contains a magic number: var query = Query.For(txtQuery.Text)                 .Below(CurrentItem.SearchRoot ?? Content.Traverse.StartPage)                 .Range(0' 100)                 .Pages(true)                 .State(ContentState.Published)                 .ReadableBy(User' Roles.GetRolesForUser)                 .Except(Query.For(typeof(ISystemNode)));
Missing Default,N2.Templates.Web.UI.WebControls,SingleSelectControl,C:\repos\n2cms_n2cms\src\WebForms\WebFormsTemplates\Templates\Web\UI\WebControls\SingleSelectControl.cs,SingleSelectControl,The following switch statement is missing a default case: switch (question.SelectionType)             {                 case Items.SingleSelectType.DropDown:                     lc = new DropDownList();                     break;                 case Items.SingleSelectType.ListBox:                     var lb = new ListBox();                     lb.SelectionMode = ListSelectionMode.Single;                     lc = lb;                     break;                 case Items.SingleSelectType.RadioButtons:                     var rbl = new RadioButtonList();                     rbl.RepeatLayout = RepeatLayout.Flow;                     rbl.RepeatDirection = direction;                     lc = rbl;                     break;             }
