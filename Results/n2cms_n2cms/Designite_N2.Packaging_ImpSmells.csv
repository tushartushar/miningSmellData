Implementation smell,Namespace,Class,File,Method,Description
Long Statement,SharpZipLib.Web.VirtualPathProvider,ZipFileVirtualPathProvider,C:\repos\n2cms_n2cms\src\Framework\Packaging\Web\Hosting\ZipFileVirtualPathProvider.cs,GetCacheDependency,The length of the statement  "            var filesNotBelongingToZip = virtualPathDependencies.OfType<string>().Select(f => ToRelative(f)).Where(f => !Exists(f' true));" is 126.
Long Statement,N2.Web.Hosting,VirtualPathFileHandler,C:\repos\n2cms_n2cms\src\Framework\Packaging\Web\Hosting\VirtualPathFileHandler.cs,ProcessRequest,The length of the statement  "                logger.DebugFormat("Transmitting virtual file {0} available on disk {1}"' context.Request.AppRelativeCurrentExecutionFilePath' context.Request.PhysicalPath);" is 157.
Long Statement,N2.Web.Hosting,VirtualPathFileHandler,C:\repos\n2cms_n2cms\src\Framework\Packaging\Web\Hosting\VirtualPathFileHandler.cs,ProcessRequest,The length of the statement  "                byte[] cached = context.Cache["VirtualPathFileHandler:" + context.Request.AppRelativeCurrentExecutionFilePath] as byte[];" is 121.
Long Statement,N2.Web.Hosting,VirtualPathFileHandler,C:\repos\n2cms_n2cms\src\Framework\Packaging\Web\Hosting\VirtualPathFileHandler.cs,ProcessRequest,The length of the statement  "                        context.Cache.Add("VirtualPathFileHandler:" + context.Request.AppRelativeCurrentExecutionFilePath' cached' vpp.GetCacheDependency(context.Request.AppRelativeCurrentExecutionFilePath' new[] { context.Request.AppRelativeCurrentExecutionFilePath }' DateTime.UtcNow)' DateTime.MaxValue' TimeSpan.FromMinutes(1)' System.Web.Caching.CacheItemPriority.BelowNormal' null);" is 364.
Long Statement,N2.Web.Hosting,ZipVppInitializer,C:\repos\n2cms_n2cms\src\Framework\Packaging\Web\Hosting\ZipVppInitializer.cs,Start,The length of the statement  "            var staticFileExtensions = new HashSet<string>(configFactory.Sections.Web.Vpp.Zips.StaticFileExtensions.OfType<string>());" is 122.
Long Statement,N2.Web.Hosting,ZipVppInitializer,C:\repos\n2cms_n2cms\src\Framework\Packaging\Web\Hosting\ZipVppInitializer.cs,Start,The length of the statement  "                        requestPath = requestPath.TrimEnd('/') + "/Default.aspx"; //context.RewritePath(requestPath.TrimEnd('/') + "/Default.aspx");" is 124.
Magic Number,SharpZipLib.Web.VirtualPathProvider,Util,C:\repos\n2cms_n2cms\src\Framework\Packaging\Web\Hosting\Util.cs,ConvertVirtualPathToZipPath,The following statement contains a magic number: if (virtualPath[0] == '~')             {                 if (!isFile)                     return virtualPath.Substring(2).TrimEnd('/') + "/";                 else                     return virtualPath.Substring(2);             }             else if (virtualPath[0] == '/')             {                 virtualPath = ToAppRelative(virtualPath);                 if (!isFile)                     return virtualPath.Substring(2).TrimEnd('/') + "/";                 else                     return virtualPath.Substring(2);             }             else                 return virtualPath;
Magic Number,SharpZipLib.Web.VirtualPathProvider,Util,C:\repos\n2cms_n2cms\src\Framework\Packaging\Web\Hosting\Util.cs,ConvertVirtualPathToZipPath,The following statement contains a magic number: if (virtualPath[0] == '~')             {                 if (!isFile)                     return virtualPath.Substring(2).TrimEnd('/') + "/";                 else                     return virtualPath.Substring(2);             }             else if (virtualPath[0] == '/')             {                 virtualPath = ToAppRelative(virtualPath);                 if (!isFile)                     return virtualPath.Substring(2).TrimEnd('/') + "/";                 else                     return virtualPath.Substring(2);             }             else                 return virtualPath;
Magic Number,SharpZipLib.Web.VirtualPathProvider,Util,C:\repos\n2cms_n2cms\src\Framework\Packaging\Web\Hosting\Util.cs,ConvertVirtualPathToZipPath,The following statement contains a magic number: if (virtualPath[0] == '~')             {                 if (!isFile)                     return virtualPath.Substring(2).TrimEnd('/') + "/";                 else                     return virtualPath.Substring(2);             }             else if (virtualPath[0] == '/')             {                 virtualPath = ToAppRelative(virtualPath);                 if (!isFile)                     return virtualPath.Substring(2).TrimEnd('/') + "/";                 else                     return virtualPath.Substring(2);             }             else                 return virtualPath;
Magic Number,SharpZipLib.Web.VirtualPathProvider,Util,C:\repos\n2cms_n2cms\src\Framework\Packaging\Web\Hosting\Util.cs,ConvertVirtualPathToZipPath,The following statement contains a magic number: if (virtualPath[0] == '~')             {                 if (!isFile)                     return virtualPath.Substring(2).TrimEnd('/') + "/";                 else                     return virtualPath.Substring(2);             }             else if (virtualPath[0] == '/')             {                 virtualPath = ToAppRelative(virtualPath);                 if (!isFile)                     return virtualPath.Substring(2).TrimEnd('/') + "/";                 else                     return virtualPath.Substring(2);             }             else                 return virtualPath;
Magic Number,N2.Web.Hosting,VirtualPathFileHandler,C:\repos\n2cms_n2cms\src\Framework\Packaging\Web\Hosting\VirtualPathFileHandler.cs,ProcessRequest,The following statement contains a magic number: if (File.Exists(context.Request.PhysicalPath))             {                 var fileModified = File.GetLastWriteTimeUtc(context.Request.PhysicalPath);                 if(CacheUtility.IsUnmodifiedSince(context.Request' fileModified))                     CacheUtility.NotModified(context.Response);                  logger.DebugFormat("Transmitting virtual file {0} available on disk {1}"' context.Request.AppRelativeCurrentExecutionFilePath' context.Request.PhysicalPath);                 N2.Web.CacheUtility.SetValidUntilExpires(context.Response' DateTime.UtcNow);                 context.Response.ContentType = GetContentType(context.Request.PhysicalPath);                 context.Response.TransmitFile(context.Request.PhysicalPath);             }             else if (vpp.FileExists(context.Request.AppRelativeCurrentExecutionFilePath))             {                 if (Modified.HasValue && CacheUtility.IsUnmodifiedSince(context.Request' Modified.Value))                 {                     logger.DebugFormat("Not modified: {0}"' context.Request.AppRelativeCurrentExecutionFilePath);                     CacheUtility.NotModified(context.Response);                 }                  byte[] cached = context.Cache["VirtualPathFileHandler:" + context.Request.AppRelativeCurrentExecutionFilePath] as byte[];                 if (cached != null)                 {                     logger.DebugFormat("Transmitting cached file: {0}"' context.Request.AppRelativeCurrentExecutionFilePath);                     context.Response.ContentType = GetContentType(context.Request.AppRelativeCurrentExecutionFilePath);                     context.Response.OutputStream.Write(cached' 0' cached.Length);                     return;                 }                                   var f = vpp.GetFile(context.Request.AppRelativeCurrentExecutionFilePath);                 using (var s = f.Open())                 {                     byte[] buffer = new byte[131072];                     int readBytes = ReadBlock(s' buffer);                     if (readBytes <= 0)                     {                         logger.DebugFormat("Empty file: {0}"' context.Request.AppRelativeCurrentExecutionFilePath);                         return;                     }                      N2.Web.CacheUtility.SetValidUntilExpires(context.Response' DateTime.UtcNow);                     context.Response.ContentType = GetContentType(context.Request.AppRelativeCurrentExecutionFilePath);                     logger.DebugFormat("Writing file: {0}"' context.Request.AppRelativeCurrentExecutionFilePath);                     context.Response.OutputStream.Write(buffer' 0' readBytes);                      if (readBytes < buffer.Length)                     {                         cached = new byte[readBytes];                         Array.Copy(buffer' cached' readBytes);                         logger.DebugFormat("Adding to cache: {0}"' context.Request.AppRelativeCurrentExecutionFilePath);                         context.Cache.Add("VirtualPathFileHandler:" + context.Request.AppRelativeCurrentExecutionFilePath' cached' vpp.GetCacheDependency(context.Request.AppRelativeCurrentExecutionFilePath' new[] { context.Request.AppRelativeCurrentExecutionFilePath }' DateTime.UtcNow)' DateTime.MaxValue' TimeSpan.FromMinutes(1)' System.Web.Caching.CacheItemPriority.BelowNormal' null);                         return;                     }                     logger.DebugFormat("Transmitting rest of file {0}"' context.Request.AppRelativeCurrentExecutionFilePath);                     TransferBetweenStreams(buffer' s' context.Response.OutputStream);                 }             }
