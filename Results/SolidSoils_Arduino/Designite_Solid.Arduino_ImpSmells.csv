Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,ProcessAsciiString,Cyclomatic complexity of the method is 18
Complex Method,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,ProcessCommand,Cyclomatic complexity of the method is 12
Complex Method,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,ProcessSysExMessage,Cyclomatic complexity of the method is 15
Complex Method,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateCapabilityResponse,Cyclomatic complexity of the method is 31
Complex Method,Solid.Arduino,SerialConnection,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\SerialConnection.cs,FindConnection,Cyclomatic complexity of the method is 9
Complex Method,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,ToBinaryCodedDecimal,Cyclomatic complexity of the method is 7
Long Parameter List,Solid.Arduino,EnhancedSerialPort,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\EnhancedSerialPort.cs,EnhancedSerialPort,The method has 4 parameters.
Long Parameter List,Solid.Arduino,EnhancedSerialPort,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\EnhancedSerialPort.cs,EnhancedSerialPort,The method has 5 parameters.
Long Parameter List,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,I2CSlaveRead,The method has 4 parameters.
Long Parameter List,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,I2CRead,The method has 4 parameters.
Long Statement,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,GetFirmwareAsync,The length of the statement  "	return await Task.Run (() => (Firmware)((FirmataMessage)GetMessageFromQueue (new FirmataMessage (MessageType.FirmwareResponse))).Value); " is 136.
Long Statement,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,GetProtocolVersionAsync,The length of the statement  "	return await Task.Run (() => (ProtocolVersion)((FirmataMessage)GetMessageFromQueue (new FirmataMessage (MessageType.ProtocolVersion))).Value); " is 142.
Long Statement,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,GetBoardCapability,The length of the statement  "	return (BoardCapability)((FirmataMessage)GetMessageFromQueue (new FirmataMessage (MessageType.CapabilityResponse))).Value; " is 122.
Long Statement,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,GetBoardCapabilityAsync,The length of the statement  "	return await Task.Run (() => (BoardCapability)((FirmataMessage)GetMessageFromQueue (new FirmataMessage (MessageType.CapabilityResponse))).Value); " is 145.
Long Statement,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,GetBoardAnalogMapping,The length of the statement  "	return (BoardAnalogMapping)((FirmataMessage)GetMessageFromQueue (new FirmataMessage (MessageType.AnalogMappingResponse))).Value; " is 128.
Long Statement,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,GetBoardAnalogMappingAsync,The length of the statement  "	return await Task.Run (() => (BoardAnalogMapping)((FirmataMessage)GetMessageFromQueue (new FirmataMessage (MessageType.AnalogMappingResponse))).Value); " is 151.
Long Statement,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,GetPinStateAsync,The length of the statement  "	return await Task.Run (() => (PinState)((FirmataMessage)GetMessageFromQueue (new FirmataMessage (MessageType.PinStateResponse))).Value); " is 136.
Long Statement,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,GetI2CReplyAsync,The length of the statement  "	return await Task.Run (() => (I2CReply)((FirmataMessage)GetMessageFromQueue (new FirmataMessage (MessageType.I2CReply))).Value); " is 128.
Long Statement,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,GetI2CReplyAsync,The length of the statement  "	return await Task.Run (() => (I2CReply)((FirmataMessage)GetMessageFromQueue (new FirmataMessage (MessageType.I2CReply))).Value); " is 128.
Long Statement,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,GetMessageFromQueue,The length of the statement  "					//    && _receivedMessageQueue.Select( fm => fm.Type == awaitedMessage.Type).First()) // .Find(FirmataMessage =>) .First().Type == awaitedMessage.Type) " is 151.
Long Statement,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,ProcessAsciiString,The length of the statement  "			if (c == _connection.NewLine [_connection.NewLine.Length - 1] || serialByte == 0x1A || serialByte == 0x00)// NewLine' EOF or terminating 0-byte? " is 144.
Long Statement,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,DeliverMessage,The length of the statement  "		while (_receivedMessageList.Count > 0 && ((DateTime.UtcNow - _receivedMessageList.First.Value.Time).TotalMilliseconds > TimeOut)) { " is 131.
Long Statement,Solid.Arduino,EnhancedSerialConnection,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\EnhancedSerialConnection.cs,GetLastPortName,The length of the statement  "	where (p.StartsWith (@"/dev/ttyUSB") || p.StartsWith (@"/dev/ttyAMA") || p.StartsWith (@"/dev/ttyACM") || p.StartsWith ("COM")) " is 127.
Empty Catch Block,Solid.Arduino,SerialConnection,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\SerialConnection.cs,FindConnection,The method has an empty catch block.
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateDigitalStateMonitor,The following statement contains a magic number: if (port < 0 || port > 15)  	throw new ArgumentOutOfRangeException ("port"' Messages.ArgumentEx_PortRange0_15);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateAnalogStateMonitor,The following statement contains a magic number: if (channel < 0 || channel > 15)  	throw new ArgumentOutOfRangeException ("channel"' Messages.ArgumentEx_ChannelRange0_15);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SetDigitalPin,The following statement contains a magic number: if (pinNumber < 0 || pinNumber > 127)  	throw new ArgumentOutOfRangeException ("pinNumber"' Messages.ArgumentEx_PinRange0_127);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SetDigitalPin,The following statement contains a magic number: if (pinNumber < 16 && value < 0x4000) {  	// Send value in a conventional Analog Message.  	message = new[] {  		(byte)(AnalogMessage | pinNumber)'  		(byte)(value & 0x7F)'  		(byte)((value >> 7) & 0x7F)  	};  	_connection.Write (message' 0' 3);  	return;  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SetDigitalPin,The following statement contains a magic number: if (pinNumber < 16 && value < 0x4000) {  	// Send value in a conventional Analog Message.  	message = new[] {  		(byte)(AnalogMessage | pinNumber)'  		(byte)(value & 0x7F)'  		(byte)((value >> 7) & 0x7F)  	};  	_connection.Write (message' 0' 3);  	return;  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SetDigitalPin,The following statement contains a magic number: if (pinNumber < 16 && value < 0x4000) {  	// Send value in a conventional Analog Message.  	message = new[] {  		(byte)(AnalogMessage | pinNumber)'  		(byte)(value & 0x7F)'  		(byte)((value >> 7) & 0x7F)  	};  	_connection.Write (message' 0' 3);  	return;  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SetDigitalPin,The following statement contains a magic number: message = new[] {  	(byte)(AnalogMessage | pinNumber)'  	(byte)(value & 0x7F)'  	(byte)((value >> 7) & 0x7F)  };  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SetDigitalPin,The following statement contains a magic number: _connection.Write (message' 0' 3);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SetDigitalPin,The following statement contains a magic number: message = new byte[14];  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SetDigitalPin,The following statement contains a magic number: message [2] = (byte)pinNumber;  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SetDigitalPin,The following statement contains a magic number: do {  	message [index] = (byte)(value & 0x7F);  	value >>= 7;  	index++;  } while (value > 0 || index < 5);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SetDigitalPin,The following statement contains a magic number: do {  	message [index] = (byte)(value & 0x7F);  	value >>= 7;  	index++;  } while (value > 0 || index < 5);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SetDigitalPin,The following statement contains a magic number: value >>= 7;  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SetDigitalPin,The following statement contains a magic number: if (pinNumber < 0 || pinNumber > 127)  	throw new ArgumentOutOfRangeException ("pinNumber"' Messages.ArgumentEx_PinRange0_127);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SetDigitalPin,The following statement contains a magic number: _connection.Write (new[] {  	(byte)0xF5'  	(byte)pinNumber'  	(byte)(value ? 1 : 0)  }' 0' 3);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SetAnalogReportMode,The following statement contains a magic number: if (channel < 0 || channel > 15)  	throw new ArgumentOutOfRangeException ("channel"' Messages.ArgumentEx_ChannelRange0_15);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SetAnalogReportMode,The following statement contains a magic number: _connection.Write (new[] {  	(byte)(0xC0 | channel)'  	(byte)(enable ? 1 : 0)  }' 0' 2);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SetDigitalPort,The following statement contains a magic number: if (portNumber < 0 || portNumber > 15)  	throw new ArgumentOutOfRangeException ("portNumber"' Messages.ArgumentEx_PortRange0_15);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SetDigitalPort,The following statement contains a magic number: _connection.Write (new[] {  	(byte)(DigitalMessage | portNumber)'  	(byte)(pins & 0x7F)'  	(byte)((pins >> 7) & 0x03)  }' 0' 3);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SetDigitalPort,The following statement contains a magic number: _connection.Write (new[] {  	(byte)(DigitalMessage | portNumber)'  	(byte)(pins & 0x7F)'  	(byte)((pins >> 7) & 0x03)  }' 0' 3);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SetDigitalReportMode,The following statement contains a magic number: if (portNumber < 0 || portNumber > 15)  	throw new ArgumentOutOfRangeException ("portNumber"' Messages.ArgumentEx_PortRange0_15);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SetDigitalReportMode,The following statement contains a magic number: _connection.Write (new[] {  	(byte)(0xD0 | portNumber)'  	(byte)(enable ? 1 : 0)  }' 0' 2);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SetDigitalPinMode,The following statement contains a magic number: if (pinNumber < 0 || pinNumber > 127)  	throw new ArgumentOutOfRangeException ("pinNumber"' Messages.ArgumentEx_PinRange0_127);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SetDigitalPinMode,The following statement contains a magic number: _connection.Write (new byte[] {  	0xF4'  	(byte)pinNumber'  	(byte)mode  }' 0' 3);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SetSamplingInterval,The following statement contains a magic number: _connection.Write (command' 0' 5);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SendStringData,The following statement contains a magic number: for (int x = 0; x < data.Length; x++) {  	short c = Convert.ToInt16 (data [x]);  	command [x * 2 + 2] = (byte)(c & 0x7F);  	command [x * 2 + 3] = (byte)((c >> 7) & 0x7F);  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SendStringData,The following statement contains a magic number: for (int x = 0; x < data.Length; x++) {  	short c = Convert.ToInt16 (data [x]);  	command [x * 2 + 2] = (byte)(c & 0x7F);  	command [x * 2 + 3] = (byte)((c >> 7) & 0x7F);  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SendStringData,The following statement contains a magic number: for (int x = 0; x < data.Length; x++) {  	short c = Convert.ToInt16 (data [x]);  	command [x * 2 + 2] = (byte)(c & 0x7F);  	command [x * 2 + 3] = (byte)((c >> 7) & 0x7F);  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SendStringData,The following statement contains a magic number: for (int x = 0; x < data.Length; x++) {  	short c = Convert.ToInt16 (data [x]);  	command [x * 2 + 2] = (byte)(c & 0x7F);  	command [x * 2 + 3] = (byte)((c >> 7) & 0x7F);  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SendStringData,The following statement contains a magic number: for (int x = 0; x < data.Length; x++) {  	short c = Convert.ToInt16 (data [x]);  	command [x * 2 + 2] = (byte)(c & 0x7F);  	command [x * 2 + 3] = (byte)((c >> 7) & 0x7F);  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SendStringData,The following statement contains a magic number: command [x * 2 + 2] = (byte)(c & 0x7F);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SendStringData,The following statement contains a magic number: command [x * 2 + 2] = (byte)(c & 0x7F);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SendStringData,The following statement contains a magic number: command [x * 2 + 3] = (byte)((c >> 7) & 0x7F);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SendStringData,The following statement contains a magic number: command [x * 2 + 3] = (byte)((c >> 7) & 0x7F);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SendStringData,The following statement contains a magic number: command [x * 2 + 3] = (byte)((c >> 7) & 0x7F);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,RequestPinState,The following statement contains a magic number: if (pinNumber < 0 || pinNumber > 127)  	throw new ArgumentOutOfRangeException ("pinNumber"' Messages.ArgumentEx_PinRange0_127);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,RequestPinState,The following statement contains a magic number: _connection.Write (command' 0' 4);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,ConfigureServo,The following statement contains a magic number: if (pinNumber < 0 || pinNumber > 127)  	throw new ArgumentOutOfRangeException ("pinNumber"' Messages.ArgumentEx_PinRange0_127);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,ConfigureServo,The following statement contains a magic number: _connection.Write (command' 0' 8);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SetI2CReadInterval,The following statement contains a magic number: _connection.Write (command' 0' 5);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,WriteI2C,The following statement contains a magic number: command [2] = (byte)(slaveAddress & 0x7F);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,WriteI2C,The following statement contains a magic number: command [3] = (byte)(slaveAddress < 0x80 ? 0 : ((slaveAddress >> 7) & 0x07) | 0x20);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,WriteI2C,The following statement contains a magic number: command [3] = (byte)(slaveAddress < 0x80 ? 0 : ((slaveAddress >> 7) & 0x07) | 0x20);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,WriteI2C,The following statement contains a magic number: for (int x = 0; x < data.Length; x++) {  	command [x * 2 + 4] = (byte)(data [x] & 0x7F);  	command [x * 2 + 5] = (byte)((data [x] >> 7) & 0x7F);  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,WriteI2C,The following statement contains a magic number: for (int x = 0; x < data.Length; x++) {  	command [x * 2 + 4] = (byte)(data [x] & 0x7F);  	command [x * 2 + 5] = (byte)((data [x] >> 7) & 0x7F);  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,WriteI2C,The following statement contains a magic number: for (int x = 0; x < data.Length; x++) {  	command [x * 2 + 4] = (byte)(data [x] & 0x7F);  	command [x * 2 + 5] = (byte)((data [x] >> 7) & 0x7F);  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,WriteI2C,The following statement contains a magic number: for (int x = 0; x < data.Length; x++) {  	command [x * 2 + 4] = (byte)(data [x] & 0x7F);  	command [x * 2 + 5] = (byte)((data [x] >> 7) & 0x7F);  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,WriteI2C,The following statement contains a magic number: for (int x = 0; x < data.Length; x++) {  	command [x * 2 + 4] = (byte)(data [x] & 0x7F);  	command [x * 2 + 5] = (byte)((data [x] >> 7) & 0x7F);  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,WriteI2C,The following statement contains a magic number: command [x * 2 + 4] = (byte)(data [x] & 0x7F);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,WriteI2C,The following statement contains a magic number: command [x * 2 + 4] = (byte)(data [x] & 0x7F);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,WriteI2C,The following statement contains a magic number: command [x * 2 + 5] = (byte)((data [x] >> 7) & 0x7F);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,WriteI2C,The following statement contains a magic number: command [x * 2 + 5] = (byte)((data [x] >> 7) & 0x7F);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,WriteI2C,The following statement contains a magic number: command [x * 2 + 5] = (byte)((data [x] >> 7) & 0x7F);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,StopI2CReading,The following statement contains a magic number: command [2] = 0x00;  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,StopI2CReading,The following statement contains a magic number: command [3] = 0x18;  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,StopI2CReading,The following statement contains a magic number: command [4] = SysExEnd;  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SendSysExCommand,The following statement contains a magic number: _connection.Write (message' 0' 3);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,I2CRead,The following statement contains a magic number: command [2] = (byte)(slaveAddress & 0x7F);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,I2CRead,The following statement contains a magic number: if (slaveAddress < 128) {  	command [3] = (byte)(((slaveAddress >> 7) & 0x07) | (continuous ? 0x10 : 0x08));  } else {  	command [3] = (byte)(((slaveAddress >> 7) & 0x07) | (continuous ? 0x30 : 0x28));  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,I2CRead,The following statement contains a magic number: if (slaveAddress < 128) {  	command [3] = (byte)(((slaveAddress >> 7) & 0x07) | (continuous ? 0x10 : 0x08));  } else {  	command [3] = (byte)(((slaveAddress >> 7) & 0x07) | (continuous ? 0x30 : 0x28));  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,I2CRead,The following statement contains a magic number: if (slaveAddress < 128) {  	command [3] = (byte)(((slaveAddress >> 7) & 0x07) | (continuous ? 0x10 : 0x08));  } else {  	command [3] = (byte)(((slaveAddress >> 7) & 0x07) | (continuous ? 0x30 : 0x28));  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,I2CRead,The following statement contains a magic number: if (slaveAddress < 128) {  	command [3] = (byte)(((slaveAddress >> 7) & 0x07) | (continuous ? 0x10 : 0x08));  } else {  	command [3] = (byte)(((slaveAddress >> 7) & 0x07) | (continuous ? 0x30 : 0x28));  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,I2CRead,The following statement contains a magic number: if (slaveAddress < 128) {  	command [3] = (byte)(((slaveAddress >> 7) & 0x07) | (continuous ? 0x10 : 0x08));  } else {  	command [3] = (byte)(((slaveAddress >> 7) & 0x07) | (continuous ? 0x30 : 0x28));  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,I2CRead,The following statement contains a magic number: command [3] = (byte)(((slaveAddress >> 7) & 0x07) | (continuous ? 0x10 : 0x08));  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,I2CRead,The following statement contains a magic number: command [3] = (byte)(((slaveAddress >> 7) & 0x07) | (continuous ? 0x10 : 0x08));  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,I2CRead,The following statement contains a magic number: command [3] = (byte)(((slaveAddress >> 7) & 0x07) | (continuous ? 0x30 : 0x28));  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,I2CRead,The following statement contains a magic number: command [3] = (byte)(((slaveAddress >> 7) & 0x07) | (continuous ? 0x30 : 0x28));  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,I2CRead,The following statement contains a magic number: if (slaveRegister != -1) {  	command [4] = (byte)(slaveRegister & 0x7F);  	command [5] = (byte)(slaveRegister >> 7);  	command [6] = (byte)(bytesToRead & 0x7F);  	command [7] = (byte)(bytesToRead >> 7);  } else {  	command [4] = (byte)(bytesToRead & 0x7F);  	command [5] = (byte)(bytesToRead >> 7);  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,I2CRead,The following statement contains a magic number: if (slaveRegister != -1) {  	command [4] = (byte)(slaveRegister & 0x7F);  	command [5] = (byte)(slaveRegister >> 7);  	command [6] = (byte)(bytesToRead & 0x7F);  	command [7] = (byte)(bytesToRead >> 7);  } else {  	command [4] = (byte)(bytesToRead & 0x7F);  	command [5] = (byte)(bytesToRead >> 7);  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,I2CRead,The following statement contains a magic number: if (slaveRegister != -1) {  	command [4] = (byte)(slaveRegister & 0x7F);  	command [5] = (byte)(slaveRegister >> 7);  	command [6] = (byte)(bytesToRead & 0x7F);  	command [7] = (byte)(bytesToRead >> 7);  } else {  	command [4] = (byte)(bytesToRead & 0x7F);  	command [5] = (byte)(bytesToRead >> 7);  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,I2CRead,The following statement contains a magic number: if (slaveRegister != -1) {  	command [4] = (byte)(slaveRegister & 0x7F);  	command [5] = (byte)(slaveRegister >> 7);  	command [6] = (byte)(bytesToRead & 0x7F);  	command [7] = (byte)(bytesToRead >> 7);  } else {  	command [4] = (byte)(bytesToRead & 0x7F);  	command [5] = (byte)(bytesToRead >> 7);  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,I2CRead,The following statement contains a magic number: if (slaveRegister != -1) {  	command [4] = (byte)(slaveRegister & 0x7F);  	command [5] = (byte)(slaveRegister >> 7);  	command [6] = (byte)(bytesToRead & 0x7F);  	command [7] = (byte)(bytesToRead >> 7);  } else {  	command [4] = (byte)(bytesToRead & 0x7F);  	command [5] = (byte)(bytesToRead >> 7);  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,I2CRead,The following statement contains a magic number: if (slaveRegister != -1) {  	command [4] = (byte)(slaveRegister & 0x7F);  	command [5] = (byte)(slaveRegister >> 7);  	command [6] = (byte)(bytesToRead & 0x7F);  	command [7] = (byte)(bytesToRead >> 7);  } else {  	command [4] = (byte)(bytesToRead & 0x7F);  	command [5] = (byte)(bytesToRead >> 7);  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,I2CRead,The following statement contains a magic number: if (slaveRegister != -1) {  	command [4] = (byte)(slaveRegister & 0x7F);  	command [5] = (byte)(slaveRegister >> 7);  	command [6] = (byte)(bytesToRead & 0x7F);  	command [7] = (byte)(bytesToRead >> 7);  } else {  	command [4] = (byte)(bytesToRead & 0x7F);  	command [5] = (byte)(bytesToRead >> 7);  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,I2CRead,The following statement contains a magic number: if (slaveRegister != -1) {  	command [4] = (byte)(slaveRegister & 0x7F);  	command [5] = (byte)(slaveRegister >> 7);  	command [6] = (byte)(bytesToRead & 0x7F);  	command [7] = (byte)(bytesToRead >> 7);  } else {  	command [4] = (byte)(bytesToRead & 0x7F);  	command [5] = (byte)(bytesToRead >> 7);  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,I2CRead,The following statement contains a magic number: if (slaveRegister != -1) {  	command [4] = (byte)(slaveRegister & 0x7F);  	command [5] = (byte)(slaveRegister >> 7);  	command [6] = (byte)(bytesToRead & 0x7F);  	command [7] = (byte)(bytesToRead >> 7);  } else {  	command [4] = (byte)(bytesToRead & 0x7F);  	command [5] = (byte)(bytesToRead >> 7);  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,I2CRead,The following statement contains a magic number: command [4] = (byte)(slaveRegister & 0x7F);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,I2CRead,The following statement contains a magic number: command [5] = (byte)(slaveRegister >> 7);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,I2CRead,The following statement contains a magic number: command [5] = (byte)(slaveRegister >> 7);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,I2CRead,The following statement contains a magic number: command [6] = (byte)(bytesToRead & 0x7F);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,I2CRead,The following statement contains a magic number: command [7] = (byte)(bytesToRead >> 7);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,I2CRead,The following statement contains a magic number: command [7] = (byte)(bytesToRead >> 7);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,I2CRead,The following statement contains a magic number: command [4] = (byte)(bytesToRead & 0x7F);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,I2CRead,The following statement contains a magic number: command [5] = (byte)(bytesToRead >> 7);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,I2CRead,The following statement contains a magic number: command [5] = (byte)(bytesToRead >> 7);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SerialDataReceived,The following statement contains a magic number: while (_connection.IsOpen && _connection.BytesToRead > 0) {  	int serialByte = _connection.ReadByte ();  	#if DEBUG  	if (_messageBufferIndex > 0 && _messageBufferIndex % 8 == 0)  		Debug.WriteLine (string.Empty);  	Debug.Write (string.Format ("{0:x2} "' serialByte));  	#endif  	if (_processMessage != null) {  		_processMessage (serialByte);  	} else {  		if ((serialByte & 0x80) != 0) {  			// Process Firmata command byte.  			ProcessCommand (serialByte);  		} else {  			// Process ASCII character.  			ProcessAsciiString (serialByte);  		}  	}  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,SerialDataReceived,The following statement contains a magic number: if (_messageBufferIndex > 0 && _messageBufferIndex % 8 == 0)  	Debug.WriteLine (string.Empty);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,ProcessAnalogStateMessage,The following statement contains a magic number: if (_messageBufferIndex < 2) {  	WriteMessageByte (messageByte);  } else {  	var currentState = new AnalogState {  		Channel = _messageBuffer [0] & 0x0F'  		Level = (_messageBuffer [1] | (messageByte << 7))  	};  	_processMessage = null;  	if (MessageReceived != null)  		MessageReceived (this' new FirmataMessageEventArgs (new FirmataMessage (currentState' MessageType.AnalogState)));  	if (AnalogStateReceived != null)  		AnalogStateReceived (this' new FirmataEventArgs<AnalogState> (currentState));  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,ProcessAnalogStateMessage,The following statement contains a magic number: if (_messageBufferIndex < 2) {  	WriteMessageByte (messageByte);  } else {  	var currentState = new AnalogState {  		Channel = _messageBuffer [0] & 0x0F'  		Level = (_messageBuffer [1] | (messageByte << 7))  	};  	_processMessage = null;  	if (MessageReceived != null)  		MessageReceived (this' new FirmataMessageEventArgs (new FirmataMessage (currentState' MessageType.AnalogState)));  	if (AnalogStateReceived != null)  		AnalogStateReceived (this' new FirmataEventArgs<AnalogState> (currentState));  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,ProcessDigitalStateMessage,The following statement contains a magic number: if (_messageBufferIndex < 2) {  	WriteMessageByte (messageByte);  } else {  	var currentState = new DigitalPortState {  		Port = _messageBuffer [0] & 0x0F'  		Pins = _messageBuffer [1] | (messageByte << 7)  	};  	_processMessage = null;  	if (MessageReceived != null)  		MessageReceived (this' new FirmataMessageEventArgs (new FirmataMessage (currentState' MessageType.DigitalPortState)));  	if (DigitalStateReceived != null)  		DigitalStateReceived (this' new FirmataEventArgs<DigitalPortState> (currentState));  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,ProcessDigitalStateMessage,The following statement contains a magic number: if (_messageBufferIndex < 2) {  	WriteMessageByte (messageByte);  } else {  	var currentState = new DigitalPortState {  		Port = _messageBuffer [0] & 0x0F'  		Pins = _messageBuffer [1] | (messageByte << 7)  	};  	_processMessage = null;  	if (MessageReceived != null)  		MessageReceived (this' new FirmataMessageEventArgs (new FirmataMessage (currentState' MessageType.DigitalPortState)));  	if (DigitalStateReceived != null)  		DigitalStateReceived (this' new FirmataEventArgs<DigitalPortState> (currentState));  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,ProcessProtocolVersionMessage,The following statement contains a magic number: if (_messageBufferIndex < 2) {  	WriteMessageByte (messageByte);  } else {  	var version = new ProtocolVersion {  		Major = _messageBuffer [1]'  		Minor = messageByte  	};  	DeliverMessage (new FirmataMessage (version' MessageType.ProtocolVersion));  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateI2CReply,The following statement contains a magic number: for (int x = 0; x < data.Length; x++) {  	data [x] = (byte)(_messageBuffer [x * 2 + 6] | _messageBuffer [x * 2 + 7] << 7);  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateI2CReply,The following statement contains a magic number: for (int x = 0; x < data.Length; x++) {  	data [x] = (byte)(_messageBuffer [x * 2 + 6] | _messageBuffer [x * 2 + 7] << 7);  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateI2CReply,The following statement contains a magic number: for (int x = 0; x < data.Length; x++) {  	data [x] = (byte)(_messageBuffer [x * 2 + 6] | _messageBuffer [x * 2 + 7] << 7);  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateI2CReply,The following statement contains a magic number: for (int x = 0; x < data.Length; x++) {  	data [x] = (byte)(_messageBuffer [x * 2 + 6] | _messageBuffer [x * 2 + 7] << 7);  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateI2CReply,The following statement contains a magic number: for (int x = 0; x < data.Length; x++) {  	data [x] = (byte)(_messageBuffer [x * 2 + 6] | _messageBuffer [x * 2 + 7] << 7);  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateI2CReply,The following statement contains a magic number: data [x] = (byte)(_messageBuffer [x * 2 + 6] | _messageBuffer [x * 2 + 7] << 7);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateI2CReply,The following statement contains a magic number: data [x] = (byte)(_messageBuffer [x * 2 + 6] | _messageBuffer [x * 2 + 7] << 7);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateI2CReply,The following statement contains a magic number: data [x] = (byte)(_messageBuffer [x * 2 + 6] | _messageBuffer [x * 2 + 7] << 7);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateI2CReply,The following statement contains a magic number: data [x] = (byte)(_messageBuffer [x * 2 + 6] | _messageBuffer [x * 2 + 7] << 7);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateI2CReply,The following statement contains a magic number: data [x] = (byte)(_messageBuffer [x * 2 + 6] | _messageBuffer [x * 2 + 7] << 7);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreatePinStateResponse,The following statement contains a magic number: if (_messageBufferIndex < 5)  	throw new InvalidOperationException (Messages.InvalidOpEx_PinNotSupported);  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreatePinStateResponse,The following statement contains a magic number: for (int x = _messageBufferIndex - 1; x > 3; x--) {  	value = (value << 7) | _messageBuffer [x];  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreatePinStateResponse,The following statement contains a magic number: for (int x = _messageBufferIndex - 1; x > 3; x--) {  	value = (value << 7) | _messageBuffer [x];  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreatePinStateResponse,The following statement contains a magic number: value = (value << 7) | _messageBuffer [x];  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateAnalogMappingResponse,The following statement contains a magic number: for (int x = 2; x < _messageBufferIndex; x++) {  	if (_messageBuffer [x] != 0x7F) {  		pins.Add (new AnalogPinMapping {  			PinNumber = x - 2'  			Channel = _messageBuffer [x]  		});  	}  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateAnalogMappingResponse,The following statement contains a magic number: for (int x = 2; x < _messageBufferIndex; x++) {  	if (_messageBuffer [x] != 0x7F) {  		pins.Add (new AnalogPinMapping {  			PinNumber = x - 2'  			Channel = _messageBuffer [x]  		});  	}  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateAnalogMappingResponse,The following statement contains a magic number: if (_messageBuffer [x] != 0x7F) {  	pins.Add (new AnalogPinMapping {  		PinNumber = x - 2'  		Channel = _messageBuffer [x]  	});  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateAnalogMappingResponse,The following statement contains a magic number: pins.Add (new AnalogPinMapping {  	PinNumber = x - 2'  	Channel = _messageBuffer [x]  });  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateCapabilityResponse,The following statement contains a magic number: while (x < _messageBufferIndex) {  	var capability = new PinCapability {  		PinNumber = pinIndex  	};  	while (x < _messageBufferIndex && _messageBuffer [x] != 127) {  		PinMode pinMode = (PinMode)_messageBuffer [x];  		bool isCapable = (_messageBuffer [x + 1] != 0);  		switch (pinMode) {  		case PinMode.AnalogInput:  			capability.Analog = isCapable;  			capability.AnalogResolution = _messageBuffer [x + 1];  			break;  		case PinMode.DigitalInput:  			capability.DigitalInput = isCapable;  			break;  		case PinMode.DigitalOutput:  			capability.DigitalOutput = isCapable;  			break;  		case PinMode.PwmOutput:  			capability.Pwm = isCapable;  			capability.PwmResolution = _messageBuffer [x + 1];  			break;  		case PinMode.ServoControl:  			capability.Servo = isCapable;  			capability.ServoResolution = _messageBuffer [x + 1];  			break;  		case PinMode.I2C:  			capability.I2C = isCapable;  			break;  		case PinMode.OneWire:  			capability.OneWire = isCapable;  			break;  		case PinMode.StepperControl:  			capability.StepperControl = isCapable;  			break;  		default:  			throw new NotImplementedException ();  		}  		x += 2;  	}  	pins.Add (capability);  	pinIndex++;  	x++;  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateCapabilityResponse,The following statement contains a magic number: while (x < _messageBufferIndex) {  	var capability = new PinCapability {  		PinNumber = pinIndex  	};  	while (x < _messageBufferIndex && _messageBuffer [x] != 127) {  		PinMode pinMode = (PinMode)_messageBuffer [x];  		bool isCapable = (_messageBuffer [x + 1] != 0);  		switch (pinMode) {  		case PinMode.AnalogInput:  			capability.Analog = isCapable;  			capability.AnalogResolution = _messageBuffer [x + 1];  			break;  		case PinMode.DigitalInput:  			capability.DigitalInput = isCapable;  			break;  		case PinMode.DigitalOutput:  			capability.DigitalOutput = isCapable;  			break;  		case PinMode.PwmOutput:  			capability.Pwm = isCapable;  			capability.PwmResolution = _messageBuffer [x + 1];  			break;  		case PinMode.ServoControl:  			capability.Servo = isCapable;  			capability.ServoResolution = _messageBuffer [x + 1];  			break;  		case PinMode.I2C:  			capability.I2C = isCapable;  			break;  		case PinMode.OneWire:  			capability.OneWire = isCapable;  			break;  		case PinMode.StepperControl:  			capability.StepperControl = isCapable;  			break;  		default:  			throw new NotImplementedException ();  		}  		x += 2;  	}  	pins.Add (capability);  	pinIndex++;  	x++;  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateCapabilityResponse,The following statement contains a magic number: while (x < _messageBufferIndex && _messageBuffer [x] != 127) {  	PinMode pinMode = (PinMode)_messageBuffer [x];  	bool isCapable = (_messageBuffer [x + 1] != 0);  	switch (pinMode) {  	case PinMode.AnalogInput:  		capability.Analog = isCapable;  		capability.AnalogResolution = _messageBuffer [x + 1];  		break;  	case PinMode.DigitalInput:  		capability.DigitalInput = isCapable;  		break;  	case PinMode.DigitalOutput:  		capability.DigitalOutput = isCapable;  		break;  	case PinMode.PwmOutput:  		capability.Pwm = isCapable;  		capability.PwmResolution = _messageBuffer [x + 1];  		break;  	case PinMode.ServoControl:  		capability.Servo = isCapable;  		capability.ServoResolution = _messageBuffer [x + 1];  		break;  	case PinMode.I2C:  		capability.I2C = isCapable;  		break;  	case PinMode.OneWire:  		capability.OneWire = isCapable;  		break;  	case PinMode.StepperControl:  		capability.StepperControl = isCapable;  		break;  	default:  		throw new NotImplementedException ();  	}  	x += 2;  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateCapabilityResponse,The following statement contains a magic number: while (x < _messageBufferIndex && _messageBuffer [x] != 127) {  	PinMode pinMode = (PinMode)_messageBuffer [x];  	bool isCapable = (_messageBuffer [x + 1] != 0);  	switch (pinMode) {  	case PinMode.AnalogInput:  		capability.Analog = isCapable;  		capability.AnalogResolution = _messageBuffer [x + 1];  		break;  	case PinMode.DigitalInput:  		capability.DigitalInput = isCapable;  		break;  	case PinMode.DigitalOutput:  		capability.DigitalOutput = isCapable;  		break;  	case PinMode.PwmOutput:  		capability.Pwm = isCapable;  		capability.PwmResolution = _messageBuffer [x + 1];  		break;  	case PinMode.ServoControl:  		capability.Servo = isCapable;  		capability.ServoResolution = _messageBuffer [x + 1];  		break;  	case PinMode.I2C:  		capability.I2C = isCapable;  		break;  	case PinMode.OneWire:  		capability.OneWire = isCapable;  		break;  	case PinMode.StepperControl:  		capability.StepperControl = isCapable;  		break;  	default:  		throw new NotImplementedException ();  	}  	x += 2;  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateCapabilityResponse,The following statement contains a magic number: x += 2;  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateStringDataMessage,The following statement contains a magic number: for (int x = 2; x < _messageBufferIndex; x += 2) {  	builder.Append ((char)(_messageBuffer [x] | (_messageBuffer [x + 1] << 7)));  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateStringDataMessage,The following statement contains a magic number: for (int x = 2; x < _messageBufferIndex; x += 2) {  	builder.Append ((char)(_messageBuffer [x] | (_messageBuffer [x + 1] << 7)));  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateStringDataMessage,The following statement contains a magic number: for (int x = 2; x < _messageBufferIndex; x += 2) {  	builder.Append ((char)(_messageBuffer [x] | (_messageBuffer [x + 1] << 7)));  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateStringDataMessage,The following statement contains a magic number: x += 2
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateStringDataMessage,The following statement contains a magic number: builder.Append ((char)(_messageBuffer [x] | (_messageBuffer [x + 1] << 7)));  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateFirmwareResponse,The following statement contains a magic number: for (int x = 4; x < _messageBufferIndex; x += 2) {  	builder.Append ((char)(_messageBuffer [x] | (_messageBuffer [x + 1] << 7)));  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateFirmwareResponse,The following statement contains a magic number: for (int x = 4; x < _messageBufferIndex; x += 2) {  	builder.Append ((char)(_messageBuffer [x] | (_messageBuffer [x + 1] << 7)));  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateFirmwareResponse,The following statement contains a magic number: for (int x = 4; x < _messageBufferIndex; x += 2) {  	builder.Append ((char)(_messageBuffer [x] | (_messageBuffer [x + 1] << 7)));  }  
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateFirmwareResponse,The following statement contains a magic number: x += 2
Magic Number,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,CreateFirmwareResponse,The following statement contains a magic number: builder.Append ((char)(_messageBuffer [x] | (_messageBuffer [x + 1] << 7)));  
Magic Number,Solid.Arduino,EnhancedSerialConnection,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\EnhancedSerialConnection.cs,EnhancedSerialConnection,The following statement contains a magic number: ReadTimeout = 100;  
Magic Number,Solid.Arduino,EnhancedSerialConnection,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\EnhancedSerialConnection.cs,EnhancedSerialConnection,The following statement contains a magic number: WriteTimeout = 100;  
Magic Number,Solid.Arduino,EnhancedSerialConnection,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\EnhancedSerialConnection.cs,EnhancedSerialConnection,The following statement contains a magic number: ReadTimeout = 100;  
Magic Number,Solid.Arduino,EnhancedSerialConnection,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\EnhancedSerialConnection.cs,EnhancedSerialConnection,The following statement contains a magic number: WriteTimeout = 100;  
Magic Number,Solid.Arduino,SerialConnection,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\SerialConnection.cs,SerialConnection,The following statement contains a magic number: ReadTimeout = 100;  
Magic Number,Solid.Arduino,SerialConnection,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\SerialConnection.cs,SerialConnection,The following statement contains a magic number: WriteTimeout = 100;  
Magic Number,Solid.Arduino,SerialConnection,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\SerialConnection.cs,SerialConnection,The following statement contains a magic number: ReadTimeout = 100;  
Magic Number,Solid.Arduino,SerialConnection,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\SerialConnection.cs,SerialConnection,The following statement contains a magic number: WriteTimeout = 100;  
Magic Number,Solid.Arduino,SerialConnection,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\SerialConnection.cs,Open,The following statement contains a magic number: try {  	base.Open ();  } catch (UnauthorizedAccessException) {  	// Connection closure has probably not yet been finalized.  	// Wait 250 ms and try again once.  	Thread.Sleep (250);  	base.Open ();  }  
Magic Number,Solid.Arduino,SerialConnection,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\SerialConnection.cs,Open,The following statement contains a magic number: Thread.Sleep (250);  
Magic Number,Solid.Arduino,SerialConnection,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\SerialConnection.cs,Close,The following statement contains a magic number: Thread.Sleep (250);  
Magic Number,Solid.Arduino,SerialConnection,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\SerialConnection.cs,FindSerialConnection,The following statement contains a magic number: return firmware.MajorVersion >= 2;  
Magic Number,Solid.Arduino,SerialConnection,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\SerialConnection.cs,FindConnection,The following statement contains a magic number: for (int x = portNames.Length - 1; x >= 0; x--) {  	foreach (SerialBaudRate rate in baudRates) {  		try {  			using (var connection = new EnhancedSerialConnection (portNames [x]' rate)) {  				using (var session = new ArduinoSession (connection' 100)) {  					Debug.WriteLine ("{0}:{1}; "' portNames [x]' (int)rate);  					if (isDeviceAvailable (session))  						return new EnhancedSerialConnection (portNames [x]' rate);  				}  			}  		} catch (UnauthorizedAccessException) {  			// Port is not available.  			Debug.WriteLine ("{0} NOT AVAILABLE; "' portNames [x]);  			break;  		} catch (TimeoutException) {  			// Baudrate or protocol error.  		}  	}  }  
Magic Number,Solid.Arduino,SerialConnection,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\SerialConnection.cs,FindConnection,The following statement contains a magic number: foreach (SerialBaudRate rate in baudRates) {  	try {  		using (var connection = new EnhancedSerialConnection (portNames [x]' rate)) {  			using (var session = new ArduinoSession (connection' 100)) {  				Debug.WriteLine ("{0}:{1}; "' portNames [x]' (int)rate);  				if (isDeviceAvailable (session))  					return new EnhancedSerialConnection (portNames [x]' rate);  			}  		}  	} catch (UnauthorizedAccessException) {  		// Port is not available.  		Debug.WriteLine ("{0} NOT AVAILABLE; "' portNames [x]);  		break;  	} catch (TimeoutException) {  		// Baudrate or protocol error.  	}  }  
Magic Number,Solid.Arduino,SerialConnection,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\SerialConnection.cs,FindConnection,The following statement contains a magic number: try {  	using (var connection = new EnhancedSerialConnection (portNames [x]' rate)) {  		using (var session = new ArduinoSession (connection' 100)) {  			Debug.WriteLine ("{0}:{1}; "' portNames [x]' (int)rate);  			if (isDeviceAvailable (session))  				return new EnhancedSerialConnection (portNames [x]' rate);  		}  	}  } catch (UnauthorizedAccessException) {  	// Port is not available.  	Debug.WriteLine ("{0} NOT AVAILABLE; "' portNames [x]);  	break;  } catch (TimeoutException) {  	// Baudrate or protocol error.  }  
Magic Number,Solid.Arduino,SerialConnection,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\SerialConnection.cs,FindConnection,The following statement contains a magic number: using (var connection = new EnhancedSerialConnection (portNames [x]' rate)) {  	using (var session = new ArduinoSession (connection' 100)) {  		Debug.WriteLine ("{0}:{1}; "' portNames [x]' (int)rate);  		if (isDeviceAvailable (session))  			return new EnhancedSerialConnection (portNames [x]' rate);  	}  }  
Magic Number,Solid.Arduino,SerialConnection,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\SerialConnection.cs,FindConnection,The following statement contains a magic number: using (var session = new ArduinoSession (connection' 100)) {  	Debug.WriteLine ("{0}:{1}; "' portNames [x]' (int)rate);  	if (isDeviceAvailable (session))  		return new EnhancedSerialConnection (portNames [x]' rate);  }  
Magic Number,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,ToBinaryCodedDecimal,The following statement contains a magic number: if (o.Length % 2 == 1)  	o = "0" + o;  
Magic Number,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,ToBinaryCodedDecimal,The following statement contains a magic number: if (isLittleEndian) {  	int byteIndex = bytes.Length - 1;  	for (int x = 0; x < o.Length; x += 2) {  		bytes [byteIndex--] = (byte)(((Convert.ToInt32 (chars [x + 1]) - 48) << 4) | (Convert.ToInt32 (chars [x]) - 48));  	}  } else {  	int byteIndex = 0;  	for (int x = 0; x < o.Length; x += 2) {  		bytes [byteIndex++] = (byte)(((Convert.ToInt32 (chars [x]) - 48) << 4) | (Convert.ToInt32 (chars [x + 1]) - 48));  	}  }  
Magic Number,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,ToBinaryCodedDecimal,The following statement contains a magic number: if (isLittleEndian) {  	int byteIndex = bytes.Length - 1;  	for (int x = 0; x < o.Length; x += 2) {  		bytes [byteIndex--] = (byte)(((Convert.ToInt32 (chars [x + 1]) - 48) << 4) | (Convert.ToInt32 (chars [x]) - 48));  	}  } else {  	int byteIndex = 0;  	for (int x = 0; x < o.Length; x += 2) {  		bytes [byteIndex++] = (byte)(((Convert.ToInt32 (chars [x]) - 48) << 4) | (Convert.ToInt32 (chars [x + 1]) - 48));  	}  }  
Magic Number,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,ToBinaryCodedDecimal,The following statement contains a magic number: if (isLittleEndian) {  	int byteIndex = bytes.Length - 1;  	for (int x = 0; x < o.Length; x += 2) {  		bytes [byteIndex--] = (byte)(((Convert.ToInt32 (chars [x + 1]) - 48) << 4) | (Convert.ToInt32 (chars [x]) - 48));  	}  } else {  	int byteIndex = 0;  	for (int x = 0; x < o.Length; x += 2) {  		bytes [byteIndex++] = (byte)(((Convert.ToInt32 (chars [x]) - 48) << 4) | (Convert.ToInt32 (chars [x + 1]) - 48));  	}  }  
Magic Number,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,ToBinaryCodedDecimal,The following statement contains a magic number: if (isLittleEndian) {  	int byteIndex = bytes.Length - 1;  	for (int x = 0; x < o.Length; x += 2) {  		bytes [byteIndex--] = (byte)(((Convert.ToInt32 (chars [x + 1]) - 48) << 4) | (Convert.ToInt32 (chars [x]) - 48));  	}  } else {  	int byteIndex = 0;  	for (int x = 0; x < o.Length; x += 2) {  		bytes [byteIndex++] = (byte)(((Convert.ToInt32 (chars [x]) - 48) << 4) | (Convert.ToInt32 (chars [x + 1]) - 48));  	}  }  
Magic Number,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,ToBinaryCodedDecimal,The following statement contains a magic number: if (isLittleEndian) {  	int byteIndex = bytes.Length - 1;  	for (int x = 0; x < o.Length; x += 2) {  		bytes [byteIndex--] = (byte)(((Convert.ToInt32 (chars [x + 1]) - 48) << 4) | (Convert.ToInt32 (chars [x]) - 48));  	}  } else {  	int byteIndex = 0;  	for (int x = 0; x < o.Length; x += 2) {  		bytes [byteIndex++] = (byte)(((Convert.ToInt32 (chars [x]) - 48) << 4) | (Convert.ToInt32 (chars [x + 1]) - 48));  	}  }  
Magic Number,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,ToBinaryCodedDecimal,The following statement contains a magic number: if (isLittleEndian) {  	int byteIndex = bytes.Length - 1;  	for (int x = 0; x < o.Length; x += 2) {  		bytes [byteIndex--] = (byte)(((Convert.ToInt32 (chars [x + 1]) - 48) << 4) | (Convert.ToInt32 (chars [x]) - 48));  	}  } else {  	int byteIndex = 0;  	for (int x = 0; x < o.Length; x += 2) {  		bytes [byteIndex++] = (byte)(((Convert.ToInt32 (chars [x]) - 48) << 4) | (Convert.ToInt32 (chars [x + 1]) - 48));  	}  }  
Magic Number,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,ToBinaryCodedDecimal,The following statement contains a magic number: if (isLittleEndian) {  	int byteIndex = bytes.Length - 1;  	for (int x = 0; x < o.Length; x += 2) {  		bytes [byteIndex--] = (byte)(((Convert.ToInt32 (chars [x + 1]) - 48) << 4) | (Convert.ToInt32 (chars [x]) - 48));  	}  } else {  	int byteIndex = 0;  	for (int x = 0; x < o.Length; x += 2) {  		bytes [byteIndex++] = (byte)(((Convert.ToInt32 (chars [x]) - 48) << 4) | (Convert.ToInt32 (chars [x + 1]) - 48));  	}  }  
Magic Number,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,ToBinaryCodedDecimal,The following statement contains a magic number: if (isLittleEndian) {  	int byteIndex = bytes.Length - 1;  	for (int x = 0; x < o.Length; x += 2) {  		bytes [byteIndex--] = (byte)(((Convert.ToInt32 (chars [x + 1]) - 48) << 4) | (Convert.ToInt32 (chars [x]) - 48));  	}  } else {  	int byteIndex = 0;  	for (int x = 0; x < o.Length; x += 2) {  		bytes [byteIndex++] = (byte)(((Convert.ToInt32 (chars [x]) - 48) << 4) | (Convert.ToInt32 (chars [x + 1]) - 48));  	}  }  
Magic Number,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,ToBinaryCodedDecimal,The following statement contains a magic number: for (int x = 0; x < o.Length; x += 2) {  	bytes [byteIndex--] = (byte)(((Convert.ToInt32 (chars [x + 1]) - 48) << 4) | (Convert.ToInt32 (chars [x]) - 48));  }  
Magic Number,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,ToBinaryCodedDecimal,The following statement contains a magic number: for (int x = 0; x < o.Length; x += 2) {  	bytes [byteIndex--] = (byte)(((Convert.ToInt32 (chars [x + 1]) - 48) << 4) | (Convert.ToInt32 (chars [x]) - 48));  }  
Magic Number,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,ToBinaryCodedDecimal,The following statement contains a magic number: for (int x = 0; x < o.Length; x += 2) {  	bytes [byteIndex--] = (byte)(((Convert.ToInt32 (chars [x + 1]) - 48) << 4) | (Convert.ToInt32 (chars [x]) - 48));  }  
Magic Number,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,ToBinaryCodedDecimal,The following statement contains a magic number: for (int x = 0; x < o.Length; x += 2) {  	bytes [byteIndex--] = (byte)(((Convert.ToInt32 (chars [x + 1]) - 48) << 4) | (Convert.ToInt32 (chars [x]) - 48));  }  
Magic Number,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,ToBinaryCodedDecimal,The following statement contains a magic number: x += 2
Magic Number,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,ToBinaryCodedDecimal,The following statement contains a magic number: bytes [byteIndex--] = (byte)(((Convert.ToInt32 (chars [x + 1]) - 48) << 4) | (Convert.ToInt32 (chars [x]) - 48));  
Magic Number,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,ToBinaryCodedDecimal,The following statement contains a magic number: bytes [byteIndex--] = (byte)(((Convert.ToInt32 (chars [x + 1]) - 48) << 4) | (Convert.ToInt32 (chars [x]) - 48));  
Magic Number,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,ToBinaryCodedDecimal,The following statement contains a magic number: bytes [byteIndex--] = (byte)(((Convert.ToInt32 (chars [x + 1]) - 48) << 4) | (Convert.ToInt32 (chars [x]) - 48));  
Magic Number,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,ToBinaryCodedDecimal,The following statement contains a magic number: for (int x = 0; x < o.Length; x += 2) {  	bytes [byteIndex++] = (byte)(((Convert.ToInt32 (chars [x]) - 48) << 4) | (Convert.ToInt32 (chars [x + 1]) - 48));  }  
Magic Number,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,ToBinaryCodedDecimal,The following statement contains a magic number: for (int x = 0; x < o.Length; x += 2) {  	bytes [byteIndex++] = (byte)(((Convert.ToInt32 (chars [x]) - 48) << 4) | (Convert.ToInt32 (chars [x + 1]) - 48));  }  
Magic Number,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,ToBinaryCodedDecimal,The following statement contains a magic number: for (int x = 0; x < o.Length; x += 2) {  	bytes [byteIndex++] = (byte)(((Convert.ToInt32 (chars [x]) - 48) << 4) | (Convert.ToInt32 (chars [x + 1]) - 48));  }  
Magic Number,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,ToBinaryCodedDecimal,The following statement contains a magic number: for (int x = 0; x < o.Length; x += 2) {  	bytes [byteIndex++] = (byte)(((Convert.ToInt32 (chars [x]) - 48) << 4) | (Convert.ToInt32 (chars [x + 1]) - 48));  }  
Magic Number,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,ToBinaryCodedDecimal,The following statement contains a magic number: x += 2
Magic Number,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,ToBinaryCodedDecimal,The following statement contains a magic number: bytes [byteIndex++] = (byte)(((Convert.ToInt32 (chars [x]) - 48) << 4) | (Convert.ToInt32 (chars [x + 1]) - 48));  
Magic Number,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,ToBinaryCodedDecimal,The following statement contains a magic number: bytes [byteIndex++] = (byte)(((Convert.ToInt32 (chars [x]) - 48) << 4) | (Convert.ToInt32 (chars [x + 1]) - 48));  
Magic Number,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,ToBinaryCodedDecimal,The following statement contains a magic number: bytes [byteIndex++] = (byte)(((Convert.ToInt32 (chars [x]) - 48) << 4) | (Convert.ToInt32 (chars [x + 1]) - 48));  
Magic Number,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,To14BitIso,The following statement contains a magic number: for (int x = 0; x < o.Length; x++) {  	short c = Convert.ToInt16 (o [x]);  	dataBytes [x * 2] = (byte)(c & 0x7F);  	dataBytes [x * 2 + 1] = (byte)((c >> 7) & 0x7F);  }  
Magic Number,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,To14BitIso,The following statement contains a magic number: for (int x = 0; x < o.Length; x++) {  	short c = Convert.ToInt16 (o [x]);  	dataBytes [x * 2] = (byte)(c & 0x7F);  	dataBytes [x * 2 + 1] = (byte)((c >> 7) & 0x7F);  }  
Magic Number,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,To14BitIso,The following statement contains a magic number: for (int x = 0; x < o.Length; x++) {  	short c = Convert.ToInt16 (o [x]);  	dataBytes [x * 2] = (byte)(c & 0x7F);  	dataBytes [x * 2 + 1] = (byte)((c >> 7) & 0x7F);  }  
Magic Number,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,To14BitIso,The following statement contains a magic number: dataBytes [x * 2] = (byte)(c & 0x7F);  
Magic Number,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,To14BitIso,The following statement contains a magic number: dataBytes [x * 2 + 1] = (byte)((c >> 7) & 0x7F);  
Magic Number,Solid.Arduino,StringExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\StringExtensions.cs,To14BitIso,The following statement contains a magic number: dataBytes [x * 2 + 1] = (byte)((c >> 7) & 0x7F);  
Magic Number,Solid.Arduino.Firmata,ByteArrayExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\Firmata\ByteArrayExtensions.cs,ConvertBinaryCodedDecimalToString,The following statement contains a magic number: if (isLittleEndian) {  	for (int x = data.Length - 1; x >= 0; x--) {  		chars [charIndex++] = ConvertToChar (data [x] & 0x0F);  		chars [charIndex++] = ConvertToChar (data [x] >> 4);  	}  } else {  	for (int x = 0; x < data.Length; x++) {  		chars [charIndex++] = ConvertToChar (data [x] >> 4);  		chars [charIndex++] = ConvertToChar (data [x] & 0x0F);  	}  }  
Magic Number,Solid.Arduino.Firmata,ByteArrayExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\Firmata\ByteArrayExtensions.cs,ConvertBinaryCodedDecimalToString,The following statement contains a magic number: if (isLittleEndian) {  	for (int x = data.Length - 1; x >= 0; x--) {  		chars [charIndex++] = ConvertToChar (data [x] & 0x0F);  		chars [charIndex++] = ConvertToChar (data [x] >> 4);  	}  } else {  	for (int x = 0; x < data.Length; x++) {  		chars [charIndex++] = ConvertToChar (data [x] >> 4);  		chars [charIndex++] = ConvertToChar (data [x] & 0x0F);  	}  }  
Magic Number,Solid.Arduino.Firmata,ByteArrayExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\Firmata\ByteArrayExtensions.cs,ConvertBinaryCodedDecimalToString,The following statement contains a magic number: for (int x = data.Length - 1; x >= 0; x--) {  	chars [charIndex++] = ConvertToChar (data [x] & 0x0F);  	chars [charIndex++] = ConvertToChar (data [x] >> 4);  }  
Magic Number,Solid.Arduino.Firmata,ByteArrayExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\Firmata\ByteArrayExtensions.cs,ConvertBinaryCodedDecimalToString,The following statement contains a magic number: chars [charIndex++] = ConvertToChar (data [x] >> 4);  
Magic Number,Solid.Arduino.Firmata,ByteArrayExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\Firmata\ByteArrayExtensions.cs,ConvertBinaryCodedDecimalToString,The following statement contains a magic number: for (int x = 0; x < data.Length; x++) {  	chars [charIndex++] = ConvertToChar (data [x] >> 4);  	chars [charIndex++] = ConvertToChar (data [x] & 0x0F);  }  
Magic Number,Solid.Arduino.Firmata,ByteArrayExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\Firmata\ByteArrayExtensions.cs,ConvertBinaryCodedDecimalToString,The following statement contains a magic number: chars [charIndex++] = ConvertToChar (data [x] >> 4);  
Magic Number,Solid.Arduino.Firmata,ByteArrayExtensions,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\Firmata\ByteArrayExtensions.cs,ConvertToChar,The following statement contains a magic number: if (code > 9)  	throw new ArgumentException (Messages.ArgumentEx_CannotConvertBcd);  
Magic Number,Solid.Arduino.Firmata,DigitalPortState,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\Firmata\DigitalPortState.cs,IsSet,The following statement contains a magic number: if (pin < 0 || pin > 7)  	throw new ArgumentOutOfRangeException ("pin"' Messages.ArgumentEx_PinRange0_7);  
Missing Default,Solid.Arduino,ArduinoSession,D:\newReposJune17\SolidSoils_Arduino\Solid.Arduino\ArduinoSession.cs,ProcessAsciiString,The following switch statement is missing a default case: switch (_currentStringRequest.Mode) {  case StringReadMode.ReadLine:  	if (c == _connection.NewLine [0] || serialByte == 0x1A)  		EnqueueReceivedString (new string (_stringBuffer' 0' _stringBufferIndex - 1));  	else if (c == '\n')  		// Ignore linefeed' just in case cr+lf pair was expected.  		_stringBufferIndex--;  	break;  case StringReadMode.ReadBlock:  	if (_stringBufferIndex == _currentStringRequest.BlockLength)  		EnqueueReceivedString (new string (_stringBuffer' 0' _stringBufferIndex));  	break;  case StringReadMode.ReadToTerminator:  	if (c == _currentStringRequest.Terminator)  		EnqueueReceivedString (new string (_stringBuffer' 0' _stringBufferIndex - 1));  	break;  }  
