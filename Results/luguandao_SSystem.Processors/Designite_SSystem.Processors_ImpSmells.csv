Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SSystem.Processors,TimerProcessor,C:\repos\luguandao_SSystem.Processors\implementation\src\SSystem.Processors\TimerProcessor.cs,CalcNextCycle,Cyclomatic complexity of the method is 21
Magic Number,SSystem.Processors,DbProcessor,C:\repos\luguandao_SSystem.Processors\implementation\src\SSystem.Processors\DbProcessor.cs,DbProcessor,The following statement contains a magic number: ExecuteTimeoutBySecond = 30;  
Magic Number,SSystem.Processors,ProgressChangedEventArgs,C:\repos\luguandao_SSystem.Processors\implementation\src\SSystem.Processors\EventArgs\ProgressChangedEventArgs.cs,ToString,The following statement contains a magic number: return string.Format ("{0}%"' (DegreeOfCompletion * 100).ToString ("F2"));  
Magic Number,SSystem.Processors,TimerProcessor,C:\repos\luguandao_SSystem.Processors\implementation\src\SSystem.Processors\TimerProcessor.cs,CalcNextCycle,The following statement contains a magic number: switch (TimerType) {  case PerTimerType.Second:  	InvokeDateTime = InvokeDateTime.AddSeconds (ScaleForNextCycle);  	break;  case PerTimerType.Minitus:  	InvokeDateTime = InvokeDateTime.AddMinutes (ScaleForNextCycle);  	break;  case PerTimerType.Hour:  	InvokeDateTime = InvokeDateTime.AddHours (ScaleForNextCycle);  	break;  case PerTimerType.Day:  	InvokeDateTime = InvokeDateTime.AddDays (ScaleForNextCycle);  	break;  case PerTimerType.Week:  	InvokeDateTime = InvokeDateTime.AddDays (7 * ScaleForNextCycle);  	break;  case PerTimerType.Month:  	InvokeDateTime = InvokeDateTime.AddMonths (1);  	break;  case PerTimerType.Year:  	InvokeDateTime = InvokeDateTime.AddYears (1);  	break;  }  
Magic Number,SSystem.Processors,TimerProcessor,C:\repos\luguandao_SSystem.Processors\implementation\src\SSystem.Processors\TimerProcessor.cs,CalcNextCycle,The following statement contains a magic number: InvokeDateTime = InvokeDateTime.AddDays (7 * ScaleForNextCycle);  
Magic Number,SSystem.Processors,TimerProcessor,C:\repos\luguandao_SSystem.Processors\implementation\src\SSystem.Processors\TimerProcessor.cs,_Start,The following statement contains a magic number: if (m_isInitTimer) {  	m_Timer = new System.Timers.Timer (1000);  	//(TimerCallBack' this' 0' 1000);  	m_Timer.Elapsed += m_Timer_Elapsed;  	m_Timer.Start ();  	m_IsTimerStoped = false;  	AdjustInvokeTime ();  	while (!m_IsTimerStoped && !m_CancelToken.IsCancellationRequested) {  		if (!IsCycle && DateTime.Now > InvokeDateTime) {  			break;  		}  		Thread.Sleep (100);  	}  	StopTimer ();  }  
Magic Number,SSystem.Processors,TimerProcessor,C:\repos\luguandao_SSystem.Processors\implementation\src\SSystem.Processors\TimerProcessor.cs,_Start,The following statement contains a magic number: if (m_isInitTimer) {  	m_Timer = new System.Timers.Timer (1000);  	//(TimerCallBack' this' 0' 1000);  	m_Timer.Elapsed += m_Timer_Elapsed;  	m_Timer.Start ();  	m_IsTimerStoped = false;  	AdjustInvokeTime ();  	while (!m_IsTimerStoped && !m_CancelToken.IsCancellationRequested) {  		if (!IsCycle && DateTime.Now > InvokeDateTime) {  			break;  		}  		Thread.Sleep (100);  	}  	StopTimer ();  }  
Magic Number,SSystem.Processors,TimerProcessor,C:\repos\luguandao_SSystem.Processors\implementation\src\SSystem.Processors\TimerProcessor.cs,_Start,The following statement contains a magic number: m_Timer = new System.Timers.Timer (1000);  
Magic Number,SSystem.Processors,TimerProcessor,C:\repos\luguandao_SSystem.Processors\implementation\src\SSystem.Processors\TimerProcessor.cs,_Start,The following statement contains a magic number: while (!m_IsTimerStoped && !m_CancelToken.IsCancellationRequested) {  	if (!IsCycle && DateTime.Now > InvokeDateTime) {  		break;  	}  	Thread.Sleep (100);  }  
Magic Number,SSystem.Processors,TimerProcessor,C:\repos\luguandao_SSystem.Processors\implementation\src\SSystem.Processors\TimerProcessor.cs,_Start,The following statement contains a magic number: Thread.Sleep (100);  
Missing Default,SSystem.Processors,TimerProcessor,C:\repos\luguandao_SSystem.Processors\implementation\src\SSystem.Processors\TimerProcessor.cs,CalcNextCycle,The following switch statement is missing a default case: switch (TimerType) {  case PerTimerType.Second:  	InvokeDateTime = InvokeDateTime.AddSeconds (ScaleForNextCycle);  	break;  case PerTimerType.Minitus:  	InvokeDateTime = InvokeDateTime.AddMinutes (ScaleForNextCycle);  	break;  case PerTimerType.Hour:  	InvokeDateTime = InvokeDateTime.AddHours (ScaleForNextCycle);  	break;  case PerTimerType.Day:  	InvokeDateTime = InvokeDateTime.AddDays (ScaleForNextCycle);  	break;  case PerTimerType.Week:  	InvokeDateTime = InvokeDateTime.AddDays (7 * ScaleForNextCycle);  	break;  case PerTimerType.Month:  	InvokeDateTime = InvokeDateTime.AddMonths (1);  	break;  case PerTimerType.Year:  	InvokeDateTime = InvokeDateTime.AddYears (1);  	break;  }  
