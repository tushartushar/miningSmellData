Implementation smell,Namespace,Class,File,Method,Description
Long Method,ExCSS,PropertyFactory,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Factories\PropertyFactory.cs,PropertyFactory,The method has 265 lines of code.
Long Method,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParsePath,The method has 107 lines of code.
Long Method,ExCSS,Lexer,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,Data,The method has 185 lines of code.
Long Method,ExCSS,TextEncoding,C:\repos\TylerBrinks_ExCSS\src\ExCSS\TextEncoding.cs,CreateEncodings,The method has 209 lines of code.
Complex Method,ExCSS,StyleDeclaration,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\StyleDeclaration.cs,ToCss,Cyclomatic complexity of the method is 12
Complex Method,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,Serialize,Cyclomatic complexity of the method is 9
Complex Method,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParsePath,Cyclomatic complexity of the method is 13
Complex Method,ExCSS,Lexer,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,UnicodeRange,Cyclomatic complexity of the method is 9
Complex Method,ExCSS,StylesheetComposer,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Parser\StylesheetComposer.cs,CreateAtRule,Cyclomatic complexity of the method is 10
Complex Method,ExCSS,StylesheetComposer,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Parser\StylesheetComposer.cs,CreateDeclarationWith,Cyclomatic complexity of the method is 8
Long Parameter List,ExCSS,CharExtensions,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Extensions\CharExtensions.cs,IsOneOf,The method has 5 parameters. Parameters: c' o1' o2' o3' o4
Long Parameter List,ExCSS,TransformMatrix,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The method has 15 parameters. Parameters: m11' m12' m13' m21' m22' m23' m31' m32' m33' tx' ty' tz' px' py' pz
Long Parameter List,ExCSS,StylesheetParser,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Parser\StylesheetParser.cs,StylesheetParser,The method has 6 parameters. Parameters: includeUnknownRules' includeUnknownDeclarations' tolerateInvalidSelectors' tolerateInvalidValues' tolerateInvalidConstraints' preserveComments
Long Parameter List,ExCSS,RadialGradient,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\RadialGradient.cs,RadialGradient,The method has 7 parameters. Parameters: circle' pt' width' height' sizeMode' stops' repeating
Long Parameter List,ExCSS,Shadow,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Shadow.cs,Shadow,The method has 6 parameters. Parameters: inset' offsetX' offsetY' blurRadius' spreadRadius' color
Long Identifier,ExCSS,Converters,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Converters.cs,,The length of the parameter PositiveOrInfiniteNumberConverter is 33.
Long Identifier,ExCSS,Converters,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Converters.cs,,The length of the parameter OptionalLengthOrPercentConverter is 32.
Long Identifier,ExCSS,Converters,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Converters.cs,,The length of the parameter BorderRadiusShorthandConverter is 30.
Long Statement,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,RelativeState,The length of the statement  "                    ((index + 2 == input.Length) || input[index + 2].IsOneOf(Symbols.Solidus' Symbols.ReverseSolidus' Symbols.Num' Symbols.QuestionMark))) " is 134.
Complex Conditional,ExCSS,Medium,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Medium.cs,Equals,The conditional expression  "(other != null) &&                  (other.IsExclusive == IsExclusive) &&                  (other.IsInverse == IsInverse) &&                  other.Type.Is(Type) &&                  (other.Features.Count() == Features.Count())"  is complex.
Complex Conditional,ExCSS,TextSource,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TextSource.cs,DetectByteOrderMarkAsync,The conditional expression  "(count > 2) && (_buffer[0] == 0xef) && (_buffer[1] == 0xbb) && (_buffer[2] == 0xbf)"  is complex.
Complex Conditional,ExCSS,TextSource,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TextSource.cs,DetectByteOrderMarkAsync,The conditional expression  "(count > 3) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe) && (_buffer[2] == 0x0) &&                       (_buffer[3] == 0x0)"  is complex.
Complex Conditional,ExCSS,TextSource,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TextSource.cs,DetectByteOrderMarkAsync,The conditional expression  "(count > 3) && (_buffer[0] == 0x0) && (_buffer[1] == 0x0) && (_buffer[2] == 0xfe) &&                       (_buffer[3] == 0xff)"  is complex.
Complex Conditional,ExCSS,TextSource,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TextSource.cs,DetectByteOrderMarkAsync,The conditional expression  "(count > 3) && (_buffer[0] == 0x84) && (_buffer[1] == 0x31) && (_buffer[2] == 0x95) &&                       (_buffer[3] == 0x33)"  is complex.
Complex Conditional,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseScheme,The conditional expression  "c.IsAlphanumericAscii() || (c == Symbols.Plus) || (c == Symbols.Minus) || (c == Symbols.Dot)"  is complex.
Complex Conditional,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseScheme,The conditional expression  "(index < input.Length - 1) && (input[++index] == Symbols.Solidus) &&                              (++index < input.Length) && (input[index] == Symbols.Solidus)"  is complex.
Complex Conditional,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseSchemeData,The conditional expression  "(c == Symbols.Percent) && (index + 2 < input.Length) && input[index + 1].IsHex() &&                      input[index + 2].IsHex()"  is complex.
Complex Conditional,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,RelativeState,The conditional expression  "input[index].IsLetter() &&                       _scheme.Is(ProtocolNames.File) &&                       (index + 1 < input.Length) &&                       input[index + 1].IsOneOf(Symbols.Colon' Symbols.Solidus) &&                      ((index + 2 == input.Length) || input[index + 2].IsOneOf(Symbols.Solidus' Symbols.ReverseSolidus' Symbols.Num' Symbols.QuestionMark))"  is complex.
Complex Conditional,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseAuthority,The conditional expression  "(c == Symbols.Percent) && (index + 2 < input.Length) && input[index + 1].IsHex() &&                           input[index + 2].IsHex()"  is complex.
Complex Conditional,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseAuthority,The conditional expression  "(c != Symbols.Colon) &&                           ((c == Symbols.Num) || (c == Symbols.QuestionMark) || c.IsNormalPathCharacter())"  is complex.
Complex Conditional,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseFileHost,The conditional expression  "(c == Symbols.Solidus) ||                      (c == Symbols.ReverseSolidus) ||                      (c == Symbols.Num) ||                      (c == Symbols.QuestionMark)"  is complex.
Complex Conditional,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseFileHost,The conditional expression  "(length == 2) &&                   input[index - 2].IsLetter() &&                  ((input[index - 1] == Symbols.Pipe) || (input[index - 1] == Symbols.Colon))"  is complex.
Complex Conditional,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParsePort,The conditional expression  "(c == Symbols.QuestionMark) || (c == Symbols.Solidus) || (c == Symbols.ReverseSolidus) ||                      (c == Symbols.Num)"  is complex.
Complex Conditional,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParsePort,The conditional expression  "c.IsDigit() || (c == Symbols.Tab) || (c == Symbols.LineFeed) || (c == Symbols.CarriageReturn)"  is complex.
Complex Conditional,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParsePath,The conditional expression  "(c == Symbols.EndOfFile) || (c == Symbols.Solidus) || (c == Symbols.ReverseSolidus) || breakNow"  is complex.
Complex Conditional,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParsePath,The conditional expression  "_scheme.Is(ProtocolNames.File) &&                              (paths.Count == originalCount) &&                              (path.Length == 2) &&                              path[0].IsLetter() &&                              (path[1] == Symbols.Pipe)"  is complex.
Complex Conditional,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParsePath,The conditional expression  "(c == Symbols.Percent) &&                           (index + 2 < input.Length) &&                           input[index + 1].IsHex() &&                           input[index + 2].IsHex()"  is complex.
Complex Conditional,ExCSS,StylesheetComposer,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Parser\StylesheetComposer.cs,ParseComments,The conditional expression  "(token.Type == TokenType.Whitespace) || (token.Type == TokenType.Comment) ||                     (token.Type == TokenType.Cdc) || (token.Type == TokenType.Cdo)"  is complex.
Complex Conditional,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,TryFromHex,The conditional expression  "(color.Length == 6) || (color.Length == 3) || (color.Length == 8) || (color.Length == 4)"  is complex.
Magic Number,ExCSS,PortableExtensions,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Extensions\PortableExtensions.cs,Delay,The following statement contains a magic number: return Task.Delay(Math.Max(timeout' 4)' token);
Magic Number,ExCSS,ValueExtensions,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Extensions\ValueExtensions.cs,IsWeight,The following statement contains a magic number: return (value == 100) || (value == 200) || (value == 300) || (value == 400) ||                     (value == 500) || (value == 600) || (value == 700) || (value == 800) ||                     (value == 900);
Magic Number,ExCSS,ValueExtensions,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Extensions\ValueExtensions.cs,IsWeight,The following statement contains a magic number: return (value == 100) || (value == 200) || (value == 300) || (value == 400) ||                     (value == 500) || (value == 600) || (value == 700) || (value == 800) ||                     (value == 900);
Magic Number,ExCSS,ValueExtensions,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Extensions\ValueExtensions.cs,IsWeight,The following statement contains a magic number: return (value == 100) || (value == 200) || (value == 300) || (value == 400) ||                     (value == 500) || (value == 600) || (value == 700) || (value == 800) ||                     (value == 900);
Magic Number,ExCSS,ValueExtensions,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Extensions\ValueExtensions.cs,IsWeight,The following statement contains a magic number: return (value == 100) || (value == 200) || (value == 300) || (value == 400) ||                     (value == 500) || (value == 600) || (value == 700) || (value == 800) ||                     (value == 900);
Magic Number,ExCSS,ValueExtensions,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Extensions\ValueExtensions.cs,IsWeight,The following statement contains a magic number: return (value == 100) || (value == 200) || (value == 300) || (value == 400) ||                     (value == 500) || (value == 600) || (value == 700) || (value == 800) ||                     (value == 900);
Magic Number,ExCSS,ValueExtensions,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Extensions\ValueExtensions.cs,IsWeight,The following statement contains a magic number: return (value == 100) || (value == 200) || (value == 300) || (value == 400) ||                     (value == 500) || (value == 600) || (value == 700) || (value == 800) ||                     (value == 900);
Magic Number,ExCSS,ValueExtensions,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Extensions\ValueExtensions.cs,IsWeight,The following statement contains a magic number: return (value == 100) || (value == 200) || (value == 300) || (value == 400) ||                     (value == 500) || (value == 600) || (value == 700) || (value == 800) ||                     (value == 900);
Magic Number,ExCSS,ValueExtensions,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Extensions\ValueExtensions.cs,IsWeight,The following statement contains a magic number: return (value == 100) || (value == 200) || (value == 300) || (value == 400) ||                     (value == 500) || (value == 600) || (value == 700) || (value == 800) ||                     (value == 900);
Magic Number,ExCSS,ValueExtensions,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Extensions\ValueExtensions.cs,IsWeight,The following statement contains a magic number: return (value == 100) || (value == 200) || (value == 300) || (value == 400) ||                     (value == 500) || (value == 600) || (value == 700) || (value == 800) ||                     (value == 900);
Magic Number,ExCSS,ValueExtensions,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Extensions\ValueExtensions.cs,ToRgbComponent,The following statement contains a magic number: if (element.HasValue)              {                  return (byte) Math.Min(element.Value' 255);              }
Magic Number,ExCSS,Pool,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Pool.cs,NewStringBuilder,The following statement contains a magic number: lock (Lock)              {                  return Builder.Count == 0 ? new StringBuilder(1024) : Builder.Pop().Clear();              }
Magic Number,ExCSS,RenderDevice,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\RenderDevice.cs,RenderDevice,The following statement contains a magic number: ColorBits = 32;
Magic Number,ExCSS,RenderDevice,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\RenderDevice.cs,RenderDevice,The following statement contains a magic number: Resolution = 96;
Magic Number,ExCSS,RenderDevice,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\RenderDevice.cs,RenderDevice,The following statement contains a magic number: Frequency = 60;
Magic Number,ExCSS,TextSource,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TextSource.cs,DetectByteOrderMarkAsync,The following statement contains a magic number: if ((count > 2) && (_buffer[0] == 0xef) && (_buffer[1] == 0xbb) && (_buffer[2] == 0xbf))              {                  _encoding = TextEncoding.Utf8;                  offset = 3;              }              else if ((count > 3) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe) && (_buffer[2] == 0x0) &&                       (_buffer[3] == 0x0))              {                  _encoding = TextEncoding.Utf32Le;                  offset = 4;              }              else if ((count > 3) && (_buffer[0] == 0x0) && (_buffer[1] == 0x0) && (_buffer[2] == 0xfe) &&                       (_buffer[3] == 0xff))              {                  _encoding = TextEncoding.Utf32Be;                  offset = 4;              }              else if ((count > 1) && (_buffer[0] == 0xfe) && (_buffer[1] == 0xff))              {                  _encoding = TextEncoding.Utf16Be;                  offset = 2;              }              else if ((count > 1) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe))              {                  _encoding = TextEncoding.Utf16Le;                  offset = 2;              }              else if ((count > 3) && (_buffer[0] == 0x84) && (_buffer[1] == 0x31) && (_buffer[2] == 0x95) &&                       (_buffer[3] == 0x33))              {                  _encoding = TextEncoding.Gb18030;                  offset = 4;              }
Magic Number,ExCSS,TextSource,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TextSource.cs,DetectByteOrderMarkAsync,The following statement contains a magic number: if ((count > 2) && (_buffer[0] == 0xef) && (_buffer[1] == 0xbb) && (_buffer[2] == 0xbf))              {                  _encoding = TextEncoding.Utf8;                  offset = 3;              }              else if ((count > 3) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe) && (_buffer[2] == 0x0) &&                       (_buffer[3] == 0x0))              {                  _encoding = TextEncoding.Utf32Le;                  offset = 4;              }              else if ((count > 3) && (_buffer[0] == 0x0) && (_buffer[1] == 0x0) && (_buffer[2] == 0xfe) &&                       (_buffer[3] == 0xff))              {                  _encoding = TextEncoding.Utf32Be;                  offset = 4;              }              else if ((count > 1) && (_buffer[0] == 0xfe) && (_buffer[1] == 0xff))              {                  _encoding = TextEncoding.Utf16Be;                  offset = 2;              }              else if ((count > 1) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe))              {                  _encoding = TextEncoding.Utf16Le;                  offset = 2;              }              else if ((count > 3) && (_buffer[0] == 0x84) && (_buffer[1] == 0x31) && (_buffer[2] == 0x95) &&                       (_buffer[3] == 0x33))              {                  _encoding = TextEncoding.Gb18030;                  offset = 4;              }
Magic Number,ExCSS,TextSource,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TextSource.cs,DetectByteOrderMarkAsync,The following statement contains a magic number: if ((count > 2) && (_buffer[0] == 0xef) && (_buffer[1] == 0xbb) && (_buffer[2] == 0xbf))              {                  _encoding = TextEncoding.Utf8;                  offset = 3;              }              else if ((count > 3) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe) && (_buffer[2] == 0x0) &&                       (_buffer[3] == 0x0))              {                  _encoding = TextEncoding.Utf32Le;                  offset = 4;              }              else if ((count > 3) && (_buffer[0] == 0x0) && (_buffer[1] == 0x0) && (_buffer[2] == 0xfe) &&                       (_buffer[3] == 0xff))              {                  _encoding = TextEncoding.Utf32Be;                  offset = 4;              }              else if ((count > 1) && (_buffer[0] == 0xfe) && (_buffer[1] == 0xff))              {                  _encoding = TextEncoding.Utf16Be;                  offset = 2;              }              else if ((count > 1) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe))              {                  _encoding = TextEncoding.Utf16Le;                  offset = 2;              }              else if ((count > 3) && (_buffer[0] == 0x84) && (_buffer[1] == 0x31) && (_buffer[2] == 0x95) &&                       (_buffer[3] == 0x33))              {                  _encoding = TextEncoding.Gb18030;                  offset = 4;              }
Magic Number,ExCSS,TextSource,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TextSource.cs,DetectByteOrderMarkAsync,The following statement contains a magic number: if ((count > 2) && (_buffer[0] == 0xef) && (_buffer[1] == 0xbb) && (_buffer[2] == 0xbf))              {                  _encoding = TextEncoding.Utf8;                  offset = 3;              }              else if ((count > 3) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe) && (_buffer[2] == 0x0) &&                       (_buffer[3] == 0x0))              {                  _encoding = TextEncoding.Utf32Le;                  offset = 4;              }              else if ((count > 3) && (_buffer[0] == 0x0) && (_buffer[1] == 0x0) && (_buffer[2] == 0xfe) &&                       (_buffer[3] == 0xff))              {                  _encoding = TextEncoding.Utf32Be;                  offset = 4;              }              else if ((count > 1) && (_buffer[0] == 0xfe) && (_buffer[1] == 0xff))              {                  _encoding = TextEncoding.Utf16Be;                  offset = 2;              }              else if ((count > 1) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe))              {                  _encoding = TextEncoding.Utf16Le;                  offset = 2;              }              else if ((count > 3) && (_buffer[0] == 0x84) && (_buffer[1] == 0x31) && (_buffer[2] == 0x95) &&                       (_buffer[3] == 0x33))              {                  _encoding = TextEncoding.Gb18030;                  offset = 4;              }
Magic Number,ExCSS,TextSource,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TextSource.cs,DetectByteOrderMarkAsync,The following statement contains a magic number: if ((count > 2) && (_buffer[0] == 0xef) && (_buffer[1] == 0xbb) && (_buffer[2] == 0xbf))              {                  _encoding = TextEncoding.Utf8;                  offset = 3;              }              else if ((count > 3) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe) && (_buffer[2] == 0x0) &&                       (_buffer[3] == 0x0))              {                  _encoding = TextEncoding.Utf32Le;                  offset = 4;              }              else if ((count > 3) && (_buffer[0] == 0x0) && (_buffer[1] == 0x0) && (_buffer[2] == 0xfe) &&                       (_buffer[3] == 0xff))              {                  _encoding = TextEncoding.Utf32Be;                  offset = 4;              }              else if ((count > 1) && (_buffer[0] == 0xfe) && (_buffer[1] == 0xff))              {                  _encoding = TextEncoding.Utf16Be;                  offset = 2;              }              else if ((count > 1) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe))              {                  _encoding = TextEncoding.Utf16Le;                  offset = 2;              }              else if ((count > 3) && (_buffer[0] == 0x84) && (_buffer[1] == 0x31) && (_buffer[2] == 0x95) &&                       (_buffer[3] == 0x33))              {                  _encoding = TextEncoding.Gb18030;                  offset = 4;              }
Magic Number,ExCSS,TextSource,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TextSource.cs,DetectByteOrderMarkAsync,The following statement contains a magic number: if ((count > 2) && (_buffer[0] == 0xef) && (_buffer[1] == 0xbb) && (_buffer[2] == 0xbf))              {                  _encoding = TextEncoding.Utf8;                  offset = 3;              }              else if ((count > 3) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe) && (_buffer[2] == 0x0) &&                       (_buffer[3] == 0x0))              {                  _encoding = TextEncoding.Utf32Le;                  offset = 4;              }              else if ((count > 3) && (_buffer[0] == 0x0) && (_buffer[1] == 0x0) && (_buffer[2] == 0xfe) &&                       (_buffer[3] == 0xff))              {                  _encoding = TextEncoding.Utf32Be;                  offset = 4;              }              else if ((count > 1) && (_buffer[0] == 0xfe) && (_buffer[1] == 0xff))              {                  _encoding = TextEncoding.Utf16Be;                  offset = 2;              }              else if ((count > 1) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe))              {                  _encoding = TextEncoding.Utf16Le;                  offset = 2;              }              else if ((count > 3) && (_buffer[0] == 0x84) && (_buffer[1] == 0x31) && (_buffer[2] == 0x95) &&                       (_buffer[3] == 0x33))              {                  _encoding = TextEncoding.Gb18030;                  offset = 4;              }
Magic Number,ExCSS,TextSource,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TextSource.cs,DetectByteOrderMarkAsync,The following statement contains a magic number: if ((count > 2) && (_buffer[0] == 0xef) && (_buffer[1] == 0xbb) && (_buffer[2] == 0xbf))              {                  _encoding = TextEncoding.Utf8;                  offset = 3;              }              else if ((count > 3) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe) && (_buffer[2] == 0x0) &&                       (_buffer[3] == 0x0))              {                  _encoding = TextEncoding.Utf32Le;                  offset = 4;              }              else if ((count > 3) && (_buffer[0] == 0x0) && (_buffer[1] == 0x0) && (_buffer[2] == 0xfe) &&                       (_buffer[3] == 0xff))              {                  _encoding = TextEncoding.Utf32Be;                  offset = 4;              }              else if ((count > 1) && (_buffer[0] == 0xfe) && (_buffer[1] == 0xff))              {                  _encoding = TextEncoding.Utf16Be;                  offset = 2;              }              else if ((count > 1) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe))              {                  _encoding = TextEncoding.Utf16Le;                  offset = 2;              }              else if ((count > 3) && (_buffer[0] == 0x84) && (_buffer[1] == 0x31) && (_buffer[2] == 0x95) &&                       (_buffer[3] == 0x33))              {                  _encoding = TextEncoding.Gb18030;                  offset = 4;              }
Magic Number,ExCSS,TextSource,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TextSource.cs,DetectByteOrderMarkAsync,The following statement contains a magic number: if ((count > 2) && (_buffer[0] == 0xef) && (_buffer[1] == 0xbb) && (_buffer[2] == 0xbf))              {                  _encoding = TextEncoding.Utf8;                  offset = 3;              }              else if ((count > 3) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe) && (_buffer[2] == 0x0) &&                       (_buffer[3] == 0x0))              {                  _encoding = TextEncoding.Utf32Le;                  offset = 4;              }              else if ((count > 3) && (_buffer[0] == 0x0) && (_buffer[1] == 0x0) && (_buffer[2] == 0xfe) &&                       (_buffer[3] == 0xff))              {                  _encoding = TextEncoding.Utf32Be;                  offset = 4;              }              else if ((count > 1) && (_buffer[0] == 0xfe) && (_buffer[1] == 0xff))              {                  _encoding = TextEncoding.Utf16Be;                  offset = 2;              }              else if ((count > 1) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe))              {                  _encoding = TextEncoding.Utf16Le;                  offset = 2;              }              else if ((count > 3) && (_buffer[0] == 0x84) && (_buffer[1] == 0x31) && (_buffer[2] == 0x95) &&                       (_buffer[3] == 0x33))              {                  _encoding = TextEncoding.Gb18030;                  offset = 4;              }
Magic Number,ExCSS,TextSource,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TextSource.cs,DetectByteOrderMarkAsync,The following statement contains a magic number: if ((count > 2) && (_buffer[0] == 0xef) && (_buffer[1] == 0xbb) && (_buffer[2] == 0xbf))              {                  _encoding = TextEncoding.Utf8;                  offset = 3;              }              else if ((count > 3) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe) && (_buffer[2] == 0x0) &&                       (_buffer[3] == 0x0))              {                  _encoding = TextEncoding.Utf32Le;                  offset = 4;              }              else if ((count > 3) && (_buffer[0] == 0x0) && (_buffer[1] == 0x0) && (_buffer[2] == 0xfe) &&                       (_buffer[3] == 0xff))              {                  _encoding = TextEncoding.Utf32Be;                  offset = 4;              }              else if ((count > 1) && (_buffer[0] == 0xfe) && (_buffer[1] == 0xff))              {                  _encoding = TextEncoding.Utf16Be;                  offset = 2;              }              else if ((count > 1) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe))              {                  _encoding = TextEncoding.Utf16Le;                  offset = 2;              }              else if ((count > 3) && (_buffer[0] == 0x84) && (_buffer[1] == 0x31) && (_buffer[2] == 0x95) &&                       (_buffer[3] == 0x33))              {                  _encoding = TextEncoding.Gb18030;                  offset = 4;              }
Magic Number,ExCSS,TextSource,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TextSource.cs,DetectByteOrderMarkAsync,The following statement contains a magic number: if ((count > 2) && (_buffer[0] == 0xef) && (_buffer[1] == 0xbb) && (_buffer[2] == 0xbf))              {                  _encoding = TextEncoding.Utf8;                  offset = 3;              }              else if ((count > 3) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe) && (_buffer[2] == 0x0) &&                       (_buffer[3] == 0x0))              {                  _encoding = TextEncoding.Utf32Le;                  offset = 4;              }              else if ((count > 3) && (_buffer[0] == 0x0) && (_buffer[1] == 0x0) && (_buffer[2] == 0xfe) &&                       (_buffer[3] == 0xff))              {                  _encoding = TextEncoding.Utf32Be;                  offset = 4;              }              else if ((count > 1) && (_buffer[0] == 0xfe) && (_buffer[1] == 0xff))              {                  _encoding = TextEncoding.Utf16Be;                  offset = 2;              }              else if ((count > 1) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe))              {                  _encoding = TextEncoding.Utf16Le;                  offset = 2;              }              else if ((count > 3) && (_buffer[0] == 0x84) && (_buffer[1] == 0x31) && (_buffer[2] == 0x95) &&                       (_buffer[3] == 0x33))              {                  _encoding = TextEncoding.Gb18030;                  offset = 4;              }
Magic Number,ExCSS,TextSource,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TextSource.cs,DetectByteOrderMarkAsync,The following statement contains a magic number: if ((count > 2) && (_buffer[0] == 0xef) && (_buffer[1] == 0xbb) && (_buffer[2] == 0xbf))              {                  _encoding = TextEncoding.Utf8;                  offset = 3;              }              else if ((count > 3) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe) && (_buffer[2] == 0x0) &&                       (_buffer[3] == 0x0))              {                  _encoding = TextEncoding.Utf32Le;                  offset = 4;              }              else if ((count > 3) && (_buffer[0] == 0x0) && (_buffer[1] == 0x0) && (_buffer[2] == 0xfe) &&                       (_buffer[3] == 0xff))              {                  _encoding = TextEncoding.Utf32Be;                  offset = 4;              }              else if ((count > 1) && (_buffer[0] == 0xfe) && (_buffer[1] == 0xff))              {                  _encoding = TextEncoding.Utf16Be;                  offset = 2;              }              else if ((count > 1) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe))              {                  _encoding = TextEncoding.Utf16Le;                  offset = 2;              }              else if ((count > 3) && (_buffer[0] == 0x84) && (_buffer[1] == 0x31) && (_buffer[2] == 0x95) &&                       (_buffer[3] == 0x33))              {                  _encoding = TextEncoding.Gb18030;                  offset = 4;              }
Magic Number,ExCSS,TextSource,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TextSource.cs,DetectByteOrderMarkAsync,The following statement contains a magic number: if ((count > 2) && (_buffer[0] == 0xef) && (_buffer[1] == 0xbb) && (_buffer[2] == 0xbf))              {                  _encoding = TextEncoding.Utf8;                  offset = 3;              }              else if ((count > 3) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe) && (_buffer[2] == 0x0) &&                       (_buffer[3] == 0x0))              {                  _encoding = TextEncoding.Utf32Le;                  offset = 4;              }              else if ((count > 3) && (_buffer[0] == 0x0) && (_buffer[1] == 0x0) && (_buffer[2] == 0xfe) &&                       (_buffer[3] == 0xff))              {                  _encoding = TextEncoding.Utf32Be;                  offset = 4;              }              else if ((count > 1) && (_buffer[0] == 0xfe) && (_buffer[1] == 0xff))              {                  _encoding = TextEncoding.Utf16Be;                  offset = 2;              }              else if ((count > 1) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe))              {                  _encoding = TextEncoding.Utf16Le;                  offset = 2;              }              else if ((count > 3) && (_buffer[0] == 0x84) && (_buffer[1] == 0x31) && (_buffer[2] == 0x95) &&                       (_buffer[3] == 0x33))              {                  _encoding = TextEncoding.Gb18030;                  offset = 4;              }
Magic Number,ExCSS,TextSource,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TextSource.cs,DetectByteOrderMarkAsync,The following statement contains a magic number: if ((count > 2) && (_buffer[0] == 0xef) && (_buffer[1] == 0xbb) && (_buffer[2] == 0xbf))              {                  _encoding = TextEncoding.Utf8;                  offset = 3;              }              else if ((count > 3) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe) && (_buffer[2] == 0x0) &&                       (_buffer[3] == 0x0))              {                  _encoding = TextEncoding.Utf32Le;                  offset = 4;              }              else if ((count > 3) && (_buffer[0] == 0x0) && (_buffer[1] == 0x0) && (_buffer[2] == 0xfe) &&                       (_buffer[3] == 0xff))              {                  _encoding = TextEncoding.Utf32Be;                  offset = 4;              }              else if ((count > 1) && (_buffer[0] == 0xfe) && (_buffer[1] == 0xff))              {                  _encoding = TextEncoding.Utf16Be;                  offset = 2;              }              else if ((count > 1) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe))              {                  _encoding = TextEncoding.Utf16Le;                  offset = 2;              }              else if ((count > 3) && (_buffer[0] == 0x84) && (_buffer[1] == 0x31) && (_buffer[2] == 0x95) &&                       (_buffer[3] == 0x33))              {                  _encoding = TextEncoding.Gb18030;                  offset = 4;              }
Magic Number,ExCSS,TextSource,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TextSource.cs,DetectByteOrderMarkAsync,The following statement contains a magic number: if ((count > 2) && (_buffer[0] == 0xef) && (_buffer[1] == 0xbb) && (_buffer[2] == 0xbf))              {                  _encoding = TextEncoding.Utf8;                  offset = 3;              }              else if ((count > 3) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe) && (_buffer[2] == 0x0) &&                       (_buffer[3] == 0x0))              {                  _encoding = TextEncoding.Utf32Le;                  offset = 4;              }              else if ((count > 3) && (_buffer[0] == 0x0) && (_buffer[1] == 0x0) && (_buffer[2] == 0xfe) &&                       (_buffer[3] == 0xff))              {                  _encoding = TextEncoding.Utf32Be;                  offset = 4;              }              else if ((count > 1) && (_buffer[0] == 0xfe) && (_buffer[1] == 0xff))              {                  _encoding = TextEncoding.Utf16Be;                  offset = 2;              }              else if ((count > 1) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe))              {                  _encoding = TextEncoding.Utf16Le;                  offset = 2;              }              else if ((count > 3) && (_buffer[0] == 0x84) && (_buffer[1] == 0x31) && (_buffer[2] == 0x95) &&                       (_buffer[3] == 0x33))              {                  _encoding = TextEncoding.Gb18030;                  offset = 4;              }
Magic Number,ExCSS,TextSource,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TextSource.cs,DetectByteOrderMarkAsync,The following statement contains a magic number: if ((count > 2) && (_buffer[0] == 0xef) && (_buffer[1] == 0xbb) && (_buffer[2] == 0xbf))              {                  _encoding = TextEncoding.Utf8;                  offset = 3;              }              else if ((count > 3) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe) && (_buffer[2] == 0x0) &&                       (_buffer[3] == 0x0))              {                  _encoding = TextEncoding.Utf32Le;                  offset = 4;              }              else if ((count > 3) && (_buffer[0] == 0x0) && (_buffer[1] == 0x0) && (_buffer[2] == 0xfe) &&                       (_buffer[3] == 0xff))              {                  _encoding = TextEncoding.Utf32Be;                  offset = 4;              }              else if ((count > 1) && (_buffer[0] == 0xfe) && (_buffer[1] == 0xff))              {                  _encoding = TextEncoding.Utf16Be;                  offset = 2;              }              else if ((count > 1) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe))              {                  _encoding = TextEncoding.Utf16Le;                  offset = 2;              }              else if ((count > 3) && (_buffer[0] == 0x84) && (_buffer[1] == 0x31) && (_buffer[2] == 0x95) &&                       (_buffer[3] == 0x33))              {                  _encoding = TextEncoding.Gb18030;                  offset = 4;              }
Magic Number,ExCSS,TextSource,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TextSource.cs,DetectByteOrderMarkAsync,The following statement contains a magic number: if ((count > 2) && (_buffer[0] == 0xef) && (_buffer[1] == 0xbb) && (_buffer[2] == 0xbf))              {                  _encoding = TextEncoding.Utf8;                  offset = 3;              }              else if ((count > 3) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe) && (_buffer[2] == 0x0) &&                       (_buffer[3] == 0x0))              {                  _encoding = TextEncoding.Utf32Le;                  offset = 4;              }              else if ((count > 3) && (_buffer[0] == 0x0) && (_buffer[1] == 0x0) && (_buffer[2] == 0xfe) &&                       (_buffer[3] == 0xff))              {                  _encoding = TextEncoding.Utf32Be;                  offset = 4;              }              else if ((count > 1) && (_buffer[0] == 0xfe) && (_buffer[1] == 0xff))              {                  _encoding = TextEncoding.Utf16Be;                  offset = 2;              }              else if ((count > 1) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe))              {                  _encoding = TextEncoding.Utf16Le;                  offset = 2;              }              else if ((count > 3) && (_buffer[0] == 0x84) && (_buffer[1] == 0x31) && (_buffer[2] == 0x95) &&                       (_buffer[3] == 0x33))              {                  _encoding = TextEncoding.Gb18030;                  offset = 4;              }
Magic Number,ExCSS,TextSource,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TextSource.cs,DetectByteOrderMarkAsync,The following statement contains a magic number: if ((count > 2) && (_buffer[0] == 0xef) && (_buffer[1] == 0xbb) && (_buffer[2] == 0xbf))              {                  _encoding = TextEncoding.Utf8;                  offset = 3;              }              else if ((count > 3) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe) && (_buffer[2] == 0x0) &&                       (_buffer[3] == 0x0))              {                  _encoding = TextEncoding.Utf32Le;                  offset = 4;              }              else if ((count > 3) && (_buffer[0] == 0x0) && (_buffer[1] == 0x0) && (_buffer[2] == 0xfe) &&                       (_buffer[3] == 0xff))              {                  _encoding = TextEncoding.Utf32Be;                  offset = 4;              }              else if ((count > 1) && (_buffer[0] == 0xfe) && (_buffer[1] == 0xff))              {                  _encoding = TextEncoding.Utf16Be;                  offset = 2;              }              else if ((count > 1) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe))              {                  _encoding = TextEncoding.Utf16Le;                  offset = 2;              }              else if ((count > 3) && (_buffer[0] == 0x84) && (_buffer[1] == 0x31) && (_buffer[2] == 0x95) &&                       (_buffer[3] == 0x33))              {                  _encoding = TextEncoding.Gb18030;                  offset = 4;              }
Magic Number,ExCSS,TransformMatrix,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,Equals,The following statement contains a magic number: for (var i = 0; i < 4; i++)              {                  for (var j = 0; j < 4; j++)                  {                      if (A[i' j] != B[i' j])                      {                          return false;                      }                  }              }
Magic Number,ExCSS,TransformMatrix,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,Equals,The following statement contains a magic number: for (var i = 0; i < 4; i++)              {                  for (var j = 0; j < 4; j++)                  {                      if (A[i' j] != B[i' j])                      {                          return false;                      }                  }              }
Magic Number,ExCSS,TransformMatrix,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix = new float[4' 4];
Magic Number,ExCSS,TransformMatrix,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix = new float[4' 4];
Magic Number,ExCSS,TransformMatrix,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: if (values.Length != 16)              {                  throw new ArgumentException("You need to provide 16 (4x4) values."' nameof(values));              }
Magic Number,ExCSS,TransformMatrix,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: for (int i = 0' k = 0; i < 4; i++)              {                  for (var j = 0; j < 4; j++' k++)                  {                      _matrix[j' i] = values[k];                  }              }
Magic Number,ExCSS,TransformMatrix,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: for (int i = 0' k = 0; i < 4; i++)              {                  for (var j = 0; j < 4; j++' k++)                  {                      _matrix[j' i] = values[k];                  }              }
Magic Number,ExCSS,TransformMatrix,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[0' 2] = m13;
Magic Number,ExCSS,TransformMatrix,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[1' 2] = m23;
Magic Number,ExCSS,TransformMatrix,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[2' 0] = m31;
Magic Number,ExCSS,TransformMatrix,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[2' 1] = m32;
Magic Number,ExCSS,TransformMatrix,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[2' 2] = m33;
Magic Number,ExCSS,TransformMatrix,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[2' 2] = m33;
Magic Number,ExCSS,TransformMatrix,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[0' 3] = tx;
Magic Number,ExCSS,TransformMatrix,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[1' 3] = ty;
Magic Number,ExCSS,TransformMatrix,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[2' 3] = tz;
Magic Number,ExCSS,TransformMatrix,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[2' 3] = tz;
Magic Number,ExCSS,TransformMatrix,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[3' 0] = px;
Magic Number,ExCSS,TransformMatrix,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[3' 1] = py;
Magic Number,ExCSS,TransformMatrix,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[3' 2] = pz;
Magic Number,ExCSS,TransformMatrix,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[3' 2] = pz;
Magic Number,ExCSS,TransformMatrix,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[3' 3] = 1f;
Magic Number,ExCSS,TransformMatrix,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[3' 3] = 1f;
Magic Number,ExCSS,TransformMatrix,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,GetHashCode,The following statement contains a magic number: for (var i = 0; i < 4; i++)              {                  for (var j = 0; j < 4; j++)                  {                      sum += _matrix[i' j] * (4 * i + j);                  }              }
Magic Number,ExCSS,TransformMatrix,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,GetHashCode,The following statement contains a magic number: for (var i = 0; i < 4; i++)              {                  for (var j = 0; j < 4; j++)                  {                      sum += _matrix[i' j] * (4 * i + j);                  }              }
Magic Number,ExCSS,TransformMatrix,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,GetHashCode,The following statement contains a magic number: for (var i = 0; i < 4; i++)              {                  for (var j = 0; j < 4; j++)                  {                      sum += _matrix[i' j] * (4 * i + j);                  }              }
Magic Number,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseScheme,The following statement contains a magic number: while (index < input.Length)              {                  var c = input[index];                    if (c.IsAlphanumericAscii() || (c == Symbols.Plus) || (c == Symbols.Minus) || (c == Symbols.Dot))                  {                      index++;                  }                  else if (c == Symbols.Colon)                  {                      var originalScheme = _scheme;                      _scheme = input.Substring(0' index).ToLowerInvariant();                        if (!onlyScheme)                      {                          _relative = ProtocolNames.IsRelative(_scheme);                            if (_scheme.Is(ProtocolNames.File))                          {                              _host = string.Empty;                              _port = string.Empty;                              return RelativeState(input' index + 1);                          }                          if (!_relative)                          {                              _host = string.Empty;                              _port = string.Empty;                              _path = string.Empty;                              return ParseSchemeData(input' index + 1);                          }                          if (_scheme.Is(originalScheme))                          {                              c = input[++index];                                if ((c == Symbols.Solidus) && (index + 2 < input.Length) &&                                  (input[index + 1] == Symbols.Solidus))                              {                                  return IgnoreSlashesState(input' index + 2);                              }                                return RelativeState(input' index);                          }                            if ((index < input.Length - 1) && (input[++index] == Symbols.Solidus) &&                              (++index < input.Length) && (input[index] == Symbols.Solidus))                          {                              index++;                          }                            return IgnoreSlashesState(input' index);                      }                        return true;                  }                  else                  {                      break;                  }              }
Magic Number,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseScheme,The following statement contains a magic number: while (index < input.Length)              {                  var c = input[index];                    if (c.IsAlphanumericAscii() || (c == Symbols.Plus) || (c == Symbols.Minus) || (c == Symbols.Dot))                  {                      index++;                  }                  else if (c == Symbols.Colon)                  {                      var originalScheme = _scheme;                      _scheme = input.Substring(0' index).ToLowerInvariant();                        if (!onlyScheme)                      {                          _relative = ProtocolNames.IsRelative(_scheme);                            if (_scheme.Is(ProtocolNames.File))                          {                              _host = string.Empty;                              _port = string.Empty;                              return RelativeState(input' index + 1);                          }                          if (!_relative)                          {                              _host = string.Empty;                              _port = string.Empty;                              _path = string.Empty;                              return ParseSchemeData(input' index + 1);                          }                          if (_scheme.Is(originalScheme))                          {                              c = input[++index];                                if ((c == Symbols.Solidus) && (index + 2 < input.Length) &&                                  (input[index + 1] == Symbols.Solidus))                              {                                  return IgnoreSlashesState(input' index + 2);                              }                                return RelativeState(input' index);                          }                            if ((index < input.Length - 1) && (input[++index] == Symbols.Solidus) &&                              (++index < input.Length) && (input[index] == Symbols.Solidus))                          {                              index++;                          }                            return IgnoreSlashesState(input' index);                      }                        return true;                  }                  else                  {                      break;                  }              }
Magic Number,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseSchemeData,The following statement contains a magic number: while (index < input.Length)              {                  var c = input[index];                    if (c == Symbols.QuestionMark)                  {                      Data = buffer.ToPool();                      return ParseQuery(input' index + 1);                  }                    if (c == Symbols.Num)                  {                      Data = buffer.ToPool();                      return ParseFragment(input' index + 1);                  }                    if ((c == Symbols.Percent) && (index + 2 < input.Length) && input[index + 1].IsHex() &&                      input[index + 2].IsHex())                  {                      buffer.Append(input[index++]);                      buffer.Append(input[index++]);                      buffer.Append(input[index]);                  }                  else if (c.IsInRange(0x20' 0x7e))                  {                      buffer.Append(c);                  }                  else if ((c != Symbols.Tab) && (c != Symbols.LineFeed) && (c != Symbols.CarriageReturn))                  {                      index += Utf8PercentEncode(buffer' input' index);                  }                    index++;              }
Magic Number,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseSchemeData,The following statement contains a magic number: while (index < input.Length)              {                  var c = input[index];                    if (c == Symbols.QuestionMark)                  {                      Data = buffer.ToPool();                      return ParseQuery(input' index + 1);                  }                    if (c == Symbols.Num)                  {                      Data = buffer.ToPool();                      return ParseFragment(input' index + 1);                  }                    if ((c == Symbols.Percent) && (index + 2 < input.Length) && input[index + 1].IsHex() &&                      input[index + 2].IsHex())                  {                      buffer.Append(input[index++]);                      buffer.Append(input[index++]);                      buffer.Append(input[index]);                  }                  else if (c.IsInRange(0x20' 0x7e))                  {                      buffer.Append(c);                  }                  else if ((c != Symbols.Tab) && (c != Symbols.LineFeed) && (c != Symbols.CarriageReturn))                  {                      index += Utf8PercentEncode(buffer' input' index);                  }                    index++;              }
Magic Number,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,RelativeState,The following statement contains a magic number: if (index != input.Length)              {                  switch (input[index])                  {                      case Symbols.QuestionMark:                          return ParseQuery(input' index + 1);                        case Symbols.Num:                          return ParseFragment(input' index + 1);                        case Symbols.Solidus:                      case Symbols.ReverseSolidus:                          if (index == input.Length - 1)                          {                              return ParsePath(input' index);                          }                            var c = input[++index];                            if (c.IsOneOf(Symbols.Solidus' Symbols.ReverseSolidus))                          {                              return _scheme.Is(ProtocolNames.File)                                   ? ParseFileHost(input' index + 1)                                   : IgnoreSlashesState(input' index + 1);                          }                            if (!_scheme.Is(ProtocolNames.File))                          {                              return ParsePath(input' index - 1);                          }                            _host = string.Empty;                          _port = string.Empty;                            return ParsePath(input' index - 1);                  }                    if (input[index].IsLetter() &&                       _scheme.Is(ProtocolNames.File) &&                       (index + 1 < input.Length) &&                       input[index + 1].IsOneOf(Symbols.Colon' Symbols.Solidus) &&                      ((index + 2 == input.Length) || input[index + 2].IsOneOf(Symbols.Solidus' Symbols.ReverseSolidus' Symbols.Num' Symbols.QuestionMark)))                  {                      _host = string.Empty;                      _path = string.Empty;                      _port = string.Empty;                  }                    return ParsePath(input' index);              }
Magic Number,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,RelativeState,The following statement contains a magic number: if (index != input.Length)              {                  switch (input[index])                  {                      case Symbols.QuestionMark:                          return ParseQuery(input' index + 1);                        case Symbols.Num:                          return ParseFragment(input' index + 1);                        case Symbols.Solidus:                      case Symbols.ReverseSolidus:                          if (index == input.Length - 1)                          {                              return ParsePath(input' index);                          }                            var c = input[++index];                            if (c.IsOneOf(Symbols.Solidus' Symbols.ReverseSolidus))                          {                              return _scheme.Is(ProtocolNames.File)                                   ? ParseFileHost(input' index + 1)                                   : IgnoreSlashesState(input' index + 1);                          }                            if (!_scheme.Is(ProtocolNames.File))                          {                              return ParsePath(input' index - 1);                          }                            _host = string.Empty;                          _port = string.Empty;                            return ParsePath(input' index - 1);                  }                    if (input[index].IsLetter() &&                       _scheme.Is(ProtocolNames.File) &&                       (index + 1 < input.Length) &&                       input[index + 1].IsOneOf(Symbols.Colon' Symbols.Solidus) &&                      ((index + 2 == input.Length) || input[index + 2].IsOneOf(Symbols.Solidus' Symbols.ReverseSolidus' Symbols.Num' Symbols.QuestionMark)))                  {                      _host = string.Empty;                      _path = string.Empty;                      _port = string.Empty;                  }                    return ParsePath(input' index);              }
Magic Number,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseAuthority,The following statement contains a magic number: while (index < input.Length)              {                  var c = input[index];                    if (c == Symbols.At)                  {                      if (user == null)                      {                          user = buffer.ToString();                      }                      else                      {                          pass = buffer.ToString();                      }                        UserName = user;                      Password = pass;                      buffer.Append("%40");                      start = index + 1;                  }                  else if ((c == Symbols.Colon) && (user == null))                  {                      user = buffer.ToString();                      pass = string.Empty;                      buffer.Clear();                  }                  else if ((c == Symbols.Percent) && (index + 2 < input.Length) && input[index + 1].IsHex() &&                           input[index + 2].IsHex())                  {                      buffer.Append(input[index++]).Append(input[index++]).Append(input[index]);                  }                  else if (c.IsOneOf(Symbols.Tab' Symbols.LineFeed' Symbols.CarriageReturn))                  {                      // Parse Error                  }                  else if (c.IsOneOf(Symbols.Solidus' Symbols.ReverseSolidus' Symbols.Num' Symbols.QuestionMark))                  {                      break;                  }                  else if ((c != Symbols.Colon) &&                           ((c == Symbols.Num) || (c == Symbols.QuestionMark) || c.IsNormalPathCharacter()))                  {                      buffer.Append(c);                  }                  else                  {                      index += Utf8PercentEncode(buffer' input' index);                  }                    index++;              }
Magic Number,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseAuthority,The following statement contains a magic number: while (index < input.Length)              {                  var c = input[index];                    if (c == Symbols.At)                  {                      if (user == null)                      {                          user = buffer.ToString();                      }                      else                      {                          pass = buffer.ToString();                      }                        UserName = user;                      Password = pass;                      buffer.Append("%40");                      start = index + 1;                  }                  else if ((c == Symbols.Colon) && (user == null))                  {                      user = buffer.ToString();                      pass = string.Empty;                      buffer.Clear();                  }                  else if ((c == Symbols.Percent) && (index + 2 < input.Length) && input[index + 1].IsHex() &&                           input[index + 2].IsHex())                  {                      buffer.Append(input[index++]).Append(input[index++]).Append(input[index]);                  }                  else if (c.IsOneOf(Symbols.Tab' Symbols.LineFeed' Symbols.CarriageReturn))                  {                      // Parse Error                  }                  else if (c.IsOneOf(Symbols.Solidus' Symbols.ReverseSolidus' Symbols.Num' Symbols.QuestionMark))                  {                      break;                  }                  else if ((c != Symbols.Colon) &&                           ((c == Symbols.Num) || (c == Symbols.QuestionMark) || c.IsNormalPathCharacter()))                  {                      buffer.Append(c);                  }                  else                  {                      index += Utf8PercentEncode(buffer' input' index);                  }                    index++;              }
Magic Number,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseFileHost,The following statement contains a magic number: if ((length == 2) &&                   input[index - 2].IsLetter() &&                  ((input[index - 1] == Symbols.Pipe) || (input[index - 1] == Symbols.Colon)))              {                  return ParsePath(input' index - 2);              }
Magic Number,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseFileHost,The following statement contains a magic number: if ((length == 2) &&                   input[index - 2].IsLetter() &&                  ((input[index - 1] == Symbols.Pipe) || (input[index - 1] == Symbols.Colon)))              {                  return ParsePath(input' index - 2);              }
Magic Number,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseFileHost,The following statement contains a magic number: if ((length == 2) &&                   input[index - 2].IsLetter() &&                  ((input[index - 1] == Symbols.Pipe) || (input[index - 1] == Symbols.Colon)))              {                  return ParsePath(input' index - 2);              }
Magic Number,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParsePath,The following statement contains a magic number: while (index <= input.Length)              {                  var c = index == input.Length ? Symbols.EndOfFile : input[index];                  var breakNow = !onlyPath && ((c == Symbols.Num) || (c == Symbols.QuestionMark));                    if ((c == Symbols.EndOfFile) || (c == Symbols.Solidus) || (c == Symbols.ReverseSolidus) || breakNow)                  {                      var path = buffer.ToString();                      var close = false;                      buffer.Clear();                        if (path.Isi(currentDirectoryAlternative))                      {                          path = currentDirectory;                      }                      else if (path.Isi(upperDirectoryAlternatives[0]) ||                               path.Isi(upperDirectoryAlternatives[1]) ||                               path.Isi(upperDirectoryAlternatives[2]))                      {                          path = upperDirectory;                      }                        if (path.Is(upperDirectory))                      {                          if (paths.Count > 0)                          {                              paths.RemoveAt(paths.Count - 1);                          }                            close = true;                      }                      else if (!path.Is(currentDirectory))                      {                          if (_scheme.Is(ProtocolNames.File) &&                              (paths.Count == originalCount) &&                              (path.Length == 2) &&                              path[0].IsLetter() &&                              (path[1] == Symbols.Pipe))                          {                              path = path.Replace(Symbols.Pipe' Symbols.Colon);                              paths.Clear();                          }                            paths.Add(path);                      }                      else                      {                          close = true;                      }                        if (close && (c != Symbols.Solidus) && (c != Symbols.ReverseSolidus))                      {                          paths.Add(string.Empty);                      }                        if (breakNow)                      {                          break;                      }                  }                  else if ((c == Symbols.Percent) &&                           (index + 2 < input.Length) &&                           input[index + 1].IsHex() &&                           input[index + 2].IsHex())                  {                      buffer.Append(input[index++]);                      buffer.Append(input[index++]);                      buffer.Append(input[index]);                  }                  else if ((c == Symbols.Tab) || (c == Symbols.LineFeed) || (c == Symbols.CarriageReturn))                  {                      // Parse Error                  }                  else if (c.IsNormalPathCharacter())                  {                      buffer.Append(c);                  }                  else                  {                      index += Utf8PercentEncode(buffer' input' index);                  }                    index++;              }
Magic Number,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParsePath,The following statement contains a magic number: while (index <= input.Length)              {                  var c = index == input.Length ? Symbols.EndOfFile : input[index];                  var breakNow = !onlyPath && ((c == Symbols.Num) || (c == Symbols.QuestionMark));                    if ((c == Symbols.EndOfFile) || (c == Symbols.Solidus) || (c == Symbols.ReverseSolidus) || breakNow)                  {                      var path = buffer.ToString();                      var close = false;                      buffer.Clear();                        if (path.Isi(currentDirectoryAlternative))                      {                          path = currentDirectory;                      }                      else if (path.Isi(upperDirectoryAlternatives[0]) ||                               path.Isi(upperDirectoryAlternatives[1]) ||                               path.Isi(upperDirectoryAlternatives[2]))                      {                          path = upperDirectory;                      }                        if (path.Is(upperDirectory))                      {                          if (paths.Count > 0)                          {                              paths.RemoveAt(paths.Count - 1);                          }                            close = true;                      }                      else if (!path.Is(currentDirectory))                      {                          if (_scheme.Is(ProtocolNames.File) &&                              (paths.Count == originalCount) &&                              (path.Length == 2) &&                              path[0].IsLetter() &&                              (path[1] == Symbols.Pipe))                          {                              path = path.Replace(Symbols.Pipe' Symbols.Colon);                              paths.Clear();                          }                            paths.Add(path);                      }                      else                      {                          close = true;                      }                        if (close && (c != Symbols.Solidus) && (c != Symbols.ReverseSolidus))                      {                          paths.Add(string.Empty);                      }                        if (breakNow)                      {                          break;                      }                  }                  else if ((c == Symbols.Percent) &&                           (index + 2 < input.Length) &&                           input[index + 1].IsHex() &&                           input[index + 2].IsHex())                  {                      buffer.Append(input[index++]);                      buffer.Append(input[index++]);                      buffer.Append(input[index]);                  }                  else if ((c == Symbols.Tab) || (c == Symbols.LineFeed) || (c == Symbols.CarriageReturn))                  {                      // Parse Error                  }                  else if (c.IsNormalPathCharacter())                  {                      buffer.Append(c);                  }                  else                  {                      index += Utf8PercentEncode(buffer' input' index);                  }                    index++;              }
Magic Number,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParsePath,The following statement contains a magic number: while (index <= input.Length)              {                  var c = index == input.Length ? Symbols.EndOfFile : input[index];                  var breakNow = !onlyPath && ((c == Symbols.Num) || (c == Symbols.QuestionMark));                    if ((c == Symbols.EndOfFile) || (c == Symbols.Solidus) || (c == Symbols.ReverseSolidus) || breakNow)                  {                      var path = buffer.ToString();                      var close = false;                      buffer.Clear();                        if (path.Isi(currentDirectoryAlternative))                      {                          path = currentDirectory;                      }                      else if (path.Isi(upperDirectoryAlternatives[0]) ||                               path.Isi(upperDirectoryAlternatives[1]) ||                               path.Isi(upperDirectoryAlternatives[2]))                      {                          path = upperDirectory;                      }                        if (path.Is(upperDirectory))                      {                          if (paths.Count > 0)                          {                              paths.RemoveAt(paths.Count - 1);                          }                            close = true;                      }                      else if (!path.Is(currentDirectory))                      {                          if (_scheme.Is(ProtocolNames.File) &&                              (paths.Count == originalCount) &&                              (path.Length == 2) &&                              path[0].IsLetter() &&                              (path[1] == Symbols.Pipe))                          {                              path = path.Replace(Symbols.Pipe' Symbols.Colon);                              paths.Clear();                          }                            paths.Add(path);                      }                      else                      {                          close = true;                      }                        if (close && (c != Symbols.Solidus) && (c != Symbols.ReverseSolidus))                      {                          paths.Add(string.Empty);                      }                        if (breakNow)                      {                          break;                      }                  }                  else if ((c == Symbols.Percent) &&                           (index + 2 < input.Length) &&                           input[index + 1].IsHex() &&                           input[index + 2].IsHex())                  {                      buffer.Append(input[index++]);                      buffer.Append(input[index++]);                      buffer.Append(input[index]);                  }                  else if ((c == Symbols.Tab) || (c == Symbols.LineFeed) || (c == Symbols.CarriageReturn))                  {                      // Parse Error                  }                  else if (c.IsNormalPathCharacter())                  {                      buffer.Append(c);                  }                  else                  {                      index += Utf8PercentEncode(buffer' input' index);                  }                    index++;              }
Magic Number,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParsePath,The following statement contains a magic number: while (index <= input.Length)              {                  var c = index == input.Length ? Symbols.EndOfFile : input[index];                  var breakNow = !onlyPath && ((c == Symbols.Num) || (c == Symbols.QuestionMark));                    if ((c == Symbols.EndOfFile) || (c == Symbols.Solidus) || (c == Symbols.ReverseSolidus) || breakNow)                  {                      var path = buffer.ToString();                      var close = false;                      buffer.Clear();                        if (path.Isi(currentDirectoryAlternative))                      {                          path = currentDirectory;                      }                      else if (path.Isi(upperDirectoryAlternatives[0]) ||                               path.Isi(upperDirectoryAlternatives[1]) ||                               path.Isi(upperDirectoryAlternatives[2]))                      {                          path = upperDirectory;                      }                        if (path.Is(upperDirectory))                      {                          if (paths.Count > 0)                          {                              paths.RemoveAt(paths.Count - 1);                          }                            close = true;                      }                      else if (!path.Is(currentDirectory))                      {                          if (_scheme.Is(ProtocolNames.File) &&                              (paths.Count == originalCount) &&                              (path.Length == 2) &&                              path[0].IsLetter() &&                              (path[1] == Symbols.Pipe))                          {                              path = path.Replace(Symbols.Pipe' Symbols.Colon);                              paths.Clear();                          }                            paths.Add(path);                      }                      else                      {                          close = true;                      }                        if (close && (c != Symbols.Solidus) && (c != Symbols.ReverseSolidus))                      {                          paths.Add(string.Empty);                      }                        if (breakNow)                      {                          break;                      }                  }                  else if ((c == Symbols.Percent) &&                           (index + 2 < input.Length) &&                           input[index + 1].IsHex() &&                           input[index + 2].IsHex())                  {                      buffer.Append(input[index++]);                      buffer.Append(input[index++]);                      buffer.Append(input[index]);                  }                  else if ((c == Symbols.Tab) || (c == Symbols.LineFeed) || (c == Symbols.CarriageReturn))                  {                      // Parse Error                  }                  else if (c.IsNormalPathCharacter())                  {                      buffer.Append(c);                  }                  else                  {                      index += Utf8PercentEncode(buffer' input' index);                  }                    index++;              }
Magic Number,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,Utf8PercentEncode,The following statement contains a magic number: var length = char.IsSurrogatePair(source' index) ? 2 : 1;
Magic Number,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,SanatizeHost,The following statement contains a magic number: var chars = new byte[4*length];
Magic Number,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,SanatizeHost,The following statement contains a magic number: for (var i = start; i < n; i++)                  switch (hostName[i])                  {                      // U+0000' U+0009' U+000A' U+000D' U+0020' "#"' "%"' "/"' ":"' "?"' "@"' "["' "\"' and "]"                      case Symbols.Null:                      case Symbols.Tab:                      case Symbols.Space:                      case Symbols.LineFeed:                      case Symbols.CarriageReturn:                      case Symbols.Num:                      case Symbols.Solidus:                      case Symbols.Colon:                      case Symbols.QuestionMark:                      case Symbols.At:                      case Symbols.SquareBracketOpen:                      case Symbols.SquareBracketClose:                      case Symbols.ReverseSolidus:                          break;                      case Symbols.Dot:                          chars[count++] = (byte) hostName[i];                          break;                      case Symbols.Percent:                          if ((i + 2 < n) && hostName[i + 1].IsHex() && hostName[i + 2].IsHex())                          {                              var weight = hostName[i + 1].FromHex()*16 + hostName[i + 2].FromHex();                              chars[count++] = (byte) weight;                              i += 2;                          }                          else                          {                              chars[count++] = (byte) Symbols.Percent;                          }                            break;                      default:                          char chr;                            if (Symbols.Punycode.TryGetValue(hostName[i]' out chr))                          {                              chars[count++] = (byte) chr;                          }                          else if (hostName[i].IsAlphanumericAscii() == false)                          {                              var l = (i + 1 < n) && char.IsSurrogatePair(hostName' i) ? 2 : 1;                                if ((l == 1) && (hostName[i] != Symbols.Minus) && !char.IsLetterOrDigit(hostName[i]))                              {                                  break;                              }                                var bytes = TextEncoding.Utf8.GetBytes(hostName.Substring(i' l));                                foreach (var byteVal in bytes)                              {                                  chars[count++] = byteVal;                              }                                i += l - 1;                          }                          else                          {                              chars[count++] = (byte) char.ToLowerInvariant(hostName[i]);                          }                            break;                  }
Magic Number,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,SanatizeHost,The following statement contains a magic number: for (var i = start; i < n; i++)                  switch (hostName[i])                  {                      // U+0000' U+0009' U+000A' U+000D' U+0020' "#"' "%"' "/"' ":"' "?"' "@"' "["' "\"' and "]"                      case Symbols.Null:                      case Symbols.Tab:                      case Symbols.Space:                      case Symbols.LineFeed:                      case Symbols.CarriageReturn:                      case Symbols.Num:                      case Symbols.Solidus:                      case Symbols.Colon:                      case Symbols.QuestionMark:                      case Symbols.At:                      case Symbols.SquareBracketOpen:                      case Symbols.SquareBracketClose:                      case Symbols.ReverseSolidus:                          break;                      case Symbols.Dot:                          chars[count++] = (byte) hostName[i];                          break;                      case Symbols.Percent:                          if ((i + 2 < n) && hostName[i + 1].IsHex() && hostName[i + 2].IsHex())                          {                              var weight = hostName[i + 1].FromHex()*16 + hostName[i + 2].FromHex();                              chars[count++] = (byte) weight;                              i += 2;                          }                          else                          {                              chars[count++] = (byte) Symbols.Percent;                          }                            break;                      default:                          char chr;                            if (Symbols.Punycode.TryGetValue(hostName[i]' out chr))                          {                              chars[count++] = (byte) chr;                          }                          else if (hostName[i].IsAlphanumericAscii() == false)                          {                              var l = (i + 1 < n) && char.IsSurrogatePair(hostName' i) ? 2 : 1;                                if ((l == 1) && (hostName[i] != Symbols.Minus) && !char.IsLetterOrDigit(hostName[i]))                              {                                  break;                              }                                var bytes = TextEncoding.Utf8.GetBytes(hostName.Substring(i' l));                                foreach (var byteVal in bytes)                              {                                  chars[count++] = byteVal;                              }                                i += l - 1;                          }                          else                          {                              chars[count++] = (byte) char.ToLowerInvariant(hostName[i]);                          }                            break;                  }
Magic Number,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,SanatizeHost,The following statement contains a magic number: for (var i = start; i < n; i++)                  switch (hostName[i])                  {                      // U+0000' U+0009' U+000A' U+000D' U+0020' "#"' "%"' "/"' ":"' "?"' "@"' "["' "\"' and "]"                      case Symbols.Null:                      case Symbols.Tab:                      case Symbols.Space:                      case Symbols.LineFeed:                      case Symbols.CarriageReturn:                      case Symbols.Num:                      case Symbols.Solidus:                      case Symbols.Colon:                      case Symbols.QuestionMark:                      case Symbols.At:                      case Symbols.SquareBracketOpen:                      case Symbols.SquareBracketClose:                      case Symbols.ReverseSolidus:                          break;                      case Symbols.Dot:                          chars[count++] = (byte) hostName[i];                          break;                      case Symbols.Percent:                          if ((i + 2 < n) && hostName[i + 1].IsHex() && hostName[i + 2].IsHex())                          {                              var weight = hostName[i + 1].FromHex()*16 + hostName[i + 2].FromHex();                              chars[count++] = (byte) weight;                              i += 2;                          }                          else                          {                              chars[count++] = (byte) Symbols.Percent;                          }                            break;                      default:                          char chr;                            if (Symbols.Punycode.TryGetValue(hostName[i]' out chr))                          {                              chars[count++] = (byte) chr;                          }                          else if (hostName[i].IsAlphanumericAscii() == false)                          {                              var l = (i + 1 < n) && char.IsSurrogatePair(hostName' i) ? 2 : 1;                                if ((l == 1) && (hostName[i] != Symbols.Minus) && !char.IsLetterOrDigit(hostName[i]))                              {                                  break;                              }                                var bytes = TextEncoding.Utf8.GetBytes(hostName.Substring(i' l));                                foreach (var byteVal in bytes)                              {                                  chars[count++] = byteVal;                              }                                i += l - 1;                          }                          else                          {                              chars[count++] = (byte) char.ToLowerInvariant(hostName[i]);                          }                            break;                  }
Magic Number,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,SanatizeHost,The following statement contains a magic number: for (var i = start; i < n; i++)                  switch (hostName[i])                  {                      // U+0000' U+0009' U+000A' U+000D' U+0020' "#"' "%"' "/"' ":"' "?"' "@"' "["' "\"' and "]"                      case Symbols.Null:                      case Symbols.Tab:                      case Symbols.Space:                      case Symbols.LineFeed:                      case Symbols.CarriageReturn:                      case Symbols.Num:                      case Symbols.Solidus:                      case Symbols.Colon:                      case Symbols.QuestionMark:                      case Symbols.At:                      case Symbols.SquareBracketOpen:                      case Symbols.SquareBracketClose:                      case Symbols.ReverseSolidus:                          break;                      case Symbols.Dot:                          chars[count++] = (byte) hostName[i];                          break;                      case Symbols.Percent:                          if ((i + 2 < n) && hostName[i + 1].IsHex() && hostName[i + 2].IsHex())                          {                              var weight = hostName[i + 1].FromHex()*16 + hostName[i + 2].FromHex();                              chars[count++] = (byte) weight;                              i += 2;                          }                          else                          {                              chars[count++] = (byte) Symbols.Percent;                          }                            break;                      default:                          char chr;                            if (Symbols.Punycode.TryGetValue(hostName[i]' out chr))                          {                              chars[count++] = (byte) chr;                          }                          else if (hostName[i].IsAlphanumericAscii() == false)                          {                              var l = (i + 1 < n) && char.IsSurrogatePair(hostName' i) ? 2 : 1;                                if ((l == 1) && (hostName[i] != Symbols.Minus) && !char.IsLetterOrDigit(hostName[i]))                              {                                  break;                              }                                var bytes = TextEncoding.Utf8.GetBytes(hostName.Substring(i' l));                                foreach (var byteVal in bytes)                              {                                  chars[count++] = byteVal;                              }                                i += l - 1;                          }                          else                          {                              chars[count++] = (byte) char.ToLowerInvariant(hostName[i]);                          }                            break;                  }
Magic Number,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,SanatizeHost,The following statement contains a magic number: for (var i = start; i < n; i++)                  switch (hostName[i])                  {                      // U+0000' U+0009' U+000A' U+000D' U+0020' "#"' "%"' "/"' ":"' "?"' "@"' "["' "\"' and "]"                      case Symbols.Null:                      case Symbols.Tab:                      case Symbols.Space:                      case Symbols.LineFeed:                      case Symbols.CarriageReturn:                      case Symbols.Num:                      case Symbols.Solidus:                      case Symbols.Colon:                      case Symbols.QuestionMark:                      case Symbols.At:                      case Symbols.SquareBracketOpen:                      case Symbols.SquareBracketClose:                      case Symbols.ReverseSolidus:                          break;                      case Symbols.Dot:                          chars[count++] = (byte) hostName[i];                          break;                      case Symbols.Percent:                          if ((i + 2 < n) && hostName[i + 1].IsHex() && hostName[i + 2].IsHex())                          {                              var weight = hostName[i + 1].FromHex()*16 + hostName[i + 2].FromHex();                              chars[count++] = (byte) weight;                              i += 2;                          }                          else                          {                              chars[count++] = (byte) Symbols.Percent;                          }                            break;                      default:                          char chr;                            if (Symbols.Punycode.TryGetValue(hostName[i]' out chr))                          {                              chars[count++] = (byte) chr;                          }                          else if (hostName[i].IsAlphanumericAscii() == false)                          {                              var l = (i + 1 < n) && char.IsSurrogatePair(hostName' i) ? 2 : 1;                                if ((l == 1) && (hostName[i] != Symbols.Minus) && !char.IsLetterOrDigit(hostName[i]))                              {                                  break;                              }                                var bytes = TextEncoding.Utf8.GetBytes(hostName.Substring(i' l));                                foreach (var byteVal in bytes)                              {                                  chars[count++] = byteVal;                              }                                i += l - 1;                          }                          else                          {                              chars[count++] = (byte) char.ToLowerInvariant(hostName[i]);                          }                            break;                  }
Magic Number,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,SanatizeHost,The following statement contains a magic number: for (var i = start; i < n; i++)                  switch (hostName[i])                  {                      // U+0000' U+0009' U+000A' U+000D' U+0020' "#"' "%"' "/"' ":"' "?"' "@"' "["' "\"' and "]"                      case Symbols.Null:                      case Symbols.Tab:                      case Symbols.Space:                      case Symbols.LineFeed:                      case Symbols.CarriageReturn:                      case Symbols.Num:                      case Symbols.Solidus:                      case Symbols.Colon:                      case Symbols.QuestionMark:                      case Symbols.At:                      case Symbols.SquareBracketOpen:                      case Symbols.SquareBracketClose:                      case Symbols.ReverseSolidus:                          break;                      case Symbols.Dot:                          chars[count++] = (byte) hostName[i];                          break;                      case Symbols.Percent:                          if ((i + 2 < n) && hostName[i + 1].IsHex() && hostName[i + 2].IsHex())                          {                              var weight = hostName[i + 1].FromHex()*16 + hostName[i + 2].FromHex();                              chars[count++] = (byte) weight;                              i += 2;                          }                          else                          {                              chars[count++] = (byte) Symbols.Percent;                          }                            break;                      default:                          char chr;                            if (Symbols.Punycode.TryGetValue(hostName[i]' out chr))                          {                              chars[count++] = (byte) chr;                          }                          else if (hostName[i].IsAlphanumericAscii() == false)                          {                              var l = (i + 1 < n) && char.IsSurrogatePair(hostName' i) ? 2 : 1;                                if ((l == 1) && (hostName[i] != Symbols.Minus) && !char.IsLetterOrDigit(hostName[i]))                              {                                  break;                              }                                var bytes = TextEncoding.Utf8.GetBytes(hostName.Substring(i' l));                                foreach (var byteVal in bytes)                              {                                  chars[count++] = byteVal;                              }                                i += l - 1;                          }                          else                          {                              chars[count++] = (byte) char.ToLowerInvariant(hostName[i]);                          }                            break;                  }
Magic Number,ExCSS,Lexer,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,Data,The following statement contains a magic number: switch (current)              {                  case Symbols.FormFeed:                  case Symbols.LineFeed:                  case Symbols.CarriageReturn:                  case Symbols.Tab:                  case Symbols.Space:                      return NewWhitespace(current);                  case Symbols.DoubleQuote:                      return StringDoubleQuote();                  case Symbols.Num:                      return IsInValue ? ColorLiteral() : HashStart();                  case Symbols.Dollar:                      current = GetNext();                      return current == Symbols.Equality ? NewMatch(Combinators.Ends) : NewDelimiter(GetPrevious());                  case Symbols.SingleQuote:                      return StringSingleQuote();                  case Symbols.RoundBracketOpen:                      return NewOpenRound();                  case Symbols.RoundBracketClose:                      return NewCloseRound();                  case Symbols.Asterisk:                      current = GetNext();                      return current == Symbols.Equality ? NewMatch(Combinators.InText) : NewDelimiter(GetPrevious());                  case Symbols.Plus:                  {                      var c1 = GetNext();                      if (c1 != Symbols.EndOfFile)                      {                          var c2 = GetNext();                          Back(2);                            if (c1.IsDigit() || ((c1 == Symbols.Dot) && c2.IsDigit()))                          {                              return NumberStart(current);                          }                      }                      else                      {                          Back();                      }                      return NewDelimiter(current);                  }                  case Symbols.Comma:                      return NewComma();                    case Symbols.Dot:                  {                      var c = GetNext();                      return c.IsDigit() ? NumberStart(GetPrevious()) : NewDelimiter(GetPrevious());                  }                  case Symbols.Minus:                  {                      var c1 = GetNext();                      if (c1 != Symbols.EndOfFile)                      {                          var c2 = GetNext();                          Back(2);                          if (c1.IsDigit() || ((c1 == Symbols.Dot) && c2.IsDigit()))                          {                              return NumberStart(current);                          }                          if (c1.IsNameStart())                          {                              return IdentStart(current);                          }                          if ((c1 == Symbols.ReverseSolidus) && !c2.IsLineBreak() && (c2 != Symbols.EndOfFile))                          {                              return IdentStart(current);                          }                          if ((c1 != Symbols.Minus) || (c2 != Symbols.GreaterThan))                          {                              return NewDelimiter(current);                          }                            Advance(2);                          return NewCloseComment();                      }                        Back();                                            return NewDelimiter(current);                  }                  case Symbols.Solidus:                      current = GetNext();                      return current == Symbols.Asterisk                           ? Comment()                           : NewDelimiter(GetPrevious());                    case Symbols.ReverseSolidus:                      current = GetNext();                      if (current.IsLineBreak())                      {                          RaiseErrorOccurred(ParseError.LineBreakUnexpected);                          return NewDelimiter(GetPrevious());                      }                      if (current == Symbols.EndOfFile)                      {                          RaiseErrorOccurred(ParseError.EOF);                          return NewDelimiter(GetPrevious());                      }                      return IdentStart(GetPrevious());                  case Symbols.Colon:                      return NewColon();                  case Symbols.Semicolon:                      return NewSemicolon();                  case Symbols.LessThan:                      current = GetNext();                      if (current == Symbols.ExclamationMark)                      {                          current = GetNext();                          if (current == Symbols.Minus)                          {                              current = GetNext();                              if (current == Symbols.Minus)                              {                                  return NewOpenComment();                              }                              current = GetPrevious();                          }                          current = GetPrevious();                      }                      return NewDelimiter(GetPrevious());                  case Symbols.At:                      return AtKeywordStart();                  case Symbols.SquareBracketOpen:                      return NewOpenSquare();                  case Symbols.SquareBracketClose:                      return NewCloseSquare();                  case Symbols.Accent:                      current = GetNext();                      return current == Symbols.Equality                           ? NewMatch(Combinators.Begins)                           : NewDelimiter(GetPrevious());                  case Symbols.CurlyBracketOpen:                      return NewOpenCurly();                  case Symbols.CurlyBracketClose:                      return NewCloseCurly();                  case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                      return NumberStart(current);                  case 'U':                  case 'u':                      current = GetNext();                      if (current == Symbols.Plus)                      {                          current = GetNext();                          if (current.IsHex() || (current == Symbols.QuestionMark))                          {                              return UnicodeRange(current);                          }                          current = GetPrevious();                      }                      return IdentStart(GetPrevious());                  case Symbols.Pipe:                      current = GetNext();                      switch (current)                      {                          case Symbols.Equality:                              return NewMatch(Combinators.InToken);                          case Symbols.Pipe:                              return NewColumn();                      }                      return NewDelimiter(GetPrevious());                    case Symbols.Tilde:                      current = GetNext();                      return current == Symbols.Equality                           ? NewMatch(Combinators.InList)                           : NewDelimiter(GetPrevious());                    case Symbols.EndOfFile:                      return NewEof();                  case Symbols.ExclamationMark:                      current = GetNext();                      return current == Symbols.Equality                           ? NewMatch(Combinators.Unlike)                           : NewDelimiter(GetPrevious());                  default:                      return current.IsNameStart() ? IdentStart(current) : NewDelimiter(current);              }
Magic Number,ExCSS,Lexer,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,Data,The following statement contains a magic number: switch (current)              {                  case Symbols.FormFeed:                  case Symbols.LineFeed:                  case Symbols.CarriageReturn:                  case Symbols.Tab:                  case Symbols.Space:                      return NewWhitespace(current);                  case Symbols.DoubleQuote:                      return StringDoubleQuote();                  case Symbols.Num:                      return IsInValue ? ColorLiteral() : HashStart();                  case Symbols.Dollar:                      current = GetNext();                      return current == Symbols.Equality ? NewMatch(Combinators.Ends) : NewDelimiter(GetPrevious());                  case Symbols.SingleQuote:                      return StringSingleQuote();                  case Symbols.RoundBracketOpen:                      return NewOpenRound();                  case Symbols.RoundBracketClose:                      return NewCloseRound();                  case Symbols.Asterisk:                      current = GetNext();                      return current == Symbols.Equality ? NewMatch(Combinators.InText) : NewDelimiter(GetPrevious());                  case Symbols.Plus:                  {                      var c1 = GetNext();                      if (c1 != Symbols.EndOfFile)                      {                          var c2 = GetNext();                          Back(2);                            if (c1.IsDigit() || ((c1 == Symbols.Dot) && c2.IsDigit()))                          {                              return NumberStart(current);                          }                      }                      else                      {                          Back();                      }                      return NewDelimiter(current);                  }                  case Symbols.Comma:                      return NewComma();                    case Symbols.Dot:                  {                      var c = GetNext();                      return c.IsDigit() ? NumberStart(GetPrevious()) : NewDelimiter(GetPrevious());                  }                  case Symbols.Minus:                  {                      var c1 = GetNext();                      if (c1 != Symbols.EndOfFile)                      {                          var c2 = GetNext();                          Back(2);                          if (c1.IsDigit() || ((c1 == Symbols.Dot) && c2.IsDigit()))                          {                              return NumberStart(current);                          }                          if (c1.IsNameStart())                          {                              return IdentStart(current);                          }                          if ((c1 == Symbols.ReverseSolidus) && !c2.IsLineBreak() && (c2 != Symbols.EndOfFile))                          {                              return IdentStart(current);                          }                          if ((c1 != Symbols.Minus) || (c2 != Symbols.GreaterThan))                          {                              return NewDelimiter(current);                          }                            Advance(2);                          return NewCloseComment();                      }                        Back();                                            return NewDelimiter(current);                  }                  case Symbols.Solidus:                      current = GetNext();                      return current == Symbols.Asterisk                           ? Comment()                           : NewDelimiter(GetPrevious());                    case Symbols.ReverseSolidus:                      current = GetNext();                      if (current.IsLineBreak())                      {                          RaiseErrorOccurred(ParseError.LineBreakUnexpected);                          return NewDelimiter(GetPrevious());                      }                      if (current == Symbols.EndOfFile)                      {                          RaiseErrorOccurred(ParseError.EOF);                          return NewDelimiter(GetPrevious());                      }                      return IdentStart(GetPrevious());                  case Symbols.Colon:                      return NewColon();                  case Symbols.Semicolon:                      return NewSemicolon();                  case Symbols.LessThan:                      current = GetNext();                      if (current == Symbols.ExclamationMark)                      {                          current = GetNext();                          if (current == Symbols.Minus)                          {                              current = GetNext();                              if (current == Symbols.Minus)                              {                                  return NewOpenComment();                              }                              current = GetPrevious();                          }                          current = GetPrevious();                      }                      return NewDelimiter(GetPrevious());                  case Symbols.At:                      return AtKeywordStart();                  case Symbols.SquareBracketOpen:                      return NewOpenSquare();                  case Symbols.SquareBracketClose:                      return NewCloseSquare();                  case Symbols.Accent:                      current = GetNext();                      return current == Symbols.Equality                           ? NewMatch(Combinators.Begins)                           : NewDelimiter(GetPrevious());                  case Symbols.CurlyBracketOpen:                      return NewOpenCurly();                  case Symbols.CurlyBracketClose:                      return NewCloseCurly();                  case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                      return NumberStart(current);                  case 'U':                  case 'u':                      current = GetNext();                      if (current == Symbols.Plus)                      {                          current = GetNext();                          if (current.IsHex() || (current == Symbols.QuestionMark))                          {                              return UnicodeRange(current);                          }                          current = GetPrevious();                      }                      return IdentStart(GetPrevious());                  case Symbols.Pipe:                      current = GetNext();                      switch (current)                      {                          case Symbols.Equality:                              return NewMatch(Combinators.InToken);                          case Symbols.Pipe:                              return NewColumn();                      }                      return NewDelimiter(GetPrevious());                    case Symbols.Tilde:                      current = GetNext();                      return current == Symbols.Equality                           ? NewMatch(Combinators.InList)                           : NewDelimiter(GetPrevious());                    case Symbols.EndOfFile:                      return NewEof();                  case Symbols.ExclamationMark:                      current = GetNext();                      return current == Symbols.Equality                           ? NewMatch(Combinators.Unlike)                           : NewDelimiter(GetPrevious());                  default:                      return current.IsNameStart() ? IdentStart(current) : NewDelimiter(current);              }
Magic Number,ExCSS,Lexer,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,Data,The following statement contains a magic number: switch (current)              {                  case Symbols.FormFeed:                  case Symbols.LineFeed:                  case Symbols.CarriageReturn:                  case Symbols.Tab:                  case Symbols.Space:                      return NewWhitespace(current);                  case Symbols.DoubleQuote:                      return StringDoubleQuote();                  case Symbols.Num:                      return IsInValue ? ColorLiteral() : HashStart();                  case Symbols.Dollar:                      current = GetNext();                      return current == Symbols.Equality ? NewMatch(Combinators.Ends) : NewDelimiter(GetPrevious());                  case Symbols.SingleQuote:                      return StringSingleQuote();                  case Symbols.RoundBracketOpen:                      return NewOpenRound();                  case Symbols.RoundBracketClose:                      return NewCloseRound();                  case Symbols.Asterisk:                      current = GetNext();                      return current == Symbols.Equality ? NewMatch(Combinators.InText) : NewDelimiter(GetPrevious());                  case Symbols.Plus:                  {                      var c1 = GetNext();                      if (c1 != Symbols.EndOfFile)                      {                          var c2 = GetNext();                          Back(2);                            if (c1.IsDigit() || ((c1 == Symbols.Dot) && c2.IsDigit()))                          {                              return NumberStart(current);                          }                      }                      else                      {                          Back();                      }                      return NewDelimiter(current);                  }                  case Symbols.Comma:                      return NewComma();                    case Symbols.Dot:                  {                      var c = GetNext();                      return c.IsDigit() ? NumberStart(GetPrevious()) : NewDelimiter(GetPrevious());                  }                  case Symbols.Minus:                  {                      var c1 = GetNext();                      if (c1 != Symbols.EndOfFile)                      {                          var c2 = GetNext();                          Back(2);                          if (c1.IsDigit() || ((c1 == Symbols.Dot) && c2.IsDigit()))                          {                              return NumberStart(current);                          }                          if (c1.IsNameStart())                          {                              return IdentStart(current);                          }                          if ((c1 == Symbols.ReverseSolidus) && !c2.IsLineBreak() && (c2 != Symbols.EndOfFile))                          {                              return IdentStart(current);                          }                          if ((c1 != Symbols.Minus) || (c2 != Symbols.GreaterThan))                          {                              return NewDelimiter(current);                          }                            Advance(2);                          return NewCloseComment();                      }                        Back();                                            return NewDelimiter(current);                  }                  case Symbols.Solidus:                      current = GetNext();                      return current == Symbols.Asterisk                           ? Comment()                           : NewDelimiter(GetPrevious());                    case Symbols.ReverseSolidus:                      current = GetNext();                      if (current.IsLineBreak())                      {                          RaiseErrorOccurred(ParseError.LineBreakUnexpected);                          return NewDelimiter(GetPrevious());                      }                      if (current == Symbols.EndOfFile)                      {                          RaiseErrorOccurred(ParseError.EOF);                          return NewDelimiter(GetPrevious());                      }                      return IdentStart(GetPrevious());                  case Symbols.Colon:                      return NewColon();                  case Symbols.Semicolon:                      return NewSemicolon();                  case Symbols.LessThan:                      current = GetNext();                      if (current == Symbols.ExclamationMark)                      {                          current = GetNext();                          if (current == Symbols.Minus)                          {                              current = GetNext();                              if (current == Symbols.Minus)                              {                                  return NewOpenComment();                              }                              current = GetPrevious();                          }                          current = GetPrevious();                      }                      return NewDelimiter(GetPrevious());                  case Symbols.At:                      return AtKeywordStart();                  case Symbols.SquareBracketOpen:                      return NewOpenSquare();                  case Symbols.SquareBracketClose:                      return NewCloseSquare();                  case Symbols.Accent:                      current = GetNext();                      return current == Symbols.Equality                           ? NewMatch(Combinators.Begins)                           : NewDelimiter(GetPrevious());                  case Symbols.CurlyBracketOpen:                      return NewOpenCurly();                  case Symbols.CurlyBracketClose:                      return NewCloseCurly();                  case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                      return NumberStart(current);                  case 'U':                  case 'u':                      current = GetNext();                      if (current == Symbols.Plus)                      {                          current = GetNext();                          if (current.IsHex() || (current == Symbols.QuestionMark))                          {                              return UnicodeRange(current);                          }                          current = GetPrevious();                      }                      return IdentStart(GetPrevious());                  case Symbols.Pipe:                      current = GetNext();                      switch (current)                      {                          case Symbols.Equality:                              return NewMatch(Combinators.InToken);                          case Symbols.Pipe:                              return NewColumn();                      }                      return NewDelimiter(GetPrevious());                    case Symbols.Tilde:                      current = GetNext();                      return current == Symbols.Equality                           ? NewMatch(Combinators.InList)                           : NewDelimiter(GetPrevious());                    case Symbols.EndOfFile:                      return NewEof();                  case Symbols.ExclamationMark:                      current = GetNext();                      return current == Symbols.Equality                           ? NewMatch(Combinators.Unlike)                           : NewDelimiter(GetPrevious());                  default:                      return current.IsNameStart() ? IdentStart(current) : NewDelimiter(current);              }
Magic Number,ExCSS,Lexer,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,AtKeywordStart,The following statement contains a magic number: if (current == Symbols.Minus)              {                  current = GetNext();                  if (current.IsNameStart() || IsValidEscape(current))                  {                      StringBuffer.Append(Symbols.Minus);                      return AtKeywordRest(current);                  }                  Back(2);                  return NewDelimiter(Symbols.At);              }
Magic Number,ExCSS,Lexer,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,UrlDoubleQuote,The following statement contains a magic number: while (true)              {                  var current = GetNext();                  if (current.IsLineBreak())                  {                      RaiseErrorOccurred(ParseError.LineBreakUnexpected);                      return UrlBad(functionName);                  }                  if (Symbols.EndOfFile == current)                  {                      return NewUrl(functionName' FlushBuffer());                  }                  if (current == Symbols.DoubleQuote)                  {                      return UrlEnd(functionName);                  }                  if (current != Symbols.ReverseSolidus)                  {                      StringBuffer.Append(current);                  }                  else                  {                      current = GetNext();                      if (current == Symbols.EndOfFile)                      {                          Back(2);                          RaiseErrorOccurred(ParseError.EOF);                          return NewUrl(functionName' FlushBuffer()' true);                      }                      if (current.IsLineBreak())                      {                          StringBuffer.AppendLine();                      }                      else                      {                          StringBuffer.Append(ConsumeEscape(current));                      }                  }              }
Magic Number,ExCSS,Lexer,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,UrlSingleQuote,The following statement contains a magic number: while (true)              {                  var current = GetNext();                  if (current.IsLineBreak())                  {                      RaiseErrorOccurred(ParseError.LineBreakUnexpected);                      return UrlBad(functionName);                  }                  switch (current)                  {                      case Symbols.EndOfFile:                          return NewUrl(functionName' FlushBuffer());                      case Symbols.SingleQuote:                          return UrlEnd(functionName);                  }                  if (current != Symbols.ReverseSolidus)                  {                      StringBuffer.Append(current);                  }                  else                  {                      current = GetNext();                      if (current == Symbols.EndOfFile)                      {                          Back(2);                          RaiseErrorOccurred(ParseError.EOF);                          return NewUrl(functionName' FlushBuffer()' true);                      }                      if (current.IsLineBreak())                      {                          StringBuffer.AppendLine();                      }                      else                      {                          StringBuffer.Append(ConsumeEscape(current));                      }                  }              }
Magic Number,ExCSS,Lexer,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,UnicodeRange,The following statement contains a magic number: for (var i = 0; (i < 6) && current.IsHex(); i++)              {                  StringBuffer.Append(current);                  current = GetNext();              }
Magic Number,ExCSS,Lexer,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,UnicodeRange,The following statement contains a magic number: if (StringBuffer.Length != 6)              {                  for (var i = 0; i < 6 - StringBuffer.Length; i++)                  {                      if (current != Symbols.QuestionMark)                      {                          current = GetPrevious();                          break;                      }                      StringBuffer.Append(current);                      current = GetNext();                  }                  return NewRange(FlushBuffer());              }
Magic Number,ExCSS,Lexer,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,UnicodeRange,The following statement contains a magic number: if (StringBuffer.Length != 6)              {                  for (var i = 0; i < 6 - StringBuffer.Length; i++)                  {                      if (current != Symbols.QuestionMark)                      {                          current = GetPrevious();                          break;                      }                      StringBuffer.Append(current);                      current = GetNext();                  }                  return NewRange(FlushBuffer());              }
Magic Number,ExCSS,Lexer,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,UnicodeRange,The following statement contains a magic number: if (current == Symbols.Minus)              {                  current = GetNext();                  if (current.IsHex())                  {                      var start = FlushBuffer();                      for (var i = 0; i < 6; i++)                      {                          if (!current.IsHex())                          {                              current = GetPrevious();                              break;                          }                          StringBuffer.Append(current);                          current = GetNext();                      }                      var end = FlushBuffer();                      return NewRange(start' end);                  }                  Back(2);                  return NewRange(FlushBuffer());              }
Magic Number,ExCSS,Lexer,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,UnicodeRange,The following statement contains a magic number: if (current == Symbols.Minus)              {                  current = GetNext();                  if (current.IsHex())                  {                      var start = FlushBuffer();                      for (var i = 0; i < 6; i++)                      {                          if (!current.IsHex())                          {                              current = GetPrevious();                              break;                          }                          StringBuffer.Append(current);                          current = GetNext();                      }                      var end = FlushBuffer();                      return NewRange(start' end);                  }                  Back(2);                  return NewRange(FlushBuffer());              }
Magic Number,ExCSS,Lexer,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,NumberDash,The following statement contains a magic number: Back(2);
Magic Number,ExCSS,Lexer,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,ConsumeEscape,The following statement contains a magic number: var escape = new char[6];
Magic Number,ExCSS,ChildFunctionState<T>,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Parser\SelectorConstructor.cs,OnInitial,The following statement contains a magic number: if (token.Data.Isi(Keywords.Odd))                  {                      _state = ParseState.BeforeOf;                      _step = 2;                      _offset = 1;                      return false;                  }
Magic Number,ExCSS,ChildFunctionState<T>,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Parser\SelectorConstructor.cs,OnInitial,The following statement contains a magic number: if (token.Data.Isi(Keywords.Even))                  {                      _state = ParseState.BeforeOf;                      _step = 2;                      _offset = 0;                      return false;                  }
Magic Number,ExCSS,BorderRadiusConverter,C:\repos\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\BorderRadiusConverter.cs,Construct,The following statement contains a magic number: if (properties.Length == 4)              {                  var front = new List<Token>();                  var back = new List<Token>();                  var props = new List<Property>                  {                      properties.First(m => m.Name.Is(PropertyNames.BorderTopLeftRadius))'                      properties.First(m => m.Name.Is(PropertyNames.BorderTopRightRadius))'                      properties.First(                          m => m.Name.Is(PropertyNames.BorderBottomRightRadius))'                      properties.First(                          m => m.Name.Is(PropertyNames.BorderBottomLeftRadius))                  };                    for (var i = 0; i < props.Count; i++)                  {                      var dpv = props[i].DeclaredValue as IEnumerable<IPropertyValue>;                        if (dpv == null)                      {                          return null;                      }                        var first = dpv.First().Original;                      var second = dpv.Last().Original;                        if (i != 0)                      {                          front.Add(Token.Whitespace);                          back.Add(Token.Whitespace);                      }                        front.AddRange(first);                      back.AddRange(second);                  }                    var h = _converter.Convert(front);                  var v = _converter.Convert(back);                  var o = front.Concat(new Token(TokenType.Delim' "/"' TextPosition.Empty)).Concat(back);                    return new BorderRadiusValue(h' v' new TokenValue(o));              }
Magic Number,ExCSS,RadialGradientConverter,C:\repos\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\GradientConverter.cs,RadialGradientConverter,The following statement contains a magic number: var ellipse =WithOrder(WithAny(Assign(Keywords.Ellipse' false).Option(false)'                  LengthOrPercentConverter.Many(2' 2).Option())'                  position);
Magic Number,ExCSS,RadialGradientConverter,C:\repos\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\GradientConverter.cs,RadialGradientConverter,The following statement contains a magic number: var ellipse =WithOrder(WithAny(Assign(Keywords.Ellipse' false).Option(false)'                  LengthOrPercentConverter.Many(2' 2).Option())'                  position);
Magic Number,ExCSS,PeriodicValueConverter,C:\repos\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\PeriodicValueConverter.cs,PeriodicValueConverter,The following statement contains a magic number: _labels = labels.Length == 4 ? labels : Enumerable.Repeat(string.Empty' 4).ToArray();
Magic Number,ExCSS,PeriodicValueConverter,C:\repos\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\PeriodicValueConverter.cs,PeriodicValueConverter,The following statement contains a magic number: _labels = labels.Length == 4 ? labels : Enumerable.Repeat(string.Empty' 4).ToArray();
Magic Number,ExCSS,PeriodicValueConverter,C:\repos\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\PeriodicValueConverter.cs,Convert,The following statement contains a magic number: var options = new IPropertyValue[4];
Magic Number,ExCSS,PeriodicValueConverter,C:\repos\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\PeriodicValueConverter.cs,Construct,The following statement contains a magic number: if (properties.Length == 4)              {                  var options = new IPropertyValue[4];                  options[0] = _converter.Construct(properties.Where(m => m.Name == _labels[0]).ToArray());                  options[1] = _converter.Construct(properties.Where(m => m.Name == _labels[1]).ToArray());                  options[2] = _converter.Construct(properties.Where(m => m.Name == _labels[2]).ToArray());                  options[3] = _converter.Construct(properties.Where(m => m.Name == _labels[3]).ToArray());                  return (options[0] != null) && (options[1] != null) && (options[2] != null) && (options[3] != null)                      ? new PeriodicValue(options' Enumerable.Empty<Token>()' _labels)                      : null;              }
Magic Number,ExCSS,PeriodicValueConverter,C:\repos\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\PeriodicValueConverter.cs,Construct,The following statement contains a magic number: if (properties.Length == 4)              {                  var options = new IPropertyValue[4];                  options[0] = _converter.Construct(properties.Where(m => m.Name == _labels[0]).ToArray());                  options[1] = _converter.Construct(properties.Where(m => m.Name == _labels[1]).ToArray());                  options[2] = _converter.Construct(properties.Where(m => m.Name == _labels[2]).ToArray());                  options[3] = _converter.Construct(properties.Where(m => m.Name == _labels[3]).ToArray());                  return (options[0] != null) && (options[1] != null) && (options[2] != null) && (options[3] != null)                      ? new PeriodicValue(options' Enumerable.Empty<Token>()' _labels)                      : null;              }
Magic Number,ExCSS,PeriodicValueConverter,C:\repos\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\PeriodicValueConverter.cs,Construct,The following statement contains a magic number: if (properties.Length == 4)              {                  var options = new IPropertyValue[4];                  options[0] = _converter.Construct(properties.Where(m => m.Name == _labels[0]).ToArray());                  options[1] = _converter.Construct(properties.Where(m => m.Name == _labels[1]).ToArray());                  options[2] = _converter.Construct(properties.Where(m => m.Name == _labels[2]).ToArray());                  options[3] = _converter.Construct(properties.Where(m => m.Name == _labels[3]).ToArray());                  return (options[0] != null) && (options[1] != null) && (options[2] != null) && (options[3] != null)                      ? new PeriodicValue(options' Enumerable.Empty<Token>()' _labels)                      : null;              }
Magic Number,ExCSS,PeriodicValueConverter,C:\repos\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\PeriodicValueConverter.cs,Construct,The following statement contains a magic number: if (properties.Length == 4)              {                  var options = new IPropertyValue[4];                  options[0] = _converter.Construct(properties.Where(m => m.Name == _labels[0]).ToArray());                  options[1] = _converter.Construct(properties.Where(m => m.Name == _labels[1]).ToArray());                  options[2] = _converter.Construct(properties.Where(m => m.Name == _labels[2]).ToArray());                  options[3] = _converter.Construct(properties.Where(m => m.Name == _labels[3]).ToArray());                  return (options[0] != null) && (options[1] != null) && (options[2] != null) && (options[3] != null)                      ? new PeriodicValue(options' Enumerable.Empty<Token>()' _labels)                      : null;              }
Magic Number,ExCSS,PeriodicValueConverter,C:\repos\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\PeriodicValueConverter.cs,Construct,The following statement contains a magic number: if (properties.Length == 4)              {                  var options = new IPropertyValue[4];                  options[0] = _converter.Construct(properties.Where(m => m.Name == _labels[0]).ToArray());                  options[1] = _converter.Construct(properties.Where(m => m.Name == _labels[1]).ToArray());                  options[2] = _converter.Construct(properties.Where(m => m.Name == _labels[2]).ToArray());                  options[3] = _converter.Construct(properties.Where(m => m.Name == _labels[3]).ToArray());                  return (options[0] != null) && (options[1] != null) && (options[2] != null) && (options[3] != null)                      ? new PeriodicValue(options' Enumerable.Empty<Token>()' _labels)                      : null;              }
Magic Number,ExCSS,PeriodicValueConverter,C:\repos\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\PeriodicValueConverter.cs,Construct,The following statement contains a magic number: if (properties.Length == 4)              {                  var options = new IPropertyValue[4];                  options[0] = _converter.Construct(properties.Where(m => m.Name == _labels[0]).ToArray());                  options[1] = _converter.Construct(properties.Where(m => m.Name == _labels[1]).ToArray());                  options[2] = _converter.Construct(properties.Where(m => m.Name == _labels[2]).ToArray());                  options[3] = _converter.Construct(properties.Where(m => m.Name == _labels[3]).ToArray());                  return (options[0] != null) && (options[1] != null) && (options[2] != null) && (options[3] != null)                      ? new PeriodicValue(options' Enumerable.Empty<Token>()' _labels)                      : null;              }
Magic Number,ExCSS,PeriodicValueConverter,C:\repos\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\PeriodicValueConverter.cs,Construct,The following statement contains a magic number: if (properties.Length == 4)              {                  var options = new IPropertyValue[4];                  options[0] = _converter.Construct(properties.Where(m => m.Name == _labels[0]).ToArray());                  options[1] = _converter.Construct(properties.Where(m => m.Name == _labels[1]).ToArray());                  options[2] = _converter.Construct(properties.Where(m => m.Name == _labels[2]).ToArray());                  options[3] = _converter.Construct(properties.Where(m => m.Name == _labels[3]).ToArray());                  return (options[0] != null) && (options[1] != null) && (options[2] != null) && (options[3] != null)                      ? new PeriodicValue(options' Enumerable.Empty<Token>()' _labels)                      : null;              }
Magic Number,ExCSS,PeriodicValueConverter,C:\repos\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\PeriodicValueConverter.cs,Construct,The following statement contains a magic number: if (properties.Length == 4)              {                  var options = new IPropertyValue[4];                  options[0] = _converter.Construct(properties.Where(m => m.Name == _labels[0]).ToArray());                  options[1] = _converter.Construct(properties.Where(m => m.Name == _labels[1]).ToArray());                  options[2] = _converter.Construct(properties.Where(m => m.Name == _labels[2]).ToArray());                  options[3] = _converter.Construct(properties.Where(m => m.Name == _labels[3]).ToArray());                  return (options[0] != null) && (options[1] != null) && (options[2] != null) && (options[3] != null)                      ? new PeriodicValue(options' Enumerable.Empty<Token>()' _labels)                      : null;              }
Magic Number,ExCSS,PeriodicValue,C:\repos\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\PeriodicValueConverter.cs,PeriodicValue,The following statement contains a magic number: _bottom = options[2] ?? _top;
Magic Number,ExCSS,PeriodicValue,C:\repos\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\PeriodicValueConverter.cs,PeriodicValue,The following statement contains a magic number: _left = options[3] ?? _right;
Magic Number,ExCSS,PeriodicValue,C:\repos\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\PeriodicValueConverter.cs,ExtractFor,The following statement contains a magic number: if (name.Is(_labels[2]))                  {                      return _bottom.Original;                  }
Magic Number,ExCSS,PeriodicValue,C:\repos\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\PeriodicValueConverter.cs,ExtractFor,The following statement contains a magic number: if (name.Is(_labels[3]))                  {                      return _left.Original;                  }
Magic Number,ExCSS,StringsValueConverter,C:\repos\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\StringsValueConverter.cs,Convert,The following statement contains a magic number: if (n % 2 == 0)              {                  var values = new string[items.Count];                    for (var i = 0; i < n; i++)                  {                      values[i] = items[i].ToCssString();                        if (values[i] == null)                      {                          return null;                      }                  }                    return new StringsValue(values' value);              }
Magic Number,ExCSS,Angle,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Angle.cs,ToRadian,The following statement contains a magic number: switch (Type)              {                  case Unit.Deg:                      return (float) (Math.PI/180.0*Value);                    case Unit.Grad:                      return (float) (Math.PI/200.0*Value);                    case Unit.Turn:                      return (float) (2.0*Math.PI*Value);                    default:                      return Value;              }
Magic Number,ExCSS,Angle,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Angle.cs,ToRadian,The following statement contains a magic number: switch (Type)              {                  case Unit.Deg:                      return (float) (Math.PI/180.0*Value);                    case Unit.Grad:                      return (float) (Math.PI/200.0*Value);                    case Unit.Turn:                      return (float) (2.0*Math.PI*Value);                    default:                      return Value;              }
Magic Number,ExCSS,Angle,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Angle.cs,ToRadian,The following statement contains a magic number: switch (Type)              {                  case Unit.Deg:                      return (float) (Math.PI/180.0*Value);                    case Unit.Grad:                      return (float) (Math.PI/200.0*Value);                    case Unit.Turn:                      return (float) (2.0*Math.PI*Value);                    default:                      return Value;              }
Magic Number,ExCSS,Angle,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Angle.cs,ToTurns,The following statement contains a magic number: switch (Type)              {                  case Unit.Deg:                      return (float) (Value/360.0);                    case Unit.Grad:                      return (float) (Value/400.0);                    case Unit.Rad:                      return (float) (Value/(2.0*Math.PI));                    default:                      return Value;              }
Magic Number,ExCSS,Angle,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Angle.cs,ToTurns,The following statement contains a magic number: switch (Type)              {                  case Unit.Deg:                      return (float) (Value/360.0);                    case Unit.Grad:                      return (float) (Value/400.0);                    case Unit.Rad:                      return (float) (Value/(2.0*Math.PI));                    default:                      return Value;              }
Magic Number,ExCSS,Angle,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Angle.cs,ToTurns,The following statement contains a magic number: switch (Type)              {                  case Unit.Deg:                      return (float) (Value/360.0);                    case Unit.Grad:                      return (float) (Value/400.0);                    case Unit.Rad:                      return (float) (Value/(2.0*Math.PI));                    default:                      return Value;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,Color,The following statement contains a magic number: _alpha = 255;
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: int r = 0' g = 0' b = 0' a = 255;
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,TryFromHex,The following statement contains a magic number: if ((color.Length == 6) || (color.Length == 3) || (color.Length == 8) || (color.Length == 4))              {                  for (var i = 0; i < color.Length; i++)                  {                      if (!color[i].IsHex())                      {                          goto fail;                      }                  }                    value = FromHex(color);                  return true;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,TryFromHex,The following statement contains a magic number: if ((color.Length == 6) || (color.Length == 3) || (color.Length == 8) || (color.Length == 4))              {                  for (var i = 0; i < color.Length; i++)                  {                      if (!color[i].IsHex())                      {                          goto fail;                      }                  }                    value = FromHex(color);                  return true;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,TryFromHex,The following statement contains a magic number: if ((color.Length == 6) || (color.Length == 3) || (color.Length == 8) || (color.Length == 4))              {                  for (var i = 0; i < color.Length; i++)                  {                      if (!color[i].IsHex())                      {                          goto fail;                      }                  }                    value = FromHex(color);                  return true;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,TryFromHex,The following statement contains a magic number: if ((color.Length == 6) || (color.Length == 3) || (color.Length == 8) || (color.Length == 4))              {                  for (var i = 0; i < color.Length; i++)                  {                      if (!color[i].IsHex())                      {                          goto fail;                      }                  }                    value = FromHex(color);                  return true;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromFlexHex,The following statement contains a magic number: var length = Math.Max(color.Length' 3);
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromFlexHex,The following statement contains a magic number: var remaining = length%3;
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromFlexHex,The following statement contains a magic number: if (remaining != 0)              {                  length += 3 - remaining;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromFlexHex,The following statement contains a magic number: var n = length/3;
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromFlexHex,The following statement contains a magic number: var d = Math.Min(2' n);
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromFlexHex,The following statement contains a magic number: var s = Math.Max(n - 8' 0);
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromFlexHex,The following statement contains a magic number: if (d == 1)              {                  var r = chars[0*n + s].FromHex();                  var g = chars[1*n + s].FromHex();                  var b = chars[2*n + s].FromHex();                  return new Color((byte) r' (byte) g' (byte) b);              }              else              {                  var r = 16*chars[0*n + s].FromHex() + chars[0*n + s + 1].FromHex();                  var g = 16*chars[1*n + s].FromHex() + chars[1*n + s + 1].FromHex();                  var b = 16*chars[2*n + s].FromHex() + chars[2*n + s + 1].FromHex();                  return new Color((byte) r' (byte) g' (byte) b);              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromFlexHex,The following statement contains a magic number: if (d == 1)              {                  var r = chars[0*n + s].FromHex();                  var g = chars[1*n + s].FromHex();                  var b = chars[2*n + s].FromHex();                  return new Color((byte) r' (byte) g' (byte) b);              }              else              {                  var r = 16*chars[0*n + s].FromHex() + chars[0*n + s + 1].FromHex();                  var g = 16*chars[1*n + s].FromHex() + chars[1*n + s + 1].FromHex();                  var b = 16*chars[2*n + s].FromHex() + chars[2*n + s + 1].FromHex();                  return new Color((byte) r' (byte) g' (byte) b);              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromFlexHex,The following statement contains a magic number: if (d == 1)              {                  var r = chars[0*n + s].FromHex();                  var g = chars[1*n + s].FromHex();                  var b = chars[2*n + s].FromHex();                  return new Color((byte) r' (byte) g' (byte) b);              }              else              {                  var r = 16*chars[0*n + s].FromHex() + chars[0*n + s + 1].FromHex();                  var g = 16*chars[1*n + s].FromHex() + chars[1*n + s + 1].FromHex();                  var b = 16*chars[2*n + s].FromHex() + chars[2*n + s + 1].FromHex();                  return new Color((byte) r' (byte) g' (byte) b);              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromFlexHex,The following statement contains a magic number: if (d == 1)              {                  var r = chars[0*n + s].FromHex();                  var g = chars[1*n + s].FromHex();                  var b = chars[2*n + s].FromHex();                  return new Color((byte) r' (byte) g' (byte) b);              }              else              {                  var r = 16*chars[0*n + s].FromHex() + chars[0*n + s + 1].FromHex();                  var g = 16*chars[1*n + s].FromHex() + chars[1*n + s + 1].FromHex();                  var b = 16*chars[2*n + s].FromHex() + chars[2*n + s + 1].FromHex();                  return new Color((byte) r' (byte) g' (byte) b);              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromFlexHex,The following statement contains a magic number: if (d == 1)              {                  var r = chars[0*n + s].FromHex();                  var g = chars[1*n + s].FromHex();                  var b = chars[2*n + s].FromHex();                  return new Color((byte) r' (byte) g' (byte) b);              }              else              {                  var r = 16*chars[0*n + s].FromHex() + chars[0*n + s + 1].FromHex();                  var g = 16*chars[1*n + s].FromHex() + chars[1*n + s + 1].FromHex();                  var b = 16*chars[2*n + s].FromHex() + chars[2*n + s + 1].FromHex();                  return new Color((byte) r' (byte) g' (byte) b);              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromFlexHex,The following statement contains a magic number: if (d == 1)              {                  var r = chars[0*n + s].FromHex();                  var g = chars[1*n + s].FromHex();                  var b = chars[2*n + s].FromHex();                  return new Color((byte) r' (byte) g' (byte) b);              }              else              {                  var r = 16*chars[0*n + s].FromHex() + chars[0*n + s + 1].FromHex();                  var g = 16*chars[1*n + s].FromHex() + chars[1*n + s + 1].FromHex();                  var b = 16*chars[2*n + s].FromHex() + chars[2*n + s + 1].FromHex();                  return new Color((byte) r' (byte) g' (byte) b);              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHwba,The following statement contains a magic number: var p = (int) (6*hue);
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHwba,The following statement contains a magic number: var f = 6*hue - p;
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHwba,The following statement contains a magic number: switch (p)              {                  default:                  case 6:                  case 0:                      red = v;                      green = n;                      blue = whiteness;                      break;                  case 1:                      red = n;                      green = v;                      blue = whiteness;                      break;                  case 2:                      red = whiteness;                      green = v;                      blue = n;                      break;                  case 3:                      red = whiteness;                      green = n;                      blue = v;                      break;                  case 4:                      red = n;                      green = whiteness;                      blue = v;                      break;                  case 5:                      red = v;                      green = whiteness;                      blue = n;                      break;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHwba,The following statement contains a magic number: switch (p)              {                  default:                  case 6:                  case 0:                      red = v;                      green = n;                      blue = whiteness;                      break;                  case 1:                      red = n;                      green = v;                      blue = whiteness;                      break;                  case 2:                      red = whiteness;                      green = v;                      blue = n;                      break;                  case 3:                      red = whiteness;                      green = n;                      blue = v;                      break;                  case 4:                      red = n;                      green = whiteness;                      blue = v;                      break;                  case 5:                      red = v;                      green = whiteness;                      blue = n;                      break;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHwba,The following statement contains a magic number: switch (p)              {                  default:                  case 6:                  case 0:                      red = v;                      green = n;                      blue = whiteness;                      break;                  case 1:                      red = n;                      green = v;                      blue = whiteness;                      break;                  case 2:                      red = whiteness;                      green = v;                      blue = n;                      break;                  case 3:                      red = whiteness;                      green = n;                      blue = v;                      break;                  case 4:                      red = n;                      green = whiteness;                      blue = v;                      break;                  case 5:                      red = v;                      green = whiteness;                      blue = n;                      break;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHwba,The following statement contains a magic number: switch (p)              {                  default:                  case 6:                  case 0:                      red = v;                      green = n;                      blue = whiteness;                      break;                  case 1:                      red = n;                      green = v;                      blue = whiteness;                      break;                  case 2:                      red = whiteness;                      green = v;                      blue = n;                      break;                  case 3:                      red = whiteness;                      green = n;                      blue = v;                      break;                  case 4:                      red = n;                      green = whiteness;                      blue = v;                      break;                  case 5:                      red = v;                      green = whiteness;                      blue = n;                      break;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHwba,The following statement contains a magic number: switch (p)              {                  default:                  case 6:                  case 0:                      red = v;                      green = n;                      blue = whiteness;                      break;                  case 1:                      red = n;                      green = v;                      blue = whiteness;                      break;                  case 2:                      red = whiteness;                      green = v;                      blue = n;                      break;                  case 3:                      red = whiteness;                      green = n;                      blue = v;                      break;                  case 4:                      red = n;                      green = whiteness;                      blue = v;                      break;                  case 5:                      red = v;                      green = whiteness;                      blue = n;                      break;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,Normalize,The following statement contains a magic number: return (byte) Math.Max(Math.Min(Math.Round(255*value)' 255)' 0);
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,Normalize,The following statement contains a magic number: return (byte) Math.Max(Math.Min(Math.Round(255*value)' 255)' 0);
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,HueToRgb,The following statement contains a magic number: if (h < 0.5)              {                  return m2;              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,ToString,The following statement contains a magic number: if (_alpha == 255)              {                  var arguments = string.Join("' "' R.ToString()' G.ToString()' B.ToString());                  return FunctionNames.Rgb.StylesheetFunction(arguments);              }              else              {                  var arguments = string.Join("' "' R.ToString()' G.ToString()' B.ToString()' Alpha.ToString());                  return FunctionNames.Rgba.StylesheetFunction(arguments);              }
Magic Number,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,ToString,The following statement contains a magic number: if (_alpha == 255)              {                  var arguments = string.Join("' "' R.ToString(format' formatProvider)' G.ToString(format' formatProvider)'                      B.ToString(format' formatProvider));                  return FunctionNames.Rgb.StylesheetFunction(arguments);              }              else              {                  var arguments = string.Join("' "' R.ToString(format' formatProvider)' G.ToString(format' formatProvider)'                      B.ToString(format' formatProvider)' Alpha.ToString(format' formatProvider));                  return FunctionNames.Rgba.StylesheetFunction(arguments);              }
Missing Default,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,RelativeState,The following switch statement is missing a default case: switch (input[index])                  {                      case Symbols.QuestionMark:                          return ParseQuery(input' index + 1);                        case Symbols.Num:                          return ParseFragment(input' index + 1);                        case Symbols.Solidus:                      case Symbols.ReverseSolidus:                          if (index == input.Length - 1)                          {                              return ParsePath(input' index);                          }                            var c = input[++index];                            if (c.IsOneOf(Symbols.Solidus' Symbols.ReverseSolidus))                          {                              return _scheme.Is(ProtocolNames.File)                                   ? ParseFileHost(input' index + 1)                                   : IgnoreSlashesState(input' index + 1);                          }                            if (!_scheme.Is(ProtocolNames.File))                          {                              return ParsePath(input' index - 1);                          }                            _host = string.Empty;                          _port = string.Empty;                            return ParsePath(input' index - 1);                  }
Missing Default,ExCSS,Url,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseHostName,The following switch statement is missing a default case: switch (c)                  {                      case Symbols.SquareBracketClose:                          inBracket = false;                          break;                        case Symbols.SquareBracketOpen:                          inBracket = true;                          break;                        case Symbols.Colon:                          if (inBracket)                              break;                            _host = SanatizeHost(input' start' index - start);                            if (!onlyHost)                          {                              return ParsePort(input' index + 1' onlyPort);                          }                            return true;                        case Symbols.Solidus:                      case Symbols.ReverseSolidus:                      case Symbols.Num:                      case Symbols.QuestionMark:                          _host = SanatizeHost(input' start' index - start);                          var error = string.IsNullOrEmpty(_host);                            if (!onlyHost)                          {                              return ParsePath(input' index) && !error;                          }                            return !error;                  }
Missing Default,ExCSS,Lexer,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,Data,The following switch statement is missing a default case: switch (current)                      {                          case Symbols.Equality:                              return NewMatch(Combinators.InToken);                          case Symbols.Pipe:                              return NewColumn();                      }
Missing Default,ExCSS,Lexer,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,UrlSingleQuote,The following switch statement is missing a default case: switch (current)                  {                      case Symbols.EndOfFile:                          return NewUrl(functionName' FlushBuffer());                      case Symbols.SingleQuote:                          return UrlEnd(functionName);                  }
Missing Default,ExCSS,SelectorConstructor,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Parser\SelectorConstructor.cs,OnPseudoClass,The following switch statement is missing a default case: switch (token.Type)              {                  case TokenType.Colon:                      _state = State.PseudoElement;                      return;                  case TokenType.Function:                  {                      var sel = GetPseudoFunction(token as FunctionToken);                      if (sel != null)                      {                          Insert(sel);                          return;                      }                  }                      break;                  case TokenType.Ident:                  {                      var sel = _pseudoClassSelector.Create(token.Data);                      if (sel != null)                      {                          Insert(sel);                          return;                      }                  }                      break;              }
Missing Default,ExCSS,StylesheetComposer,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Parser\StylesheetComposer.cs,CreateUnknown,The following switch statement is missing a default case: switch (token.Type)                          {                              case TokenType.CurlyBracketOpen:                                  curly++;                                  break;                              case TokenType.CurlyBracketClose:                                  curly--;                                  break;                              case TokenType.EndOfFile:                                  curly = 0;                                  break;                          }
Missing Default,ExCSS,Color,C:\repos\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following switch statement is missing a default case: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
