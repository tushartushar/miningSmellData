Implementation smell,Namespace,Class,File,Method,Description
Long Method,ExCSS,PropertyFactory,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Factories\PropertyFactory.cs,PropertyFactory,The method has 265 lines of code.
Long Method,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParsePath,The method has 107 lines of code.
Long Method,ExCSS,Lexer,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,Data,The method has 185 lines of code.
Long Method,ExCSS,TextEncoding,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\TextEncoding.cs,CreateEncodings,The method has 209 lines of code.
Complex Method,ExCSS,ValueExtensions,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Extensions\ValueExtensions.cs,ToLength,Cyclomatic complexity of the method is 9
Complex Method,ExCSS,ParserExtensions,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\ParserExtensions.cs,CreateRule,Cyclomatic complexity of the method is 13
Complex Method,ExCSS,StyleDeclaration,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\StyleDeclaration.cs,ToCss,Cyclomatic complexity of the method is 12
Complex Method,ExCSS,TextSource,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TextSource.cs,DetectByteOrderMarkAsync,Cyclomatic complexity of the method is 8
Complex Method,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,Serialize,Cyclomatic complexity of the method is 9
Complex Method,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseScheme,Cyclomatic complexity of the method is 11
Complex Method,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,RelativeState,Cyclomatic complexity of the method is 8
Complex Method,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseAuthority,Cyclomatic complexity of the method is 9
Complex Method,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseHostName,Cyclomatic complexity of the method is 9
Complex Method,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParsePath,Cyclomatic complexity of the method is 19
Complex Method,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,SanatizeHost,Cyclomatic complexity of the method is 11
Complex Method,ExCSS,ValueBuilder,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\ValueBuilder.cs,Apply,Cyclomatic complexity of the method is 9
Complex Method,ExCSS,Lexer,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,Data,Cyclomatic complexity of the method is 45
Complex Method,ExCSS,Lexer,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,NumberRest,Cyclomatic complexity of the method is 10
Complex Method,ExCSS,Lexer,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,NumberFraction,Cyclomatic complexity of the method is 8
Complex Method,ExCSS,Lexer,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,UrlDoubleQuote,Cyclomatic complexity of the method is 8
Complex Method,ExCSS,Lexer,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,UrlBad,Cyclomatic complexity of the method is 8
Complex Method,ExCSS,Lexer,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,UnicodeRange,Cyclomatic complexity of the method is 9
Complex Method,ExCSS,SelectorConstructor,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\SelectorConstructor.cs,Apply,Cyclomatic complexity of the method is 10
Complex Method,ExCSS,SelectorConstructor,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\SelectorConstructor.cs,OnData,Cyclomatic complexity of the method is 8
Complex Method,ExCSS,SelectorConstructor,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\SelectorConstructor.cs,GetCombinator,Cyclomatic complexity of the method is 8
Complex Method,ExCSS,SelectorConstructor,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\SelectorConstructor.cs,OnDelim,Cyclomatic complexity of the method is 9
Complex Method,ExCSS,StylesheetComposer,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\StylesheetComposer.cs,CreateAtRule,Cyclomatic complexity of the method is 10
Complex Method,ExCSS,StylesheetComposer,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\StylesheetComposer.cs,CreateKeyframeSelector,Cyclomatic complexity of the method is 9
Complex Method,ExCSS,StylesheetComposer,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\StylesheetComposer.cs,CreateDeclarationWith,Cyclomatic complexity of the method is 10
Complex Method,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHwba,Cyclomatic complexity of the method is 8
Complex Method,ExCSS,Length,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Length.cs,GetUnit,Cyclomatic complexity of the method is 16
Long Parameter List,ExCSS,CharExtensions,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Extensions\CharExtensions.cs,IsOneOf,The method has 5 parameters. Parameters: c' o1' o2' o3' o4
Long Parameter List,ExCSS,TransformMatrix,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The method has 15 parameters. Parameters: m11' m12' m13' m21' m22' m23' m31' m32' m33' tx' ty' tz' px' py' pz
Long Parameter List,ExCSS,StylesheetParser,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\StylesheetParser.cs,StylesheetParser,The method has 6 parameters. Parameters: includeUnknownRules' includeUnknownDeclarations' tolerateInvalidSelectors' tolerateInvalidValues' tolerateInvalidConstraints' preserveComments
Long Parameter List,ExCSS,RadialGradient,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\RadialGradient.cs,RadialGradient,The method has 7 parameters. Parameters: circle' pt' width' height' sizeMode' stops' repeating
Long Parameter List,ExCSS,Shadow,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Shadow.cs,Shadow,The method has 6 parameters. Parameters: inset' offsetX' offsetY' blurRadius' spreadRadius' color
Long Identifier,ExCSS,Converters,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Converters.cs,,The length of the parameter PositiveOrInfiniteNumberConverter is 33.
Long Identifier,ExCSS,Converters,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Converters.cs,,The length of the parameter OptionalLengthOrPercentConverter is 32.
Long Identifier,ExCSS,Converters,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Converters.cs,,The length of the parameter BorderRadiusShorthandConverter is 30.
Long Statement,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,RelativeState,The length of the statement  "                    ((index + 2 == input.Length) || input[index + 2].IsOneOf(Symbols.Solidus' Symbols.ReverseSolidus' Symbols.Num' Symbols.QuestionMark))) " is 134.
Complex Conditional,ExCSS,Medium,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Medium.cs,Equals,The conditional expression  "(other != null) &&                  (other.IsExclusive == IsExclusive) &&                  (other.IsInverse == IsInverse) &&                  other.Type.Is(Type) &&                  (other.Features.Count() == Features.Count())"  is complex.
Complex Conditional,ExCSS,TextSource,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TextSource.cs,DetectByteOrderMarkAsync,The conditional expression  "(count > 2) && (_buffer[0] == 0xef) && (_buffer[1] == 0xbb) && (_buffer[2] == 0xbf)"  is complex.
Complex Conditional,ExCSS,TextSource,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TextSource.cs,DetectByteOrderMarkAsync,The conditional expression  "(count > 3) && (_buffer[0] == 0xff) && (_buffer[1] == 0xfe) && (_buffer[2] == 0x0) &&                       (_buffer[3] == 0x0)"  is complex.
Complex Conditional,ExCSS,TextSource,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TextSource.cs,DetectByteOrderMarkAsync,The conditional expression  "(count > 3) && (_buffer[0] == 0x0) && (_buffer[1] == 0x0) && (_buffer[2] == 0xfe) &&                       (_buffer[3] == 0xff)"  is complex.
Complex Conditional,ExCSS,TextSource,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TextSource.cs,DetectByteOrderMarkAsync,The conditional expression  "(count > 3) && (_buffer[0] == 0x84) && (_buffer[1] == 0x31) && (_buffer[2] == 0x95) &&                       (_buffer[3] == 0x33)"  is complex.
Complex Conditional,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseScheme,The conditional expression  "c.IsAlphanumericAscii() || (c == Symbols.Plus) || (c == Symbols.Minus) || (c == Symbols.Dot)"  is complex.
Complex Conditional,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseScheme,The conditional expression  "(index < input.Length - 1) && (input[++index] == Symbols.Solidus) &&                              (++index < input.Length) && (input[index] == Symbols.Solidus)"  is complex.
Complex Conditional,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseSchemeData,The conditional expression  "(c == Symbols.Percent) && (index + 2 < input.Length) && input[index + 1].IsHex() &&                      input[index + 2].IsHex()"  is complex.
Complex Conditional,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,RelativeState,The conditional expression  "input[index].IsLetter() &&                       _scheme.Is(ProtocolNames.File) &&                       (index + 1 < input.Length) &&                       input[index + 1].IsOneOf(Symbols.Colon' Symbols.Solidus) &&                      ((index + 2 == input.Length) || input[index + 2].IsOneOf(Symbols.Solidus' Symbols.ReverseSolidus' Symbols.Num' Symbols.QuestionMark))"  is complex.
Complex Conditional,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseAuthority,The conditional expression  "(c == Symbols.Percent) && (index + 2 < input.Length) && input[index + 1].IsHex() &&                           input[index + 2].IsHex()"  is complex.
Complex Conditional,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseAuthority,The conditional expression  "(c != Symbols.Colon) &&                           ((c == Symbols.Num) || (c == Symbols.QuestionMark) || c.IsNormalPathCharacter())"  is complex.
Complex Conditional,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseFileHost,The conditional expression  "(c == Symbols.Solidus) ||                      (c == Symbols.ReverseSolidus) ||                      (c == Symbols.Num) ||                      (c == Symbols.QuestionMark)"  is complex.
Complex Conditional,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseFileHost,The conditional expression  "(length == 2) &&                   input[index - 2].IsLetter() &&                  ((input[index - 1] == Symbols.Pipe) || (input[index - 1] == Symbols.Colon))"  is complex.
Complex Conditional,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParsePort,The conditional expression  "(c == Symbols.QuestionMark) || (c == Symbols.Solidus) || (c == Symbols.ReverseSolidus) ||                      (c == Symbols.Num)"  is complex.
Complex Conditional,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParsePort,The conditional expression  "c.IsDigit() || (c == Symbols.Tab) || (c == Symbols.LineFeed) || (c == Symbols.CarriageReturn)"  is complex.
Complex Conditional,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParsePath,The conditional expression  "(c == Symbols.EndOfFile) || (c == Symbols.Solidus) || (c == Symbols.ReverseSolidus) || breakNow"  is complex.
Complex Conditional,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParsePath,The conditional expression  "_scheme.Is(ProtocolNames.File) &&                              (paths.Count == originalCount) &&                              (path.Length == 2) &&                              path[0].IsLetter() &&                              (path[1] == Symbols.Pipe)"  is complex.
Complex Conditional,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParsePath,The conditional expression  "(c == Symbols.Percent) &&                           (index + 2 < input.Length) &&                           input[index + 1].IsHex() &&                           input[index + 2].IsHex()"  is complex.
Complex Conditional,ExCSS,StylesheetComposer,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\StylesheetComposer.cs,ParseComments,The conditional expression  "(token.Type == TokenType.Whitespace) || (token.Type == TokenType.Comment) ||                     (token.Type == TokenType.Cdc) || (token.Type == TokenType.Cdo)"  is complex.
Complex Conditional,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,TryFromHex,The conditional expression  "(color.Length == 6) || (color.Length == 3) || (color.Length == 8) || (color.Length == 4)"  is complex.
Magic Number,ExCSS,PortableExtensions,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Extensions\PortableExtensions.cs,Delay,The following statement contains a magic number: return Task.Delay(Math.Max(timeout' 4)' token);
Magic Number,ExCSS,ValueExtensions,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Extensions\ValueExtensions.cs,IsWeight,The following statement contains a magic number: return (value == 100) || (value == 200) || (value == 300) || (value == 400) ||                     (value == 500) || (value == 600) || (value == 700) || (value == 800) ||                     (value == 900);
Magic Number,ExCSS,ValueExtensions,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Extensions\ValueExtensions.cs,IsWeight,The following statement contains a magic number: return (value == 100) || (value == 200) || (value == 300) || (value == 400) ||                     (value == 500) || (value == 600) || (value == 700) || (value == 800) ||                     (value == 900);
Magic Number,ExCSS,ValueExtensions,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Extensions\ValueExtensions.cs,IsWeight,The following statement contains a magic number: return (value == 100) || (value == 200) || (value == 300) || (value == 400) ||                     (value == 500) || (value == 600) || (value == 700) || (value == 800) ||                     (value == 900);
Magic Number,ExCSS,ValueExtensions,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Extensions\ValueExtensions.cs,IsWeight,The following statement contains a magic number: return (value == 100) || (value == 200) || (value == 300) || (value == 400) ||                     (value == 500) || (value == 600) || (value == 700) || (value == 800) ||                     (value == 900);
Magic Number,ExCSS,ValueExtensions,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Extensions\ValueExtensions.cs,IsWeight,The following statement contains a magic number: return (value == 100) || (value == 200) || (value == 300) || (value == 400) ||                     (value == 500) || (value == 600) || (value == 700) || (value == 800) ||                     (value == 900);
Magic Number,ExCSS,ValueExtensions,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Extensions\ValueExtensions.cs,IsWeight,The following statement contains a magic number: return (value == 100) || (value == 200) || (value == 300) || (value == 400) ||                     (value == 500) || (value == 600) || (value == 700) || (value == 800) ||                     (value == 900);
Magic Number,ExCSS,ValueExtensions,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Extensions\ValueExtensions.cs,IsWeight,The following statement contains a magic number: return (value == 100) || (value == 200) || (value == 300) || (value == 400) ||                     (value == 500) || (value == 600) || (value == 700) || (value == 800) ||                     (value == 900);
Magic Number,ExCSS,ValueExtensions,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Extensions\ValueExtensions.cs,IsWeight,The following statement contains a magic number: return (value == 100) || (value == 200) || (value == 300) || (value == 400) ||                     (value == 500) || (value == 600) || (value == 700) || (value == 800) ||                     (value == 900);
Magic Number,ExCSS,ValueExtensions,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Extensions\ValueExtensions.cs,IsWeight,The following statement contains a magic number: return (value == 100) || (value == 200) || (value == 300) || (value == 400) ||                     (value == 500) || (value == 600) || (value == 700) || (value == 800) ||                     (value == 900);
Magic Number,ExCSS,ValueExtensions,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Extensions\ValueExtensions.cs,ToLength,The following statement contains a magic number: switch (fontSize)              {                  case FontSize.Big: //1.5em                      return new Length(1.5f' Length.Unit.Em);                  case FontSize.Huge: //2em                      return new Length(2f' Length.Unit.Em);                  case FontSize.Large: //1.2em                      return new Length(1.2f' Length.Unit.Em);                  case FontSize.Larger: //*120%                      return new Length(120f' Length.Unit.Percent);                  case FontSize.Little: //0.75em                      return new Length(0.75f' Length.Unit.Em);                  case FontSize.Small: //8/9em                      return new Length(8f/9f' Length.Unit.Em);                  case FontSize.Smaller: //*80%                      return new Length(80f' Length.Unit.Percent);                  case FontSize.Tiny: //0.6em                      return new Length(0.6f' Length.Unit.Em);                  default: //1em                      return new Length(1f' Length.Unit.Em);              }
Magic Number,ExCSS,ValueExtensions,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Extensions\ValueExtensions.cs,ToLength,The following statement contains a magic number: switch (fontSize)              {                  case FontSize.Big: //1.5em                      return new Length(1.5f' Length.Unit.Em);                  case FontSize.Huge: //2em                      return new Length(2f' Length.Unit.Em);                  case FontSize.Large: //1.2em                      return new Length(1.2f' Length.Unit.Em);                  case FontSize.Larger: //*120%                      return new Length(120f' Length.Unit.Percent);                  case FontSize.Little: //0.75em                      return new Length(0.75f' Length.Unit.Em);                  case FontSize.Small: //8/9em                      return new Length(8f/9f' Length.Unit.Em);                  case FontSize.Smaller: //*80%                      return new Length(80f' Length.Unit.Percent);                  case FontSize.Tiny: //0.6em                      return new Length(0.6f' Length.Unit.Em);                  default: //1em                      return new Length(1f' Length.Unit.Em);              }
Magic Number,ExCSS,ValueExtensions,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Extensions\ValueExtensions.cs,ToLength,The following statement contains a magic number: switch (fontSize)              {                  case FontSize.Big: //1.5em                      return new Length(1.5f' Length.Unit.Em);                  case FontSize.Huge: //2em                      return new Length(2f' Length.Unit.Em);                  case FontSize.Large: //1.2em                      return new Length(1.2f' Length.Unit.Em);                  case FontSize.Larger: //*120%                      return new Length(120f' Length.Unit.Percent);                  case FontSize.Little: //0.75em                      return new Length(0.75f' Length.Unit.Em);                  case FontSize.Small: //8/9em                      return new Length(8f/9f' Length.Unit.Em);                  case FontSize.Smaller: //*80%                      return new Length(80f' Length.Unit.Percent);                  case FontSize.Tiny: //0.6em                      return new Length(0.6f' Length.Unit.Em);                  default: //1em                      return new Length(1f' Length.Unit.Em);              }
Magic Number,ExCSS,ValueExtensions,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Extensions\ValueExtensions.cs,ToLength,The following statement contains a magic number: switch (fontSize)              {                  case FontSize.Big: //1.5em                      return new Length(1.5f' Length.Unit.Em);                  case FontSize.Huge: //2em                      return new Length(2f' Length.Unit.Em);                  case FontSize.Large: //1.2em                      return new Length(1.2f' Length.Unit.Em);                  case FontSize.Larger: //*120%                      return new Length(120f' Length.Unit.Percent);                  case FontSize.Little: //0.75em                      return new Length(0.75f' Length.Unit.Em);                  case FontSize.Small: //8/9em                      return new Length(8f/9f' Length.Unit.Em);                  case FontSize.Smaller: //*80%                      return new Length(80f' Length.Unit.Percent);                  case FontSize.Tiny: //0.6em                      return new Length(0.6f' Length.Unit.Em);                  default: //1em                      return new Length(1f' Length.Unit.Em);              }
Magic Number,ExCSS,ValueExtensions,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Extensions\ValueExtensions.cs,ToLength,The following statement contains a magic number: switch (fontSize)              {                  case FontSize.Big: //1.5em                      return new Length(1.5f' Length.Unit.Em);                  case FontSize.Huge: //2em                      return new Length(2f' Length.Unit.Em);                  case FontSize.Large: //1.2em                      return new Length(1.2f' Length.Unit.Em);                  case FontSize.Larger: //*120%                      return new Length(120f' Length.Unit.Percent);                  case FontSize.Little: //0.75em                      return new Length(0.75f' Length.Unit.Em);                  case FontSize.Small: //8/9em                      return new Length(8f/9f' Length.Unit.Em);                  case FontSize.Smaller: //*80%                      return new Length(80f' Length.Unit.Percent);                  case FontSize.Tiny: //0.6em                      return new Length(0.6f' Length.Unit.Em);                  default: //1em                      return new Length(1f' Length.Unit.Em);              }
Magic Number,ExCSS,ValueExtensions,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Extensions\ValueExtensions.cs,ToLength,The following statement contains a magic number: switch (fontSize)              {                  case FontSize.Big: //1.5em                      return new Length(1.5f' Length.Unit.Em);                  case FontSize.Huge: //2em                      return new Length(2f' Length.Unit.Em);                  case FontSize.Large: //1.2em                      return new Length(1.2f' Length.Unit.Em);                  case FontSize.Larger: //*120%                      return new Length(120f' Length.Unit.Percent);                  case FontSize.Little: //0.75em                      return new Length(0.75f' Length.Unit.Em);                  case FontSize.Small: //8/9em                      return new Length(8f/9f' Length.Unit.Em);                  case FontSize.Smaller: //*80%                      return new Length(80f' Length.Unit.Percent);                  case FontSize.Tiny: //0.6em                      return new Length(0.6f' Length.Unit.Em);                  default: //1em                      return new Length(1f' Length.Unit.Em);              }
Magic Number,ExCSS,ValueExtensions,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Extensions\ValueExtensions.cs,ToLength,The following statement contains a magic number: switch (fontSize)              {                  case FontSize.Big: //1.5em                      return new Length(1.5f' Length.Unit.Em);                  case FontSize.Huge: //2em                      return new Length(2f' Length.Unit.Em);                  case FontSize.Large: //1.2em                      return new Length(1.2f' Length.Unit.Em);                  case FontSize.Larger: //*120%                      return new Length(120f' Length.Unit.Percent);                  case FontSize.Little: //0.75em                      return new Length(0.75f' Length.Unit.Em);                  case FontSize.Small: //8/9em                      return new Length(8f/9f' Length.Unit.Em);                  case FontSize.Smaller: //*80%                      return new Length(80f' Length.Unit.Percent);                  case FontSize.Tiny: //0.6em                      return new Length(0.6f' Length.Unit.Em);                  default: //1em                      return new Length(1f' Length.Unit.Em);              }
Magic Number,ExCSS,ValueExtensions,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Extensions\ValueExtensions.cs,ToLength,The following statement contains a magic number: switch (fontSize)              {                  case FontSize.Big: //1.5em                      return new Length(1.5f' Length.Unit.Em);                  case FontSize.Huge: //2em                      return new Length(2f' Length.Unit.Em);                  case FontSize.Large: //1.2em                      return new Length(1.2f' Length.Unit.Em);                  case FontSize.Larger: //*120%                      return new Length(120f' Length.Unit.Percent);                  case FontSize.Little: //0.75em                      return new Length(0.75f' Length.Unit.Em);                  case FontSize.Small: //8/9em                      return new Length(8f/9f' Length.Unit.Em);                  case FontSize.Smaller: //*80%                      return new Length(80f' Length.Unit.Percent);                  case FontSize.Tiny: //0.6em                      return new Length(0.6f' Length.Unit.Em);                  default: //1em                      return new Length(1f' Length.Unit.Em);              }
Magic Number,ExCSS,ValueExtensions,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Extensions\ValueExtensions.cs,ToLength,The following statement contains a magic number: switch (fontSize)              {                  case FontSize.Big: //1.5em                      return new Length(1.5f' Length.Unit.Em);                  case FontSize.Huge: //2em                      return new Length(2f' Length.Unit.Em);                  case FontSize.Large: //1.2em                      return new Length(1.2f' Length.Unit.Em);                  case FontSize.Larger: //*120%                      return new Length(120f' Length.Unit.Percent);                  case FontSize.Little: //0.75em                      return new Length(0.75f' Length.Unit.Em);                  case FontSize.Small: //8/9em                      return new Length(8f/9f' Length.Unit.Em);                  case FontSize.Smaller: //*80%                      return new Length(80f' Length.Unit.Percent);                  case FontSize.Tiny: //0.6em                      return new Length(0.6f' Length.Unit.Em);                  default: //1em                      return new Length(1f' Length.Unit.Em);              }
Magic Number,ExCSS,ValueExtensions,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Extensions\ValueExtensions.cs,ToRgbComponent,The following statement contains a magic number: return (byte) Math.Min(element.Value' 255);
Magic Number,ExCSS,ValueExtensions,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Extensions\ValueExtensions.cs,ToRgbComponent,The following statement contains a magic number: return (byte) (255f*percent.Value.NormalizedValue);
Magic Number,ExCSS,Pool,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Pool.cs,NewStringBuilder,The following statement contains a magic number: return Builder.Count == 0 ? new StringBuilder(1024) : Builder.Pop().Clear();
Magic Number,ExCSS,RenderDevice,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\RenderDevice.cs,RenderDevice,The following statement contains a magic number: ColorBits = 32;
Magic Number,ExCSS,RenderDevice,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\RenderDevice.cs,RenderDevice,The following statement contains a magic number: Resolution = 96;
Magic Number,ExCSS,RenderDevice,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\RenderDevice.cs,RenderDevice,The following statement contains a magic number: Frequency = 60;
Magic Number,ExCSS,TextSource,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TextSource.cs,DetectByteOrderMarkAsync,The following statement contains a magic number: offset = 3;
Magic Number,ExCSS,TextSource,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TextSource.cs,DetectByteOrderMarkAsync,The following statement contains a magic number: (count > 2) && (_buffer[0] == 0xef) && (_buffer[1] == 0xbb) && (_buffer[2] == 0xbf)
Magic Number,ExCSS,TextSource,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TextSource.cs,DetectByteOrderMarkAsync,The following statement contains a magic number: (count > 2) && (_buffer[0] == 0xef) && (_buffer[1] == 0xbb) && (_buffer[2] == 0xbf)
Magic Number,ExCSS,TransformMatrix,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,Equals,The following statement contains a magic number: j < 4
Magic Number,ExCSS,TransformMatrix,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,Equals,The following statement contains a magic number: i < 4
Magic Number,ExCSS,TransformMatrix,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix = new float[4' 4];
Magic Number,ExCSS,TransformMatrix,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix = new float[4' 4];
Magic Number,ExCSS,TransformMatrix,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: values.Length != 16
Magic Number,ExCSS,TransformMatrix,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: j < 4
Magic Number,ExCSS,TransformMatrix,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: i < 4
Magic Number,ExCSS,TransformMatrix,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[0' 2] = m13;
Magic Number,ExCSS,TransformMatrix,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[1' 2] = m23;
Magic Number,ExCSS,TransformMatrix,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[2' 0] = m31;
Magic Number,ExCSS,TransformMatrix,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[2' 1] = m32;
Magic Number,ExCSS,TransformMatrix,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[2' 2] = m33;
Magic Number,ExCSS,TransformMatrix,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[2' 2] = m33;
Magic Number,ExCSS,TransformMatrix,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[0' 3] = tx;
Magic Number,ExCSS,TransformMatrix,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[1' 3] = ty;
Magic Number,ExCSS,TransformMatrix,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[2' 3] = tz;
Magic Number,ExCSS,TransformMatrix,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[2' 3] = tz;
Magic Number,ExCSS,TransformMatrix,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[3' 0] = px;
Magic Number,ExCSS,TransformMatrix,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[3' 1] = py;
Magic Number,ExCSS,TransformMatrix,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[3' 2] = pz;
Magic Number,ExCSS,TransformMatrix,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[3' 2] = pz;
Magic Number,ExCSS,TransformMatrix,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[3' 3] = 1f;
Magic Number,ExCSS,TransformMatrix,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,TransformMatrix,The following statement contains a magic number: _matrix[3' 3] = 1f;
Magic Number,ExCSS,TransformMatrix,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,GetHashCode,The following statement contains a magic number: sum += _matrix[i' j] * (4 * i + j);
Magic Number,ExCSS,TransformMatrix,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,GetHashCode,The following statement contains a magic number: j < 4
Magic Number,ExCSS,TransformMatrix,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\TransformMatrix.cs,GetHashCode,The following statement contains a magic number: i < 4
Magic Number,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseSchemeData,The following statement contains a magic number: (c == Symbols.Percent) && (index + 2 < input.Length) && input[index + 1].IsHex() &&                      input[index + 2].IsHex()
Magic Number,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseSchemeData,The following statement contains a magic number: (c == Symbols.Percent) && (index + 2 < input.Length) && input[index + 1].IsHex() &&                      input[index + 2].IsHex()
Magic Number,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,RelativeState,The following statement contains a magic number: input[index].IsLetter() &&                       _scheme.Is(ProtocolNames.File) &&                       (index + 1 < input.Length) &&                       input[index + 1].IsOneOf(Symbols.Colon' Symbols.Solidus) &&                      ((index + 2 == input.Length) || input[index + 2].IsOneOf(Symbols.Solidus' Symbols.ReverseSolidus' Symbols.Num' Symbols.QuestionMark))
Magic Number,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,RelativeState,The following statement contains a magic number: input[index].IsLetter() &&                       _scheme.Is(ProtocolNames.File) &&                       (index + 1 < input.Length) &&                       input[index + 1].IsOneOf(Symbols.Colon' Symbols.Solidus) &&                      ((index + 2 == input.Length) || input[index + 2].IsOneOf(Symbols.Solidus' Symbols.ReverseSolidus' Symbols.Num' Symbols.QuestionMark))
Magic Number,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseFileHost,The following statement contains a magic number: return ParsePath(input' index - 2);
Magic Number,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseFileHost,The following statement contains a magic number: (length == 2) &&                   input[index - 2].IsLetter() &&                  ((input[index - 1] == Symbols.Pipe) || (input[index - 1] == Symbols.Colon))
Magic Number,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseFileHost,The following statement contains a magic number: (length == 2) &&                   input[index - 2].IsLetter() &&                  ((input[index - 1] == Symbols.Pipe) || (input[index - 1] == Symbols.Colon))
Magic Number,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,Utf8PercentEncode,The following statement contains a magic number: var length = char.IsSurrogatePair(source' index) ? 2 : 1;
Magic Number,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,SanatizeHost,The following statement contains a magic number: var chars = new byte[4*length];
Magic Number,ExCSS,Lexer,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,Data,The following statement contains a magic number: switch (current)              {                  case Symbols.FormFeed:                  case Symbols.LineFeed:                  case Symbols.CarriageReturn:                  case Symbols.Tab:                  case Symbols.Space:                      return NewWhitespace(current);                  case Symbols.DoubleQuote:                      return StringDoubleQuote();                  case Symbols.Num:                      return IsInValue ? ColorLiteral() : HashStart();                  case Symbols.Dollar:                      current = GetNext();                      return current == Symbols.Equality ? NewMatch(Combinators.Ends) : NewDelimiter(GetPrevious());                  case Symbols.SingleQuote:                      return StringSingleQuote();                  case Symbols.RoundBracketOpen:                      return NewOpenRound();                  case Symbols.RoundBracketClose:                      return NewCloseRound();                  case Symbols.Asterisk:                      current = GetNext();                      return current == Symbols.Equality ? NewMatch(Combinators.InText) : NewDelimiter(GetPrevious());                  case Symbols.Plus:                  {                      var c1 = GetNext();                      if (c1 != Symbols.EndOfFile)                      {                          var c2 = GetNext();                          Back(2);                            if (c1.IsDigit() || ((c1 == Symbols.Dot) && c2.IsDigit()))                          {                              return NumberStart(current);                          }                      }                      else                      {                          Back();                      }                      return NewDelimiter(current);                  }                  case Symbols.Comma:                      return NewComma();                    case Symbols.Dot:                  {                      var c = GetNext();                      return c.IsDigit() ? NumberStart(GetPrevious()) : NewDelimiter(GetPrevious());                  }                  case Symbols.Minus:                  {                      var c1 = GetNext();                      if (c1 != Symbols.EndOfFile)                      {                          var c2 = GetNext();                          Back(2);                          if (c1.IsDigit() || ((c1 == Symbols.Dot) && c2.IsDigit()))                          {                              return NumberStart(current);                          }                          if (c1.IsNameStart())                          {                              return IdentStart(current);                          }                          if ((c1 == Symbols.ReverseSolidus) && !c2.IsLineBreak() && (c2 != Symbols.EndOfFile))                          {                              return IdentStart(current);                          }                          if ((c1 != Symbols.Minus) || (c2 != Symbols.GreaterThan))                          {                              return NewDelimiter(current);                          }                            Advance(2);                          return NewCloseComment();                      }                        Back();                                            return NewDelimiter(current);                  }                  case Symbols.Solidus:                      current = GetNext();                      return current == Symbols.Asterisk                           ? Comment()                           : NewDelimiter(GetPrevious());                    case Symbols.ReverseSolidus:                      current = GetNext();                      if (current.IsLineBreak())                      {                          RaiseErrorOccurred(ParseError.LineBreakUnexpected);                          return NewDelimiter(GetPrevious());                      }                      if (current == Symbols.EndOfFile)                      {                          RaiseErrorOccurred(ParseError.EOF);                          return NewDelimiter(GetPrevious());                      }                      return IdentStart(GetPrevious());                  case Symbols.Colon:                      return NewColon();                  case Symbols.Semicolon:                      return NewSemicolon();                  case Symbols.LessThan:                      current = GetNext();                      if (current == Symbols.ExclamationMark)                      {                          current = GetNext();                          if (current == Symbols.Minus)                          {                              current = GetNext();                              if (current == Symbols.Minus)                              {                                  return NewOpenComment();                              }                              current = GetPrevious();                          }                          current = GetPrevious();                      }                      return NewDelimiter(GetPrevious());                  case Symbols.At:                      return AtKeywordStart();                  case Symbols.SquareBracketOpen:                      return NewOpenSquare();                  case Symbols.SquareBracketClose:                      return NewCloseSquare();                  case Symbols.Accent:                      current = GetNext();                      return current == Symbols.Equality                           ? NewMatch(Combinators.Begins)                           : NewDelimiter(GetPrevious());                  case Symbols.CurlyBracketOpen:                      return NewOpenCurly();                  case Symbols.CurlyBracketClose:                      return NewCloseCurly();                  case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                      return NumberStart(current);                  case 'U':                  case 'u':                      current = GetNext();                      if (current == Symbols.Plus)                      {                          current = GetNext();                          if (current.IsHex() || (current == Symbols.QuestionMark))                          {                              return UnicodeRange(current);                          }                          current = GetPrevious();                      }                      return IdentStart(GetPrevious());                  case Symbols.Pipe:                      current = GetNext();                      switch (current)                      {                          case Symbols.Equality:                              return NewMatch(Combinators.InToken);                          case Symbols.Pipe:                              return NewColumn();                      }                      return NewDelimiter(GetPrevious());                    case Symbols.Tilde:                      current = GetNext();                      return current == Symbols.Equality                           ? NewMatch(Combinators.InList)                           : NewDelimiter(GetPrevious());                    case Symbols.EndOfFile:                      return NewEof();                  case Symbols.ExclamationMark:                      current = GetNext();                      return current == Symbols.Equality                           ? NewMatch(Combinators.Unlike)                           : NewDelimiter(GetPrevious());                  default:                      return current.IsNameStart() ? IdentStart(current) : NewDelimiter(current);              }
Magic Number,ExCSS,Lexer,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,Data,The following statement contains a magic number: switch (current)              {                  case Symbols.FormFeed:                  case Symbols.LineFeed:                  case Symbols.CarriageReturn:                  case Symbols.Tab:                  case Symbols.Space:                      return NewWhitespace(current);                  case Symbols.DoubleQuote:                      return StringDoubleQuote();                  case Symbols.Num:                      return IsInValue ? ColorLiteral() : HashStart();                  case Symbols.Dollar:                      current = GetNext();                      return current == Symbols.Equality ? NewMatch(Combinators.Ends) : NewDelimiter(GetPrevious());                  case Symbols.SingleQuote:                      return StringSingleQuote();                  case Symbols.RoundBracketOpen:                      return NewOpenRound();                  case Symbols.RoundBracketClose:                      return NewCloseRound();                  case Symbols.Asterisk:                      current = GetNext();                      return current == Symbols.Equality ? NewMatch(Combinators.InText) : NewDelimiter(GetPrevious());                  case Symbols.Plus:                  {                      var c1 = GetNext();                      if (c1 != Symbols.EndOfFile)                      {                          var c2 = GetNext();                          Back(2);                            if (c1.IsDigit() || ((c1 == Symbols.Dot) && c2.IsDigit()))                          {                              return NumberStart(current);                          }                      }                      else                      {                          Back();                      }                      return NewDelimiter(current);                  }                  case Symbols.Comma:                      return NewComma();                    case Symbols.Dot:                  {                      var c = GetNext();                      return c.IsDigit() ? NumberStart(GetPrevious()) : NewDelimiter(GetPrevious());                  }                  case Symbols.Minus:                  {                      var c1 = GetNext();                      if (c1 != Symbols.EndOfFile)                      {                          var c2 = GetNext();                          Back(2);                          if (c1.IsDigit() || ((c1 == Symbols.Dot) && c2.IsDigit()))                          {                              return NumberStart(current);                          }                          if (c1.IsNameStart())                          {                              return IdentStart(current);                          }                          if ((c1 == Symbols.ReverseSolidus) && !c2.IsLineBreak() && (c2 != Symbols.EndOfFile))                          {                              return IdentStart(current);                          }                          if ((c1 != Symbols.Minus) || (c2 != Symbols.GreaterThan))                          {                              return NewDelimiter(current);                          }                            Advance(2);                          return NewCloseComment();                      }                        Back();                                            return NewDelimiter(current);                  }                  case Symbols.Solidus:                      current = GetNext();                      return current == Symbols.Asterisk                           ? Comment()                           : NewDelimiter(GetPrevious());                    case Symbols.ReverseSolidus:                      current = GetNext();                      if (current.IsLineBreak())                      {                          RaiseErrorOccurred(ParseError.LineBreakUnexpected);                          return NewDelimiter(GetPrevious());                      }                      if (current == Symbols.EndOfFile)                      {                          RaiseErrorOccurred(ParseError.EOF);                          return NewDelimiter(GetPrevious());                      }                      return IdentStart(GetPrevious());                  case Symbols.Colon:                      return NewColon();                  case Symbols.Semicolon:                      return NewSemicolon();                  case Symbols.LessThan:                      current = GetNext();                      if (current == Symbols.ExclamationMark)                      {                          current = GetNext();                          if (current == Symbols.Minus)                          {                              current = GetNext();                              if (current == Symbols.Minus)                              {                                  return NewOpenComment();                              }                              current = GetPrevious();                          }                          current = GetPrevious();                      }                      return NewDelimiter(GetPrevious());                  case Symbols.At:                      return AtKeywordStart();                  case Symbols.SquareBracketOpen:                      return NewOpenSquare();                  case Symbols.SquareBracketClose:                      return NewCloseSquare();                  case Symbols.Accent:                      current = GetNext();                      return current == Symbols.Equality                           ? NewMatch(Combinators.Begins)                           : NewDelimiter(GetPrevious());                  case Symbols.CurlyBracketOpen:                      return NewOpenCurly();                  case Symbols.CurlyBracketClose:                      return NewCloseCurly();                  case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                      return NumberStart(current);                  case 'U':                  case 'u':                      current = GetNext();                      if (current == Symbols.Plus)                      {                          current = GetNext();                          if (current.IsHex() || (current == Symbols.QuestionMark))                          {                              return UnicodeRange(current);                          }                          current = GetPrevious();                      }                      return IdentStart(GetPrevious());                  case Symbols.Pipe:                      current = GetNext();                      switch (current)                      {                          case Symbols.Equality:                              return NewMatch(Combinators.InToken);                          case Symbols.Pipe:                              return NewColumn();                      }                      return NewDelimiter(GetPrevious());                    case Symbols.Tilde:                      current = GetNext();                      return current == Symbols.Equality                           ? NewMatch(Combinators.InList)                           : NewDelimiter(GetPrevious());                    case Symbols.EndOfFile:                      return NewEof();                  case Symbols.ExclamationMark:                      current = GetNext();                      return current == Symbols.Equality                           ? NewMatch(Combinators.Unlike)                           : NewDelimiter(GetPrevious());                  default:                      return current.IsNameStart() ? IdentStart(current) : NewDelimiter(current);              }
Magic Number,ExCSS,Lexer,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,Data,The following statement contains a magic number: switch (current)              {                  case Symbols.FormFeed:                  case Symbols.LineFeed:                  case Symbols.CarriageReturn:                  case Symbols.Tab:                  case Symbols.Space:                      return NewWhitespace(current);                  case Symbols.DoubleQuote:                      return StringDoubleQuote();                  case Symbols.Num:                      return IsInValue ? ColorLiteral() : HashStart();                  case Symbols.Dollar:                      current = GetNext();                      return current == Symbols.Equality ? NewMatch(Combinators.Ends) : NewDelimiter(GetPrevious());                  case Symbols.SingleQuote:                      return StringSingleQuote();                  case Symbols.RoundBracketOpen:                      return NewOpenRound();                  case Symbols.RoundBracketClose:                      return NewCloseRound();                  case Symbols.Asterisk:                      current = GetNext();                      return current == Symbols.Equality ? NewMatch(Combinators.InText) : NewDelimiter(GetPrevious());                  case Symbols.Plus:                  {                      var c1 = GetNext();                      if (c1 != Symbols.EndOfFile)                      {                          var c2 = GetNext();                          Back(2);                            if (c1.IsDigit() || ((c1 == Symbols.Dot) && c2.IsDigit()))                          {                              return NumberStart(current);                          }                      }                      else                      {                          Back();                      }                      return NewDelimiter(current);                  }                  case Symbols.Comma:                      return NewComma();                    case Symbols.Dot:                  {                      var c = GetNext();                      return c.IsDigit() ? NumberStart(GetPrevious()) : NewDelimiter(GetPrevious());                  }                  case Symbols.Minus:                  {                      var c1 = GetNext();                      if (c1 != Symbols.EndOfFile)                      {                          var c2 = GetNext();                          Back(2);                          if (c1.IsDigit() || ((c1 == Symbols.Dot) && c2.IsDigit()))                          {                              return NumberStart(current);                          }                          if (c1.IsNameStart())                          {                              return IdentStart(current);                          }                          if ((c1 == Symbols.ReverseSolidus) && !c2.IsLineBreak() && (c2 != Symbols.EndOfFile))                          {                              return IdentStart(current);                          }                          if ((c1 != Symbols.Minus) || (c2 != Symbols.GreaterThan))                          {                              return NewDelimiter(current);                          }                            Advance(2);                          return NewCloseComment();                      }                        Back();                                            return NewDelimiter(current);                  }                  case Symbols.Solidus:                      current = GetNext();                      return current == Symbols.Asterisk                           ? Comment()                           : NewDelimiter(GetPrevious());                    case Symbols.ReverseSolidus:                      current = GetNext();                      if (current.IsLineBreak())                      {                          RaiseErrorOccurred(ParseError.LineBreakUnexpected);                          return NewDelimiter(GetPrevious());                      }                      if (current == Symbols.EndOfFile)                      {                          RaiseErrorOccurred(ParseError.EOF);                          return NewDelimiter(GetPrevious());                      }                      return IdentStart(GetPrevious());                  case Symbols.Colon:                      return NewColon();                  case Symbols.Semicolon:                      return NewSemicolon();                  case Symbols.LessThan:                      current = GetNext();                      if (current == Symbols.ExclamationMark)                      {                          current = GetNext();                          if (current == Symbols.Minus)                          {                              current = GetNext();                              if (current == Symbols.Minus)                              {                                  return NewOpenComment();                              }                              current = GetPrevious();                          }                          current = GetPrevious();                      }                      return NewDelimiter(GetPrevious());                  case Symbols.At:                      return AtKeywordStart();                  case Symbols.SquareBracketOpen:                      return NewOpenSquare();                  case Symbols.SquareBracketClose:                      return NewCloseSquare();                  case Symbols.Accent:                      current = GetNext();                      return current == Symbols.Equality                           ? NewMatch(Combinators.Begins)                           : NewDelimiter(GetPrevious());                  case Symbols.CurlyBracketOpen:                      return NewOpenCurly();                  case Symbols.CurlyBracketClose:                      return NewCloseCurly();                  case '0':                  case '1':                  case '2':                  case '3':                  case '4':                  case '5':                  case '6':                  case '7':                  case '8':                  case '9':                      return NumberStart(current);                  case 'U':                  case 'u':                      current = GetNext();                      if (current == Symbols.Plus)                      {                          current = GetNext();                          if (current.IsHex() || (current == Symbols.QuestionMark))                          {                              return UnicodeRange(current);                          }                          current = GetPrevious();                      }                      return IdentStart(GetPrevious());                  case Symbols.Pipe:                      current = GetNext();                      switch (current)                      {                          case Symbols.Equality:                              return NewMatch(Combinators.InToken);                          case Symbols.Pipe:                              return NewColumn();                      }                      return NewDelimiter(GetPrevious());                    case Symbols.Tilde:                      current = GetNext();                      return current == Symbols.Equality                           ? NewMatch(Combinators.InList)                           : NewDelimiter(GetPrevious());                    case Symbols.EndOfFile:                      return NewEof();                  case Symbols.ExclamationMark:                      current = GetNext();                      return current == Symbols.Equality                           ? NewMatch(Combinators.Unlike)                           : NewDelimiter(GetPrevious());                  default:                      return current.IsNameStart() ? IdentStart(current) : NewDelimiter(current);              }
Magic Number,ExCSS,Lexer,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,AtKeywordStart,The following statement contains a magic number: Back(2);
Magic Number,ExCSS,Lexer,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,UnicodeRange,The following statement contains a magic number: (i < 6) && current.IsHex()
Magic Number,ExCSS,Lexer,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,UnicodeRange,The following statement contains a magic number: i < 6 - StringBuffer.Length
Magic Number,ExCSS,Lexer,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,UnicodeRange,The following statement contains a magic number: StringBuffer.Length != 6
Magic Number,ExCSS,Lexer,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,UnicodeRange,The following statement contains a magic number: i < 6
Magic Number,ExCSS,Lexer,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,UnicodeRange,The following statement contains a magic number: Back(2);
Magic Number,ExCSS,Lexer,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,NumberDash,The following statement contains a magic number: Back(2);
Magic Number,ExCSS,Lexer,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,ConsumeEscape,The following statement contains a magic number: var escape = new char[6];
Magic Number,ExCSS,ChildFunctionState<T>,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\SelectorConstructor.cs,OnInitial,The following statement contains a magic number: _step = 2;
Magic Number,ExCSS,ChildFunctionState<T>,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\SelectorConstructor.cs,OnInitial,The following statement contains a magic number: _step = 2;
Magic Number,ExCSS,BorderRadiusConverter,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\BorderRadiusConverter.cs,Construct,The following statement contains a magic number: properties.Length == 4
Magic Number,ExCSS,RadialGradientConverter,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\GradientConverter.cs,RadialGradientConverter,The following statement contains a magic number: var ellipse =WithOrder(WithAny(Assign(Keywords.Ellipse' false).Option(false)'                  LengthOrPercentConverter.Many(2' 2).Option())'                  position);
Magic Number,ExCSS,RadialGradientConverter,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\GradientConverter.cs,RadialGradientConverter,The following statement contains a magic number: var ellipse =WithOrder(WithAny(Assign(Keywords.Ellipse' false).Option(false)'                  LengthOrPercentConverter.Many(2' 2).Option())'                  position);
Magic Number,ExCSS,PeriodicValueConverter,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\PeriodicValueConverter.cs,PeriodicValueConverter,The following statement contains a magic number: _labels = labels.Length == 4 ? labels : Enumerable.Repeat(string.Empty' 4).ToArray();
Magic Number,ExCSS,PeriodicValueConverter,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\PeriodicValueConverter.cs,PeriodicValueConverter,The following statement contains a magic number: _labels = labels.Length == 4 ? labels : Enumerable.Repeat(string.Empty' 4).ToArray();
Magic Number,ExCSS,PeriodicValueConverter,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\PeriodicValueConverter.cs,Convert,The following statement contains a magic number: var options = new IPropertyValue[4];
Magic Number,ExCSS,PeriodicValueConverter,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\PeriodicValueConverter.cs,Construct,The following statement contains a magic number: var options = new IPropertyValue[4];
Magic Number,ExCSS,PeriodicValueConverter,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\PeriodicValueConverter.cs,Construct,The following statement contains a magic number: options[2] = _converter.Construct(properties.Where(m => m.Name == _labels[2]).ToArray());
Magic Number,ExCSS,PeriodicValueConverter,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\PeriodicValueConverter.cs,Construct,The following statement contains a magic number: options[2] = _converter.Construct(properties.Where(m => m.Name == _labels[2]).ToArray());
Magic Number,ExCSS,PeriodicValueConverter,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\PeriodicValueConverter.cs,Construct,The following statement contains a magic number: options[3] = _converter.Construct(properties.Where(m => m.Name == _labels[3]).ToArray());
Magic Number,ExCSS,PeriodicValueConverter,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\PeriodicValueConverter.cs,Construct,The following statement contains a magic number: options[3] = _converter.Construct(properties.Where(m => m.Name == _labels[3]).ToArray());
Magic Number,ExCSS,PeriodicValueConverter,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\PeriodicValueConverter.cs,Construct,The following statement contains a magic number: return (options[0] != null) && (options[1] != null) && (options[2] != null) && (options[3] != null)                      ? new PeriodicValue(options' Enumerable.Empty<Token>()' _labels)                      : null;
Magic Number,ExCSS,PeriodicValueConverter,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\PeriodicValueConverter.cs,Construct,The following statement contains a magic number: return (options[0] != null) && (options[1] != null) && (options[2] != null) && (options[3] != null)                      ? new PeriodicValue(options' Enumerable.Empty<Token>()' _labels)                      : null;
Magic Number,ExCSS,PeriodicValueConverter,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\PeriodicValueConverter.cs,Construct,The following statement contains a magic number: properties.Length == 4
Magic Number,ExCSS,PeriodicValue,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\PeriodicValueConverter.cs,PeriodicValue,The following statement contains a magic number: _bottom = options[2] ?? _top;
Magic Number,ExCSS,PeriodicValue,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\PeriodicValueConverter.cs,PeriodicValue,The following statement contains a magic number: _left = options[3] ?? _right;
Magic Number,ExCSS,PeriodicValue,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\PeriodicValueConverter.cs,ExtractFor,The following statement contains a magic number: name.Is(_labels[2])
Magic Number,ExCSS,PeriodicValue,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\PeriodicValueConverter.cs,ExtractFor,The following statement contains a magic number: name.Is(_labels[3])
Magic Number,ExCSS,StringsValueConverter,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\ValueConverters\StringsValueConverter.cs,Convert,The following statement contains a magic number: n % 2 == 0
Magic Number,ExCSS,Angle,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Angle.cs,ToRadian,The following statement contains a magic number: switch (Type)              {                  case Unit.Deg:                      return (float) (Math.PI/180.0*Value);                    case Unit.Grad:                      return (float) (Math.PI/200.0*Value);                    case Unit.Turn:                      return (float) (2.0*Math.PI*Value);                    default:                      return Value;              }
Magic Number,ExCSS,Angle,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Angle.cs,ToRadian,The following statement contains a magic number: switch (Type)              {                  case Unit.Deg:                      return (float) (Math.PI/180.0*Value);                    case Unit.Grad:                      return (float) (Math.PI/200.0*Value);                    case Unit.Turn:                      return (float) (2.0*Math.PI*Value);                    default:                      return Value;              }
Magic Number,ExCSS,Angle,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Angle.cs,ToRadian,The following statement contains a magic number: switch (Type)              {                  case Unit.Deg:                      return (float) (Math.PI/180.0*Value);                    case Unit.Grad:                      return (float) (Math.PI/200.0*Value);                    case Unit.Turn:                      return (float) (2.0*Math.PI*Value);                    default:                      return Value;              }
Magic Number,ExCSS,Angle,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Angle.cs,ToTurns,The following statement contains a magic number: switch (Type)              {                  case Unit.Deg:                      return (float) (Value/360.0);                    case Unit.Grad:                      return (float) (Value/400.0);                    case Unit.Rad:                      return (float) (Value/(2.0*Math.PI));                    default:                      return Value;              }
Magic Number,ExCSS,Angle,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Angle.cs,ToTurns,The following statement contains a magic number: switch (Type)              {                  case Unit.Deg:                      return (float) (Value/360.0);                    case Unit.Grad:                      return (float) (Value/400.0);                    case Unit.Rad:                      return (float) (Value/(2.0*Math.PI));                    default:                      return Value;              }
Magic Number,ExCSS,Angle,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Angle.cs,ToTurns,The following statement contains a magic number: switch (Type)              {                  case Unit.Deg:                      return (float) (Value/360.0);                    case Unit.Grad:                      return (float) (Value/400.0);                    case Unit.Rad:                      return (float) (Value/(2.0*Math.PI));                    default:                      return Value;              }
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,Color,The following statement contains a magic number: _alpha = 255;
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: int r = 0' g = 0' b = 0' a = 255;
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following statement contains a magic number: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,TryFromHex,The following statement contains a magic number: (color.Length == 6) || (color.Length == 3) || (color.Length == 8) || (color.Length == 4)
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,TryFromHex,The following statement contains a magic number: (color.Length == 6) || (color.Length == 3) || (color.Length == 8) || (color.Length == 4)
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,TryFromHex,The following statement contains a magic number: (color.Length == 6) || (color.Length == 3) || (color.Length == 8) || (color.Length == 4)
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,TryFromHex,The following statement contains a magic number: (color.Length == 6) || (color.Length == 3) || (color.Length == 8) || (color.Length == 4)
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromFlexHex,The following statement contains a magic number: var length = Math.Max(color.Length' 3);
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromFlexHex,The following statement contains a magic number: var remaining = length%3;
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromFlexHex,The following statement contains a magic number: length += 3 - remaining;
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromFlexHex,The following statement contains a magic number: var n = length/3;
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromFlexHex,The following statement contains a magic number: var d = Math.Min(2' n);
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromFlexHex,The following statement contains a magic number: var s = Math.Max(n - 8' 0);
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromFlexHex,The following statement contains a magic number: var b = chars[2*n + s].FromHex();
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHsla,The following statement contains a magic number: const float third = 1f/3f;
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHsla,The following statement contains a magic number: var m2 = luminosity <= 0.5f ? luminosity * (saturation + 1f)                   : luminosity + saturation - luminosity * saturation;
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHsla,The following statement contains a magic number: var m1 = 2f * luminosity - m2;
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHwba,The following statement contains a magic number: var p = (int) (6*hue);
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHwba,The following statement contains a magic number: var f = 6*hue - p;
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHwba,The following statement contains a magic number: switch (p)              {                  default:                  case 6:                  case 0:                      red = v;                      green = n;                      blue = whiteness;                      break;                  case 1:                      red = n;                      green = v;                      blue = whiteness;                      break;                  case 2:                      red = whiteness;                      green = v;                      blue = n;                      break;                  case 3:                      red = whiteness;                      green = n;                      blue = v;                      break;                  case 4:                      red = n;                      green = whiteness;                      blue = v;                      break;                  case 5:                      red = v;                      green = whiteness;                      blue = n;                      break;              }
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHwba,The following statement contains a magic number: switch (p)              {                  default:                  case 6:                  case 0:                      red = v;                      green = n;                      blue = whiteness;                      break;                  case 1:                      red = n;                      green = v;                      blue = whiteness;                      break;                  case 2:                      red = whiteness;                      green = v;                      blue = n;                      break;                  case 3:                      red = whiteness;                      green = n;                      blue = v;                      break;                  case 4:                      red = n;                      green = whiteness;                      blue = v;                      break;                  case 5:                      red = v;                      green = whiteness;                      blue = n;                      break;              }
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHwba,The following statement contains a magic number: switch (p)              {                  default:                  case 6:                  case 0:                      red = v;                      green = n;                      blue = whiteness;                      break;                  case 1:                      red = n;                      green = v;                      blue = whiteness;                      break;                  case 2:                      red = whiteness;                      green = v;                      blue = n;                      break;                  case 3:                      red = whiteness;                      green = n;                      blue = v;                      break;                  case 4:                      red = n;                      green = whiteness;                      blue = v;                      break;                  case 5:                      red = v;                      green = whiteness;                      blue = n;                      break;              }
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHwba,The following statement contains a magic number: switch (p)              {                  default:                  case 6:                  case 0:                      red = v;                      green = n;                      blue = whiteness;                      break;                  case 1:                      red = n;                      green = v;                      blue = whiteness;                      break;                  case 2:                      red = whiteness;                      green = v;                      blue = n;                      break;                  case 3:                      red = whiteness;                      green = n;                      blue = v;                      break;                  case 4:                      red = n;                      green = whiteness;                      blue = v;                      break;                  case 5:                      red = v;                      green = whiteness;                      blue = n;                      break;              }
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHwba,The following statement contains a magic number: switch (p)              {                  default:                  case 6:                  case 0:                      red = v;                      green = n;                      blue = whiteness;                      break;                  case 1:                      red = n;                      green = v;                      blue = whiteness;                      break;                  case 2:                      red = whiteness;                      green = v;                      blue = n;                      break;                  case 3:                      red = whiteness;                      green = n;                      blue = v;                      break;                  case 4:                      red = n;                      green = whiteness;                      blue = v;                      break;                  case 5:                      red = v;                      green = whiteness;                      blue = n;                      break;              }
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,Normalize,The following statement contains a magic number: return (byte) Math.Max(Math.Min(Math.Round(255*value)' 255)' 0);
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,Normalize,The following statement contains a magic number: return (byte) Math.Max(Math.Min(Math.Round(255*value)' 255)' 0);
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,Convert,The following statement contains a magic number: return (byte) Math.Round(255f*value);
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,HueToRgb,The following statement contains a magic number: const float oneSixth = 1f/6f;
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,HueToRgb,The following statement contains a magic number: const float twoThird = 2f/3f;
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,HueToRgb,The following statement contains a magic number: const float twoThird = 2f/3f;
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,HueToRgb,The following statement contains a magic number: return m1 + (m2 - m1)*h*6f;
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,HueToRgb,The following statement contains a magic number: h < 0.5
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,HueToRgb,The following statement contains a magic number: return m1 + (m2 - m1)*(twoThird - h)*6f;
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,ToString,The following statement contains a magic number: _alpha == 255
Magic Number,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,ToString,The following statement contains a magic number: _alpha == 255
Magic Number,ExCSS,Frequency,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Frequency.cs,ToHertz,The following statement contains a magic number: return Type == Unit.Khz ? Value*1000f : Value;
Magic Number,ExCSS,Length,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Length.cs,ToPixel,The following statement contains a magic number: switch (Type)              {                  case Unit.In: // 1 in = 2.54 cm                      return Value*96f;                  case Unit.Mm: // 1 mm = 0.1 cm                      return Value*5f*96f/127f;                  case Unit.Pc: // 1 pc = 12 pt                      return Value*12f*96f/72f;                  case Unit.Pt: // 1 pt = 1/72 in                      return Value*96f/72f;                  case Unit.Cm: // 1 cm = 50/127 in                      return Value*50f*96f/127f;                  case Unit.Px: // 1 px = 1/96 in                      return Value;                  default:                      throw new InvalidOperationException("A relative unit cannot be converted.");              }
Magic Number,ExCSS,Length,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Length.cs,ToPixel,The following statement contains a magic number: switch (Type)              {                  case Unit.In: // 1 in = 2.54 cm                      return Value*96f;                  case Unit.Mm: // 1 mm = 0.1 cm                      return Value*5f*96f/127f;                  case Unit.Pc: // 1 pc = 12 pt                      return Value*12f*96f/72f;                  case Unit.Pt: // 1 pt = 1/72 in                      return Value*96f/72f;                  case Unit.Cm: // 1 cm = 50/127 in                      return Value*50f*96f/127f;                  case Unit.Px: // 1 px = 1/96 in                      return Value;                  default:                      throw new InvalidOperationException("A relative unit cannot be converted.");              }
Magic Number,ExCSS,Length,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Length.cs,ToPixel,The following statement contains a magic number: switch (Type)              {                  case Unit.In: // 1 in = 2.54 cm                      return Value*96f;                  case Unit.Mm: // 1 mm = 0.1 cm                      return Value*5f*96f/127f;                  case Unit.Pc: // 1 pc = 12 pt                      return Value*12f*96f/72f;                  case Unit.Pt: // 1 pt = 1/72 in                      return Value*96f/72f;                  case Unit.Cm: // 1 cm = 50/127 in                      return Value*50f*96f/127f;                  case Unit.Px: // 1 px = 1/96 in                      return Value;                  default:                      throw new InvalidOperationException("A relative unit cannot be converted.");              }
Magic Number,ExCSS,Length,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Length.cs,ToPixel,The following statement contains a magic number: switch (Type)              {                  case Unit.In: // 1 in = 2.54 cm                      return Value*96f;                  case Unit.Mm: // 1 mm = 0.1 cm                      return Value*5f*96f/127f;                  case Unit.Pc: // 1 pc = 12 pt                      return Value*12f*96f/72f;                  case Unit.Pt: // 1 pt = 1/72 in                      return Value*96f/72f;                  case Unit.Cm: // 1 cm = 50/127 in                      return Value*50f*96f/127f;                  case Unit.Px: // 1 px = 1/96 in                      return Value;                  default:                      throw new InvalidOperationException("A relative unit cannot be converted.");              }
Magic Number,ExCSS,Length,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Length.cs,ToPixel,The following statement contains a magic number: switch (Type)              {                  case Unit.In: // 1 in = 2.54 cm                      return Value*96f;                  case Unit.Mm: // 1 mm = 0.1 cm                      return Value*5f*96f/127f;                  case Unit.Pc: // 1 pc = 12 pt                      return Value*12f*96f/72f;                  case Unit.Pt: // 1 pt = 1/72 in                      return Value*96f/72f;                  case Unit.Cm: // 1 cm = 50/127 in                      return Value*50f*96f/127f;                  case Unit.Px: // 1 px = 1/96 in                      return Value;                  default:                      throw new InvalidOperationException("A relative unit cannot be converted.");              }
Magic Number,ExCSS,Length,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Length.cs,ToPixel,The following statement contains a magic number: switch (Type)              {                  case Unit.In: // 1 in = 2.54 cm                      return Value*96f;                  case Unit.Mm: // 1 mm = 0.1 cm                      return Value*5f*96f/127f;                  case Unit.Pc: // 1 pc = 12 pt                      return Value*12f*96f/72f;                  case Unit.Pt: // 1 pt = 1/72 in                      return Value*96f/72f;                  case Unit.Cm: // 1 cm = 50/127 in                      return Value*50f*96f/127f;                  case Unit.Px: // 1 px = 1/96 in                      return Value;                  default:                      throw new InvalidOperationException("A relative unit cannot be converted.");              }
Magic Number,ExCSS,Length,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Length.cs,ToPixel,The following statement contains a magic number: switch (Type)              {                  case Unit.In: // 1 in = 2.54 cm                      return Value*96f;                  case Unit.Mm: // 1 mm = 0.1 cm                      return Value*5f*96f/127f;                  case Unit.Pc: // 1 pc = 12 pt                      return Value*12f*96f/72f;                  case Unit.Pt: // 1 pt = 1/72 in                      return Value*96f/72f;                  case Unit.Cm: // 1 cm = 50/127 in                      return Value*50f*96f/127f;                  case Unit.Px: // 1 px = 1/96 in                      return Value;                  default:                      throw new InvalidOperationException("A relative unit cannot be converted.");              }
Magic Number,ExCSS,Length,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Length.cs,ToPixel,The following statement contains a magic number: switch (Type)              {                  case Unit.In: // 1 in = 2.54 cm                      return Value*96f;                  case Unit.Mm: // 1 mm = 0.1 cm                      return Value*5f*96f/127f;                  case Unit.Pc: // 1 pc = 12 pt                      return Value*12f*96f/72f;                  case Unit.Pt: // 1 pt = 1/72 in                      return Value*96f/72f;                  case Unit.Cm: // 1 cm = 50/127 in                      return Value*50f*96f/127f;                  case Unit.Px: // 1 px = 1/96 in                      return Value;                  default:                      throw new InvalidOperationException("A relative unit cannot be converted.");              }
Magic Number,ExCSS,Length,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Length.cs,ToPixel,The following statement contains a magic number: switch (Type)              {                  case Unit.In: // 1 in = 2.54 cm                      return Value*96f;                  case Unit.Mm: // 1 mm = 0.1 cm                      return Value*5f*96f/127f;                  case Unit.Pc: // 1 pc = 12 pt                      return Value*12f*96f/72f;                  case Unit.Pt: // 1 pt = 1/72 in                      return Value*96f/72f;                  case Unit.Cm: // 1 cm = 50/127 in                      return Value*50f*96f/127f;                  case Unit.Px: // 1 px = 1/96 in                      return Value;                  default:                      throw new InvalidOperationException("A relative unit cannot be converted.");              }
Magic Number,ExCSS,Length,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Length.cs,ToPixel,The following statement contains a magic number: switch (Type)              {                  case Unit.In: // 1 in = 2.54 cm                      return Value*96f;                  case Unit.Mm: // 1 mm = 0.1 cm                      return Value*5f*96f/127f;                  case Unit.Pc: // 1 pc = 12 pt                      return Value*12f*96f/72f;                  case Unit.Pt: // 1 pt = 1/72 in                      return Value*96f/72f;                  case Unit.Cm: // 1 cm = 50/127 in                      return Value*50f*96f/127f;                  case Unit.Px: // 1 px = 1/96 in                      return Value;                  default:                      throw new InvalidOperationException("A relative unit cannot be converted.");              }
Magic Number,ExCSS,Length,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Length.cs,ToPixel,The following statement contains a magic number: switch (Type)              {                  case Unit.In: // 1 in = 2.54 cm                      return Value*96f;                  case Unit.Mm: // 1 mm = 0.1 cm                      return Value*5f*96f/127f;                  case Unit.Pc: // 1 pc = 12 pt                      return Value*12f*96f/72f;                  case Unit.Pt: // 1 pt = 1/72 in                      return Value*96f/72f;                  case Unit.Cm: // 1 cm = 50/127 in                      return Value*50f*96f/127f;                  case Unit.Px: // 1 px = 1/96 in                      return Value;                  default:                      throw new InvalidOperationException("A relative unit cannot be converted.");              }
Magic Number,ExCSS,Length,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Length.cs,ToPixel,The following statement contains a magic number: switch (Type)              {                  case Unit.In: // 1 in = 2.54 cm                      return Value*96f;                  case Unit.Mm: // 1 mm = 0.1 cm                      return Value*5f*96f/127f;                  case Unit.Pc: // 1 pc = 12 pt                      return Value*12f*96f/72f;                  case Unit.Pt: // 1 pt = 1/72 in                      return Value*96f/72f;                  case Unit.Cm: // 1 cm = 50/127 in                      return Value*50f*96f/127f;                  case Unit.Px: // 1 px = 1/96 in                      return Value;                  default:                      throw new InvalidOperationException("A relative unit cannot be converted.");              }
Magic Number,ExCSS,Length,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Length.cs,To,The following statement contains a magic number: switch (unit)              {                  case Unit.In: // 1 in = 2.54 cm                      return value/96f;                  case Unit.Mm: // 1 mm = 0.1 cm                      return value*127f/(5f*96f);                  case Unit.Pc: // 1 pc = 12 pt                      return value*72f/(12f*96f);                  case Unit.Pt: // 1 pt = 1/72 in                      return value*72f/96f;                  case Unit.Cm: // 1 cm = 50/127 in                      return value*127f/(50f*96f);                  case Unit.Px: // 1 px = 1/96 in                      return value;                  default:                      throw new InvalidOperationException("An absolute unit cannot be converted to a relative one.");              }
Magic Number,ExCSS,Length,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Length.cs,To,The following statement contains a magic number: switch (unit)              {                  case Unit.In: // 1 in = 2.54 cm                      return value/96f;                  case Unit.Mm: // 1 mm = 0.1 cm                      return value*127f/(5f*96f);                  case Unit.Pc: // 1 pc = 12 pt                      return value*72f/(12f*96f);                  case Unit.Pt: // 1 pt = 1/72 in                      return value*72f/96f;                  case Unit.Cm: // 1 cm = 50/127 in                      return value*127f/(50f*96f);                  case Unit.Px: // 1 px = 1/96 in                      return value;                  default:                      throw new InvalidOperationException("An absolute unit cannot be converted to a relative one.");              }
Magic Number,ExCSS,Length,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Length.cs,To,The following statement contains a magic number: switch (unit)              {                  case Unit.In: // 1 in = 2.54 cm                      return value/96f;                  case Unit.Mm: // 1 mm = 0.1 cm                      return value*127f/(5f*96f);                  case Unit.Pc: // 1 pc = 12 pt                      return value*72f/(12f*96f);                  case Unit.Pt: // 1 pt = 1/72 in                      return value*72f/96f;                  case Unit.Cm: // 1 cm = 50/127 in                      return value*127f/(50f*96f);                  case Unit.Px: // 1 px = 1/96 in                      return value;                  default:                      throw new InvalidOperationException("An absolute unit cannot be converted to a relative one.");              }
Magic Number,ExCSS,Length,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Length.cs,To,The following statement contains a magic number: switch (unit)              {                  case Unit.In: // 1 in = 2.54 cm                      return value/96f;                  case Unit.Mm: // 1 mm = 0.1 cm                      return value*127f/(5f*96f);                  case Unit.Pc: // 1 pc = 12 pt                      return value*72f/(12f*96f);                  case Unit.Pt: // 1 pt = 1/72 in                      return value*72f/96f;                  case Unit.Cm: // 1 cm = 50/127 in                      return value*127f/(50f*96f);                  case Unit.Px: // 1 px = 1/96 in                      return value;                  default:                      throw new InvalidOperationException("An absolute unit cannot be converted to a relative one.");              }
Magic Number,ExCSS,Length,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Length.cs,To,The following statement contains a magic number: switch (unit)              {                  case Unit.In: // 1 in = 2.54 cm                      return value/96f;                  case Unit.Mm: // 1 mm = 0.1 cm                      return value*127f/(5f*96f);                  case Unit.Pc: // 1 pc = 12 pt                      return value*72f/(12f*96f);                  case Unit.Pt: // 1 pt = 1/72 in                      return value*72f/96f;                  case Unit.Cm: // 1 cm = 50/127 in                      return value*127f/(50f*96f);                  case Unit.Px: // 1 px = 1/96 in                      return value;                  default:                      throw new InvalidOperationException("An absolute unit cannot be converted to a relative one.");              }
Magic Number,ExCSS,Length,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Length.cs,To,The following statement contains a magic number: switch (unit)              {                  case Unit.In: // 1 in = 2.54 cm                      return value/96f;                  case Unit.Mm: // 1 mm = 0.1 cm                      return value*127f/(5f*96f);                  case Unit.Pc: // 1 pc = 12 pt                      return value*72f/(12f*96f);                  case Unit.Pt: // 1 pt = 1/72 in                      return value*72f/96f;                  case Unit.Cm: // 1 cm = 50/127 in                      return value*127f/(50f*96f);                  case Unit.Px: // 1 px = 1/96 in                      return value;                  default:                      throw new InvalidOperationException("An absolute unit cannot be converted to a relative one.");              }
Magic Number,ExCSS,Length,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Length.cs,To,The following statement contains a magic number: switch (unit)              {                  case Unit.In: // 1 in = 2.54 cm                      return value/96f;                  case Unit.Mm: // 1 mm = 0.1 cm                      return value*127f/(5f*96f);                  case Unit.Pc: // 1 pc = 12 pt                      return value*72f/(12f*96f);                  case Unit.Pt: // 1 pt = 1/72 in                      return value*72f/96f;                  case Unit.Cm: // 1 cm = 50/127 in                      return value*127f/(50f*96f);                  case Unit.Px: // 1 px = 1/96 in                      return value;                  default:                      throw new InvalidOperationException("An absolute unit cannot be converted to a relative one.");              }
Magic Number,ExCSS,Length,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Length.cs,To,The following statement contains a magic number: switch (unit)              {                  case Unit.In: // 1 in = 2.54 cm                      return value/96f;                  case Unit.Mm: // 1 mm = 0.1 cm                      return value*127f/(5f*96f);                  case Unit.Pc: // 1 pc = 12 pt                      return value*72f/(12f*96f);                  case Unit.Pt: // 1 pt = 1/72 in                      return value*72f/96f;                  case Unit.Cm: // 1 cm = 50/127 in                      return value*127f/(50f*96f);                  case Unit.Px: // 1 px = 1/96 in                      return value;                  default:                      throw new InvalidOperationException("An absolute unit cannot be converted to a relative one.");              }
Magic Number,ExCSS,Length,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Length.cs,To,The following statement contains a magic number: switch (unit)              {                  case Unit.In: // 1 in = 2.54 cm                      return value/96f;                  case Unit.Mm: // 1 mm = 0.1 cm                      return value*127f/(5f*96f);                  case Unit.Pc: // 1 pc = 12 pt                      return value*72f/(12f*96f);                  case Unit.Pt: // 1 pt = 1/72 in                      return value*72f/96f;                  case Unit.Cm: // 1 cm = 50/127 in                      return value*127f/(50f*96f);                  case Unit.Px: // 1 px = 1/96 in                      return value;                  default:                      throw new InvalidOperationException("An absolute unit cannot be converted to a relative one.");              }
Magic Number,ExCSS,Length,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Length.cs,To,The following statement contains a magic number: switch (unit)              {                  case Unit.In: // 1 in = 2.54 cm                      return value/96f;                  case Unit.Mm: // 1 mm = 0.1 cm                      return value*127f/(5f*96f);                  case Unit.Pc: // 1 pc = 12 pt                      return value*72f/(12f*96f);                  case Unit.Pt: // 1 pt = 1/72 in                      return value*72f/96f;                  case Unit.Cm: // 1 cm = 50/127 in                      return value*127f/(50f*96f);                  case Unit.Px: // 1 px = 1/96 in                      return value;                  default:                      throw new InvalidOperationException("An absolute unit cannot be converted to a relative one.");              }
Magic Number,ExCSS,Length,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Length.cs,To,The following statement contains a magic number: switch (unit)              {                  case Unit.In: // 1 in = 2.54 cm                      return value/96f;                  case Unit.Mm: // 1 mm = 0.1 cm                      return value*127f/(5f*96f);                  case Unit.Pc: // 1 pc = 12 pt                      return value*72f/(12f*96f);                  case Unit.Pt: // 1 pt = 1/72 in                      return value*72f/96f;                  case Unit.Cm: // 1 cm = 50/127 in                      return value*127f/(50f*96f);                  case Unit.Px: // 1 px = 1/96 in                      return value;                  default:                      throw new InvalidOperationException("An absolute unit cannot be converted to a relative one.");              }
Magic Number,ExCSS,Length,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Length.cs,To,The following statement contains a magic number: switch (unit)              {                  case Unit.In: // 1 in = 2.54 cm                      return value/96f;                  case Unit.Mm: // 1 mm = 0.1 cm                      return value*127f/(5f*96f);                  case Unit.Pc: // 1 pc = 12 pt                      return value*72f/(12f*96f);                  case Unit.Pt: // 1 pt = 1/72 in                      return value*72f/96f;                  case Unit.Cm: // 1 cm = 50/127 in                      return value*127f/(50f*96f);                  case Unit.Px: // 1 px = 1/96 in                      return value;                  default:                      throw new InvalidOperationException("An absolute unit cannot be converted to a relative one.");              }
Magic Number,ExCSS,Resolution,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Resolution.cs,ToDotsPerPixel,The following statement contains a magic number: return Value/96f;
Magic Number,ExCSS,Resolution,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Resolution.cs,ToDotsPerPixel,The following statement contains a magic number: return Value*127f/(50f*96f);
Magic Number,ExCSS,Resolution,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Resolution.cs,ToDotsPerPixel,The following statement contains a magic number: return Value*127f/(50f*96f);
Magic Number,ExCSS,Resolution,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Resolution.cs,ToDotsPerPixel,The following statement contains a magic number: return Value*127f/(50f*96f);
Magic Number,ExCSS,Resolution,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Resolution.cs,To,The following statement contains a magic number: return value*96f;
Magic Number,ExCSS,Resolution,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Resolution.cs,To,The following statement contains a magic number: return value*50f*96f/127f;
Magic Number,ExCSS,Resolution,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Resolution.cs,To,The following statement contains a magic number: return value*50f*96f/127f;
Magic Number,ExCSS,Resolution,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Resolution.cs,To,The following statement contains a magic number: return value*50f*96f/127f;
Magic Number,ExCSS,Time,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Time.cs,ToMilliseconds,The following statement contains a magic number: return Type == Unit.S ? Value*1000f : Value;
Missing Default,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,RelativeState,The following switch statement is missing a default case: switch (input[index])                  {                      case Symbols.QuestionMark:                          return ParseQuery(input' index + 1);                        case Symbols.Num:                          return ParseFragment(input' index + 1);                        case Symbols.Solidus:                      case Symbols.ReverseSolidus:                          if (index == input.Length - 1)                          {                              return ParsePath(input' index);                          }                            var c = input[++index];                            if (c.IsOneOf(Symbols.Solidus' Symbols.ReverseSolidus))                          {                              return _scheme.Is(ProtocolNames.File)                                   ? ParseFileHost(input' index + 1)                                   : IgnoreSlashesState(input' index + 1);                          }                            if (!_scheme.Is(ProtocolNames.File))                          {                              return ParsePath(input' index - 1);                          }                            _host = string.Empty;                          _port = string.Empty;                            return ParsePath(input' index - 1);                  }
Missing Default,ExCSS,Url,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Model\Url.cs,ParseHostName,The following switch statement is missing a default case: switch (c)                  {                      case Symbols.SquareBracketClose:                          inBracket = false;                          break;                        case Symbols.SquareBracketOpen:                          inBracket = true;                          break;                        case Symbols.Colon:                          if (inBracket)                              break;                            _host = SanatizeHost(input' start' index - start);                            if (!onlyHost)                          {                              return ParsePort(input' index + 1' onlyPort);                          }                            return true;                        case Symbols.Solidus:                      case Symbols.ReverseSolidus:                      case Symbols.Num:                      case Symbols.QuestionMark:                          _host = SanatizeHost(input' start' index - start);                          var error = string.IsNullOrEmpty(_host);                            if (!onlyHost)                          {                              return ParsePath(input' index) && !error;                          }                            return !error;                  }
Missing Default,ExCSS,Lexer,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,Data,The following switch statement is missing a default case: switch (current)                      {                          case Symbols.Equality:                              return NewMatch(Combinators.InToken);                          case Symbols.Pipe:                              return NewColumn();                      }
Missing Default,ExCSS,Lexer,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\Lexer.cs,UrlSingleQuote,The following switch statement is missing a default case: switch (current)                  {                      case Symbols.EndOfFile:                          return NewUrl(functionName' FlushBuffer());                      case Symbols.SingleQuote:                          return UrlEnd(functionName);                  }
Missing Default,ExCSS,SelectorConstructor,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\SelectorConstructor.cs,OnPseudoClass,The following switch statement is missing a default case: switch (token.Type)              {                  case TokenType.Colon:                      _state = State.PseudoElement;                      return;                  case TokenType.Function:                  {                      var sel = GetPseudoFunction(token as FunctionToken);                      if (sel != null)                      {                          Insert(sel);                          return;                      }                  }                      break;                  case TokenType.Ident:                  {                      var sel = _pseudoClassSelector.Create(token.Data);                      if (sel != null)                      {                          Insert(sel);                          return;                      }                  }                      break;              }
Missing Default,ExCSS,StylesheetComposer,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Parser\StylesheetComposer.cs,CreateUnknown,The following switch statement is missing a default case: switch (token.Type)                          {                              case TokenType.CurlyBracketOpen:                                  curly++;                                  break;                              case TokenType.CurlyBracketClose:                                  curly--;                                  break;                              case TokenType.EndOfFile:                                  curly = 0;                                  break;                          }
Missing Default,ExCSS,Color,D:\research\architectureSmells\repos1\TylerBrinks_ExCSS\src\ExCSS\Values\Color.cs,FromHex,The following switch statement is missing a default case: switch (color.Length)              {                  case 4:                      a = 17*color[3].FromHex();                      goto case 3;                  case 3:                      r = 17*color[0].FromHex();                      g = 17*color[1].FromHex();                      b = 17*color[2].FromHex();                      break;                  case 8:                      a = 16*color[6].FromHex() + color[7].FromHex();                      goto case 6;                  case 6:                      r = 16*color[0].FromHex() + color[1].FromHex();                      g = 16*color[2].FromHex() + color[3].FromHex();                      b = 16*color[4].FromHex() + color[5].FromHex();                      break;              }
