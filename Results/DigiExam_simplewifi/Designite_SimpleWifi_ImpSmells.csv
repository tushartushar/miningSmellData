Implementation smell,Namespace,Class,File,Method,Description
Complex Method,SimpleWifi,PasswordHelper,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\AuthRequest.cs,IsValid,Cyclomatic complexity of the method is 10
Complex Method,SimpleWifi,ProfileFactory,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\ProfileFactory.cs,Generate,Cyclomatic complexity of the method is 18
Long Parameter List,SimpleWifi.Win32.Interop,WlanInterop,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\Interop\Interop.cs,WlanQueryInterface,The method has 7 parameters.
Long Parameter List,SimpleWifi.Win32.Interop,WlanInterop,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\Interop\Interop.cs,WlanSetInterface,The method has 6 parameters.
Long Parameter List,SimpleWifi.Win32.Interop,WlanInterop,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\Interop\Interop.cs,WlanScan,The method has 5 parameters.
Long Parameter List,SimpleWifi.Win32.Interop,WlanInterop,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\Interop\Interop.cs,WlanGetAvailableNetworkList,The method has 5 parameters.
Long Parameter List,SimpleWifi.Win32.Interop,WlanInterop,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\Interop\Interop.cs,WlanSetProfile,The method has 8 parameters.
Long Parameter List,SimpleWifi.Win32.Interop,WlanInterop,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\Interop\Interop.cs,WlanGetProfile,The method has 7 parameters.
Long Parameter List,SimpleWifi.Win32.Interop,WlanInterop,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\Interop\Interop.cs,WlanRegisterNotification,The method has 7 parameters.
Long Parameter List,SimpleWifi.Win32.Interop,WlanInterop,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\Interop\Interop.cs,WlanGetNetworkBssList,The method has 7 parameters.
Long Parameter List,SimpleWifi.Win32.Interop,WlanInterop,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\Interop\Interop.cs,WlanSetProfileEapXmlUserData,The method has 6 parameters.
Long Identifier,SimpleWifi,Wifi,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Wifi.cs,GetAccessPoints,The length of the parameter anotherInstanceWithProfileExists is 32.
Long Statement,SimpleWifi,EapUserFactory,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\EapUserFactory.cs,GetTemplate,The length of the statement  "	using (StreamReader reader = new StreamReader (Assembly.GetExecutingAssembly ().GetManifestResourceStream (resourceName))) { " is 124.
Long Statement,SimpleWifi,ProfileFactory,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\ProfileFactory.cs,GetTemplate,The length of the statement  "	using (StreamReader reader = new StreamReader (Assembly.GetExecutingAssembly ().GetManifestResourceStream (resourceName))) { " is 124.
Long Statement,SimpleWifi,Wifi,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Wifi.cs,GetAccessPoints,The length of the statement  "			bool anotherInstanceWithProfileExists = rawNetworks.Where (n => n.Equals (network) && !string.IsNullOrEmpty (n.profileName)).Any (); " is 132.
Long Statement,SimpleWifi,Wifi,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Wifi.cs,inte_WlanNotification,The length of the statement  "	if (notifyData.notificationSource == WlanNotificationSource.ACM && (NotifCodeACM)notifyData.NotificationCode == NotifCodeACM.Disconnected) " is 138.
Long Statement,SimpleWifi,Wifi,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Wifi.cs,inte_WlanNotification,The length of the statement  "	else if (notifyData.notificationSource == WlanNotificationSource.MSM && (NotifCodeMSM)notifyData.NotificationCode == NotifCodeMSM.Connected) " is 140.
Long Statement,SimpleWifi.Win32.Helpers,WlanHelpers,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\Helpers\WlanHelpers.cs,ParseWlanConnectionNotification,The length of the statement  "	WlanConnectionNotificationData connNotifyData = (WlanConnectionNotificationData)Marshal.PtrToStructure (notifyData.dataPtr' typeof(WlanConnectionNotificationData)); " is 164.
Long Statement,SimpleWifi.Win32.Helpers,WlanHelpers,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\Helpers\WlanHelpers.cs,ParseWlanConnectionNotification,The length of the statement  "		long profileXmlPtrValue = notifyData.dataPtr.ToInt64 () + Marshal.OffsetOf (typeof(WlanConnectionNotificationData)' "profileXml").ToInt64 (); " is 141.
Long Statement,SimpleWifi.Win32.Interop,WlanAvailableNetwork,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\Interop\Structs.cs,Equals,The length of the statement  "	return this.dot11Ssid.SSIDLength == network.dot11Ssid.SSIDLength && this.dot11Ssid.SSID.SequenceEqual (network.dot11Ssid.SSID); " is 127.
Long Statement,SimpleWifi.Win32,WlanInterface,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\WlanInterface.cs,Scan,The length of the statement  "	WlanInterop.ThrowIfError (WlanInterop.WlanScan (client.clientHandle' info.interfaceGuid' IntPtr.Zero' IntPtr.Zero' IntPtr.Zero)); " is 129.
Long Statement,SimpleWifi.Win32,WlanInterface,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\WlanInterface.cs,ConvertAvailableNetworkListPtr,The length of the statement  "	WlanAvailableNetworkListHeader availNetListHeader = (WlanAvailableNetworkListHeader)Marshal.PtrToStructure (availNetListPtr' typeof(WlanAvailableNetworkListHeader)); " is 165.
Long Statement,SimpleWifi.Win32,WlanInterface,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\WlanInterface.cs,ConvertAvailableNetworkListPtr,The length of the statement  "		availNets [i] = (WlanAvailableNetwork)Marshal.PtrToStructure (new IntPtr (availNetListIt)' typeof(WlanAvailableNetwork)); " is 121.
Long Statement,SimpleWifi.Win32,WlanInterface,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\WlanInterface.cs,GetAvailableNetworkList,The length of the statement  "	WlanInterop.ThrowIfError (WlanInterop.WlanGetAvailableNetworkList (client.clientHandle' info.interfaceGuid' flags' IntPtr.Zero' out availNetListPtr)); " is 150.
Long Statement,SimpleWifi.Win32,WlanInterface,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\WlanInterface.cs,GetNetworkBssList,The length of the statement  "	WlanInterop.ThrowIfError (WlanInterop.WlanGetNetworkBssList (client.clientHandle' info.interfaceGuid' IntPtr.Zero' Dot11BssType.Any' false' IntPtr.Zero' out bssListPtr)); " is 170.
Long Statement,SimpleWifi.Win32,WlanInterface,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\WlanInterface.cs,GetNetworkBssList,The length of the statement  "		WlanInterop.ThrowIfError (WlanInterop.WlanGetNetworkBssList (client.clientHandle' info.interfaceGuid' ssidPtr' bssType' securityEnabled' IntPtr.Zero' out bssListPtr)); " is 167.
Long Statement,SimpleWifi.Win32,WlanInterface,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\WlanInterface.cs,Connect,The length of the statement  "	WlanInterop.ThrowIfError (WlanInterop.WlanConnect (client.clientHandle' info.interfaceGuid' ref connectionParams' IntPtr.Zero)); " is 128.
Long Statement,SimpleWifi.Win32,WlanInterface,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\WlanInterface.cs,DeleteProfile,The length of the statement  "	WlanInterop.ThrowIfError (WlanInterop.WlanDeleteProfile (client.clientHandle' info.interfaceGuid' profileName' IntPtr.Zero)); " is 125.
Long Statement,SimpleWifi.Win32,WlanInterface,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\WlanInterface.cs,SetProfile,The length of the statement  "	WlanInterop.ThrowIfError (WlanInterop.WlanSetProfile (client.clientHandle' info.interfaceGuid' flags' profileXml' null' overwrite' IntPtr.Zero' out reasonCode)); " is 161.
Long Statement,SimpleWifi.Win32,WlanInterface,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\WlanInterface.cs,SetEAP,The length of the statement  "	WlanInterop.ThrowIfError (WlanInterop.WlanSetProfileEapXmlUserData (client.clientHandle' info.interfaceGuid' profileName' SetEapUserDataMode.None' userXML' IntPtr.Zero)); " is 170.
Long Statement,SimpleWifi.Win32,WlanInterface,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\WlanInterface.cs,GetProfileXml,The length of the statement  "	WlanInterop.ThrowIfError (WlanInterop.WlanGetProfile (client.clientHandle' info.interfaceGuid' profileName' IntPtr.Zero' out profileXmlPtr' out flags' out access)); " is 164.
Long Statement,SimpleWifi.Win32,WlanInterface,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\WlanInterface.cs,GetProfiles,The length of the statement  "	WlanInterop.ThrowIfError (WlanInterop.WlanGetProfileList (client.clientHandle' info.interfaceGuid' IntPtr.Zero' out profileListPtr)); " is 133.
Long Statement,SimpleWifi.Win32,WlanInterface,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\WlanInterface.cs,GetProfiles,The length of the statement  "		WlanProfileInfoListHeader header = (WlanProfileInfoListHeader)Marshal.PtrToStructure (profileListPtr' typeof(WlanProfileInfoListHeader)); " is 137.
Long Statement,SimpleWifi.Win32,WlanInterface,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\WlanInterface.cs,GetProfiles,The length of the statement  "			WlanProfileInfo profileInfo = (WlanProfileInfo)Marshal.PtrToStructure (new IntPtr (profileListIterator)' typeof(WlanProfileInfo)); " is 130.
Long Statement,SimpleWifi.Win32,WlanInterface,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\WlanInterface.cs,SetInterfaceInt,The length of the statement  "		WlanInterop.ThrowIfError (WlanInterop.WlanSetInterface (client.clientHandle' info.interfaceGuid' opCode' sizeof(int)' valuePtr' IntPtr.Zero)); " is 142.
Long Statement,SimpleWifi.Win32,WlanInterface,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\WlanInterface.cs,GetInterfaceInt,The length of the statement  "	WlanInterop.ThrowIfError (WlanInterop.WlanQueryInterface (client.clientHandle' info.interfaceGuid' opCode' IntPtr.Zero' out valueSize' out valuePtr' out opcodeValueType)); " is 171.
Empty Catch Block,SimpleWifi,AccessPoint,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\AccessPoint.cs,DeleteProfile,The method has an empty catch block.
Empty Catch Block,SimpleWifi,Wifi,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Wifi.cs,GetForcedConnectionStatus,The method has an empty catch block.
Magic Number,SimpleWifi,AccessPoint,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\AccessPoint.cs,Connect,The following statement contains a magic number: return _interface.ConnectSynchronously (WlanConnectionMode.Profile' _network.dot11BssType' Name' 6000);  
Magic Number,SimpleWifi,PasswordHelper,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\AuthRequest.cs,IsValid,The following statement contains a magic number: switch (cipherAlgorithm) {  case Dot11CipherAlgorithm.None:  	return true;  case Dot11CipherAlgorithm.WEP:  	// WEP key is 10' 26 or 40 hex digits long.  	if (string.IsNullOrEmpty (password))  		return false;  	int len = password.Length;  	bool correctLength = len == 10 || len == 26 || len == 40;  	bool onlyHex = new Regex ("^[0-9A-F]+$").IsMatch (password);  	return correctLength && onlyHex;  case Dot11CipherAlgorithm.CCMP:  // WPA2-PSK 8 to 63 ASCII characters					  case Dot11CipherAlgorithm.TKIP:  	// WPA-PSK 8 to 63 ASCII characters  	if (string.IsNullOrEmpty (password))  		return false;  	return 8 <= password.Length && password.Length <= 63;  default:  	return true;  }  
Magic Number,SimpleWifi,PasswordHelper,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\AuthRequest.cs,IsValid,The following statement contains a magic number: switch (cipherAlgorithm) {  case Dot11CipherAlgorithm.None:  	return true;  case Dot11CipherAlgorithm.WEP:  	// WEP key is 10' 26 or 40 hex digits long.  	if (string.IsNullOrEmpty (password))  		return false;  	int len = password.Length;  	bool correctLength = len == 10 || len == 26 || len == 40;  	bool onlyHex = new Regex ("^[0-9A-F]+$").IsMatch (password);  	return correctLength && onlyHex;  case Dot11CipherAlgorithm.CCMP:  // WPA2-PSK 8 to 63 ASCII characters					  case Dot11CipherAlgorithm.TKIP:  	// WPA-PSK 8 to 63 ASCII characters  	if (string.IsNullOrEmpty (password))  		return false;  	return 8 <= password.Length && password.Length <= 63;  default:  	return true;  }  
Magic Number,SimpleWifi,PasswordHelper,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\AuthRequest.cs,IsValid,The following statement contains a magic number: switch (cipherAlgorithm) {  case Dot11CipherAlgorithm.None:  	return true;  case Dot11CipherAlgorithm.WEP:  	// WEP key is 10' 26 or 40 hex digits long.  	if (string.IsNullOrEmpty (password))  		return false;  	int len = password.Length;  	bool correctLength = len == 10 || len == 26 || len == 40;  	bool onlyHex = new Regex ("^[0-9A-F]+$").IsMatch (password);  	return correctLength && onlyHex;  case Dot11CipherAlgorithm.CCMP:  // WPA2-PSK 8 to 63 ASCII characters					  case Dot11CipherAlgorithm.TKIP:  	// WPA-PSK 8 to 63 ASCII characters  	if (string.IsNullOrEmpty (password))  		return false;  	return 8 <= password.Length && password.Length <= 63;  default:  	return true;  }  
Magic Number,SimpleWifi,PasswordHelper,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\AuthRequest.cs,IsValid,The following statement contains a magic number: switch (cipherAlgorithm) {  case Dot11CipherAlgorithm.None:  	return true;  case Dot11CipherAlgorithm.WEP:  	// WEP key is 10' 26 or 40 hex digits long.  	if (string.IsNullOrEmpty (password))  		return false;  	int len = password.Length;  	bool correctLength = len == 10 || len == 26 || len == 40;  	bool onlyHex = new Regex ("^[0-9A-F]+$").IsMatch (password);  	return correctLength && onlyHex;  case Dot11CipherAlgorithm.CCMP:  // WPA2-PSK 8 to 63 ASCII characters					  case Dot11CipherAlgorithm.TKIP:  	// WPA-PSK 8 to 63 ASCII characters  	if (string.IsNullOrEmpty (password))  		return false;  	return 8 <= password.Length && password.Length <= 63;  default:  	return true;  }  
Magic Number,SimpleWifi,PasswordHelper,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\AuthRequest.cs,IsValid,The following statement contains a magic number: switch (cipherAlgorithm) {  case Dot11CipherAlgorithm.None:  	return true;  case Dot11CipherAlgorithm.WEP:  	// WEP key is 10' 26 or 40 hex digits long.  	if (string.IsNullOrEmpty (password))  		return false;  	int len = password.Length;  	bool correctLength = len == 10 || len == 26 || len == 40;  	bool onlyHex = new Regex ("^[0-9A-F]+$").IsMatch (password);  	return correctLength && onlyHex;  case Dot11CipherAlgorithm.CCMP:  // WPA2-PSK 8 to 63 ASCII characters					  case Dot11CipherAlgorithm.TKIP:  	// WPA-PSK 8 to 63 ASCII characters  	if (string.IsNullOrEmpty (password))  		return false;  	return 8 <= password.Length && password.Length <= 63;  default:  	return true;  }  
Magic Number,SimpleWifi,PasswordHelper,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\AuthRequest.cs,IsValid,The following statement contains a magic number: return 8 <= password.Length && password.Length <= 63;  
Magic Number,SimpleWifi,PasswordHelper,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\AuthRequest.cs,IsValid,The following statement contains a magic number: return 8 <= password.Length && password.Length <= 63;  
Magic Number,SimpleWifi.Win32.Interop,WlanRateSet,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\Interop\Structs.cs,GetRateInMbps,The following statement contains a magic number: return (rateSet [rate] & 0x7FFF) * 0.5;  
Missing Default,SimpleWifi.Win32,WlanClient,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\WlanApi.cs,OnWlanNotification,The following switch statement is missing a default case: switch (notifyData.notificationSource) {  case WlanNotificationSource.ACM:  	switch ((WlanNotificationCodeAcm)notifyData.notificationCode) {  	case WlanNotificationCodeAcm.ConnectionStart:  	case WlanNotificationCodeAcm.ConnectionComplete:  	case WlanNotificationCodeAcm.ConnectionAttemptFail:  	case WlanNotificationCodeAcm.Disconnecting:  	case WlanNotificationCodeAcm.Disconnected:  		WlanConnectionNotificationData? connNotifyData = WlanHelpers.ParseWlanConnectionNotification (ref notifyData);  		if (connNotifyData.HasValue && wlanIface != null)  			wlanIface.OnWlanConnection (notifyData' connNotifyData.Value);  		break;  	case WlanNotificationCodeAcm.ScanFail:  		int expectedSize = Marshal.SizeOf (typeof(int));  		if (notifyData.dataSize >= expectedSize) {  			int reasonInt = Marshal.ReadInt32 (notifyData.dataPtr);  			// Want to make sure this doesn't crash if windows sends a reasoncode not defined in the enum.  			if (Enum.IsDefined (typeof(WlanReasonCode)' reasonInt)) {  				WlanReasonCode reasonCode = (WlanReasonCode)reasonInt;  				if (wlanIface != null)  					wlanIface.OnWlanReason (notifyData' reasonCode);  			}  		}  		break;  	}  	break;  case WlanNotificationSource.MSM:  	switch ((WlanNotificationCodeMsm)notifyData.notificationCode) {  	case WlanNotificationCodeMsm.Associating:  	case WlanNotificationCodeMsm.Associated:  	case WlanNotificationCodeMsm.Authenticating:  	case WlanNotificationCodeMsm.Connected:  	case WlanNotificationCodeMsm.RoamingStart:  	case WlanNotificationCodeMsm.RoamingEnd:  	case WlanNotificationCodeMsm.Disassociating:  	case WlanNotificationCodeMsm.Disconnected:  	case WlanNotificationCodeMsm.PeerJoin:  	case WlanNotificationCodeMsm.PeerLeave:  	case WlanNotificationCodeMsm.AdapterRemoval:  		WlanConnectionNotificationData? connNotifyData = WlanHelpers.ParseWlanConnectionNotification (ref notifyData);  		if (connNotifyData.HasValue && wlanIface != null)  			wlanIface.OnWlanConnection (notifyData' connNotifyData.Value);  		break;  	}  	break;  }  
Missing Default,SimpleWifi.Win32,WlanClient,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\WlanApi.cs,OnWlanNotification,The following switch statement is missing a default case: switch ((WlanNotificationCodeAcm)notifyData.notificationCode) {  case WlanNotificationCodeAcm.ConnectionStart:  case WlanNotificationCodeAcm.ConnectionComplete:  case WlanNotificationCodeAcm.ConnectionAttemptFail:  case WlanNotificationCodeAcm.Disconnecting:  case WlanNotificationCodeAcm.Disconnected:  	WlanConnectionNotificationData? connNotifyData = WlanHelpers.ParseWlanConnectionNotification (ref notifyData);  	if (connNotifyData.HasValue && wlanIface != null)  		wlanIface.OnWlanConnection (notifyData' connNotifyData.Value);  	break;  case WlanNotificationCodeAcm.ScanFail:  	int expectedSize = Marshal.SizeOf (typeof(int));  	if (notifyData.dataSize >= expectedSize) {  		int reasonInt = Marshal.ReadInt32 (notifyData.dataPtr);  		// Want to make sure this doesn't crash if windows sends a reasoncode not defined in the enum.  		if (Enum.IsDefined (typeof(WlanReasonCode)' reasonInt)) {  			WlanReasonCode reasonCode = (WlanReasonCode)reasonInt;  			if (wlanIface != null)  				wlanIface.OnWlanReason (notifyData' reasonCode);  		}  	}  	break;  }  
Missing Default,SimpleWifi.Win32,WlanClient,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\WlanApi.cs,OnWlanNotification,The following switch statement is missing a default case: switch ((WlanNotificationCodeMsm)notifyData.notificationCode) {  case WlanNotificationCodeMsm.Associating:  case WlanNotificationCodeMsm.Associated:  case WlanNotificationCodeMsm.Authenticating:  case WlanNotificationCodeMsm.Connected:  case WlanNotificationCodeMsm.RoamingStart:  case WlanNotificationCodeMsm.RoamingEnd:  case WlanNotificationCodeMsm.Disassociating:  case WlanNotificationCodeMsm.Disconnected:  case WlanNotificationCodeMsm.PeerJoin:  case WlanNotificationCodeMsm.PeerLeave:  case WlanNotificationCodeMsm.AdapterRemoval:  	WlanConnectionNotificationData? connNotifyData = WlanHelpers.ParseWlanConnectionNotification (ref notifyData);  	if (connNotifyData.HasValue && wlanIface != null)  		wlanIface.OnWlanConnection (notifyData' connNotifyData.Value);  	break;  }  
Missing Default,SimpleWifi.Win32,WlanInterface,F:\newReposMay17\DigiExam_simplewifi\SimpleWifi\Win32\WlanInterface.cs,ConnectSynchronously,The following switch statement is missing a default case: switch ((WlanNotificationCodeMsm)wlanConnectionData.notifyData.notificationCode) {  case WlanNotificationCodeMsm.Connected:  	if (wlanConnectionData.connNotifyData.profileName == profile)  		return true;  	break;  }  
