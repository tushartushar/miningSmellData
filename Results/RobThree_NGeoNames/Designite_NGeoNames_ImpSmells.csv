Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,NGeoNames,GeoFileWriter,C:\repos\RobThree_NGeoNames\NGeoNames\GeoFileWriter.cs,WriteRecords,The method has 5 parameters. Parameters: path' values' composer' filetype' lineseparator
Long Statement,NGeoNames.Composers,AlternateNameComposer,C:\repos\RobThree_NGeoNames\NGeoNames\Composers\AlternateNameComposer.cs,Compose,The length of the statement  "            return string.Join(this.FieldSeparator.ToString()' value.Id' value.GeoNameId' string.IsNullOrEmpty(value.Type) ? value.ISOLanguage : value.Type' " is 144.
Long Statement,NGeoNames.Composers,AlternateNameComposer,C:\repos\RobThree_NGeoNames\NGeoNames\Composers\AlternateNameComposer.cs,Compose,The length of the statement  "                value.Name' Bool2String(value.IsPreferredName)' Bool2String(value.IsShortName)' Bool2String(value.IsColloquial)' Bool2String(value.IsHistoric)); " is 144.
Long Statement,NGeoNames.Composers,CountryInfoComposer,C:\repos\RobThree_NGeoNames\NGeoNames\Composers\CountryInfoComposer.cs,Compose,The length of the statement  "            return string.Join(this.FieldSeparator.ToString()' value.ISO_Alpha2' value.ISO_Alpha3' value.ISO_Numeric' value.FIPS' value.Country' " is 132.
Long Statement,NGeoNames.Composers,CountryInfoComposer,C:\repos\RobThree_NGeoNames\NGeoNames\Composers\CountryInfoComposer.cs,Compose,The length of the statement  "                value.Capital' value.Area' value.Population' value.Continent' value.Tld' value.CurrencyCode' value.CurrencyName' value.Phone' " is 125.
Long Statement,NGeoNames.Composers,CountryInfoComposer,C:\repos\RobThree_NGeoNames\NGeoNames\Composers\CountryInfoComposer.cs,Compose,The length of the statement  "                value.PostalCodeFormat' value.PostalCodeRegex' ArrayToValue(value.Languages)' value.GeoNameId' ArrayToValue(value.Neighbours)' value.EquivalentFipsCode); " is 153.
Long Statement,NGeoNames.Composers,ExtendedGeoNameComposer,C:\repos\RobThree_NGeoNames\NGeoNames\Composers\ExtendedGeoNameComposer.cs,Compose,The length of the statement  "            return string.Join(this.FieldSeparator.ToString()' value.Id' value.Name' value.NameASCII' ArrayToValue(value.AlternateNames)' " is 125.
Long Statement,NGeoNames.Composers,ExtendedGeoNameComposer,C:\repos\RobThree_NGeoNames\NGeoNames\Composers\ExtendedGeoNameComposer.cs,Compose,The length of the statement  "                    value.Latitude.ToString(CultureInfo.InvariantCulture)' value.Longitude.ToString(CultureInfo.InvariantCulture)' value.FeatureClass' value.FeatureCode' value.CountryCode' " is 168.
Long Statement,NGeoNames.Composers,ExtendedGeoNameComposer,C:\repos\RobThree_NGeoNames\NGeoNames\Composers\ExtendedGeoNameComposer.cs,Compose,The length of the statement  "                    ArrayToValue(value.AlternateCountryCodes)' value.Admincodes[0]' value.Admincodes[1]' value.Admincodes[2]' value.Admincodes[3]' " is 126.
Long Statement,NGeoNames.Composers,ExtendedGeoNameComposer,C:\repos\RobThree_NGeoNames\NGeoNames\Composers\ExtendedGeoNameComposer.cs,Compose,The length of the statement  "                    value.Population' value.Elevation' value.Dem' value.Timezone.Replace(" "' "_")' value.ModificationDate.ToString("yyyy-MM-dd")); " is 127.
Long Statement,NGeoNames.Composers,GeoNameComposer,C:\repos\RobThree_NGeoNames\NGeoNames\Composers\GeoNameComposer.cs,Compose,The length of the statement  "                return string.Join(this.FieldSeparator.ToString()' value.Id' value.Name' null' null' DoubleToString(value.Latitude)' DoubleToString(value.Longitude)' " is 149.
Long Statement,NGeoNames.Composers,GeoNameComposer,C:\repos\RobThree_NGeoNames\NGeoNames\Composers\GeoNameComposer.cs,Compose,The length of the statement  "                return string.Join(this.FieldSeparator.ToString()' value.Id' value.Name' DoubleToString(value.Latitude)' DoubleToString(value.Longitude)); " is 138.
Long Statement,NGeoNames.Composers,ISOLanguageCodeComposer,C:\repos\RobThree_NGeoNames\NGeoNames\Composers\ISOLanguageCodeComposer.cs,Compose,The length of the statement  "            return string.Join(this.FieldSeparator.ToString()' value.ISO_639_3' value.ISO_639_2' value.ISO_639_1' value.LanguageName); " is 122.
Long Statement,NGeoNames.Composers,TimeZoneComposer,C:\repos\RobThree_NGeoNames\NGeoNames\Composers\TimeZoneComposer.cs,Compose,The length of the statement  "            return string.Join(this.FieldSeparator.ToString()' value.CountryCode' value.TimeZoneId.Replace(" "' "_")' FloatToString(value.GMTOffset)'  " is 137.
Long Statement,NGeoNames,GeoUtil,C:\repos\RobThree_NGeoNames\NGeoNames\GeoUtil.cs,DistanceTo,The length of the statement  "            return (radiusofearth / 1000) * (2 * Math.Asin(Math.Min(1' Math.Sqrt(Math.Sin(dLat / 2) * Math.Sin(dLat / 2) + Math.Cos(GeoUtil.Deg2Rad(src.Latitude)) * Math.Cos(GeoUtil.Deg2Rad(dest.Latitude)) * Math.Sin(dLon / 2) * Math.Sin(dLon / 2))))); " is 240.
Long Statement,NGeoNames,GeoFileReader,C:\repos\RobThree_NGeoNames\NGeoNames\GeoFileReader.cs,ReadRecords,The length of the statement  "                    if ((c > parser.SkipLines) && (line.Length > 0)  && (!parser.HasComments || (parser.HasComments && !line.StartsWith("#")))) " is 123.
Long Statement,NGeoNames,GeoFileReader,C:\repos\RobThree_NGeoNames\NGeoNames\GeoFileReader.cs,ReadRecords,The length of the statement  "                            throw new ParserException(string.Format("Expected number of fields mismatch; expected: {0}' read: {1}' line: {2}"' parser.ExpectedNumberOfFields' data.Length' c)); " is 163.
Complex Conditional,NGeoNames,GeoFileReader,C:\repos\RobThree_NGeoNames\NGeoNames\GeoFileReader.cs,ReadRecords,The conditional expression  "(c > parser.SkipLines) && (line.Length > 0)  && (!parser.HasComments || (parser.HasComments && !line.StartsWith("#")))"  is complex.
Magic Number,NGeoNames.Composers,ExtendedGeoNameComposer,C:\repos\RobThree_NGeoNames\NGeoNames\Composers\ExtendedGeoNameComposer.cs,Compose,The following statement contains a magic number: return string.Join(this.FieldSeparator.ToString()' value.Id' value.Name' value.NameASCII' ArrayToValue(value.AlternateNames)'                      value.Latitude.ToString(CultureInfo.InvariantCulture)' value.Longitude.ToString(CultureInfo.InvariantCulture)' value.FeatureClass' value.FeatureCode' value.CountryCode'                      ArrayToValue(value.AlternateCountryCodes)' value.Admincodes[0]' value.Admincodes[1]' value.Admincodes[2]' value.Admincodes[3]'                      value.Population' value.Elevation' value.Dem' value.Timezone.Replace(" "' "_")' value.ModificationDate.ToString("yyyy-MM-dd"));
Magic Number,NGeoNames.Composers,ExtendedGeoNameComposer,C:\repos\RobThree_NGeoNames\NGeoNames\Composers\ExtendedGeoNameComposer.cs,Compose,The following statement contains a magic number: return string.Join(this.FieldSeparator.ToString()' value.Id' value.Name' value.NameASCII' ArrayToValue(value.AlternateNames)'                      value.Latitude.ToString(CultureInfo.InvariantCulture)' value.Longitude.ToString(CultureInfo.InvariantCulture)' value.FeatureClass' value.FeatureCode' value.CountryCode'                      ArrayToValue(value.AlternateCountryCodes)' value.Admincodes[0]' value.Admincodes[1]' value.Admincodes[2]' value.Admincodes[3]'                      value.Population' value.Elevation' value.Dem' value.Timezone.Replace(" "' "_")' value.ModificationDate.ToString("yyyy-MM-dd"));
Magic Number,NGeoNames.Composers,PostalcodeComposer,C:\repos\RobThree_NGeoNames\NGeoNames\Composers\PostalcodeComposer.cs,Compose,The following statement contains a magic number: return string.Join(this.FieldSeparator.ToString()' value.CountryCode' value.PostalCode' value.PlaceName'                  value.AdminName[0]' value.AdminCode[0]' value.AdminName[1]' value.AdminCode[1]' value.AdminName[2]' value.AdminCode[2]'                  DoubleToString(value.Latitude)' DoubleToString(value.Longitude)' value.Accuracy              );
Magic Number,NGeoNames.Composers,PostalcodeComposer,C:\repos\RobThree_NGeoNames\NGeoNames\Composers\PostalcodeComposer.cs,Compose,The following statement contains a magic number: return string.Join(this.FieldSeparator.ToString()' value.CountryCode' value.PostalCode' value.PlaceName'                  value.AdminName[0]' value.AdminCode[0]' value.AdminName[1]' value.AdminCode[1]' value.AdminName[2]' value.AdminCode[2]'                  DoubleToString(value.Latitude)' DoubleToString(value.Longitude)' value.Accuracy              );
Magic Number,NGeoNames,GeoUtil,C:\repos\RobThree_NGeoNames\NGeoNames\GeoUtil.cs,Deg2Rad,The following statement contains a magic number: return (Math.PI / 180.0) * deg;
Magic Number,NGeoNames,GeoUtil,C:\repos\RobThree_NGeoNames\NGeoNames\GeoUtil.cs,DistanceTo,The following statement contains a magic number: return (radiusofearth / 1000) * (2 * Math.Asin(Math.Min(1' Math.Sqrt(Math.Sin(dLat / 2) * Math.Sin(dLat / 2) + Math.Cos(GeoUtil.Deg2Rad(src.Latitude)) * Math.Cos(GeoUtil.Deg2Rad(dest.Latitude)) * Math.Sin(dLon / 2) * Math.Sin(dLon / 2)))));
Magic Number,NGeoNames,GeoUtil,C:\repos\RobThree_NGeoNames\NGeoNames\GeoUtil.cs,DistanceTo,The following statement contains a magic number: return (radiusofearth / 1000) * (2 * Math.Asin(Math.Min(1' Math.Sqrt(Math.Sin(dLat / 2) * Math.Sin(dLat / 2) + Math.Cos(GeoUtil.Deg2Rad(src.Latitude)) * Math.Cos(GeoUtil.Deg2Rad(dest.Latitude)) * Math.Sin(dLon / 2) * Math.Sin(dLon / 2)))));
Magic Number,NGeoNames,GeoUtil,C:\repos\RobThree_NGeoNames\NGeoNames\GeoUtil.cs,DistanceTo,The following statement contains a magic number: return (radiusofearth / 1000) * (2 * Math.Asin(Math.Min(1' Math.Sqrt(Math.Sin(dLat / 2) * Math.Sin(dLat / 2) + Math.Cos(GeoUtil.Deg2Rad(src.Latitude)) * Math.Cos(GeoUtil.Deg2Rad(dest.Latitude)) * Math.Sin(dLon / 2) * Math.Sin(dLon / 2)))));
Magic Number,NGeoNames,GeoUtil,C:\repos\RobThree_NGeoNames\NGeoNames\GeoUtil.cs,DistanceTo,The following statement contains a magic number: return (radiusofearth / 1000) * (2 * Math.Asin(Math.Min(1' Math.Sqrt(Math.Sin(dLat / 2) * Math.Sin(dLat / 2) + Math.Cos(GeoUtil.Deg2Rad(src.Latitude)) * Math.Cos(GeoUtil.Deg2Rad(dest.Latitude)) * Math.Sin(dLon / 2) * Math.Sin(dLon / 2)))));
Magic Number,NGeoNames,GeoUtil,C:\repos\RobThree_NGeoNames\NGeoNames\GeoUtil.cs,DistanceTo,The following statement contains a magic number: return (radiusofearth / 1000) * (2 * Math.Asin(Math.Min(1' Math.Sqrt(Math.Sin(dLat / 2) * Math.Sin(dLat / 2) + Math.Cos(GeoUtil.Deg2Rad(src.Latitude)) * Math.Cos(GeoUtil.Deg2Rad(dest.Latitude)) * Math.Sin(dLon / 2) * Math.Sin(dLon / 2)))));
Magic Number,NGeoNames,GeoUtil,C:\repos\RobThree_NGeoNames\NGeoNames\GeoUtil.cs,DistanceTo,The following statement contains a magic number: return (radiusofearth / 1000) * (2 * Math.Asin(Math.Min(1' Math.Sqrt(Math.Sin(dLat / 2) * Math.Sin(dLat / 2) + Math.Cos(GeoUtil.Deg2Rad(src.Latitude)) * Math.Cos(GeoUtil.Deg2Rad(dest.Latitude)) * Math.Sin(dLon / 2) * Math.Sin(dLon / 2)))));
Magic Number,NGeoNames,ReverseGeoCode<T>,C:\repos\RobThree_NGeoNames\NGeoNames\ReverseGeoCode.cs,ReverseGeoCode,The following statement contains a magic number: _tree = new KdTree.KdTree<double' T>(3' new DoubleMath());
Magic Number,NGeoNames.Parsers,Admin1CodeParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\Admin1CodeParser.cs,Parse,The following statement contains a magic number: return new Admin1Code              {                  Code = fields[0]'                  Name = fields[1]'                  NameASCII = fields[2]'                  GeoNameId = int.Parse(fields[3])              };
Magic Number,NGeoNames.Parsers,Admin1CodeParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\Admin1CodeParser.cs,Parse,The following statement contains a magic number: return new Admin1Code              {                  Code = fields[0]'                  Name = fields[1]'                  NameASCII = fields[2]'                  GeoNameId = int.Parse(fields[3])              };
Magic Number,NGeoNames.Parsers,Admin2CodeParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\Admin2CodeParser.cs,Parse,The following statement contains a magic number: return new Admin2Code              {                  Code = fields[0]'                  Name = fields[1]'                  NameASCII = fields[2]'                  GeoNameId = int.Parse(fields[3])              };
Magic Number,NGeoNames.Parsers,Admin2CodeParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\Admin2CodeParser.cs,Parse,The following statement contains a magic number: return new Admin2Code              {                  Code = fields[0]'                  Name = fields[1]'                  NameASCII = fields[2]'                  GeoNameId = int.Parse(fields[3])              };
Magic Number,NGeoNames.Parsers,AlternateNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParser.cs,Parse,The following statement contains a magic number: return new AlternateName              {                  Id = int.Parse(fields[0])'                  GeoNameId = int.Parse(fields[1])'                  ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                  Type = fields[2].Length <= 3 ? null : fields[2]'                  Name = fields[3]'                  IsPreferredName = Bool2String(fields[4])'                  IsShortName = Bool2String(fields[5])'                  IsColloquial = Bool2String(fields[6])'                  IsHistoric = Bool2String(fields[7])              };
Magic Number,NGeoNames.Parsers,AlternateNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParser.cs,Parse,The following statement contains a magic number: return new AlternateName              {                  Id = int.Parse(fields[0])'                  GeoNameId = int.Parse(fields[1])'                  ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                  Type = fields[2].Length <= 3 ? null : fields[2]'                  Name = fields[3]'                  IsPreferredName = Bool2String(fields[4])'                  IsShortName = Bool2String(fields[5])'                  IsColloquial = Bool2String(fields[6])'                  IsHistoric = Bool2String(fields[7])              };
Magic Number,NGeoNames.Parsers,AlternateNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParser.cs,Parse,The following statement contains a magic number: return new AlternateName              {                  Id = int.Parse(fields[0])'                  GeoNameId = int.Parse(fields[1])'                  ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                  Type = fields[2].Length <= 3 ? null : fields[2]'                  Name = fields[3]'                  IsPreferredName = Bool2String(fields[4])'                  IsShortName = Bool2String(fields[5])'                  IsColloquial = Bool2String(fields[6])'                  IsHistoric = Bool2String(fields[7])              };
Magic Number,NGeoNames.Parsers,AlternateNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParser.cs,Parse,The following statement contains a magic number: return new AlternateName              {                  Id = int.Parse(fields[0])'                  GeoNameId = int.Parse(fields[1])'                  ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                  Type = fields[2].Length <= 3 ? null : fields[2]'                  Name = fields[3]'                  IsPreferredName = Bool2String(fields[4])'                  IsShortName = Bool2String(fields[5])'                  IsColloquial = Bool2String(fields[6])'                  IsHistoric = Bool2String(fields[7])              };
Magic Number,NGeoNames.Parsers,AlternateNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParser.cs,Parse,The following statement contains a magic number: return new AlternateName              {                  Id = int.Parse(fields[0])'                  GeoNameId = int.Parse(fields[1])'                  ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                  Type = fields[2].Length <= 3 ? null : fields[2]'                  Name = fields[3]'                  IsPreferredName = Bool2String(fields[4])'                  IsShortName = Bool2String(fields[5])'                  IsColloquial = Bool2String(fields[6])'                  IsHistoric = Bool2String(fields[7])              };
Magic Number,NGeoNames.Parsers,AlternateNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParser.cs,Parse,The following statement contains a magic number: return new AlternateName              {                  Id = int.Parse(fields[0])'                  GeoNameId = int.Parse(fields[1])'                  ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                  Type = fields[2].Length <= 3 ? null : fields[2]'                  Name = fields[3]'                  IsPreferredName = Bool2String(fields[4])'                  IsShortName = Bool2String(fields[5])'                  IsColloquial = Bool2String(fields[6])'                  IsHistoric = Bool2String(fields[7])              };
Magic Number,NGeoNames.Parsers,AlternateNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParser.cs,Parse,The following statement contains a magic number: return new AlternateName              {                  Id = int.Parse(fields[0])'                  GeoNameId = int.Parse(fields[1])'                  ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                  Type = fields[2].Length <= 3 ? null : fields[2]'                  Name = fields[3]'                  IsPreferredName = Bool2String(fields[4])'                  IsShortName = Bool2String(fields[5])'                  IsColloquial = Bool2String(fields[6])'                  IsHistoric = Bool2String(fields[7])              };
Magic Number,NGeoNames.Parsers,AlternateNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParser.cs,Parse,The following statement contains a magic number: return new AlternateName              {                  Id = int.Parse(fields[0])'                  GeoNameId = int.Parse(fields[1])'                  ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                  Type = fields[2].Length <= 3 ? null : fields[2]'                  Name = fields[3]'                  IsPreferredName = Bool2String(fields[4])'                  IsShortName = Bool2String(fields[5])'                  IsColloquial = Bool2String(fields[6])'                  IsHistoric = Bool2String(fields[7])              };
Magic Number,NGeoNames.Parsers,AlternateNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParser.cs,Parse,The following statement contains a magic number: return new AlternateName              {                  Id = int.Parse(fields[0])'                  GeoNameId = int.Parse(fields[1])'                  ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                  Type = fields[2].Length <= 3 ? null : fields[2]'                  Name = fields[3]'                  IsPreferredName = Bool2String(fields[4])'                  IsShortName = Bool2String(fields[5])'                  IsColloquial = Bool2String(fields[6])'                  IsHistoric = Bool2String(fields[7])              };
Magic Number,NGeoNames.Parsers,AlternateNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParser.cs,Parse,The following statement contains a magic number: return new AlternateName              {                  Id = int.Parse(fields[0])'                  GeoNameId = int.Parse(fields[1])'                  ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                  Type = fields[2].Length <= 3 ? null : fields[2]'                  Name = fields[3]'                  IsPreferredName = Bool2String(fields[4])'                  IsShortName = Bool2String(fields[5])'                  IsColloquial = Bool2String(fields[6])'                  IsHistoric = Bool2String(fields[7])              };
Magic Number,NGeoNames.Parsers,AlternateNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParser.cs,Parse,The following statement contains a magic number: return new AlternateName              {                  Id = int.Parse(fields[0])'                  GeoNameId = int.Parse(fields[1])'                  ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                  Type = fields[2].Length <= 3 ? null : fields[2]'                  Name = fields[3]'                  IsPreferredName = Bool2String(fields[4])'                  IsShortName = Bool2String(fields[5])'                  IsColloquial = Bool2String(fields[6])'                  IsHistoric = Bool2String(fields[7])              };
Magic Number,NGeoNames.Parsers,ContinentParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\ContinentParser.cs,Parse,The following statement contains a magic number: return new Continent              {                  Code = fields[0]'                  Name = fields[1]'                  GeoNameId = int.Parse(fields[2])              };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo              {                  ISO_Alpha2 = fields[0]'                  ISO_Alpha3 = fields[1]'                  ISO_Numeric = fields[2]'                  FIPS = fields[3]'                  Country = fields[4]'                  Capital = fields[5]'                  Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                  Population = int.Parse(fields[7])'                  Continent = fields[8]'                  Tld = fields[9]'                  CurrencyCode = fields[10]'                  CurrencyName = fields[11]'                  Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                  PostalCodeFormat = fields[13]'                  PostalCodeRegex = fields[14]'                  Languages = fields[15].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                  Neighbours = fields[17].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  EquivalentFipsCode = fields[18]              };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo              {                  ISO_Alpha2 = fields[0]'                  ISO_Alpha3 = fields[1]'                  ISO_Numeric = fields[2]'                  FIPS = fields[3]'                  Country = fields[4]'                  Capital = fields[5]'                  Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                  Population = int.Parse(fields[7])'                  Continent = fields[8]'                  Tld = fields[9]'                  CurrencyCode = fields[10]'                  CurrencyName = fields[11]'                  Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                  PostalCodeFormat = fields[13]'                  PostalCodeRegex = fields[14]'                  Languages = fields[15].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                  Neighbours = fields[17].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  EquivalentFipsCode = fields[18]              };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo              {                  ISO_Alpha2 = fields[0]'                  ISO_Alpha3 = fields[1]'                  ISO_Numeric = fields[2]'                  FIPS = fields[3]'                  Country = fields[4]'                  Capital = fields[5]'                  Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                  Population = int.Parse(fields[7])'                  Continent = fields[8]'                  Tld = fields[9]'                  CurrencyCode = fields[10]'                  CurrencyName = fields[11]'                  Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                  PostalCodeFormat = fields[13]'                  PostalCodeRegex = fields[14]'                  Languages = fields[15].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                  Neighbours = fields[17].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  EquivalentFipsCode = fields[18]              };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo              {                  ISO_Alpha2 = fields[0]'                  ISO_Alpha3 = fields[1]'                  ISO_Numeric = fields[2]'                  FIPS = fields[3]'                  Country = fields[4]'                  Capital = fields[5]'                  Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                  Population = int.Parse(fields[7])'                  Continent = fields[8]'                  Tld = fields[9]'                  CurrencyCode = fields[10]'                  CurrencyName = fields[11]'                  Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                  PostalCodeFormat = fields[13]'                  PostalCodeRegex = fields[14]'                  Languages = fields[15].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                  Neighbours = fields[17].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  EquivalentFipsCode = fields[18]              };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo              {                  ISO_Alpha2 = fields[0]'                  ISO_Alpha3 = fields[1]'                  ISO_Numeric = fields[2]'                  FIPS = fields[3]'                  Country = fields[4]'                  Capital = fields[5]'                  Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                  Population = int.Parse(fields[7])'                  Continent = fields[8]'                  Tld = fields[9]'                  CurrencyCode = fields[10]'                  CurrencyName = fields[11]'                  Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                  PostalCodeFormat = fields[13]'                  PostalCodeRegex = fields[14]'                  Languages = fields[15].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                  Neighbours = fields[17].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  EquivalentFipsCode = fields[18]              };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo              {                  ISO_Alpha2 = fields[0]'                  ISO_Alpha3 = fields[1]'                  ISO_Numeric = fields[2]'                  FIPS = fields[3]'                  Country = fields[4]'                  Capital = fields[5]'                  Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                  Population = int.Parse(fields[7])'                  Continent = fields[8]'                  Tld = fields[9]'                  CurrencyCode = fields[10]'                  CurrencyName = fields[11]'                  Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                  PostalCodeFormat = fields[13]'                  PostalCodeRegex = fields[14]'                  Languages = fields[15].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                  Neighbours = fields[17].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  EquivalentFipsCode = fields[18]              };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo              {                  ISO_Alpha2 = fields[0]'                  ISO_Alpha3 = fields[1]'                  ISO_Numeric = fields[2]'                  FIPS = fields[3]'                  Country = fields[4]'                  Capital = fields[5]'                  Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                  Population = int.Parse(fields[7])'                  Continent = fields[8]'                  Tld = fields[9]'                  CurrencyCode = fields[10]'                  CurrencyName = fields[11]'                  Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                  PostalCodeFormat = fields[13]'                  PostalCodeRegex = fields[14]'                  Languages = fields[15].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                  Neighbours = fields[17].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  EquivalentFipsCode = fields[18]              };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo              {                  ISO_Alpha2 = fields[0]'                  ISO_Alpha3 = fields[1]'                  ISO_Numeric = fields[2]'                  FIPS = fields[3]'                  Country = fields[4]'                  Capital = fields[5]'                  Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                  Population = int.Parse(fields[7])'                  Continent = fields[8]'                  Tld = fields[9]'                  CurrencyCode = fields[10]'                  CurrencyName = fields[11]'                  Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                  PostalCodeFormat = fields[13]'                  PostalCodeRegex = fields[14]'                  Languages = fields[15].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                  Neighbours = fields[17].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  EquivalentFipsCode = fields[18]              };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo              {                  ISO_Alpha2 = fields[0]'                  ISO_Alpha3 = fields[1]'                  ISO_Numeric = fields[2]'                  FIPS = fields[3]'                  Country = fields[4]'                  Capital = fields[5]'                  Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                  Population = int.Parse(fields[7])'                  Continent = fields[8]'                  Tld = fields[9]'                  CurrencyCode = fields[10]'                  CurrencyName = fields[11]'                  Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                  PostalCodeFormat = fields[13]'                  PostalCodeRegex = fields[14]'                  Languages = fields[15].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                  Neighbours = fields[17].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  EquivalentFipsCode = fields[18]              };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo              {                  ISO_Alpha2 = fields[0]'                  ISO_Alpha3 = fields[1]'                  ISO_Numeric = fields[2]'                  FIPS = fields[3]'                  Country = fields[4]'                  Capital = fields[5]'                  Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                  Population = int.Parse(fields[7])'                  Continent = fields[8]'                  Tld = fields[9]'                  CurrencyCode = fields[10]'                  CurrencyName = fields[11]'                  Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                  PostalCodeFormat = fields[13]'                  PostalCodeRegex = fields[14]'                  Languages = fields[15].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                  Neighbours = fields[17].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  EquivalentFipsCode = fields[18]              };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo              {                  ISO_Alpha2 = fields[0]'                  ISO_Alpha3 = fields[1]'                  ISO_Numeric = fields[2]'                  FIPS = fields[3]'                  Country = fields[4]'                  Capital = fields[5]'                  Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                  Population = int.Parse(fields[7])'                  Continent = fields[8]'                  Tld = fields[9]'                  CurrencyCode = fields[10]'                  CurrencyName = fields[11]'                  Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                  PostalCodeFormat = fields[13]'                  PostalCodeRegex = fields[14]'                  Languages = fields[15].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                  Neighbours = fields[17].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  EquivalentFipsCode = fields[18]              };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo              {                  ISO_Alpha2 = fields[0]'                  ISO_Alpha3 = fields[1]'                  ISO_Numeric = fields[2]'                  FIPS = fields[3]'                  Country = fields[4]'                  Capital = fields[5]'                  Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                  Population = int.Parse(fields[7])'                  Continent = fields[8]'                  Tld = fields[9]'                  CurrencyCode = fields[10]'                  CurrencyName = fields[11]'                  Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                  PostalCodeFormat = fields[13]'                  PostalCodeRegex = fields[14]'                  Languages = fields[15].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                  Neighbours = fields[17].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  EquivalentFipsCode = fields[18]              };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo              {                  ISO_Alpha2 = fields[0]'                  ISO_Alpha3 = fields[1]'                  ISO_Numeric = fields[2]'                  FIPS = fields[3]'                  Country = fields[4]'                  Capital = fields[5]'                  Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                  Population = int.Parse(fields[7])'                  Continent = fields[8]'                  Tld = fields[9]'                  CurrencyCode = fields[10]'                  CurrencyName = fields[11]'                  Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                  PostalCodeFormat = fields[13]'                  PostalCodeRegex = fields[14]'                  Languages = fields[15].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                  Neighbours = fields[17].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  EquivalentFipsCode = fields[18]              };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo              {                  ISO_Alpha2 = fields[0]'                  ISO_Alpha3 = fields[1]'                  ISO_Numeric = fields[2]'                  FIPS = fields[3]'                  Country = fields[4]'                  Capital = fields[5]'                  Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                  Population = int.Parse(fields[7])'                  Continent = fields[8]'                  Tld = fields[9]'                  CurrencyCode = fields[10]'                  CurrencyName = fields[11]'                  Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                  PostalCodeFormat = fields[13]'                  PostalCodeRegex = fields[14]'                  Languages = fields[15].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                  Neighbours = fields[17].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  EquivalentFipsCode = fields[18]              };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo              {                  ISO_Alpha2 = fields[0]'                  ISO_Alpha3 = fields[1]'                  ISO_Numeric = fields[2]'                  FIPS = fields[3]'                  Country = fields[4]'                  Capital = fields[5]'                  Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                  Population = int.Parse(fields[7])'                  Continent = fields[8]'                  Tld = fields[9]'                  CurrencyCode = fields[10]'                  CurrencyName = fields[11]'                  Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                  PostalCodeFormat = fields[13]'                  PostalCodeRegex = fields[14]'                  Languages = fields[15].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                  Neighbours = fields[17].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  EquivalentFipsCode = fields[18]              };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo              {                  ISO_Alpha2 = fields[0]'                  ISO_Alpha3 = fields[1]'                  ISO_Numeric = fields[2]'                  FIPS = fields[3]'                  Country = fields[4]'                  Capital = fields[5]'                  Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                  Population = int.Parse(fields[7])'                  Continent = fields[8]'                  Tld = fields[9]'                  CurrencyCode = fields[10]'                  CurrencyName = fields[11]'                  Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                  PostalCodeFormat = fields[13]'                  PostalCodeRegex = fields[14]'                  Languages = fields[15].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                  Neighbours = fields[17].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  EquivalentFipsCode = fields[18]              };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo              {                  ISO_Alpha2 = fields[0]'                  ISO_Alpha3 = fields[1]'                  ISO_Numeric = fields[2]'                  FIPS = fields[3]'                  Country = fields[4]'                  Capital = fields[5]'                  Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                  Population = int.Parse(fields[7])'                  Continent = fields[8]'                  Tld = fields[9]'                  CurrencyCode = fields[10]'                  CurrencyName = fields[11]'                  Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                  PostalCodeFormat = fields[13]'                  PostalCodeRegex = fields[14]'                  Languages = fields[15].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                  Neighbours = fields[17].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  EquivalentFipsCode = fields[18]              };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo              {                  ISO_Alpha2 = fields[0]'                  ISO_Alpha3 = fields[1]'                  ISO_Numeric = fields[2]'                  FIPS = fields[3]'                  Country = fields[4]'                  Capital = fields[5]'                  Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                  Population = int.Parse(fields[7])'                  Continent = fields[8]'                  Tld = fields[9]'                  CurrencyCode = fields[10]'                  CurrencyName = fields[11]'                  Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                  PostalCodeFormat = fields[13]'                  PostalCodeRegex = fields[14]'                  Languages = fields[15].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                  Neighbours = fields[17].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  EquivalentFipsCode = fields[18]              };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo              {                  ISO_Alpha2 = fields[0]'                  ISO_Alpha3 = fields[1]'                  ISO_Numeric = fields[2]'                  FIPS = fields[3]'                  Country = fields[4]'                  Capital = fields[5]'                  Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                  Population = int.Parse(fields[7])'                  Continent = fields[8]'                  Tld = fields[9]'                  CurrencyCode = fields[10]'                  CurrencyName = fields[11]'                  Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                  PostalCodeFormat = fields[13]'                  PostalCodeRegex = fields[14]'                  Languages = fields[15].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                  Neighbours = fields[17].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  EquivalentFipsCode = fields[18]              };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo              {                  ISO_Alpha2 = fields[0]'                  ISO_Alpha3 = fields[1]'                  ISO_Numeric = fields[2]'                  FIPS = fields[3]'                  Country = fields[4]'                  Capital = fields[5]'                  Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                  Population = int.Parse(fields[7])'                  Continent = fields[8]'                  Tld = fields[9]'                  CurrencyCode = fields[10]'                  CurrencyName = fields[11]'                  Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                  PostalCodeFormat = fields[13]'                  PostalCodeRegex = fields[14]'                  Languages = fields[15].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                  Neighbours = fields[17].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  EquivalentFipsCode = fields[18]              };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo              {                  ISO_Alpha2 = fields[0]'                  ISO_Alpha3 = fields[1]'                  ISO_Numeric = fields[2]'                  FIPS = fields[3]'                  Country = fields[4]'                  Capital = fields[5]'                  Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                  Population = int.Parse(fields[7])'                  Continent = fields[8]'                  Tld = fields[9]'                  CurrencyCode = fields[10]'                  CurrencyName = fields[11]'                  Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                  PostalCodeFormat = fields[13]'                  PostalCodeRegex = fields[14]'                  Languages = fields[15].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                  Neighbours = fields[17].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  EquivalentFipsCode = fields[18]              };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo              {                  ISO_Alpha2 = fields[0]'                  ISO_Alpha3 = fields[1]'                  ISO_Numeric = fields[2]'                  FIPS = fields[3]'                  Country = fields[4]'                  Capital = fields[5]'                  Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                  Population = int.Parse(fields[7])'                  Continent = fields[8]'                  Tld = fields[9]'                  CurrencyCode = fields[10]'                  CurrencyName = fields[11]'                  Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                  PostalCodeFormat = fields[13]'                  PostalCodeRegex = fields[14]'                  Languages = fields[15].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                  Neighbours = fields[17].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  EquivalentFipsCode = fields[18]              };
Magic Number,NGeoNames.Parsers,FeatureCodeParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\FeatureCodeParser.cs,Parse,The following statement contains a magic number: return new FeatureCode              {                  Class = d[0].Equals("null"' StringComparison.OrdinalIgnoreCase) ? null : d[0]'                  Code = d.Length == 2 ? d[1] : null'                  Name = fields[1]'                  Description = fields[2]              };
Magic Number,NGeoNames.Parsers,FeatureCodeParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\FeatureCodeParser.cs,Parse,The following statement contains a magic number: return new FeatureCode              {                  Class = d[0].Equals("null"' StringComparison.OrdinalIgnoreCase) ? null : d[0]'                  Code = d.Length == 2 ? d[1] : null'                  Name = fields[1]'                  Description = fields[2]              };
Magic Number,NGeoNames.Parsers,GeoNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\GeoNameParser.cs,GeoNameParser,The following statement contains a magic number: _expectednumberoffields = useextendedfileformat ? 19 : 4;
Magic Number,NGeoNames.Parsers,GeoNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\GeoNameParser.cs,GeoNameParser,The following statement contains a magic number: _expectednumberoffields = useextendedfileformat ? 19 : 4;
Magic Number,NGeoNames.Parsers,GeoNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\GeoNameParser.cs,Parse,The following statement contains a magic number: switch (this.ExpectedNumberOfFields)              {                  case 4:                      return new GeoName                      {                          Id = int.Parse(fields[0])'                          Name = fields[1]'                          Latitude = double.Parse(fields[2]' CultureInfo.InvariantCulture)'                          Longitude = double.Parse(fields[3]' CultureInfo.InvariantCulture)'                      };                  case 19:                      return new GeoName                      {                          Id = int.Parse(fields[0])'                          Name = fields[1]'                          Latitude = double.Parse(fields[4]' CultureInfo.InvariantCulture)'                          Longitude = double.Parse(fields[5]' CultureInfo.InvariantCulture)'                      };              }
Magic Number,NGeoNames.Parsers,GeoNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\GeoNameParser.cs,Parse,The following statement contains a magic number: switch (this.ExpectedNumberOfFields)              {                  case 4:                      return new GeoName                      {                          Id = int.Parse(fields[0])'                          Name = fields[1]'                          Latitude = double.Parse(fields[2]' CultureInfo.InvariantCulture)'                          Longitude = double.Parse(fields[3]' CultureInfo.InvariantCulture)'                      };                  case 19:                      return new GeoName                      {                          Id = int.Parse(fields[0])'                          Name = fields[1]'                          Latitude = double.Parse(fields[4]' CultureInfo.InvariantCulture)'                          Longitude = double.Parse(fields[5]' CultureInfo.InvariantCulture)'                      };              }
Magic Number,NGeoNames.Parsers,GeoNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\GeoNameParser.cs,Parse,The following statement contains a magic number: switch (this.ExpectedNumberOfFields)              {                  case 4:                      return new GeoName                      {                          Id = int.Parse(fields[0])'                          Name = fields[1]'                          Latitude = double.Parse(fields[2]' CultureInfo.InvariantCulture)'                          Longitude = double.Parse(fields[3]' CultureInfo.InvariantCulture)'                      };                  case 19:                      return new GeoName                      {                          Id = int.Parse(fields[0])'                          Name = fields[1]'                          Latitude = double.Parse(fields[4]' CultureInfo.InvariantCulture)'                          Longitude = double.Parse(fields[5]' CultureInfo.InvariantCulture)'                      };              }
Magic Number,NGeoNames.Parsers,GeoNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\GeoNameParser.cs,Parse,The following statement contains a magic number: switch (this.ExpectedNumberOfFields)              {                  case 4:                      return new GeoName                      {                          Id = int.Parse(fields[0])'                          Name = fields[1]'                          Latitude = double.Parse(fields[2]' CultureInfo.InvariantCulture)'                          Longitude = double.Parse(fields[3]' CultureInfo.InvariantCulture)'                      };                  case 19:                      return new GeoName                      {                          Id = int.Parse(fields[0])'                          Name = fields[1]'                          Latitude = double.Parse(fields[4]' CultureInfo.InvariantCulture)'                          Longitude = double.Parse(fields[5]' CultureInfo.InvariantCulture)'                      };              }
Magic Number,NGeoNames.Parsers,GeoNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\GeoNameParser.cs,Parse,The following statement contains a magic number: switch (this.ExpectedNumberOfFields)              {                  case 4:                      return new GeoName                      {                          Id = int.Parse(fields[0])'                          Name = fields[1]'                          Latitude = double.Parse(fields[2]' CultureInfo.InvariantCulture)'                          Longitude = double.Parse(fields[3]' CultureInfo.InvariantCulture)'                      };                  case 19:                      return new GeoName                      {                          Id = int.Parse(fields[0])'                          Name = fields[1]'                          Latitude = double.Parse(fields[4]' CultureInfo.InvariantCulture)'                          Longitude = double.Parse(fields[5]' CultureInfo.InvariantCulture)'                      };              }
Magic Number,NGeoNames.Parsers,GeoNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\GeoNameParser.cs,Parse,The following statement contains a magic number: switch (this.ExpectedNumberOfFields)              {                  case 4:                      return new GeoName                      {                          Id = int.Parse(fields[0])'                          Name = fields[1]'                          Latitude = double.Parse(fields[2]' CultureInfo.InvariantCulture)'                          Longitude = double.Parse(fields[3]' CultureInfo.InvariantCulture)'                      };                  case 19:                      return new GeoName                      {                          Id = int.Parse(fields[0])'                          Name = fields[1]'                          Latitude = double.Parse(fields[4]' CultureInfo.InvariantCulture)'                          Longitude = double.Parse(fields[5]' CultureInfo.InvariantCulture)'                      };              }
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName              {                  Id = int.Parse(fields[0])'                  Name = fields[1]'                  NameASCII = fields[2]'                  AlternateNames = fields[3].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Latitude = double.Parse(fields[4]' CultureInfo.InvariantCulture)'                  Longitude = double.Parse(fields[5]' CultureInfo.InvariantCulture)'                  FeatureClass = fields[6]'                  FeatureCode = fields[7]'                  CountryCode = fields[8]'                  AlternateCountryCodes = fields[9].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                  Population = long.Parse(fields[14])'                  Elevation = fields[15].Length > 0 ? (int?)int.Parse(fields[15]) : null'                  Dem = int.Parse(fields[16])'                  Timezone = fields[17].Replace("_"' " ")'                  ModificationDate = DateTime.ParseExact(fields[18]' "yyyy-MM-dd"' CultureInfo.InvariantCulture)              };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName              {                  Id = int.Parse(fields[0])'                  Name = fields[1]'                  NameASCII = fields[2]'                  AlternateNames = fields[3].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Latitude = double.Parse(fields[4]' CultureInfo.InvariantCulture)'                  Longitude = double.Parse(fields[5]' CultureInfo.InvariantCulture)'                  FeatureClass = fields[6]'                  FeatureCode = fields[7]'                  CountryCode = fields[8]'                  AlternateCountryCodes = fields[9].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                  Population = long.Parse(fields[14])'                  Elevation = fields[15].Length > 0 ? (int?)int.Parse(fields[15]) : null'                  Dem = int.Parse(fields[16])'                  Timezone = fields[17].Replace("_"' " ")'                  ModificationDate = DateTime.ParseExact(fields[18]' "yyyy-MM-dd"' CultureInfo.InvariantCulture)              };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName              {                  Id = int.Parse(fields[0])'                  Name = fields[1]'                  NameASCII = fields[2]'                  AlternateNames = fields[3].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Latitude = double.Parse(fields[4]' CultureInfo.InvariantCulture)'                  Longitude = double.Parse(fields[5]' CultureInfo.InvariantCulture)'                  FeatureClass = fields[6]'                  FeatureCode = fields[7]'                  CountryCode = fields[8]'                  AlternateCountryCodes = fields[9].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                  Population = long.Parse(fields[14])'                  Elevation = fields[15].Length > 0 ? (int?)int.Parse(fields[15]) : null'                  Dem = int.Parse(fields[16])'                  Timezone = fields[17].Replace("_"' " ")'                  ModificationDate = DateTime.ParseExact(fields[18]' "yyyy-MM-dd"' CultureInfo.InvariantCulture)              };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName              {                  Id = int.Parse(fields[0])'                  Name = fields[1]'                  NameASCII = fields[2]'                  AlternateNames = fields[3].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Latitude = double.Parse(fields[4]' CultureInfo.InvariantCulture)'                  Longitude = double.Parse(fields[5]' CultureInfo.InvariantCulture)'                  FeatureClass = fields[6]'                  FeatureCode = fields[7]'                  CountryCode = fields[8]'                  AlternateCountryCodes = fields[9].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                  Population = long.Parse(fields[14])'                  Elevation = fields[15].Length > 0 ? (int?)int.Parse(fields[15]) : null'                  Dem = int.Parse(fields[16])'                  Timezone = fields[17].Replace("_"' " ")'                  ModificationDate = DateTime.ParseExact(fields[18]' "yyyy-MM-dd"' CultureInfo.InvariantCulture)              };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName              {                  Id = int.Parse(fields[0])'                  Name = fields[1]'                  NameASCII = fields[2]'                  AlternateNames = fields[3].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Latitude = double.Parse(fields[4]' CultureInfo.InvariantCulture)'                  Longitude = double.Parse(fields[5]' CultureInfo.InvariantCulture)'                  FeatureClass = fields[6]'                  FeatureCode = fields[7]'                  CountryCode = fields[8]'                  AlternateCountryCodes = fields[9].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                  Population = long.Parse(fields[14])'                  Elevation = fields[15].Length > 0 ? (int?)int.Parse(fields[15]) : null'                  Dem = int.Parse(fields[16])'                  Timezone = fields[17].Replace("_"' " ")'                  ModificationDate = DateTime.ParseExact(fields[18]' "yyyy-MM-dd"' CultureInfo.InvariantCulture)              };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName              {                  Id = int.Parse(fields[0])'                  Name = fields[1]'                  NameASCII = fields[2]'                  AlternateNames = fields[3].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Latitude = double.Parse(fields[4]' CultureInfo.InvariantCulture)'                  Longitude = double.Parse(fields[5]' CultureInfo.InvariantCulture)'                  FeatureClass = fields[6]'                  FeatureCode = fields[7]'                  CountryCode = fields[8]'                  AlternateCountryCodes = fields[9].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                  Population = long.Parse(fields[14])'                  Elevation = fields[15].Length > 0 ? (int?)int.Parse(fields[15]) : null'                  Dem = int.Parse(fields[16])'                  Timezone = fields[17].Replace("_"' " ")'                  ModificationDate = DateTime.ParseExact(fields[18]' "yyyy-MM-dd"' CultureInfo.InvariantCulture)              };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName              {                  Id = int.Parse(fields[0])'                  Name = fields[1]'                  NameASCII = fields[2]'                  AlternateNames = fields[3].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Latitude = double.Parse(fields[4]' CultureInfo.InvariantCulture)'                  Longitude = double.Parse(fields[5]' CultureInfo.InvariantCulture)'                  FeatureClass = fields[6]'                  FeatureCode = fields[7]'                  CountryCode = fields[8]'                  AlternateCountryCodes = fields[9].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                  Population = long.Parse(fields[14])'                  Elevation = fields[15].Length > 0 ? (int?)int.Parse(fields[15]) : null'                  Dem = int.Parse(fields[16])'                  Timezone = fields[17].Replace("_"' " ")'                  ModificationDate = DateTime.ParseExact(fields[18]' "yyyy-MM-dd"' CultureInfo.InvariantCulture)              };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName              {                  Id = int.Parse(fields[0])'                  Name = fields[1]'                  NameASCII = fields[2]'                  AlternateNames = fields[3].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Latitude = double.Parse(fields[4]' CultureInfo.InvariantCulture)'                  Longitude = double.Parse(fields[5]' CultureInfo.InvariantCulture)'                  FeatureClass = fields[6]'                  FeatureCode = fields[7]'                  CountryCode = fields[8]'                  AlternateCountryCodes = fields[9].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                  Population = long.Parse(fields[14])'                  Elevation = fields[15].Length > 0 ? (int?)int.Parse(fields[15]) : null'                  Dem = int.Parse(fields[16])'                  Timezone = fields[17].Replace("_"' " ")'                  ModificationDate = DateTime.ParseExact(fields[18]' "yyyy-MM-dd"' CultureInfo.InvariantCulture)              };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName              {                  Id = int.Parse(fields[0])'                  Name = fields[1]'                  NameASCII = fields[2]'                  AlternateNames = fields[3].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Latitude = double.Parse(fields[4]' CultureInfo.InvariantCulture)'                  Longitude = double.Parse(fields[5]' CultureInfo.InvariantCulture)'                  FeatureClass = fields[6]'                  FeatureCode = fields[7]'                  CountryCode = fields[8]'                  AlternateCountryCodes = fields[9].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                  Population = long.Parse(fields[14])'                  Elevation = fields[15].Length > 0 ? (int?)int.Parse(fields[15]) : null'                  Dem = int.Parse(fields[16])'                  Timezone = fields[17].Replace("_"' " ")'                  ModificationDate = DateTime.ParseExact(fields[18]' "yyyy-MM-dd"' CultureInfo.InvariantCulture)              };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName              {                  Id = int.Parse(fields[0])'                  Name = fields[1]'                  NameASCII = fields[2]'                  AlternateNames = fields[3].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Latitude = double.Parse(fields[4]' CultureInfo.InvariantCulture)'                  Longitude = double.Parse(fields[5]' CultureInfo.InvariantCulture)'                  FeatureClass = fields[6]'                  FeatureCode = fields[7]'                  CountryCode = fields[8]'                  AlternateCountryCodes = fields[9].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                  Population = long.Parse(fields[14])'                  Elevation = fields[15].Length > 0 ? (int?)int.Parse(fields[15]) : null'                  Dem = int.Parse(fields[16])'                  Timezone = fields[17].Replace("_"' " ")'                  ModificationDate = DateTime.ParseExact(fields[18]' "yyyy-MM-dd"' CultureInfo.InvariantCulture)              };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName              {                  Id = int.Parse(fields[0])'                  Name = fields[1]'                  NameASCII = fields[2]'                  AlternateNames = fields[3].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Latitude = double.Parse(fields[4]' CultureInfo.InvariantCulture)'                  Longitude = double.Parse(fields[5]' CultureInfo.InvariantCulture)'                  FeatureClass = fields[6]'                  FeatureCode = fields[7]'                  CountryCode = fields[8]'                  AlternateCountryCodes = fields[9].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                  Population = long.Parse(fields[14])'                  Elevation = fields[15].Length > 0 ? (int?)int.Parse(fields[15]) : null'                  Dem = int.Parse(fields[16])'                  Timezone = fields[17].Replace("_"' " ")'                  ModificationDate = DateTime.ParseExact(fields[18]' "yyyy-MM-dd"' CultureInfo.InvariantCulture)              };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName              {                  Id = int.Parse(fields[0])'                  Name = fields[1]'                  NameASCII = fields[2]'                  AlternateNames = fields[3].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Latitude = double.Parse(fields[4]' CultureInfo.InvariantCulture)'                  Longitude = double.Parse(fields[5]' CultureInfo.InvariantCulture)'                  FeatureClass = fields[6]'                  FeatureCode = fields[7]'                  CountryCode = fields[8]'                  AlternateCountryCodes = fields[9].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                  Population = long.Parse(fields[14])'                  Elevation = fields[15].Length > 0 ? (int?)int.Parse(fields[15]) : null'                  Dem = int.Parse(fields[16])'                  Timezone = fields[17].Replace("_"' " ")'                  ModificationDate = DateTime.ParseExact(fields[18]' "yyyy-MM-dd"' CultureInfo.InvariantCulture)              };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName              {                  Id = int.Parse(fields[0])'                  Name = fields[1]'                  NameASCII = fields[2]'                  AlternateNames = fields[3].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Latitude = double.Parse(fields[4]' CultureInfo.InvariantCulture)'                  Longitude = double.Parse(fields[5]' CultureInfo.InvariantCulture)'                  FeatureClass = fields[6]'                  FeatureCode = fields[7]'                  CountryCode = fields[8]'                  AlternateCountryCodes = fields[9].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                  Population = long.Parse(fields[14])'                  Elevation = fields[15].Length > 0 ? (int?)int.Parse(fields[15]) : null'                  Dem = int.Parse(fields[16])'                  Timezone = fields[17].Replace("_"' " ")'                  ModificationDate = DateTime.ParseExact(fields[18]' "yyyy-MM-dd"' CultureInfo.InvariantCulture)              };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName              {                  Id = int.Parse(fields[0])'                  Name = fields[1]'                  NameASCII = fields[2]'                  AlternateNames = fields[3].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Latitude = double.Parse(fields[4]' CultureInfo.InvariantCulture)'                  Longitude = double.Parse(fields[5]' CultureInfo.InvariantCulture)'                  FeatureClass = fields[6]'                  FeatureCode = fields[7]'                  CountryCode = fields[8]'                  AlternateCountryCodes = fields[9].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                  Population = long.Parse(fields[14])'                  Elevation = fields[15].Length > 0 ? (int?)int.Parse(fields[15]) : null'                  Dem = int.Parse(fields[16])'                  Timezone = fields[17].Replace("_"' " ")'                  ModificationDate = DateTime.ParseExact(fields[18]' "yyyy-MM-dd"' CultureInfo.InvariantCulture)              };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName              {                  Id = int.Parse(fields[0])'                  Name = fields[1]'                  NameASCII = fields[2]'                  AlternateNames = fields[3].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Latitude = double.Parse(fields[4]' CultureInfo.InvariantCulture)'                  Longitude = double.Parse(fields[5]' CultureInfo.InvariantCulture)'                  FeatureClass = fields[6]'                  FeatureCode = fields[7]'                  CountryCode = fields[8]'                  AlternateCountryCodes = fields[9].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                  Population = long.Parse(fields[14])'                  Elevation = fields[15].Length > 0 ? (int?)int.Parse(fields[15]) : null'                  Dem = int.Parse(fields[16])'                  Timezone = fields[17].Replace("_"' " ")'                  ModificationDate = DateTime.ParseExact(fields[18]' "yyyy-MM-dd"' CultureInfo.InvariantCulture)              };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName              {                  Id = int.Parse(fields[0])'                  Name = fields[1]'                  NameASCII = fields[2]'                  AlternateNames = fields[3].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Latitude = double.Parse(fields[4]' CultureInfo.InvariantCulture)'                  Longitude = double.Parse(fields[5]' CultureInfo.InvariantCulture)'                  FeatureClass = fields[6]'                  FeatureCode = fields[7]'                  CountryCode = fields[8]'                  AlternateCountryCodes = fields[9].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                  Population = long.Parse(fields[14])'                  Elevation = fields[15].Length > 0 ? (int?)int.Parse(fields[15]) : null'                  Dem = int.Parse(fields[16])'                  Timezone = fields[17].Replace("_"' " ")'                  ModificationDate = DateTime.ParseExact(fields[18]' "yyyy-MM-dd"' CultureInfo.InvariantCulture)              };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName              {                  Id = int.Parse(fields[0])'                  Name = fields[1]'                  NameASCII = fields[2]'                  AlternateNames = fields[3].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Latitude = double.Parse(fields[4]' CultureInfo.InvariantCulture)'                  Longitude = double.Parse(fields[5]' CultureInfo.InvariantCulture)'                  FeatureClass = fields[6]'                  FeatureCode = fields[7]'                  CountryCode = fields[8]'                  AlternateCountryCodes = fields[9].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                  Population = long.Parse(fields[14])'                  Elevation = fields[15].Length > 0 ? (int?)int.Parse(fields[15]) : null'                  Dem = int.Parse(fields[16])'                  Timezone = fields[17].Replace("_"' " ")'                  ModificationDate = DateTime.ParseExact(fields[18]' "yyyy-MM-dd"' CultureInfo.InvariantCulture)              };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName              {                  Id = int.Parse(fields[0])'                  Name = fields[1]'                  NameASCII = fields[2]'                  AlternateNames = fields[3].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Latitude = double.Parse(fields[4]' CultureInfo.InvariantCulture)'                  Longitude = double.Parse(fields[5]' CultureInfo.InvariantCulture)'                  FeatureClass = fields[6]'                  FeatureCode = fields[7]'                  CountryCode = fields[8]'                  AlternateCountryCodes = fields[9].Split(csv' StringSplitOptions.RemoveEmptyEntries)'                  Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                  Population = long.Parse(fields[14])'                  Elevation = fields[15].Length > 0 ? (int?)int.Parse(fields[15]) : null'                  Dem = int.Parse(fields[16])'                  Timezone = fields[17].Replace("_"' " ")'                  ModificationDate = DateTime.ParseExact(fields[18]' "yyyy-MM-dd"' CultureInfo.InvariantCulture)              };
Magic Number,NGeoNames.Parsers,HierarchyParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\HierarchyParser.cs,Parse,The following statement contains a magic number: return new HierarchyNode              {                  ParentId = int.Parse(fields[0])'                  ChildId = int.Parse(fields[1])'                  Type = fields[2]              };
Magic Number,NGeoNames.Parsers,ISOLanguageCodeParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\ISOLanguageCodeParser.cs,Parse,The following statement contains a magic number: return new ISOLanguageCode              {                  ISO_639_3 = fields[0]'                  ISO_639_2 = fields[1]'                  ISO_639_1 = fields[2]'                  LanguageName = fields[3]              };
Magic Number,NGeoNames.Parsers,ISOLanguageCodeParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\ISOLanguageCodeParser.cs,Parse,The following statement contains a magic number: return new ISOLanguageCode              {                  ISO_639_3 = fields[0]'                  ISO_639_2 = fields[1]'                  ISO_639_1 = fields[2]'                  LanguageName = fields[3]              };
Magic Number,NGeoNames.Parsers,PostalcodeParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\PostalcodeParser.cs,Parse,The following statement contains a magic number: return new Postalcode              {                  CountryCode = fields[0]'                  PostalCode = fields[1]'                  PlaceName = fields[2]'                  AdminName = new[] { fields[3]' fields[5]' fields[7] }'                  AdminCode = new[] { fields[4]' fields[6]' fields[8] }'                  Latitude = fields[9].Length > 0 ? double.Parse(fields[9]' CultureInfo.InvariantCulture) : double.NaN'                  Longitude = fields[10].Length > 0 ? double.Parse(fields[10]' CultureInfo.InvariantCulture) : double.NaN'                  Accuracy = fields[11].Length > 0 ? (int?)int.Parse(fields[11]) : null              };
Magic Number,NGeoNames.Parsers,PostalcodeParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\PostalcodeParser.cs,Parse,The following statement contains a magic number: return new Postalcode              {                  CountryCode = fields[0]'                  PostalCode = fields[1]'                  PlaceName = fields[2]'                  AdminName = new[] { fields[3]' fields[5]' fields[7] }'                  AdminCode = new[] { fields[4]' fields[6]' fields[8] }'                  Latitude = fields[9].Length > 0 ? double.Parse(fields[9]' CultureInfo.InvariantCulture) : double.NaN'                  Longitude = fields[10].Length > 0 ? double.Parse(fields[10]' CultureInfo.InvariantCulture) : double.NaN'                  Accuracy = fields[11].Length > 0 ? (int?)int.Parse(fields[11]) : null              };
Magic Number,NGeoNames.Parsers,PostalcodeParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\PostalcodeParser.cs,Parse,The following statement contains a magic number: return new Postalcode              {                  CountryCode = fields[0]'                  PostalCode = fields[1]'                  PlaceName = fields[2]'                  AdminName = new[] { fields[3]' fields[5]' fields[7] }'                  AdminCode = new[] { fields[4]' fields[6]' fields[8] }'                  Latitude = fields[9].Length > 0 ? double.Parse(fields[9]' CultureInfo.InvariantCulture) : double.NaN'                  Longitude = fields[10].Length > 0 ? double.Parse(fields[10]' CultureInfo.InvariantCulture) : double.NaN'                  Accuracy = fields[11].Length > 0 ? (int?)int.Parse(fields[11]) : null              };
Magic Number,NGeoNames.Parsers,PostalcodeParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\PostalcodeParser.cs,Parse,The following statement contains a magic number: return new Postalcode              {                  CountryCode = fields[0]'                  PostalCode = fields[1]'                  PlaceName = fields[2]'                  AdminName = new[] { fields[3]' fields[5]' fields[7] }'                  AdminCode = new[] { fields[4]' fields[6]' fields[8] }'                  Latitude = fields[9].Length > 0 ? double.Parse(fields[9]' CultureInfo.InvariantCulture) : double.NaN'                  Longitude = fields[10].Length > 0 ? double.Parse(fields[10]' CultureInfo.InvariantCulture) : double.NaN'                  Accuracy = fields[11].Length > 0 ? (int?)int.Parse(fields[11]) : null              };
Magic Number,NGeoNames.Parsers,PostalcodeParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\PostalcodeParser.cs,Parse,The following statement contains a magic number: return new Postalcode              {                  CountryCode = fields[0]'                  PostalCode = fields[1]'                  PlaceName = fields[2]'                  AdminName = new[] { fields[3]' fields[5]' fields[7] }'                  AdminCode = new[] { fields[4]' fields[6]' fields[8] }'                  Latitude = fields[9].Length > 0 ? double.Parse(fields[9]' CultureInfo.InvariantCulture) : double.NaN'                  Longitude = fields[10].Length > 0 ? double.Parse(fields[10]' CultureInfo.InvariantCulture) : double.NaN'                  Accuracy = fields[11].Length > 0 ? (int?)int.Parse(fields[11]) : null              };
Magic Number,NGeoNames.Parsers,PostalcodeParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\PostalcodeParser.cs,Parse,The following statement contains a magic number: return new Postalcode              {                  CountryCode = fields[0]'                  PostalCode = fields[1]'                  PlaceName = fields[2]'                  AdminName = new[] { fields[3]' fields[5]' fields[7] }'                  AdminCode = new[] { fields[4]' fields[6]' fields[8] }'                  Latitude = fields[9].Length > 0 ? double.Parse(fields[9]' CultureInfo.InvariantCulture) : double.NaN'                  Longitude = fields[10].Length > 0 ? double.Parse(fields[10]' CultureInfo.InvariantCulture) : double.NaN'                  Accuracy = fields[11].Length > 0 ? (int?)int.Parse(fields[11]) : null              };
Magic Number,NGeoNames.Parsers,PostalcodeParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\PostalcodeParser.cs,Parse,The following statement contains a magic number: return new Postalcode              {                  CountryCode = fields[0]'                  PostalCode = fields[1]'                  PlaceName = fields[2]'                  AdminName = new[] { fields[3]' fields[5]' fields[7] }'                  AdminCode = new[] { fields[4]' fields[6]' fields[8] }'                  Latitude = fields[9].Length > 0 ? double.Parse(fields[9]' CultureInfo.InvariantCulture) : double.NaN'                  Longitude = fields[10].Length > 0 ? double.Parse(fields[10]' CultureInfo.InvariantCulture) : double.NaN'                  Accuracy = fields[11].Length > 0 ? (int?)int.Parse(fields[11]) : null              };
Magic Number,NGeoNames.Parsers,PostalcodeParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\PostalcodeParser.cs,Parse,The following statement contains a magic number: return new Postalcode              {                  CountryCode = fields[0]'                  PostalCode = fields[1]'                  PlaceName = fields[2]'                  AdminName = new[] { fields[3]' fields[5]' fields[7] }'                  AdminCode = new[] { fields[4]' fields[6]' fields[8] }'                  Latitude = fields[9].Length > 0 ? double.Parse(fields[9]' CultureInfo.InvariantCulture) : double.NaN'                  Longitude = fields[10].Length > 0 ? double.Parse(fields[10]' CultureInfo.InvariantCulture) : double.NaN'                  Accuracy = fields[11].Length > 0 ? (int?)int.Parse(fields[11]) : null              };
Magic Number,NGeoNames.Parsers,PostalcodeParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\PostalcodeParser.cs,Parse,The following statement contains a magic number: return new Postalcode              {                  CountryCode = fields[0]'                  PostalCode = fields[1]'                  PlaceName = fields[2]'                  AdminName = new[] { fields[3]' fields[5]' fields[7] }'                  AdminCode = new[] { fields[4]' fields[6]' fields[8] }'                  Latitude = fields[9].Length > 0 ? double.Parse(fields[9]' CultureInfo.InvariantCulture) : double.NaN'                  Longitude = fields[10].Length > 0 ? double.Parse(fields[10]' CultureInfo.InvariantCulture) : double.NaN'                  Accuracy = fields[11].Length > 0 ? (int?)int.Parse(fields[11]) : null              };
Magic Number,NGeoNames.Parsers,PostalcodeParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\PostalcodeParser.cs,Parse,The following statement contains a magic number: return new Postalcode              {                  CountryCode = fields[0]'                  PostalCode = fields[1]'                  PlaceName = fields[2]'                  AdminName = new[] { fields[3]' fields[5]' fields[7] }'                  AdminCode = new[] { fields[4]' fields[6]' fields[8] }'                  Latitude = fields[9].Length > 0 ? double.Parse(fields[9]' CultureInfo.InvariantCulture) : double.NaN'                  Longitude = fields[10].Length > 0 ? double.Parse(fields[10]' CultureInfo.InvariantCulture) : double.NaN'                  Accuracy = fields[11].Length > 0 ? (int?)int.Parse(fields[11]) : null              };
Magic Number,NGeoNames.Parsers,PostalcodeParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\PostalcodeParser.cs,Parse,The following statement contains a magic number: return new Postalcode              {                  CountryCode = fields[0]'                  PostalCode = fields[1]'                  PlaceName = fields[2]'                  AdminName = new[] { fields[3]' fields[5]' fields[7] }'                  AdminCode = new[] { fields[4]' fields[6]' fields[8] }'                  Latitude = fields[9].Length > 0 ? double.Parse(fields[9]' CultureInfo.InvariantCulture) : double.NaN'                  Longitude = fields[10].Length > 0 ? double.Parse(fields[10]' CultureInfo.InvariantCulture) : double.NaN'                  Accuracy = fields[11].Length > 0 ? (int?)int.Parse(fields[11]) : null              };
Magic Number,NGeoNames.Parsers,PostalcodeParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\PostalcodeParser.cs,Parse,The following statement contains a magic number: return new Postalcode              {                  CountryCode = fields[0]'                  PostalCode = fields[1]'                  PlaceName = fields[2]'                  AdminName = new[] { fields[3]' fields[5]' fields[7] }'                  AdminCode = new[] { fields[4]' fields[6]' fields[8] }'                  Latitude = fields[9].Length > 0 ? double.Parse(fields[9]' CultureInfo.InvariantCulture) : double.NaN'                  Longitude = fields[10].Length > 0 ? double.Parse(fields[10]' CultureInfo.InvariantCulture) : double.NaN'                  Accuracy = fields[11].Length > 0 ? (int?)int.Parse(fields[11]) : null              };
Magic Number,NGeoNames.Parsers,PostalcodeParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\PostalcodeParser.cs,Parse,The following statement contains a magic number: return new Postalcode              {                  CountryCode = fields[0]'                  PostalCode = fields[1]'                  PlaceName = fields[2]'                  AdminName = new[] { fields[3]' fields[5]' fields[7] }'                  AdminCode = new[] { fields[4]' fields[6]' fields[8] }'                  Latitude = fields[9].Length > 0 ? double.Parse(fields[9]' CultureInfo.InvariantCulture) : double.NaN'                  Longitude = fields[10].Length > 0 ? double.Parse(fields[10]' CultureInfo.InvariantCulture) : double.NaN'                  Accuracy = fields[11].Length > 0 ? (int?)int.Parse(fields[11]) : null              };
Magic Number,NGeoNames.Parsers,TimeZoneParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\TimeZoneParser.cs,Parse,The following statement contains a magic number: return new TimeZone              {                  CountryCode = fields[0]'                  TimeZoneId = fields[1].Replace("_"' " ")'                  GMTOffset = float.Parse(fields[2]' CultureInfo.InvariantCulture)'                  DSTOffset = float.Parse(fields[3]' CultureInfo.InvariantCulture)'                  RawOffset = float.Parse(fields[4]' CultureInfo.InvariantCulture)              };
Magic Number,NGeoNames.Parsers,TimeZoneParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\TimeZoneParser.cs,Parse,The following statement contains a magic number: return new TimeZone              {                  CountryCode = fields[0]'                  TimeZoneId = fields[1].Replace("_"' " ")'                  GMTOffset = float.Parse(fields[2]' CultureInfo.InvariantCulture)'                  DSTOffset = float.Parse(fields[3]' CultureInfo.InvariantCulture)'                  RawOffset = float.Parse(fields[4]' CultureInfo.InvariantCulture)              };
Magic Number,NGeoNames.Parsers,TimeZoneParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\TimeZoneParser.cs,Parse,The following statement contains a magic number: return new TimeZone              {                  CountryCode = fields[0]'                  TimeZoneId = fields[1].Replace("_"' " ")'                  GMTOffset = float.Parse(fields[2]' CultureInfo.InvariantCulture)'                  DSTOffset = float.Parse(fields[3]' CultureInfo.InvariantCulture)'                  RawOffset = float.Parse(fields[4]' CultureInfo.InvariantCulture)              };
Missing Default,NGeoNames,FileUtil,C:\repos\RobThree_NGeoNames\NGeoNames\FileType.cs,GetFileTypeFromExtension,The following switch statement is missing a default case: switch (fi.Extension.ToLowerInvariant())              {                  case ".txt":                      return FileType.Plain;                  case ".gz":                      return FileType.GZip;              }
Missing Default,NGeoNames,GeoFileWriter,C:\repos\RobThree_NGeoNames\NGeoNames\GeoFileWriter.cs,GetStream,The following switch statement is missing a default case: switch (writeastype)              {                  case FileType.Plain:                      return filestream;                  case FileType.GZip:                      return new GZipStream(filestream' CompressionLevel.Optimal);              }
Missing Default,NGeoNames,GeoFileReader,C:\repos\RobThree_NGeoNames\NGeoNames\GeoFileReader.cs,GetStream,The following switch statement is missing a default case: switch (readastype)              {                  case FileType.Plain:                      return filestream;                  case FileType.GZip:                      return new GZipStream(filestream' CompressionMode.Decompress);              }
Missing Default,NGeoNames.Parsers,GeoNameParser,C:\repos\RobThree_NGeoNames\NGeoNames\Parsers\GeoNameParser.cs,Parse,The following switch statement is missing a default case: switch (this.ExpectedNumberOfFields)              {                  case 4:                      return new GeoName                      {                          Id = int.Parse(fields[0])'                          Name = fields[1]'                          Latitude = double.Parse(fields[2]' CultureInfo.InvariantCulture)'                          Longitude = double.Parse(fields[3]' CultureInfo.InvariantCulture)'                      };                  case 19:                      return new GeoName                      {                          Id = int.Parse(fields[0])'                          Name = fields[1]'                          Latitude = double.Parse(fields[4]' CultureInfo.InvariantCulture)'                          Longitude = double.Parse(fields[5]' CultureInfo.InvariantCulture)'                      };              }
