Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,NGeoNames,GeoFileWriter,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\GeoFileWriter.cs,WriteRecords,The method has 5 parameters. Parameters: path' values' composer' filetype' lineseparator
Long Statement,NGeoNames.Composers,AlternateNameComposer,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Composers\AlternateNameComposer.cs,Compose,The length of the statement  "            return string.Join(FieldSeparator.ToString()' value.Id' value.GeoNameId' string.IsNullOrEmpty(value.Type) ? value.ISOLanguage : value.Type'" is 139.
Long Statement,NGeoNames.Composers,AlternateNameComposer,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Composers\AlternateNameComposer.cs,Compose,The length of the statement  "                value.Name' Bool2String(value.IsPreferredName)' Bool2String(value.IsShortName)' Bool2String(value.IsColloquial)' Bool2String(value.IsHistoric));" is 144.
Long Statement,NGeoNames.Composers,AlternateNameV2Composer,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Composers\AlternateNameV2Composer.cs,Compose,The length of the statement  "            return string.Join(FieldSeparator.ToString()' value.Id' value.GeoNameId' string.IsNullOrEmpty(value.Type) ? value.ISOLanguage : value.Type'" is 139.
Long Statement,NGeoNames.Composers,AlternateNameV2Composer,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Composers\AlternateNameV2Composer.cs,Compose,The length of the statement  "                value.Name' Bool2String(value.IsPreferredName)' Bool2String(value.IsShortName)' Bool2String(value.IsColloquial)' Bool2String(value.IsHistoric)'" is 143.
Long Statement,NGeoNames.Composers,CountryInfoComposer,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Composers\CountryInfoComposer.cs,Compose,The length of the statement  "            return string.Join(FieldSeparator.ToString()' value.ISO_Alpha2' value.ISO_Alpha3' value.ISO_Numeric' value.FIPS' value.Country'" is 127.
Long Statement,NGeoNames.Composers,CountryInfoComposer,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Composers\CountryInfoComposer.cs,Compose,The length of the statement  "                value.Capital' value.Area' value.Population' value.Continent' value.Tld' value.CurrencyCode' value.CurrencyName' value.Phone'" is 125.
Long Statement,NGeoNames.Composers,CountryInfoComposer,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Composers\CountryInfoComposer.cs,Compose,The length of the statement  "                value.PostalCodeFormat' value.PostalCodeRegex' ArrayToValue(value.Languages)' value.GeoNameId' ArrayToValue(value.Neighbours)' value.EquivalentFipsCode);" is 153.
Long Statement,NGeoNames.Composers,ExtendedGeoNameComposer,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Composers\ExtendedGeoNameComposer.cs,Compose,The length of the statement  "            return string.Join(FieldSeparator.ToString()' value.Id' value.Name' value.NameASCII' ArrayToValue(value.AlternateNames)'" is 120.
Long Statement,NGeoNames.Composers,ExtendedGeoNameComposer,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Composers\ExtendedGeoNameComposer.cs,Compose,The length of the statement  "                    value.Latitude.ToString(CultureInfo.InvariantCulture)' value.Longitude.ToString(CultureInfo.InvariantCulture)' value.FeatureClass' value.FeatureCode' value.CountryCode'" is 168.
Long Statement,NGeoNames.Composers,ExtendedGeoNameComposer,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Composers\ExtendedGeoNameComposer.cs,Compose,The length of the statement  "                    ArrayToValue(value.AlternateCountryCodes)' GetArrayValue(value.Admincodes' 0)' GetArrayValue(value.Admincodes' 1)' GetArrayValue(value.Admincodes' 2)' GetArrayValue(value.Admincodes' 3)'" is 186.
Long Statement,NGeoNames.Composers,ExtendedGeoNameComposer,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Composers\ExtendedGeoNameComposer.cs,Compose,The length of the statement  "                    value.Population' value.Elevation' value.Dem' TimeZoneToString(value.Timezone)' DateTimeToString(value.ModificationDate));" is 122.
Long Statement,NGeoNames.Composers,GeoNameComposer,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Composers\GeoNameComposer.cs,Compose,The length of the statement  "                return string.Join(FieldSeparator.ToString()' value.Id' value.Name' null' null' DoubleToString(value.Latitude)' DoubleToString(value.Longitude)'" is 144.
Long Statement,NGeoNames.Composers,GeoNameComposer,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Composers\GeoNameComposer.cs,Compose,The length of the statement  "                return string.Join(FieldSeparator.ToString()' value.Id' value.Name' DoubleToString(value.Latitude)' DoubleToString(value.Longitude));" is 133.
Long Statement,NGeoNames.Composers,TimeZoneComposer,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Composers\TimeZoneComposer.cs,Compose,The length of the statement  "            return string.Join(FieldSeparator.ToString()' value.CountryCode' TimeZoneToString(value.TimeZoneId)' FloatToString(value.GMTOffset)' " is 132.
Long Statement,NGeoNames,GeoFileReader,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\GeoFileReader.cs,ReadRecords,The length of the statement  "                    if ((c > parser.SkipLines) && (line.Length > 0)  && (!parser.HasComments || (parser.HasComments && !line.StartsWith("#"))))" is 123.
Long Statement,NGeoNames,GeoFileReader,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\GeoFileReader.cs,ReadRecords,The length of the statement  "                            throw new ParserException(string.Format("Expected number of fields mismatch; expected: {0}' read: {1}' line: {2}"' parser.ExpectedNumberOfFields' data.Length' c));" is 163.
Long Statement,NGeoNames,GeoUtil,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\GeoUtil.cs,DistanceTo,The length of the statement  "            return radiusofearth * (2 * Math.Asin(Math.Min(1' Math.Sqrt(Math.Sin(dLat / 2) * Math.Sin(dLat / 2) + Math.Cos(GeoUtil.Deg2Rad(src.Latitude)) * Math.Cos(GeoUtil.Deg2Rad(dest.Latitude)) * Math.Sin(dLon / 2) * Math.Sin(dLon / 2)))));" is 231.
Complex Conditional,NGeoNames,GeoFileReader,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\GeoFileReader.cs,ReadRecords,The conditional expression  "(c > parser.SkipLines) && (line.Length > 0)  && (!parser.HasComments || (parser.HasComments && !line.StartsWith("#")))"  is complex.
Magic Number,NGeoNames.Composers,ExtendedGeoNameComposer,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Composers\ExtendedGeoNameComposer.cs,Compose,The following statement contains a magic number: return string.Join(FieldSeparator.ToString()' value.Id' value.Name' value.NameASCII' ArrayToValue(value.AlternateNames)'                     value.Latitude.ToString(CultureInfo.InvariantCulture)' value.Longitude.ToString(CultureInfo.InvariantCulture)' value.FeatureClass' value.FeatureCode' value.CountryCode'                     ArrayToValue(value.AlternateCountryCodes)' GetArrayValue(value.Admincodes' 0)' GetArrayValue(value.Admincodes' 1)' GetArrayValue(value.Admincodes' 2)' GetArrayValue(value.Admincodes' 3)'                     value.Population' value.Elevation' value.Dem' TimeZoneToString(value.Timezone)' DateTimeToString(value.ModificationDate));
Magic Number,NGeoNames.Composers,ExtendedGeoNameComposer,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Composers\ExtendedGeoNameComposer.cs,Compose,The following statement contains a magic number: return string.Join(FieldSeparator.ToString()' value.Id' value.Name' value.NameASCII' ArrayToValue(value.AlternateNames)'                     value.Latitude.ToString(CultureInfo.InvariantCulture)' value.Longitude.ToString(CultureInfo.InvariantCulture)' value.FeatureClass' value.FeatureCode' value.CountryCode'                     ArrayToValue(value.AlternateCountryCodes)' GetArrayValue(value.Admincodes' 0)' GetArrayValue(value.Admincodes' 1)' GetArrayValue(value.Admincodes' 2)' GetArrayValue(value.Admincodes' 3)'                     value.Population' value.Elevation' value.Dem' TimeZoneToString(value.Timezone)' DateTimeToString(value.ModificationDate));
Magic Number,NGeoNames.Composers,PostalcodeComposer,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Composers\PostalcodeComposer.cs,Compose,The following statement contains a magic number: return string.Join(FieldSeparator.ToString()' value.CountryCode' value.PostalCode' value.PlaceName'                 GetArrayValue(value.AdminName' 0)' GetArrayValue(value.AdminCode' 0)'                 GetArrayValue(value.AdminName' 1)' GetArrayValue(value.AdminCode' 1)'                 GetArrayValue(value.AdminName' 2)' GetArrayValue(value.AdminCode' 2)'                 DoubleToString(value.Latitude)' DoubleToString(value.Longitude)' value.Accuracy             );
Magic Number,NGeoNames.Composers,PostalcodeComposer,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Composers\PostalcodeComposer.cs,Compose,The following statement contains a magic number: return string.Join(FieldSeparator.ToString()' value.CountryCode' value.PostalCode' value.PlaceName'                 GetArrayValue(value.AdminName' 0)' GetArrayValue(value.AdminCode' 0)'                 GetArrayValue(value.AdminName' 1)' GetArrayValue(value.AdminCode' 1)'                 GetArrayValue(value.AdminName' 2)' GetArrayValue(value.AdminCode' 2)'                 DoubleToString(value.Latitude)' DoubleToString(value.Longitude)' value.Accuracy             );
Magic Number,NGeoNames,GeoUtil,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\GeoUtil.cs,Deg2Rad,The following statement contains a magic number: return (Math.PI / 180.0) * deg;
Magic Number,NGeoNames,GeoUtil,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\GeoUtil.cs,DistanceTo,The following statement contains a magic number: return radiusofearth * (2 * Math.Asin(Math.Min(1' Math.Sqrt(Math.Sin(dLat / 2) * Math.Sin(dLat / 2) + Math.Cos(GeoUtil.Deg2Rad(src.Latitude)) * Math.Cos(GeoUtil.Deg2Rad(dest.Latitude)) * Math.Sin(dLon / 2) * Math.Sin(dLon / 2)))));
Magic Number,NGeoNames,GeoUtil,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\GeoUtil.cs,DistanceTo,The following statement contains a magic number: return radiusofearth * (2 * Math.Asin(Math.Min(1' Math.Sqrt(Math.Sin(dLat / 2) * Math.Sin(dLat / 2) + Math.Cos(GeoUtil.Deg2Rad(src.Latitude)) * Math.Cos(GeoUtil.Deg2Rad(dest.Latitude)) * Math.Sin(dLon / 2) * Math.Sin(dLon / 2)))));
Magic Number,NGeoNames,GeoUtil,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\GeoUtil.cs,DistanceTo,The following statement contains a magic number: return radiusofearth * (2 * Math.Asin(Math.Min(1' Math.Sqrt(Math.Sin(dLat / 2) * Math.Sin(dLat / 2) + Math.Cos(GeoUtil.Deg2Rad(src.Latitude)) * Math.Cos(GeoUtil.Deg2Rad(dest.Latitude)) * Math.Sin(dLon / 2) * Math.Sin(dLon / 2)))));
Magic Number,NGeoNames,GeoUtil,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\GeoUtil.cs,DistanceTo,The following statement contains a magic number: return radiusofearth * (2 * Math.Asin(Math.Min(1' Math.Sqrt(Math.Sin(dLat / 2) * Math.Sin(dLat / 2) + Math.Cos(GeoUtil.Deg2Rad(src.Latitude)) * Math.Cos(GeoUtil.Deg2Rad(dest.Latitude)) * Math.Sin(dLon / 2) * Math.Sin(dLon / 2)))));
Magic Number,NGeoNames,GeoUtil,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\GeoUtil.cs,DistanceTo,The following statement contains a magic number: return radiusofearth * (2 * Math.Asin(Math.Min(1' Math.Sqrt(Math.Sin(dLat / 2) * Math.Sin(dLat / 2) + Math.Cos(GeoUtil.Deg2Rad(src.Latitude)) * Math.Cos(GeoUtil.Deg2Rad(dest.Latitude)) * Math.Sin(dLon / 2) * Math.Sin(dLon / 2)))));
Magic Number,NGeoNames,ReverseGeoCode<T>,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\ReverseGeoCode.cs,ReverseGeoCode,The following statement contains a magic number: _tree = new KdTree.KdTree<double' T>(3' new DoubleMath());
Magic Number,NGeoNames.Parsers,Admin1CodeParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\Admin1CodeParser.cs,Parse,The following statement contains a magic number: return new Admin1Code             {                 Code = fields[0]'                 Name = fields[1]'                 NameASCII = fields[2]'                 GeoNameId = StringToInt(fields[3])             };
Magic Number,NGeoNames.Parsers,Admin1CodeParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\Admin1CodeParser.cs,Parse,The following statement contains a magic number: return new Admin1Code             {                 Code = fields[0]'                 Name = fields[1]'                 NameASCII = fields[2]'                 GeoNameId = StringToInt(fields[3])             };
Magic Number,NGeoNames.Parsers,Admin2CodeParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\Admin2CodeParser.cs,Parse,The following statement contains a magic number: return new Admin2Code             {                 Code = fields[0]'                 Name = fields[1]'                 NameASCII = fields[2]'                 GeoNameId = StringToInt(fields[3])             };
Magic Number,NGeoNames.Parsers,Admin2CodeParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\Admin2CodeParser.cs,Parse,The following statement contains a magic number: return new Admin2Code             {                 Code = fields[0]'                 Name = fields[1]'                 NameASCII = fields[2]'                 GeoNameId = StringToInt(fields[3])             };
Magic Number,NGeoNames.Parsers,AlternateNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParser.cs,Parse,The following statement contains a magic number: return new AlternateName             {                 Id = StringToInt(fields[0])'                 GeoNameId = StringToInt(fields[1])'                 ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                 Type = fields[2].Length <= 3 ? null : fields[2]'                 Name = fields[3]'                 IsPreferredName = BoolToString(fields[4])'                 IsShortName = BoolToString(fields[5])'                 IsColloquial = BoolToString(fields[6])'                 IsHistoric = BoolToString(fields[7])             };
Magic Number,NGeoNames.Parsers,AlternateNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParser.cs,Parse,The following statement contains a magic number: return new AlternateName             {                 Id = StringToInt(fields[0])'                 GeoNameId = StringToInt(fields[1])'                 ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                 Type = fields[2].Length <= 3 ? null : fields[2]'                 Name = fields[3]'                 IsPreferredName = BoolToString(fields[4])'                 IsShortName = BoolToString(fields[5])'                 IsColloquial = BoolToString(fields[6])'                 IsHistoric = BoolToString(fields[7])             };
Magic Number,NGeoNames.Parsers,AlternateNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParser.cs,Parse,The following statement contains a magic number: return new AlternateName             {                 Id = StringToInt(fields[0])'                 GeoNameId = StringToInt(fields[1])'                 ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                 Type = fields[2].Length <= 3 ? null : fields[2]'                 Name = fields[3]'                 IsPreferredName = BoolToString(fields[4])'                 IsShortName = BoolToString(fields[5])'                 IsColloquial = BoolToString(fields[6])'                 IsHistoric = BoolToString(fields[7])             };
Magic Number,NGeoNames.Parsers,AlternateNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParser.cs,Parse,The following statement contains a magic number: return new AlternateName             {                 Id = StringToInt(fields[0])'                 GeoNameId = StringToInt(fields[1])'                 ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                 Type = fields[2].Length <= 3 ? null : fields[2]'                 Name = fields[3]'                 IsPreferredName = BoolToString(fields[4])'                 IsShortName = BoolToString(fields[5])'                 IsColloquial = BoolToString(fields[6])'                 IsHistoric = BoolToString(fields[7])             };
Magic Number,NGeoNames.Parsers,AlternateNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParser.cs,Parse,The following statement contains a magic number: return new AlternateName             {                 Id = StringToInt(fields[0])'                 GeoNameId = StringToInt(fields[1])'                 ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                 Type = fields[2].Length <= 3 ? null : fields[2]'                 Name = fields[3]'                 IsPreferredName = BoolToString(fields[4])'                 IsShortName = BoolToString(fields[5])'                 IsColloquial = BoolToString(fields[6])'                 IsHistoric = BoolToString(fields[7])             };
Magic Number,NGeoNames.Parsers,AlternateNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParser.cs,Parse,The following statement contains a magic number: return new AlternateName             {                 Id = StringToInt(fields[0])'                 GeoNameId = StringToInt(fields[1])'                 ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                 Type = fields[2].Length <= 3 ? null : fields[2]'                 Name = fields[3]'                 IsPreferredName = BoolToString(fields[4])'                 IsShortName = BoolToString(fields[5])'                 IsColloquial = BoolToString(fields[6])'                 IsHistoric = BoolToString(fields[7])             };
Magic Number,NGeoNames.Parsers,AlternateNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParser.cs,Parse,The following statement contains a magic number: return new AlternateName             {                 Id = StringToInt(fields[0])'                 GeoNameId = StringToInt(fields[1])'                 ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                 Type = fields[2].Length <= 3 ? null : fields[2]'                 Name = fields[3]'                 IsPreferredName = BoolToString(fields[4])'                 IsShortName = BoolToString(fields[5])'                 IsColloquial = BoolToString(fields[6])'                 IsHistoric = BoolToString(fields[7])             };
Magic Number,NGeoNames.Parsers,AlternateNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParser.cs,Parse,The following statement contains a magic number: return new AlternateName             {                 Id = StringToInt(fields[0])'                 GeoNameId = StringToInt(fields[1])'                 ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                 Type = fields[2].Length <= 3 ? null : fields[2]'                 Name = fields[3]'                 IsPreferredName = BoolToString(fields[4])'                 IsShortName = BoolToString(fields[5])'                 IsColloquial = BoolToString(fields[6])'                 IsHistoric = BoolToString(fields[7])             };
Magic Number,NGeoNames.Parsers,AlternateNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParser.cs,Parse,The following statement contains a magic number: return new AlternateName             {                 Id = StringToInt(fields[0])'                 GeoNameId = StringToInt(fields[1])'                 ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                 Type = fields[2].Length <= 3 ? null : fields[2]'                 Name = fields[3]'                 IsPreferredName = BoolToString(fields[4])'                 IsShortName = BoolToString(fields[5])'                 IsColloquial = BoolToString(fields[6])'                 IsHistoric = BoolToString(fields[7])             };
Magic Number,NGeoNames.Parsers,AlternateNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParser.cs,Parse,The following statement contains a magic number: return new AlternateName             {                 Id = StringToInt(fields[0])'                 GeoNameId = StringToInt(fields[1])'                 ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                 Type = fields[2].Length <= 3 ? null : fields[2]'                 Name = fields[3]'                 IsPreferredName = BoolToString(fields[4])'                 IsShortName = BoolToString(fields[5])'                 IsColloquial = BoolToString(fields[6])'                 IsHistoric = BoolToString(fields[7])             };
Magic Number,NGeoNames.Parsers,AlternateNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParser.cs,Parse,The following statement contains a magic number: return new AlternateName             {                 Id = StringToInt(fields[0])'                 GeoNameId = StringToInt(fields[1])'                 ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                 Type = fields[2].Length <= 3 ? null : fields[2]'                 Name = fields[3]'                 IsPreferredName = BoolToString(fields[4])'                 IsShortName = BoolToString(fields[5])'                 IsColloquial = BoolToString(fields[6])'                 IsHistoric = BoolToString(fields[7])             };
Magic Number,NGeoNames.Parsers,AlternateNameParserV2,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParserV2.cs,Parse,The following statement contains a magic number: return new AlternateNameV2             {                 Id = StringToInt(fields[0])'                 GeoNameId = StringToInt(fields[1])'                 ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                 Type = fields[2].Length <= 3 ? null : fields[2]'                 Name = fields[3]'                 IsPreferredName = BoolToString(fields[4])'                 IsShortName = BoolToString(fields[5])'                 IsColloquial = BoolToString(fields[6])'                 IsHistoric = BoolToString(fields[7])'                 From = fields[8]'                 To = fields[9]             };
Magic Number,NGeoNames.Parsers,AlternateNameParserV2,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParserV2.cs,Parse,The following statement contains a magic number: return new AlternateNameV2             {                 Id = StringToInt(fields[0])'                 GeoNameId = StringToInt(fields[1])'                 ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                 Type = fields[2].Length <= 3 ? null : fields[2]'                 Name = fields[3]'                 IsPreferredName = BoolToString(fields[4])'                 IsShortName = BoolToString(fields[5])'                 IsColloquial = BoolToString(fields[6])'                 IsHistoric = BoolToString(fields[7])'                 From = fields[8]'                 To = fields[9]             };
Magic Number,NGeoNames.Parsers,AlternateNameParserV2,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParserV2.cs,Parse,The following statement contains a magic number: return new AlternateNameV2             {                 Id = StringToInt(fields[0])'                 GeoNameId = StringToInt(fields[1])'                 ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                 Type = fields[2].Length <= 3 ? null : fields[2]'                 Name = fields[3]'                 IsPreferredName = BoolToString(fields[4])'                 IsShortName = BoolToString(fields[5])'                 IsColloquial = BoolToString(fields[6])'                 IsHistoric = BoolToString(fields[7])'                 From = fields[8]'                 To = fields[9]             };
Magic Number,NGeoNames.Parsers,AlternateNameParserV2,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParserV2.cs,Parse,The following statement contains a magic number: return new AlternateNameV2             {                 Id = StringToInt(fields[0])'                 GeoNameId = StringToInt(fields[1])'                 ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                 Type = fields[2].Length <= 3 ? null : fields[2]'                 Name = fields[3]'                 IsPreferredName = BoolToString(fields[4])'                 IsShortName = BoolToString(fields[5])'                 IsColloquial = BoolToString(fields[6])'                 IsHistoric = BoolToString(fields[7])'                 From = fields[8]'                 To = fields[9]             };
Magic Number,NGeoNames.Parsers,AlternateNameParserV2,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParserV2.cs,Parse,The following statement contains a magic number: return new AlternateNameV2             {                 Id = StringToInt(fields[0])'                 GeoNameId = StringToInt(fields[1])'                 ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                 Type = fields[2].Length <= 3 ? null : fields[2]'                 Name = fields[3]'                 IsPreferredName = BoolToString(fields[4])'                 IsShortName = BoolToString(fields[5])'                 IsColloquial = BoolToString(fields[6])'                 IsHistoric = BoolToString(fields[7])'                 From = fields[8]'                 To = fields[9]             };
Magic Number,NGeoNames.Parsers,AlternateNameParserV2,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParserV2.cs,Parse,The following statement contains a magic number: return new AlternateNameV2             {                 Id = StringToInt(fields[0])'                 GeoNameId = StringToInt(fields[1])'                 ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                 Type = fields[2].Length <= 3 ? null : fields[2]'                 Name = fields[3]'                 IsPreferredName = BoolToString(fields[4])'                 IsShortName = BoolToString(fields[5])'                 IsColloquial = BoolToString(fields[6])'                 IsHistoric = BoolToString(fields[7])'                 From = fields[8]'                 To = fields[9]             };
Magic Number,NGeoNames.Parsers,AlternateNameParserV2,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParserV2.cs,Parse,The following statement contains a magic number: return new AlternateNameV2             {                 Id = StringToInt(fields[0])'                 GeoNameId = StringToInt(fields[1])'                 ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                 Type = fields[2].Length <= 3 ? null : fields[2]'                 Name = fields[3]'                 IsPreferredName = BoolToString(fields[4])'                 IsShortName = BoolToString(fields[5])'                 IsColloquial = BoolToString(fields[6])'                 IsHistoric = BoolToString(fields[7])'                 From = fields[8]'                 To = fields[9]             };
Magic Number,NGeoNames.Parsers,AlternateNameParserV2,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParserV2.cs,Parse,The following statement contains a magic number: return new AlternateNameV2             {                 Id = StringToInt(fields[0])'                 GeoNameId = StringToInt(fields[1])'                 ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                 Type = fields[2].Length <= 3 ? null : fields[2]'                 Name = fields[3]'                 IsPreferredName = BoolToString(fields[4])'                 IsShortName = BoolToString(fields[5])'                 IsColloquial = BoolToString(fields[6])'                 IsHistoric = BoolToString(fields[7])'                 From = fields[8]'                 To = fields[9]             };
Magic Number,NGeoNames.Parsers,AlternateNameParserV2,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParserV2.cs,Parse,The following statement contains a magic number: return new AlternateNameV2             {                 Id = StringToInt(fields[0])'                 GeoNameId = StringToInt(fields[1])'                 ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                 Type = fields[2].Length <= 3 ? null : fields[2]'                 Name = fields[3]'                 IsPreferredName = BoolToString(fields[4])'                 IsShortName = BoolToString(fields[5])'                 IsColloquial = BoolToString(fields[6])'                 IsHistoric = BoolToString(fields[7])'                 From = fields[8]'                 To = fields[9]             };
Magic Number,NGeoNames.Parsers,AlternateNameParserV2,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParserV2.cs,Parse,The following statement contains a magic number: return new AlternateNameV2             {                 Id = StringToInt(fields[0])'                 GeoNameId = StringToInt(fields[1])'                 ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                 Type = fields[2].Length <= 3 ? null : fields[2]'                 Name = fields[3]'                 IsPreferredName = BoolToString(fields[4])'                 IsShortName = BoolToString(fields[5])'                 IsColloquial = BoolToString(fields[6])'                 IsHistoric = BoolToString(fields[7])'                 From = fields[8]'                 To = fields[9]             };
Magic Number,NGeoNames.Parsers,AlternateNameParserV2,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParserV2.cs,Parse,The following statement contains a magic number: return new AlternateNameV2             {                 Id = StringToInt(fields[0])'                 GeoNameId = StringToInt(fields[1])'                 ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                 Type = fields[2].Length <= 3 ? null : fields[2]'                 Name = fields[3]'                 IsPreferredName = BoolToString(fields[4])'                 IsShortName = BoolToString(fields[5])'                 IsColloquial = BoolToString(fields[6])'                 IsHistoric = BoolToString(fields[7])'                 From = fields[8]'                 To = fields[9]             };
Magic Number,NGeoNames.Parsers,AlternateNameParserV2,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParserV2.cs,Parse,The following statement contains a magic number: return new AlternateNameV2             {                 Id = StringToInt(fields[0])'                 GeoNameId = StringToInt(fields[1])'                 ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                 Type = fields[2].Length <= 3 ? null : fields[2]'                 Name = fields[3]'                 IsPreferredName = BoolToString(fields[4])'                 IsShortName = BoolToString(fields[5])'                 IsColloquial = BoolToString(fields[6])'                 IsHistoric = BoolToString(fields[7])'                 From = fields[8]'                 To = fields[9]             };
Magic Number,NGeoNames.Parsers,AlternateNameParserV2,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\AlternateNameParserV2.cs,Parse,The following statement contains a magic number: return new AlternateNameV2             {                 Id = StringToInt(fields[0])'                 GeoNameId = StringToInt(fields[1])'                 ISOLanguage = fields[2].Length <= 3 ? fields[2] : null'                 Type = fields[2].Length <= 3 ? null : fields[2]'                 Name = fields[3]'                 IsPreferredName = BoolToString(fields[4])'                 IsShortName = BoolToString(fields[5])'                 IsColloquial = BoolToString(fields[6])'                 IsHistoric = BoolToString(fields[7])'                 From = fields[8]'                 To = fields[9]             };
Magic Number,NGeoNames.Parsers,ContinentParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\ContinentParser.cs,Parse,The following statement contains a magic number: return new Continent             {                 Code = fields[0]'                 Name = fields[1]'                 GeoNameId = StringToInt(fields[2])             };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo             {                 ISO_Alpha2 = fields[0]'                 ISO_Alpha3 = fields[1]'                 ISO_Numeric = fields[2]'                 FIPS = fields[3]'                 Country = fields[4]'                 Capital = fields[5]'                 Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                 Population = StringToInt(fields[7])'                 Continent = fields[8]'                 Tld = fields[9]'                 CurrencyCode = fields[10]'                 CurrencyName = fields[11]'                 Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                 PostalCodeFormat = fields[13]'                 PostalCodeRegex = fields[14]'                 Languages = StringToArray(fields[15])'                 GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                 Neighbours = StringToArray(fields[17])'                 EquivalentFipsCode = fields[18]             };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo             {                 ISO_Alpha2 = fields[0]'                 ISO_Alpha3 = fields[1]'                 ISO_Numeric = fields[2]'                 FIPS = fields[3]'                 Country = fields[4]'                 Capital = fields[5]'                 Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                 Population = StringToInt(fields[7])'                 Continent = fields[8]'                 Tld = fields[9]'                 CurrencyCode = fields[10]'                 CurrencyName = fields[11]'                 Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                 PostalCodeFormat = fields[13]'                 PostalCodeRegex = fields[14]'                 Languages = StringToArray(fields[15])'                 GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                 Neighbours = StringToArray(fields[17])'                 EquivalentFipsCode = fields[18]             };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo             {                 ISO_Alpha2 = fields[0]'                 ISO_Alpha3 = fields[1]'                 ISO_Numeric = fields[2]'                 FIPS = fields[3]'                 Country = fields[4]'                 Capital = fields[5]'                 Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                 Population = StringToInt(fields[7])'                 Continent = fields[8]'                 Tld = fields[9]'                 CurrencyCode = fields[10]'                 CurrencyName = fields[11]'                 Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                 PostalCodeFormat = fields[13]'                 PostalCodeRegex = fields[14]'                 Languages = StringToArray(fields[15])'                 GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                 Neighbours = StringToArray(fields[17])'                 EquivalentFipsCode = fields[18]             };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo             {                 ISO_Alpha2 = fields[0]'                 ISO_Alpha3 = fields[1]'                 ISO_Numeric = fields[2]'                 FIPS = fields[3]'                 Country = fields[4]'                 Capital = fields[5]'                 Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                 Population = StringToInt(fields[7])'                 Continent = fields[8]'                 Tld = fields[9]'                 CurrencyCode = fields[10]'                 CurrencyName = fields[11]'                 Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                 PostalCodeFormat = fields[13]'                 PostalCodeRegex = fields[14]'                 Languages = StringToArray(fields[15])'                 GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                 Neighbours = StringToArray(fields[17])'                 EquivalentFipsCode = fields[18]             };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo             {                 ISO_Alpha2 = fields[0]'                 ISO_Alpha3 = fields[1]'                 ISO_Numeric = fields[2]'                 FIPS = fields[3]'                 Country = fields[4]'                 Capital = fields[5]'                 Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                 Population = StringToInt(fields[7])'                 Continent = fields[8]'                 Tld = fields[9]'                 CurrencyCode = fields[10]'                 CurrencyName = fields[11]'                 Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                 PostalCodeFormat = fields[13]'                 PostalCodeRegex = fields[14]'                 Languages = StringToArray(fields[15])'                 GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                 Neighbours = StringToArray(fields[17])'                 EquivalentFipsCode = fields[18]             };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo             {                 ISO_Alpha2 = fields[0]'                 ISO_Alpha3 = fields[1]'                 ISO_Numeric = fields[2]'                 FIPS = fields[3]'                 Country = fields[4]'                 Capital = fields[5]'                 Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                 Population = StringToInt(fields[7])'                 Continent = fields[8]'                 Tld = fields[9]'                 CurrencyCode = fields[10]'                 CurrencyName = fields[11]'                 Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                 PostalCodeFormat = fields[13]'                 PostalCodeRegex = fields[14]'                 Languages = StringToArray(fields[15])'                 GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                 Neighbours = StringToArray(fields[17])'                 EquivalentFipsCode = fields[18]             };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo             {                 ISO_Alpha2 = fields[0]'                 ISO_Alpha3 = fields[1]'                 ISO_Numeric = fields[2]'                 FIPS = fields[3]'                 Country = fields[4]'                 Capital = fields[5]'                 Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                 Population = StringToInt(fields[7])'                 Continent = fields[8]'                 Tld = fields[9]'                 CurrencyCode = fields[10]'                 CurrencyName = fields[11]'                 Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                 PostalCodeFormat = fields[13]'                 PostalCodeRegex = fields[14]'                 Languages = StringToArray(fields[15])'                 GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                 Neighbours = StringToArray(fields[17])'                 EquivalentFipsCode = fields[18]             };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo             {                 ISO_Alpha2 = fields[0]'                 ISO_Alpha3 = fields[1]'                 ISO_Numeric = fields[2]'                 FIPS = fields[3]'                 Country = fields[4]'                 Capital = fields[5]'                 Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                 Population = StringToInt(fields[7])'                 Continent = fields[8]'                 Tld = fields[9]'                 CurrencyCode = fields[10]'                 CurrencyName = fields[11]'                 Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                 PostalCodeFormat = fields[13]'                 PostalCodeRegex = fields[14]'                 Languages = StringToArray(fields[15])'                 GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                 Neighbours = StringToArray(fields[17])'                 EquivalentFipsCode = fields[18]             };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo             {                 ISO_Alpha2 = fields[0]'                 ISO_Alpha3 = fields[1]'                 ISO_Numeric = fields[2]'                 FIPS = fields[3]'                 Country = fields[4]'                 Capital = fields[5]'                 Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                 Population = StringToInt(fields[7])'                 Continent = fields[8]'                 Tld = fields[9]'                 CurrencyCode = fields[10]'                 CurrencyName = fields[11]'                 Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                 PostalCodeFormat = fields[13]'                 PostalCodeRegex = fields[14]'                 Languages = StringToArray(fields[15])'                 GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                 Neighbours = StringToArray(fields[17])'                 EquivalentFipsCode = fields[18]             };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo             {                 ISO_Alpha2 = fields[0]'                 ISO_Alpha3 = fields[1]'                 ISO_Numeric = fields[2]'                 FIPS = fields[3]'                 Country = fields[4]'                 Capital = fields[5]'                 Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                 Population = StringToInt(fields[7])'                 Continent = fields[8]'                 Tld = fields[9]'                 CurrencyCode = fields[10]'                 CurrencyName = fields[11]'                 Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                 PostalCodeFormat = fields[13]'                 PostalCodeRegex = fields[14]'                 Languages = StringToArray(fields[15])'                 GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                 Neighbours = StringToArray(fields[17])'                 EquivalentFipsCode = fields[18]             };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo             {                 ISO_Alpha2 = fields[0]'                 ISO_Alpha3 = fields[1]'                 ISO_Numeric = fields[2]'                 FIPS = fields[3]'                 Country = fields[4]'                 Capital = fields[5]'                 Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                 Population = StringToInt(fields[7])'                 Continent = fields[8]'                 Tld = fields[9]'                 CurrencyCode = fields[10]'                 CurrencyName = fields[11]'                 Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                 PostalCodeFormat = fields[13]'                 PostalCodeRegex = fields[14]'                 Languages = StringToArray(fields[15])'                 GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                 Neighbours = StringToArray(fields[17])'                 EquivalentFipsCode = fields[18]             };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo             {                 ISO_Alpha2 = fields[0]'                 ISO_Alpha3 = fields[1]'                 ISO_Numeric = fields[2]'                 FIPS = fields[3]'                 Country = fields[4]'                 Capital = fields[5]'                 Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                 Population = StringToInt(fields[7])'                 Continent = fields[8]'                 Tld = fields[9]'                 CurrencyCode = fields[10]'                 CurrencyName = fields[11]'                 Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                 PostalCodeFormat = fields[13]'                 PostalCodeRegex = fields[14]'                 Languages = StringToArray(fields[15])'                 GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                 Neighbours = StringToArray(fields[17])'                 EquivalentFipsCode = fields[18]             };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo             {                 ISO_Alpha2 = fields[0]'                 ISO_Alpha3 = fields[1]'                 ISO_Numeric = fields[2]'                 FIPS = fields[3]'                 Country = fields[4]'                 Capital = fields[5]'                 Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                 Population = StringToInt(fields[7])'                 Continent = fields[8]'                 Tld = fields[9]'                 CurrencyCode = fields[10]'                 CurrencyName = fields[11]'                 Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                 PostalCodeFormat = fields[13]'                 PostalCodeRegex = fields[14]'                 Languages = StringToArray(fields[15])'                 GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                 Neighbours = StringToArray(fields[17])'                 EquivalentFipsCode = fields[18]             };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo             {                 ISO_Alpha2 = fields[0]'                 ISO_Alpha3 = fields[1]'                 ISO_Numeric = fields[2]'                 FIPS = fields[3]'                 Country = fields[4]'                 Capital = fields[5]'                 Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                 Population = StringToInt(fields[7])'                 Continent = fields[8]'                 Tld = fields[9]'                 CurrencyCode = fields[10]'                 CurrencyName = fields[11]'                 Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                 PostalCodeFormat = fields[13]'                 PostalCodeRegex = fields[14]'                 Languages = StringToArray(fields[15])'                 GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                 Neighbours = StringToArray(fields[17])'                 EquivalentFipsCode = fields[18]             };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo             {                 ISO_Alpha2 = fields[0]'                 ISO_Alpha3 = fields[1]'                 ISO_Numeric = fields[2]'                 FIPS = fields[3]'                 Country = fields[4]'                 Capital = fields[5]'                 Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                 Population = StringToInt(fields[7])'                 Continent = fields[8]'                 Tld = fields[9]'                 CurrencyCode = fields[10]'                 CurrencyName = fields[11]'                 Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                 PostalCodeFormat = fields[13]'                 PostalCodeRegex = fields[14]'                 Languages = StringToArray(fields[15])'                 GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                 Neighbours = StringToArray(fields[17])'                 EquivalentFipsCode = fields[18]             };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo             {                 ISO_Alpha2 = fields[0]'                 ISO_Alpha3 = fields[1]'                 ISO_Numeric = fields[2]'                 FIPS = fields[3]'                 Country = fields[4]'                 Capital = fields[5]'                 Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                 Population = StringToInt(fields[7])'                 Continent = fields[8]'                 Tld = fields[9]'                 CurrencyCode = fields[10]'                 CurrencyName = fields[11]'                 Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                 PostalCodeFormat = fields[13]'                 PostalCodeRegex = fields[14]'                 Languages = StringToArray(fields[15])'                 GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                 Neighbours = StringToArray(fields[17])'                 EquivalentFipsCode = fields[18]             };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo             {                 ISO_Alpha2 = fields[0]'                 ISO_Alpha3 = fields[1]'                 ISO_Numeric = fields[2]'                 FIPS = fields[3]'                 Country = fields[4]'                 Capital = fields[5]'                 Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                 Population = StringToInt(fields[7])'                 Continent = fields[8]'                 Tld = fields[9]'                 CurrencyCode = fields[10]'                 CurrencyName = fields[11]'                 Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                 PostalCodeFormat = fields[13]'                 PostalCodeRegex = fields[14]'                 Languages = StringToArray(fields[15])'                 GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                 Neighbours = StringToArray(fields[17])'                 EquivalentFipsCode = fields[18]             };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo             {                 ISO_Alpha2 = fields[0]'                 ISO_Alpha3 = fields[1]'                 ISO_Numeric = fields[2]'                 FIPS = fields[3]'                 Country = fields[4]'                 Capital = fields[5]'                 Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                 Population = StringToInt(fields[7])'                 Continent = fields[8]'                 Tld = fields[9]'                 CurrencyCode = fields[10]'                 CurrencyName = fields[11]'                 Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                 PostalCodeFormat = fields[13]'                 PostalCodeRegex = fields[14]'                 Languages = StringToArray(fields[15])'                 GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                 Neighbours = StringToArray(fields[17])'                 EquivalentFipsCode = fields[18]             };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo             {                 ISO_Alpha2 = fields[0]'                 ISO_Alpha3 = fields[1]'                 ISO_Numeric = fields[2]'                 FIPS = fields[3]'                 Country = fields[4]'                 Capital = fields[5]'                 Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                 Population = StringToInt(fields[7])'                 Continent = fields[8]'                 Tld = fields[9]'                 CurrencyCode = fields[10]'                 CurrencyName = fields[11]'                 Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                 PostalCodeFormat = fields[13]'                 PostalCodeRegex = fields[14]'                 Languages = StringToArray(fields[15])'                 GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                 Neighbours = StringToArray(fields[17])'                 EquivalentFipsCode = fields[18]             };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo             {                 ISO_Alpha2 = fields[0]'                 ISO_Alpha3 = fields[1]'                 ISO_Numeric = fields[2]'                 FIPS = fields[3]'                 Country = fields[4]'                 Capital = fields[5]'                 Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                 Population = StringToInt(fields[7])'                 Continent = fields[8]'                 Tld = fields[9]'                 CurrencyCode = fields[10]'                 CurrencyName = fields[11]'                 Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                 PostalCodeFormat = fields[13]'                 PostalCodeRegex = fields[14]'                 Languages = StringToArray(fields[15])'                 GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                 Neighbours = StringToArray(fields[17])'                 EquivalentFipsCode = fields[18]             };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo             {                 ISO_Alpha2 = fields[0]'                 ISO_Alpha3 = fields[1]'                 ISO_Numeric = fields[2]'                 FIPS = fields[3]'                 Country = fields[4]'                 Capital = fields[5]'                 Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                 Population = StringToInt(fields[7])'                 Continent = fields[8]'                 Tld = fields[9]'                 CurrencyCode = fields[10]'                 CurrencyName = fields[11]'                 Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                 PostalCodeFormat = fields[13]'                 PostalCodeRegex = fields[14]'                 Languages = StringToArray(fields[15])'                 GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                 Neighbours = StringToArray(fields[17])'                 EquivalentFipsCode = fields[18]             };
Magic Number,NGeoNames.Parsers,CountryInfoParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\CountryInfoParser.cs,Parse,The following statement contains a magic number: return new CountryInfo             {                 ISO_Alpha2 = fields[0]'                 ISO_Alpha3 = fields[1]'                 ISO_Numeric = fields[2]'                 FIPS = fields[3]'                 Country = fields[4]'                 Capital = fields[5]'                 Area = fields[6].Length > 0 ? (float?)float.Parse(fields[6]' CultureInfo.InvariantCulture) : null'                 Population = StringToInt(fields[7])'                 Continent = fields[8]'                 Tld = fields[9]'                 CurrencyCode = fields[10]'                 CurrencyName = fields[11]'                 Phone = fields[12].Length > 0 && fields[12].StartsWith("+") ? fields[12] : "+" + fields[12]'                 PostalCodeFormat = fields[13]'                 PostalCodeRegex = fields[14]'                 Languages = StringToArray(fields[15])'                 GeoNameId = fields[16].Length > 0 ? (int?)int.Parse(fields[16]' CultureInfo.InvariantCulture) : null'                 Neighbours = StringToArray(fields[17])'                 EquivalentFipsCode = fields[18]             };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName             {                 Id = StringToInt(fields[0])'                 Name = fields[1]'                 NameASCII = fields[2]'                 AlternateNames = StringToArray(fields[3])'                 Latitude = StringToDouble(fields[4])'                 Longitude = StringToDouble(fields[5])'                 FeatureClass = fields[6]'                 FeatureCode = fields[7]'                 CountryCode = fields[8]'                 AlternateCountryCodes = StringToArray(fields[9])'                 Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                 Population = StringToLong(fields[14])'                 Elevation = fields[15].Length > 0 ? (int?)StringToInt(fields[15]) : null'                 Dem = StringToInt(fields[16])'                 Timezone = StringToTimeZone(fields[17])'                 ModificationDate = StringToDateTime(fields[18])             };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName             {                 Id = StringToInt(fields[0])'                 Name = fields[1]'                 NameASCII = fields[2]'                 AlternateNames = StringToArray(fields[3])'                 Latitude = StringToDouble(fields[4])'                 Longitude = StringToDouble(fields[5])'                 FeatureClass = fields[6]'                 FeatureCode = fields[7]'                 CountryCode = fields[8]'                 AlternateCountryCodes = StringToArray(fields[9])'                 Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                 Population = StringToLong(fields[14])'                 Elevation = fields[15].Length > 0 ? (int?)StringToInt(fields[15]) : null'                 Dem = StringToInt(fields[16])'                 Timezone = StringToTimeZone(fields[17])'                 ModificationDate = StringToDateTime(fields[18])             };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName             {                 Id = StringToInt(fields[0])'                 Name = fields[1]'                 NameASCII = fields[2]'                 AlternateNames = StringToArray(fields[3])'                 Latitude = StringToDouble(fields[4])'                 Longitude = StringToDouble(fields[5])'                 FeatureClass = fields[6]'                 FeatureCode = fields[7]'                 CountryCode = fields[8]'                 AlternateCountryCodes = StringToArray(fields[9])'                 Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                 Population = StringToLong(fields[14])'                 Elevation = fields[15].Length > 0 ? (int?)StringToInt(fields[15]) : null'                 Dem = StringToInt(fields[16])'                 Timezone = StringToTimeZone(fields[17])'                 ModificationDate = StringToDateTime(fields[18])             };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName             {                 Id = StringToInt(fields[0])'                 Name = fields[1]'                 NameASCII = fields[2]'                 AlternateNames = StringToArray(fields[3])'                 Latitude = StringToDouble(fields[4])'                 Longitude = StringToDouble(fields[5])'                 FeatureClass = fields[6]'                 FeatureCode = fields[7]'                 CountryCode = fields[8]'                 AlternateCountryCodes = StringToArray(fields[9])'                 Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                 Population = StringToLong(fields[14])'                 Elevation = fields[15].Length > 0 ? (int?)StringToInt(fields[15]) : null'                 Dem = StringToInt(fields[16])'                 Timezone = StringToTimeZone(fields[17])'                 ModificationDate = StringToDateTime(fields[18])             };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName             {                 Id = StringToInt(fields[0])'                 Name = fields[1]'                 NameASCII = fields[2]'                 AlternateNames = StringToArray(fields[3])'                 Latitude = StringToDouble(fields[4])'                 Longitude = StringToDouble(fields[5])'                 FeatureClass = fields[6]'                 FeatureCode = fields[7]'                 CountryCode = fields[8]'                 AlternateCountryCodes = StringToArray(fields[9])'                 Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                 Population = StringToLong(fields[14])'                 Elevation = fields[15].Length > 0 ? (int?)StringToInt(fields[15]) : null'                 Dem = StringToInt(fields[16])'                 Timezone = StringToTimeZone(fields[17])'                 ModificationDate = StringToDateTime(fields[18])             };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName             {                 Id = StringToInt(fields[0])'                 Name = fields[1]'                 NameASCII = fields[2]'                 AlternateNames = StringToArray(fields[3])'                 Latitude = StringToDouble(fields[4])'                 Longitude = StringToDouble(fields[5])'                 FeatureClass = fields[6]'                 FeatureCode = fields[7]'                 CountryCode = fields[8]'                 AlternateCountryCodes = StringToArray(fields[9])'                 Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                 Population = StringToLong(fields[14])'                 Elevation = fields[15].Length > 0 ? (int?)StringToInt(fields[15]) : null'                 Dem = StringToInt(fields[16])'                 Timezone = StringToTimeZone(fields[17])'                 ModificationDate = StringToDateTime(fields[18])             };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName             {                 Id = StringToInt(fields[0])'                 Name = fields[1]'                 NameASCII = fields[2]'                 AlternateNames = StringToArray(fields[3])'                 Latitude = StringToDouble(fields[4])'                 Longitude = StringToDouble(fields[5])'                 FeatureClass = fields[6]'                 FeatureCode = fields[7]'                 CountryCode = fields[8]'                 AlternateCountryCodes = StringToArray(fields[9])'                 Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                 Population = StringToLong(fields[14])'                 Elevation = fields[15].Length > 0 ? (int?)StringToInt(fields[15]) : null'                 Dem = StringToInt(fields[16])'                 Timezone = StringToTimeZone(fields[17])'                 ModificationDate = StringToDateTime(fields[18])             };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName             {                 Id = StringToInt(fields[0])'                 Name = fields[1]'                 NameASCII = fields[2]'                 AlternateNames = StringToArray(fields[3])'                 Latitude = StringToDouble(fields[4])'                 Longitude = StringToDouble(fields[5])'                 FeatureClass = fields[6]'                 FeatureCode = fields[7]'                 CountryCode = fields[8]'                 AlternateCountryCodes = StringToArray(fields[9])'                 Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                 Population = StringToLong(fields[14])'                 Elevation = fields[15].Length > 0 ? (int?)StringToInt(fields[15]) : null'                 Dem = StringToInt(fields[16])'                 Timezone = StringToTimeZone(fields[17])'                 ModificationDate = StringToDateTime(fields[18])             };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName             {                 Id = StringToInt(fields[0])'                 Name = fields[1]'                 NameASCII = fields[2]'                 AlternateNames = StringToArray(fields[3])'                 Latitude = StringToDouble(fields[4])'                 Longitude = StringToDouble(fields[5])'                 FeatureClass = fields[6]'                 FeatureCode = fields[7]'                 CountryCode = fields[8]'                 AlternateCountryCodes = StringToArray(fields[9])'                 Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                 Population = StringToLong(fields[14])'                 Elevation = fields[15].Length > 0 ? (int?)StringToInt(fields[15]) : null'                 Dem = StringToInt(fields[16])'                 Timezone = StringToTimeZone(fields[17])'                 ModificationDate = StringToDateTime(fields[18])             };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName             {                 Id = StringToInt(fields[0])'                 Name = fields[1]'                 NameASCII = fields[2]'                 AlternateNames = StringToArray(fields[3])'                 Latitude = StringToDouble(fields[4])'                 Longitude = StringToDouble(fields[5])'                 FeatureClass = fields[6]'                 FeatureCode = fields[7]'                 CountryCode = fields[8]'                 AlternateCountryCodes = StringToArray(fields[9])'                 Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                 Population = StringToLong(fields[14])'                 Elevation = fields[15].Length > 0 ? (int?)StringToInt(fields[15]) : null'                 Dem = StringToInt(fields[16])'                 Timezone = StringToTimeZone(fields[17])'                 ModificationDate = StringToDateTime(fields[18])             };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName             {                 Id = StringToInt(fields[0])'                 Name = fields[1]'                 NameASCII = fields[2]'                 AlternateNames = StringToArray(fields[3])'                 Latitude = StringToDouble(fields[4])'                 Longitude = StringToDouble(fields[5])'                 FeatureClass = fields[6]'                 FeatureCode = fields[7]'                 CountryCode = fields[8]'                 AlternateCountryCodes = StringToArray(fields[9])'                 Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                 Population = StringToLong(fields[14])'                 Elevation = fields[15].Length > 0 ? (int?)StringToInt(fields[15]) : null'                 Dem = StringToInt(fields[16])'                 Timezone = StringToTimeZone(fields[17])'                 ModificationDate = StringToDateTime(fields[18])             };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName             {                 Id = StringToInt(fields[0])'                 Name = fields[1]'                 NameASCII = fields[2]'                 AlternateNames = StringToArray(fields[3])'                 Latitude = StringToDouble(fields[4])'                 Longitude = StringToDouble(fields[5])'                 FeatureClass = fields[6]'                 FeatureCode = fields[7]'                 CountryCode = fields[8]'                 AlternateCountryCodes = StringToArray(fields[9])'                 Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                 Population = StringToLong(fields[14])'                 Elevation = fields[15].Length > 0 ? (int?)StringToInt(fields[15]) : null'                 Dem = StringToInt(fields[16])'                 Timezone = StringToTimeZone(fields[17])'                 ModificationDate = StringToDateTime(fields[18])             };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName             {                 Id = StringToInt(fields[0])'                 Name = fields[1]'                 NameASCII = fields[2]'                 AlternateNames = StringToArray(fields[3])'                 Latitude = StringToDouble(fields[4])'                 Longitude = StringToDouble(fields[5])'                 FeatureClass = fields[6]'                 FeatureCode = fields[7]'                 CountryCode = fields[8]'                 AlternateCountryCodes = StringToArray(fields[9])'                 Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                 Population = StringToLong(fields[14])'                 Elevation = fields[15].Length > 0 ? (int?)StringToInt(fields[15]) : null'                 Dem = StringToInt(fields[16])'                 Timezone = StringToTimeZone(fields[17])'                 ModificationDate = StringToDateTime(fields[18])             };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName             {                 Id = StringToInt(fields[0])'                 Name = fields[1]'                 NameASCII = fields[2]'                 AlternateNames = StringToArray(fields[3])'                 Latitude = StringToDouble(fields[4])'                 Longitude = StringToDouble(fields[5])'                 FeatureClass = fields[6]'                 FeatureCode = fields[7]'                 CountryCode = fields[8]'                 AlternateCountryCodes = StringToArray(fields[9])'                 Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                 Population = StringToLong(fields[14])'                 Elevation = fields[15].Length > 0 ? (int?)StringToInt(fields[15]) : null'                 Dem = StringToInt(fields[16])'                 Timezone = StringToTimeZone(fields[17])'                 ModificationDate = StringToDateTime(fields[18])             };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName             {                 Id = StringToInt(fields[0])'                 Name = fields[1]'                 NameASCII = fields[2]'                 AlternateNames = StringToArray(fields[3])'                 Latitude = StringToDouble(fields[4])'                 Longitude = StringToDouble(fields[5])'                 FeatureClass = fields[6]'                 FeatureCode = fields[7]'                 CountryCode = fields[8]'                 AlternateCountryCodes = StringToArray(fields[9])'                 Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                 Population = StringToLong(fields[14])'                 Elevation = fields[15].Length > 0 ? (int?)StringToInt(fields[15]) : null'                 Dem = StringToInt(fields[16])'                 Timezone = StringToTimeZone(fields[17])'                 ModificationDate = StringToDateTime(fields[18])             };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName             {                 Id = StringToInt(fields[0])'                 Name = fields[1]'                 NameASCII = fields[2]'                 AlternateNames = StringToArray(fields[3])'                 Latitude = StringToDouble(fields[4])'                 Longitude = StringToDouble(fields[5])'                 FeatureClass = fields[6]'                 FeatureCode = fields[7]'                 CountryCode = fields[8]'                 AlternateCountryCodes = StringToArray(fields[9])'                 Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                 Population = StringToLong(fields[14])'                 Elevation = fields[15].Length > 0 ? (int?)StringToInt(fields[15]) : null'                 Dem = StringToInt(fields[16])'                 Timezone = StringToTimeZone(fields[17])'                 ModificationDate = StringToDateTime(fields[18])             };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName             {                 Id = StringToInt(fields[0])'                 Name = fields[1]'                 NameASCII = fields[2]'                 AlternateNames = StringToArray(fields[3])'                 Latitude = StringToDouble(fields[4])'                 Longitude = StringToDouble(fields[5])'                 FeatureClass = fields[6]'                 FeatureCode = fields[7]'                 CountryCode = fields[8]'                 AlternateCountryCodes = StringToArray(fields[9])'                 Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                 Population = StringToLong(fields[14])'                 Elevation = fields[15].Length > 0 ? (int?)StringToInt(fields[15]) : null'                 Dem = StringToInt(fields[16])'                 Timezone = StringToTimeZone(fields[17])'                 ModificationDate = StringToDateTime(fields[18])             };
Magic Number,NGeoNames.Parsers,ExtendedGeoNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\ExtendedGeoNameParser.cs,Parse,The following statement contains a magic number: return new ExtendedGeoName             {                 Id = StringToInt(fields[0])'                 Name = fields[1]'                 NameASCII = fields[2]'                 AlternateNames = StringToArray(fields[3])'                 Latitude = StringToDouble(fields[4])'                 Longitude = StringToDouble(fields[5])'                 FeatureClass = fields[6]'                 FeatureCode = fields[7]'                 CountryCode = fields[8]'                 AlternateCountryCodes = StringToArray(fields[9])'                 Admincodes = new[] { fields[10]' fields[11]' fields[12]' fields[13] }'                 Population = StringToLong(fields[14])'                 Elevation = fields[15].Length > 0 ? (int?)StringToInt(fields[15]) : null'                 Dem = StringToInt(fields[16])'                 Timezone = StringToTimeZone(fields[17])'                 ModificationDate = StringToDateTime(fields[18])             };
Magic Number,NGeoNames.Parsers,FeatureCodeParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\FeatureCodeParser.cs,Parse,The following statement contains a magic number: return new FeatureCode             {                 Class = d[0].Equals("null"' StringComparison.OrdinalIgnoreCase) ? null : d[0]'                 Code = d.Length == 2 ? d[1] : null'                 Name = fields[1]'                 Description = fields[2]             };
Magic Number,NGeoNames.Parsers,FeatureCodeParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\FeatureCodeParser.cs,Parse,The following statement contains a magic number: return new FeatureCode             {                 Class = d[0].Equals("null"' StringComparison.OrdinalIgnoreCase) ? null : d[0]'                 Code = d.Length == 2 ? d[1] : null'                 Name = fields[1]'                 Description = fields[2]             };
Magic Number,NGeoNames.Parsers,GeoNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\GeoNameParser.cs,GeoNameParser,The following statement contains a magic number: _expectednumberoffields = useextendedfileformat ? 19 : 4;
Magic Number,NGeoNames.Parsers,GeoNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\GeoNameParser.cs,GeoNameParser,The following statement contains a magic number: _expectednumberoffields = useextendedfileformat ? 19 : 4;
Magic Number,NGeoNames.Parsers,GeoNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\GeoNameParser.cs,Parse,The following statement contains a magic number: switch (ExpectedNumberOfFields)             {                 case 4:                     return new GeoName                     {                         Id = StringToInt(fields[0])'                         Name = fields[1]'                         Latitude = StringToDouble(fields[2])'                         Longitude = StringToDouble(fields[3])'                     };                 case 19:                     return new GeoName                     {                         Id = StringToInt(fields[0])'                         Name = fields[1]'                         Latitude = StringToDouble(fields[4])'                         Longitude = StringToDouble(fields[5])'                     };             }
Magic Number,NGeoNames.Parsers,GeoNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\GeoNameParser.cs,Parse,The following statement contains a magic number: switch (ExpectedNumberOfFields)             {                 case 4:                     return new GeoName                     {                         Id = StringToInt(fields[0])'                         Name = fields[1]'                         Latitude = StringToDouble(fields[2])'                         Longitude = StringToDouble(fields[3])'                     };                 case 19:                     return new GeoName                     {                         Id = StringToInt(fields[0])'                         Name = fields[1]'                         Latitude = StringToDouble(fields[4])'                         Longitude = StringToDouble(fields[5])'                     };             }
Magic Number,NGeoNames.Parsers,GeoNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\GeoNameParser.cs,Parse,The following statement contains a magic number: switch (ExpectedNumberOfFields)             {                 case 4:                     return new GeoName                     {                         Id = StringToInt(fields[0])'                         Name = fields[1]'                         Latitude = StringToDouble(fields[2])'                         Longitude = StringToDouble(fields[3])'                     };                 case 19:                     return new GeoName                     {                         Id = StringToInt(fields[0])'                         Name = fields[1]'                         Latitude = StringToDouble(fields[4])'                         Longitude = StringToDouble(fields[5])'                     };             }
Magic Number,NGeoNames.Parsers,GeoNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\GeoNameParser.cs,Parse,The following statement contains a magic number: switch (ExpectedNumberOfFields)             {                 case 4:                     return new GeoName                     {                         Id = StringToInt(fields[0])'                         Name = fields[1]'                         Latitude = StringToDouble(fields[2])'                         Longitude = StringToDouble(fields[3])'                     };                 case 19:                     return new GeoName                     {                         Id = StringToInt(fields[0])'                         Name = fields[1]'                         Latitude = StringToDouble(fields[4])'                         Longitude = StringToDouble(fields[5])'                     };             }
Magic Number,NGeoNames.Parsers,GeoNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\GeoNameParser.cs,Parse,The following statement contains a magic number: switch (ExpectedNumberOfFields)             {                 case 4:                     return new GeoName                     {                         Id = StringToInt(fields[0])'                         Name = fields[1]'                         Latitude = StringToDouble(fields[2])'                         Longitude = StringToDouble(fields[3])'                     };                 case 19:                     return new GeoName                     {                         Id = StringToInt(fields[0])'                         Name = fields[1]'                         Latitude = StringToDouble(fields[4])'                         Longitude = StringToDouble(fields[5])'                     };             }
Magic Number,NGeoNames.Parsers,GeoNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\GeoNameParser.cs,Parse,The following statement contains a magic number: switch (ExpectedNumberOfFields)             {                 case 4:                     return new GeoName                     {                         Id = StringToInt(fields[0])'                         Name = fields[1]'                         Latitude = StringToDouble(fields[2])'                         Longitude = StringToDouble(fields[3])'                     };                 case 19:                     return new GeoName                     {                         Id = StringToInt(fields[0])'                         Name = fields[1]'                         Latitude = StringToDouble(fields[4])'                         Longitude = StringToDouble(fields[5])'                     };             }
Magic Number,NGeoNames.Parsers,HierarchyParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\HierarchyParser.cs,Parse,The following statement contains a magic number: return new HierarchyNode             {                 ParentId = StringToInt(fields[0])'                 ChildId = StringToInt(fields[1])'                 Type = fields[2]             };
Magic Number,NGeoNames.Parsers,ISOLanguageCodeParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\ISOLanguageCodeParser.cs,Parse,The following statement contains a magic number: return new ISOLanguageCode             {                 ISO_639_3 = fields[0]'                 ISO_639_2 = fields[1]'                 ISO_639_1 = fields[2]'                 LanguageName = fields[3]             };
Magic Number,NGeoNames.Parsers,ISOLanguageCodeParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\ISOLanguageCodeParser.cs,Parse,The following statement contains a magic number: return new ISOLanguageCode             {                 ISO_639_3 = fields[0]'                 ISO_639_2 = fields[1]'                 ISO_639_1 = fields[2]'                 LanguageName = fields[3]             };
Magic Number,NGeoNames.Parsers,PostalcodeParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\PostalcodeParser.cs,Parse,The following statement contains a magic number: return new Postalcode             {                 CountryCode = fields[0]'                 PostalCode = fields[1]'                 PlaceName = fields[2]'                 AdminName = new[] { fields[3]' fields[5]' fields[7] }'                 AdminCode = new[] { fields[4]' fields[6]' fields[8] }'                 Latitude = fields[9].Length > 0 ? StringToDouble(fields[9]) : double.NaN'                 Longitude = fields[10].Length > 0 ? StringToDouble(fields[10]) : double.NaN'                 Accuracy = fields[11].Length > 0 ? (int?)StringToInt(fields[11]) : null             };
Magic Number,NGeoNames.Parsers,PostalcodeParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\PostalcodeParser.cs,Parse,The following statement contains a magic number: return new Postalcode             {                 CountryCode = fields[0]'                 PostalCode = fields[1]'                 PlaceName = fields[2]'                 AdminName = new[] { fields[3]' fields[5]' fields[7] }'                 AdminCode = new[] { fields[4]' fields[6]' fields[8] }'                 Latitude = fields[9].Length > 0 ? StringToDouble(fields[9]) : double.NaN'                 Longitude = fields[10].Length > 0 ? StringToDouble(fields[10]) : double.NaN'                 Accuracy = fields[11].Length > 0 ? (int?)StringToInt(fields[11]) : null             };
Magic Number,NGeoNames.Parsers,PostalcodeParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\PostalcodeParser.cs,Parse,The following statement contains a magic number: return new Postalcode             {                 CountryCode = fields[0]'                 PostalCode = fields[1]'                 PlaceName = fields[2]'                 AdminName = new[] { fields[3]' fields[5]' fields[7] }'                 AdminCode = new[] { fields[4]' fields[6]' fields[8] }'                 Latitude = fields[9].Length > 0 ? StringToDouble(fields[9]) : double.NaN'                 Longitude = fields[10].Length > 0 ? StringToDouble(fields[10]) : double.NaN'                 Accuracy = fields[11].Length > 0 ? (int?)StringToInt(fields[11]) : null             };
Magic Number,NGeoNames.Parsers,PostalcodeParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\PostalcodeParser.cs,Parse,The following statement contains a magic number: return new Postalcode             {                 CountryCode = fields[0]'                 PostalCode = fields[1]'                 PlaceName = fields[2]'                 AdminName = new[] { fields[3]' fields[5]' fields[7] }'                 AdminCode = new[] { fields[4]' fields[6]' fields[8] }'                 Latitude = fields[9].Length > 0 ? StringToDouble(fields[9]) : double.NaN'                 Longitude = fields[10].Length > 0 ? StringToDouble(fields[10]) : double.NaN'                 Accuracy = fields[11].Length > 0 ? (int?)StringToInt(fields[11]) : null             };
Magic Number,NGeoNames.Parsers,PostalcodeParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\PostalcodeParser.cs,Parse,The following statement contains a magic number: return new Postalcode             {                 CountryCode = fields[0]'                 PostalCode = fields[1]'                 PlaceName = fields[2]'                 AdminName = new[] { fields[3]' fields[5]' fields[7] }'                 AdminCode = new[] { fields[4]' fields[6]' fields[8] }'                 Latitude = fields[9].Length > 0 ? StringToDouble(fields[9]) : double.NaN'                 Longitude = fields[10].Length > 0 ? StringToDouble(fields[10]) : double.NaN'                 Accuracy = fields[11].Length > 0 ? (int?)StringToInt(fields[11]) : null             };
Magic Number,NGeoNames.Parsers,PostalcodeParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\PostalcodeParser.cs,Parse,The following statement contains a magic number: return new Postalcode             {                 CountryCode = fields[0]'                 PostalCode = fields[1]'                 PlaceName = fields[2]'                 AdminName = new[] { fields[3]' fields[5]' fields[7] }'                 AdminCode = new[] { fields[4]' fields[6]' fields[8] }'                 Latitude = fields[9].Length > 0 ? StringToDouble(fields[9]) : double.NaN'                 Longitude = fields[10].Length > 0 ? StringToDouble(fields[10]) : double.NaN'                 Accuracy = fields[11].Length > 0 ? (int?)StringToInt(fields[11]) : null             };
Magic Number,NGeoNames.Parsers,PostalcodeParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\PostalcodeParser.cs,Parse,The following statement contains a magic number: return new Postalcode             {                 CountryCode = fields[0]'                 PostalCode = fields[1]'                 PlaceName = fields[2]'                 AdminName = new[] { fields[3]' fields[5]' fields[7] }'                 AdminCode = new[] { fields[4]' fields[6]' fields[8] }'                 Latitude = fields[9].Length > 0 ? StringToDouble(fields[9]) : double.NaN'                 Longitude = fields[10].Length > 0 ? StringToDouble(fields[10]) : double.NaN'                 Accuracy = fields[11].Length > 0 ? (int?)StringToInt(fields[11]) : null             };
Magic Number,NGeoNames.Parsers,PostalcodeParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\PostalcodeParser.cs,Parse,The following statement contains a magic number: return new Postalcode             {                 CountryCode = fields[0]'                 PostalCode = fields[1]'                 PlaceName = fields[2]'                 AdminName = new[] { fields[3]' fields[5]' fields[7] }'                 AdminCode = new[] { fields[4]' fields[6]' fields[8] }'                 Latitude = fields[9].Length > 0 ? StringToDouble(fields[9]) : double.NaN'                 Longitude = fields[10].Length > 0 ? StringToDouble(fields[10]) : double.NaN'                 Accuracy = fields[11].Length > 0 ? (int?)StringToInt(fields[11]) : null             };
Magic Number,NGeoNames.Parsers,PostalcodeParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\PostalcodeParser.cs,Parse,The following statement contains a magic number: return new Postalcode             {                 CountryCode = fields[0]'                 PostalCode = fields[1]'                 PlaceName = fields[2]'                 AdminName = new[] { fields[3]' fields[5]' fields[7] }'                 AdminCode = new[] { fields[4]' fields[6]' fields[8] }'                 Latitude = fields[9].Length > 0 ? StringToDouble(fields[9]) : double.NaN'                 Longitude = fields[10].Length > 0 ? StringToDouble(fields[10]) : double.NaN'                 Accuracy = fields[11].Length > 0 ? (int?)StringToInt(fields[11]) : null             };
Magic Number,NGeoNames.Parsers,PostalcodeParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\PostalcodeParser.cs,Parse,The following statement contains a magic number: return new Postalcode             {                 CountryCode = fields[0]'                 PostalCode = fields[1]'                 PlaceName = fields[2]'                 AdminName = new[] { fields[3]' fields[5]' fields[7] }'                 AdminCode = new[] { fields[4]' fields[6]' fields[8] }'                 Latitude = fields[9].Length > 0 ? StringToDouble(fields[9]) : double.NaN'                 Longitude = fields[10].Length > 0 ? StringToDouble(fields[10]) : double.NaN'                 Accuracy = fields[11].Length > 0 ? (int?)StringToInt(fields[11]) : null             };
Magic Number,NGeoNames.Parsers,PostalcodeParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\PostalcodeParser.cs,Parse,The following statement contains a magic number: return new Postalcode             {                 CountryCode = fields[0]'                 PostalCode = fields[1]'                 PlaceName = fields[2]'                 AdminName = new[] { fields[3]' fields[5]' fields[7] }'                 AdminCode = new[] { fields[4]' fields[6]' fields[8] }'                 Latitude = fields[9].Length > 0 ? StringToDouble(fields[9]) : double.NaN'                 Longitude = fields[10].Length > 0 ? StringToDouble(fields[10]) : double.NaN'                 Accuracy = fields[11].Length > 0 ? (int?)StringToInt(fields[11]) : null             };
Magic Number,NGeoNames.Parsers,PostalcodeParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\PostalcodeParser.cs,Parse,The following statement contains a magic number: return new Postalcode             {                 CountryCode = fields[0]'                 PostalCode = fields[1]'                 PlaceName = fields[2]'                 AdminName = new[] { fields[3]' fields[5]' fields[7] }'                 AdminCode = new[] { fields[4]' fields[6]' fields[8] }'                 Latitude = fields[9].Length > 0 ? StringToDouble(fields[9]) : double.NaN'                 Longitude = fields[10].Length > 0 ? StringToDouble(fields[10]) : double.NaN'                 Accuracy = fields[11].Length > 0 ? (int?)StringToInt(fields[11]) : null             };
Magic Number,NGeoNames.Parsers,PostalcodeParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\PostalcodeParser.cs,Parse,The following statement contains a magic number: return new Postalcode             {                 CountryCode = fields[0]'                 PostalCode = fields[1]'                 PlaceName = fields[2]'                 AdminName = new[] { fields[3]' fields[5]' fields[7] }'                 AdminCode = new[] { fields[4]' fields[6]' fields[8] }'                 Latitude = fields[9].Length > 0 ? StringToDouble(fields[9]) : double.NaN'                 Longitude = fields[10].Length > 0 ? StringToDouble(fields[10]) : double.NaN'                 Accuracy = fields[11].Length > 0 ? (int?)StringToInt(fields[11]) : null             };
Magic Number,NGeoNames.Parsers,TimeZoneParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\TimeZoneParser.cs,Parse,The following statement contains a magic number: return new TimeZone             {                 CountryCode = fields[0]'                 TimeZoneId =  StringToTimeZone(fields[1])'                 GMTOffset = StringToFloat(fields[2])'                 DSTOffset = StringToFloat(fields[3])'                 RawOffset = StringToFloat(fields[4])             };
Magic Number,NGeoNames.Parsers,TimeZoneParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\TimeZoneParser.cs,Parse,The following statement contains a magic number: return new TimeZone             {                 CountryCode = fields[0]'                 TimeZoneId =  StringToTimeZone(fields[1])'                 GMTOffset = StringToFloat(fields[2])'                 DSTOffset = StringToFloat(fields[3])'                 RawOffset = StringToFloat(fields[4])             };
Magic Number,NGeoNames.Parsers,TimeZoneParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\TimeZoneParser.cs,Parse,The following statement contains a magic number: return new TimeZone             {                 CountryCode = fields[0]'                 TimeZoneId =  StringToTimeZone(fields[1])'                 GMTOffset = StringToFloat(fields[2])'                 DSTOffset = StringToFloat(fields[3])'                 RawOffset = StringToFloat(fields[4])             };
Missing Default,NGeoNames,FileUtil,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\FileType.cs,GetFileTypeFromExtension,The following switch statement is missing a default case: switch (fi.Extension.ToLowerInvariant())             {                 case ".txt":                     return FileType.Plain;                 case ".gz":                     return FileType.GZip;             }
Missing Default,NGeoNames,GeoFileReader,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\GeoFileReader.cs,GetStream,The following switch statement is missing a default case: switch (readastype)             {                 case FileType.Plain:                     return filestream;                 case FileType.GZip:                     return new GZipStream(filestream' CompressionMode.Decompress);             }
Missing Default,NGeoNames,GeoFileWriter,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\GeoFileWriter.cs,GetStream,The following switch statement is missing a default case: switch (writeastype)             {                 case FileType.Plain:                     return filestream;                 case FileType.GZip:                     return new GZipStream(filestream' CompressionLevel.Optimal);             }
Missing Default,NGeoNames.Parsers,GeoNameParser,C:\research\architectureSmells\repos\RobThree_NGeoNames\NGeoNames\Parsers\GeoNameParser.cs,Parse,The following switch statement is missing a default case: switch (ExpectedNumberOfFields)             {                 case 4:                     return new GeoName                     {                         Id = StringToInt(fields[0])'                         Name = fields[1]'                         Latitude = StringToDouble(fields[2])'                         Longitude = StringToDouble(fields[3])'                     };                 case 19:                     return new GeoName                     {                         Id = StringToInt(fields[0])'                         Name = fields[1]'                         Latitude = StringToDouble(fields[4])'                         Longitude = StringToDouble(fields[5])'                     };             }
