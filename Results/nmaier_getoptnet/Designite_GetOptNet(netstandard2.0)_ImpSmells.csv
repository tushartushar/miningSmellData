Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NMaier.GetOptNet,GetOpt,C:\research\architectureSmells\repos\nmaier_getoptnet\GetOpt.cs,Initialize,Cyclomatic complexity of the method is 11
Complex Method,NMaier.GetOptNet,GetOpt,C:\research\architectureSmells\repos\nmaier_getoptnet\GetOpt.cs,Update,Cyclomatic complexity of the method is 10
Complex Method,NMaier.GetOptNet,GetOpt,C:\research\architectureSmells\repos\nmaier_getoptnet\GetOpt.cs,MaybeHandleDashArgument,Cyclomatic complexity of the method is 13
Complex Method,NMaier.GetOptNet,GetOpt,C:\research\architectureSmells\repos\nmaier_getoptnet\GetOpt.cs,MaybeHandleSlashArgument,Cyclomatic complexity of the method is 10
Complex Method,NMaier.GetOptNet,GetOpt,C:\research\architectureSmells\repos\nmaier_getoptnet\GetOpt.cs,CollectOptInfos,Cyclomatic complexity of the method is 11
Complex Method,NMaier.GetOptNet,ArgumentHandler,C:\research\architectureSmells\repos\nmaier_getoptnet\Handlers\ArgumentHandler.cs,InternalConvert,Cyclomatic complexity of the method is 16
Long Parameter List,NMaier.GetOptNet,ArgumentHandler,C:\research\architectureSmells\repos\nmaier_getoptnet\Handlers\ArgumentHandler.cs,ArgumentHandler,The method has 5 parameters. Parameters: handledObject' memberInfo' elementType' isFlag' required
Long Parameter List,NMaier.GetOptNet,ArrayArgumentHandler,C:\research\architectureSmells\repos\nmaier_getoptnet\Handlers\ArrayArgumentHandler.cs,ArrayArgumentHandler,The method has 5 parameters. Parameters: handledObject' memberInfo' elementType' min' maxArguments
Long Parameter List,NMaier.GetOptNet,EnumArgumentHandler,C:\research\architectureSmells\repos\nmaier_getoptnet\Handlers\EnumArgumentHandler.cs,EnumArgumentHandler,The method has 5 parameters. Parameters: handledObject' memberInfo' elementType' collision' required
Long Parameter List,NMaier.GetOptNet,FlagArgumentHandler,C:\research\architectureSmells\repos\nmaier_getoptnet\Handlers\FlagArgumentHandler.cs,FlagArgumentHandler,The method has 5 parameters. Parameters: handledObject' memberInfo' aCollision' required' whenSet
Long Parameter List,NMaier.GetOptNet,ListArgumentHandler,C:\research\architectureSmells\repos\nmaier_getoptnet\Handlers\ListArgumentHandler.cs,ListArgumentHandler,The method has 5 parameters. Parameters: handledObject' memberInfo' elementType' min' maxArguments
Long Parameter List,NMaier.GetOptNet,MultipleArgumentHandler,C:\research\architectureSmells\repos\nmaier_getoptnet\Handlers\MultipleArgumentHandler.cs,MultipleArgumentHandler,The method has 5 parameters. Parameters: handledObject' memberInternalInfo' elementType' min' max
Long Parameter List,NMaier.GetOptNet,PlainArgumentHandler,C:\research\architectureSmells\repos\nmaier_getoptnet\Handlers\PlainArgumentHandler.cs,PlainArgumentHandler,The method has 5 parameters. Parameters: handledObject' memberInternalInfo' elementType' collision' required
Long Parameter List,NMaier.GetOptNet,OptInfo,C:\research\architectureSmells\repos\nmaier_getoptnet\OptInfo.cs,OptInfo,The method has 6 parameters. Parameters: name' flag' helpText' helpVar' prefix' acceptsMultiple
Empty Catch Block,NMaier.GetOptNet,GetOpt,C:\research\architectureSmells\repos\nmaier_getoptnet\GetOpt.cs,PrintUsage,The method has an empty catch block.
Empty Catch Block,NMaier.GetOptNet,GetOpt,C:\research\architectureSmells\repos\nmaier_getoptnet\GetOpt.cs,PrintUsage,The method has an empty catch block.
Magic Number,NMaier.GetOptNet,GetOpt,C:\research\architectureSmells\repos\nmaier_getoptnet\GetOpt.cs,MaybeHandleDashArgument,The following statement contains a magic number: var val = m.Groups[2].Value;
Magic Number,NMaier.GetOptNet,GetOpt,C:\research\architectureSmells\repos\nmaier_getoptnet\GetOpt.cs,MaybeHandleSlashArgument,The following statement contains a magic number: var val = match.Groups[2].Value;
Magic Number,NMaier.GetOptNet,GetOpt,C:\research\architectureSmells\repos\nmaier_getoptnet\GetOpt.cs,AssembleUsage,The following statement contains a magic number: var maxLine = (long)width / 2;
Magic Number,NMaier.GetOptNet,GetOpt,C:\research\architectureSmells\repos\nmaier_getoptnet\GetOpt.cs,AssembleUsage,The following statement contains a magic number: var maxArg = width / 4;
Magic Number,NMaier.GetOptNet,GetOpt,C:\research\architectureSmells\repos\nmaier_getoptnet\GetOpt.cs,AssembleUsage,The following statement contains a magic number: maxArg = Math.Max((from o in options                          let len = o.Argtext.Length + 3                          where len <= maxLine                          select len).Max()' maxArg);
Magic Number,NMaier.GetOptNet,GetOpt,C:\research\architectureSmells\repos\nmaier_getoptnet\GetOpt.cs,PrintUsage,The following statement contains a magic number: var consoleWidth = 80;
Magic Number,NMaier.GetOptNet,GetOpt,C:\research\architectureSmells\repos\nmaier_getoptnet\GetOpt.cs,GetUsageIntro,The following statement contains a magic number: parameters.Min == 2 && parameters.Min == parameters.Max
Missing Default,NMaier.GetOptNet,ArgumentHandler,C:\research\architectureSmells\repos\nmaier_getoptnet\Handlers\ArgumentHandler.cs,InternalConvert,The following switch statement is missing a default case: switch (type) {       case Type t when t == typeof(string):         return from;       case Type t when t == typeof(bool):         if (booleans.TryGetValue(from.Trim()' out var b)) {           return b;         }          return bool.Parse(from);       case Type t when t == typeof(byte):         return byte.Parse(from);       case Type t when t == typeof(sbyte):         return sbyte.Parse(from);       case Type t when t == typeof(char):         return char.Parse(from);       case Type t when t == typeof(short):         return short.Parse(from);       case Type t when t == typeof(ushort):         return ushort.Parse(from);       case Type t when t == typeof(int):         return int.Parse(from);       case Type t when t == typeof(uint):         return uint.Parse(from);       case Type t when t == typeof(long):         return int.Parse(from);       case Type t when t == typeof(ulong):         return uint.Parse(from);       case Type t when t == typeof(DirectoryInfo):         return new DirectoryInfo(from.TrimEnd(Path.DirectorySeparatorChar' Path.AltDirectorySeparatorChar));       case Type t when t == typeof(FileInfo):         return new FileInfo(from);       }
