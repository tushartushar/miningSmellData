Implementation smell,Namespace,Class,File,Method,Description
Long Statement,RealismOverhaul,CompatibilityChecker,F:\newReposMay17\KSP-RO_RealismOverhaul\Source\Checkers.cs,Start,The length of the statement  "	FieldInfo[] fields = getAllTypes ().Where (t => t.Name == "CompatibilityChecker").Select (t => t.GetField ("_version"' BindingFlags.Static | BindingFlags.NonPublic)).Where (f => f != null).Where (f => f.FieldType == typeof(int)).ToArray (); " is 240.
Long Statement,RealismOverhaul,CompatibilityChecker,F:\newReposMay17\KSP-RO_RealismOverhaul\Source\Checkers.cs,Start,The length of the statement  "	Debug.Log (String.Format ("[CompatibilityChecker] Running checker version {0} from '{1}'"' _version' Assembly.GetExecutingAssembly ().GetName ().Name)); " is 152.
Long Statement,RealismOverhaul,CompatibilityChecker,F:\newReposMay17\KSP-RO_RealismOverhaul\Source\Checkers.cs,Start,The length of the statement  "	String[] incompatible = fields.Select (f => f.DeclaringType.GetMethod ("IsCompatible"' Type.EmptyTypes)).Where (m => m.IsStatic).Where (m => m.ReturnType == typeof(bool)).Where (m => { " is 184.
Long Statement,RealismOverhaul,CompatibilityChecker,F:\newReposMay17\KSP-RO_RealismOverhaul\Source\Checkers.cs,Start,The length of the statement  "			Debug.LogWarning (String.Format ("[CompatibilityChecker] Exception while invoking IsCompatible() from '{0}':\n\n{1}"' m.DeclaringType.Assembly.GetName ().Name' e)); " is 164.
Long Statement,RealismOverhaul,CompatibilityChecker,F:\newReposMay17\KSP-RO_RealismOverhaul\Source\Checkers.cs,Start,The length of the statement  "	String[] incompatibleUnity = fields.Select (f => f.DeclaringType.GetMethod ("IsUnityCompatible"' Type.EmptyTypes)).Where (m => m != null)// Mods without IsUnityCompatible() are assumed to be compatible. " is 202.
Long Statement,RealismOverhaul,CompatibilityChecker,F:\newReposMay17\KSP-RO_RealismOverhaul\Source\Checkers.cs,Start,The length of the statement  "			Debug.LogWarning (String.Format ("[CompatibilityChecker] Exception while invoking IsUnityCompatible() from '{0}':\n\n{1}"' m.DeclaringType.Assembly.GetName ().Name' e)); " is 169.
Long Statement,RealismOverhaul,CompatibilityChecker,F:\newReposMay17\KSP-RO_RealismOverhaul\Source\Checkers.cs,Start,The length of the statement  "		message += ((message == String.Empty) ? "Some" : "\n\nAdditionally' some") + " installed mods may be incompatible with this version of Kerbal Space Program. Features may be broken or disabled. Please check for updates to the listed mods."; " is 239.
Long Statement,RealismOverhaul,CompatibilityChecker,F:\newReposMay17\KSP-RO_RealismOverhaul\Source\Checkers.cs,Start,The length of the statement  "			message += String.Format ("\n\nThese mods are incompatible with KSP {0}.{1}.{2}:\n\n"' Versioning.version_major' Versioning.version_minor' Versioning.Revision); " is 160.
Long Statement,RealismOverhaul,CompatibilityChecker,F:\newReposMay17\KSP-RO_RealismOverhaul\Source\Checkers.cs,Start,The length of the statement  "			Debug.LogWarning ("[CompatibilityChecker] Incompatible mods (Unity) detected: " + String.Join ("' "' incompatibleUnity)); " is 121.
Long Statement,RealismOverhaul,CompatibilityChecker,F:\newReposMay17\KSP-RO_RealismOverhaul\Source\Checkers.cs,Start,The length of the statement  "		PopupDialog.SpawnPopupDialog (new Vector2 (0' 0)' new Vector2 (0' 0)' "Incompatible Mods Detected"' message' "OK"' true' HighLogic.UISkin); " is 139.
Long Statement,RealismOverhaul,CoMShifter,F:\newReposMay17\KSP-RO_RealismOverhaul\Source\CoMShifter.cs,SetDescentMode,The length of the statement  "	comString = part.CoMOffset.x.ToString ("N3") + "'" + part.CoMOffset.y.ToString ("N3") + "'" + part.CoMOffset.z.ToString ("N3"); " is 127.
Magic Number,RealismOverhaul,CompatibilityChecker,F:\newReposMay17\KSP-RO_RealismOverhaul\Source\Checkers.cs,IsCompatible,The following statement contains a magic number: return Versioning.version_minor == 2 && Versioning.version_major == 1;  
Magic Number,RealismOverhaul,CompatibilityChecker,F:\newReposMay17\KSP-RO_RealismOverhaul\Source\Checkers.cs,IsWin64,The following statement contains a magic number: return (IntPtr.Size == 8) && (Environment.OSVersion.Platform == PlatformID.Win32NT);  
