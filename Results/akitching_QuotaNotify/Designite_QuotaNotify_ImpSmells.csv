Implementation smell,Namespace,Class,File,Method,Description
Complex Method,QuotaNotify,Config,C:\repos\akitching_QuotaNotify\Config.cs,loadFromFile,Cyclomatic complexity of the method is 14
Complex Method,QuotaNotify,DiskChecker,C:\repos\akitching_QuotaNotify\DiskChecker.cs,checkDriveSpace,Cyclomatic complexity of the method is 8
Long Statement,QuotaNotify,DiskChecker,C:\repos\akitching_QuotaNotify\DiskChecker.cs,checkDriveSpace,The length of the statement  "				if ((percentFree < config.WarnPercent) && ((percentFree < drv.PercentFree || config.Obsess == true)) && (drive.TotalFreeSpace < config.WarnBelow)) { " is 148.
Complex Conditional,QuotaNotify,DiskChecker,C:\repos\akitching_QuotaNotify\DiskChecker.cs,checkDriveSpace,The conditional expression  "(percentFree < config.WarnPercent) && ((percentFree < drv.PercentFree || config.Obsess == true)) && (drive.TotalFreeSpace < config.WarnBelow)"  is complex.
Empty Catch Block,QuotaNotify,Config,C:\repos\akitching_QuotaNotify\Config.cs,loadFromFile,The method has an empty catch block.
Empty Catch Block,QuotaNotify,Config,C:\repos\akitching_QuotaNotify\Config.cs,loadFromFile,The method has an empty catch block.
Magic Number,QuotaNotify,Config,C:\repos\akitching_QuotaNotify\Config.cs,Config,The following statement contains a magic number: InitialInterval = 5000;  
Magic Number,QuotaNotify,Config,C:\repos\akitching_QuotaNotify\Config.cs,Config,The following statement contains a magic number: CheckInterval = 300000;  
Magic Number,QuotaNotify,Config,C:\repos\akitching_QuotaNotify\Config.cs,Config,The following statement contains a magic number: WarnPercent = 10;  
Magic Number,QuotaNotify,Config,C:\repos\akitching_QuotaNotify\Config.cs,Config,The following statement contains a magic number: WarnBelow = 100 * 1024 * 1024;  
Magic Number,QuotaNotify,Config,C:\repos\akitching_QuotaNotify\Config.cs,Config,The following statement contains a magic number: WarnBelow = 100 * 1024 * 1024;  
Magic Number,QuotaNotify,Config,C:\repos\akitching_QuotaNotify\Config.cs,Config,The following statement contains a magic number: WarnBelow = 100 * 1024 * 1024;  
Magic Number,QuotaNotify,DiskChecker,C:\repos\akitching_QuotaNotify\DiskChecker.cs,checkDriveSpace,The following statement contains a magic number: foreach (DriveInfo drive in DriveInfo.GetDrives ()) {  	if (drive.IsReady) {  		double percentFree = ((double)drive.TotalFreeSpace / drive.TotalSize) * 100;  		char driveLetter = drive.Name.ToCharArray () [0];  		if (config.Drives.Exists (x => x.Letter == driveLetter)) {  			Drive drv = config.Drives.Find (x => x.Letter == driveLetter);  			if ((percentFree < config.WarnPercent) && ((percentFree < drv.PercentFree || config.Obsess == true)) && (drive.TotalFreeSpace < config.WarnBelow)) {  				warning = true;  				message += "Drive " + drive.Name + " has only " + String.Format ("{0:F2}"' percentFree) + "% free space.\n";  			}  			drv.PercentFree = percentFree;  		}  	}  }  
Magic Number,QuotaNotify,DiskChecker,C:\repos\akitching_QuotaNotify\DiskChecker.cs,checkDriveSpace,The following statement contains a magic number: if (drive.IsReady) {  	double percentFree = ((double)drive.TotalFreeSpace / drive.TotalSize) * 100;  	char driveLetter = drive.Name.ToCharArray () [0];  	if (config.Drives.Exists (x => x.Letter == driveLetter)) {  		Drive drv = config.Drives.Find (x => x.Letter == driveLetter);  		if ((percentFree < config.WarnPercent) && ((percentFree < drv.PercentFree || config.Obsess == true)) && (drive.TotalFreeSpace < config.WarnBelow)) {  			warning = true;  			message += "Drive " + drive.Name + " has only " + String.Format ("{0:F2}"' percentFree) + "% free space.\n";  		}  		drv.PercentFree = percentFree;  	}  }  
Magic Number,QuotaNotify,Drive,C:\repos\akitching_QuotaNotify\Drive.cs,GetHashCode,The following statement contains a magic number: unchecked {  	hashCode += 1000000007 * Letter.GetHashCode ();  }  
Magic Number,QuotaNotify,Drive,C:\repos\akitching_QuotaNotify\Drive.cs,GetHashCode,The following statement contains a magic number: hashCode += 1000000007 * Letter.GetHashCode ();  
Magic Number,QuotaNotify,NotificationIcon,C:\repos\akitching_QuotaNotify\NotificationIcon.cs,Main,The following statement contains a magic number: using (Mutex mtx = new Mutex (true' "QuotaNotify"' out isFirstInstance)) {  	if (isFirstInstance) {  		NotificationIcon notificationIcon = new NotificationIcon ();  		notificationIcon.notifyIcon.Visible = true;  		DiskChecker d = new DiskChecker ();  		d.FormBorderStyle = FormBorderStyle.FixedToolWindow;  		d.ShowInTaskbar = false;  		d.StartPosition = FormStartPosition.Manual;  		d.Location = new System.Drawing.Point (-2000' -2000);  		d.Size = new System.Drawing.Size (1' 1);  		Application.Run (d);  		notificationIcon.notifyIcon.Dispose ();  	}  	else {  		// The application is already running  		// TODO: Display message box or change focus to existing application instance  	}  }  
Magic Number,QuotaNotify,NotificationIcon,C:\repos\akitching_QuotaNotify\NotificationIcon.cs,Main,The following statement contains a magic number: using (Mutex mtx = new Mutex (true' "QuotaNotify"' out isFirstInstance)) {  	if (isFirstInstance) {  		NotificationIcon notificationIcon = new NotificationIcon ();  		notificationIcon.notifyIcon.Visible = true;  		DiskChecker d = new DiskChecker ();  		d.FormBorderStyle = FormBorderStyle.FixedToolWindow;  		d.ShowInTaskbar = false;  		d.StartPosition = FormStartPosition.Manual;  		d.Location = new System.Drawing.Point (-2000' -2000);  		d.Size = new System.Drawing.Size (1' 1);  		Application.Run (d);  		notificationIcon.notifyIcon.Dispose ();  	}  	else {  		// The application is already running  		// TODO: Display message box or change focus to existing application instance  	}  }  
Magic Number,QuotaNotify,NotificationIcon,C:\repos\akitching_QuotaNotify\NotificationIcon.cs,Main,The following statement contains a magic number: if (isFirstInstance) {  	NotificationIcon notificationIcon = new NotificationIcon ();  	notificationIcon.notifyIcon.Visible = true;  	DiskChecker d = new DiskChecker ();  	d.FormBorderStyle = FormBorderStyle.FixedToolWindow;  	d.ShowInTaskbar = false;  	d.StartPosition = FormStartPosition.Manual;  	d.Location = new System.Drawing.Point (-2000' -2000);  	d.Size = new System.Drawing.Size (1' 1);  	Application.Run (d);  	notificationIcon.notifyIcon.Dispose ();  }  else {  	// The application is already running  	// TODO: Display message box or change focus to existing application instance  }  
Magic Number,QuotaNotify,NotificationIcon,C:\repos\akitching_QuotaNotify\NotificationIcon.cs,Main,The following statement contains a magic number: if (isFirstInstance) {  	NotificationIcon notificationIcon = new NotificationIcon ();  	notificationIcon.notifyIcon.Visible = true;  	DiskChecker d = new DiskChecker ();  	d.FormBorderStyle = FormBorderStyle.FixedToolWindow;  	d.ShowInTaskbar = false;  	d.StartPosition = FormStartPosition.Manual;  	d.Location = new System.Drawing.Point (-2000' -2000);  	d.Size = new System.Drawing.Size (1' 1);  	Application.Run (d);  	notificationIcon.notifyIcon.Dispose ();  }  else {  	// The application is already running  	// TODO: Display message box or change focus to existing application instance  }  
Magic Number,QuotaNotify,NotificationIcon,C:\repos\akitching_QuotaNotify\NotificationIcon.cs,Main,The following statement contains a magic number: d.Location = new System.Drawing.Point (-2000' -2000);  
Magic Number,QuotaNotify,NotificationIcon,C:\repos\akitching_QuotaNotify\NotificationIcon.cs,Main,The following statement contains a magic number: d.Location = new System.Drawing.Point (-2000' -2000);  
