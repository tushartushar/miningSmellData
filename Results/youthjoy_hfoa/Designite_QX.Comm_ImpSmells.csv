Implementation smell,Namespace,Class,File,Method,Description
Long Method,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,IsCompatibleWith,The method has 116 lines of code.
Long Method,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,NextToken,The method has 185 lines of code.
Complex Method,QX.Comm,BindModelHelper,C:\repos\youthjoy_hfoa\QX.Comm\BindModelHelper.cs,BindFormToModel,Cyclomatic complexity of the method is 10
Complex Method,QX.Comm,Arithmetic,C:\repos\youthjoy_hfoa\QX.Comm\BuildRefNum.cs,Eval,Cyclomatic complexity of the method is 9
Complex Method,QX.Comm,FTP,C:\repos\youthjoy_hfoa\QX.Comm\Ftp.cs,GetList,Cyclomatic complexity of the method is 9
Complex Method,QX.Comm,HtmlHelperExtend,C:\repos\youthjoy_hfoa\QX.Comm\HtmlHelperExtend.cs,BindModelToControl,Cyclomatic complexity of the method is 9
Complex Method,QX.Comm,StringHelper,C:\repos\youthjoy_hfoa\QX.Comm\StringHelper.cs,NumberToMoney,Cyclomatic complexity of the method is 11
Complex Method,QX.Comm,ThumNail,C:\repos\youthjoy_hfoa\QX.Comm\ThumNail.cs,MakeThumNail,Cyclomatic complexity of the method is 15
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,ParseComparison,Cyclomatic complexity of the method is 29
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,ParseAdditive,Cyclomatic complexity of the method is 14
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,ParseMultiplicative,Cyclomatic complexity of the method is 11
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,ParseTypeAccess,Cyclomatic complexity of the method is 9
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,ParseMemberAccess,Cyclomatic complexity of the method is 15
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,ParseElementAccess,Cyclomatic complexity of the method is 8
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,GetNumericTypeKind,Cyclomatic complexity of the method is 13
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,PromoteExpression,Cyclomatic complexity of the method is 17
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,ParseNumber,Cyclomatic complexity of the method is 44
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,IsCompatibleWith,Cyclomatic complexity of the method is 30
Complex Method,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,NextToken,Cyclomatic complexity of the method is 111
Complex Method,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetSubString,Cyclomatic complexity of the method is 9
Complex Method,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetStaticPageNumbers,Cyclomatic complexity of the method is 15
Complex Method,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetPageNumbers,Cyclomatic complexity of the method is 12
Complex Method,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,ToColor,Cyclomatic complexity of the method is 11
Complex Method,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,DataTableToJson,Cyclomatic complexity of the method is 13
Complex Method,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetAjaxPageNumbers,Cyclomatic complexity of the method is 8
Long Parameter List,QX.Comm,ThumNail,C:\repos\youthjoy_hfoa\QX.Comm\ThumNail.cs,MakeThumNail,The method has 5 parameters.
Long Parameter List,QX.Comm,ThumNail,C:\repos\youthjoy_hfoa\QX.Comm\ThumNail.cs,AddWaterWord,The method has 5 parameters.
Long Parameter List,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,CheckAndPromoteOperands,The method has 5 parameters.
Long Parameter List,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,FindMethod,The method has 5 parameters.
Long Parameter List,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,FindIndexer,The method has 5 parameters.
Long Parameter List,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,FindBestMethod,The method has 7 parameters.
Long Parameter List,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,SplitString,The method has 5 parameters.
Long Parameter List,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetStaticPageNumbers,The method has 5 parameters.
Long Parameter List,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetStaticPageNumbers,The method has 6 parameters.
Long Parameter List,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetPageNumbers,The method has 5 parameters.
Long Parameter List,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetPageNumbers,The method has 6 parameters.
Long Parameter List,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,ConvertSimpleFileName,The method has 5 parameters.
Long Statement,QX.Comm,FTP,C:\repos\youthjoy_hfoa\QX.Comm\Ftp.cs,UploadFile,The length of the statement  "		if (!IsValidFileChars (RemoteFileName) || !IsValidFileChars (Path.GetFileName (LocalFullPath)) || !IsValidPathChars (Path.GetDirectoryName (LocalFullPath))) { " is 158.
Long Statement,QX.Comm,FTP,C:\repos\youthjoy_hfoa\QX.Comm\Ftp.cs,UploadFileAsync,The length of the statement  "		if (!IsValidFileChars (RemoteFileName) || !IsValidFileChars (Path.GetFileName (LocalFullPath)) || !IsValidPathChars (Path.GetDirectoryName (LocalFullPath))) { " is 158.
Long Statement,QX.Comm,HtmlHelperExtend,C:\repos\youthjoy_hfoa\QX.Comm\HtmlHelperExtend.cs,BindModelToControl,The length of the statement  "				sb.AppendLine (string.Format ("<div class=\"{0}\"><input type=\"text\" class=\"{1}\" value='{2}' /></div>"' fieldclass' inputclass' plist [kv.Key].GetValue (obj))); " is 164.
Long Statement,QX.Comm,HtmlHelperExtend,C:\repos\youthjoy_hfoa\QX.Comm\HtmlHelperExtend.cs,BindModelToControl,The length of the statement  "				sb.AppendLine (string.Format ("<div class=\"{0}\"><input type=\"text\" class=\"{1}\" value='{2}' /></div>"' fieldclass' inputclass' plist [kv.Key].GetValue (obj))); " is 164.
Long Statement,QX.Comm,HtmlHelperExtend,C:\repos\youthjoy_hfoa\QX.Comm\HtmlHelperExtend.cs,BindModelToControl,The length of the statement  "				sb.AppendLine (string.Format ("<div class=\"{0}\"><input type=\"checkbox\" class=\"{1}\" value='{2}' /></div>"' fieldclass' inputclass' plist [kv.Key].GetValue (obj))); " is 168.
Long Statement,QX.Comm,HtmlHelperExtend,C:\repos\youthjoy_hfoa\QX.Comm\HtmlHelperExtend.cs,BindModelToControl,The length of the statement  "				sb.AppendLine (string.Format ("<div class=\"{0}\"><input type=\"text\" class=\"{1}\" value='{2}' /></div>"' fieldclass' inputclass' plist [kv.Key].GetValue (obj))); " is 164.
Long Statement,QX.Comm,HtmlHelperExtend,C:\repos\youthjoy_hfoa\QX.Comm\HtmlHelperExtend.cs,BindModelToControl,The length of the statement  "				sb.AppendLine (string.Format ("<div class=\"{0}\"><input type=\"text\" class=\"{1}\" value='{2}' /></div>"' fieldclass' inputclass' plist [kv.Key].GetValue (obj))); " is 164.
Long Statement,QX.Comm,HtmlHelperExtend,C:\repos\youthjoy_hfoa\QX.Comm\HtmlHelperExtend.cs,BindModelToControl,The length of the statement  "				sb.AppendLine (string.Format ("<div class=\"{0}\"><input type=\"text\" class=\"{1}\" value='{2}' /></div>"' fieldclass' inputclass' plist [kv.Key].GetValue (obj))); " is 164.
Long Statement,QX.Comm,JsonDateConverter,C:\repos\youthjoy_hfoa\QX.Comm\JsonDateConverter.cs,WriteJson,The length of the statement  "		if ((_dateTimeStyles & DateTimeStyles.AdjustToUniversal) == DateTimeStyles.AdjustToUniversal || (_dateTimeStyles & DateTimeStyles.AssumeUniversal) == DateTimeStyles.AssumeUniversal) " is 181.
Long Statement,QX.Comm,ThumNail,C:\repos\youthjoy_hfoa\QX.Comm\ThumNail.cs,MakeThumNail,The length of the statement  "	graphic.DrawImage (originalImage' new System.Drawing.Rectangle (0' 0' thumWidth' thumHeight)' new System.Drawing.Rectangle (x' y' originalWidth' originalHeight)' System.Drawing.GraphicsUnit.Pixel); " is 197.
Long Statement,QX.Comm,ThumNail,C:\repos\youthjoy_hfoa\QX.Comm\ThumNail.cs,AddWaterPic,The length of the statement  "	graphic.DrawImage (waterImage' new System.Drawing.Rectangle (image.Width - waterImage.Width' image.Height - waterImage.Height' waterImage.Width' waterImage.Height)' 0' 0' waterImage.Width' waterImage.Height' System.Drawing.GraphicsUnit.Pixel); " is 243.
Long Statement,QX.Comm,Validator,C:\repos\youthjoy_hfoa\QX.Comm\Validator.cs,date,The length of the statement  "	string strregex = @"^((((1[6-9]|[2-9]\d)\d{2})-(0?[13578]|1[02])-(0?[1-9]|[12]\d|3[01]))|(((1[6-9]|[2-9]\d)\d{2})-(0?[13456789]|1[012])-(0?[1-9]|[12]\d|30))|(((1[6-9]|[2-9]\d)\d{2})-0?2-(0?[1-9]|1\d|2[0-8]))|(((1[6-9]|[2-9]\d)(0[48]|[2468][048]|[13579][26])|((16|[2468][048]|[3579][26])00))-0?2-29-))$" is 301.
Long Statement,System.Linq.Dynamic,ClassFactory,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,GenerateProperties,The length of the statement  "		MethodBuilder mbGet = tb.DefineMethod ("get_" + dp.Name' MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.HideBySig' dp.Type' Type.EmptyTypes); " is 168.
Long Statement,System.Linq.Dynamic,ClassFactory,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,GenerateProperties,The length of the statement  "		MethodBuilder mbSet = tb.DefineMethod ("set_" + dp.Name' MethodAttributes.Public | MethodAttributes.SpecialName | MethodAttributes.HideBySig' null' new Type[] { " is 160.
Long Statement,System.Linq.Dynamic,ClassFactory,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,GenerateEquals,The length of the statement  "	MethodBuilder mb = tb.DefineMethod ("Equals"' MethodAttributes.Public | MethodAttributes.ReuseSlot | MethodAttributes.Virtual | MethodAttributes.HideBySig' typeof(bool)' new Type[] { " is 182.
Long Statement,System.Linq.Dynamic,ClassFactory,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,GenerateGetHashCode,The length of the statement  "	MethodBuilder mb = tb.DefineMethod ("GetHashCode"' MethodAttributes.Public | MethodAttributes.ReuseSlot | MethodAttributes.Virtual | MethodAttributes.HideBySig' typeof(int)' Type.EmptyTypes); " is 191.
Long Statement,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,ParseComparison,The length of the statement  "	while (token.id == TokenId.Equal || token.id == TokenId.DoubleEqual || token.id == TokenId.ExclamationEqual || token.id == TokenId.LessGreater || token.id == TokenId.GreaterThan || token.id == TokenId.GreaterThanEqual || token.id == TokenId.LessThan || token.id == TokenId.LessThanEqual) { " is 289.
Long Statement,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,ParseComparison,The length of the statement  "		bool isEquality = op.id == TokenId.Equal || op.id == TokenId.DoubleEqual || op.id == TokenId.ExclamationEqual || op.id == TokenId.LessGreater; " is 142.
Long Statement,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,ParseComparison,The length of the statement  "			CheckAndPromoteOperands (isEquality ? typeof(IEqualitySignatures) : typeof(IRelationalSignatures)' op.text' ref left' ref right' op.pos); " is 137.
Long Statement,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,ParseMultiplicative,The length of the statement  "	while (token.id == TokenId.Asterisk || token.id == TokenId.Slash || token.id == TokenId.Percent || TokenIdentifierIs ("mod")) { " is 127.
Long Statement,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,ParseIdentifier,The length of the statement  "	if (symbols.TryGetValue (token.text' out value) || externals != null && externals.TryGetValue (token.text' out value)) { " is 120.
Long Statement,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,ParseMemberAccess,The length of the statement  "		return member is PropertyInfo ? Expression.Property (instance' (PropertyInfo)member) : Expression.Field (instance' (FieldInfo)member); " is 134.
Long Statement,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,FindPropertyOrField,The length of the statement  "	BindingFlags flags = BindingFlags.Public | BindingFlags.DeclaredOnly | (staticAccess ? BindingFlags.Static : BindingFlags.Instance); " is 132.
Long Statement,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,FindPropertyOrField,The length of the statement  "		MemberInfo[] members = t.FindMembers (MemberTypes.Property | MemberTypes.Field' flags' Type.FilterNameIgnoreCase' memberName); " is 126.
Long Statement,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,FindMethod,The length of the statement  "	BindingFlags flags = BindingFlags.Public | BindingFlags.DeclaredOnly | (staticAccess ? BindingFlags.Static : BindingFlags.Instance); " is 132.
Long Statement,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,FindIndexer,The length of the statement  "			IEnumerable<MethodBase> methods = members.OfType<PropertyInfo> ().Select (p => (MethodBase)p.GetGetMethod ()).Where (m => m != null); " is 133.
Long Statement,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,ParseEnum,The length of the statement  "		MemberInfo[] memberInfos = type.FindMembers (MemberTypes.Field' BindingFlags.Public | BindingFlags.DeclaredOnly | BindingFlags.Static' Type.FilterNameIgnoreCase' name); " is 168.
Long Statement,QX.Comm.Utils,TypeConverter,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\TypeConverter.cs,StrToInt,The length of the statement  "	if (string.IsNullOrEmpty (str) || str.Trim ().Length >= 11 || !Regex.IsMatch (str.Trim ()' @"^([-]|[0-9])[0-9]*(\.\w*)?$")) " is 123.
Long Statement,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetSubString,The length of the statement  "			//if (System.Text.RegularExpressions.Regex.IsMatch(p_SrcString' "[\u0800-\u4e00]+") || System.Text.RegularExpressions.Regex.IsMatch(p_SrcString' "[\xAC00-\xD7A3]+")) " is 165.
Long Statement,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetSubString,The length of the statement  "				return p_SrcString.Substring (p_StartIndex' ((p_Length + p_StartIndex) > p_SrcString.Length) ? (p_SrcString.Length - p_StartIndex) : p_Length); " is 143.
Long Statement,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,ReplaceString,The length of the statement  "	return Regex.Replace (SourceString' Regex.Escape (SearchString)' ReplaceString' IsCaseInsensetive ? RegexOptions.IgnoreCase : RegexOptions.None); " is 145.
Long Statement,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,IsValidDoEmail,The length of the statement  "	return Regex.IsMatch (strEmail' @"^@((\[[0-9]{1'3}\.[0-9]{1'3}\.[0-9]{1'3}\.)|(([\w-]+\.)+))([a-zA-Z]{2'4}|[0-9]{1'3})(\]?)$"); " is 127.
Long Statement,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,IsURL,The length of the statement  "	return Regex.IsMatch (strUrl' @"^(http|https)\://([a-zA-Z0-9\.\-]+(\:[a-zA-Z0-9\.&%\$\-]+)*@)*((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|localhost|([a-zA-Z0-9\-]+\.)*[a-zA-Z0-9\-]+\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{1'10}))(\:[0-9]+)*(/($|[a-zA-Z0-9\.\'\?\'\\\+&%\$#\=~_\-]+))*$"); " is 538.
Long Statement,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,IsIPSect,The length of the statement  "	return Regex.IsMatch (ip' @"^((2[0-4]\d|25[0-5]|[01]?\d\d?)\.){2}((2[0-4]\d|25[0-5]|[01]?\d\d?|\*)\.)(2[0-4]\d|25[0-5]|[01]?\d\d?|\*)$"); " is 137.
Long Statement,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetAssemblyVersion,The length of the statement  "	return string.Format ("{0}.{1}.{2}"' AssemblyFileVersion.FileMajorPart' AssemblyFileVersion.FileMinorPart' AssemblyFileVersion.FileBuildPart); " is 142.
Long Statement,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,RemoveUnsafeHtml,The length of the statement  "	content = Regex.Replace (content' @"(script|frame|form|meta|behavior|style)([\s|:|>])+"' "$1.$2"' RegexOptions.IgnoreCase); " is 123.
Long Statement,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetTextFromHTML,The length of the statement  "	System.Text.RegularExpressions.Regex regEx = new System.Text.RegularExpressions.Regex (@"</?(?!br|/?p|img)[^>]*>"' System.Text.RegularExpressions.RegexOptions.IgnoreCase); " is 171.
Long Statement,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,DataTableToJson,The length of the statement  "		if (fieldtype.IndexOf ("int") > 0 || fieldtype.IndexOf ("deci") > 0 || fieldtype.IndexOf ("floa") > 0 || fieldtype.IndexOf ("doub") > 0 || fieldtype.IndexOf ("bool") > 0) { " is 172.
Long Statement,QX.Comm.Utils,Validator,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Validator.cs,IsNumeric,The length of the statement  "			if ((str.Length < 10) || (str.Length == 10 && str [0] == '1') || (str.Length == 11 && str [0] == '-' && str [1] == '1')) " is 120.
Complex Conditional,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,GenerateConversion,The conditional expression  "(IsNumericType (exprType) || IsEnumType (exprType)) && (IsNumericType (type)) || IsEnumType (type)"  is complex.
Complex Conditional,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,GenerateConversion,The conditional expression  "exprType.IsAssignableFrom (type) || type.IsAssignableFrom (exprType) || exprType.IsInterface || type.IsInterface"  is complex.
Complex Conditional,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetSubString,The conditional expression  "(c > '\u0800' && c < '\u4e00') || (c > '\xAC00' && c < '\xD7A3')"  is complex.
Complex Conditional,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,DataTableToJson,The conditional expression  "fieldtype.IndexOf ("int") > 0 || fieldtype.IndexOf ("deci") > 0 || fieldtype.IndexOf ("floa") > 0 || fieldtype.IndexOf ("doub") > 0 || fieldtype.IndexOf ("bool") > 0"  is complex.
Complex Conditional,QX.Comm.Utils,Validator,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Validator.cs,IsNumeric,The conditional expression  "(str.Length < 10) || (str.Length == 10 && str [0] == '1') || (str.Length == 11 && str [0] == '-' && str [1] == '1')"  is complex.
Empty Catch Block,QX.Comm,BindModelHelper,C:\repos\youthjoy_hfoa\QX.Comm\BindModelHelper.cs,BindFormToModel,The method has an empty catch block.
Empty Catch Block,QX.Common,GSMHelper,C:\repos\youthjoy_hfoa\QX.Comm\GSMModem\GSMHelper.cs,SendMessage,The method has an empty catch block.
Magic Number,QX.Comm,AES,C:\repos\youthjoy_hfoa\QX.Comm\Encryp.cs,Encode,The following statement contains a magic number: encryptKey = Utils.Utils.GetSubString (encryptKey' 32' "");  
Magic Number,QX.Comm,AES,C:\repos\youthjoy_hfoa\QX.Comm\Encryp.cs,Encode,The following statement contains a magic number: encryptKey = encryptKey.PadRight (32' ' ');  
Magic Number,QX.Comm,AES,C:\repos\youthjoy_hfoa\QX.Comm\Encryp.cs,Encode,The following statement contains a magic number: rijndaelProvider.Key = Encoding.UTF8.GetBytes (encryptKey.Substring (0' 32));  
Magic Number,QX.Comm,AES,C:\repos\youthjoy_hfoa\QX.Comm\Encryp.cs,Decode,The following statement contains a magic number: try {  	decryptKey = Utils.Utils.GetSubString (decryptKey' 32' "");  	decryptKey = decryptKey.PadRight (32' ' ');  	RijndaelManaged rijndaelProvider = new RijndaelManaged ();  	rijndaelProvider.Key = Encoding.UTF8.GetBytes (decryptKey);  	rijndaelProvider.IV = Keys;  	ICryptoTransform rijndaelDecrypt = rijndaelProvider.CreateDecryptor ();  	byte[] inputData = Convert.FromBase64String (decryptString);  	byte[] decryptedData = rijndaelDecrypt.TransformFinalBlock (inputData' 0' inputData.Length);  	return Encoding.UTF8.GetString (decryptedData);  }  catch {  	return "";  }  
Magic Number,QX.Comm,AES,C:\repos\youthjoy_hfoa\QX.Comm\Encryp.cs,Decode,The following statement contains a magic number: try {  	decryptKey = Utils.Utils.GetSubString (decryptKey' 32' "");  	decryptKey = decryptKey.PadRight (32' ' ');  	RijndaelManaged rijndaelProvider = new RijndaelManaged ();  	rijndaelProvider.Key = Encoding.UTF8.GetBytes (decryptKey);  	rijndaelProvider.IV = Keys;  	ICryptoTransform rijndaelDecrypt = rijndaelProvider.CreateDecryptor ();  	byte[] inputData = Convert.FromBase64String (decryptString);  	byte[] decryptedData = rijndaelDecrypt.TransformFinalBlock (inputData' 0' inputData.Length);  	return Encoding.UTF8.GetString (decryptedData);  }  catch {  	return "";  }  
Magic Number,QX.Comm,AES,C:\repos\youthjoy_hfoa\QX.Comm\Encryp.cs,Decode,The following statement contains a magic number: decryptKey = Utils.Utils.GetSubString (decryptKey' 32' "");  
Magic Number,QX.Comm,AES,C:\repos\youthjoy_hfoa\QX.Comm\Encryp.cs,Decode,The following statement contains a magic number: decryptKey = decryptKey.PadRight (32' ' ');  
Magic Number,QX.Comm,DES,C:\repos\youthjoy_hfoa\QX.Comm\Encryp.cs,Encode,The following statement contains a magic number: encryptKey = Utils.Utils.GetSubString (encryptKey' 8' "");  
Magic Number,QX.Comm,DES,C:\repos\youthjoy_hfoa\QX.Comm\Encryp.cs,Encode,The following statement contains a magic number: encryptKey = encryptKey.PadRight (8' ' ');  
Magic Number,QX.Comm,DES,C:\repos\youthjoy_hfoa\QX.Comm\Encryp.cs,Decode,The following statement contains a magic number: try {  	decryptKey = Utils.Utils.GetSubString (decryptKey' 8' "");  	decryptKey = decryptKey.PadRight (8' ' ');  	byte[] rgbKey = Encoding.UTF8.GetBytes (decryptKey);  	byte[] rgbIV = Keys;  	byte[] inputByteArray = Convert.FromBase64String (decryptString);  	DESCryptoServiceProvider DCSP = new DESCryptoServiceProvider ();  	MemoryStream mStream = new MemoryStream ();  	CryptoStream cStream = new CryptoStream (mStream' DCSP.CreateDecryptor (rgbKey' rgbIV)' CryptoStreamMode.Write);  	cStream.Write (inputByteArray' 0' inputByteArray.Length);  	cStream.FlushFinalBlock ();  	return Encoding.UTF8.GetString (mStream.ToArray ());  }  catch {  	return "";  }  
Magic Number,QX.Comm,DES,C:\repos\youthjoy_hfoa\QX.Comm\Encryp.cs,Decode,The following statement contains a magic number: try {  	decryptKey = Utils.Utils.GetSubString (decryptKey' 8' "");  	decryptKey = decryptKey.PadRight (8' ' ');  	byte[] rgbKey = Encoding.UTF8.GetBytes (decryptKey);  	byte[] rgbIV = Keys;  	byte[] inputByteArray = Convert.FromBase64String (decryptString);  	DESCryptoServiceProvider DCSP = new DESCryptoServiceProvider ();  	MemoryStream mStream = new MemoryStream ();  	CryptoStream cStream = new CryptoStream (mStream' DCSP.CreateDecryptor (rgbKey' rgbIV)' CryptoStreamMode.Write);  	cStream.Write (inputByteArray' 0' inputByteArray.Length);  	cStream.FlushFinalBlock ();  	return Encoding.UTF8.GetString (mStream.ToArray ());  }  catch {  	return "";  }  
Magic Number,QX.Comm,DES,C:\repos\youthjoy_hfoa\QX.Comm\Encryp.cs,Decode,The following statement contains a magic number: decryptKey = Utils.Utils.GetSubString (decryptKey' 8' "");  
Magic Number,QX.Comm,DES,C:\repos\youthjoy_hfoa\QX.Comm\Encryp.cs,Decode,The following statement contains a magic number: decryptKey = decryptKey.PadRight (8' ' ');  
Magic Number,QX.Comm,FTP,C:\repos\youthjoy_hfoa\QX.Comm\Ftp.cs,DownloadFile,The following statement contains a magic number: try {  	if (!IsValidFileChars (RemoteFileName)) {  		throw new Exception ("非法文件名或目录名!");  	}  	Response = Open (new Uri (this.Uri.ToString () + RemoteFileName)' WebRequestMethods.Ftp.DownloadFile);  	Stream Reader = Response.GetResponseStream ();  	MemoryStream mem = new MemoryStream (1024 * 500);  	byte[] buffer = new byte[1024];  	int bytesRead = 0;  	int TotalByteRead = 0;  	while (true) {  		bytesRead = Reader.Read (buffer' 0' buffer.Length);  		TotalByteRead += bytesRead;  		if (bytesRead == 0)  			break;  		mem.Write (buffer' 0' bytesRead);  	}  	if (mem.Length > 0) {  		return mem.ToArray ();  	}  	else {  		return null;  	}  }  catch (Exception ep) {  	ErrorMsg = ep.ToString ();  	throw ep;  }  
Magic Number,QX.Comm,FTP,C:\repos\youthjoy_hfoa\QX.Comm\Ftp.cs,DownloadFile,The following statement contains a magic number: try {  	if (!IsValidFileChars (RemoteFileName)) {  		throw new Exception ("非法文件名或目录名!");  	}  	Response = Open (new Uri (this.Uri.ToString () + RemoteFileName)' WebRequestMethods.Ftp.DownloadFile);  	Stream Reader = Response.GetResponseStream ();  	MemoryStream mem = new MemoryStream (1024 * 500);  	byte[] buffer = new byte[1024];  	int bytesRead = 0;  	int TotalByteRead = 0;  	while (true) {  		bytesRead = Reader.Read (buffer' 0' buffer.Length);  		TotalByteRead += bytesRead;  		if (bytesRead == 0)  			break;  		mem.Write (buffer' 0' bytesRead);  	}  	if (mem.Length > 0) {  		return mem.ToArray ();  	}  	else {  		return null;  	}  }  catch (Exception ep) {  	ErrorMsg = ep.ToString ();  	throw ep;  }  
Magic Number,QX.Comm,FTP,C:\repos\youthjoy_hfoa\QX.Comm\Ftp.cs,DownloadFile,The following statement contains a magic number: try {  	if (!IsValidFileChars (RemoteFileName)) {  		throw new Exception ("非法文件名或目录名!");  	}  	Response = Open (new Uri (this.Uri.ToString () + RemoteFileName)' WebRequestMethods.Ftp.DownloadFile);  	Stream Reader = Response.GetResponseStream ();  	MemoryStream mem = new MemoryStream (1024 * 500);  	byte[] buffer = new byte[1024];  	int bytesRead = 0;  	int TotalByteRead = 0;  	while (true) {  		bytesRead = Reader.Read (buffer' 0' buffer.Length);  		TotalByteRead += bytesRead;  		if (bytesRead == 0)  			break;  		mem.Write (buffer' 0' bytesRead);  	}  	if (mem.Length > 0) {  		return mem.ToArray ();  	}  	else {  		return null;  	}  }  catch (Exception ep) {  	ErrorMsg = ep.ToString ();  	throw ep;  }  
Magic Number,QX.Comm,FTP,C:\repos\youthjoy_hfoa\QX.Comm\Ftp.cs,UploadFile,The following statement contains a magic number: try {  	if (!IsValidFileChars (RemoteFileName)) {  		throw new Exception ("非法文件名！");  	}  	if (!OverWriteRemoteFile && FileExist (RemoteFileName)) {  		throw new Exception ("FTP服务上面已经存在同名文件！");  	}  	Response = Open (new Uri (this.Uri.ToString () + RemoteFileName)' WebRequestMethods.Ftp.UploadFile);  	Stream requestStream = Request.GetRequestStream ();  	MemoryStream mem = new MemoryStream (FileBytes);  	byte[] buffer = new byte[1024];  	int bytesRead = 0;  	int TotalRead = 0;  	while (true) {  		bytesRead = mem.Read (buffer' 0' buffer.Length);  		if (bytesRead == 0)  			break;  		TotalRead += bytesRead;  		requestStream.Write (buffer' 0' bytesRead);  	}  	requestStream.Close ();  	Response = (FtpWebResponse)Request.GetResponse ();  	mem.Close ();  	mem.Dispose ();  	FileBytes = null;  	return true;  }  catch (Exception ep) {  	ErrorMsg = ep.ToString ();  	throw ep;  }  
Magic Number,QX.Comm,FTP,C:\repos\youthjoy_hfoa\QX.Comm\Ftp.cs,ParseFileStructFromWindowsStyleRecord,The following statement contains a magic number: processstr = (processstr.Substring (8' processstr.Length - 8)).Trim ();  
Magic Number,QX.Comm,FTP,C:\repos\youthjoy_hfoa\QX.Comm\Ftp.cs,ParseFileStructFromWindowsStyleRecord,The following statement contains a magic number: processstr = (processstr.Substring (8' processstr.Length - 8)).Trim ();  
Magic Number,QX.Comm,FTP,C:\repos\youthjoy_hfoa\QX.Comm\Ftp.cs,ParseFileStructFromWindowsStyleRecord,The following statement contains a magic number: processstr = (processstr.Substring (7' processstr.Length - 7)).Trim ();  
Magic Number,QX.Comm,FTP,C:\repos\youthjoy_hfoa\QX.Comm\Ftp.cs,ParseFileStructFromWindowsStyleRecord,The following statement contains a magic number: processstr = (processstr.Substring (7' processstr.Length - 7)).Trim ();  
Magic Number,QX.Comm,FTP,C:\repos\youthjoy_hfoa\QX.Comm\Ftp.cs,ParseFileStructFromWindowsStyleRecord,The following statement contains a magic number: if (processstr.Substring (0' 5) == "<DIR>") {  	f.IsDirectory = true;  	processstr = (processstr.Substring (5' processstr.Length - 5)).Trim ();  }  else {  	string[] strs = processstr.Split (new char[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	// true);  	processstr = strs [1];  	f.IsDirectory = false;  }  
Magic Number,QX.Comm,FTP,C:\repos\youthjoy_hfoa\QX.Comm\Ftp.cs,ParseFileStructFromWindowsStyleRecord,The following statement contains a magic number: if (processstr.Substring (0' 5) == "<DIR>") {  	f.IsDirectory = true;  	processstr = (processstr.Substring (5' processstr.Length - 5)).Trim ();  }  else {  	string[] strs = processstr.Split (new char[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	// true);  	processstr = strs [1];  	f.IsDirectory = false;  }  
Magic Number,QX.Comm,FTP,C:\repos\youthjoy_hfoa\QX.Comm\Ftp.cs,ParseFileStructFromWindowsStyleRecord,The following statement contains a magic number: if (processstr.Substring (0' 5) == "<DIR>") {  	f.IsDirectory = true;  	processstr = (processstr.Substring (5' processstr.Length - 5)).Trim ();  }  else {  	string[] strs = processstr.Split (new char[] {  		' '  	}' StringSplitOptions.RemoveEmptyEntries);  	// true);  	processstr = strs [1];  	f.IsDirectory = false;  }  
Magic Number,QX.Comm,FTP,C:\repos\youthjoy_hfoa\QX.Comm\Ftp.cs,ParseFileStructFromWindowsStyleRecord,The following statement contains a magic number: processstr = (processstr.Substring (5' processstr.Length - 5)).Trim ();  
Magic Number,QX.Comm,FTP,C:\repos\youthjoy_hfoa\QX.Comm\Ftp.cs,ParseFileStructFromWindowsStyleRecord,The following statement contains a magic number: processstr = (processstr.Substring (5' processstr.Length - 5)).Trim ();  
Magic Number,QX.Comm,FTP,C:\repos\youthjoy_hfoa\QX.Comm\Ftp.cs,GuessFileListStyle,The following statement contains a magic number: foreach (string s in recordList) {  	if (s.Length > 10 && Regex.IsMatch (s.Substring (0' 10)' "(-|d)(-|r)(-|w)(-|x)(-|r)(-|w)(-|x)(-|r)(-|w)(-|x)")) {  		return FileListStyle.UnixStyle;  	}  	else if (s.Length > 8 && Regex.IsMatch (s.Substring (0' 8)' "[0-9][0-9]-[0-9][0-9]-[0-9][0-9]")) {  		return FileListStyle.WindowsStyle;  	}  }  
Magic Number,QX.Comm,FTP,C:\repos\youthjoy_hfoa\QX.Comm\Ftp.cs,GuessFileListStyle,The following statement contains a magic number: foreach (string s in recordList) {  	if (s.Length > 10 && Regex.IsMatch (s.Substring (0' 10)' "(-|d)(-|r)(-|w)(-|x)(-|r)(-|w)(-|x)(-|r)(-|w)(-|x)")) {  		return FileListStyle.UnixStyle;  	}  	else if (s.Length > 8 && Regex.IsMatch (s.Substring (0' 8)' "[0-9][0-9]-[0-9][0-9]-[0-9][0-9]")) {  		return FileListStyle.WindowsStyle;  	}  }  
Magic Number,QX.Comm,FTP,C:\repos\youthjoy_hfoa\QX.Comm\Ftp.cs,GuessFileListStyle,The following statement contains a magic number: foreach (string s in recordList) {  	if (s.Length > 10 && Regex.IsMatch (s.Substring (0' 10)' "(-|d)(-|r)(-|w)(-|x)(-|r)(-|w)(-|x)(-|r)(-|w)(-|x)")) {  		return FileListStyle.UnixStyle;  	}  	else if (s.Length > 8 && Regex.IsMatch (s.Substring (0' 8)' "[0-9][0-9]-[0-9][0-9]-[0-9][0-9]")) {  		return FileListStyle.WindowsStyle;  	}  }  
Magic Number,QX.Comm,FTP,C:\repos\youthjoy_hfoa\QX.Comm\Ftp.cs,GuessFileListStyle,The following statement contains a magic number: foreach (string s in recordList) {  	if (s.Length > 10 && Regex.IsMatch (s.Substring (0' 10)' "(-|d)(-|r)(-|w)(-|x)(-|r)(-|w)(-|x)(-|r)(-|w)(-|x)")) {  		return FileListStyle.UnixStyle;  	}  	else if (s.Length > 8 && Regex.IsMatch (s.Substring (0' 8)' "[0-9][0-9]-[0-9][0-9]-[0-9][0-9]")) {  		return FileListStyle.WindowsStyle;  	}  }  
Magic Number,QX.Comm,FTP,C:\repos\youthjoy_hfoa\QX.Comm\Ftp.cs,GuessFileListStyle,The following statement contains a magic number: if (s.Length > 10 && Regex.IsMatch (s.Substring (0' 10)' "(-|d)(-|r)(-|w)(-|x)(-|r)(-|w)(-|x)(-|r)(-|w)(-|x)")) {  	return FileListStyle.UnixStyle;  }  else if (s.Length > 8 && Regex.IsMatch (s.Substring (0' 8)' "[0-9][0-9]-[0-9][0-9]-[0-9][0-9]")) {  	return FileListStyle.WindowsStyle;  }  
Magic Number,QX.Comm,FTP,C:\repos\youthjoy_hfoa\QX.Comm\Ftp.cs,GuessFileListStyle,The following statement contains a magic number: if (s.Length > 10 && Regex.IsMatch (s.Substring (0' 10)' "(-|d)(-|r)(-|w)(-|x)(-|r)(-|w)(-|x)(-|r)(-|w)(-|x)")) {  	return FileListStyle.UnixStyle;  }  else if (s.Length > 8 && Regex.IsMatch (s.Substring (0' 8)' "[0-9][0-9]-[0-9][0-9]-[0-9][0-9]")) {  	return FileListStyle.WindowsStyle;  }  
Magic Number,QX.Comm,FTP,C:\repos\youthjoy_hfoa\QX.Comm\Ftp.cs,GuessFileListStyle,The following statement contains a magic number: if (s.Length > 10 && Regex.IsMatch (s.Substring (0' 10)' "(-|d)(-|r)(-|w)(-|x)(-|r)(-|w)(-|x)(-|r)(-|w)(-|x)")) {  	return FileListStyle.UnixStyle;  }  else if (s.Length > 8 && Regex.IsMatch (s.Substring (0' 8)' "[0-9][0-9]-[0-9][0-9]-[0-9][0-9]")) {  	return FileListStyle.WindowsStyle;  }  
Magic Number,QX.Comm,FTP,C:\repos\youthjoy_hfoa\QX.Comm\Ftp.cs,GuessFileListStyle,The following statement contains a magic number: if (s.Length > 10 && Regex.IsMatch (s.Substring (0' 10)' "(-|d)(-|r)(-|w)(-|x)(-|r)(-|w)(-|x)(-|r)(-|w)(-|x)")) {  	return FileListStyle.UnixStyle;  }  else if (s.Length > 8 && Regex.IsMatch (s.Substring (0' 8)' "[0-9][0-9]-[0-9][0-9]-[0-9][0-9]")) {  	return FileListStyle.WindowsStyle;  }  
Magic Number,QX.Comm,FTP,C:\repos\youthjoy_hfoa\QX.Comm\Ftp.cs,GuessFileListStyle,The following statement contains a magic number: if (s.Length > 8 && Regex.IsMatch (s.Substring (0' 8)' "[0-9][0-9]-[0-9][0-9]-[0-9][0-9]")) {  	return FileListStyle.WindowsStyle;  }  
Magic Number,QX.Comm,FTP,C:\repos\youthjoy_hfoa\QX.Comm\Ftp.cs,GuessFileListStyle,The following statement contains a magic number: if (s.Length > 8 && Regex.IsMatch (s.Substring (0' 8)' "[0-9][0-9]-[0-9][0-9]-[0-9][0-9]")) {  	return FileListStyle.WindowsStyle;  }  
Magic Number,QX.Comm,FTP,C:\repos\youthjoy_hfoa\QX.Comm\Ftp.cs,ParseFileStructFromUnixStyleRecord,The following statement contains a magic number: f.Flags = processstr.Substring (0' 10);  
Magic Number,QX.Comm,FTP,C:\repos\youthjoy_hfoa\QX.Comm\Ftp.cs,ParseFileStructFromUnixStyleRecord,The following statement contains a magic number: processstr = (processstr.Substring (11)).Trim ();  
Magic Number,QX.Comm,FTP,C:\repos\youthjoy_hfoa\QX.Comm\Ftp.cs,ParseFileStructFromUnixStyleRecord,The following statement contains a magic number: f.CreateTime = DateTime.Parse (_cutSubstringFromStringWithTrim (ref processstr' ' '' 8));  
Magic Number,QX.Comm,Net,C:\repos\youthjoy_hfoa\QX.Comm\Net.cs,CheckConn,The following statement contains a magic number: return ConnValidate (ConfigHelper.GetDBHost ()' 1433' 500);  
Magic Number,QX.Comm,Net,C:\repos\youthjoy_hfoa\QX.Comm\Net.cs,CheckConn,The following statement contains a magic number: return ConnValidate (ConfigHelper.GetDBHost ()' 1433' 500);  
Magic Number,QX.Comm,StringHelper,C:\repos\youthjoy_hfoa\QX.Comm\StringHelper.cs,ChangeToChineseMoney,The following statement contains a magic number: if (len > 5) {  	temp [1] = temp [1].Substring (0' 5);  }  
Magic Number,QX.Comm,StringHelper,C:\repos\youthjoy_hfoa\QX.Comm\StringHelper.cs,ChangeToChineseMoney,The following statement contains a magic number: if (len > 5) {  	temp [1] = temp [1].Substring (0' 5);  }  
Magic Number,QX.Comm,StringHelper,C:\repos\youthjoy_hfoa\QX.Comm\StringHelper.cs,ChangeToChineseMoney,The following statement contains a magic number: temp [1] = temp [1].Substring (0' 5);  
Magic Number,QX.Comm,StringHelper,C:\repos\youthjoy_hfoa\QX.Comm\StringHelper.cs,ChangeToChineseMoney,The following statement contains a magic number: for (int i = 0; i < 4 - len; i++) {  	yy *= 10;  }  
Magic Number,QX.Comm,StringHelper,C:\repos\youthjoy_hfoa\QX.Comm\StringHelper.cs,ChangeToChineseMoney,The following statement contains a magic number: for (int i = 0; i < 4 - len; i++) {  	yy *= 10;  }  
Magic Number,QX.Comm,StringHelper,C:\repos\youthjoy_hfoa\QX.Comm\StringHelper.cs,ChangeToChineseMoney,The following statement contains a magic number: yy *= 10;  
Magic Number,QX.Comm,StringHelper,C:\repos\youthjoy_hfoa\QX.Comm\StringHelper.cs,ConvertToChinese,The following statement contains a magic number: while (i < 5 && (j / y [i]) >= 1) {  	int yy = j / y [i];  	string t = yy.ToString ();  	int m = Convert.ToInt32 (t.Substring (t.Length - 1' 1));  	string mm = NumberToMoney (m);  	if (mm == "") {  		i++;  		continue;  	}  	if (mm == "零") {  		if (cm != "" && cm.Substring (0' 1) != "零") {  			cm = mm + cm;  		}  		i++;  		continue;  	}  	cm = mm + s [i] + cm;  	i++;  }  
Magic Number,QX.Comm,StringHelper,C:\repos\youthjoy_hfoa\QX.Comm\StringHelper.cs,NumberToMoney,The following statement contains a magic number: switch (i) {  case 0:  	return "零";  case 1:  	return "壹";  case 2:  	return "贰";  case 3:  	return "叁";  case 4:  	return "肆";  case 5:  	return "伍";  case 6:  	return "陆";  case 7:  	return "柒";  case 8:  	return "捌";  case 9:  	return "玖";  default:  	return "";  }  
Magic Number,QX.Comm,StringHelper,C:\repos\youthjoy_hfoa\QX.Comm\StringHelper.cs,NumberToMoney,The following statement contains a magic number: switch (i) {  case 0:  	return "零";  case 1:  	return "壹";  case 2:  	return "贰";  case 3:  	return "叁";  case 4:  	return "肆";  case 5:  	return "伍";  case 6:  	return "陆";  case 7:  	return "柒";  case 8:  	return "捌";  case 9:  	return "玖";  default:  	return "";  }  
Magic Number,QX.Comm,StringHelper,C:\repos\youthjoy_hfoa\QX.Comm\StringHelper.cs,NumberToMoney,The following statement contains a magic number: switch (i) {  case 0:  	return "零";  case 1:  	return "壹";  case 2:  	return "贰";  case 3:  	return "叁";  case 4:  	return "肆";  case 5:  	return "伍";  case 6:  	return "陆";  case 7:  	return "柒";  case 8:  	return "捌";  case 9:  	return "玖";  default:  	return "";  }  
Magic Number,QX.Comm,StringHelper,C:\repos\youthjoy_hfoa\QX.Comm\StringHelper.cs,NumberToMoney,The following statement contains a magic number: switch (i) {  case 0:  	return "零";  case 1:  	return "壹";  case 2:  	return "贰";  case 3:  	return "叁";  case 4:  	return "肆";  case 5:  	return "伍";  case 6:  	return "陆";  case 7:  	return "柒";  case 8:  	return "捌";  case 9:  	return "玖";  default:  	return "";  }  
Magic Number,QX.Comm,StringHelper,C:\repos\youthjoy_hfoa\QX.Comm\StringHelper.cs,NumberToMoney,The following statement contains a magic number: switch (i) {  case 0:  	return "零";  case 1:  	return "壹";  case 2:  	return "贰";  case 3:  	return "叁";  case 4:  	return "肆";  case 5:  	return "伍";  case 6:  	return "陆";  case 7:  	return "柒";  case 8:  	return "捌";  case 9:  	return "玖";  default:  	return "";  }  
Magic Number,QX.Comm,StringHelper,C:\repos\youthjoy_hfoa\QX.Comm\StringHelper.cs,NumberToMoney,The following statement contains a magic number: switch (i) {  case 0:  	return "零";  case 1:  	return "壹";  case 2:  	return "贰";  case 3:  	return "叁";  case 4:  	return "肆";  case 5:  	return "伍";  case 6:  	return "陆";  case 7:  	return "柒";  case 8:  	return "捌";  case 9:  	return "玖";  default:  	return "";  }  
Magic Number,QX.Comm,StringHelper,C:\repos\youthjoy_hfoa\QX.Comm\StringHelper.cs,NumberToMoney,The following statement contains a magic number: switch (i) {  case 0:  	return "零";  case 1:  	return "壹";  case 2:  	return "贰";  case 3:  	return "叁";  case 4:  	return "肆";  case 5:  	return "伍";  case 6:  	return "陆";  case 7:  	return "柒";  case 8:  	return "捌";  case 9:  	return "玖";  default:  	return "";  }  
Magic Number,QX.Comm,StringHelper,C:\repos\youthjoy_hfoa\QX.Comm\StringHelper.cs,NumberToMoney,The following statement contains a magic number: switch (i) {  case 0:  	return "零";  case 1:  	return "壹";  case 2:  	return "贰";  case 3:  	return "叁";  case 4:  	return "肆";  case 5:  	return "伍";  case 6:  	return "陆";  case 7:  	return "柒";  case 8:  	return "捌";  case 9:  	return "玖";  default:  	return "";  }  
Magic Number,QX.Comm,ThumNail,C:\repos\youthjoy_hfoa\QX.Comm\ThumNail.cs,MakeThumNail,The following statement contains a magic number: switch (model) {  case "HW":  	//指定高宽缩放'可能变形  	break;  case "W":  	//指定宽度'高度按照比例缩放  	thumHeight = originalImage.Height * width / originalImage.Width;  	break;  case "H":  	//指定高度'宽度按照等比例缩放  	thumWidth = originalImage.Width * height / originalImage.Height;  	break;  case "Cut":  	if ((double)originalImage.Width / (double)originalImage.Height > (double)thumWidth / (double)thumHeight) {  		originalHeight = originalImage.Height;  		originalWidth = originalImage.Height * thumWidth / thumHeight;  		y = 0;  		x = (originalImage.Width - originalWidth) / 2;  	}  	else {  		originalWidth = originalImage.Width;  		originalHeight = originalWidth * height / thumWidth;  		x = 0;  		y = (originalImage.Height - originalHeight) / 2;  	}  	break;  default:  	break;  }  
Magic Number,QX.Comm,ThumNail,C:\repos\youthjoy_hfoa\QX.Comm\ThumNail.cs,MakeThumNail,The following statement contains a magic number: switch (model) {  case "HW":  	//指定高宽缩放'可能变形  	break;  case "W":  	//指定宽度'高度按照比例缩放  	thumHeight = originalImage.Height * width / originalImage.Width;  	break;  case "H":  	//指定高度'宽度按照等比例缩放  	thumWidth = originalImage.Width * height / originalImage.Height;  	break;  case "Cut":  	if ((double)originalImage.Width / (double)originalImage.Height > (double)thumWidth / (double)thumHeight) {  		originalHeight = originalImage.Height;  		originalWidth = originalImage.Height * thumWidth / thumHeight;  		y = 0;  		x = (originalImage.Width - originalWidth) / 2;  	}  	else {  		originalWidth = originalImage.Width;  		originalHeight = originalWidth * height / thumWidth;  		x = 0;  		y = (originalImage.Height - originalHeight) / 2;  	}  	break;  default:  	break;  }  
Magic Number,QX.Comm,ThumNail,C:\repos\youthjoy_hfoa\QX.Comm\ThumNail.cs,MakeThumNail,The following statement contains a magic number: if ((double)originalImage.Width / (double)originalImage.Height > (double)thumWidth / (double)thumHeight) {  	originalHeight = originalImage.Height;  	originalWidth = originalImage.Height * thumWidth / thumHeight;  	y = 0;  	x = (originalImage.Width - originalWidth) / 2;  }  else {  	originalWidth = originalImage.Width;  	originalHeight = originalWidth * height / thumWidth;  	x = 0;  	y = (originalImage.Height - originalHeight) / 2;  }  
Magic Number,QX.Comm,ThumNail,C:\repos\youthjoy_hfoa\QX.Comm\ThumNail.cs,MakeThumNail,The following statement contains a magic number: if ((double)originalImage.Width / (double)originalImage.Height > (double)thumWidth / (double)thumHeight) {  	originalHeight = originalImage.Height;  	originalWidth = originalImage.Height * thumWidth / thumHeight;  	y = 0;  	x = (originalImage.Width - originalWidth) / 2;  }  else {  	originalWidth = originalImage.Width;  	originalHeight = originalWidth * height / thumWidth;  	x = 0;  	y = (originalImage.Height - originalHeight) / 2;  }  
Magic Number,QX.Comm,ThumNail,C:\repos\youthjoy_hfoa\QX.Comm\ThumNail.cs,MakeThumNail,The following statement contains a magic number: x = (originalImage.Width - originalWidth) / 2;  
Magic Number,QX.Comm,ThumNail,C:\repos\youthjoy_hfoa\QX.Comm\ThumNail.cs,MakeThumNail,The following statement contains a magic number: y = (originalImage.Height - originalHeight) / 2;  
Magic Number,QX.Comm,ThumNail,C:\repos\youthjoy_hfoa\QX.Comm\ThumNail.cs,AddWaterWord,The following statement contains a magic number: if (image.Width < 300) {  	size = 12;  }  
Magic Number,QX.Comm,ThumNail,C:\repos\youthjoy_hfoa\QX.Comm\ThumNail.cs,AddWaterWord,The following statement contains a magic number: if (image.Width < 300) {  	size = 12;  }  
Magic Number,QX.Comm,ThumNail,C:\repos\youthjoy_hfoa\QX.Comm\ThumNail.cs,AddWaterWord,The following statement contains a magic number: size = 12;  
Magic Number,QX.Comm,ThumNail,C:\repos\youthjoy_hfoa\QX.Comm\ThumNail.cs,AddWaterWord,The following statement contains a magic number: if (image.Width < 300) {  	//水印位置  	graphic.DrawString (syWord' f' b' image.Width - (syWord.Length * 8)' ypos);  }  else {  	//水印位置  	graphic.DrawString (syWord' f' b' image.Width - (syWord.Length * 10 + xpos)' ypos);  }  
Magic Number,QX.Comm,ThumNail,C:\repos\youthjoy_hfoa\QX.Comm\ThumNail.cs,AddWaterWord,The following statement contains a magic number: if (image.Width < 300) {  	//水印位置  	graphic.DrawString (syWord' f' b' image.Width - (syWord.Length * 8)' ypos);  }  else {  	//水印位置  	graphic.DrawString (syWord' f' b' image.Width - (syWord.Length * 10 + xpos)' ypos);  }  
Magic Number,QX.Comm,ThumNail,C:\repos\youthjoy_hfoa\QX.Comm\ThumNail.cs,AddWaterWord,The following statement contains a magic number: if (image.Width < 300) {  	//水印位置  	graphic.DrawString (syWord' f' b' image.Width - (syWord.Length * 8)' ypos);  }  else {  	//水印位置  	graphic.DrawString (syWord' f' b' image.Width - (syWord.Length * 10 + xpos)' ypos);  }  
Magic Number,QX.Comm,ThumNail,C:\repos\youthjoy_hfoa\QX.Comm\ThumNail.cs,AddWaterWord,The following statement contains a magic number: graphic.DrawString (syWord' f' b' image.Width - (syWord.Length * 8)' ypos);  
Magic Number,QX.Comm,ThumNail,C:\repos\youthjoy_hfoa\QX.Comm\ThumNail.cs,AddWaterWord,The following statement contains a magic number: graphic.DrawString (syWord' f' b' image.Width - (syWord.Length * 10 + xpos)' ypos);  
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,ParseIif,The following statement contains a magic number: if (args.Length != 3)  	throw ParseError (errorPos' Res.IifRequiresThreeArgs);  
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,ParseIif,The following statement contains a magic number: return GenerateConditional (args [0]' args [1]' args [2]' errorPos);  
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,IsSignedIntegralType,The following statement contains a magic number: return GetNumericTypeKind (type) == 2;  
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,IsUnsignedIntegralType,The following statement contains a magic number: return GetNumericTypeKind (type) == 3;  
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,GetNumericTypeKind,The following statement contains a magic number: switch (Type.GetTypeCode (type)) {  case TypeCode.Char:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return 1;  case TypeCode.SByte:  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  	return 2;  case TypeCode.Byte:  case TypeCode.UInt16:  case TypeCode.UInt32:  case TypeCode.UInt64:  	return 3;  default:  	return 0;  }  
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,GetNumericTypeKind,The following statement contains a magic number: switch (Type.GetTypeCode (type)) {  case TypeCode.Char:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return 1;  case TypeCode.SByte:  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  	return 2;  case TypeCode.Byte:  case TypeCode.UInt16:  case TypeCode.UInt32:  case TypeCode.UInt64:  	return 3;  default:  	return 0;  }  
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,GetNumericTypeKind,The following statement contains a magic number: return 2;  
Magic Number,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,GetNumericTypeKind,The following statement contains a magic number: return 3;  
Magic Number,QX.Comm.Utils,TypeConverter,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\TypeConverter.cs,StrToInt,The following statement contains a magic number: if (string.IsNullOrEmpty (str) || str.Trim ().Length >= 11 || !Regex.IsMatch (str.Trim ()' @"^([-]|[0-9])[0-9]*(\.\w*)?$"))  	return defValue;  
Magic Number,QX.Comm.Utils,TypeConverter,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\TypeConverter.cs,StrToFloat,The following statement contains a magic number: if ((strValue == null) || (strValue.Length > 10))  	return defValue;  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,MD5,The following statement contains a magic number: for (int i = 0; i < b.Length; i++)  	ret += b [i].ToString ("x").PadLeft (2' '0');  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,MD5,The following statement contains a magic number: ret += b [i].ToString ("x").PadLeft (2' '0');  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetUnicodeSubString,The following statement contains a magic number: if (byteLen > len) {  	for (int i = 0; i < charLen; i++) {  		if (Convert.ToInt32 (str.ToCharArray () [i]) > 255)  			// 按中文字符计算加2  			byteCount += 2;  		else  			// 按英文字符计算加1  			byteCount += 1;  		if (byteCount > len)// 超出时只记下上一个有效位置  		 {  			pos = i;  			break;  		}  		else if (byteCount == len)// 记下当前位置  		 {  			pos = i + 1;  			break;  		}  	}  	if (pos >= 0)  		result = str.Substring (0' pos) + p_TailString;  }  else  	result = str;  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetUnicodeSubString,The following statement contains a magic number: if (byteLen > len) {  	for (int i = 0; i < charLen; i++) {  		if (Convert.ToInt32 (str.ToCharArray () [i]) > 255)  			// 按中文字符计算加2  			byteCount += 2;  		else  			// 按英文字符计算加1  			byteCount += 1;  		if (byteCount > len)// 超出时只记下上一个有效位置  		 {  			pos = i;  			break;  		}  		else if (byteCount == len)// 记下当前位置  		 {  			pos = i + 1;  			break;  		}  	}  	if (pos >= 0)  		result = str.Substring (0' pos) + p_TailString;  }  else  	result = str;  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetUnicodeSubString,The following statement contains a magic number: for (int i = 0; i < charLen; i++) {  	if (Convert.ToInt32 (str.ToCharArray () [i]) > 255)  		// 按中文字符计算加2  		byteCount += 2;  	else  		// 按英文字符计算加1  		byteCount += 1;  	if (byteCount > len)// 超出时只记下上一个有效位置  	 {  		pos = i;  		break;  	}  	else if (byteCount == len)// 记下当前位置  	 {  		pos = i + 1;  		break;  	}  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetUnicodeSubString,The following statement contains a magic number: for (int i = 0; i < charLen; i++) {  	if (Convert.ToInt32 (str.ToCharArray () [i]) > 255)  		// 按中文字符计算加2  		byteCount += 2;  	else  		// 按英文字符计算加1  		byteCount += 1;  	if (byteCount > len)// 超出时只记下上一个有效位置  	 {  		pos = i;  		break;  	}  	else if (byteCount == len)// 记下当前位置  	 {  		pos = i + 1;  		break;  	}  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetUnicodeSubString,The following statement contains a magic number: if (Convert.ToInt32 (str.ToCharArray () [i]) > 255)  	// 按中文字符计算加2  	byteCount += 2;  else  	// 按英文字符计算加1  	byteCount += 1;  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetUnicodeSubString,The following statement contains a magic number: if (Convert.ToInt32 (str.ToCharArray () [i]) > 255)  	// 按中文字符计算加2  	byteCount += 2;  else  	// 按英文字符计算加1  	byteCount += 1;  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetUnicodeSubString,The following statement contains a magic number: byteCount += 2;  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetSubString,The following statement contains a magic number: if (p_Length >= 0) {  	byte[] bsSrcString = Encoding.Default.GetBytes (p_SrcString);  	//当字符串长度大于起始位置  	if (bsSrcString.Length > p_StartIndex) {  		int p_EndIndex = bsSrcString.Length;  		//当要截取的长度在字符串的有效长度范围内  		if (bsSrcString.Length > (p_StartIndex + p_Length)) {  			p_EndIndex = p_Length + p_StartIndex;  		}  		else {  			//当不在有效范围内时'只取到字符串的结尾  			p_Length = bsSrcString.Length - p_StartIndex;  			p_TailString = "";  		}  		int nRealLength = p_Length;  		int[] anResultFlag = new int[p_Length];  		byte[] bsResult = null;  		int nFlag = 0;  		for (int i = p_StartIndex; i < p_EndIndex; i++) {  			if (bsSrcString [i] > 127) {  				nFlag++;  				if (nFlag == 3)  					nFlag = 1;  			}  			else  				nFlag = 0;  			anResultFlag [i] = nFlag;  		}  		if ((bsSrcString [p_EndIndex - 1] > 127) && (anResultFlag [p_Length - 1] == 1))  			nRealLength = p_Length + 1;  		bsResult = new byte[nRealLength];  		Array.Copy (bsSrcString' p_StartIndex' bsResult' 0' nRealLength);  		myResult = Encoding.Default.GetString (bsResult);  		myResult = myResult + p_TailString;  	}  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetSubString,The following statement contains a magic number: if (p_Length >= 0) {  	byte[] bsSrcString = Encoding.Default.GetBytes (p_SrcString);  	//当字符串长度大于起始位置  	if (bsSrcString.Length > p_StartIndex) {  		int p_EndIndex = bsSrcString.Length;  		//当要截取的长度在字符串的有效长度范围内  		if (bsSrcString.Length > (p_StartIndex + p_Length)) {  			p_EndIndex = p_Length + p_StartIndex;  		}  		else {  			//当不在有效范围内时'只取到字符串的结尾  			p_Length = bsSrcString.Length - p_StartIndex;  			p_TailString = "";  		}  		int nRealLength = p_Length;  		int[] anResultFlag = new int[p_Length];  		byte[] bsResult = null;  		int nFlag = 0;  		for (int i = p_StartIndex; i < p_EndIndex; i++) {  			if (bsSrcString [i] > 127) {  				nFlag++;  				if (nFlag == 3)  					nFlag = 1;  			}  			else  				nFlag = 0;  			anResultFlag [i] = nFlag;  		}  		if ((bsSrcString [p_EndIndex - 1] > 127) && (anResultFlag [p_Length - 1] == 1))  			nRealLength = p_Length + 1;  		bsResult = new byte[nRealLength];  		Array.Copy (bsSrcString' p_StartIndex' bsResult' 0' nRealLength);  		myResult = Encoding.Default.GetString (bsResult);  		myResult = myResult + p_TailString;  	}  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetSubString,The following statement contains a magic number: if (p_Length >= 0) {  	byte[] bsSrcString = Encoding.Default.GetBytes (p_SrcString);  	//当字符串长度大于起始位置  	if (bsSrcString.Length > p_StartIndex) {  		int p_EndIndex = bsSrcString.Length;  		//当要截取的长度在字符串的有效长度范围内  		if (bsSrcString.Length > (p_StartIndex + p_Length)) {  			p_EndIndex = p_Length + p_StartIndex;  		}  		else {  			//当不在有效范围内时'只取到字符串的结尾  			p_Length = bsSrcString.Length - p_StartIndex;  			p_TailString = "";  		}  		int nRealLength = p_Length;  		int[] anResultFlag = new int[p_Length];  		byte[] bsResult = null;  		int nFlag = 0;  		for (int i = p_StartIndex; i < p_EndIndex; i++) {  			if (bsSrcString [i] > 127) {  				nFlag++;  				if (nFlag == 3)  					nFlag = 1;  			}  			else  				nFlag = 0;  			anResultFlag [i] = nFlag;  		}  		if ((bsSrcString [p_EndIndex - 1] > 127) && (anResultFlag [p_Length - 1] == 1))  			nRealLength = p_Length + 1;  		bsResult = new byte[nRealLength];  		Array.Copy (bsSrcString' p_StartIndex' bsResult' 0' nRealLength);  		myResult = Encoding.Default.GetString (bsResult);  		myResult = myResult + p_TailString;  	}  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetSubString,The following statement contains a magic number: if (bsSrcString.Length > p_StartIndex) {  	int p_EndIndex = bsSrcString.Length;  	//当要截取的长度在字符串的有效长度范围内  	if (bsSrcString.Length > (p_StartIndex + p_Length)) {  		p_EndIndex = p_Length + p_StartIndex;  	}  	else {  		//当不在有效范围内时'只取到字符串的结尾  		p_Length = bsSrcString.Length - p_StartIndex;  		p_TailString = "";  	}  	int nRealLength = p_Length;  	int[] anResultFlag = new int[p_Length];  	byte[] bsResult = null;  	int nFlag = 0;  	for (int i = p_StartIndex; i < p_EndIndex; i++) {  		if (bsSrcString [i] > 127) {  			nFlag++;  			if (nFlag == 3)  				nFlag = 1;  		}  		else  			nFlag = 0;  		anResultFlag [i] = nFlag;  	}  	if ((bsSrcString [p_EndIndex - 1] > 127) && (anResultFlag [p_Length - 1] == 1))  		nRealLength = p_Length + 1;  	bsResult = new byte[nRealLength];  	Array.Copy (bsSrcString' p_StartIndex' bsResult' 0' nRealLength);  	myResult = Encoding.Default.GetString (bsResult);  	myResult = myResult + p_TailString;  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetSubString,The following statement contains a magic number: if (bsSrcString.Length > p_StartIndex) {  	int p_EndIndex = bsSrcString.Length;  	//当要截取的长度在字符串的有效长度范围内  	if (bsSrcString.Length > (p_StartIndex + p_Length)) {  		p_EndIndex = p_Length + p_StartIndex;  	}  	else {  		//当不在有效范围内时'只取到字符串的结尾  		p_Length = bsSrcString.Length - p_StartIndex;  		p_TailString = "";  	}  	int nRealLength = p_Length;  	int[] anResultFlag = new int[p_Length];  	byte[] bsResult = null;  	int nFlag = 0;  	for (int i = p_StartIndex; i < p_EndIndex; i++) {  		if (bsSrcString [i] > 127) {  			nFlag++;  			if (nFlag == 3)  				nFlag = 1;  		}  		else  			nFlag = 0;  		anResultFlag [i] = nFlag;  	}  	if ((bsSrcString [p_EndIndex - 1] > 127) && (anResultFlag [p_Length - 1] == 1))  		nRealLength = p_Length + 1;  	bsResult = new byte[nRealLength];  	Array.Copy (bsSrcString' p_StartIndex' bsResult' 0' nRealLength);  	myResult = Encoding.Default.GetString (bsResult);  	myResult = myResult + p_TailString;  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetSubString,The following statement contains a magic number: if (bsSrcString.Length > p_StartIndex) {  	int p_EndIndex = bsSrcString.Length;  	//当要截取的长度在字符串的有效长度范围内  	if (bsSrcString.Length > (p_StartIndex + p_Length)) {  		p_EndIndex = p_Length + p_StartIndex;  	}  	else {  		//当不在有效范围内时'只取到字符串的结尾  		p_Length = bsSrcString.Length - p_StartIndex;  		p_TailString = "";  	}  	int nRealLength = p_Length;  	int[] anResultFlag = new int[p_Length];  	byte[] bsResult = null;  	int nFlag = 0;  	for (int i = p_StartIndex; i < p_EndIndex; i++) {  		if (bsSrcString [i] > 127) {  			nFlag++;  			if (nFlag == 3)  				nFlag = 1;  		}  		else  			nFlag = 0;  		anResultFlag [i] = nFlag;  	}  	if ((bsSrcString [p_EndIndex - 1] > 127) && (anResultFlag [p_Length - 1] == 1))  		nRealLength = p_Length + 1;  	bsResult = new byte[nRealLength];  	Array.Copy (bsSrcString' p_StartIndex' bsResult' 0' nRealLength);  	myResult = Encoding.Default.GetString (bsResult);  	myResult = myResult + p_TailString;  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetSubString,The following statement contains a magic number: for (int i = p_StartIndex; i < p_EndIndex; i++) {  	if (bsSrcString [i] > 127) {  		nFlag++;  		if (nFlag == 3)  			nFlag = 1;  	}  	else  		nFlag = 0;  	anResultFlag [i] = nFlag;  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetSubString,The following statement contains a magic number: for (int i = p_StartIndex; i < p_EndIndex; i++) {  	if (bsSrcString [i] > 127) {  		nFlag++;  		if (nFlag == 3)  			nFlag = 1;  	}  	else  		nFlag = 0;  	anResultFlag [i] = nFlag;  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetSubString,The following statement contains a magic number: if (bsSrcString [i] > 127) {  	nFlag++;  	if (nFlag == 3)  		nFlag = 1;  }  else  	nFlag = 0;  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetSubString,The following statement contains a magic number: if (bsSrcString [i] > 127) {  	nFlag++;  	if (nFlag == 3)  		nFlag = 1;  }  else  	nFlag = 0;  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetSubString,The following statement contains a magic number: if (nFlag == 3)  	nFlag = 1;  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetSubString,The following statement contains a magic number: if ((bsSrcString [p_EndIndex - 1] > 127) && (anResultFlag [p_Length - 1] == 1))  	nRealLength = p_Length + 1;  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetStaticPageNumbers,The following statement contains a magic number: if (forumrewrite == 2) {  	t1 = "<a href=\"" + url + "/\">&laquo;</a>";  	t2 = "<a href=\"" + url + "/" + countPage + "/\">&raquo;</a>";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetStaticPageNumbers,The following statement contains a magic number: if (extendPage < 3)  	extendPage = 2;  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetStaticPageNumbers,The following statement contains a magic number: if (extendPage < 3)  	extendPage = 2;  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetStaticPageNumbers,The following statement contains a magic number: extendPage = 2;  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetStaticPageNumbers,The following statement contains a magic number: if (countPage > extendPage) {  	if (curPage - (extendPage / 2) > 0) {  		if (curPage + (extendPage / 2) < countPage) {  			startPage = curPage - (extendPage / 2);  			endPage = startPage + extendPage - 1;  		}  		else {  			endPage = countPage;  			startPage = endPage - extendPage + 1;  			t2 = "";  		}  	}  	else {  		endPage = extendPage;  		t1 = "";  	}  }  else {  	startPage = 1;  	endPage = countPage;  	t1 = "";  	t2 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetStaticPageNumbers,The following statement contains a magic number: if (countPage > extendPage) {  	if (curPage - (extendPage / 2) > 0) {  		if (curPage + (extendPage / 2) < countPage) {  			startPage = curPage - (extendPage / 2);  			endPage = startPage + extendPage - 1;  		}  		else {  			endPage = countPage;  			startPage = endPage - extendPage + 1;  			t2 = "";  		}  	}  	else {  		endPage = extendPage;  		t1 = "";  	}  }  else {  	startPage = 1;  	endPage = countPage;  	t1 = "";  	t2 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetStaticPageNumbers,The following statement contains a magic number: if (countPage > extendPage) {  	if (curPage - (extendPage / 2) > 0) {  		if (curPage + (extendPage / 2) < countPage) {  			startPage = curPage - (extendPage / 2);  			endPage = startPage + extendPage - 1;  		}  		else {  			endPage = countPage;  			startPage = endPage - extendPage + 1;  			t2 = "";  		}  	}  	else {  		endPage = extendPage;  		t1 = "";  	}  }  else {  	startPage = 1;  	endPage = countPage;  	t1 = "";  	t2 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetStaticPageNumbers,The following statement contains a magic number: if (curPage - (extendPage / 2) > 0) {  	if (curPage + (extendPage / 2) < countPage) {  		startPage = curPage - (extendPage / 2);  		endPage = startPage + extendPage - 1;  	}  	else {  		endPage = countPage;  		startPage = endPage - extendPage + 1;  		t2 = "";  	}  }  else {  	endPage = extendPage;  	t1 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetStaticPageNumbers,The following statement contains a magic number: if (curPage - (extendPage / 2) > 0) {  	if (curPage + (extendPage / 2) < countPage) {  		startPage = curPage - (extendPage / 2);  		endPage = startPage + extendPage - 1;  	}  	else {  		endPage = countPage;  		startPage = endPage - extendPage + 1;  		t2 = "";  	}  }  else {  	endPage = extendPage;  	t1 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetStaticPageNumbers,The following statement contains a magic number: if (curPage - (extendPage / 2) > 0) {  	if (curPage + (extendPage / 2) < countPage) {  		startPage = curPage - (extendPage / 2);  		endPage = startPage + extendPage - 1;  	}  	else {  		endPage = countPage;  		startPage = endPage - extendPage + 1;  		t2 = "";  	}  }  else {  	endPage = extendPage;  	t1 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetStaticPageNumbers,The following statement contains a magic number: if (curPage + (extendPage / 2) < countPage) {  	startPage = curPage - (extendPage / 2);  	endPage = startPage + extendPage - 1;  }  else {  	endPage = countPage;  	startPage = endPage - extendPage + 1;  	t2 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetStaticPageNumbers,The following statement contains a magic number: if (curPage + (extendPage / 2) < countPage) {  	startPage = curPage - (extendPage / 2);  	endPage = startPage + extendPage - 1;  }  else {  	endPage = countPage;  	startPage = endPage - extendPage + 1;  	t2 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetStaticPageNumbers,The following statement contains a magic number: startPage = curPage - (extendPage / 2);  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetStaticPageNumbers,The following statement contains a magic number: for (int i = startPage; i <= endPage; i++) {  	if (i == curPage) {  		s.Append ("<span>");  		s.Append (i);  		s.Append ("</span>");  	}  	else {  		s.Append ("<a href=\"");  		if (forumrewrite == 1) {  			s.Append (url);  			if (i != 1) {  				s.Append ("/");  				s.Append (i);  			}  			s.Append ("/list");  			s.Append (expname);  		}  		else if (forumrewrite == 2) {  			s.Append (url);  			s.Append ("/");  			if (i != 1) {  				s.Append (i);  				s.Append ("/");  			}  		}  		else {  			s.Append (url);  			if (i != 1) {  				s.Append ("-");  				s.Append (i);  			}  			s.Append (expname);  		}  		s.Append ("\">");  		s.Append (i);  		s.Append ("</a>");  	}  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetStaticPageNumbers,The following statement contains a magic number: if (i == curPage) {  	s.Append ("<span>");  	s.Append (i);  	s.Append ("</span>");  }  else {  	s.Append ("<a href=\"");  	if (forumrewrite == 1) {  		s.Append (url);  		if (i != 1) {  			s.Append ("/");  			s.Append (i);  		}  		s.Append ("/list");  		s.Append (expname);  	}  	else if (forumrewrite == 2) {  		s.Append (url);  		s.Append ("/");  		if (i != 1) {  			s.Append (i);  			s.Append ("/");  		}  	}  	else {  		s.Append (url);  		if (i != 1) {  			s.Append ("-");  			s.Append (i);  		}  		s.Append (expname);  	}  	s.Append ("\">");  	s.Append (i);  	s.Append ("</a>");  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetStaticPageNumbers,The following statement contains a magic number: if (forumrewrite == 1) {  	s.Append (url);  	if (i != 1) {  		s.Append ("/");  		s.Append (i);  	}  	s.Append ("/list");  	s.Append (expname);  }  else if (forumrewrite == 2) {  	s.Append (url);  	s.Append ("/");  	if (i != 1) {  		s.Append (i);  		s.Append ("/");  	}  }  else {  	s.Append (url);  	if (i != 1) {  		s.Append ("-");  		s.Append (i);  	}  	s.Append (expname);  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetStaticPageNumbers,The following statement contains a magic number: if (forumrewrite == 2) {  	s.Append (url);  	s.Append ("/");  	if (i != 1) {  		s.Append (i);  		s.Append ("/");  	}  }  else {  	s.Append (url);  	if (i != 1) {  		s.Append ("-");  		s.Append (i);  	}  	s.Append (expname);  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetPostPageNumbers,The following statement contains a magic number: if (extendPage < 3)  	extendPage = 2;  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetPostPageNumbers,The following statement contains a magic number: if (extendPage < 3)  	extendPage = 2;  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetPostPageNumbers,The following statement contains a magic number: extendPage = 2;  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetPostPageNumbers,The following statement contains a magic number: if (countPage > extendPage) {  	if (curPage - (extendPage / 2) > 0) {  		if (curPage + (extendPage / 2) < countPage) {  			startPage = curPage - (extendPage / 2);  			endPage = startPage + extendPage - 1;  		}  		else {  			endPage = countPage;  			startPage = endPage - extendPage + 1;  			t2 = "";  		}  	}  	else {  		endPage = extendPage;  		t1 = "";  	}  }  else {  	startPage = 1;  	endPage = countPage;  	t1 = "";  	t2 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetPostPageNumbers,The following statement contains a magic number: if (countPage > extendPage) {  	if (curPage - (extendPage / 2) > 0) {  		if (curPage + (extendPage / 2) < countPage) {  			startPage = curPage - (extendPage / 2);  			endPage = startPage + extendPage - 1;  		}  		else {  			endPage = countPage;  			startPage = endPage - extendPage + 1;  			t2 = "";  		}  	}  	else {  		endPage = extendPage;  		t1 = "";  	}  }  else {  	startPage = 1;  	endPage = countPage;  	t1 = "";  	t2 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetPostPageNumbers,The following statement contains a magic number: if (countPage > extendPage) {  	if (curPage - (extendPage / 2) > 0) {  		if (curPage + (extendPage / 2) < countPage) {  			startPage = curPage - (extendPage / 2);  			endPage = startPage + extendPage - 1;  		}  		else {  			endPage = countPage;  			startPage = endPage - extendPage + 1;  			t2 = "";  		}  	}  	else {  		endPage = extendPage;  		t1 = "";  	}  }  else {  	startPage = 1;  	endPage = countPage;  	t1 = "";  	t2 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetPostPageNumbers,The following statement contains a magic number: if (curPage - (extendPage / 2) > 0) {  	if (curPage + (extendPage / 2) < countPage) {  		startPage = curPage - (extendPage / 2);  		endPage = startPage + extendPage - 1;  	}  	else {  		endPage = countPage;  		startPage = endPage - extendPage + 1;  		t2 = "";  	}  }  else {  	endPage = extendPage;  	t1 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetPostPageNumbers,The following statement contains a magic number: if (curPage - (extendPage / 2) > 0) {  	if (curPage + (extendPage / 2) < countPage) {  		startPage = curPage - (extendPage / 2);  		endPage = startPage + extendPage - 1;  	}  	else {  		endPage = countPage;  		startPage = endPage - extendPage + 1;  		t2 = "";  	}  }  else {  	endPage = extendPage;  	t1 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetPostPageNumbers,The following statement contains a magic number: if (curPage - (extendPage / 2) > 0) {  	if (curPage + (extendPage / 2) < countPage) {  		startPage = curPage - (extendPage / 2);  		endPage = startPage + extendPage - 1;  	}  	else {  		endPage = countPage;  		startPage = endPage - extendPage + 1;  		t2 = "";  	}  }  else {  	endPage = extendPage;  	t1 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetPostPageNumbers,The following statement contains a magic number: if (curPage + (extendPage / 2) < countPage) {  	startPage = curPage - (extendPage / 2);  	endPage = startPage + extendPage - 1;  }  else {  	endPage = countPage;  	startPage = endPage - extendPage + 1;  	t2 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetPostPageNumbers,The following statement contains a magic number: if (curPage + (extendPage / 2) < countPage) {  	startPage = curPage - (extendPage / 2);  	endPage = startPage + extendPage - 1;  }  else {  	endPage = countPage;  	startPage = endPage - extendPage + 1;  	t2 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetPostPageNumbers,The following statement contains a magic number: startPage = curPage - (extendPage / 2);  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetPageNumbers,The following statement contains a magic number: if (extendPage < 3)  	extendPage = 2;  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetPageNumbers,The following statement contains a magic number: if (extendPage < 3)  	extendPage = 2;  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetPageNumbers,The following statement contains a magic number: extendPage = 2;  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetPageNumbers,The following statement contains a magic number: if (countPage > extendPage) {  	if (curPage - (extendPage / 2) > 0) {  		if (curPage + (extendPage / 2) < countPage) {  			startPage = curPage - (extendPage / 2);  			endPage = startPage + extendPage - 1;  		}  		else {  			endPage = countPage;  			startPage = endPage - extendPage + 1;  			t2 = "";  		}  	}  	else {  		endPage = extendPage;  		t1 = "";  	}  }  else {  	startPage = 1;  	endPage = countPage;  	t1 = "";  	t2 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetPageNumbers,The following statement contains a magic number: if (countPage > extendPage) {  	if (curPage - (extendPage / 2) > 0) {  		if (curPage + (extendPage / 2) < countPage) {  			startPage = curPage - (extendPage / 2);  			endPage = startPage + extendPage - 1;  		}  		else {  			endPage = countPage;  			startPage = endPage - extendPage + 1;  			t2 = "";  		}  	}  	else {  		endPage = extendPage;  		t1 = "";  	}  }  else {  	startPage = 1;  	endPage = countPage;  	t1 = "";  	t2 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetPageNumbers,The following statement contains a magic number: if (countPage > extendPage) {  	if (curPage - (extendPage / 2) > 0) {  		if (curPage + (extendPage / 2) < countPage) {  			startPage = curPage - (extendPage / 2);  			endPage = startPage + extendPage - 1;  		}  		else {  			endPage = countPage;  			startPage = endPage - extendPage + 1;  			t2 = "";  		}  	}  	else {  		endPage = extendPage;  		t1 = "";  	}  }  else {  	startPage = 1;  	endPage = countPage;  	t1 = "";  	t2 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetPageNumbers,The following statement contains a magic number: if (curPage - (extendPage / 2) > 0) {  	if (curPage + (extendPage / 2) < countPage) {  		startPage = curPage - (extendPage / 2);  		endPage = startPage + extendPage - 1;  	}  	else {  		endPage = countPage;  		startPage = endPage - extendPage + 1;  		t2 = "";  	}  }  else {  	endPage = extendPage;  	t1 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetPageNumbers,The following statement contains a magic number: if (curPage - (extendPage / 2) > 0) {  	if (curPage + (extendPage / 2) < countPage) {  		startPage = curPage - (extendPage / 2);  		endPage = startPage + extendPage - 1;  	}  	else {  		endPage = countPage;  		startPage = endPage - extendPage + 1;  		t2 = "";  	}  }  else {  	endPage = extendPage;  	t1 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetPageNumbers,The following statement contains a magic number: if (curPage - (extendPage / 2) > 0) {  	if (curPage + (extendPage / 2) < countPage) {  		startPage = curPage - (extendPage / 2);  		endPage = startPage + extendPage - 1;  	}  	else {  		endPage = countPage;  		startPage = endPage - extendPage + 1;  		t2 = "";  	}  }  else {  	endPage = extendPage;  	t1 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetPageNumbers,The following statement contains a magic number: if (curPage + (extendPage / 2) < countPage) {  	startPage = curPage - (extendPage / 2);  	endPage = startPage + extendPage - 1;  }  else {  	endPage = countPage;  	startPage = endPage - extendPage + 1;  	t2 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetPageNumbers,The following statement contains a magic number: if (curPage + (extendPage / 2) < countPage) {  	startPage = curPage - (extendPage / 2);  	endPage = startPage + extendPage - 1;  }  else {  	endPage = countPage;  	startPage = endPage - extendPage + 1;  	t2 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetPageNumbers,The following statement contains a magic number: startPage = curPage - (extendPage / 2);  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,FormatBytesStr,The following statement contains a magic number: if (bytes > 1073741824)  	return ((double)(bytes / 1073741824)).ToString ("0") + "G";  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,FormatBytesStr,The following statement contains a magic number: if (bytes > 1073741824)  	return ((double)(bytes / 1073741824)).ToString ("0") + "G";  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,FormatBytesStr,The following statement contains a magic number: return ((double)(bytes / 1073741824)).ToString ("0") + "G";  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,FormatBytesStr,The following statement contains a magic number: if (bytes > 1048576)  	return ((double)(bytes / 1048576)).ToString ("0") + "M";  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,FormatBytesStr,The following statement contains a magic number: if (bytes > 1048576)  	return ((double)(bytes / 1048576)).ToString ("0") + "M";  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,FormatBytesStr,The following statement contains a magic number: return ((double)(bytes / 1048576)).ToString ("0") + "M";  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,FormatBytesStr,The following statement contains a magic number: if (bytes > 1024)  	return ((double)(bytes / 1024)).ToString ("0") + "K";  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,FormatBytesStr,The following statement contains a magic number: if (bytes > 1024)  	return ((double)(bytes / 1024)).ToString ("0") + "K";  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,FormatBytesStr,The following statement contains a magic number: return ((double)(bytes / 1024)).ToString ("0") + "K";  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,SafeInt32,The following statement contains a magic number: if (IsNumeric (strNum)) {  	if (strNum.ToString ().Length > 9) {  		if (strNum.StartsWith ("-"))  			return int.MinValue;  		else  			return int.MaxValue;  	}  	return Int32.Parse (strNum);  }  else  	return 0;  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,SafeInt32,The following statement contains a magic number: if (strNum.ToString ().Length > 9) {  	if (strNum.StartsWith ("-"))  		return int.MinValue;  	else  		return int.MaxValue;  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,InIPArray,The following statement contains a magic number: for (int ipIndex = 0; ipIndex < iparray.Length; ipIndex++) {  	string[] tmpip = Utils.SplitString (iparray [ipIndex]' @".");  	int r = 0;  	for (int i = 0; i < tmpip.Length; i++) {  		if (tmpip [i] == "*")  			return true;  		if (userip.Length > i) {  			if (tmpip [i] == userip [i])  				r++;  			else  				break;  		}  		else  			break;  	}  	if (r == 4)  		return true;  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,InIPArray,The following statement contains a magic number: if (r == 4)  	return true;  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,SBCCaseToNumberic,The following statement contains a magic number: for (int i = 0; i < c.Length; i++) {  	byte[] b = System.Text.Encoding.Unicode.GetBytes (c' i' 1);  	if (b.Length == 2) {  		if (b [1] == 255) {  			b [0] = (byte)(b [0] + 32);  			b [1] = 0;  			c [i] = System.Text.Encoding.Unicode.GetChars (b) [0];  		}  	}  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,SBCCaseToNumberic,The following statement contains a magic number: for (int i = 0; i < c.Length; i++) {  	byte[] b = System.Text.Encoding.Unicode.GetBytes (c' i' 1);  	if (b.Length == 2) {  		if (b [1] == 255) {  			b [0] = (byte)(b [0] + 32);  			b [1] = 0;  			c [i] = System.Text.Encoding.Unicode.GetChars (b) [0];  		}  	}  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,SBCCaseToNumberic,The following statement contains a magic number: for (int i = 0; i < c.Length; i++) {  	byte[] b = System.Text.Encoding.Unicode.GetBytes (c' i' 1);  	if (b.Length == 2) {  		if (b [1] == 255) {  			b [0] = (byte)(b [0] + 32);  			b [1] = 0;  			c [i] = System.Text.Encoding.Unicode.GetChars (b) [0];  		}  	}  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,SBCCaseToNumberic,The following statement contains a magic number: if (b.Length == 2) {  	if (b [1] == 255) {  		b [0] = (byte)(b [0] + 32);  		b [1] = 0;  		c [i] = System.Text.Encoding.Unicode.GetChars (b) [0];  	}  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,SBCCaseToNumberic,The following statement contains a magic number: if (b.Length == 2) {  	if (b [1] == 255) {  		b [0] = (byte)(b [0] + 32);  		b [1] = 0;  		c [i] = System.Text.Encoding.Unicode.GetChars (b) [0];  	}  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,SBCCaseToNumberic,The following statement contains a magic number: if (b.Length == 2) {  	if (b [1] == 255) {  		b [0] = (byte)(b [0] + 32);  		b [1] = 0;  		c [i] = System.Text.Encoding.Unicode.GetChars (b) [0];  	}  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,SBCCaseToNumberic,The following statement contains a magic number: if (b [1] == 255) {  	b [0] = (byte)(b [0] + 32);  	b [1] = 0;  	c [i] = System.Text.Encoding.Unicode.GetChars (b) [0];  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,SBCCaseToNumberic,The following statement contains a magic number: if (b [1] == 255) {  	b [0] = (byte)(b [0] + 32);  	b [1] = 0;  	c [i] = System.Text.Encoding.Unicode.GetChars (b) [0];  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,SBCCaseToNumberic,The following statement contains a magic number: b [0] = (byte)(b [0] + 32);  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,ToColor,The following statement contains a magic number: switch (color.Length) {  case 3:  	rgb = color.ToCharArray ();  	red = Convert.ToInt32 (rgb [0].ToString () + rgb [0].ToString ()' 16);  	green = Convert.ToInt32 (rgb [1].ToString () + rgb [1].ToString ()' 16);  	blue = Convert.ToInt32 (rgb [2].ToString () + rgb [2].ToString ()' 16);  	return Color.FromArgb (red' green' blue);  case 6:  	rgb = color.ToCharArray ();  	red = Convert.ToInt32 (rgb [0].ToString () + rgb [1].ToString ()' 16);  	green = Convert.ToInt32 (rgb [2].ToString () + rgb [3].ToString ()' 16);  	blue = Convert.ToInt32 (rgb [4].ToString () + rgb [5].ToString ()' 16);  	return Color.FromArgb (red' green' blue);  default:  	return Color.FromName (color);  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,ToColor,The following statement contains a magic number: switch (color.Length) {  case 3:  	rgb = color.ToCharArray ();  	red = Convert.ToInt32 (rgb [0].ToString () + rgb [0].ToString ()' 16);  	green = Convert.ToInt32 (rgb [1].ToString () + rgb [1].ToString ()' 16);  	blue = Convert.ToInt32 (rgb [2].ToString () + rgb [2].ToString ()' 16);  	return Color.FromArgb (red' green' blue);  case 6:  	rgb = color.ToCharArray ();  	red = Convert.ToInt32 (rgb [0].ToString () + rgb [1].ToString ()' 16);  	green = Convert.ToInt32 (rgb [2].ToString () + rgb [3].ToString ()' 16);  	blue = Convert.ToInt32 (rgb [4].ToString () + rgb [5].ToString ()' 16);  	return Color.FromArgb (red' green' blue);  default:  	return Color.FromName (color);  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,ToColor,The following statement contains a magic number: switch (color.Length) {  case 3:  	rgb = color.ToCharArray ();  	red = Convert.ToInt32 (rgb [0].ToString () + rgb [0].ToString ()' 16);  	green = Convert.ToInt32 (rgb [1].ToString () + rgb [1].ToString ()' 16);  	blue = Convert.ToInt32 (rgb [2].ToString () + rgb [2].ToString ()' 16);  	return Color.FromArgb (red' green' blue);  case 6:  	rgb = color.ToCharArray ();  	red = Convert.ToInt32 (rgb [0].ToString () + rgb [1].ToString ()' 16);  	green = Convert.ToInt32 (rgb [2].ToString () + rgb [3].ToString ()' 16);  	blue = Convert.ToInt32 (rgb [4].ToString () + rgb [5].ToString ()' 16);  	return Color.FromArgb (red' green' blue);  default:  	return Color.FromName (color);  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,ToColor,The following statement contains a magic number: switch (color.Length) {  case 3:  	rgb = color.ToCharArray ();  	red = Convert.ToInt32 (rgb [0].ToString () + rgb [0].ToString ()' 16);  	green = Convert.ToInt32 (rgb [1].ToString () + rgb [1].ToString ()' 16);  	blue = Convert.ToInt32 (rgb [2].ToString () + rgb [2].ToString ()' 16);  	return Color.FromArgb (red' green' blue);  case 6:  	rgb = color.ToCharArray ();  	red = Convert.ToInt32 (rgb [0].ToString () + rgb [1].ToString ()' 16);  	green = Convert.ToInt32 (rgb [2].ToString () + rgb [3].ToString ()' 16);  	blue = Convert.ToInt32 (rgb [4].ToString () + rgb [5].ToString ()' 16);  	return Color.FromArgb (red' green' blue);  default:  	return Color.FromName (color);  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,ToColor,The following statement contains a magic number: switch (color.Length) {  case 3:  	rgb = color.ToCharArray ();  	red = Convert.ToInt32 (rgb [0].ToString () + rgb [0].ToString ()' 16);  	green = Convert.ToInt32 (rgb [1].ToString () + rgb [1].ToString ()' 16);  	blue = Convert.ToInt32 (rgb [2].ToString () + rgb [2].ToString ()' 16);  	return Color.FromArgb (red' green' blue);  case 6:  	rgb = color.ToCharArray ();  	red = Convert.ToInt32 (rgb [0].ToString () + rgb [1].ToString ()' 16);  	green = Convert.ToInt32 (rgb [2].ToString () + rgb [3].ToString ()' 16);  	blue = Convert.ToInt32 (rgb [4].ToString () + rgb [5].ToString ()' 16);  	return Color.FromArgb (red' green' blue);  default:  	return Color.FromName (color);  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,ToColor,The following statement contains a magic number: switch (color.Length) {  case 3:  	rgb = color.ToCharArray ();  	red = Convert.ToInt32 (rgb [0].ToString () + rgb [0].ToString ()' 16);  	green = Convert.ToInt32 (rgb [1].ToString () + rgb [1].ToString ()' 16);  	blue = Convert.ToInt32 (rgb [2].ToString () + rgb [2].ToString ()' 16);  	return Color.FromArgb (red' green' blue);  case 6:  	rgb = color.ToCharArray ();  	red = Convert.ToInt32 (rgb [0].ToString () + rgb [1].ToString ()' 16);  	green = Convert.ToInt32 (rgb [2].ToString () + rgb [3].ToString ()' 16);  	blue = Convert.ToInt32 (rgb [4].ToString () + rgb [5].ToString ()' 16);  	return Color.FromArgb (red' green' blue);  default:  	return Color.FromName (color);  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,ToColor,The following statement contains a magic number: switch (color.Length) {  case 3:  	rgb = color.ToCharArray ();  	red = Convert.ToInt32 (rgb [0].ToString () + rgb [0].ToString ()' 16);  	green = Convert.ToInt32 (rgb [1].ToString () + rgb [1].ToString ()' 16);  	blue = Convert.ToInt32 (rgb [2].ToString () + rgb [2].ToString ()' 16);  	return Color.FromArgb (red' green' blue);  case 6:  	rgb = color.ToCharArray ();  	red = Convert.ToInt32 (rgb [0].ToString () + rgb [1].ToString ()' 16);  	green = Convert.ToInt32 (rgb [2].ToString () + rgb [3].ToString ()' 16);  	blue = Convert.ToInt32 (rgb [4].ToString () + rgb [5].ToString ()' 16);  	return Color.FromArgb (red' green' blue);  default:  	return Color.FromName (color);  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,ToColor,The following statement contains a magic number: switch (color.Length) {  case 3:  	rgb = color.ToCharArray ();  	red = Convert.ToInt32 (rgb [0].ToString () + rgb [0].ToString ()' 16);  	green = Convert.ToInt32 (rgb [1].ToString () + rgb [1].ToString ()' 16);  	blue = Convert.ToInt32 (rgb [2].ToString () + rgb [2].ToString ()' 16);  	return Color.FromArgb (red' green' blue);  case 6:  	rgb = color.ToCharArray ();  	red = Convert.ToInt32 (rgb [0].ToString () + rgb [1].ToString ()' 16);  	green = Convert.ToInt32 (rgb [2].ToString () + rgb [3].ToString ()' 16);  	blue = Convert.ToInt32 (rgb [4].ToString () + rgb [5].ToString ()' 16);  	return Color.FromArgb (red' green' blue);  default:  	return Color.FromName (color);  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,ToColor,The following statement contains a magic number: switch (color.Length) {  case 3:  	rgb = color.ToCharArray ();  	red = Convert.ToInt32 (rgb [0].ToString () + rgb [0].ToString ()' 16);  	green = Convert.ToInt32 (rgb [1].ToString () + rgb [1].ToString ()' 16);  	blue = Convert.ToInt32 (rgb [2].ToString () + rgb [2].ToString ()' 16);  	return Color.FromArgb (red' green' blue);  case 6:  	rgb = color.ToCharArray ();  	red = Convert.ToInt32 (rgb [0].ToString () + rgb [1].ToString ()' 16);  	green = Convert.ToInt32 (rgb [2].ToString () + rgb [3].ToString ()' 16);  	blue = Convert.ToInt32 (rgb [4].ToString () + rgb [5].ToString ()' 16);  	return Color.FromArgb (red' green' blue);  default:  	return Color.FromName (color);  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,ToColor,The following statement contains a magic number: switch (color.Length) {  case 3:  	rgb = color.ToCharArray ();  	red = Convert.ToInt32 (rgb [0].ToString () + rgb [0].ToString ()' 16);  	green = Convert.ToInt32 (rgb [1].ToString () + rgb [1].ToString ()' 16);  	blue = Convert.ToInt32 (rgb [2].ToString () + rgb [2].ToString ()' 16);  	return Color.FromArgb (red' green' blue);  case 6:  	rgb = color.ToCharArray ();  	red = Convert.ToInt32 (rgb [0].ToString () + rgb [1].ToString ()' 16);  	green = Convert.ToInt32 (rgb [2].ToString () + rgb [3].ToString ()' 16);  	blue = Convert.ToInt32 (rgb [4].ToString () + rgb [5].ToString ()' 16);  	return Color.FromArgb (red' green' blue);  default:  	return Color.FromName (color);  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,ToColor,The following statement contains a magic number: switch (color.Length) {  case 3:  	rgb = color.ToCharArray ();  	red = Convert.ToInt32 (rgb [0].ToString () + rgb [0].ToString ()' 16);  	green = Convert.ToInt32 (rgb [1].ToString () + rgb [1].ToString ()' 16);  	blue = Convert.ToInt32 (rgb [2].ToString () + rgb [2].ToString ()' 16);  	return Color.FromArgb (red' green' blue);  case 6:  	rgb = color.ToCharArray ();  	red = Convert.ToInt32 (rgb [0].ToString () + rgb [1].ToString ()' 16);  	green = Convert.ToInt32 (rgb [2].ToString () + rgb [3].ToString ()' 16);  	blue = Convert.ToInt32 (rgb [4].ToString () + rgb [5].ToString ()' 16);  	return Color.FromArgb (red' green' blue);  default:  	return Color.FromName (color);  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,ToColor,The following statement contains a magic number: switch (color.Length) {  case 3:  	rgb = color.ToCharArray ();  	red = Convert.ToInt32 (rgb [0].ToString () + rgb [0].ToString ()' 16);  	green = Convert.ToInt32 (rgb [1].ToString () + rgb [1].ToString ()' 16);  	blue = Convert.ToInt32 (rgb [2].ToString () + rgb [2].ToString ()' 16);  	return Color.FromArgb (red' green' blue);  case 6:  	rgb = color.ToCharArray ();  	red = Convert.ToInt32 (rgb [0].ToString () + rgb [1].ToString ()' 16);  	green = Convert.ToInt32 (rgb [2].ToString () + rgb [3].ToString ()' 16);  	blue = Convert.ToInt32 (rgb [4].ToString () + rgb [5].ToString ()' 16);  	return Color.FromArgb (red' green' blue);  default:  	return Color.FromName (color);  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,ToColor,The following statement contains a magic number: switch (color.Length) {  case 3:  	rgb = color.ToCharArray ();  	red = Convert.ToInt32 (rgb [0].ToString () + rgb [0].ToString ()' 16);  	green = Convert.ToInt32 (rgb [1].ToString () + rgb [1].ToString ()' 16);  	blue = Convert.ToInt32 (rgb [2].ToString () + rgb [2].ToString ()' 16);  	return Color.FromArgb (red' green' blue);  case 6:  	rgb = color.ToCharArray ();  	red = Convert.ToInt32 (rgb [0].ToString () + rgb [1].ToString ()' 16);  	green = Convert.ToInt32 (rgb [2].ToString () + rgb [3].ToString ()' 16);  	blue = Convert.ToInt32 (rgb [4].ToString () + rgb [5].ToString ()' 16);  	return Color.FromArgb (red' green' blue);  default:  	return Color.FromName (color);  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,ToColor,The following statement contains a magic number: switch (color.Length) {  case 3:  	rgb = color.ToCharArray ();  	red = Convert.ToInt32 (rgb [0].ToString () + rgb [0].ToString ()' 16);  	green = Convert.ToInt32 (rgb [1].ToString () + rgb [1].ToString ()' 16);  	blue = Convert.ToInt32 (rgb [2].ToString () + rgb [2].ToString ()' 16);  	return Color.FromArgb (red' green' blue);  case 6:  	rgb = color.ToCharArray ();  	red = Convert.ToInt32 (rgb [0].ToString () + rgb [1].ToString ()' 16);  	green = Convert.ToInt32 (rgb [2].ToString () + rgb [3].ToString ()' 16);  	blue = Convert.ToInt32 (rgb [4].ToString () + rgb [5].ToString ()' 16);  	return Color.FromArgb (red' green' blue);  default:  	return Color.FromName (color);  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,ToColor,The following statement contains a magic number: red = Convert.ToInt32 (rgb [0].ToString () + rgb [0].ToString ()' 16);  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,ToColor,The following statement contains a magic number: green = Convert.ToInt32 (rgb [1].ToString () + rgb [1].ToString ()' 16);  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,ToColor,The following statement contains a magic number: blue = Convert.ToInt32 (rgb [2].ToString () + rgb [2].ToString ()' 16);  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,ToColor,The following statement contains a magic number: blue = Convert.ToInt32 (rgb [2].ToString () + rgb [2].ToString ()' 16);  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,ToColor,The following statement contains a magic number: blue = Convert.ToInt32 (rgb [2].ToString () + rgb [2].ToString ()' 16);  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,ToColor,The following statement contains a magic number: red = Convert.ToInt32 (rgb [0].ToString () + rgb [1].ToString ()' 16);  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,ToColor,The following statement contains a magic number: green = Convert.ToInt32 (rgb [2].ToString () + rgb [3].ToString ()' 16);  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,ToColor,The following statement contains a magic number: green = Convert.ToInt32 (rgb [2].ToString () + rgb [3].ToString ()' 16);  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,ToColor,The following statement contains a magic number: green = Convert.ToInt32 (rgb [2].ToString () + rgb [3].ToString ()' 16);  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,ToColor,The following statement contains a magic number: blue = Convert.ToInt32 (rgb [4].ToString () + rgb [5].ToString ()' 16);  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,ToColor,The following statement contains a magic number: blue = Convert.ToInt32 (rgb [4].ToString () + rgb [5].ToString ()' 16);  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,ToColor,The following statement contains a magic number: blue = Convert.ToInt32 (rgb [4].ToString () + rgb [5].ToString ()' 16);  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,CheckColorValue,The following statement contains a magic number: if (color.Length != 3 && color.Length != 6)  	return false;  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,CheckColorValue,The following statement contains a magic number: if (color.Length != 3 && color.Length != 6)  	return false;  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetAjaxPageNumbers,The following statement contains a magic number: if (extendPage < 3)  	extendPage = 2;  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetAjaxPageNumbers,The following statement contains a magic number: if (extendPage < 3)  	extendPage = 2;  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetAjaxPageNumbers,The following statement contains a magic number: extendPage = 2;  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetAjaxPageNumbers,The following statement contains a magic number: if (countPage > extendPage) {  	if (curPage - (extendPage / 2) > 0) {  		if (curPage + (extendPage / 2) < countPage) {  			startPage = curPage - (extendPage / 2);  			endPage = startPage + extendPage - 1;  		}  		else {  			endPage = countPage;  			startPage = endPage - extendPage + 1;  			t2 = "";  		}  	}  	else {  		endPage = extendPage;  		t1 = "";  	}  }  else {  	startPage = 1;  	endPage = countPage;  	t1 = "";  	t2 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetAjaxPageNumbers,The following statement contains a magic number: if (countPage > extendPage) {  	if (curPage - (extendPage / 2) > 0) {  		if (curPage + (extendPage / 2) < countPage) {  			startPage = curPage - (extendPage / 2);  			endPage = startPage + extendPage - 1;  		}  		else {  			endPage = countPage;  			startPage = endPage - extendPage + 1;  			t2 = "";  		}  	}  	else {  		endPage = extendPage;  		t1 = "";  	}  }  else {  	startPage = 1;  	endPage = countPage;  	t1 = "";  	t2 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetAjaxPageNumbers,The following statement contains a magic number: if (countPage > extendPage) {  	if (curPage - (extendPage / 2) > 0) {  		if (curPage + (extendPage / 2) < countPage) {  			startPage = curPage - (extendPage / 2);  			endPage = startPage + extendPage - 1;  		}  		else {  			endPage = countPage;  			startPage = endPage - extendPage + 1;  			t2 = "";  		}  	}  	else {  		endPage = extendPage;  		t1 = "";  	}  }  else {  	startPage = 1;  	endPage = countPage;  	t1 = "";  	t2 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetAjaxPageNumbers,The following statement contains a magic number: if (curPage - (extendPage / 2) > 0) {  	if (curPage + (extendPage / 2) < countPage) {  		startPage = curPage - (extendPage / 2);  		endPage = startPage + extendPage - 1;  	}  	else {  		endPage = countPage;  		startPage = endPage - extendPage + 1;  		t2 = "";  	}  }  else {  	endPage = extendPage;  	t1 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetAjaxPageNumbers,The following statement contains a magic number: if (curPage - (extendPage / 2) > 0) {  	if (curPage + (extendPage / 2) < countPage) {  		startPage = curPage - (extendPage / 2);  		endPage = startPage + extendPage - 1;  	}  	else {  		endPage = countPage;  		startPage = endPage - extendPage + 1;  		t2 = "";  	}  }  else {  	endPage = extendPage;  	t1 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetAjaxPageNumbers,The following statement contains a magic number: if (curPage - (extendPage / 2) > 0) {  	if (curPage + (extendPage / 2) < countPage) {  		startPage = curPage - (extendPage / 2);  		endPage = startPage + extendPage - 1;  	}  	else {  		endPage = countPage;  		startPage = endPage - extendPage + 1;  		t2 = "";  	}  }  else {  	endPage = extendPage;  	t1 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetAjaxPageNumbers,The following statement contains a magic number: if (curPage + (extendPage / 2) < countPage) {  	startPage = curPage - (extendPage / 2);  	endPage = startPage + extendPage - 1;  }  else {  	endPage = countPage;  	startPage = endPage - extendPage + 1;  	t2 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetAjaxPageNumbers,The following statement contains a magic number: if (curPage + (extendPage / 2) < countPage) {  	startPage = curPage - (extendPage / 2);  	endPage = startPage + extendPage - 1;  }  else {  	endPage = countPage;  	startPage = endPage - extendPage + 1;  	t2 = "";  }  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetAjaxPageNumbers,The following statement contains a magic number: startPage = curPage - (extendPage / 2);  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetSourceTextByUrl,The following statement contains a magic number: request.Timeout = 20000;  
Magic Number,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,GetHttpWebResponse,The following statement contains a magic number: request.Timeout = 20000;  
Magic Number,QX.Comm.Utils,Validator,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Validator.cs,IsNumeric,The following statement contains a magic number: if (expression != null) {  	string str = expression;  	if (str.Length > 0 && str.Length <= 11 && Regex.IsMatch (str' @"^[-]?[0-9]*[.]?[0-9]*$")) {  		if ((str.Length < 10) || (str.Length == 10 && str [0] == '1') || (str.Length == 11 && str [0] == '-' && str [1] == '1'))  			return true;  	}  }  
Magic Number,QX.Comm.Utils,Validator,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Validator.cs,IsNumeric,The following statement contains a magic number: if (expression != null) {  	string str = expression;  	if (str.Length > 0 && str.Length <= 11 && Regex.IsMatch (str' @"^[-]?[0-9]*[.]?[0-9]*$")) {  		if ((str.Length < 10) || (str.Length == 10 && str [0] == '1') || (str.Length == 11 && str [0] == '-' && str [1] == '1'))  			return true;  	}  }  
Magic Number,QX.Comm.Utils,Validator,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Validator.cs,IsNumeric,The following statement contains a magic number: if (expression != null) {  	string str = expression;  	if (str.Length > 0 && str.Length <= 11 && Regex.IsMatch (str' @"^[-]?[0-9]*[.]?[0-9]*$")) {  		if ((str.Length < 10) || (str.Length == 10 && str [0] == '1') || (str.Length == 11 && str [0] == '-' && str [1] == '1'))  			return true;  	}  }  
Magic Number,QX.Comm.Utils,Validator,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Validator.cs,IsNumeric,The following statement contains a magic number: if (expression != null) {  	string str = expression;  	if (str.Length > 0 && str.Length <= 11 && Regex.IsMatch (str' @"^[-]?[0-9]*[.]?[0-9]*$")) {  		if ((str.Length < 10) || (str.Length == 10 && str [0] == '1') || (str.Length == 11 && str [0] == '-' && str [1] == '1'))  			return true;  	}  }  
Magic Number,QX.Comm.Utils,Validator,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Validator.cs,IsNumeric,The following statement contains a magic number: if (str.Length > 0 && str.Length <= 11 && Regex.IsMatch (str' @"^[-]?[0-9]*[.]?[0-9]*$")) {  	if ((str.Length < 10) || (str.Length == 10 && str [0] == '1') || (str.Length == 11 && str [0] == '-' && str [1] == '1'))  		return true;  }  
Magic Number,QX.Comm.Utils,Validator,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Validator.cs,IsNumeric,The following statement contains a magic number: if (str.Length > 0 && str.Length <= 11 && Regex.IsMatch (str' @"^[-]?[0-9]*[.]?[0-9]*$")) {  	if ((str.Length < 10) || (str.Length == 10 && str [0] == '1') || (str.Length == 11 && str [0] == '-' && str [1] == '1'))  		return true;  }  
Magic Number,QX.Comm.Utils,Validator,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Validator.cs,IsNumeric,The following statement contains a magic number: if (str.Length > 0 && str.Length <= 11 && Regex.IsMatch (str' @"^[-]?[0-9]*[.]?[0-9]*$")) {  	if ((str.Length < 10) || (str.Length == 10 && str [0] == '1') || (str.Length == 11 && str [0] == '-' && str [1] == '1'))  		return true;  }  
Magic Number,QX.Comm.Utils,Validator,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Validator.cs,IsNumeric,The following statement contains a magic number: if (str.Length > 0 && str.Length <= 11 && Regex.IsMatch (str' @"^[-]?[0-9]*[.]?[0-9]*$")) {  	if ((str.Length < 10) || (str.Length == 10 && str [0] == '1') || (str.Length == 11 && str [0] == '-' && str [1] == '1'))  		return true;  }  
Magic Number,QX.Comm.Utils,Validator,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Validator.cs,IsNumeric,The following statement contains a magic number: if ((str.Length < 10) || (str.Length == 10 && str [0] == '1') || (str.Length == 11 && str [0] == '-' && str [1] == '1'))  	return true;  
Magic Number,QX.Comm.Utils,Validator,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Validator.cs,IsNumeric,The following statement contains a magic number: if ((str.Length < 10) || (str.Length == 10 && str [0] == '1') || (str.Length == 11 && str [0] == '-' && str [1] == '1'))  	return true;  
Magic Number,QX.Comm.Utils,Validator,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Validator.cs,IsNumeric,The following statement contains a magic number: if ((str.Length < 10) || (str.Length == 10 && str [0] == '1') || (str.Length == 11 && str [0] == '-' && str [1] == '1'))  	return true;  
Missing Default,QX.Comm,FTP,C:\repos\youthjoy_hfoa\QX.Comm\Ftp.cs,GetList,The following switch statement is missing a default case: switch (_directoryListStyle) {  case FileListStyle.UnixStyle:  	f = ParseFileStructFromUnixStyleRecord (s);  	break;  case FileListStyle.WindowsStyle:  	f = ParseFileStructFromWindowsStyleRecord (s);  	break;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,ParseComparison,The following switch statement is missing a default case: switch (op.id) {  case TokenId.Equal:  case TokenId.DoubleEqual:  	left = GenerateEqual (left' right);  	break;  case TokenId.ExclamationEqual:  case TokenId.LessGreater:  	left = GenerateNotEqual (left' right);  	break;  case TokenId.GreaterThan:  	left = GenerateGreaterThan (left' right);  	break;  case TokenId.GreaterThanEqual:  	left = GenerateGreaterThanEqual (left' right);  	break;  case TokenId.LessThan:  	left = GenerateLessThan (left' right);  	break;  case TokenId.LessThanEqual:  	left = GenerateLessThanEqual (left' right);  	break;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,ParseAdditive,The following switch statement is missing a default case: switch (op.id) {  case TokenId.Plus:  	if (left.Type == typeof(string) || right.Type == typeof(string))  		goto case TokenId.Amphersand;  	CheckAndPromoteOperands (typeof(IAddSignatures)' op.text' ref left' ref right' op.pos);  	left = GenerateAdd (left' right);  	break;  case TokenId.Minus:  	CheckAndPromoteOperands (typeof(ISubtractSignatures)' op.text' ref left' ref right' op.pos);  	left = GenerateSubtract (left' right);  	break;  case TokenId.Amphersand:  	left = GenerateStringConcat (left' right);  	break;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,ParseMultiplicative,The following switch statement is missing a default case: switch (op.id) {  case TokenId.Asterisk:  	left = Expression.Multiply (left' right);  	break;  case TokenId.Slash:  	left = Expression.Divide (left' right);  	break;  case TokenId.Percent:  case TokenId.Identifier:  	left = Expression.Modulo (left' right);  	break;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,PromoteExpression,The following switch statement is missing a default case: switch (Type.GetTypeCode (ce.Type)) {  case TypeCode.Int32:  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  	value = ParseNumber (text' target);  	break;  case TypeCode.Double:  	if (target == typeof(decimal))  		value = ParseNumber (text' target);  	break;  case TypeCode.String:  	value = ParseEnum (text' target);  	break;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,ParseNumber,The following switch statement is missing a default case: switch (Type.GetTypeCode (GetNonNullableType (type))) {  case TypeCode.SByte:  	sbyte sb;  	if (sbyte.TryParse (text' out sb))  		return sb;  	break;  case TypeCode.Byte:  	byte b;  	if (byte.TryParse (text' out b))  		return b;  	break;  case TypeCode.Int16:  	short s;  	if (short.TryParse (text' out s))  		return s;  	break;  case TypeCode.UInt16:  	ushort us;  	if (ushort.TryParse (text' out us))  		return us;  	break;  case TypeCode.Int32:  	int i;  	if (int.TryParse (text' out i))  		return i;  	break;  case TypeCode.UInt32:  	uint ui;  	if (uint.TryParse (text' out ui))  		return ui;  	break;  case TypeCode.Int64:  	long l;  	if (long.TryParse (text' out l))  		return l;  	break;  case TypeCode.UInt64:  	ulong ul;  	if (ulong.TryParse (text' out ul))  		return ul;  	break;  case TypeCode.Single:  	float f;  	if (float.TryParse (text' out f))  		return f;  	break;  case TypeCode.Double:  	double d;  	if (double.TryParse (text' out d))  		return d;  	break;  case TypeCode.Decimal:  	decimal e;  	if (decimal.TryParse (text' out e))  		return e;  	break;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.SByte:  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Byte:  case TypeCode.Int16:  case TypeCode.UInt16:  case TypeCode.Int32:  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.UInt16:  case TypeCode.Int32:  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Int32:  case TypeCode.Int64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.UInt32:  case TypeCode.Int64:  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Int64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	return true;  }  
Missing Default,System.Linq.Dynamic,ExpressionParser,C:\repos\youthjoy_hfoa\QX.Comm\Dynamic.cs,IsCompatibleWith,The following switch statement is missing a default case: switch (tc) {  case TypeCode.Single:  case TypeCode.Double:  	return true;  }  
Missing Default,QX.Comm.Utils,Utils,C:\repos\youthjoy_hfoa\QX.Comm\Uitls\Utils.cs,IsRuleTip,The following switch statement is missing a default case: switch (ruletype.Trim ().ToLower ()) {  case "email":  	if (IsValidDoEmail (strs.ToString ()) == false)  		throw new Exception ();  	break;  case "ip":  	if (IsIPSect (strs.ToString ()) == false)  		throw new Exception ();  	break;  case "timesect":  	string[] splitetime = strs.Split ('-');  	if (Utils.IsTime (splitetime [1].ToString ()) == false || Utils.IsTime (splitetime [0].ToString ()) == false)  		throw new Exception ();  	break;  }  
