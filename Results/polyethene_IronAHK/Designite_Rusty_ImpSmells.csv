Implementation smell,Namespace,Class,File,Method,Description
Long Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Mail,The method has 115 lines of code.
Long Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,DriveGet,The method has 141 lines of code.
Long Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FileRead,The method has 114 lines of code.
Long Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,DllCall,The method has 210 lines of code.
Long Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Gui,The method has 407 lines of code.
Long Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlEdit,The method has 791 lines of code.
Long Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiApplyStyles,The method has 230 lines of code.
Long Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlMove,The method has 153 lines of code.
Long Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlAsync,The method has 130 lines of code.
Long Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Hotkey,The method has 115 lines of code.
Long Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Sort,The method has 154 lines of code.
Long Method,IronAHK.Rusty.Common,KeyboardHook,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\KeyboardHook.cs,KeyReceived,The method has 169 lines of code.
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ParseFont,Cyclomatic complexity of the method is 14
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ToOSType,Cyclomatic complexity of the method is 8
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ToFileAttribs,Cyclomatic complexity of the method is 14
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FromFileAttribs,Cyclomatic complexity of the method is 10
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ToFiles,Cyclomatic complexity of the method is 8
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,LV_RowOptions,Cyclomatic complexity of the method is 8
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,KeyValues,Cyclomatic complexity of the method is 14
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Mail,Cyclomatic complexity of the method is 24
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Drive,Cyclomatic complexity of the method is 11
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,DriveGet,Cyclomatic complexity of the method is 19
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FileRead,Cyclomatic complexity of the method is 16
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FileSelectFile,Cyclomatic complexity of the method is 11
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,InputBox,Cyclomatic complexity of the method is 8
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,MsgBox,Cyclomatic complexity of the method is 16
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,DllCall,Cyclomatic complexity of the method is 29
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,SetTimer,Cyclomatic complexity of the method is 10
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Gui,Cyclomatic complexity of the method is 111
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlEdit,Cyclomatic complexity of the method is 158
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiApplyStyles,Cyclomatic complexity of the method is 55
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlMove,Cyclomatic complexity of the method is 22
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlAsync,Cyclomatic complexity of the method is 28
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlGet,Cyclomatic complexity of the method is 17
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,LV_GetNext,Cyclomatic complexity of the method is 9
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,LV_Modify,Cyclomatic complexity of the method is 13
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,LV_ModifyCol,Cyclomatic complexity of the method is 29
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,IniRead,Cyclomatic complexity of the method is 8
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,IniWrite,Cyclomatic complexity of the method is 12
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Hotkey,Cyclomatic complexity of the method is 17
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,HotkeyPrecondition,Cyclomatic complexity of the method is 9
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Input,Cyclomatic complexity of the method is 11
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,LoopParse,Cyclomatic complexity of the method is 15
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,LoopRead,Cyclomatic complexity of the method is 9
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,PixelGetColor,Cyclomatic complexity of the method is 8
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Click,Cyclomatic complexity of the method is 16
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Process,Cyclomatic complexity of the method is 19
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,SoundPlay,Cyclomatic complexity of the method is 9
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FormatTime,Cyclomatic complexity of the method is 11
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Sort,Cyclomatic complexity of the method is 22
Complex Method,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Transform,Cyclomatic complexity of the method is 28
Complex Method,IronAHK.Rusty,ComplexDlgOptions,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\ComplexDlgOptions.cs,ParseComplexOptions,Cyclomatic complexity of the method is 10
Complex Method,IronAHK.Rusty,HotkeyBox,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\HotkeyBox.cs,Validate,Cyclomatic complexity of the method is 17
Complex Method,IronAHK.Rusty.Common,HotkeyDefinition,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\HotkeyDefinition.cs,Parse,Cyclomatic complexity of the method is 27
Complex Method,IronAHK.Rusty.Common,HotstringDefinition,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\HotstringDefinition.cs,ParseOptions,Cyclomatic complexity of the method is 9
Complex Method,IronAHK.Rusty.Common,IAInputCommand,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\InputCommand.cs,OnKeyPressedEvent,Cyclomatic complexity of the method is 8
Complex Method,IronAHK.Rusty.Common,IAInputCommand,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\InputCommand.cs,PastAbortCondition,Cyclomatic complexity of the method is 11
Complex Method,IronAHK.Rusty.Common,KeyboardHook,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\KeyboardHook.cs,KeyReceived,Cyclomatic complexity of the method is 20
Complex Method,IronAHK.Rusty.Common,KeyboardHook,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\KeyboardHook.cs,HasConditions,Cyclomatic complexity of the method is 9
Complex Method,IronAHK.Rusty.Common,KeyParser,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\KeyParser.cs,ParseKeyStream,Cyclomatic complexity of the method is 10
Complex Method,IronAHK.Rusty.Common,KeyParser,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\KeyParser.cs,ParseKey,Cyclomatic complexity of the method is 8
Complex Method,IronAHK.Rusty.Common,SearchCriteria,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Window\SearchCriteria.cs,FromString,Cyclomatic complexity of the method is 11
Complex Method,IronAHK.Rusty.Common,WindowItemBase,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Window\WindowItemBase.cs,Equals,Cyclomatic complexity of the method is 16
Complex Method,IronAHK.Rusty.Common,SimpleJson,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\SimpleJson\SimpleJSON.cs,Scan,Cyclomatic complexity of the method is 8
Complex Method,IronAHK.Rusty.Common,SimpleJson,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\SimpleJson\SimpleJSON.cs,ParseArray,Cyclomatic complexity of the method is 11
Complex Method,IronAHK.Rusty.Common,SimpleJson,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\SimpleJson\SimpleJSON.cs,DecodeObject,Cyclomatic complexity of the method is 17
Complex Method,IronAHK.Rusty.Common,SimpleJson,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\SimpleJson\SimpleJSON.cs,EncodeObject,Cyclomatic complexity of the method is 9
Complex Method,IronAHK.Rusty.Windows,WindowItem,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Windows\WindowItem.cs,SelectMenuItem,Cyclomatic complexity of the method is 9
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FileCreateShortcut,The method has 9 parameters. Parameters: target' link' workingDir' args' description' icon' shortcutKey' iconNumber' runState
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FileGetShortcut,The method has 8 parameters. Parameters: link' target' workingDir' args' description' icon' iconNumber' runState
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FileSetTime,The method has 5 parameters. Parameters: YYYYMMDDHH24MISS' FilePattern' WhichTime' OperateOnFolders' Recurse
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,SplitPath,The method has 6 parameters. Parameters: path' filename' directory' extension' name' root
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Menu,The method has 5 parameters. Parameters: MenuName' Cmd' P3' P4' P5
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FileSelectFile,The method has 5 parameters. Parameters: OutputVar' Options' RootDir' Prompt' Filter
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,InputBox,The method has 11 parameters. Parameters: OutputVar' Title' Prompt' Hide' Width' Height' X' Y' Font' Timeout' Default
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Progress,The method has 5 parameters. Parameters: ProgressParam1' SubText' MainText' WinTitle' FontName
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,SplashImage,The method has 6 parameters. Parameters: ImageFile' Options' SubText' MainText' WinTitle' FontName
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlEdit,The method has 5 parameters. Parameters: control' parent' type' options' content
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,IniRead,The method has 5 parameters. Parameters: result' file' section' key' error
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ImageSearch,The method has 7 parameters. Parameters: OutputVarX' OutputVarY' X1' Y1' X2' Y2' OptionsImageFile
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,PixelSearch,The method has 9 parameters. Parameters: OutputVarX' OutputVarY' X1' Y1' X2' Y2' ColorID' Variation' Fast_RGB
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,MouseClickDrag,The method has 7 parameters. Parameters: button' x1' y1' x2' y2' speed' relative
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,MouseGetPos,The method has 5 parameters. Parameters: x' y' win' control' mode
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Run,The method has 5 parameters. Parameters: target' workingDir' showMode' pid' wait
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,RegWrite,The method has 5 parameters. Parameters: ValueType' RootKey' SubKey' ValueName' Value
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,RegExReplace,The method has 6 parameters. Parameters: input' needle' replace' count' limit' index
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,StringReplace,The method has 5 parameters. Parameters: output' input' search' replace' all
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Control,The method has 7 parameters. Parameters: Cmd' Value' ControlID' WinTitle' WinText' ExcludeTitle' ExcludeText
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ControlClick,The method has 8 parameters. Parameters: mode' title' text' button' clickCount' options' excludeTitle' excludeText
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ControlFocus,The method has 5 parameters. Parameters: Control' WinTitle' WinText' ExcludeTitle' ExcludeText
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ControlGet,The method has 8 parameters. Parameters: OutputVar' Cmd' Value' ControlID' WinTitle' WinText' ExcludeTitle' ExcludeText
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ControlGetFocus,The method has 5 parameters. Parameters: OutputVar' WinTitle' WinText' ExcludeTitle' ExcludeText
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ControlGetPos,The method has 9 parameters. Parameters: X' Y' Width' Height' Control' WinTitle' WinText' ExcludeTitle' ExcludeText
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ControlGetText,The method has 6 parameters. Parameters: OutputVar' Control' WinTitle' WinText' ExcludeTitle' ExcludeText
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ControlMove,The method has 9 parameters. Parameters: Control' X' Y' Width' Height' WinTitle' WinText' ExcludeTitle' ExcludeText
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ControlSend,The method has 6 parameters. Parameters: Control' Keys' WinTitle' WinText' ExcludeTitle' ExcludeText
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ControlSetText,The method has 6 parameters. Parameters: Control' NewText' WinTitle' WinText' ExcludeTitle' ExcludeText
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GroupAdd,The method has 6 parameters. Parameters: name' winTitle' winText' label' excludeTitle' excludeText
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,PostMessage,The method has 8 parameters. Parameters: Msg' wParam' lParam' Control' WinTitle' WinText' ExcludeTitle' ExcludeText
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,SendMessage,The method has 8 parameters. Parameters: Msg' wParam' lParam' Control' WinTitle' WinText' ExcludeTitle' ExcludeText
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,StatusBarGetText,The method has 6 parameters. Parameters: OutputVar' Part' WinTitle' WinText' ExcludeTitle' ExcludeText
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,StatusBarWait,The method has 8 parameters. Parameters: BarText' Seconds' Part' WinTitle' WinText' Interval' ExcludeTitle' ExcludeText
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,WinGet,The method has 6 parameters. Parameters: result' command' title' text' excludeTitle' excludeText
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,WinGetActiveStats,The method has 5 parameters. Parameters: title' width' height' x' y
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,WinGetClass,The method has 5 parameters. Parameters: result' title' text' excludeTitle' excludeText
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,WinGetPos,The method has 8 parameters. Parameters: x' y' width' height' title' text' excludeTitle' excludeText
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,WinGetText,The method has 5 parameters. Parameters: result' title' text' excludeTitle' excludeText
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,WinGetTitle,The method has 5 parameters. Parameters: result' title' text' excludeTitle' excludeText
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,WinMenuSelectItem,The method has 11 parameters. Parameters: title' text' menu' subMenu1' subMenu2' subMenu3' subMenu4' subMenu5' subMenu6' excludeTitle' excludeText
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,WinMove,The method has 8 parameters. Parameters: title' text' x' y' width' height' excludeTitle' excludeText
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,WinSet,The method has 6 parameters. Parameters: attribute' value' title' text' excludeTitle' excludeText
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,WinSetTitle,The method has 5 parameters. Parameters: title' text' newTitle' excludeTitle' excludeText
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,WinWait,The method has 5 parameters. Parameters: title' text' seconds' excludeTitle' excludeText
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,WinWaitActive,The method has 5 parameters. Parameters: title' text' seconds' excludeTitle' excludeText
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,WinWaitClose,The method has 5 parameters. Parameters: title' text' seconds' excludeTitle' excludeText
Long Parameter List,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,WinWaitNotActive,The method has 5 parameters. Parameters: title' text' seconds' excludeTitle' excludeText
Long Parameter List,IronAHK.Rusty,WindowsAPI,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Windows\PInvoke.cs,MoveWindow,The method has 6 parameters. Parameters: hWnd' X' Y' nWidth' nHeight' bRepaint
Long Parameter List,IronAHK.Rusty,WindowsAPI,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Windows\PInvoke.cs,SetWindowPos,The method has 7 parameters. Parameters: hWnd' hWndInsertAfter' X' Y' cx' cy' uFlags
Long Parameter List,IronAHK.Rusty,WindowsAPI,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Windows\PInvoke.cs,GetMenuString,The method has 5 parameters. Parameters: hMenu' uIDItem' lpString' nMaxCount' uFlag
Long Parameter List,IronAHK.Rusty,WindowsAPI,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Windows\PInvoke.cs,GetPrivateProfileString,The method has 6 parameters. Parameters: lpAppName' lpKeyName' lpDefault' lpReturnedString' nSize' lpFileName
Long Parameter List,IronAHK.Rusty,WindowsAPI,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Windows\PInvoke.cs,CreateFile,The method has 7 parameters. Parameters: fileName' desiredAccess' shareMode' attributes' creationDisposition' flagsAndAttributes' templateFile
Long Parameter List,IronAHK.Rusty,WindowsAPI,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Windows\PInvoke.cs,DeviceIoControl,The method has 8 parameters. Parameters: driveHandle' IoControlCode' lpInBuffer' inBufferSize' lpOutBuffer' outBufferSize' lpBytesReturned' lpOverlapped
Long Parameter List,IronAHK.Rusty,WindowsAPI,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Windows\PInvoke.cs,ToUnicodeEx,The method has 7 parameters. Parameters: wVirtKey' wScanCode' lpKeyState' pwszBuff' cchBuff' wFlags' dwhkl
Long Parameter List,IronAHK.Rusty.Linux.X11,Xlib,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Linux\X11\Xlib.cs,XQueryTree,The method has 6 parameters. Parameters: display' w' root_return' parent_return' children_return' nchildren_return
Long Parameter List,IronAHK.Rusty.Linux.X11,Xlib,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Linux\X11\Xlib.cs,XLookupString,The method has 5 parameters. Parameters: Key' Buffer' Count' KeySym' Useless
Long Statement,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FileRecycleEmpty,The length of the statement  "                WindowsAPI.SHEmptyRecycleBin(IntPtr.Zero' Root' WindowsAPI.SHERB_NOCONFIRMATION | WindowsAPI.SHERB_NOPROGRESSUI | WindowsAPI.SHERB_NOSOUND);" is 140.
Long Statement,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FileSelectFile,The length of the statement  "                var saveas = new SaveFileDialog { CheckPathExists = check' CreatePrompt = create' OverwritePrompt = overwite' DereferenceLinks = shortcuts' Filter = Filter };" is 158.
Long Statement,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FileSelectFile,The length of the statement  "                var open = new OpenFileDialog { Multiselect = multi' CheckFileExists = check' DereferenceLinks = shortcuts' Filter = Filter };" is 126.
Long Statement,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,EnvUpdate,The length of the statement  "                try { WindowsAPI.SendMessage(new IntPtr(WindowsAPI.HWND_BROADCAST)' WindowsAPI.WM_SETTINGCHANGE' IntPtr.Zero' IntPtr.Zero); }" is 125.
Long Statement,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiApplyStyles,The length of the statement  "            control.Size = new Size(Math.Max((int)w' control.PreferredSize.Width)' ++r > 2 ? (int)(r * control.Parent.Font.Height) : control.PreferredSize.Height);" is 151.
Long Statement,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlAsync,The length of the statement  "                    if (cmd.StartsWith(Keyword_Disable) && int.TryParse(cmd.Substring(Keyword_Disable.Length)' out n) && (n == 1 || n == 0))" is 120.
Long Statement,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,OnEditKeyPress,The length of the statement  "            if (!(char.IsDigit(e.KeyChar) || char.IsNumber(e.KeyChar) || e.KeyChar == '.' || e.KeyChar == ''' || (int)e.KeyChar == 8 || (int)e.KeyChar == 58 || (int)e.KeyChar == 59))" is 170.
Long Statement,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,LV_GetCount,The length of the statement  "            if (type == Keyword_Column || type.Length == 1 && type[0] == Keyword_Column[0] || type.Length == 3 && Keyword_Column.StartsWith(type))" is 134.
Long Statement,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,LV_ModifyCol,The length of the statement  "                        if (mode.StartsWith(Keyword_Icon' StringComparison.OrdinalIgnoreCase) && int.TryParse(mode.Substring(Keyword_Icon.Length)' out n))" is 130.
Long Statement,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Hotstring,The length of the statement  "            var key = new Keyboard.HotstringDefinition(Sequence' proc) { Name = Sequence' Enabled = true' EnabledOptions = options };" is 121.
Long Statement,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,LoopFile,The length of the statement  "            string[] list = Directory.GetFiles(pattern' string.Empty' recurse ? SearchOption.AllDirectories : SearchOption.TopDirectoryOnly);" is 129.
Long Statement,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Process,The length of the statement  "                        foreach (var mode in new[] { Keyword_Low' Keyword_BelowNormal' Keyword_Normal' Keyword_AboveNormal' Keyword_High' Keyword_Realtime })" is 133.
Long Statement,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FormatTime,The length of the statement  "                        int week = System.Threading.Thread.CurrentThread.CurrentCulture.Calendar.GetWeekOfYear(time' CalendarWeekRule.FirstDay' DayOfWeek.Monday);" is 138.
Long Statement,IronAHK.Rusty.Common,HotkeyDefinition,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\HotkeyDefinition.cs,Parse,The length of the statement  "                sequence = sequence.Replace(Core.Keyword_ModifierAltGr' new string(new[] { Core.Keyword_ModifierCtrl' Core.Keyword_ModifierAlt }));" is 131.
Long Statement,IronAHK.Rusty.Common,KeyboardHook,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\KeyboardHook.cs,Letter,The length of the statement  "                bool caps = (key & Keys.Shift) == Keys.Shift || pressed[Keys.ShiftKey] || pressed[Keys.LShiftKey] || pressed[Keys.RShiftKey];" is 125.
Long Statement,IronAHK.Rusty.Common,KeyboardHook,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\KeyboardHook.cs,KeyReceived,The length of the statement  "                        bool auto = (hotstring.EnabledOptions & HotstringDefinition.Options.AutoTrigger) == HotstringDefinition.Options.AutoTrigger;" is 124.
Long Statement,IronAHK.Rusty.Common,KeyboardHook,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\KeyboardHook.cs,KeyReceived,The length of the statement  "                        if ((hotstring.EnabledOptions & HotstringDefinition.Options.Backspace) == HotstringDefinition.Options.Backspace && length > 0)" is 126.
Long Statement,IronAHK.Rusty.Common,KeyboardHook,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\KeyboardHook.cs,KeyReceived,The length of the statement  "                            // UNDONE: hook on Windows captures triggering key and blocks it' but X11 allows it through and needs an extra backspace" is 120.
Long Statement,IronAHK.Rusty.Common,KeyboardHook,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\KeyboardHook.cs,HasModifiers,The length of the statement  "                                       { (hotkey.Keys & Keys.Alt) == Keys.Alt' pressed[Keys.Alt] || pressed[Keys.LMenu] || pressed[Keys.RMenu]' (hotkey.Keys & Keys.LMenu) == Keys.LMenu }'" is 148.
Long Statement,IronAHK.Rusty.Common,KeyboardHook,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\KeyboardHook.cs,HasModifiers,The length of the statement  "                                       { (hotkey.Keys & Keys.Control) == Keys.Control' pressed[Keys.Control] || pressed[Keys.LControlKey] || pressed[Keys.RControlKey]' (hotkey.Keys & Keys.ControlKey) == Keys.ControlKey }'" is 182.
Long Statement,IronAHK.Rusty.Common,KeyboardHook,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\KeyboardHook.cs,HasModifiers,The length of the statement  "                                       { (hotkey.Keys & Keys.Shift) == Keys.Shift' pressed[Keys.Shift] || pressed[Keys.LShiftKey] || pressed[Keys.RShiftKey]' (hotkey.Keys & Keys.ShiftKey) == Keys.ShiftKey }" is 167.
Long Statement,IronAHK.Rusty.Common,KeyboardHook,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\KeyboardHook.cs,HasConditions,The length of the statement  "                var compare = (hotstring.EnabledOptions & HotstringDefinition.Options.CaseSensitive) == HotstringDefinition.Options.CaseSensitive ?" is 131.
Long Statement,IronAHK.Rusty.Common,KeyParser,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\KeyParser.cs,ParseKey,The length of the statement  "                else if (name.StartsWith(Core.Keyword_HotkeySC' StringComparison.OrdinalIgnoreCase) && Environment.OSVersion.Platform == PlatformID.Win32NT)" is 140.
Long Statement,IronAHK.Rusty.Common,WindowManagerBase,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Window\WindowManagerBase.cs,FindWindow,The length of the statement  "                if (string.IsNullOrEmpty(title) && string.IsNullOrEmpty(text) && string.IsNullOrEmpty(excludeTitle) && string.IsNullOrEmpty(excludeText))" is 137.
Long Statement,IronAHK.Rusty.Common,SimpleJson,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\SimpleJson\SimpleJSON.cs,EncodeObject,The length of the statement  "            else if (node is byte || node is sbyte || node is short || node is ushort || node is int || node is uint || node is long || node is ulong || node is float || node is double || node is decimal)" is 192.
Long Statement,IronAHK.Rusty.Linux.Proxies,XDisplay,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Linux\Proxies\XDisplay.cs,XQueryTree,The length of the statement  "            Xlib.XQueryTree(_handle' windowToObtain.ID' out root_return' out parent_return' out children_return' out nchildren_return);" is 123.
Long Statement,IronAHK.Rusty.Windows,WindowManager,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Windows\WindowManager.cs,FindWindow,The length of the statement  "            if(!string.IsNullOrEmpty(criteria.ClassName) && !criteria.HasExcludes && !criteria.HasID && string.IsNullOrEmpty(criteria.Text))" is 128.
Long Statement,IronAHK.Rusty.Windows,KeyboardHook,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Windows\KeyboardHook.cs,RegisterHook,The length of the statement  "            hookId = WindowsAPI.SetWindowsHookEx(WH_KEYBOARD_LL' proc' WindowsAPI.GetModuleHandle(Process.GetCurrentProcess().MainModule.ModuleName)' 0);" is 141.
Long Statement,IronAHK.Rusty.Windows,WindowItem,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Windows\WindowItem.cs,SelectMenuItem,The length of the statement  "                        if(name.Equals(item' StringComparison.OrdinalIgnoreCase) || name.Replace("&"' string.Empty).Equals(item' StringComparison.OrdinalIgnoreCase)) {" is 143.
Complex Conditional,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ParseColor,The conditional expression  "name.Length > 1 && name[0] == '0' && (name[1] == 'x' || name[1] == 'X')"  is complex.
Complex Conditional,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiCreateWindow,The conditional expression  "name.Length < 3 && name.Length > 0 && int.TryParse(name' out n) && n > 0 && n < 99"  is complex.
Complex Conditional,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiApplyStyles,The conditional expression  "control is ComboBox || control is ListBox || control is HotkeyBox || control is TextBox"  is complex.
Complex Conditional,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlAsync,The conditional expression  "cmd.StartsWith(Keyword_Enable) && int.TryParse(cmd.Substring(Keyword_Enable.Length)' out n) && (n == 1 || n == 0)"  is complex.
Complex Conditional,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlAsync,The conditional expression  "cmd.StartsWith(Keyword_Disable) && int.TryParse(cmd.Substring(Keyword_Disable.Length)' out n) && (n == 1 || n == 0)"  is complex.
Complex Conditional,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,OnEditKeyPress,The conditional expression  "!(char.IsDigit(e.KeyChar) || char.IsNumber(e.KeyChar) || e.KeyChar == '.' || e.KeyChar == ''' || (int)e.KeyChar == 8 || (int)e.KeyChar == 58 || (int)e.KeyChar == 59)"  is complex.
Complex Conditional,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,LV_GetCount,The conditional expression  "type == Keyword_Column || type.Length == 1 && type[0] == Keyword_Column[0] || type.Length == 3 && Keyword_Column.StartsWith(type)"  is complex.
Complex Conditional,IronAHK.Rusty.Common,KeyboardHook,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\KeyboardHook.cs,KeyReceived,The conditional expression  "hotkey.Enabled && match && HasModifiers(hotkey) && up != down"  is complex.
Complex Conditional,IronAHK.Rusty.Common,KeyboardHook,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\KeyboardHook.cs,HasModifiers,The conditional expression  "(modifiers[i' 0] && !modifiers[i' 1]) || (modifiers[i' 1] && !modifiers[i' 0] && !modifiers[i' 2])"  is complex.
Complex Conditional,IronAHK.Rusty.Common,WindowManagerBase,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Window\WindowManagerBase.cs,FindWindow,The conditional expression  "string.IsNullOrEmpty(title) && string.IsNullOrEmpty(text) && string.IsNullOrEmpty(excludeTitle) && string.IsNullOrEmpty(excludeText)"  is complex.
Complex Conditional,IronAHK.Rusty.Common,SimpleJson,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\SimpleJson\SimpleJSON.cs,Scan,The conditional expression  "(anchor == ArrayClose && token == ArrayOpen) || (anchor == ObjectClose && token == ObjectOpen)"  is complex.
Complex Conditional,IronAHK.Rusty.Common,SimpleJson,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\SimpleJson\SimpleJSON.cs,EncodeObject,The conditional expression  "node is byte || node is sbyte || node is short || node is ushort || node is int || node is uint || node is long || node is ulong || node is float || node is double || node is decimal"  is complex.
Complex Conditional,IronAHK.Rusty.Windows,WindowManager,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Windows\WindowManager.cs,FindWindow,The conditional expression  "!string.IsNullOrEmpty(criteria.ClassName) && !criteria.HasExcludes && !criteria.HasID && string.IsNullOrEmpty(criteria.Text)"  is complex.
Virtual Method Call from Constructor,IronAHK.Rusty.Common,KeyboardHook,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\KeyboardHook.cs,KeyboardHook,The constructor "KeyboardHook" calls a virtual method "RegisterHook".
Empty Catch Block,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,SafeInvoke,The method has an empty catch block.
Empty Catch Block,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,DriveGet,The method has an empty catch block.
Empty Catch Block,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,OnExit,The method has an empty catch block.
Empty Catch Block,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlEdit,The method has an empty catch block.
Empty Catch Block,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlMove,The method has an empty catch block.
Empty Catch Block,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlMove,The method has an empty catch block.
Empty Catch Block,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlMove,The method has an empty catch block.
Empty Catch Block,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlAsync,The method has an empty catch block.
Empty Catch Block,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,SB_SetIcon,The method has an empty catch block.
Empty Catch Block,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Process,The method has an empty catch block.
Empty Catch Block,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Sort,The method has an empty catch block.
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ParseColor,The following statement contains a magic number: name.Length != 8 || name.Length != 6
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ParseColor,The following statement contains a magic number: name.Length != 8 || name.Length != 6
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ParseColor,The following statement contains a magic number: int n = i * 2;
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ParseColor,The following statement contains a magic number: return Color.FromArgb(argb[3]' argb[0]' argb[1]' argb[2]);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ParseColor,The following statement contains a magic number: return Color.FromArgb(argb[3]' argb[0]' argb[1]' argb[2]);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ParseFont,The following statement contains a magic number: switch (mode)                 {                     case Keyword_Bold: display |= FontStyle.Bold; break;                     case Keyword_Italic: display |= FontStyle.Italic; break;                     case Keyword_Strike: display |= FontStyle.Strikeout; break;                     case Keyword_Underline: display |= FontStyle.Underline; break;                     case Keyword_Norm: display = FontStyle.Regular; break;                      default:                         if (mode.Length < 2)                             break;                          string prop = mode.Substring(1).Trim();                         int n;                          switch (mode[0])                         {                             case 'c':                                 break;                              case 's':                                 if (int.TryParse(prop' out n))                                     size = n;                                 break;                              case 'w':                                 if (int.TryParse(prop' out n))                                 {                                     if (n <= 400)                                         display &= ~FontStyle.Bold;                                     else if (n >= 700)                                         display |= FontStyle.Bold;                                 }                                 break;                         }                         break;                 }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ParseFont,The following statement contains a magic number: switch (mode)                 {                     case Keyword_Bold: display |= FontStyle.Bold; break;                     case Keyword_Italic: display |= FontStyle.Italic; break;                     case Keyword_Strike: display |= FontStyle.Strikeout; break;                     case Keyword_Underline: display |= FontStyle.Underline; break;                     case Keyword_Norm: display = FontStyle.Regular; break;                      default:                         if (mode.Length < 2)                             break;                          string prop = mode.Substring(1).Trim();                         int n;                          switch (mode[0])                         {                             case 'c':                                 break;                              case 's':                                 if (int.TryParse(prop' out n))                                     size = n;                                 break;                              case 'w':                                 if (int.TryParse(prop' out n))                                 {                                     if (n <= 400)                                         display &= ~FontStyle.Bold;                                     else if (n >= 700)                                         display |= FontStyle.Bold;                                 }                                 break;                         }                         break;                 }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ParseFont,The following statement contains a magic number: switch (mode)                 {                     case Keyword_Bold: display |= FontStyle.Bold; break;                     case Keyword_Italic: display |= FontStyle.Italic; break;                     case Keyword_Strike: display |= FontStyle.Strikeout; break;                     case Keyword_Underline: display |= FontStyle.Underline; break;                     case Keyword_Norm: display = FontStyle.Regular; break;                      default:                         if (mode.Length < 2)                             break;                          string prop = mode.Substring(1).Trim();                         int n;                          switch (mode[0])                         {                             case 'c':                                 break;                              case 's':                                 if (int.TryParse(prop' out n))                                     size = n;                                 break;                              case 'w':                                 if (int.TryParse(prop' out n))                                 {                                     if (n <= 400)                                         display &= ~FontStyle.Bold;                                     else if (n >= 700)                                         display |= FontStyle.Bold;                                 }                                 break;                         }                         break;                 }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FromFileAttribs,The following statement contains a magic number: var str = new StringBuilder(9);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FromTime,The following statement contains a magic number: const int len = 2;
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FromTime,The following statement contains a magic number: var str = new StringBuilder(4 + 2 * 5);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FromTime,The following statement contains a magic number: var str = new StringBuilder(4 + 2 * 5);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FromTime,The following statement contains a magic number: var str = new StringBuilder(4 + 2 * 5);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FromTime,The following statement contains a magic number: str.Append(time.Year.ToString().PadLeft(len * 2' pad));
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ToDateTime,The following statement contains a magic number: time.Length > 7
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ToDateTime,The following statement contains a magic number: int[] t = { DateTime.Now.Year / 100' DateTime.Now.Year % 100' 1' 1' 0' 0' 0' 0 };
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ToDateTime,The following statement contains a magic number: int[] t = { DateTime.Now.Year / 100' DateTime.Now.Year % 100' 1' 1' 0' 0' 0' 0 };
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ToDateTime,The following statement contains a magic number: k + 1 >= time.Length || !int.TryParse(time.Substring(k' 2)' out t[i])
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ToDateTime,The following statement contains a magic number: return new DateTime(t[0] * 100 + t[1]' t[2]' t[3]' t[4]' t[5]' t[6]);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ToDateTime,The following statement contains a magic number: return new DateTime(t[0] * 100 + t[1]' t[2]' t[3]' t[4]' t[5]' t[6]);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ToDateTime,The following statement contains a magic number: return new DateTime(t[0] * 100 + t[1]' t[2]' t[3]' t[4]' t[5]' t[6]);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ToDateTime,The following statement contains a magic number: return new DateTime(t[0] * 100 + t[1]' t[2]' t[3]' t[4]' t[5]' t[6]);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ToDateTime,The following statement contains a magic number: return new DateTime(t[0] * 100 + t[1]' t[2]' t[3]' t[4]' t[5]' t[6]);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ToDateTime,The following statement contains a magic number: return new DateTime(t[0] * 100 + t[1]' t[2]' t[3]' t[4]' t[5]' t[6]);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,PathHead,The following statement contains a magic number: const int root = 2;
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,PathHead,The following statement contains a magic number: var parts = path.Substring(root).Split(new[] { Path.DirectorySeparatorChar }' 2);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,LV_RowOptions,The following statement contains a magic number: switch (opts[i].Trim().ToLowerInvariant())                 {                     case Keyword_Check: row.Checked = enable; break;                     case Keyword_Focus: row.Focused = enable; break;                     case Keyword_Icon: row.ImageIndex = int.Parse(mode.Substring(4)); break;                     case Keyword_Select: row.Selected = enable; break;                     case Keyword_Vis: row.EnsureVisible(); break;                 }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GetScreen,The following statement contains a magic number: switch (color)             {                 case 8:                 case 16:                     pFormat = PixelFormat.Format16bppRgb565;                     break;                 case 24: pFormat = PixelFormat.Format24bppRgb; break;                 case 32: pFormat = PixelFormat.Format32bppArgb; break;                 default: pFormat = PixelFormat.Format32bppArgb; break;             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GetScreen,The following statement contains a magic number: switch (color)             {                 case 8:                 case 16:                     pFormat = PixelFormat.Format16bppRgb565;                     break;                 case 24: pFormat = PixelFormat.Format24bppRgb; break;                 case 32: pFormat = PixelFormat.Format32bppArgb; break;                 default: pFormat = PixelFormat.Format32bppArgb; break;             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GetScreen,The following statement contains a magic number: switch (color)             {                 case 8:                 case 16:                     pFormat = PixelFormat.Format16bppRgb565;                     break;                 case 24: pFormat = PixelFormat.Format24bppRgb; break;                 case 32: pFormat = PixelFormat.Format32bppArgb; break;                 default: pFormat = PixelFormat.Format32bppArgb; break;             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GetScreen,The following statement contains a magic number: switch (color)             {                 case 8:                 case 16:                     pFormat = PixelFormat.Format16bppRgb565;                     break;                 case 24: pFormat = PixelFormat.Format24bppRgb; break;                 case 32: pFormat = PixelFormat.Format32bppArgb; break;                 default: pFormat = PixelFormat.Format32bppArgb; break;             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ToString,The following statement contains a magic number: var buf = new StringBuilder(array.Length * 2);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ToString,The following statement contains a magic number: buf.Append(b.ToString("x").PadLeft(2' '0'));
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Encrypt,The following statement contains a magic number: var k = new byte[size / 8];
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,SecureRandom,The following statement contains a magic number: var rnd = new byte[4 * 3 + 1];
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,SecureRandom,The following statement contains a magic number: var rnd = new byte[4 * 3 + 1];
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,SecureRandom,The following statement contains a magic number: var s = new int[3];
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,SecureRandom,The following statement contains a magic number: s[i] = BitConverter.ToInt32(rnd' i * 4);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,SecureRandom,The following statement contains a magic number: scale = (byte)(rnd[12] % 28);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,SecureRandom,The following statement contains a magic number: scale = (byte)(rnd[12] % 28);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,SecureRandom,The following statement contains a magic number: var val = new decimal(s[0]' s[1]' s[2]' false' scale);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,DriveSpaceFree,The following statement contains a magic number: result = Math.Floor((double)(new DriveInfo(path)).TotalFreeSpace / 1024 / 1024);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,DriveSpaceFree,The following statement contains a magic number: result = Math.Floor((double)(new DriveInfo(path)).TotalFreeSpace / 1024 / 1024);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FileGetSize,The following statement contains a magic number: const int scale = 1024;
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FileSetAttrib,The following statement contains a magic number: ToFiles(FilePattern' OperateOnFolders != 2' OperateOnFolders != 0' Recurse != 0)
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FileSetTime,The following statement contains a magic number: ToFiles(FilePattern' OperateOnFolders != 2' OperateOnFolders != 0' Recurse != 0)
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ToolTip,The following statement contains a magic number: persistentTooltip.Show(Text' tooltip' new Point((bounds.Left - bounds.Right) / 2' (bounds.Bottom - bounds.Top) / 2));
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ToolTip,The following statement contains a magic number: persistentTooltip.Show(Text' tooltip' new Point((bounds.Left - bounds.Right) / 2' (bounds.Bottom - bounds.Top) / 2));
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,TrayTip,The following statement contains a magic number: switch (Options)             {                 case 1: icon = ToolTipIcon.Info; break;                 case 2: icon = ToolTipIcon.Warning; break;                 case 3: icon = ToolTipIcon.Error; break;             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,TrayTip,The following statement contains a magic number: switch (Options)             {                 case 1: icon = ToolTipIcon.Info; break;                 case 2: icon = ToolTipIcon.Warning; break;                 case 3: icon = ToolTipIcon.Error; break;             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,TrayTip,The following statement contains a magic number: Tray.ShowBalloonTip(Seconds * 1000' Title' Text' icon);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FileSelectFile,The following statement contains a magic number: (result & 1) == 1 || (result & 2) == 2
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FileSelectFile,The following statement contains a magic number: (result & 1) == 1 || (result & 2) == 2
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FileSelectFile,The following statement contains a magic number: (result & 8) == 8
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FileSelectFile,The following statement contains a magic number: (result & 8) == 8
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FileSelectFile,The following statement contains a magic number: (result & 16) == 16
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FileSelectFile,The following statement contains a magic number: (result & 16) == 16
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FileSelectFile,The following statement contains a magic number: (result & 32) == 32
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FileSelectFile,The following statement contains a magic number: (result & 32) == 32
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FileSelectFolder,The following statement contains a magic number: StartingFolder.Length > 2 && StartingFolder[0] == '*'
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,MsgBox,The following statement contains a magic number: switch (Options & 0xf)             {                 case 0: buttons = MessageBoxButtons.OK; break;                 case 1: buttons = MessageBoxButtons.OKCancel; break;                 case 2: buttons = MessageBoxButtons.AbortRetryIgnore; break;                 case 3: buttons = MessageBoxButtons.YesNoCancel; break;                 case 4: buttons = MessageBoxButtons.YesNo; break;                 case 5: buttons = MessageBoxButtons.RetryCancel; break;                 //case 6: /* Cancel/Try Again/Continue */ ; break;                 //case 7: /* Adds a Help button */ ; break; // help done differently             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,MsgBox,The following statement contains a magic number: switch (Options & 0xf)             {                 case 0: buttons = MessageBoxButtons.OK; break;                 case 1: buttons = MessageBoxButtons.OKCancel; break;                 case 2: buttons = MessageBoxButtons.AbortRetryIgnore; break;                 case 3: buttons = MessageBoxButtons.YesNoCancel; break;                 case 4: buttons = MessageBoxButtons.YesNo; break;                 case 5: buttons = MessageBoxButtons.RetryCancel; break;                 //case 6: /* Cancel/Try Again/Continue */ ; break;                 //case 7: /* Adds a Help button */ ; break; // help done differently             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,MsgBox,The following statement contains a magic number: switch (Options & 0xf)             {                 case 0: buttons = MessageBoxButtons.OK; break;                 case 1: buttons = MessageBoxButtons.OKCancel; break;                 case 2: buttons = MessageBoxButtons.AbortRetryIgnore; break;                 case 3: buttons = MessageBoxButtons.YesNoCancel; break;                 case 4: buttons = MessageBoxButtons.YesNo; break;                 case 5: buttons = MessageBoxButtons.RetryCancel; break;                 //case 6: /* Cancel/Try Again/Continue */ ; break;                 //case 7: /* Adds a Help button */ ; break; // help done differently             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,MsgBox,The following statement contains a magic number: switch (Options & 0xf)             {                 case 0: buttons = MessageBoxButtons.OK; break;                 case 1: buttons = MessageBoxButtons.OKCancel; break;                 case 2: buttons = MessageBoxButtons.AbortRetryIgnore; break;                 case 3: buttons = MessageBoxButtons.YesNoCancel; break;                 case 4: buttons = MessageBoxButtons.YesNo; break;                 case 5: buttons = MessageBoxButtons.RetryCancel; break;                 //case 6: /* Cancel/Try Again/Continue */ ; break;                 //case 7: /* Adds a Help button */ ; break; // help done differently             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,MsgBox,The following statement contains a magic number: switch (Options & 0xf0)             {                 case 16: icon = MessageBoxIcon.Hand; break;                 case 32: icon = MessageBoxIcon.Question; break;                 case 48: icon = MessageBoxIcon.Exclamation; break;                 case 64: icon = MessageBoxIcon.Asterisk; break;             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,MsgBox,The following statement contains a magic number: switch (Options & 0xf0)             {                 case 16: icon = MessageBoxIcon.Hand; break;                 case 32: icon = MessageBoxIcon.Question; break;                 case 48: icon = MessageBoxIcon.Exclamation; break;                 case 64: icon = MessageBoxIcon.Asterisk; break;             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,MsgBox,The following statement contains a magic number: switch (Options & 0xf0)             {                 case 16: icon = MessageBoxIcon.Hand; break;                 case 32: icon = MessageBoxIcon.Question; break;                 case 48: icon = MessageBoxIcon.Exclamation; break;                 case 64: icon = MessageBoxIcon.Asterisk; break;             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,MsgBox,The following statement contains a magic number: switch (Options & 0xf0)             {                 case 16: icon = MessageBoxIcon.Hand; break;                 case 32: icon = MessageBoxIcon.Question; break;                 case 48: icon = MessageBoxIcon.Exclamation; break;                 case 64: icon = MessageBoxIcon.Asterisk; break;             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,MsgBox,The following statement contains a magic number: switch (Options & 0xf00)             {                 case 256: defaultbutton = MessageBoxDefaultButton.Button2; break;                 case 512: defaultbutton = MessageBoxDefaultButton.Button3; break;             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,MsgBox,The following statement contains a magic number: switch (Options & 0xf00)             {                 case 256: defaultbutton = MessageBoxDefaultButton.Button2; break;                 case 512: defaultbutton = MessageBoxDefaultButton.Button3; break;             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,MsgBox,The following statement contains a magic number: switch (Options & 0xf0000)             {                 case 131072: options = MessageBoxOptions.DefaultDesktopOnly; break;                 case 262144: options = MessageBoxOptions.ServiceNotification; break;                 case 524288: options = MessageBoxOptions.RightAlign; break;                 case 1048576: options = MessageBoxOptions.RtlReading; break;             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,MsgBox,The following statement contains a magic number: switch (Options & 0xf0000)             {                 case 131072: options = MessageBoxOptions.DefaultDesktopOnly; break;                 case 262144: options = MessageBoxOptions.ServiceNotification; break;                 case 524288: options = MessageBoxOptions.RightAlign; break;                 case 1048576: options = MessageBoxOptions.RtlReading; break;             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,MsgBox,The following statement contains a magic number: switch (Options & 0xf0000)             {                 case 131072: options = MessageBoxOptions.DefaultDesktopOnly; break;                 case 262144: options = MessageBoxOptions.ServiceNotification; break;                 case 524288: options = MessageBoxOptions.RightAlign; break;                 case 1048576: options = MessageBoxOptions.RtlReading; break;             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,MsgBox,The following statement contains a magic number: switch (Options & 0xf0000)             {                 case 131072: options = MessageBoxOptions.DefaultDesktopOnly; break;                 case 262144: options = MessageBoxOptions.ServiceNotification; break;                 case 524288: options = MessageBoxOptions.RightAlign; break;                 case 1048576: options = MessageBoxOptions.RtlReading; break;             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,MsgBox,The following statement contains a magic number: bool help = (Options & 0xf000) == 16384;
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,DllCall,The following statement contains a magic number: var types = new Type[parameters.Length / 2];
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,DllCall,The following statement contains a magic number: switch (name[name.Length - 1])                 {                     case '*':                     case 'P':                     case 'p':                         name = name.Substring(0' name.Length - 1).Trim();                         ErrorLevel = -6;                         // TODO: unmanaged pointers for pinvokes                         return null;                 }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,DllCall,The following statement contains a magic number: switch (name)                 {                     case "str": type = typeof(string); break;                     case "int64": type = typeof(long); break;                     case "uint64": type = typeof(ulong); break;                     case "int": type = typeof(int); break;                     case "uint": type = typeof(uint); break;                     case "short": type = typeof(short); break;                     case "ushort": type = typeof(ushort); break;                     case "char": type = typeof(char); break;                     case "uchar": type = typeof(char); break;                     case "float": type = typeof(float); break;                     case "double": type = typeof(double); break;                      default:                         ErrorLevel = 2;                         return null;                 }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,DllCall,The following statement contains a magic number: int n = i / 2;
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,DllCall,The following statement contains a magic number: ErrorLevel = -4;
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,DllCall,The following statement contains a magic number: ErrorLevel = -4;
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,VarSetCapacity,The following statement contains a magic number: pad > -1 && pad < 256
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ClipWait,The following statement contains a magic number: int frequency = 100' time = (int)(timeout * 1000);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ClipWait,The following statement contains a magic number: int frequency = 100' time = (int)(timeout * 1000);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,SetTimer,The following statement contains a magic number: int interval = 250;
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,SetTimer,The following statement contains a magic number: ErrorLevel = 2;
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,SetTimer,The following statement contains a magic number: priority > -1 && priority < 5
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Sleep,The following statement contains a magic number: System.Threading.Thread.Sleep(10);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Gui,The following statement contains a magic number: switch (Command.ToLowerInvariant())             {                 #region Add                  case Keyword_Add:                     {                         Control control = null;                         GuiControlEdit(ref control' guis[id]' Param2' Param3' Param4);                         GuiAssociatedInfo(control).LastControl = control;                     }                     break;                  #endregion                  #region Show                  case Keyword_Show:                     {                         bool center = false' cX = false' cY = false' auto = false' min = false' max = false' restore = false' hide = false;                         int?[] pos = { null' null' null' null };                          foreach (var option in ParseOptions(Param2))                         {                             string mode = option.ToLowerInvariant();                             int select = -1;                              switch (mode[0])                             {                                 case 'w': select = 0; break;                                 case 'h': select = 1; break;                                 case 'x': select = 2; break;                                 case 'y': select = 3; break;                             }                              if (select == -1)                             {                                 switch (mode)                                 {                                     case Keyword_Center: center = true; break;                                     case Keyword_AutoSize: auto = true; break;                                     case Keyword_Maximize: max = true; break;                                     case Keyword_Minimize: min = true; break;                                     case Keyword_Restore: restore = true; break;                                     case Keyword_NoActivate: break;                                     case Keyword_NA: break;                                     case Keyword_Hide: hide = true; break;                                 }                             }                             else                             {                                 mode = mode.Substring(1);                                 int n;                                  if (mode.Equals(Keyword_Center' StringComparison.OrdinalIgnoreCase))                                 {                                     if (select == 2)                                         cX = true;                                     else                                         cY = true;                                 }                                 else if (mode.Length != 0 && int.TryParse(mode' out n))                                     pos[select] = n;                             }                         }                          if (auto || pos[0] == null && pos[1] == null)                         {                             guis[id].Size = guis[id].PreferredSize;                              var status = GuiAssociatedInfo(guis[id]).StatusBar;                             int d = status == null ? 0 : status.Height;                              if (d > 0)                                 guis[id].ClientSize = new Size(guis[id].ClientSize.Width' guis[id].ClientSize.Height + d);                         }                         else                         {                             var size = guis[id].PreferredSize;                              if (pos[0] != null)                                 size.Width = (int)pos[0];                             if (pos[1] != null)                                 size.Height = (int)pos[1];                              guis[id].ClientSize = size;                         }                          var location = new Point();                          if (pos[2] != null)                             location.X = (int)pos[2];                         if (pos[3] != null)                             location.Y = (int)pos[3];                          var screen = Screen.PrimaryScreen.Bounds;                          if (location == null)                             center = true;                          if (center)                             cX = cY = true;                          if (cX)                             location.X = (screen.Width - guis[id].Size.Width) / 2 + screen.X;                         if (cY)                             location.Y = (screen.Height - guis[id].Size.Height) / 2 + screen.Y;                          guis[id].StartPosition = FormStartPosition.Manual;                         guis[id].Location = location;                          guis[id].Text = Param3;                          if (hide)                             guis[id].Hide();                         else                             guis[id].Show();                          guis[id].ResumeLayout(true);                          if (min)                             guis[id].WindowState = FormWindowState.Minimized;                         else if (max)                             guis[id].WindowState = FormWindowState.Maximized;                         else if (restore)                             guis[id].WindowState = FormWindowState.Normal;                                              }                     break;                  #endregion                  #region Misc.                  case Keyword_Submit:                     {                         if (!Keyword_NoHide.Equals(Param2' StringComparison.OrdinalIgnoreCase))                             guis[id].Hide();                          // TODO: way to return multipart variable (A_LastResult?) for Gui'Submit and GuiControlGet''Pos                     }                     break;                  case Keyword_Cancel:                 case Keyword_Hide:                     guis[id].Hide();                     break;                  case Keyword_Destroy:                     guis[id].Hide();                     guis[id].Dispose();                     guis.Remove(id);                     break;                  case Keyword_Font:                     GuiAssociatedInfo(guis[id]).Font = string.IsNullOrEmpty(Param2) && string.IsNullOrEmpty(Param3) ?                         guis[id].Font : ParseFont(GuiAssociatedInfo(guis[id]).Font' Param2' Param3);                     break;                  case Keyword_Color:                     Color c;                     if(Keyword_Default.Equals(Param2' StringComparison.OrdinalIgnoreCase))                         c = Color.LightGray; //TODO: Use correctly Control color' BUT NOT Transparent.                     else                         c = ParseColor(Param2);                     if(c.A == 0xFF)                         guis[id].BackColor = c;                     break;                  case Keyword_Margin:                     {                         int d' x = guis[id].Margin.Left' y = guis[id].Margin.Top;                          if (int.TryParse(Param2' out d))                             x = d;                          if (int.TryParse(Param3' out d))                             y = d;                          guis[id].Margin = new Padding(x' y' x' y);                     }                     break;                  case Keyword_Menu:                     break;                  case Keyword_Minimize:                     guis[id].WindowState = FormWindowState.Minimized;                     break;                  case Keyword_Maximize:                     guis[id].WindowState = FormWindowState.Maximized;                     break;                  case Keyword_Restore:                     guis[id].WindowState = FormWindowState.Normal;                     break;                  case Keyword_Flash:                     if (Environment.OSVersion.Platform == PlatformID.Win32NT)                         WindowsAPI.FlashWindow(guis[id].Handle' OnOff(Param2) ?? true);                     break;                  case Keyword_Default:                     DefaultGuiId = id;                     break;                  case Keyword_TreeView:                     {                         var tree = GuiFindControl(Param2' guis[id]);                          if (tree == null || !typeof(TreeView).IsAssignableFrom(tree.GetType()))                             DefaultTreeView = null;                         else                             DefaultTreeView = (TreeView)tree;                     }                     break;                  case Keyword_ListView:                     {                         var list = GuiFindControl(Param2' guis[id]);                          if (list == null || !typeof(ListView).IsAssignableFrom(list.GetType()))                             DefaultListView = null;                         else                             DefaultListView = (ListView)list;                     }                     break;                  #endregion                  #region Options                  default:                     {                         foreach (var option in ParseOptions(Command))                         {                             bool on = option[0] != '-';                             string mode = option;                              if (mode[0] == '+' || mode[0] == '-')                                 mode = mode.Substring(1);                              if (mode.Length == 0)                                 continue;                              mode = mode.ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_AlwaysOnTop: guis[id].TopMost = on; break;                                 case Keyword_Border: break;                                 case Keyword_Caption: break;                                 case Keyword_Disabled: guis[id].Enabled = !on; break;                                 case Keyword_LastFound: lastFoundForm = guis[id].Handle.ToInt64(); break;                                 case Keyword_LastFoundExist: lastFoundForm = guis[id].Handle.ToInt64(); break;                                 case Keyword_MaximizeBox: guis[id].MaximizeBox = on; break;                                 case Keyword_MinimizeBox: guis[id].MinimizeBox = on; break;                                 case Keyword_OwnDialogs: dialogOwner = guis[id]; break;                                 case Keyword_Owner: break;                                 case Keyword_Resize: break;                                 case Keyword_SysMenu: guis[id].ControlBox = on; break;                                 case Keyword_Theme: Application.EnableVisualStyles(); break;                                 case Keyword_ToolWindow: break;                                 case Keyword_Redraw: guis[id].Refresh(); break;                                 case Keyword_Cursor:                                     {                                         switch (Param2.ToLowerInvariant())                                         {                                             case "cross": guis[id].Cursor = Cursors.Cross; break;                                             case "hand": guis[id].Cursor = Cursors.Hand; break;                                             case "help": guis[id].Cursor = Cursors.Help; break;                                             case "beam": guis[id].Cursor = Cursors.IBeam; break;                                             case "no": guis[id].Cursor = Cursors.No; break;                                             case "wait": guis[id].Cursor = Cursors.WaitCursor; break;                                             case "nomove": guis[id].Cursor = Cursors.NoMove2D; break;                                             case "size": guis[id].Cursor = Cursors.SizeAll; break;                                             case "split":                                                 {                                                     if (Param3.ToLowerInvariant() == Keyword_Vertical)                                                         guis[id].Cursor = Cursors.VSplit;                                                     else                                                         guis[id].Cursor = Cursors.HSplit;                                                     break;                                                 }                                             case "pan":                                                 {                                                     switch (Param3.ToLowerInvariant())                                                     {                                                         case "east":                                                         case "e": guis[id].Cursor = Cursors.PanEast; break;                                                         case "south":                                                         case "s": guis[id].Cursor = Cursors.PanSouth; break;                                                         case "west":                                                         case "w": guis[id].Cursor = Cursors.PanWest; break;                                                         default:                                                         case "north":                                                         case "n": guis[id].Cursor = Cursors.PanNorth; break;                                                     }                                                     break;                                                 }                                             case "arrow":                                             default: guis[id].Cursor = Cursors.Arrow; break;                                         }                                         break;                                     }                                 case Keyword_Icon:                                     {                                         if (Param2 != string.Empty)                                         {                                             if (File.Exists(Param2))                                                 if (Path.GetExtension(Param2.ToLowerInvariant())==".ico")                                                     guis[id].Icon = new Icon(Param2);                                         }                                         guis[id].ShowIcon = on;                                         break;                                     }                                 case Keyword_TaskBar:                                     {                                         guis[id].ShowInTaskbar = on;                                         break;                                     }                                 case Keyword_BackGroundImage:                                     {                                         if (on)                                         {                                             if (File.Exists(Param2))                                             {                                                 guis[id].BackgroundImage = new Bitmap(Param2);                                                 switch (Param3.ToLowerInvariant())                                                 {                                                     case Keyword_None: guis[id].BackgroundImageLayout = ImageLayout.None; break;                                                     case Keyword_Tile: guis[id].BackgroundImageLayout = ImageLayout.Tile; break;                                                     case Keyword_Center: guis[id].BackgroundImageLayout = ImageLayout.Center; break;                                                     case Keyword_Zoom: guis[id].BackgroundImageLayout = ImageLayout.Zoom; break;                                                     case Keyword_Stretch:                                                     default: guis[id].BackgroundImageLayout = ImageLayout.Stretch; break;                                                 }                                             }                                                                                      }                                         else                                         {                                             guis[id].BackgroundImage = null;                                         }                                         break;                                     }                                 default:                                     string arg;                                     string[] parts;                                     int n;                                     Size size;                                     if (mode.StartsWith(Keyword_Delimiter))                                     {                                         arg = mode.Substring(Keyword_Delimiter.Length);                                         if (arg.Length > 0)                                             GuiAssociatedInfo(guis[id]).Delimiter = arg[0];                                     }                                     else if (mode.StartsWith(Keyword_Label))                                     {                                         arg = mode.Substring(Keyword_Label.Length);                                         if (arg.Length > 0)                                             guis[id].Name = arg;                                     }                                     else if (mode.StartsWith(Keyword_MinSize))                                     {                                         arg = mode.Substring(Keyword_MinSize.Length);                                         parts = arg.Split(new[] { "x"' "X"' "*" }' 2' StringSplitOptions.None);                                         size = guis[id].MinimumSize;                                          if (parts.Length > 0 && int.TryParse(parts[0]' out n))                                             size.Width = n;                                         if (parts.Length > 1 && int.TryParse(parts[1]' out n))                                             size.Height = n;                                          guis[id].MinimumSize = size;                                     }                                     else if (mode.StartsWith(Keyword_MaxSize))                                     {                                         arg = mode.Substring(Keyword_MaxSize.Length);                                         parts = arg.Split(new[] { "x"' "X"' "*" }' 2' StringSplitOptions.None);                                         size = guis[id].MaximumSize;                                          if (parts.Length > 0 && int.TryParse(parts[0]' out n))                                             size.Width = n;                                         if (parts.Length > 1 && int.TryParse(parts[1]' out n))                                             size.Height = n;                                          guis[id].MaximumSize = size;                                     }                                     break;                             }                         }                     }                     break;                  #endregion             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Gui,The following statement contains a magic number: switch (Command.ToLowerInvariant())             {                 #region Add                  case Keyword_Add:                     {                         Control control = null;                         GuiControlEdit(ref control' guis[id]' Param2' Param3' Param4);                         GuiAssociatedInfo(control).LastControl = control;                     }                     break;                  #endregion                  #region Show                  case Keyword_Show:                     {                         bool center = false' cX = false' cY = false' auto = false' min = false' max = false' restore = false' hide = false;                         int?[] pos = { null' null' null' null };                          foreach (var option in ParseOptions(Param2))                         {                             string mode = option.ToLowerInvariant();                             int select = -1;                              switch (mode[0])                             {                                 case 'w': select = 0; break;                                 case 'h': select = 1; break;                                 case 'x': select = 2; break;                                 case 'y': select = 3; break;                             }                              if (select == -1)                             {                                 switch (mode)                                 {                                     case Keyword_Center: center = true; break;                                     case Keyword_AutoSize: auto = true; break;                                     case Keyword_Maximize: max = true; break;                                     case Keyword_Minimize: min = true; break;                                     case Keyword_Restore: restore = true; break;                                     case Keyword_NoActivate: break;                                     case Keyword_NA: break;                                     case Keyword_Hide: hide = true; break;                                 }                             }                             else                             {                                 mode = mode.Substring(1);                                 int n;                                  if (mode.Equals(Keyword_Center' StringComparison.OrdinalIgnoreCase))                                 {                                     if (select == 2)                                         cX = true;                                     else                                         cY = true;                                 }                                 else if (mode.Length != 0 && int.TryParse(mode' out n))                                     pos[select] = n;                             }                         }                          if (auto || pos[0] == null && pos[1] == null)                         {                             guis[id].Size = guis[id].PreferredSize;                              var status = GuiAssociatedInfo(guis[id]).StatusBar;                             int d = status == null ? 0 : status.Height;                              if (d > 0)                                 guis[id].ClientSize = new Size(guis[id].ClientSize.Width' guis[id].ClientSize.Height + d);                         }                         else                         {                             var size = guis[id].PreferredSize;                              if (pos[0] != null)                                 size.Width = (int)pos[0];                             if (pos[1] != null)                                 size.Height = (int)pos[1];                              guis[id].ClientSize = size;                         }                          var location = new Point();                          if (pos[2] != null)                             location.X = (int)pos[2];                         if (pos[3] != null)                             location.Y = (int)pos[3];                          var screen = Screen.PrimaryScreen.Bounds;                          if (location == null)                             center = true;                          if (center)                             cX = cY = true;                          if (cX)                             location.X = (screen.Width - guis[id].Size.Width) / 2 + screen.X;                         if (cY)                             location.Y = (screen.Height - guis[id].Size.Height) / 2 + screen.Y;                          guis[id].StartPosition = FormStartPosition.Manual;                         guis[id].Location = location;                          guis[id].Text = Param3;                          if (hide)                             guis[id].Hide();                         else                             guis[id].Show();                          guis[id].ResumeLayout(true);                          if (min)                             guis[id].WindowState = FormWindowState.Minimized;                         else if (max)                             guis[id].WindowState = FormWindowState.Maximized;                         else if (restore)                             guis[id].WindowState = FormWindowState.Normal;                                              }                     break;                  #endregion                  #region Misc.                  case Keyword_Submit:                     {                         if (!Keyword_NoHide.Equals(Param2' StringComparison.OrdinalIgnoreCase))                             guis[id].Hide();                          // TODO: way to return multipart variable (A_LastResult?) for Gui'Submit and GuiControlGet''Pos                     }                     break;                  case Keyword_Cancel:                 case Keyword_Hide:                     guis[id].Hide();                     break;                  case Keyword_Destroy:                     guis[id].Hide();                     guis[id].Dispose();                     guis.Remove(id);                     break;                  case Keyword_Font:                     GuiAssociatedInfo(guis[id]).Font = string.IsNullOrEmpty(Param2) && string.IsNullOrEmpty(Param3) ?                         guis[id].Font : ParseFont(GuiAssociatedInfo(guis[id]).Font' Param2' Param3);                     break;                  case Keyword_Color:                     Color c;                     if(Keyword_Default.Equals(Param2' StringComparison.OrdinalIgnoreCase))                         c = Color.LightGray; //TODO: Use correctly Control color' BUT NOT Transparent.                     else                         c = ParseColor(Param2);                     if(c.A == 0xFF)                         guis[id].BackColor = c;                     break;                  case Keyword_Margin:                     {                         int d' x = guis[id].Margin.Left' y = guis[id].Margin.Top;                          if (int.TryParse(Param2' out d))                             x = d;                          if (int.TryParse(Param3' out d))                             y = d;                          guis[id].Margin = new Padding(x' y' x' y);                     }                     break;                  case Keyword_Menu:                     break;                  case Keyword_Minimize:                     guis[id].WindowState = FormWindowState.Minimized;                     break;                  case Keyword_Maximize:                     guis[id].WindowState = FormWindowState.Maximized;                     break;                  case Keyword_Restore:                     guis[id].WindowState = FormWindowState.Normal;                     break;                  case Keyword_Flash:                     if (Environment.OSVersion.Platform == PlatformID.Win32NT)                         WindowsAPI.FlashWindow(guis[id].Handle' OnOff(Param2) ?? true);                     break;                  case Keyword_Default:                     DefaultGuiId = id;                     break;                  case Keyword_TreeView:                     {                         var tree = GuiFindControl(Param2' guis[id]);                          if (tree == null || !typeof(TreeView).IsAssignableFrom(tree.GetType()))                             DefaultTreeView = null;                         else                             DefaultTreeView = (TreeView)tree;                     }                     break;                  case Keyword_ListView:                     {                         var list = GuiFindControl(Param2' guis[id]);                          if (list == null || !typeof(ListView).IsAssignableFrom(list.GetType()))                             DefaultListView = null;                         else                             DefaultListView = (ListView)list;                     }                     break;                  #endregion                  #region Options                  default:                     {                         foreach (var option in ParseOptions(Command))                         {                             bool on = option[0] != '-';                             string mode = option;                              if (mode[0] == '+' || mode[0] == '-')                                 mode = mode.Substring(1);                              if (mode.Length == 0)                                 continue;                              mode = mode.ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_AlwaysOnTop: guis[id].TopMost = on; break;                                 case Keyword_Border: break;                                 case Keyword_Caption: break;                                 case Keyword_Disabled: guis[id].Enabled = !on; break;                                 case Keyword_LastFound: lastFoundForm = guis[id].Handle.ToInt64(); break;                                 case Keyword_LastFoundExist: lastFoundForm = guis[id].Handle.ToInt64(); break;                                 case Keyword_MaximizeBox: guis[id].MaximizeBox = on; break;                                 case Keyword_MinimizeBox: guis[id].MinimizeBox = on; break;                                 case Keyword_OwnDialogs: dialogOwner = guis[id]; break;                                 case Keyword_Owner: break;                                 case Keyword_Resize: break;                                 case Keyword_SysMenu: guis[id].ControlBox = on; break;                                 case Keyword_Theme: Application.EnableVisualStyles(); break;                                 case Keyword_ToolWindow: break;                                 case Keyword_Redraw: guis[id].Refresh(); break;                                 case Keyword_Cursor:                                     {                                         switch (Param2.ToLowerInvariant())                                         {                                             case "cross": guis[id].Cursor = Cursors.Cross; break;                                             case "hand": guis[id].Cursor = Cursors.Hand; break;                                             case "help": guis[id].Cursor = Cursors.Help; break;                                             case "beam": guis[id].Cursor = Cursors.IBeam; break;                                             case "no": guis[id].Cursor = Cursors.No; break;                                             case "wait": guis[id].Cursor = Cursors.WaitCursor; break;                                             case "nomove": guis[id].Cursor = Cursors.NoMove2D; break;                                             case "size": guis[id].Cursor = Cursors.SizeAll; break;                                             case "split":                                                 {                                                     if (Param3.ToLowerInvariant() == Keyword_Vertical)                                                         guis[id].Cursor = Cursors.VSplit;                                                     else                                                         guis[id].Cursor = Cursors.HSplit;                                                     break;                                                 }                                             case "pan":                                                 {                                                     switch (Param3.ToLowerInvariant())                                                     {                                                         case "east":                                                         case "e": guis[id].Cursor = Cursors.PanEast; break;                                                         case "south":                                                         case "s": guis[id].Cursor = Cursors.PanSouth; break;                                                         case "west":                                                         case "w": guis[id].Cursor = Cursors.PanWest; break;                                                         default:                                                         case "north":                                                         case "n": guis[id].Cursor = Cursors.PanNorth; break;                                                     }                                                     break;                                                 }                                             case "arrow":                                             default: guis[id].Cursor = Cursors.Arrow; break;                                         }                                         break;                                     }                                 case Keyword_Icon:                                     {                                         if (Param2 != string.Empty)                                         {                                             if (File.Exists(Param2))                                                 if (Path.GetExtension(Param2.ToLowerInvariant())==".ico")                                                     guis[id].Icon = new Icon(Param2);                                         }                                         guis[id].ShowIcon = on;                                         break;                                     }                                 case Keyword_TaskBar:                                     {                                         guis[id].ShowInTaskbar = on;                                         break;                                     }                                 case Keyword_BackGroundImage:                                     {                                         if (on)                                         {                                             if (File.Exists(Param2))                                             {                                                 guis[id].BackgroundImage = new Bitmap(Param2);                                                 switch (Param3.ToLowerInvariant())                                                 {                                                     case Keyword_None: guis[id].BackgroundImageLayout = ImageLayout.None; break;                                                     case Keyword_Tile: guis[id].BackgroundImageLayout = ImageLayout.Tile; break;                                                     case Keyword_Center: guis[id].BackgroundImageLayout = ImageLayout.Center; break;                                                     case Keyword_Zoom: guis[id].BackgroundImageLayout = ImageLayout.Zoom; break;                                                     case Keyword_Stretch:                                                     default: guis[id].BackgroundImageLayout = ImageLayout.Stretch; break;                                                 }                                             }                                                                                      }                                         else                                         {                                             guis[id].BackgroundImage = null;                                         }                                         break;                                     }                                 default:                                     string arg;                                     string[] parts;                                     int n;                                     Size size;                                     if (mode.StartsWith(Keyword_Delimiter))                                     {                                         arg = mode.Substring(Keyword_Delimiter.Length);                                         if (arg.Length > 0)                                             GuiAssociatedInfo(guis[id]).Delimiter = arg[0];                                     }                                     else if (mode.StartsWith(Keyword_Label))                                     {                                         arg = mode.Substring(Keyword_Label.Length);                                         if (arg.Length > 0)                                             guis[id].Name = arg;                                     }                                     else if (mode.StartsWith(Keyword_MinSize))                                     {                                         arg = mode.Substring(Keyword_MinSize.Length);                                         parts = arg.Split(new[] { "x"' "X"' "*" }' 2' StringSplitOptions.None);                                         size = guis[id].MinimumSize;                                          if (parts.Length > 0 && int.TryParse(parts[0]' out n))                                             size.Width = n;                                         if (parts.Length > 1 && int.TryParse(parts[1]' out n))                                             size.Height = n;                                          guis[id].MinimumSize = size;                                     }                                     else if (mode.StartsWith(Keyword_MaxSize))                                     {                                         arg = mode.Substring(Keyword_MaxSize.Length);                                         parts = arg.Split(new[] { "x"' "X"' "*" }' 2' StringSplitOptions.None);                                         size = guis[id].MaximumSize;                                          if (parts.Length > 0 && int.TryParse(parts[0]' out n))                                             size.Width = n;                                         if (parts.Length > 1 && int.TryParse(parts[1]' out n))                                             size.Height = n;                                          guis[id].MaximumSize = size;                                     }                                     break;                             }                         }                     }                     break;                  #endregion             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Gui,The following statement contains a magic number: switch (Command.ToLowerInvariant())             {                 #region Add                  case Keyword_Add:                     {                         Control control = null;                         GuiControlEdit(ref control' guis[id]' Param2' Param3' Param4);                         GuiAssociatedInfo(control).LastControl = control;                     }                     break;                  #endregion                  #region Show                  case Keyword_Show:                     {                         bool center = false' cX = false' cY = false' auto = false' min = false' max = false' restore = false' hide = false;                         int?[] pos = { null' null' null' null };                          foreach (var option in ParseOptions(Param2))                         {                             string mode = option.ToLowerInvariant();                             int select = -1;                              switch (mode[0])                             {                                 case 'w': select = 0; break;                                 case 'h': select = 1; break;                                 case 'x': select = 2; break;                                 case 'y': select = 3; break;                             }                              if (select == -1)                             {                                 switch (mode)                                 {                                     case Keyword_Center: center = true; break;                                     case Keyword_AutoSize: auto = true; break;                                     case Keyword_Maximize: max = true; break;                                     case Keyword_Minimize: min = true; break;                                     case Keyword_Restore: restore = true; break;                                     case Keyword_NoActivate: break;                                     case Keyword_NA: break;                                     case Keyword_Hide: hide = true; break;                                 }                             }                             else                             {                                 mode = mode.Substring(1);                                 int n;                                  if (mode.Equals(Keyword_Center' StringComparison.OrdinalIgnoreCase))                                 {                                     if (select == 2)                                         cX = true;                                     else                                         cY = true;                                 }                                 else if (mode.Length != 0 && int.TryParse(mode' out n))                                     pos[select] = n;                             }                         }                          if (auto || pos[0] == null && pos[1] == null)                         {                             guis[id].Size = guis[id].PreferredSize;                              var status = GuiAssociatedInfo(guis[id]).StatusBar;                             int d = status == null ? 0 : status.Height;                              if (d > 0)                                 guis[id].ClientSize = new Size(guis[id].ClientSize.Width' guis[id].ClientSize.Height + d);                         }                         else                         {                             var size = guis[id].PreferredSize;                              if (pos[0] != null)                                 size.Width = (int)pos[0];                             if (pos[1] != null)                                 size.Height = (int)pos[1];                              guis[id].ClientSize = size;                         }                          var location = new Point();                          if (pos[2] != null)                             location.X = (int)pos[2];                         if (pos[3] != null)                             location.Y = (int)pos[3];                          var screen = Screen.PrimaryScreen.Bounds;                          if (location == null)                             center = true;                          if (center)                             cX = cY = true;                          if (cX)                             location.X = (screen.Width - guis[id].Size.Width) / 2 + screen.X;                         if (cY)                             location.Y = (screen.Height - guis[id].Size.Height) / 2 + screen.Y;                          guis[id].StartPosition = FormStartPosition.Manual;                         guis[id].Location = location;                          guis[id].Text = Param3;                          if (hide)                             guis[id].Hide();                         else                             guis[id].Show();                          guis[id].ResumeLayout(true);                          if (min)                             guis[id].WindowState = FormWindowState.Minimized;                         else if (max)                             guis[id].WindowState = FormWindowState.Maximized;                         else if (restore)                             guis[id].WindowState = FormWindowState.Normal;                                              }                     break;                  #endregion                  #region Misc.                  case Keyword_Submit:                     {                         if (!Keyword_NoHide.Equals(Param2' StringComparison.OrdinalIgnoreCase))                             guis[id].Hide();                          // TODO: way to return multipart variable (A_LastResult?) for Gui'Submit and GuiControlGet''Pos                     }                     break;                  case Keyword_Cancel:                 case Keyword_Hide:                     guis[id].Hide();                     break;                  case Keyword_Destroy:                     guis[id].Hide();                     guis[id].Dispose();                     guis.Remove(id);                     break;                  case Keyword_Font:                     GuiAssociatedInfo(guis[id]).Font = string.IsNullOrEmpty(Param2) && string.IsNullOrEmpty(Param3) ?                         guis[id].Font : ParseFont(GuiAssociatedInfo(guis[id]).Font' Param2' Param3);                     break;                  case Keyword_Color:                     Color c;                     if(Keyword_Default.Equals(Param2' StringComparison.OrdinalIgnoreCase))                         c = Color.LightGray; //TODO: Use correctly Control color' BUT NOT Transparent.                     else                         c = ParseColor(Param2);                     if(c.A == 0xFF)                         guis[id].BackColor = c;                     break;                  case Keyword_Margin:                     {                         int d' x = guis[id].Margin.Left' y = guis[id].Margin.Top;                          if (int.TryParse(Param2' out d))                             x = d;                          if (int.TryParse(Param3' out d))                             y = d;                          guis[id].Margin = new Padding(x' y' x' y);                     }                     break;                  case Keyword_Menu:                     break;                  case Keyword_Minimize:                     guis[id].WindowState = FormWindowState.Minimized;                     break;                  case Keyword_Maximize:                     guis[id].WindowState = FormWindowState.Maximized;                     break;                  case Keyword_Restore:                     guis[id].WindowState = FormWindowState.Normal;                     break;                  case Keyword_Flash:                     if (Environment.OSVersion.Platform == PlatformID.Win32NT)                         WindowsAPI.FlashWindow(guis[id].Handle' OnOff(Param2) ?? true);                     break;                  case Keyword_Default:                     DefaultGuiId = id;                     break;                  case Keyword_TreeView:                     {                         var tree = GuiFindControl(Param2' guis[id]);                          if (tree == null || !typeof(TreeView).IsAssignableFrom(tree.GetType()))                             DefaultTreeView = null;                         else                             DefaultTreeView = (TreeView)tree;                     }                     break;                  case Keyword_ListView:                     {                         var list = GuiFindControl(Param2' guis[id]);                          if (list == null || !typeof(ListView).IsAssignableFrom(list.GetType()))                             DefaultListView = null;                         else                             DefaultListView = (ListView)list;                     }                     break;                  #endregion                  #region Options                  default:                     {                         foreach (var option in ParseOptions(Command))                         {                             bool on = option[0] != '-';                             string mode = option;                              if (mode[0] == '+' || mode[0] == '-')                                 mode = mode.Substring(1);                              if (mode.Length == 0)                                 continue;                              mode = mode.ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_AlwaysOnTop: guis[id].TopMost = on; break;                                 case Keyword_Border: break;                                 case Keyword_Caption: break;                                 case Keyword_Disabled: guis[id].Enabled = !on; break;                                 case Keyword_LastFound: lastFoundForm = guis[id].Handle.ToInt64(); break;                                 case Keyword_LastFoundExist: lastFoundForm = guis[id].Handle.ToInt64(); break;                                 case Keyword_MaximizeBox: guis[id].MaximizeBox = on; break;                                 case Keyword_MinimizeBox: guis[id].MinimizeBox = on; break;                                 case Keyword_OwnDialogs: dialogOwner = guis[id]; break;                                 case Keyword_Owner: break;                                 case Keyword_Resize: break;                                 case Keyword_SysMenu: guis[id].ControlBox = on; break;                                 case Keyword_Theme: Application.EnableVisualStyles(); break;                                 case Keyword_ToolWindow: break;                                 case Keyword_Redraw: guis[id].Refresh(); break;                                 case Keyword_Cursor:                                     {                                         switch (Param2.ToLowerInvariant())                                         {                                             case "cross": guis[id].Cursor = Cursors.Cross; break;                                             case "hand": guis[id].Cursor = Cursors.Hand; break;                                             case "help": guis[id].Cursor = Cursors.Help; break;                                             case "beam": guis[id].Cursor = Cursors.IBeam; break;                                             case "no": guis[id].Cursor = Cursors.No; break;                                             case "wait": guis[id].Cursor = Cursors.WaitCursor; break;                                             case "nomove": guis[id].Cursor = Cursors.NoMove2D; break;                                             case "size": guis[id].Cursor = Cursors.SizeAll; break;                                             case "split":                                                 {                                                     if (Param3.ToLowerInvariant() == Keyword_Vertical)                                                         guis[id].Cursor = Cursors.VSplit;                                                     else                                                         guis[id].Cursor = Cursors.HSplit;                                                     break;                                                 }                                             case "pan":                                                 {                                                     switch (Param3.ToLowerInvariant())                                                     {                                                         case "east":                                                         case "e": guis[id].Cursor = Cursors.PanEast; break;                                                         case "south":                                                         case "s": guis[id].Cursor = Cursors.PanSouth; break;                                                         case "west":                                                         case "w": guis[id].Cursor = Cursors.PanWest; break;                                                         default:                                                         case "north":                                                         case "n": guis[id].Cursor = Cursors.PanNorth; break;                                                     }                                                     break;                                                 }                                             case "arrow":                                             default: guis[id].Cursor = Cursors.Arrow; break;                                         }                                         break;                                     }                                 case Keyword_Icon:                                     {                                         if (Param2 != string.Empty)                                         {                                             if (File.Exists(Param2))                                                 if (Path.GetExtension(Param2.ToLowerInvariant())==".ico")                                                     guis[id].Icon = new Icon(Param2);                                         }                                         guis[id].ShowIcon = on;                                         break;                                     }                                 case Keyword_TaskBar:                                     {                                         guis[id].ShowInTaskbar = on;                                         break;                                     }                                 case Keyword_BackGroundImage:                                     {                                         if (on)                                         {                                             if (File.Exists(Param2))                                             {                                                 guis[id].BackgroundImage = new Bitmap(Param2);                                                 switch (Param3.ToLowerInvariant())                                                 {                                                     case Keyword_None: guis[id].BackgroundImageLayout = ImageLayout.None; break;                                                     case Keyword_Tile: guis[id].BackgroundImageLayout = ImageLayout.Tile; break;                                                     case Keyword_Center: guis[id].BackgroundImageLayout = ImageLayout.Center; break;                                                     case Keyword_Zoom: guis[id].BackgroundImageLayout = ImageLayout.Zoom; break;                                                     case Keyword_Stretch:                                                     default: guis[id].BackgroundImageLayout = ImageLayout.Stretch; break;                                                 }                                             }                                                                                      }                                         else                                         {                                             guis[id].BackgroundImage = null;                                         }                                         break;                                     }                                 default:                                     string arg;                                     string[] parts;                                     int n;                                     Size size;                                     if (mode.StartsWith(Keyword_Delimiter))                                     {                                         arg = mode.Substring(Keyword_Delimiter.Length);                                         if (arg.Length > 0)                                             GuiAssociatedInfo(guis[id]).Delimiter = arg[0];                                     }                                     else if (mode.StartsWith(Keyword_Label))                                     {                                         arg = mode.Substring(Keyword_Label.Length);                                         if (arg.Length > 0)                                             guis[id].Name = arg;                                     }                                     else if (mode.StartsWith(Keyword_MinSize))                                     {                                         arg = mode.Substring(Keyword_MinSize.Length);                                         parts = arg.Split(new[] { "x"' "X"' "*" }' 2' StringSplitOptions.None);                                         size = guis[id].MinimumSize;                                          if (parts.Length > 0 && int.TryParse(parts[0]' out n))                                             size.Width = n;                                         if (parts.Length > 1 && int.TryParse(parts[1]' out n))                                             size.Height = n;                                          guis[id].MinimumSize = size;                                     }                                     else if (mode.StartsWith(Keyword_MaxSize))                                     {                                         arg = mode.Substring(Keyword_MaxSize.Length);                                         parts = arg.Split(new[] { "x"' "X"' "*" }' 2' StringSplitOptions.None);                                         size = guis[id].MaximumSize;                                          if (parts.Length > 0 && int.TryParse(parts[0]' out n))                                             size.Width = n;                                         if (parts.Length > 1 && int.TryParse(parts[1]' out n))                                             size.Height = n;                                          guis[id].MaximumSize = size;                                     }                                     break;                             }                         }                     }                     break;                  #endregion             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Gui,The following statement contains a magic number: switch (Command.ToLowerInvariant())             {                 #region Add                  case Keyword_Add:                     {                         Control control = null;                         GuiControlEdit(ref control' guis[id]' Param2' Param3' Param4);                         GuiAssociatedInfo(control).LastControl = control;                     }                     break;                  #endregion                  #region Show                  case Keyword_Show:                     {                         bool center = false' cX = false' cY = false' auto = false' min = false' max = false' restore = false' hide = false;                         int?[] pos = { null' null' null' null };                          foreach (var option in ParseOptions(Param2))                         {                             string mode = option.ToLowerInvariant();                             int select = -1;                              switch (mode[0])                             {                                 case 'w': select = 0; break;                                 case 'h': select = 1; break;                                 case 'x': select = 2; break;                                 case 'y': select = 3; break;                             }                              if (select == -1)                             {                                 switch (mode)                                 {                                     case Keyword_Center: center = true; break;                                     case Keyword_AutoSize: auto = true; break;                                     case Keyword_Maximize: max = true; break;                                     case Keyword_Minimize: min = true; break;                                     case Keyword_Restore: restore = true; break;                                     case Keyword_NoActivate: break;                                     case Keyword_NA: break;                                     case Keyword_Hide: hide = true; break;                                 }                             }                             else                             {                                 mode = mode.Substring(1);                                 int n;                                  if (mode.Equals(Keyword_Center' StringComparison.OrdinalIgnoreCase))                                 {                                     if (select == 2)                                         cX = true;                                     else                                         cY = true;                                 }                                 else if (mode.Length != 0 && int.TryParse(mode' out n))                                     pos[select] = n;                             }                         }                          if (auto || pos[0] == null && pos[1] == null)                         {                             guis[id].Size = guis[id].PreferredSize;                              var status = GuiAssociatedInfo(guis[id]).StatusBar;                             int d = status == null ? 0 : status.Height;                              if (d > 0)                                 guis[id].ClientSize = new Size(guis[id].ClientSize.Width' guis[id].ClientSize.Height + d);                         }                         else                         {                             var size = guis[id].PreferredSize;                              if (pos[0] != null)                                 size.Width = (int)pos[0];                             if (pos[1] != null)                                 size.Height = (int)pos[1];                              guis[id].ClientSize = size;                         }                          var location = new Point();                          if (pos[2] != null)                             location.X = (int)pos[2];                         if (pos[3] != null)                             location.Y = (int)pos[3];                          var screen = Screen.PrimaryScreen.Bounds;                          if (location == null)                             center = true;                          if (center)                             cX = cY = true;                          if (cX)                             location.X = (screen.Width - guis[id].Size.Width) / 2 + screen.X;                         if (cY)                             location.Y = (screen.Height - guis[id].Size.Height) / 2 + screen.Y;                          guis[id].StartPosition = FormStartPosition.Manual;                         guis[id].Location = location;                          guis[id].Text = Param3;                          if (hide)                             guis[id].Hide();                         else                             guis[id].Show();                          guis[id].ResumeLayout(true);                          if (min)                             guis[id].WindowState = FormWindowState.Minimized;                         else if (max)                             guis[id].WindowState = FormWindowState.Maximized;                         else if (restore)                             guis[id].WindowState = FormWindowState.Normal;                                              }                     break;                  #endregion                  #region Misc.                  case Keyword_Submit:                     {                         if (!Keyword_NoHide.Equals(Param2' StringComparison.OrdinalIgnoreCase))                             guis[id].Hide();                          // TODO: way to return multipart variable (A_LastResult?) for Gui'Submit and GuiControlGet''Pos                     }                     break;                  case Keyword_Cancel:                 case Keyword_Hide:                     guis[id].Hide();                     break;                  case Keyword_Destroy:                     guis[id].Hide();                     guis[id].Dispose();                     guis.Remove(id);                     break;                  case Keyword_Font:                     GuiAssociatedInfo(guis[id]).Font = string.IsNullOrEmpty(Param2) && string.IsNullOrEmpty(Param3) ?                         guis[id].Font : ParseFont(GuiAssociatedInfo(guis[id]).Font' Param2' Param3);                     break;                  case Keyword_Color:                     Color c;                     if(Keyword_Default.Equals(Param2' StringComparison.OrdinalIgnoreCase))                         c = Color.LightGray; //TODO: Use correctly Control color' BUT NOT Transparent.                     else                         c = ParseColor(Param2);                     if(c.A == 0xFF)                         guis[id].BackColor = c;                     break;                  case Keyword_Margin:                     {                         int d' x = guis[id].Margin.Left' y = guis[id].Margin.Top;                          if (int.TryParse(Param2' out d))                             x = d;                          if (int.TryParse(Param3' out d))                             y = d;                          guis[id].Margin = new Padding(x' y' x' y);                     }                     break;                  case Keyword_Menu:                     break;                  case Keyword_Minimize:                     guis[id].WindowState = FormWindowState.Minimized;                     break;                  case Keyword_Maximize:                     guis[id].WindowState = FormWindowState.Maximized;                     break;                  case Keyword_Restore:                     guis[id].WindowState = FormWindowState.Normal;                     break;                  case Keyword_Flash:                     if (Environment.OSVersion.Platform == PlatformID.Win32NT)                         WindowsAPI.FlashWindow(guis[id].Handle' OnOff(Param2) ?? true);                     break;                  case Keyword_Default:                     DefaultGuiId = id;                     break;                  case Keyword_TreeView:                     {                         var tree = GuiFindControl(Param2' guis[id]);                          if (tree == null || !typeof(TreeView).IsAssignableFrom(tree.GetType()))                             DefaultTreeView = null;                         else                             DefaultTreeView = (TreeView)tree;                     }                     break;                  case Keyword_ListView:                     {                         var list = GuiFindControl(Param2' guis[id]);                          if (list == null || !typeof(ListView).IsAssignableFrom(list.GetType()))                             DefaultListView = null;                         else                             DefaultListView = (ListView)list;                     }                     break;                  #endregion                  #region Options                  default:                     {                         foreach (var option in ParseOptions(Command))                         {                             bool on = option[0] != '-';                             string mode = option;                              if (mode[0] == '+' || mode[0] == '-')                                 mode = mode.Substring(1);                              if (mode.Length == 0)                                 continue;                              mode = mode.ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_AlwaysOnTop: guis[id].TopMost = on; break;                                 case Keyword_Border: break;                                 case Keyword_Caption: break;                                 case Keyword_Disabled: guis[id].Enabled = !on; break;                                 case Keyword_LastFound: lastFoundForm = guis[id].Handle.ToInt64(); break;                                 case Keyword_LastFoundExist: lastFoundForm = guis[id].Handle.ToInt64(); break;                                 case Keyword_MaximizeBox: guis[id].MaximizeBox = on; break;                                 case Keyword_MinimizeBox: guis[id].MinimizeBox = on; break;                                 case Keyword_OwnDialogs: dialogOwner = guis[id]; break;                                 case Keyword_Owner: break;                                 case Keyword_Resize: break;                                 case Keyword_SysMenu: guis[id].ControlBox = on; break;                                 case Keyword_Theme: Application.EnableVisualStyles(); break;                                 case Keyword_ToolWindow: break;                                 case Keyword_Redraw: guis[id].Refresh(); break;                                 case Keyword_Cursor:                                     {                                         switch (Param2.ToLowerInvariant())                                         {                                             case "cross": guis[id].Cursor = Cursors.Cross; break;                                             case "hand": guis[id].Cursor = Cursors.Hand; break;                                             case "help": guis[id].Cursor = Cursors.Help; break;                                             case "beam": guis[id].Cursor = Cursors.IBeam; break;                                             case "no": guis[id].Cursor = Cursors.No; break;                                             case "wait": guis[id].Cursor = Cursors.WaitCursor; break;                                             case "nomove": guis[id].Cursor = Cursors.NoMove2D; break;                                             case "size": guis[id].Cursor = Cursors.SizeAll; break;                                             case "split":                                                 {                                                     if (Param3.ToLowerInvariant() == Keyword_Vertical)                                                         guis[id].Cursor = Cursors.VSplit;                                                     else                                                         guis[id].Cursor = Cursors.HSplit;                                                     break;                                                 }                                             case "pan":                                                 {                                                     switch (Param3.ToLowerInvariant())                                                     {                                                         case "east":                                                         case "e": guis[id].Cursor = Cursors.PanEast; break;                                                         case "south":                                                         case "s": guis[id].Cursor = Cursors.PanSouth; break;                                                         case "west":                                                         case "w": guis[id].Cursor = Cursors.PanWest; break;                                                         default:                                                         case "north":                                                         case "n": guis[id].Cursor = Cursors.PanNorth; break;                                                     }                                                     break;                                                 }                                             case "arrow":                                             default: guis[id].Cursor = Cursors.Arrow; break;                                         }                                         break;                                     }                                 case Keyword_Icon:                                     {                                         if (Param2 != string.Empty)                                         {                                             if (File.Exists(Param2))                                                 if (Path.GetExtension(Param2.ToLowerInvariant())==".ico")                                                     guis[id].Icon = new Icon(Param2);                                         }                                         guis[id].ShowIcon = on;                                         break;                                     }                                 case Keyword_TaskBar:                                     {                                         guis[id].ShowInTaskbar = on;                                         break;                                     }                                 case Keyword_BackGroundImage:                                     {                                         if (on)                                         {                                             if (File.Exists(Param2))                                             {                                                 guis[id].BackgroundImage = new Bitmap(Param2);                                                 switch (Param3.ToLowerInvariant())                                                 {                                                     case Keyword_None: guis[id].BackgroundImageLayout = ImageLayout.None; break;                                                     case Keyword_Tile: guis[id].BackgroundImageLayout = ImageLayout.Tile; break;                                                     case Keyword_Center: guis[id].BackgroundImageLayout = ImageLayout.Center; break;                                                     case Keyword_Zoom: guis[id].BackgroundImageLayout = ImageLayout.Zoom; break;                                                     case Keyword_Stretch:                                                     default: guis[id].BackgroundImageLayout = ImageLayout.Stretch; break;                                                 }                                             }                                                                                      }                                         else                                         {                                             guis[id].BackgroundImage = null;                                         }                                         break;                                     }                                 default:                                     string arg;                                     string[] parts;                                     int n;                                     Size size;                                     if (mode.StartsWith(Keyword_Delimiter))                                     {                                         arg = mode.Substring(Keyword_Delimiter.Length);                                         if (arg.Length > 0)                                             GuiAssociatedInfo(guis[id]).Delimiter = arg[0];                                     }                                     else if (mode.StartsWith(Keyword_Label))                                     {                                         arg = mode.Substring(Keyword_Label.Length);                                         if (arg.Length > 0)                                             guis[id].Name = arg;                                     }                                     else if (mode.StartsWith(Keyword_MinSize))                                     {                                         arg = mode.Substring(Keyword_MinSize.Length);                                         parts = arg.Split(new[] { "x"' "X"' "*" }' 2' StringSplitOptions.None);                                         size = guis[id].MinimumSize;                                          if (parts.Length > 0 && int.TryParse(parts[0]' out n))                                             size.Width = n;                                         if (parts.Length > 1 && int.TryParse(parts[1]' out n))                                             size.Height = n;                                          guis[id].MinimumSize = size;                                     }                                     else if (mode.StartsWith(Keyword_MaxSize))                                     {                                         arg = mode.Substring(Keyword_MaxSize.Length);                                         parts = arg.Split(new[] { "x"' "X"' "*" }' 2' StringSplitOptions.None);                                         size = guis[id].MaximumSize;                                          if (parts.Length > 0 && int.TryParse(parts[0]' out n))                                             size.Width = n;                                         if (parts.Length > 1 && int.TryParse(parts[1]' out n))                                             size.Height = n;                                          guis[id].MaximumSize = size;                                     }                                     break;                             }                         }                     }                     break;                  #endregion             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Gui,The following statement contains a magic number: switch (Command.ToLowerInvariant())             {                 #region Add                  case Keyword_Add:                     {                         Control control = null;                         GuiControlEdit(ref control' guis[id]' Param2' Param3' Param4);                         GuiAssociatedInfo(control).LastControl = control;                     }                     break;                  #endregion                  #region Show                  case Keyword_Show:                     {                         bool center = false' cX = false' cY = false' auto = false' min = false' max = false' restore = false' hide = false;                         int?[] pos = { null' null' null' null };                          foreach (var option in ParseOptions(Param2))                         {                             string mode = option.ToLowerInvariant();                             int select = -1;                              switch (mode[0])                             {                                 case 'w': select = 0; break;                                 case 'h': select = 1; break;                                 case 'x': select = 2; break;                                 case 'y': select = 3; break;                             }                              if (select == -1)                             {                                 switch (mode)                                 {                                     case Keyword_Center: center = true; break;                                     case Keyword_AutoSize: auto = true; break;                                     case Keyword_Maximize: max = true; break;                                     case Keyword_Minimize: min = true; break;                                     case Keyword_Restore: restore = true; break;                                     case Keyword_NoActivate: break;                                     case Keyword_NA: break;                                     case Keyword_Hide: hide = true; break;                                 }                             }                             else                             {                                 mode = mode.Substring(1);                                 int n;                                  if (mode.Equals(Keyword_Center' StringComparison.OrdinalIgnoreCase))                                 {                                     if (select == 2)                                         cX = true;                                     else                                         cY = true;                                 }                                 else if (mode.Length != 0 && int.TryParse(mode' out n))                                     pos[select] = n;                             }                         }                          if (auto || pos[0] == null && pos[1] == null)                         {                             guis[id].Size = guis[id].PreferredSize;                              var status = GuiAssociatedInfo(guis[id]).StatusBar;                             int d = status == null ? 0 : status.Height;                              if (d > 0)                                 guis[id].ClientSize = new Size(guis[id].ClientSize.Width' guis[id].ClientSize.Height + d);                         }                         else                         {                             var size = guis[id].PreferredSize;                              if (pos[0] != null)                                 size.Width = (int)pos[0];                             if (pos[1] != null)                                 size.Height = (int)pos[1];                              guis[id].ClientSize = size;                         }                          var location = new Point();                          if (pos[2] != null)                             location.X = (int)pos[2];                         if (pos[3] != null)                             location.Y = (int)pos[3];                          var screen = Screen.PrimaryScreen.Bounds;                          if (location == null)                             center = true;                          if (center)                             cX = cY = true;                          if (cX)                             location.X = (screen.Width - guis[id].Size.Width) / 2 + screen.X;                         if (cY)                             location.Y = (screen.Height - guis[id].Size.Height) / 2 + screen.Y;                          guis[id].StartPosition = FormStartPosition.Manual;                         guis[id].Location = location;                          guis[id].Text = Param3;                          if (hide)                             guis[id].Hide();                         else                             guis[id].Show();                          guis[id].ResumeLayout(true);                          if (min)                             guis[id].WindowState = FormWindowState.Minimized;                         else if (max)                             guis[id].WindowState = FormWindowState.Maximized;                         else if (restore)                             guis[id].WindowState = FormWindowState.Normal;                                              }                     break;                  #endregion                  #region Misc.                  case Keyword_Submit:                     {                         if (!Keyword_NoHide.Equals(Param2' StringComparison.OrdinalIgnoreCase))                             guis[id].Hide();                          // TODO: way to return multipart variable (A_LastResult?) for Gui'Submit and GuiControlGet''Pos                     }                     break;                  case Keyword_Cancel:                 case Keyword_Hide:                     guis[id].Hide();                     break;                  case Keyword_Destroy:                     guis[id].Hide();                     guis[id].Dispose();                     guis.Remove(id);                     break;                  case Keyword_Font:                     GuiAssociatedInfo(guis[id]).Font = string.IsNullOrEmpty(Param2) && string.IsNullOrEmpty(Param3) ?                         guis[id].Font : ParseFont(GuiAssociatedInfo(guis[id]).Font' Param2' Param3);                     break;                  case Keyword_Color:                     Color c;                     if(Keyword_Default.Equals(Param2' StringComparison.OrdinalIgnoreCase))                         c = Color.LightGray; //TODO: Use correctly Control color' BUT NOT Transparent.                     else                         c = ParseColor(Param2);                     if(c.A == 0xFF)                         guis[id].BackColor = c;                     break;                  case Keyword_Margin:                     {                         int d' x = guis[id].Margin.Left' y = guis[id].Margin.Top;                          if (int.TryParse(Param2' out d))                             x = d;                          if (int.TryParse(Param3' out d))                             y = d;                          guis[id].Margin = new Padding(x' y' x' y);                     }                     break;                  case Keyword_Menu:                     break;                  case Keyword_Minimize:                     guis[id].WindowState = FormWindowState.Minimized;                     break;                  case Keyword_Maximize:                     guis[id].WindowState = FormWindowState.Maximized;                     break;                  case Keyword_Restore:                     guis[id].WindowState = FormWindowState.Normal;                     break;                  case Keyword_Flash:                     if (Environment.OSVersion.Platform == PlatformID.Win32NT)                         WindowsAPI.FlashWindow(guis[id].Handle' OnOff(Param2) ?? true);                     break;                  case Keyword_Default:                     DefaultGuiId = id;                     break;                  case Keyword_TreeView:                     {                         var tree = GuiFindControl(Param2' guis[id]);                          if (tree == null || !typeof(TreeView).IsAssignableFrom(tree.GetType()))                             DefaultTreeView = null;                         else                             DefaultTreeView = (TreeView)tree;                     }                     break;                  case Keyword_ListView:                     {                         var list = GuiFindControl(Param2' guis[id]);                          if (list == null || !typeof(ListView).IsAssignableFrom(list.GetType()))                             DefaultListView = null;                         else                             DefaultListView = (ListView)list;                     }                     break;                  #endregion                  #region Options                  default:                     {                         foreach (var option in ParseOptions(Command))                         {                             bool on = option[0] != '-';                             string mode = option;                              if (mode[0] == '+' || mode[0] == '-')                                 mode = mode.Substring(1);                              if (mode.Length == 0)                                 continue;                              mode = mode.ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_AlwaysOnTop: guis[id].TopMost = on; break;                                 case Keyword_Border: break;                                 case Keyword_Caption: break;                                 case Keyword_Disabled: guis[id].Enabled = !on; break;                                 case Keyword_LastFound: lastFoundForm = guis[id].Handle.ToInt64(); break;                                 case Keyword_LastFoundExist: lastFoundForm = guis[id].Handle.ToInt64(); break;                                 case Keyword_MaximizeBox: guis[id].MaximizeBox = on; break;                                 case Keyword_MinimizeBox: guis[id].MinimizeBox = on; break;                                 case Keyword_OwnDialogs: dialogOwner = guis[id]; break;                                 case Keyword_Owner: break;                                 case Keyword_Resize: break;                                 case Keyword_SysMenu: guis[id].ControlBox = on; break;                                 case Keyword_Theme: Application.EnableVisualStyles(); break;                                 case Keyword_ToolWindow: break;                                 case Keyword_Redraw: guis[id].Refresh(); break;                                 case Keyword_Cursor:                                     {                                         switch (Param2.ToLowerInvariant())                                         {                                             case "cross": guis[id].Cursor = Cursors.Cross; break;                                             case "hand": guis[id].Cursor = Cursors.Hand; break;                                             case "help": guis[id].Cursor = Cursors.Help; break;                                             case "beam": guis[id].Cursor = Cursors.IBeam; break;                                             case "no": guis[id].Cursor = Cursors.No; break;                                             case "wait": guis[id].Cursor = Cursors.WaitCursor; break;                                             case "nomove": guis[id].Cursor = Cursors.NoMove2D; break;                                             case "size": guis[id].Cursor = Cursors.SizeAll; break;                                             case "split":                                                 {                                                     if (Param3.ToLowerInvariant() == Keyword_Vertical)                                                         guis[id].Cursor = Cursors.VSplit;                                                     else                                                         guis[id].Cursor = Cursors.HSplit;                                                     break;                                                 }                                             case "pan":                                                 {                                                     switch (Param3.ToLowerInvariant())                                                     {                                                         case "east":                                                         case "e": guis[id].Cursor = Cursors.PanEast; break;                                                         case "south":                                                         case "s": guis[id].Cursor = Cursors.PanSouth; break;                                                         case "west":                                                         case "w": guis[id].Cursor = Cursors.PanWest; break;                                                         default:                                                         case "north":                                                         case "n": guis[id].Cursor = Cursors.PanNorth; break;                                                     }                                                     break;                                                 }                                             case "arrow":                                             default: guis[id].Cursor = Cursors.Arrow; break;                                         }                                         break;                                     }                                 case Keyword_Icon:                                     {                                         if (Param2 != string.Empty)                                         {                                             if (File.Exists(Param2))                                                 if (Path.GetExtension(Param2.ToLowerInvariant())==".ico")                                                     guis[id].Icon = new Icon(Param2);                                         }                                         guis[id].ShowIcon = on;                                         break;                                     }                                 case Keyword_TaskBar:                                     {                                         guis[id].ShowInTaskbar = on;                                         break;                                     }                                 case Keyword_BackGroundImage:                                     {                                         if (on)                                         {                                             if (File.Exists(Param2))                                             {                                                 guis[id].BackgroundImage = new Bitmap(Param2);                                                 switch (Param3.ToLowerInvariant())                                                 {                                                     case Keyword_None: guis[id].BackgroundImageLayout = ImageLayout.None; break;                                                     case Keyword_Tile: guis[id].BackgroundImageLayout = ImageLayout.Tile; break;                                                     case Keyword_Center: guis[id].BackgroundImageLayout = ImageLayout.Center; break;                                                     case Keyword_Zoom: guis[id].BackgroundImageLayout = ImageLayout.Zoom; break;                                                     case Keyword_Stretch:                                                     default: guis[id].BackgroundImageLayout = ImageLayout.Stretch; break;                                                 }                                             }                                                                                      }                                         else                                         {                                             guis[id].BackgroundImage = null;                                         }                                         break;                                     }                                 default:                                     string arg;                                     string[] parts;                                     int n;                                     Size size;                                     if (mode.StartsWith(Keyword_Delimiter))                                     {                                         arg = mode.Substring(Keyword_Delimiter.Length);                                         if (arg.Length > 0)                                             GuiAssociatedInfo(guis[id]).Delimiter = arg[0];                                     }                                     else if (mode.StartsWith(Keyword_Label))                                     {                                         arg = mode.Substring(Keyword_Label.Length);                                         if (arg.Length > 0)                                             guis[id].Name = arg;                                     }                                     else if (mode.StartsWith(Keyword_MinSize))                                     {                                         arg = mode.Substring(Keyword_MinSize.Length);                                         parts = arg.Split(new[] { "x"' "X"' "*" }' 2' StringSplitOptions.None);                                         size = guis[id].MinimumSize;                                          if (parts.Length > 0 && int.TryParse(parts[0]' out n))                                             size.Width = n;                                         if (parts.Length > 1 && int.TryParse(parts[1]' out n))                                             size.Height = n;                                          guis[id].MinimumSize = size;                                     }                                     else if (mode.StartsWith(Keyword_MaxSize))                                     {                                         arg = mode.Substring(Keyword_MaxSize.Length);                                         parts = arg.Split(new[] { "x"' "X"' "*" }' 2' StringSplitOptions.None);                                         size = guis[id].MaximumSize;                                          if (parts.Length > 0 && int.TryParse(parts[0]' out n))                                             size.Width = n;                                         if (parts.Length > 1 && int.TryParse(parts[1]' out n))                                             size.Height = n;                                          guis[id].MaximumSize = size;                                     }                                     break;                             }                         }                     }                     break;                  #endregion             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Gui,The following statement contains a magic number: switch (Command.ToLowerInvariant())             {                 #region Add                  case Keyword_Add:                     {                         Control control = null;                         GuiControlEdit(ref control' guis[id]' Param2' Param3' Param4);                         GuiAssociatedInfo(control).LastControl = control;                     }                     break;                  #endregion                  #region Show                  case Keyword_Show:                     {                         bool center = false' cX = false' cY = false' auto = false' min = false' max = false' restore = false' hide = false;                         int?[] pos = { null' null' null' null };                          foreach (var option in ParseOptions(Param2))                         {                             string mode = option.ToLowerInvariant();                             int select = -1;                              switch (mode[0])                             {                                 case 'w': select = 0; break;                                 case 'h': select = 1; break;                                 case 'x': select = 2; break;                                 case 'y': select = 3; break;                             }                              if (select == -1)                             {                                 switch (mode)                                 {                                     case Keyword_Center: center = true; break;                                     case Keyword_AutoSize: auto = true; break;                                     case Keyword_Maximize: max = true; break;                                     case Keyword_Minimize: min = true; break;                                     case Keyword_Restore: restore = true; break;                                     case Keyword_NoActivate: break;                                     case Keyword_NA: break;                                     case Keyword_Hide: hide = true; break;                                 }                             }                             else                             {                                 mode = mode.Substring(1);                                 int n;                                  if (mode.Equals(Keyword_Center' StringComparison.OrdinalIgnoreCase))                                 {                                     if (select == 2)                                         cX = true;                                     else                                         cY = true;                                 }                                 else if (mode.Length != 0 && int.TryParse(mode' out n))                                     pos[select] = n;                             }                         }                          if (auto || pos[0] == null && pos[1] == null)                         {                             guis[id].Size = guis[id].PreferredSize;                              var status = GuiAssociatedInfo(guis[id]).StatusBar;                             int d = status == null ? 0 : status.Height;                              if (d > 0)                                 guis[id].ClientSize = new Size(guis[id].ClientSize.Width' guis[id].ClientSize.Height + d);                         }                         else                         {                             var size = guis[id].PreferredSize;                              if (pos[0] != null)                                 size.Width = (int)pos[0];                             if (pos[1] != null)                                 size.Height = (int)pos[1];                              guis[id].ClientSize = size;                         }                          var location = new Point();                          if (pos[2] != null)                             location.X = (int)pos[2];                         if (pos[3] != null)                             location.Y = (int)pos[3];                          var screen = Screen.PrimaryScreen.Bounds;                          if (location == null)                             center = true;                          if (center)                             cX = cY = true;                          if (cX)                             location.X = (screen.Width - guis[id].Size.Width) / 2 + screen.X;                         if (cY)                             location.Y = (screen.Height - guis[id].Size.Height) / 2 + screen.Y;                          guis[id].StartPosition = FormStartPosition.Manual;                         guis[id].Location = location;                          guis[id].Text = Param3;                          if (hide)                             guis[id].Hide();                         else                             guis[id].Show();                          guis[id].ResumeLayout(true);                          if (min)                             guis[id].WindowState = FormWindowState.Minimized;                         else if (max)                             guis[id].WindowState = FormWindowState.Maximized;                         else if (restore)                             guis[id].WindowState = FormWindowState.Normal;                                              }                     break;                  #endregion                  #region Misc.                  case Keyword_Submit:                     {                         if (!Keyword_NoHide.Equals(Param2' StringComparison.OrdinalIgnoreCase))                             guis[id].Hide();                          // TODO: way to return multipart variable (A_LastResult?) for Gui'Submit and GuiControlGet''Pos                     }                     break;                  case Keyword_Cancel:                 case Keyword_Hide:                     guis[id].Hide();                     break;                  case Keyword_Destroy:                     guis[id].Hide();                     guis[id].Dispose();                     guis.Remove(id);                     break;                  case Keyword_Font:                     GuiAssociatedInfo(guis[id]).Font = string.IsNullOrEmpty(Param2) && string.IsNullOrEmpty(Param3) ?                         guis[id].Font : ParseFont(GuiAssociatedInfo(guis[id]).Font' Param2' Param3);                     break;                  case Keyword_Color:                     Color c;                     if(Keyword_Default.Equals(Param2' StringComparison.OrdinalIgnoreCase))                         c = Color.LightGray; //TODO: Use correctly Control color' BUT NOT Transparent.                     else                         c = ParseColor(Param2);                     if(c.A == 0xFF)                         guis[id].BackColor = c;                     break;                  case Keyword_Margin:                     {                         int d' x = guis[id].Margin.Left' y = guis[id].Margin.Top;                          if (int.TryParse(Param2' out d))                             x = d;                          if (int.TryParse(Param3' out d))                             y = d;                          guis[id].Margin = new Padding(x' y' x' y);                     }                     break;                  case Keyword_Menu:                     break;                  case Keyword_Minimize:                     guis[id].WindowState = FormWindowState.Minimized;                     break;                  case Keyword_Maximize:                     guis[id].WindowState = FormWindowState.Maximized;                     break;                  case Keyword_Restore:                     guis[id].WindowState = FormWindowState.Normal;                     break;                  case Keyword_Flash:                     if (Environment.OSVersion.Platform == PlatformID.Win32NT)                         WindowsAPI.FlashWindow(guis[id].Handle' OnOff(Param2) ?? true);                     break;                  case Keyword_Default:                     DefaultGuiId = id;                     break;                  case Keyword_TreeView:                     {                         var tree = GuiFindControl(Param2' guis[id]);                          if (tree == null || !typeof(TreeView).IsAssignableFrom(tree.GetType()))                             DefaultTreeView = null;                         else                             DefaultTreeView = (TreeView)tree;                     }                     break;                  case Keyword_ListView:                     {                         var list = GuiFindControl(Param2' guis[id]);                          if (list == null || !typeof(ListView).IsAssignableFrom(list.GetType()))                             DefaultListView = null;                         else                             DefaultListView = (ListView)list;                     }                     break;                  #endregion                  #region Options                  default:                     {                         foreach (var option in ParseOptions(Command))                         {                             bool on = option[0] != '-';                             string mode = option;                              if (mode[0] == '+' || mode[0] == '-')                                 mode = mode.Substring(1);                              if (mode.Length == 0)                                 continue;                              mode = mode.ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_AlwaysOnTop: guis[id].TopMost = on; break;                                 case Keyword_Border: break;                                 case Keyword_Caption: break;                                 case Keyword_Disabled: guis[id].Enabled = !on; break;                                 case Keyword_LastFound: lastFoundForm = guis[id].Handle.ToInt64(); break;                                 case Keyword_LastFoundExist: lastFoundForm = guis[id].Handle.ToInt64(); break;                                 case Keyword_MaximizeBox: guis[id].MaximizeBox = on; break;                                 case Keyword_MinimizeBox: guis[id].MinimizeBox = on; break;                                 case Keyword_OwnDialogs: dialogOwner = guis[id]; break;                                 case Keyword_Owner: break;                                 case Keyword_Resize: break;                                 case Keyword_SysMenu: guis[id].ControlBox = on; break;                                 case Keyword_Theme: Application.EnableVisualStyles(); break;                                 case Keyword_ToolWindow: break;                                 case Keyword_Redraw: guis[id].Refresh(); break;                                 case Keyword_Cursor:                                     {                                         switch (Param2.ToLowerInvariant())                                         {                                             case "cross": guis[id].Cursor = Cursors.Cross; break;                                             case "hand": guis[id].Cursor = Cursors.Hand; break;                                             case "help": guis[id].Cursor = Cursors.Help; break;                                             case "beam": guis[id].Cursor = Cursors.IBeam; break;                                             case "no": guis[id].Cursor = Cursors.No; break;                                             case "wait": guis[id].Cursor = Cursors.WaitCursor; break;                                             case "nomove": guis[id].Cursor = Cursors.NoMove2D; break;                                             case "size": guis[id].Cursor = Cursors.SizeAll; break;                                             case "split":                                                 {                                                     if (Param3.ToLowerInvariant() == Keyword_Vertical)                                                         guis[id].Cursor = Cursors.VSplit;                                                     else                                                         guis[id].Cursor = Cursors.HSplit;                                                     break;                                                 }                                             case "pan":                                                 {                                                     switch (Param3.ToLowerInvariant())                                                     {                                                         case "east":                                                         case "e": guis[id].Cursor = Cursors.PanEast; break;                                                         case "south":                                                         case "s": guis[id].Cursor = Cursors.PanSouth; break;                                                         case "west":                                                         case "w": guis[id].Cursor = Cursors.PanWest; break;                                                         default:                                                         case "north":                                                         case "n": guis[id].Cursor = Cursors.PanNorth; break;                                                     }                                                     break;                                                 }                                             case "arrow":                                             default: guis[id].Cursor = Cursors.Arrow; break;                                         }                                         break;                                     }                                 case Keyword_Icon:                                     {                                         if (Param2 != string.Empty)                                         {                                             if (File.Exists(Param2))                                                 if (Path.GetExtension(Param2.ToLowerInvariant())==".ico")                                                     guis[id].Icon = new Icon(Param2);                                         }                                         guis[id].ShowIcon = on;                                         break;                                     }                                 case Keyword_TaskBar:                                     {                                         guis[id].ShowInTaskbar = on;                                         break;                                     }                                 case Keyword_BackGroundImage:                                     {                                         if (on)                                         {                                             if (File.Exists(Param2))                                             {                                                 guis[id].BackgroundImage = new Bitmap(Param2);                                                 switch (Param3.ToLowerInvariant())                                                 {                                                     case Keyword_None: guis[id].BackgroundImageLayout = ImageLayout.None; break;                                                     case Keyword_Tile: guis[id].BackgroundImageLayout = ImageLayout.Tile; break;                                                     case Keyword_Center: guis[id].BackgroundImageLayout = ImageLayout.Center; break;                                                     case Keyword_Zoom: guis[id].BackgroundImageLayout = ImageLayout.Zoom; break;                                                     case Keyword_Stretch:                                                     default: guis[id].BackgroundImageLayout = ImageLayout.Stretch; break;                                                 }                                             }                                                                                      }                                         else                                         {                                             guis[id].BackgroundImage = null;                                         }                                         break;                                     }                                 default:                                     string arg;                                     string[] parts;                                     int n;                                     Size size;                                     if (mode.StartsWith(Keyword_Delimiter))                                     {                                         arg = mode.Substring(Keyword_Delimiter.Length);                                         if (arg.Length > 0)                                             GuiAssociatedInfo(guis[id]).Delimiter = arg[0];                                     }                                     else if (mode.StartsWith(Keyword_Label))                                     {                                         arg = mode.Substring(Keyword_Label.Length);                                         if (arg.Length > 0)                                             guis[id].Name = arg;                                     }                                     else if (mode.StartsWith(Keyword_MinSize))                                     {                                         arg = mode.Substring(Keyword_MinSize.Length);                                         parts = arg.Split(new[] { "x"' "X"' "*" }' 2' StringSplitOptions.None);                                         size = guis[id].MinimumSize;                                          if (parts.Length > 0 && int.TryParse(parts[0]' out n))                                             size.Width = n;                                         if (parts.Length > 1 && int.TryParse(parts[1]' out n))                                             size.Height = n;                                          guis[id].MinimumSize = size;                                     }                                     else if (mode.StartsWith(Keyword_MaxSize))                                     {                                         arg = mode.Substring(Keyword_MaxSize.Length);                                         parts = arg.Split(new[] { "x"' "X"' "*" }' 2' StringSplitOptions.None);                                         size = guis[id].MaximumSize;                                          if (parts.Length > 0 && int.TryParse(parts[0]' out n))                                             size.Width = n;                                         if (parts.Length > 1 && int.TryParse(parts[1]' out n))                                             size.Height = n;                                          guis[id].MaximumSize = size;                                     }                                     break;                             }                         }                     }                     break;                  #endregion             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Gui,The following statement contains a magic number: switch (Command.ToLowerInvariant())             {                 #region Add                  case Keyword_Add:                     {                         Control control = null;                         GuiControlEdit(ref control' guis[id]' Param2' Param3' Param4);                         GuiAssociatedInfo(control).LastControl = control;                     }                     break;                  #endregion                  #region Show                  case Keyword_Show:                     {                         bool center = false' cX = false' cY = false' auto = false' min = false' max = false' restore = false' hide = false;                         int?[] pos = { null' null' null' null };                          foreach (var option in ParseOptions(Param2))                         {                             string mode = option.ToLowerInvariant();                             int select = -1;                              switch (mode[0])                             {                                 case 'w': select = 0; break;                                 case 'h': select = 1; break;                                 case 'x': select = 2; break;                                 case 'y': select = 3; break;                             }                              if (select == -1)                             {                                 switch (mode)                                 {                                     case Keyword_Center: center = true; break;                                     case Keyword_AutoSize: auto = true; break;                                     case Keyword_Maximize: max = true; break;                                     case Keyword_Minimize: min = true; break;                                     case Keyword_Restore: restore = true; break;                                     case Keyword_NoActivate: break;                                     case Keyword_NA: break;                                     case Keyword_Hide: hide = true; break;                                 }                             }                             else                             {                                 mode = mode.Substring(1);                                 int n;                                  if (mode.Equals(Keyword_Center' StringComparison.OrdinalIgnoreCase))                                 {                                     if (select == 2)                                         cX = true;                                     else                                         cY = true;                                 }                                 else if (mode.Length != 0 && int.TryParse(mode' out n))                                     pos[select] = n;                             }                         }                          if (auto || pos[0] == null && pos[1] == null)                         {                             guis[id].Size = guis[id].PreferredSize;                              var status = GuiAssociatedInfo(guis[id]).StatusBar;                             int d = status == null ? 0 : status.Height;                              if (d > 0)                                 guis[id].ClientSize = new Size(guis[id].ClientSize.Width' guis[id].ClientSize.Height + d);                         }                         else                         {                             var size = guis[id].PreferredSize;                              if (pos[0] != null)                                 size.Width = (int)pos[0];                             if (pos[1] != null)                                 size.Height = (int)pos[1];                              guis[id].ClientSize = size;                         }                          var location = new Point();                          if (pos[2] != null)                             location.X = (int)pos[2];                         if (pos[3] != null)                             location.Y = (int)pos[3];                          var screen = Screen.PrimaryScreen.Bounds;                          if (location == null)                             center = true;                          if (center)                             cX = cY = true;                          if (cX)                             location.X = (screen.Width - guis[id].Size.Width) / 2 + screen.X;                         if (cY)                             location.Y = (screen.Height - guis[id].Size.Height) / 2 + screen.Y;                          guis[id].StartPosition = FormStartPosition.Manual;                         guis[id].Location = location;                          guis[id].Text = Param3;                          if (hide)                             guis[id].Hide();                         else                             guis[id].Show();                          guis[id].ResumeLayout(true);                          if (min)                             guis[id].WindowState = FormWindowState.Minimized;                         else if (max)                             guis[id].WindowState = FormWindowState.Maximized;                         else if (restore)                             guis[id].WindowState = FormWindowState.Normal;                                              }                     break;                  #endregion                  #region Misc.                  case Keyword_Submit:                     {                         if (!Keyword_NoHide.Equals(Param2' StringComparison.OrdinalIgnoreCase))                             guis[id].Hide();                          // TODO: way to return multipart variable (A_LastResult?) for Gui'Submit and GuiControlGet''Pos                     }                     break;                  case Keyword_Cancel:                 case Keyword_Hide:                     guis[id].Hide();                     break;                  case Keyword_Destroy:                     guis[id].Hide();                     guis[id].Dispose();                     guis.Remove(id);                     break;                  case Keyword_Font:                     GuiAssociatedInfo(guis[id]).Font = string.IsNullOrEmpty(Param2) && string.IsNullOrEmpty(Param3) ?                         guis[id].Font : ParseFont(GuiAssociatedInfo(guis[id]).Font' Param2' Param3);                     break;                  case Keyword_Color:                     Color c;                     if(Keyword_Default.Equals(Param2' StringComparison.OrdinalIgnoreCase))                         c = Color.LightGray; //TODO: Use correctly Control color' BUT NOT Transparent.                     else                         c = ParseColor(Param2);                     if(c.A == 0xFF)                         guis[id].BackColor = c;                     break;                  case Keyword_Margin:                     {                         int d' x = guis[id].Margin.Left' y = guis[id].Margin.Top;                          if (int.TryParse(Param2' out d))                             x = d;                          if (int.TryParse(Param3' out d))                             y = d;                          guis[id].Margin = new Padding(x' y' x' y);                     }                     break;                  case Keyword_Menu:                     break;                  case Keyword_Minimize:                     guis[id].WindowState = FormWindowState.Minimized;                     break;                  case Keyword_Maximize:                     guis[id].WindowState = FormWindowState.Maximized;                     break;                  case Keyword_Restore:                     guis[id].WindowState = FormWindowState.Normal;                     break;                  case Keyword_Flash:                     if (Environment.OSVersion.Platform == PlatformID.Win32NT)                         WindowsAPI.FlashWindow(guis[id].Handle' OnOff(Param2) ?? true);                     break;                  case Keyword_Default:                     DefaultGuiId = id;                     break;                  case Keyword_TreeView:                     {                         var tree = GuiFindControl(Param2' guis[id]);                          if (tree == null || !typeof(TreeView).IsAssignableFrom(tree.GetType()))                             DefaultTreeView = null;                         else                             DefaultTreeView = (TreeView)tree;                     }                     break;                  case Keyword_ListView:                     {                         var list = GuiFindControl(Param2' guis[id]);                          if (list == null || !typeof(ListView).IsAssignableFrom(list.GetType()))                             DefaultListView = null;                         else                             DefaultListView = (ListView)list;                     }                     break;                  #endregion                  #region Options                  default:                     {                         foreach (var option in ParseOptions(Command))                         {                             bool on = option[0] != '-';                             string mode = option;                              if (mode[0] == '+' || mode[0] == '-')                                 mode = mode.Substring(1);                              if (mode.Length == 0)                                 continue;                              mode = mode.ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_AlwaysOnTop: guis[id].TopMost = on; break;                                 case Keyword_Border: break;                                 case Keyword_Caption: break;                                 case Keyword_Disabled: guis[id].Enabled = !on; break;                                 case Keyword_LastFound: lastFoundForm = guis[id].Handle.ToInt64(); break;                                 case Keyword_LastFoundExist: lastFoundForm = guis[id].Handle.ToInt64(); break;                                 case Keyword_MaximizeBox: guis[id].MaximizeBox = on; break;                                 case Keyword_MinimizeBox: guis[id].MinimizeBox = on; break;                                 case Keyword_OwnDialogs: dialogOwner = guis[id]; break;                                 case Keyword_Owner: break;                                 case Keyword_Resize: break;                                 case Keyword_SysMenu: guis[id].ControlBox = on; break;                                 case Keyword_Theme: Application.EnableVisualStyles(); break;                                 case Keyword_ToolWindow: break;                                 case Keyword_Redraw: guis[id].Refresh(); break;                                 case Keyword_Cursor:                                     {                                         switch (Param2.ToLowerInvariant())                                         {                                             case "cross": guis[id].Cursor = Cursors.Cross; break;                                             case "hand": guis[id].Cursor = Cursors.Hand; break;                                             case "help": guis[id].Cursor = Cursors.Help; break;                                             case "beam": guis[id].Cursor = Cursors.IBeam; break;                                             case "no": guis[id].Cursor = Cursors.No; break;                                             case "wait": guis[id].Cursor = Cursors.WaitCursor; break;                                             case "nomove": guis[id].Cursor = Cursors.NoMove2D; break;                                             case "size": guis[id].Cursor = Cursors.SizeAll; break;                                             case "split":                                                 {                                                     if (Param3.ToLowerInvariant() == Keyword_Vertical)                                                         guis[id].Cursor = Cursors.VSplit;                                                     else                                                         guis[id].Cursor = Cursors.HSplit;                                                     break;                                                 }                                             case "pan":                                                 {                                                     switch (Param3.ToLowerInvariant())                                                     {                                                         case "east":                                                         case "e": guis[id].Cursor = Cursors.PanEast; break;                                                         case "south":                                                         case "s": guis[id].Cursor = Cursors.PanSouth; break;                                                         case "west":                                                         case "w": guis[id].Cursor = Cursors.PanWest; break;                                                         default:                                                         case "north":                                                         case "n": guis[id].Cursor = Cursors.PanNorth; break;                                                     }                                                     break;                                                 }                                             case "arrow":                                             default: guis[id].Cursor = Cursors.Arrow; break;                                         }                                         break;                                     }                                 case Keyword_Icon:                                     {                                         if (Param2 != string.Empty)                                         {                                             if (File.Exists(Param2))                                                 if (Path.GetExtension(Param2.ToLowerInvariant())==".ico")                                                     guis[id].Icon = new Icon(Param2);                                         }                                         guis[id].ShowIcon = on;                                         break;                                     }                                 case Keyword_TaskBar:                                     {                                         guis[id].ShowInTaskbar = on;                                         break;                                     }                                 case Keyword_BackGroundImage:                                     {                                         if (on)                                         {                                             if (File.Exists(Param2))                                             {                                                 guis[id].BackgroundImage = new Bitmap(Param2);                                                 switch (Param3.ToLowerInvariant())                                                 {                                                     case Keyword_None: guis[id].BackgroundImageLayout = ImageLayout.None; break;                                                     case Keyword_Tile: guis[id].BackgroundImageLayout = ImageLayout.Tile; break;                                                     case Keyword_Center: guis[id].BackgroundImageLayout = ImageLayout.Center; break;                                                     case Keyword_Zoom: guis[id].BackgroundImageLayout = ImageLayout.Zoom; break;                                                     case Keyword_Stretch:                                                     default: guis[id].BackgroundImageLayout = ImageLayout.Stretch; break;                                                 }                                             }                                                                                      }                                         else                                         {                                             guis[id].BackgroundImage = null;                                         }                                         break;                                     }                                 default:                                     string arg;                                     string[] parts;                                     int n;                                     Size size;                                     if (mode.StartsWith(Keyword_Delimiter))                                     {                                         arg = mode.Substring(Keyword_Delimiter.Length);                                         if (arg.Length > 0)                                             GuiAssociatedInfo(guis[id]).Delimiter = arg[0];                                     }                                     else if (mode.StartsWith(Keyword_Label))                                     {                                         arg = mode.Substring(Keyword_Label.Length);                                         if (arg.Length > 0)                                             guis[id].Name = arg;                                     }                                     else if (mode.StartsWith(Keyword_MinSize))                                     {                                         arg = mode.Substring(Keyword_MinSize.Length);                                         parts = arg.Split(new[] { "x"' "X"' "*" }' 2' StringSplitOptions.None);                                         size = guis[id].MinimumSize;                                          if (parts.Length > 0 && int.TryParse(parts[0]' out n))                                             size.Width = n;                                         if (parts.Length > 1 && int.TryParse(parts[1]' out n))                                             size.Height = n;                                          guis[id].MinimumSize = size;                                     }                                     else if (mode.StartsWith(Keyword_MaxSize))                                     {                                         arg = mode.Substring(Keyword_MaxSize.Length);                                         parts = arg.Split(new[] { "x"' "X"' "*" }' 2' StringSplitOptions.None);                                         size = guis[id].MaximumSize;                                          if (parts.Length > 0 && int.TryParse(parts[0]' out n))                                             size.Width = n;                                         if (parts.Length > 1 && int.TryParse(parts[1]' out n))                                             size.Height = n;                                          guis[id].MaximumSize = size;                                     }                                     break;                             }                         }                     }                     break;                  #endregion             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Gui,The following statement contains a magic number: switch (Command.ToLowerInvariant())             {                 #region Add                  case Keyword_Add:                     {                         Control control = null;                         GuiControlEdit(ref control' guis[id]' Param2' Param3' Param4);                         GuiAssociatedInfo(control).LastControl = control;                     }                     break;                  #endregion                  #region Show                  case Keyword_Show:                     {                         bool center = false' cX = false' cY = false' auto = false' min = false' max = false' restore = false' hide = false;                         int?[] pos = { null' null' null' null };                          foreach (var option in ParseOptions(Param2))                         {                             string mode = option.ToLowerInvariant();                             int select = -1;                              switch (mode[0])                             {                                 case 'w': select = 0; break;                                 case 'h': select = 1; break;                                 case 'x': select = 2; break;                                 case 'y': select = 3; break;                             }                              if (select == -1)                             {                                 switch (mode)                                 {                                     case Keyword_Center: center = true; break;                                     case Keyword_AutoSize: auto = true; break;                                     case Keyword_Maximize: max = true; break;                                     case Keyword_Minimize: min = true; break;                                     case Keyword_Restore: restore = true; break;                                     case Keyword_NoActivate: break;                                     case Keyword_NA: break;                                     case Keyword_Hide: hide = true; break;                                 }                             }                             else                             {                                 mode = mode.Substring(1);                                 int n;                                  if (mode.Equals(Keyword_Center' StringComparison.OrdinalIgnoreCase))                                 {                                     if (select == 2)                                         cX = true;                                     else                                         cY = true;                                 }                                 else if (mode.Length != 0 && int.TryParse(mode' out n))                                     pos[select] = n;                             }                         }                          if (auto || pos[0] == null && pos[1] == null)                         {                             guis[id].Size = guis[id].PreferredSize;                              var status = GuiAssociatedInfo(guis[id]).StatusBar;                             int d = status == null ? 0 : status.Height;                              if (d > 0)                                 guis[id].ClientSize = new Size(guis[id].ClientSize.Width' guis[id].ClientSize.Height + d);                         }                         else                         {                             var size = guis[id].PreferredSize;                              if (pos[0] != null)                                 size.Width = (int)pos[0];                             if (pos[1] != null)                                 size.Height = (int)pos[1];                              guis[id].ClientSize = size;                         }                          var location = new Point();                          if (pos[2] != null)                             location.X = (int)pos[2];                         if (pos[3] != null)                             location.Y = (int)pos[3];                          var screen = Screen.PrimaryScreen.Bounds;                          if (location == null)                             center = true;                          if (center)                             cX = cY = true;                          if (cX)                             location.X = (screen.Width - guis[id].Size.Width) / 2 + screen.X;                         if (cY)                             location.Y = (screen.Height - guis[id].Size.Height) / 2 + screen.Y;                          guis[id].StartPosition = FormStartPosition.Manual;                         guis[id].Location = location;                          guis[id].Text = Param3;                          if (hide)                             guis[id].Hide();                         else                             guis[id].Show();                          guis[id].ResumeLayout(true);                          if (min)                             guis[id].WindowState = FormWindowState.Minimized;                         else if (max)                             guis[id].WindowState = FormWindowState.Maximized;                         else if (restore)                             guis[id].WindowState = FormWindowState.Normal;                                              }                     break;                  #endregion                  #region Misc.                  case Keyword_Submit:                     {                         if (!Keyword_NoHide.Equals(Param2' StringComparison.OrdinalIgnoreCase))                             guis[id].Hide();                          // TODO: way to return multipart variable (A_LastResult?) for Gui'Submit and GuiControlGet''Pos                     }                     break;                  case Keyword_Cancel:                 case Keyword_Hide:                     guis[id].Hide();                     break;                  case Keyword_Destroy:                     guis[id].Hide();                     guis[id].Dispose();                     guis.Remove(id);                     break;                  case Keyword_Font:                     GuiAssociatedInfo(guis[id]).Font = string.IsNullOrEmpty(Param2) && string.IsNullOrEmpty(Param3) ?                         guis[id].Font : ParseFont(GuiAssociatedInfo(guis[id]).Font' Param2' Param3);                     break;                  case Keyword_Color:                     Color c;                     if(Keyword_Default.Equals(Param2' StringComparison.OrdinalIgnoreCase))                         c = Color.LightGray; //TODO: Use correctly Control color' BUT NOT Transparent.                     else                         c = ParseColor(Param2);                     if(c.A == 0xFF)                         guis[id].BackColor = c;                     break;                  case Keyword_Margin:                     {                         int d' x = guis[id].Margin.Left' y = guis[id].Margin.Top;                          if (int.TryParse(Param2' out d))                             x = d;                          if (int.TryParse(Param3' out d))                             y = d;                          guis[id].Margin = new Padding(x' y' x' y);                     }                     break;                  case Keyword_Menu:                     break;                  case Keyword_Minimize:                     guis[id].WindowState = FormWindowState.Minimized;                     break;                  case Keyword_Maximize:                     guis[id].WindowState = FormWindowState.Maximized;                     break;                  case Keyword_Restore:                     guis[id].WindowState = FormWindowState.Normal;                     break;                  case Keyword_Flash:                     if (Environment.OSVersion.Platform == PlatformID.Win32NT)                         WindowsAPI.FlashWindow(guis[id].Handle' OnOff(Param2) ?? true);                     break;                  case Keyword_Default:                     DefaultGuiId = id;                     break;                  case Keyword_TreeView:                     {                         var tree = GuiFindControl(Param2' guis[id]);                          if (tree == null || !typeof(TreeView).IsAssignableFrom(tree.GetType()))                             DefaultTreeView = null;                         else                             DefaultTreeView = (TreeView)tree;                     }                     break;                  case Keyword_ListView:                     {                         var list = GuiFindControl(Param2' guis[id]);                          if (list == null || !typeof(ListView).IsAssignableFrom(list.GetType()))                             DefaultListView = null;                         else                             DefaultListView = (ListView)list;                     }                     break;                  #endregion                  #region Options                  default:                     {                         foreach (var option in ParseOptions(Command))                         {                             bool on = option[0] != '-';                             string mode = option;                              if (mode[0] == '+' || mode[0] == '-')                                 mode = mode.Substring(1);                              if (mode.Length == 0)                                 continue;                              mode = mode.ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_AlwaysOnTop: guis[id].TopMost = on; break;                                 case Keyword_Border: break;                                 case Keyword_Caption: break;                                 case Keyword_Disabled: guis[id].Enabled = !on; break;                                 case Keyword_LastFound: lastFoundForm = guis[id].Handle.ToInt64(); break;                                 case Keyword_LastFoundExist: lastFoundForm = guis[id].Handle.ToInt64(); break;                                 case Keyword_MaximizeBox: guis[id].MaximizeBox = on; break;                                 case Keyword_MinimizeBox: guis[id].MinimizeBox = on; break;                                 case Keyword_OwnDialogs: dialogOwner = guis[id]; break;                                 case Keyword_Owner: break;                                 case Keyword_Resize: break;                                 case Keyword_SysMenu: guis[id].ControlBox = on; break;                                 case Keyword_Theme: Application.EnableVisualStyles(); break;                                 case Keyword_ToolWindow: break;                                 case Keyword_Redraw: guis[id].Refresh(); break;                                 case Keyword_Cursor:                                     {                                         switch (Param2.ToLowerInvariant())                                         {                                             case "cross": guis[id].Cursor = Cursors.Cross; break;                                             case "hand": guis[id].Cursor = Cursors.Hand; break;                                             case "help": guis[id].Cursor = Cursors.Help; break;                                             case "beam": guis[id].Cursor = Cursors.IBeam; break;                                             case "no": guis[id].Cursor = Cursors.No; break;                                             case "wait": guis[id].Cursor = Cursors.WaitCursor; break;                                             case "nomove": guis[id].Cursor = Cursors.NoMove2D; break;                                             case "size": guis[id].Cursor = Cursors.SizeAll; break;                                             case "split":                                                 {                                                     if (Param3.ToLowerInvariant() == Keyword_Vertical)                                                         guis[id].Cursor = Cursors.VSplit;                                                     else                                                         guis[id].Cursor = Cursors.HSplit;                                                     break;                                                 }                                             case "pan":                                                 {                                                     switch (Param3.ToLowerInvariant())                                                     {                                                         case "east":                                                         case "e": guis[id].Cursor = Cursors.PanEast; break;                                                         case "south":                                                         case "s": guis[id].Cursor = Cursors.PanSouth; break;                                                         case "west":                                                         case "w": guis[id].Cursor = Cursors.PanWest; break;                                                         default:                                                         case "north":                                                         case "n": guis[id].Cursor = Cursors.PanNorth; break;                                                     }                                                     break;                                                 }                                             case "arrow":                                             default: guis[id].Cursor = Cursors.Arrow; break;                                         }                                         break;                                     }                                 case Keyword_Icon:                                     {                                         if (Param2 != string.Empty)                                         {                                             if (File.Exists(Param2))                                                 if (Path.GetExtension(Param2.ToLowerInvariant())==".ico")                                                     guis[id].Icon = new Icon(Param2);                                         }                                         guis[id].ShowIcon = on;                                         break;                                     }                                 case Keyword_TaskBar:                                     {                                         guis[id].ShowInTaskbar = on;                                         break;                                     }                                 case Keyword_BackGroundImage:                                     {                                         if (on)                                         {                                             if (File.Exists(Param2))                                             {                                                 guis[id].BackgroundImage = new Bitmap(Param2);                                                 switch (Param3.ToLowerInvariant())                                                 {                                                     case Keyword_None: guis[id].BackgroundImageLayout = ImageLayout.None; break;                                                     case Keyword_Tile: guis[id].BackgroundImageLayout = ImageLayout.Tile; break;                                                     case Keyword_Center: guis[id].BackgroundImageLayout = ImageLayout.Center; break;                                                     case Keyword_Zoom: guis[id].BackgroundImageLayout = ImageLayout.Zoom; break;                                                     case Keyword_Stretch:                                                     default: guis[id].BackgroundImageLayout = ImageLayout.Stretch; break;                                                 }                                             }                                                                                      }                                         else                                         {                                             guis[id].BackgroundImage = null;                                         }                                         break;                                     }                                 default:                                     string arg;                                     string[] parts;                                     int n;                                     Size size;                                     if (mode.StartsWith(Keyword_Delimiter))                                     {                                         arg = mode.Substring(Keyword_Delimiter.Length);                                         if (arg.Length > 0)                                             GuiAssociatedInfo(guis[id]).Delimiter = arg[0];                                     }                                     else if (mode.StartsWith(Keyword_Label))                                     {                                         arg = mode.Substring(Keyword_Label.Length);                                         if (arg.Length > 0)                                             guis[id].Name = arg;                                     }                                     else if (mode.StartsWith(Keyword_MinSize))                                     {                                         arg = mode.Substring(Keyword_MinSize.Length);                                         parts = arg.Split(new[] { "x"' "X"' "*" }' 2' StringSplitOptions.None);                                         size = guis[id].MinimumSize;                                          if (parts.Length > 0 && int.TryParse(parts[0]' out n))                                             size.Width = n;                                         if (parts.Length > 1 && int.TryParse(parts[1]' out n))                                             size.Height = n;                                          guis[id].MinimumSize = size;                                     }                                     else if (mode.StartsWith(Keyword_MaxSize))                                     {                                         arg = mode.Substring(Keyword_MaxSize.Length);                                         parts = arg.Split(new[] { "x"' "X"' "*" }' 2' StringSplitOptions.None);                                         size = guis[id].MaximumSize;                                          if (parts.Length > 0 && int.TryParse(parts[0]' out n))                                             size.Width = n;                                         if (parts.Length > 1 && int.TryParse(parts[1]' out n))                                             size.Height = n;                                          guis[id].MaximumSize = size;                                     }                                     break;                             }                         }                     }                     break;                  #endregion             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Gui,The following statement contains a magic number: switch (Command.ToLowerInvariant())             {                 #region Add                  case Keyword_Add:                     {                         Control control = null;                         GuiControlEdit(ref control' guis[id]' Param2' Param3' Param4);                         GuiAssociatedInfo(control).LastControl = control;                     }                     break;                  #endregion                  #region Show                  case Keyword_Show:                     {                         bool center = false' cX = false' cY = false' auto = false' min = false' max = false' restore = false' hide = false;                         int?[] pos = { null' null' null' null };                          foreach (var option in ParseOptions(Param2))                         {                             string mode = option.ToLowerInvariant();                             int select = -1;                              switch (mode[0])                             {                                 case 'w': select = 0; break;                                 case 'h': select = 1; break;                                 case 'x': select = 2; break;                                 case 'y': select = 3; break;                             }                              if (select == -1)                             {                                 switch (mode)                                 {                                     case Keyword_Center: center = true; break;                                     case Keyword_AutoSize: auto = true; break;                                     case Keyword_Maximize: max = true; break;                                     case Keyword_Minimize: min = true; break;                                     case Keyword_Restore: restore = true; break;                                     case Keyword_NoActivate: break;                                     case Keyword_NA: break;                                     case Keyword_Hide: hide = true; break;                                 }                             }                             else                             {                                 mode = mode.Substring(1);                                 int n;                                  if (mode.Equals(Keyword_Center' StringComparison.OrdinalIgnoreCase))                                 {                                     if (select == 2)                                         cX = true;                                     else                                         cY = true;                                 }                                 else if (mode.Length != 0 && int.TryParse(mode' out n))                                     pos[select] = n;                             }                         }                          if (auto || pos[0] == null && pos[1] == null)                         {                             guis[id].Size = guis[id].PreferredSize;                              var status = GuiAssociatedInfo(guis[id]).StatusBar;                             int d = status == null ? 0 : status.Height;                              if (d > 0)                                 guis[id].ClientSize = new Size(guis[id].ClientSize.Width' guis[id].ClientSize.Height + d);                         }                         else                         {                             var size = guis[id].PreferredSize;                              if (pos[0] != null)                                 size.Width = (int)pos[0];                             if (pos[1] != null)                                 size.Height = (int)pos[1];                              guis[id].ClientSize = size;                         }                          var location = new Point();                          if (pos[2] != null)                             location.X = (int)pos[2];                         if (pos[3] != null)                             location.Y = (int)pos[3];                          var screen = Screen.PrimaryScreen.Bounds;                          if (location == null)                             center = true;                          if (center)                             cX = cY = true;                          if (cX)                             location.X = (screen.Width - guis[id].Size.Width) / 2 + screen.X;                         if (cY)                             location.Y = (screen.Height - guis[id].Size.Height) / 2 + screen.Y;                          guis[id].StartPosition = FormStartPosition.Manual;                         guis[id].Location = location;                          guis[id].Text = Param3;                          if (hide)                             guis[id].Hide();                         else                             guis[id].Show();                          guis[id].ResumeLayout(true);                          if (min)                             guis[id].WindowState = FormWindowState.Minimized;                         else if (max)                             guis[id].WindowState = FormWindowState.Maximized;                         else if (restore)                             guis[id].WindowState = FormWindowState.Normal;                                              }                     break;                  #endregion                  #region Misc.                  case Keyword_Submit:                     {                         if (!Keyword_NoHide.Equals(Param2' StringComparison.OrdinalIgnoreCase))                             guis[id].Hide();                          // TODO: way to return multipart variable (A_LastResult?) for Gui'Submit and GuiControlGet''Pos                     }                     break;                  case Keyword_Cancel:                 case Keyword_Hide:                     guis[id].Hide();                     break;                  case Keyword_Destroy:                     guis[id].Hide();                     guis[id].Dispose();                     guis.Remove(id);                     break;                  case Keyword_Font:                     GuiAssociatedInfo(guis[id]).Font = string.IsNullOrEmpty(Param2) && string.IsNullOrEmpty(Param3) ?                         guis[id].Font : ParseFont(GuiAssociatedInfo(guis[id]).Font' Param2' Param3);                     break;                  case Keyword_Color:                     Color c;                     if(Keyword_Default.Equals(Param2' StringComparison.OrdinalIgnoreCase))                         c = Color.LightGray; //TODO: Use correctly Control color' BUT NOT Transparent.                     else                         c = ParseColor(Param2);                     if(c.A == 0xFF)                         guis[id].BackColor = c;                     break;                  case Keyword_Margin:                     {                         int d' x = guis[id].Margin.Left' y = guis[id].Margin.Top;                          if (int.TryParse(Param2' out d))                             x = d;                          if (int.TryParse(Param3' out d))                             y = d;                          guis[id].Margin = new Padding(x' y' x' y);                     }                     break;                  case Keyword_Menu:                     break;                  case Keyword_Minimize:                     guis[id].WindowState = FormWindowState.Minimized;                     break;                  case Keyword_Maximize:                     guis[id].WindowState = FormWindowState.Maximized;                     break;                  case Keyword_Restore:                     guis[id].WindowState = FormWindowState.Normal;                     break;                  case Keyword_Flash:                     if (Environment.OSVersion.Platform == PlatformID.Win32NT)                         WindowsAPI.FlashWindow(guis[id].Handle' OnOff(Param2) ?? true);                     break;                  case Keyword_Default:                     DefaultGuiId = id;                     break;                  case Keyword_TreeView:                     {                         var tree = GuiFindControl(Param2' guis[id]);                          if (tree == null || !typeof(TreeView).IsAssignableFrom(tree.GetType()))                             DefaultTreeView = null;                         else                             DefaultTreeView = (TreeView)tree;                     }                     break;                  case Keyword_ListView:                     {                         var list = GuiFindControl(Param2' guis[id]);                          if (list == null || !typeof(ListView).IsAssignableFrom(list.GetType()))                             DefaultListView = null;                         else                             DefaultListView = (ListView)list;                     }                     break;                  #endregion                  #region Options                  default:                     {                         foreach (var option in ParseOptions(Command))                         {                             bool on = option[0] != '-';                             string mode = option;                              if (mode[0] == '+' || mode[0] == '-')                                 mode = mode.Substring(1);                              if (mode.Length == 0)                                 continue;                              mode = mode.ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_AlwaysOnTop: guis[id].TopMost = on; break;                                 case Keyword_Border: break;                                 case Keyword_Caption: break;                                 case Keyword_Disabled: guis[id].Enabled = !on; break;                                 case Keyword_LastFound: lastFoundForm = guis[id].Handle.ToInt64(); break;                                 case Keyword_LastFoundExist: lastFoundForm = guis[id].Handle.ToInt64(); break;                                 case Keyword_MaximizeBox: guis[id].MaximizeBox = on; break;                                 case Keyword_MinimizeBox: guis[id].MinimizeBox = on; break;                                 case Keyword_OwnDialogs: dialogOwner = guis[id]; break;                                 case Keyword_Owner: break;                                 case Keyword_Resize: break;                                 case Keyword_SysMenu: guis[id].ControlBox = on; break;                                 case Keyword_Theme: Application.EnableVisualStyles(); break;                                 case Keyword_ToolWindow: break;                                 case Keyword_Redraw: guis[id].Refresh(); break;                                 case Keyword_Cursor:                                     {                                         switch (Param2.ToLowerInvariant())                                         {                                             case "cross": guis[id].Cursor = Cursors.Cross; break;                                             case "hand": guis[id].Cursor = Cursors.Hand; break;                                             case "help": guis[id].Cursor = Cursors.Help; break;                                             case "beam": guis[id].Cursor = Cursors.IBeam; break;                                             case "no": guis[id].Cursor = Cursors.No; break;                                             case "wait": guis[id].Cursor = Cursors.WaitCursor; break;                                             case "nomove": guis[id].Cursor = Cursors.NoMove2D; break;                                             case "size": guis[id].Cursor = Cursors.SizeAll; break;                                             case "split":                                                 {                                                     if (Param3.ToLowerInvariant() == Keyword_Vertical)                                                         guis[id].Cursor = Cursors.VSplit;                                                     else                                                         guis[id].Cursor = Cursors.HSplit;                                                     break;                                                 }                                             case "pan":                                                 {                                                     switch (Param3.ToLowerInvariant())                                                     {                                                         case "east":                                                         case "e": guis[id].Cursor = Cursors.PanEast; break;                                                         case "south":                                                         case "s": guis[id].Cursor = Cursors.PanSouth; break;                                                         case "west":                                                         case "w": guis[id].Cursor = Cursors.PanWest; break;                                                         default:                                                         case "north":                                                         case "n": guis[id].Cursor = Cursors.PanNorth; break;                                                     }                                                     break;                                                 }                                             case "arrow":                                             default: guis[id].Cursor = Cursors.Arrow; break;                                         }                                         break;                                     }                                 case Keyword_Icon:                                     {                                         if (Param2 != string.Empty)                                         {                                             if (File.Exists(Param2))                                                 if (Path.GetExtension(Param2.ToLowerInvariant())==".ico")                                                     guis[id].Icon = new Icon(Param2);                                         }                                         guis[id].ShowIcon = on;                                         break;                                     }                                 case Keyword_TaskBar:                                     {                                         guis[id].ShowInTaskbar = on;                                         break;                                     }                                 case Keyword_BackGroundImage:                                     {                                         if (on)                                         {                                             if (File.Exists(Param2))                                             {                                                 guis[id].BackgroundImage = new Bitmap(Param2);                                                 switch (Param3.ToLowerInvariant())                                                 {                                                     case Keyword_None: guis[id].BackgroundImageLayout = ImageLayout.None; break;                                                     case Keyword_Tile: guis[id].BackgroundImageLayout = ImageLayout.Tile; break;                                                     case Keyword_Center: guis[id].BackgroundImageLayout = ImageLayout.Center; break;                                                     case Keyword_Zoom: guis[id].BackgroundImageLayout = ImageLayout.Zoom; break;                                                     case Keyword_Stretch:                                                     default: guis[id].BackgroundImageLayout = ImageLayout.Stretch; break;                                                 }                                             }                                                                                      }                                         else                                         {                                             guis[id].BackgroundImage = null;                                         }                                         break;                                     }                                 default:                                     string arg;                                     string[] parts;                                     int n;                                     Size size;                                     if (mode.StartsWith(Keyword_Delimiter))                                     {                                         arg = mode.Substring(Keyword_Delimiter.Length);                                         if (arg.Length > 0)                                             GuiAssociatedInfo(guis[id]).Delimiter = arg[0];                                     }                                     else if (mode.StartsWith(Keyword_Label))                                     {                                         arg = mode.Substring(Keyword_Label.Length);                                         if (arg.Length > 0)                                             guis[id].Name = arg;                                     }                                     else if (mode.StartsWith(Keyword_MinSize))                                     {                                         arg = mode.Substring(Keyword_MinSize.Length);                                         parts = arg.Split(new[] { "x"' "X"' "*" }' 2' StringSplitOptions.None);                                         size = guis[id].MinimumSize;                                          if (parts.Length > 0 && int.TryParse(parts[0]' out n))                                             size.Width = n;                                         if (parts.Length > 1 && int.TryParse(parts[1]' out n))                                             size.Height = n;                                          guis[id].MinimumSize = size;                                     }                                     else if (mode.StartsWith(Keyword_MaxSize))                                     {                                         arg = mode.Substring(Keyword_MaxSize.Length);                                         parts = arg.Split(new[] { "x"' "X"' "*" }' 2' StringSplitOptions.None);                                         size = guis[id].MaximumSize;                                          if (parts.Length > 0 && int.TryParse(parts[0]' out n))                                             size.Width = n;                                         if (parts.Length > 1 && int.TryParse(parts[1]' out n))                                             size.Height = n;                                          guis[id].MaximumSize = size;                                     }                                     break;                             }                         }                     }                     break;                  #endregion             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Gui,The following statement contains a magic number: switch (Command.ToLowerInvariant())             {                 #region Add                  case Keyword_Add:                     {                         Control control = null;                         GuiControlEdit(ref control' guis[id]' Param2' Param3' Param4);                         GuiAssociatedInfo(control).LastControl = control;                     }                     break;                  #endregion                  #region Show                  case Keyword_Show:                     {                         bool center = false' cX = false' cY = false' auto = false' min = false' max = false' restore = false' hide = false;                         int?[] pos = { null' null' null' null };                          foreach (var option in ParseOptions(Param2))                         {                             string mode = option.ToLowerInvariant();                             int select = -1;                              switch (mode[0])                             {                                 case 'w': select = 0; break;                                 case 'h': select = 1; break;                                 case 'x': select = 2; break;                                 case 'y': select = 3; break;                             }                              if (select == -1)                             {                                 switch (mode)                                 {                                     case Keyword_Center: center = true; break;                                     case Keyword_AutoSize: auto = true; break;                                     case Keyword_Maximize: max = true; break;                                     case Keyword_Minimize: min = true; break;                                     case Keyword_Restore: restore = true; break;                                     case Keyword_NoActivate: break;                                     case Keyword_NA: break;                                     case Keyword_Hide: hide = true; break;                                 }                             }                             else                             {                                 mode = mode.Substring(1);                                 int n;                                  if (mode.Equals(Keyword_Center' StringComparison.OrdinalIgnoreCase))                                 {                                     if (select == 2)                                         cX = true;                                     else                                         cY = true;                                 }                                 else if (mode.Length != 0 && int.TryParse(mode' out n))                                     pos[select] = n;                             }                         }                          if (auto || pos[0] == null && pos[1] == null)                         {                             guis[id].Size = guis[id].PreferredSize;                              var status = GuiAssociatedInfo(guis[id]).StatusBar;                             int d = status == null ? 0 : status.Height;                              if (d > 0)                                 guis[id].ClientSize = new Size(guis[id].ClientSize.Width' guis[id].ClientSize.Height + d);                         }                         else                         {                             var size = guis[id].PreferredSize;                              if (pos[0] != null)                                 size.Width = (int)pos[0];                             if (pos[1] != null)                                 size.Height = (int)pos[1];                              guis[id].ClientSize = size;                         }                          var location = new Point();                          if (pos[2] != null)                             location.X = (int)pos[2];                         if (pos[3] != null)                             location.Y = (int)pos[3];                          var screen = Screen.PrimaryScreen.Bounds;                          if (location == null)                             center = true;                          if (center)                             cX = cY = true;                          if (cX)                             location.X = (screen.Width - guis[id].Size.Width) / 2 + screen.X;                         if (cY)                             location.Y = (screen.Height - guis[id].Size.Height) / 2 + screen.Y;                          guis[id].StartPosition = FormStartPosition.Manual;                         guis[id].Location = location;                          guis[id].Text = Param3;                          if (hide)                             guis[id].Hide();                         else                             guis[id].Show();                          guis[id].ResumeLayout(true);                          if (min)                             guis[id].WindowState = FormWindowState.Minimized;                         else if (max)                             guis[id].WindowState = FormWindowState.Maximized;                         else if (restore)                             guis[id].WindowState = FormWindowState.Normal;                                              }                     break;                  #endregion                  #region Misc.                  case Keyword_Submit:                     {                         if (!Keyword_NoHide.Equals(Param2' StringComparison.OrdinalIgnoreCase))                             guis[id].Hide();                          // TODO: way to return multipart variable (A_LastResult?) for Gui'Submit and GuiControlGet''Pos                     }                     break;                  case Keyword_Cancel:                 case Keyword_Hide:                     guis[id].Hide();                     break;                  case Keyword_Destroy:                     guis[id].Hide();                     guis[id].Dispose();                     guis.Remove(id);                     break;                  case Keyword_Font:                     GuiAssociatedInfo(guis[id]).Font = string.IsNullOrEmpty(Param2) && string.IsNullOrEmpty(Param3) ?                         guis[id].Font : ParseFont(GuiAssociatedInfo(guis[id]).Font' Param2' Param3);                     break;                  case Keyword_Color:                     Color c;                     if(Keyword_Default.Equals(Param2' StringComparison.OrdinalIgnoreCase))                         c = Color.LightGray; //TODO: Use correctly Control color' BUT NOT Transparent.                     else                         c = ParseColor(Param2);                     if(c.A == 0xFF)                         guis[id].BackColor = c;                     break;                  case Keyword_Margin:                     {                         int d' x = guis[id].Margin.Left' y = guis[id].Margin.Top;                          if (int.TryParse(Param2' out d))                             x = d;                          if (int.TryParse(Param3' out d))                             y = d;                          guis[id].Margin = new Padding(x' y' x' y);                     }                     break;                  case Keyword_Menu:                     break;                  case Keyword_Minimize:                     guis[id].WindowState = FormWindowState.Minimized;                     break;                  case Keyword_Maximize:                     guis[id].WindowState = FormWindowState.Maximized;                     break;                  case Keyword_Restore:                     guis[id].WindowState = FormWindowState.Normal;                     break;                  case Keyword_Flash:                     if (Environment.OSVersion.Platform == PlatformID.Win32NT)                         WindowsAPI.FlashWindow(guis[id].Handle' OnOff(Param2) ?? true);                     break;                  case Keyword_Default:                     DefaultGuiId = id;                     break;                  case Keyword_TreeView:                     {                         var tree = GuiFindControl(Param2' guis[id]);                          if (tree == null || !typeof(TreeView).IsAssignableFrom(tree.GetType()))                             DefaultTreeView = null;                         else                             DefaultTreeView = (TreeView)tree;                     }                     break;                  case Keyword_ListView:                     {                         var list = GuiFindControl(Param2' guis[id]);                          if (list == null || !typeof(ListView).IsAssignableFrom(list.GetType()))                             DefaultListView = null;                         else                             DefaultListView = (ListView)list;                     }                     break;                  #endregion                  #region Options                  default:                     {                         foreach (var option in ParseOptions(Command))                         {                             bool on = option[0] != '-';                             string mode = option;                              if (mode[0] == '+' || mode[0] == '-')                                 mode = mode.Substring(1);                              if (mode.Length == 0)                                 continue;                              mode = mode.ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_AlwaysOnTop: guis[id].TopMost = on; break;                                 case Keyword_Border: break;                                 case Keyword_Caption: break;                                 case Keyword_Disabled: guis[id].Enabled = !on; break;                                 case Keyword_LastFound: lastFoundForm = guis[id].Handle.ToInt64(); break;                                 case Keyword_LastFoundExist: lastFoundForm = guis[id].Handle.ToInt64(); break;                                 case Keyword_MaximizeBox: guis[id].MaximizeBox = on; break;                                 case Keyword_MinimizeBox: guis[id].MinimizeBox = on; break;                                 case Keyword_OwnDialogs: dialogOwner = guis[id]; break;                                 case Keyword_Owner: break;                                 case Keyword_Resize: break;                                 case Keyword_SysMenu: guis[id].ControlBox = on; break;                                 case Keyword_Theme: Application.EnableVisualStyles(); break;                                 case Keyword_ToolWindow: break;                                 case Keyword_Redraw: guis[id].Refresh(); break;                                 case Keyword_Cursor:                                     {                                         switch (Param2.ToLowerInvariant())                                         {                                             case "cross": guis[id].Cursor = Cursors.Cross; break;                                             case "hand": guis[id].Cursor = Cursors.Hand; break;                                             case "help": guis[id].Cursor = Cursors.Help; break;                                             case "beam": guis[id].Cursor = Cursors.IBeam; break;                                             case "no": guis[id].Cursor = Cursors.No; break;                                             case "wait": guis[id].Cursor = Cursors.WaitCursor; break;                                             case "nomove": guis[id].Cursor = Cursors.NoMove2D; break;                                             case "size": guis[id].Cursor = Cursors.SizeAll; break;                                             case "split":                                                 {                                                     if (Param3.ToLowerInvariant() == Keyword_Vertical)                                                         guis[id].Cursor = Cursors.VSplit;                                                     else                                                         guis[id].Cursor = Cursors.HSplit;                                                     break;                                                 }                                             case "pan":                                                 {                                                     switch (Param3.ToLowerInvariant())                                                     {                                                         case "east":                                                         case "e": guis[id].Cursor = Cursors.PanEast; break;                                                         case "south":                                                         case "s": guis[id].Cursor = Cursors.PanSouth; break;                                                         case "west":                                                         case "w": guis[id].Cursor = Cursors.PanWest; break;                                                         default:                                                         case "north":                                                         case "n": guis[id].Cursor = Cursors.PanNorth; break;                                                     }                                                     break;                                                 }                                             case "arrow":                                             default: guis[id].Cursor = Cursors.Arrow; break;                                         }                                         break;                                     }                                 case Keyword_Icon:                                     {                                         if (Param2 != string.Empty)                                         {                                             if (File.Exists(Param2))                                                 if (Path.GetExtension(Param2.ToLowerInvariant())==".ico")                                                     guis[id].Icon = new Icon(Param2);                                         }                                         guis[id].ShowIcon = on;                                         break;                                     }                                 case Keyword_TaskBar:                                     {                                         guis[id].ShowInTaskbar = on;                                         break;                                     }                                 case Keyword_BackGroundImage:                                     {                                         if (on)                                         {                                             if (File.Exists(Param2))                                             {                                                 guis[id].BackgroundImage = new Bitmap(Param2);                                                 switch (Param3.ToLowerInvariant())                                                 {                                                     case Keyword_None: guis[id].BackgroundImageLayout = ImageLayout.None; break;                                                     case Keyword_Tile: guis[id].BackgroundImageLayout = ImageLayout.Tile; break;                                                     case Keyword_Center: guis[id].BackgroundImageLayout = ImageLayout.Center; break;                                                     case Keyword_Zoom: guis[id].BackgroundImageLayout = ImageLayout.Zoom; break;                                                     case Keyword_Stretch:                                                     default: guis[id].BackgroundImageLayout = ImageLayout.Stretch; break;                                                 }                                             }                                                                                      }                                         else                                         {                                             guis[id].BackgroundImage = null;                                         }                                         break;                                     }                                 default:                                     string arg;                                     string[] parts;                                     int n;                                     Size size;                                     if (mode.StartsWith(Keyword_Delimiter))                                     {                                         arg = mode.Substring(Keyword_Delimiter.Length);                                         if (arg.Length > 0)                                             GuiAssociatedInfo(guis[id]).Delimiter = arg[0];                                     }                                     else if (mode.StartsWith(Keyword_Label))                                     {                                         arg = mode.Substring(Keyword_Label.Length);                                         if (arg.Length > 0)                                             guis[id].Name = arg;                                     }                                     else if (mode.StartsWith(Keyword_MinSize))                                     {                                         arg = mode.Substring(Keyword_MinSize.Length);                                         parts = arg.Split(new[] { "x"' "X"' "*" }' 2' StringSplitOptions.None);                                         size = guis[id].MinimumSize;                                          if (parts.Length > 0 && int.TryParse(parts[0]' out n))                                             size.Width = n;                                         if (parts.Length > 1 && int.TryParse(parts[1]' out n))                                             size.Height = n;                                          guis[id].MinimumSize = size;                                     }                                     else if (mode.StartsWith(Keyword_MaxSize))                                     {                                         arg = mode.Substring(Keyword_MaxSize.Length);                                         parts = arg.Split(new[] { "x"' "X"' "*" }' 2' StringSplitOptions.None);                                         size = guis[id].MaximumSize;                                          if (parts.Length > 0 && int.TryParse(parts[0]' out n))                                             size.Width = n;                                         if (parts.Length > 1 && int.TryParse(parts[1]' out n))                                             size.Height = n;                                          guis[id].MaximumSize = size;                                     }                                     break;                             }                         }                     }                     break;                  #endregion             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Gui,The following statement contains a magic number: switch (Command.ToLowerInvariant())             {                 #region Add                  case Keyword_Add:                     {                         Control control = null;                         GuiControlEdit(ref control' guis[id]' Param2' Param3' Param4);                         GuiAssociatedInfo(control).LastControl = control;                     }                     break;                  #endregion                  #region Show                  case Keyword_Show:                     {                         bool center = false' cX = false' cY = false' auto = false' min = false' max = false' restore = false' hide = false;                         int?[] pos = { null' null' null' null };                          foreach (var option in ParseOptions(Param2))                         {                             string mode = option.ToLowerInvariant();                             int select = -1;                              switch (mode[0])                             {                                 case 'w': select = 0; break;                                 case 'h': select = 1; break;                                 case 'x': select = 2; break;                                 case 'y': select = 3; break;                             }                              if (select == -1)                             {                                 switch (mode)                                 {                                     case Keyword_Center: center = true; break;                                     case Keyword_AutoSize: auto = true; break;                                     case Keyword_Maximize: max = true; break;                                     case Keyword_Minimize: min = true; break;                                     case Keyword_Restore: restore = true; break;                                     case Keyword_NoActivate: break;                                     case Keyword_NA: break;                                     case Keyword_Hide: hide = true; break;                                 }                             }                             else                             {                                 mode = mode.Substring(1);                                 int n;                                  if (mode.Equals(Keyword_Center' StringComparison.OrdinalIgnoreCase))                                 {                                     if (select == 2)                                         cX = true;                                     else                                         cY = true;                                 }                                 else if (mode.Length != 0 && int.TryParse(mode' out n))                                     pos[select] = n;                             }                         }                          if (auto || pos[0] == null && pos[1] == null)                         {                             guis[id].Size = guis[id].PreferredSize;                              var status = GuiAssociatedInfo(guis[id]).StatusBar;                             int d = status == null ? 0 : status.Height;                              if (d > 0)                                 guis[id].ClientSize = new Size(guis[id].ClientSize.Width' guis[id].ClientSize.Height + d);                         }                         else                         {                             var size = guis[id].PreferredSize;                              if (pos[0] != null)                                 size.Width = (int)pos[0];                             if (pos[1] != null)                                 size.Height = (int)pos[1];                              guis[id].ClientSize = size;                         }                          var location = new Point();                          if (pos[2] != null)                             location.X = (int)pos[2];                         if (pos[3] != null)                             location.Y = (int)pos[3];                          var screen = Screen.PrimaryScreen.Bounds;                          if (location == null)                             center = true;                          if (center)                             cX = cY = true;                          if (cX)                             location.X = (screen.Width - guis[id].Size.Width) / 2 + screen.X;                         if (cY)                             location.Y = (screen.Height - guis[id].Size.Height) / 2 + screen.Y;                          guis[id].StartPosition = FormStartPosition.Manual;                         guis[id].Location = location;                          guis[id].Text = Param3;                          if (hide)                             guis[id].Hide();                         else                             guis[id].Show();                          guis[id].ResumeLayout(true);                          if (min)                             guis[id].WindowState = FormWindowState.Minimized;                         else if (max)                             guis[id].WindowState = FormWindowState.Maximized;                         else if (restore)                             guis[id].WindowState = FormWindowState.Normal;                                              }                     break;                  #endregion                  #region Misc.                  case Keyword_Submit:                     {                         if (!Keyword_NoHide.Equals(Param2' StringComparison.OrdinalIgnoreCase))                             guis[id].Hide();                          // TODO: way to return multipart variable (A_LastResult?) for Gui'Submit and GuiControlGet''Pos                     }                     break;                  case Keyword_Cancel:                 case Keyword_Hide:                     guis[id].Hide();                     break;                  case Keyword_Destroy:                     guis[id].Hide();                     guis[id].Dispose();                     guis.Remove(id);                     break;                  case Keyword_Font:                     GuiAssociatedInfo(guis[id]).Font = string.IsNullOrEmpty(Param2) && string.IsNullOrEmpty(Param3) ?                         guis[id].Font : ParseFont(GuiAssociatedInfo(guis[id]).Font' Param2' Param3);                     break;                  case Keyword_Color:                     Color c;                     if(Keyword_Default.Equals(Param2' StringComparison.OrdinalIgnoreCase))                         c = Color.LightGray; //TODO: Use correctly Control color' BUT NOT Transparent.                     else                         c = ParseColor(Param2);                     if(c.A == 0xFF)                         guis[id].BackColor = c;                     break;                  case Keyword_Margin:                     {                         int d' x = guis[id].Margin.Left' y = guis[id].Margin.Top;                          if (int.TryParse(Param2' out d))                             x = d;                          if (int.TryParse(Param3' out d))                             y = d;                          guis[id].Margin = new Padding(x' y' x' y);                     }                     break;                  case Keyword_Menu:                     break;                  case Keyword_Minimize:                     guis[id].WindowState = FormWindowState.Minimized;                     break;                  case Keyword_Maximize:                     guis[id].WindowState = FormWindowState.Maximized;                     break;                  case Keyword_Restore:                     guis[id].WindowState = FormWindowState.Normal;                     break;                  case Keyword_Flash:                     if (Environment.OSVersion.Platform == PlatformID.Win32NT)                         WindowsAPI.FlashWindow(guis[id].Handle' OnOff(Param2) ?? true);                     break;                  case Keyword_Default:                     DefaultGuiId = id;                     break;                  case Keyword_TreeView:                     {                         var tree = GuiFindControl(Param2' guis[id]);                          if (tree == null || !typeof(TreeView).IsAssignableFrom(tree.GetType()))                             DefaultTreeView = null;                         else                             DefaultTreeView = (TreeView)tree;                     }                     break;                  case Keyword_ListView:                     {                         var list = GuiFindControl(Param2' guis[id]);                          if (list == null || !typeof(ListView).IsAssignableFrom(list.GetType()))                             DefaultListView = null;                         else                             DefaultListView = (ListView)list;                     }                     break;                  #endregion                  #region Options                  default:                     {                         foreach (var option in ParseOptions(Command))                         {                             bool on = option[0] != '-';                             string mode = option;                              if (mode[0] == '+' || mode[0] == '-')                                 mode = mode.Substring(1);                              if (mode.Length == 0)                                 continue;                              mode = mode.ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_AlwaysOnTop: guis[id].TopMost = on; break;                                 case Keyword_Border: break;                                 case Keyword_Caption: break;                                 case Keyword_Disabled: guis[id].Enabled = !on; break;                                 case Keyword_LastFound: lastFoundForm = guis[id].Handle.ToInt64(); break;                                 case Keyword_LastFoundExist: lastFoundForm = guis[id].Handle.ToInt64(); break;                                 case Keyword_MaximizeBox: guis[id].MaximizeBox = on; break;                                 case Keyword_MinimizeBox: guis[id].MinimizeBox = on; break;                                 case Keyword_OwnDialogs: dialogOwner = guis[id]; break;                                 case Keyword_Owner: break;                                 case Keyword_Resize: break;                                 case Keyword_SysMenu: guis[id].ControlBox = on; break;                                 case Keyword_Theme: Application.EnableVisualStyles(); break;                                 case Keyword_ToolWindow: break;                                 case Keyword_Redraw: guis[id].Refresh(); break;                                 case Keyword_Cursor:                                     {                                         switch (Param2.ToLowerInvariant())                                         {                                             case "cross": guis[id].Cursor = Cursors.Cross; break;                                             case "hand": guis[id].Cursor = Cursors.Hand; break;                                             case "help": guis[id].Cursor = Cursors.Help; break;                                             case "beam": guis[id].Cursor = Cursors.IBeam; break;                                             case "no": guis[id].Cursor = Cursors.No; break;                                             case "wait": guis[id].Cursor = Cursors.WaitCursor; break;                                             case "nomove": guis[id].Cursor = Cursors.NoMove2D; break;                                             case "size": guis[id].Cursor = Cursors.SizeAll; break;                                             case "split":                                                 {                                                     if (Param3.ToLowerInvariant() == Keyword_Vertical)                                                         guis[id].Cursor = Cursors.VSplit;                                                     else                                                         guis[id].Cursor = Cursors.HSplit;                                                     break;                                                 }                                             case "pan":                                                 {                                                     switch (Param3.ToLowerInvariant())                                                     {                                                         case "east":                                                         case "e": guis[id].Cursor = Cursors.PanEast; break;                                                         case "south":                                                         case "s": guis[id].Cursor = Cursors.PanSouth; break;                                                         case "west":                                                         case "w": guis[id].Cursor = Cursors.PanWest; break;                                                         default:                                                         case "north":                                                         case "n": guis[id].Cursor = Cursors.PanNorth; break;                                                     }                                                     break;                                                 }                                             case "arrow":                                             default: guis[id].Cursor = Cursors.Arrow; break;                                         }                                         break;                                     }                                 case Keyword_Icon:                                     {                                         if (Param2 != string.Empty)                                         {                                             if (File.Exists(Param2))                                                 if (Path.GetExtension(Param2.ToLowerInvariant())==".ico")                                                     guis[id].Icon = new Icon(Param2);                                         }                                         guis[id].ShowIcon = on;                                         break;                                     }                                 case Keyword_TaskBar:                                     {                                         guis[id].ShowInTaskbar = on;                                         break;                                     }                                 case Keyword_BackGroundImage:                                     {                                         if (on)                                         {                                             if (File.Exists(Param2))                                             {                                                 guis[id].BackgroundImage = new Bitmap(Param2);                                                 switch (Param3.ToLowerInvariant())                                                 {                                                     case Keyword_None: guis[id].BackgroundImageLayout = ImageLayout.None; break;                                                     case Keyword_Tile: guis[id].BackgroundImageLayout = ImageLayout.Tile; break;                                                     case Keyword_Center: guis[id].BackgroundImageLayout = ImageLayout.Center; break;                                                     case Keyword_Zoom: guis[id].BackgroundImageLayout = ImageLayout.Zoom; break;                                                     case Keyword_Stretch:                                                     default: guis[id].BackgroundImageLayout = ImageLayout.Stretch; break;                                                 }                                             }                                                                                      }                                         else                                         {                                             guis[id].BackgroundImage = null;                                         }                                         break;                                     }                                 default:                                     string arg;                                     string[] parts;                                     int n;                                     Size size;                                     if (mode.StartsWith(Keyword_Delimiter))                                     {                                         arg = mode.Substring(Keyword_Delimiter.Length);                                         if (arg.Length > 0)                                             GuiAssociatedInfo(guis[id]).Delimiter = arg[0];                                     }                                     else if (mode.StartsWith(Keyword_Label))                                     {                                         arg = mode.Substring(Keyword_Label.Length);                                         if (arg.Length > 0)                                             guis[id].Name = arg;                                     }                                     else if (mode.StartsWith(Keyword_MinSize))                                     {                                         arg = mode.Substring(Keyword_MinSize.Length);                                         parts = arg.Split(new[] { "x"' "X"' "*" }' 2' StringSplitOptions.None);                                         size = guis[id].MinimumSize;                                          if (parts.Length > 0 && int.TryParse(parts[0]' out n))                                             size.Width = n;                                         if (parts.Length > 1 && int.TryParse(parts[1]' out n))                                             size.Height = n;                                          guis[id].MinimumSize = size;                                     }                                     else if (mode.StartsWith(Keyword_MaxSize))                                     {                                         arg = mode.Substring(Keyword_MaxSize.Length);                                         parts = arg.Split(new[] { "x"' "X"' "*" }' 2' StringSplitOptions.None);                                         size = guis[id].MaximumSize;                                          if (parts.Length > 0 && int.TryParse(parts[0]' out n))                                             size.Width = n;                                         if (parts.Length > 1 && int.TryParse(parts[1]' out n))                                             size.Height = n;                                          guis[id].MaximumSize = size;                                     }                                     break;                             }                         }                     }                     break;                  #endregion             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlEdit,The following statement contains a magic number: switch (type.ToLowerInvariant())             {                 #region Text                 case Keyword_Text:                     {                         var text = (Label)(control ?? new Label());                         parent.Controls.Add(text);                         control = text;                         text.Text = content;                     }                     break;                 #endregion                  #region Edit                 case Keyword_Edit:                     {                         var edit = (TextBox)(control ?? new TextBox());                         parent.Controls.Add(edit);                         control = edit;                         edit.Text = NormaliseEol(content);                         edit.Tag = options;                         opts = GuiApplyStyles(edit' options);                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Limit:                                     if (!on)                                         edit.MaxLength = int.MaxValue;                                     break;                                  case Keyword_Lowercase: edit.CharacterCasing = on ? CharacterCasing.Lower : CharacterCasing.Normal; break;                                 case Keyword_Multi: edit.Multiline = on; break;                                 case Keyword_Number:                                     {                                         if (on)                                             edit.KeyPress += OnEditKeyPress;                                         else                                             edit.KeyPress -= OnEditKeyPress;                                         break;                                     }                                 case Keyword_Password: edit.PasswordChar = '●'; break;                                 case Keyword_Readonly: edit.ReadOnly = on; break;                                 case Keyword_Uppercase: edit.CharacterCasing = on ? CharacterCasing.Upper : CharacterCasing.Normal; break;                                 case Keyword_WantCtrlA: break; //I dont see that the normal ctrl+A works! perhaps new implementation?                                 case Keyword_WantReturn: edit.AcceptsReturn = on; break;                                 case Keyword_WantTab: edit.AcceptsTab = on; break;                                 case Keyword_Wrap: edit.WordWrap = on; break;                                  default:                                     int n;                                     if (mode.StartsWith(Keyword_Limit) && int.TryParse(mode.Substring(Keyword_Limit.Length)' out n))                                         edit.MaxLength = n;                                     break;                             }                         }                     }                     break;                 #endregion                  #region UpDown                 case Keyword_UpDown:                     {                         var updown = (NumericUpDown)(control ?? new NumericUpDown());                         var last = GuiAssociatedInfo(parent).LastControl;                          if (last != null && last is TextBox)                         {                             updown.Location = last.Location;                             updown.Size = last.Size;                             updown.Font = last.Font;                             updown.ForeColor = last.ForeColor;                             last.Parent.Controls.Remove(last);                             GuiAssociatedInfo(parent).Controls.Pop();                             options = string.Concat(last.Tag as string ?? string.Empty' " "' options);                         }                          parent.Controls.Add(updown);                         control = updown;                         updown.Value = decimal.Parse(content);                         opts = GuiApplyStyles(updown' options);                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Horz: break;                                 case Keyword_Left: break;                                 case Keyword_Wrap: break;                                 case "16": break;                                 case "0x80": break;                                  default:                                     if (mode.StartsWith(Keyword_Range))                                     {                                         string[] range = mode.Substring(Keyword_Range.Length).Split(new[] { "-" }' 2' StringSplitOptions.None);                                         decimal n;                                          if (decimal.TryParse(range[0]' out n))                                             updown.Minimum = n;                                          if (range.Length > 1 && decimal.TryParse(range[1]' out n))                                             updown.Maximum = n;                                     }                                     break;                             }                         }                     }                     break;                 #endregion                  #region Picture                 case Keyword_Picture:                 case Keyword_Pic:                     {                         var pic = (PictureBox)(control ?? new PictureBox());                         parent.Controls.Add(pic);                         control = pic;                         bool exists = File.Exists(content);                          if (exists)                         {                             pic.ImageLocation = content;                              try                             {                                 var image = Image.FromFile(pic.ImageLocation);                                 pic.Size = image.Size;                             }                             catch (Exception) { }                         }                          GuiApplyStyles(pic' options);                     }                     break;                 #endregion                  #region Button                 case Keyword_Button:                     {                         var button = (Button)(control ?? new Button());                         parent.Controls.Add(button);                         control = button;                         button.Text = content;                     }                     break;                 #endregion                  #region CheckBox                 case Keyword_CheckBox:                     {                         var check = (CheckBox)(control ?? new CheckBox());                         parent.Controls.Add(check);                         control = check;                         check.Text = content;                         opts = GuiApplyStyles(check' options);                          foreach (var opt in ParseOptions(opts))                         {                             switch (opt.ToLowerInvariant())                             {                                 case Keyword_Check3:                                 case Keyword_CheckedGray:                                     check.CheckState = CheckState.Indeterminate;                                     break;                                  case Keyword_Checked:                                     check.CheckState = CheckState.Checked;                                     break;                                  default:                                     if (opt.StartsWith(Keyword_Checked' StringComparison.OrdinalIgnoreCase))                                     {                                         string arg = opt.Substring(Keyword_Checked.Length).Trim();                                         int n;                                          if (int.TryParse(arg' out n))                                             check.CheckState = n == -1 ? CheckState.Indeterminate : n == 1 ? CheckState.Checked : CheckState.Unchecked;                                     }                                     break;                             }                         }                     }                     break;                 #endregion                  #region Radio                 case Keyword_Radio:                     {                         var radio = (RadioButton)(control ?? new RadioButton());                         parent.Controls.Add(radio);                         control = radio;                         radio.Text = content;                         radio.Checked = false;                         opts = GuiApplyStyles(radio' options);                          foreach (var opt in ParseOptions(opts))                         {                             switch (opt.ToLowerInvariant())                             {                                 case Keyword_Checked:                                     radio.Checked = true;                                     break;                                  default:                                     if (opt.StartsWith(Keyword_Checked' StringComparison.OrdinalIgnoreCase))                                     {                                         string arg = opt.Substring(Keyword_Checked.Length).Trim();                                         int n;                                          if (int.TryParse(arg' out n))                                             radio.Checked = n == 1;                                     }                                     break;                             }                         }                     }                     break;                 #endregion                  #region DropDownList                 case Keyword_DropDownList:                 case Keyword_DDL:                     {                         var ddl = (ComboBox)(control ?? new ComboBox());                         parent.Controls.Add(ddl);                         control = ddl;                         ddl.Text = content;                         ddl.DropDownStyle = ComboBoxStyle.DropDownList;                         opts = GuiApplyStyles(ddl' options);                          int select;                         bool clear;                         ddl.Items.AddRange(GuiParseList(ddl' out select' out clear));                          if (select > -1 && select < ddl.Items.Count)                             ddl.SelectedIndex = select;                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Sort: ddl.Sorted = on; break;                                 case Keyword_Uppercase: ddl.Text = ddl.Text.ToUpperInvariant(); break;                                 case Keyword_Lowercase: ddl.Text = ddl.Text.ToLowerInvariant(); break;                                  default:                                     if (mode.StartsWith(Keyword_Choose' StringComparison.OrdinalIgnoreCase))                                     {                                         mode = mode.Substring(Keyword_Choose.Length);                                         int n;                                          if (int.TryParse(mode' out n) && n > -1 && n < ddl.Items.Count)                                             ddl.SelectedIndex = n;                                     }                                     break;                             }                         }                     }                     break;                 #endregion                  #region ComboBox                 case Keyword_ComboBox:                     {                         var combo = (ComboBox)(control ?? new ComboBox());                         parent.Controls.Add(combo);                         control = combo;                         combo.Text = content;                         opts = GuiApplyStyles(combo' options);                          int select;                         bool clear;                         combo.Items.AddRange(GuiParseList(combo' out select' out clear));                          if (select > -1 && select < combo.Items.Count)                             combo.SelectedIndex = select;                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Limit: break;                                 case Keyword_Simple: break;                             }                         }                     }                     break;                 #endregion                  #region ListBox                 case Keyword_ListBox:                     {                         var listbox = new ListBox();                         parent.Controls.Add(listbox);                         control = listbox;                         listbox.Text = content;                         opts = GuiApplyStyles(listbox' options);                          int select;                         bool clear;                         listbox.Items.AddRange(GuiParseList(listbox' out select' out clear));                          if (select > -1 && select < listbox.Items.Count)                             listbox.SelectedIndex = select;                          bool multi = false' read = false;                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Multi:                                 case "8":                                     multi = on;                                     break;                                  case Keyword_Readonly: read = on; break;                                 case Keyword_Sort: listbox.Sorted = on; break;                                  default:                                     if (mode.StartsWith(Keyword_Choose' StringComparison.OrdinalIgnoreCase))                                     {                                         mode = mode.Substring(Keyword_Choose.Length);                                         int n;                                          if (int.TryParse(mode' out n) && n > -1 && n < listbox.Items.Count)                                             listbox.SelectedIndex = n;                                     }                                     break;                             }                         }                          listbox.SelectionMode = multi ? SelectionMode.MultiExtended : read ? SelectionMode.None : SelectionMode.One;                     }                     break;                 #endregion                  #region ListView                 case Keyword_ListView:                     {                         var lv = (ListView)(control ?? new ListView());                         parent.Controls.Add(lv);                         control = lv;                         lv.Text = content;                         opts = GuiApplyStyles(lv' options);                         lv.View = View.Details;                          int select;                         bool clear;                          foreach (var item in GuiParseList(lv' out select' out clear))                             lv.Columns.Add(new ColumnHeader { Text = item });                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Checked: lv.CheckBoxes = on; break;                                 case Keyword_Grid: lv.GridLines = on; break;                                 case Keyword_Hdr: break;                                 case "lv0x10": break;                                 case "lv0x20": break;                                 case Keyword_Multi: lv.MultiSelect = on; break;                                 case Keyword_NoSortHdr: break;                                 case Keyword_Readonly: break;                                 case Keyword_Sort: lv.Sorting = on ? SortOrder.Ascending : SortOrder.None; break;                                 case Keyword_SortDesc: lv.Sorting = on ? SortOrder.Descending : SortOrder.None; break;                                 case Keyword_WantF2: break;                             }                         }                     }                     break;                 #endregion                  #region TreeView                 case Keyword_TreeView:                     {                         var tree = (TreeView)(control ?? new TreeView());                         parent.Controls.Add(tree);                         control = tree;                         opts = GuiApplyStyles(tree' options);                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Buttons: break;                                 case Keyword_HScroll: break;                                 case Keyword_Lines: break;                                 case Keyword_Readonly: break;                                 case Keyword_WantF2: break;                                  default:                                     if (mode.StartsWith(Keyword_ImageList))                                     {                                         mode = mode.Substring(Keyword_ImageList.Length);                                          // UNDONE: TreeView control ImageList                                     }                                     break;                             }                         }                     }                     break;                 #endregion                  #region Hotkey                 case Keyword_Hotkey:                     {                         var hotkey = (HotkeyBox)(control ?? new HotkeyBox());                         parent.Controls.Add(hotkey);                         control = hotkey;                         opts = GuiApplyStyles(hotkey' options);                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Limit:                                     if (!on)                                         hotkey.Limit = HotkeyBox.Limits.None;                                     else                                     {                                         int n;                                          if (int.TryParse(mode' out n))                                             hotkey.Limit = (HotkeyBox.Limits)n;                                     }                                     break;                             }                         }                      }                     break;                 #endregion                  #region DateTime                 case Keyword_DateTime:                     {                         var date = (DateTimePicker)(control ?? new DateTimePicker());                         parent.Controls.Add(date);                         control = date;                         opts = GuiApplyStyles(date' options);                         if (content == string.Empty)                             date.Value = DateTime.Now;                         else                             date.Value = ToDateTime(content);                         date.Format = DateTimePickerFormat.Short;                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case "1": date.ShowUpDown = on; break;                                 case "2": date.ShowCheckBox = on; break;                                 case Keyword_Right: date.DropDownAlign = LeftRightAlignment.Right; break; //***Bug*** - case dont match!                                 case Keyword_LongDate: date.Format = DateTimePickerFormat.Long; date.Value = DateTime.Now; break;                                 case Keyword_Time: date.Format = DateTimePickerFormat.Time; date.Value = DateTime.Now; break;                                  default:                                     if (mode.StartsWith(Keyword_Range))                                     {                                         string[] range = mode.Substring(Keyword_Range.Length).Split(new[] { "-" }' 2' StringSplitOptions.None);                                          if (range[0].Length != 0)                                             date.MinDate = ToDateTime(range[0]);                                          if (range.Length > 0 && range[1].Length != 0)                                             date.MaxDate = ToDateTime(range[1]);                                      }                                     else if (mode.StartsWith(Keyword_Choose))                                     {                                         mode = mode.Substring(Keyword_Choose.Length);                                          if (mode.Length != 0)                                             date.Value = ToDateTime(mode);                                     }                                     break;                             }                         }                     }                     break;                 #endregion                  #region MonthCal                 case Keyword_MonthCal:                     {                         var cal = (MonthCalendar)(control ?? new MonthCalendar());                         parent.Controls.Add(cal);                         control = cal;                         opts = GuiApplyStyles(cal' options);                          if (!string.IsNullOrEmpty(content))                             cal.SetDate(ToDateTime(content));                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case "4": cal.ShowWeekNumbers = on; break;                                 case "8": cal.ShowTodayCircle = on; break;                                 case "16": cal.ShowToday = on; break;                                 case Keyword_Multi: cal.MaxSelectionCount = int.MaxValue; break;                                  default:                                     if (mode.StartsWith(Keyword_Range' StringComparison.OrdinalIgnoreCase))                                     {                                         string[] range = mode.Substring(Keyword_Range.Length).Split(new[] { "-" }' 2' StringSplitOptions.None);                                          if (!string.IsNullOrEmpty(range[0]))                                             cal.MinDate = ToDateTime(range[0]);                                          if (range.Length > 1 && !string.IsNullOrEmpty(range[1]))                                             cal.MaxDate = ToDateTime(range[1]);                                     }                                     break;                             }                         }                        }                     break;                 #endregion                  #region Slider                 case Keyword_Slider:                     {                         var slider = (TrackBar)(control ?? new TrackBar());                         parent.Controls.Add(slider);                         control = slider;                         opts = GuiApplyStyles(slider' options);                          int n;                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 // UNDONE: misc slider properties                                 case Keyword_Center: break;                                 case Keyword_Invert: break;                                 case Keyword_Left: break;                                 case Keyword_NoTicks: slider.TickStyle = TickStyle.None; break;                                 case Keyword_Thick: break;                                 case Keyword_Vertical: slider.Orientation = Orientation.Vertical; break;                                  default:                                     if (mode.StartsWith(Keyword_Line))                                     {                                         mode = mode.Substring(Keyword_Line.Length);                                          // UNDONE: slider line property                                     }                                     else if (mode.StartsWith(Keyword_Page))                                     {                                         mode = mode.Substring(Keyword_Page.Length);                                          // UNDONE: slider page property                                     }                                     else if (mode.StartsWith(Keyword_Range))                                     {                                         mode = mode.Substring(Keyword_Range.Length);                                         string[] parts = mode.Split(new[] { "-" }' 2' StringSplitOptions.None);                                          if (parts[0].Length != 0 && int.TryParse(parts[0]' out n))                                             slider.Minimum = n;                                          if (parts.Length > 0 && parts[1].Length != 0 && int.TryParse(parts[1]' out n))                                             slider.Maximum = n;                                     }                                     else if (mode.StartsWith(Keyword_TickInterval))                                     {                                         mode = mode.Substring(Keyword_TickInterval.Length);                                          if (mode.Length != 0 && int.TryParse(mode' out n))                                             slider.TickFrequency = n;                                     }                                     else if (mode.StartsWith(Keyword_ToolTip))                                     {                                         mode = mode.Substring(Keyword_ToolTip.Length);                                          switch (mode) // UNDONE: slider tooltip alignment                                         {                                             case Keyword_Left: break;                                             case Keyword_Right: break;                                             case Keyword_Top: break;                                             case Keyword_Bottom: break;                                         }                                     }                                     break;                             }                         }                          if (!string.IsNullOrEmpty(content) && int.TryParse(content' out n))                             slider.Value = Math.Max(slider.Minimum' Math.Min(slider.Maximum' n));                     }                     break;                 #endregion                  #region Progress                 case Keyword_Progress:                     {                         var progress = (ProgressBar)(control ?? new ProgressBar());                         parent.Controls.Add(progress);                         control = progress;                         opts = GuiApplyStyles(progress' options);                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Smooth: break;                                 case Keyword_Vertical: break; // TODO: vertical progress bar Gui control                                  default:                                     if (mode.StartsWith(Keyword_Range))                                     {                                         mode = mode.Substring(Keyword_Range.Length);                                         int z = mode.IndexOf('-');                                         string a = mode' b;                                          if (z == -1)                                             b = string.Empty;                                         else                                         {                                             a = mode.Substring(0' z);                                             z++;                                             b = z == mode.Length ? string.Empty : mode.Substring(z);                                         }                                          int x' y;                                          if (int.TryParse(a' out x))                                             progress.Minimum = x;                                          if (int.TryParse(b' out y) && y > x)                                             progress.Maximum = y;                                     }                                     else if (mode.StartsWith(Keyword_Background))                                     {                                         mode = mode.Substring(Keyword_Background.Length);                                         progress.ForeColor = ParseColor(mode);                                     }                                     break;                             }                         }                          int n;                          if (!string.IsNullOrEmpty(content) && int.TryParse(content' out n))                             progress.Value = Math.Max(progress.Minimum' Math.Min(progress.Maximum' n));                     }                     break;                 #endregion                  #region GroupBox                 case Keyword_GroupBox:                     {                         var group = (GroupBox)(control ?? new GroupBox());                         parent.Controls.Add(group);                         control = group;                         group.Text = content;                     }                     break;                 #endregion                  #region Tab                 case Keyword_Tab:                 case Keyword_Tab2:                     {                         var tab = (TabControl)(control ?? new TabControl());                         parent.Controls.Add(tab);                         control = tab;                         opts = GuiApplyStyles(tab' options);                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Background: break;                                 case Keyword_Buttons: break;                                 case Keyword_Top: tab.Alignment = TabAlignment.Top; break;                                 case Keyword_Left: tab.Alignment = TabAlignment.Left; break;                                 case Keyword_Right: tab.Alignment = TabAlignment.Right; break;                                 case Keyword_Bottom: tab.Alignment = TabAlignment.Bottom; break;                                 case Keyword_Wrap: break;                                  default:                                     if (mode.StartsWith(Keyword_Choose' StringComparison.OrdinalIgnoreCase))                                     {                                         mode = mode.Substring(Keyword_Choose.Length);                                         int n;                                          if (int.TryParse(mode' out n) && n > -1 && n < tab.TabPages.Count)                                             tab.SelectedIndex = n;                                     }                                     break;                             }                         }                     }                     break;                 #endregion                  #region StatusBar                 case Keyword_StatusBar:                     {                         var info = GuiAssociatedInfo(parent);                          if (info.StatusBar != null)                         {                             opts = string.Empty;                             break;                         }                          var status = (StatusBar)(control ?? new StatusBar());                         parent.Controls.Add(status);                         control = status;                         info.StatusBar = status;                         status.Text = content;                     }                     break;                 #endregion                  #region WebBrowser                 case Keyword_WebBrowser:                     {                         var web = (WebBrowser)(control ?? new WebBrowser());                         parent.Controls.Add(web);                         control = web;                         web.Navigate(content);                     }                     break;                 #endregion             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlEdit,The following statement contains a magic number: switch (type.ToLowerInvariant())             {                 #region Text                 case Keyword_Text:                     {                         var text = (Label)(control ?? new Label());                         parent.Controls.Add(text);                         control = text;                         text.Text = content;                     }                     break;                 #endregion                  #region Edit                 case Keyword_Edit:                     {                         var edit = (TextBox)(control ?? new TextBox());                         parent.Controls.Add(edit);                         control = edit;                         edit.Text = NormaliseEol(content);                         edit.Tag = options;                         opts = GuiApplyStyles(edit' options);                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Limit:                                     if (!on)                                         edit.MaxLength = int.MaxValue;                                     break;                                  case Keyword_Lowercase: edit.CharacterCasing = on ? CharacterCasing.Lower : CharacterCasing.Normal; break;                                 case Keyword_Multi: edit.Multiline = on; break;                                 case Keyword_Number:                                     {                                         if (on)                                             edit.KeyPress += OnEditKeyPress;                                         else                                             edit.KeyPress -= OnEditKeyPress;                                         break;                                     }                                 case Keyword_Password: edit.PasswordChar = '●'; break;                                 case Keyword_Readonly: edit.ReadOnly = on; break;                                 case Keyword_Uppercase: edit.CharacterCasing = on ? CharacterCasing.Upper : CharacterCasing.Normal; break;                                 case Keyword_WantCtrlA: break; //I dont see that the normal ctrl+A works! perhaps new implementation?                                 case Keyword_WantReturn: edit.AcceptsReturn = on; break;                                 case Keyword_WantTab: edit.AcceptsTab = on; break;                                 case Keyword_Wrap: edit.WordWrap = on; break;                                  default:                                     int n;                                     if (mode.StartsWith(Keyword_Limit) && int.TryParse(mode.Substring(Keyword_Limit.Length)' out n))                                         edit.MaxLength = n;                                     break;                             }                         }                     }                     break;                 #endregion                  #region UpDown                 case Keyword_UpDown:                     {                         var updown = (NumericUpDown)(control ?? new NumericUpDown());                         var last = GuiAssociatedInfo(parent).LastControl;                          if (last != null && last is TextBox)                         {                             updown.Location = last.Location;                             updown.Size = last.Size;                             updown.Font = last.Font;                             updown.ForeColor = last.ForeColor;                             last.Parent.Controls.Remove(last);                             GuiAssociatedInfo(parent).Controls.Pop();                             options = string.Concat(last.Tag as string ?? string.Empty' " "' options);                         }                          parent.Controls.Add(updown);                         control = updown;                         updown.Value = decimal.Parse(content);                         opts = GuiApplyStyles(updown' options);                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Horz: break;                                 case Keyword_Left: break;                                 case Keyword_Wrap: break;                                 case "16": break;                                 case "0x80": break;                                  default:                                     if (mode.StartsWith(Keyword_Range))                                     {                                         string[] range = mode.Substring(Keyword_Range.Length).Split(new[] { "-" }' 2' StringSplitOptions.None);                                         decimal n;                                          if (decimal.TryParse(range[0]' out n))                                             updown.Minimum = n;                                          if (range.Length > 1 && decimal.TryParse(range[1]' out n))                                             updown.Maximum = n;                                     }                                     break;                             }                         }                     }                     break;                 #endregion                  #region Picture                 case Keyword_Picture:                 case Keyword_Pic:                     {                         var pic = (PictureBox)(control ?? new PictureBox());                         parent.Controls.Add(pic);                         control = pic;                         bool exists = File.Exists(content);                          if (exists)                         {                             pic.ImageLocation = content;                              try                             {                                 var image = Image.FromFile(pic.ImageLocation);                                 pic.Size = image.Size;                             }                             catch (Exception) { }                         }                          GuiApplyStyles(pic' options);                     }                     break;                 #endregion                  #region Button                 case Keyword_Button:                     {                         var button = (Button)(control ?? new Button());                         parent.Controls.Add(button);                         control = button;                         button.Text = content;                     }                     break;                 #endregion                  #region CheckBox                 case Keyword_CheckBox:                     {                         var check = (CheckBox)(control ?? new CheckBox());                         parent.Controls.Add(check);                         control = check;                         check.Text = content;                         opts = GuiApplyStyles(check' options);                          foreach (var opt in ParseOptions(opts))                         {                             switch (opt.ToLowerInvariant())                             {                                 case Keyword_Check3:                                 case Keyword_CheckedGray:                                     check.CheckState = CheckState.Indeterminate;                                     break;                                  case Keyword_Checked:                                     check.CheckState = CheckState.Checked;                                     break;                                  default:                                     if (opt.StartsWith(Keyword_Checked' StringComparison.OrdinalIgnoreCase))                                     {                                         string arg = opt.Substring(Keyword_Checked.Length).Trim();                                         int n;                                          if (int.TryParse(arg' out n))                                             check.CheckState = n == -1 ? CheckState.Indeterminate : n == 1 ? CheckState.Checked : CheckState.Unchecked;                                     }                                     break;                             }                         }                     }                     break;                 #endregion                  #region Radio                 case Keyword_Radio:                     {                         var radio = (RadioButton)(control ?? new RadioButton());                         parent.Controls.Add(radio);                         control = radio;                         radio.Text = content;                         radio.Checked = false;                         opts = GuiApplyStyles(radio' options);                          foreach (var opt in ParseOptions(opts))                         {                             switch (opt.ToLowerInvariant())                             {                                 case Keyword_Checked:                                     radio.Checked = true;                                     break;                                  default:                                     if (opt.StartsWith(Keyword_Checked' StringComparison.OrdinalIgnoreCase))                                     {                                         string arg = opt.Substring(Keyword_Checked.Length).Trim();                                         int n;                                          if (int.TryParse(arg' out n))                                             radio.Checked = n == 1;                                     }                                     break;                             }                         }                     }                     break;                 #endregion                  #region DropDownList                 case Keyword_DropDownList:                 case Keyword_DDL:                     {                         var ddl = (ComboBox)(control ?? new ComboBox());                         parent.Controls.Add(ddl);                         control = ddl;                         ddl.Text = content;                         ddl.DropDownStyle = ComboBoxStyle.DropDownList;                         opts = GuiApplyStyles(ddl' options);                          int select;                         bool clear;                         ddl.Items.AddRange(GuiParseList(ddl' out select' out clear));                          if (select > -1 && select < ddl.Items.Count)                             ddl.SelectedIndex = select;                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Sort: ddl.Sorted = on; break;                                 case Keyword_Uppercase: ddl.Text = ddl.Text.ToUpperInvariant(); break;                                 case Keyword_Lowercase: ddl.Text = ddl.Text.ToLowerInvariant(); break;                                  default:                                     if (mode.StartsWith(Keyword_Choose' StringComparison.OrdinalIgnoreCase))                                     {                                         mode = mode.Substring(Keyword_Choose.Length);                                         int n;                                          if (int.TryParse(mode' out n) && n > -1 && n < ddl.Items.Count)                                             ddl.SelectedIndex = n;                                     }                                     break;                             }                         }                     }                     break;                 #endregion                  #region ComboBox                 case Keyword_ComboBox:                     {                         var combo = (ComboBox)(control ?? new ComboBox());                         parent.Controls.Add(combo);                         control = combo;                         combo.Text = content;                         opts = GuiApplyStyles(combo' options);                          int select;                         bool clear;                         combo.Items.AddRange(GuiParseList(combo' out select' out clear));                          if (select > -1 && select < combo.Items.Count)                             combo.SelectedIndex = select;                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Limit: break;                                 case Keyword_Simple: break;                             }                         }                     }                     break;                 #endregion                  #region ListBox                 case Keyword_ListBox:                     {                         var listbox = new ListBox();                         parent.Controls.Add(listbox);                         control = listbox;                         listbox.Text = content;                         opts = GuiApplyStyles(listbox' options);                          int select;                         bool clear;                         listbox.Items.AddRange(GuiParseList(listbox' out select' out clear));                          if (select > -1 && select < listbox.Items.Count)                             listbox.SelectedIndex = select;                          bool multi = false' read = false;                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Multi:                                 case "8":                                     multi = on;                                     break;                                  case Keyword_Readonly: read = on; break;                                 case Keyword_Sort: listbox.Sorted = on; break;                                  default:                                     if (mode.StartsWith(Keyword_Choose' StringComparison.OrdinalIgnoreCase))                                     {                                         mode = mode.Substring(Keyword_Choose.Length);                                         int n;                                          if (int.TryParse(mode' out n) && n > -1 && n < listbox.Items.Count)                                             listbox.SelectedIndex = n;                                     }                                     break;                             }                         }                          listbox.SelectionMode = multi ? SelectionMode.MultiExtended : read ? SelectionMode.None : SelectionMode.One;                     }                     break;                 #endregion                  #region ListView                 case Keyword_ListView:                     {                         var lv = (ListView)(control ?? new ListView());                         parent.Controls.Add(lv);                         control = lv;                         lv.Text = content;                         opts = GuiApplyStyles(lv' options);                         lv.View = View.Details;                          int select;                         bool clear;                          foreach (var item in GuiParseList(lv' out select' out clear))                             lv.Columns.Add(new ColumnHeader { Text = item });                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Checked: lv.CheckBoxes = on; break;                                 case Keyword_Grid: lv.GridLines = on; break;                                 case Keyword_Hdr: break;                                 case "lv0x10": break;                                 case "lv0x20": break;                                 case Keyword_Multi: lv.MultiSelect = on; break;                                 case Keyword_NoSortHdr: break;                                 case Keyword_Readonly: break;                                 case Keyword_Sort: lv.Sorting = on ? SortOrder.Ascending : SortOrder.None; break;                                 case Keyword_SortDesc: lv.Sorting = on ? SortOrder.Descending : SortOrder.None; break;                                 case Keyword_WantF2: break;                             }                         }                     }                     break;                 #endregion                  #region TreeView                 case Keyword_TreeView:                     {                         var tree = (TreeView)(control ?? new TreeView());                         parent.Controls.Add(tree);                         control = tree;                         opts = GuiApplyStyles(tree' options);                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Buttons: break;                                 case Keyword_HScroll: break;                                 case Keyword_Lines: break;                                 case Keyword_Readonly: break;                                 case Keyword_WantF2: break;                                  default:                                     if (mode.StartsWith(Keyword_ImageList))                                     {                                         mode = mode.Substring(Keyword_ImageList.Length);                                          // UNDONE: TreeView control ImageList                                     }                                     break;                             }                         }                     }                     break;                 #endregion                  #region Hotkey                 case Keyword_Hotkey:                     {                         var hotkey = (HotkeyBox)(control ?? new HotkeyBox());                         parent.Controls.Add(hotkey);                         control = hotkey;                         opts = GuiApplyStyles(hotkey' options);                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Limit:                                     if (!on)                                         hotkey.Limit = HotkeyBox.Limits.None;                                     else                                     {                                         int n;                                          if (int.TryParse(mode' out n))                                             hotkey.Limit = (HotkeyBox.Limits)n;                                     }                                     break;                             }                         }                      }                     break;                 #endregion                  #region DateTime                 case Keyword_DateTime:                     {                         var date = (DateTimePicker)(control ?? new DateTimePicker());                         parent.Controls.Add(date);                         control = date;                         opts = GuiApplyStyles(date' options);                         if (content == string.Empty)                             date.Value = DateTime.Now;                         else                             date.Value = ToDateTime(content);                         date.Format = DateTimePickerFormat.Short;                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case "1": date.ShowUpDown = on; break;                                 case "2": date.ShowCheckBox = on; break;                                 case Keyword_Right: date.DropDownAlign = LeftRightAlignment.Right; break; //***Bug*** - case dont match!                                 case Keyword_LongDate: date.Format = DateTimePickerFormat.Long; date.Value = DateTime.Now; break;                                 case Keyword_Time: date.Format = DateTimePickerFormat.Time; date.Value = DateTime.Now; break;                                  default:                                     if (mode.StartsWith(Keyword_Range))                                     {                                         string[] range = mode.Substring(Keyword_Range.Length).Split(new[] { "-" }' 2' StringSplitOptions.None);                                          if (range[0].Length != 0)                                             date.MinDate = ToDateTime(range[0]);                                          if (range.Length > 0 && range[1].Length != 0)                                             date.MaxDate = ToDateTime(range[1]);                                      }                                     else if (mode.StartsWith(Keyword_Choose))                                     {                                         mode = mode.Substring(Keyword_Choose.Length);                                          if (mode.Length != 0)                                             date.Value = ToDateTime(mode);                                     }                                     break;                             }                         }                     }                     break;                 #endregion                  #region MonthCal                 case Keyword_MonthCal:                     {                         var cal = (MonthCalendar)(control ?? new MonthCalendar());                         parent.Controls.Add(cal);                         control = cal;                         opts = GuiApplyStyles(cal' options);                          if (!string.IsNullOrEmpty(content))                             cal.SetDate(ToDateTime(content));                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case "4": cal.ShowWeekNumbers = on; break;                                 case "8": cal.ShowTodayCircle = on; break;                                 case "16": cal.ShowToday = on; break;                                 case Keyword_Multi: cal.MaxSelectionCount = int.MaxValue; break;                                  default:                                     if (mode.StartsWith(Keyword_Range' StringComparison.OrdinalIgnoreCase))                                     {                                         string[] range = mode.Substring(Keyword_Range.Length).Split(new[] { "-" }' 2' StringSplitOptions.None);                                          if (!string.IsNullOrEmpty(range[0]))                                             cal.MinDate = ToDateTime(range[0]);                                          if (range.Length > 1 && !string.IsNullOrEmpty(range[1]))                                             cal.MaxDate = ToDateTime(range[1]);                                     }                                     break;                             }                         }                        }                     break;                 #endregion                  #region Slider                 case Keyword_Slider:                     {                         var slider = (TrackBar)(control ?? new TrackBar());                         parent.Controls.Add(slider);                         control = slider;                         opts = GuiApplyStyles(slider' options);                          int n;                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 // UNDONE: misc slider properties                                 case Keyword_Center: break;                                 case Keyword_Invert: break;                                 case Keyword_Left: break;                                 case Keyword_NoTicks: slider.TickStyle = TickStyle.None; break;                                 case Keyword_Thick: break;                                 case Keyword_Vertical: slider.Orientation = Orientation.Vertical; break;                                  default:                                     if (mode.StartsWith(Keyword_Line))                                     {                                         mode = mode.Substring(Keyword_Line.Length);                                          // UNDONE: slider line property                                     }                                     else if (mode.StartsWith(Keyword_Page))                                     {                                         mode = mode.Substring(Keyword_Page.Length);                                          // UNDONE: slider page property                                     }                                     else if (mode.StartsWith(Keyword_Range))                                     {                                         mode = mode.Substring(Keyword_Range.Length);                                         string[] parts = mode.Split(new[] { "-" }' 2' StringSplitOptions.None);                                          if (parts[0].Length != 0 && int.TryParse(parts[0]' out n))                                             slider.Minimum = n;                                          if (parts.Length > 0 && parts[1].Length != 0 && int.TryParse(parts[1]' out n))                                             slider.Maximum = n;                                     }                                     else if (mode.StartsWith(Keyword_TickInterval))                                     {                                         mode = mode.Substring(Keyword_TickInterval.Length);                                          if (mode.Length != 0 && int.TryParse(mode' out n))                                             slider.TickFrequency = n;                                     }                                     else if (mode.StartsWith(Keyword_ToolTip))                                     {                                         mode = mode.Substring(Keyword_ToolTip.Length);                                          switch (mode) // UNDONE: slider tooltip alignment                                         {                                             case Keyword_Left: break;                                             case Keyword_Right: break;                                             case Keyword_Top: break;                                             case Keyword_Bottom: break;                                         }                                     }                                     break;                             }                         }                          if (!string.IsNullOrEmpty(content) && int.TryParse(content' out n))                             slider.Value = Math.Max(slider.Minimum' Math.Min(slider.Maximum' n));                     }                     break;                 #endregion                  #region Progress                 case Keyword_Progress:                     {                         var progress = (ProgressBar)(control ?? new ProgressBar());                         parent.Controls.Add(progress);                         control = progress;                         opts = GuiApplyStyles(progress' options);                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Smooth: break;                                 case Keyword_Vertical: break; // TODO: vertical progress bar Gui control                                  default:                                     if (mode.StartsWith(Keyword_Range))                                     {                                         mode = mode.Substring(Keyword_Range.Length);                                         int z = mode.IndexOf('-');                                         string a = mode' b;                                          if (z == -1)                                             b = string.Empty;                                         else                                         {                                             a = mode.Substring(0' z);                                             z++;                                             b = z == mode.Length ? string.Empty : mode.Substring(z);                                         }                                          int x' y;                                          if (int.TryParse(a' out x))                                             progress.Minimum = x;                                          if (int.TryParse(b' out y) && y > x)                                             progress.Maximum = y;                                     }                                     else if (mode.StartsWith(Keyword_Background))                                     {                                         mode = mode.Substring(Keyword_Background.Length);                                         progress.ForeColor = ParseColor(mode);                                     }                                     break;                             }                         }                          int n;                          if (!string.IsNullOrEmpty(content) && int.TryParse(content' out n))                             progress.Value = Math.Max(progress.Minimum' Math.Min(progress.Maximum' n));                     }                     break;                 #endregion                  #region GroupBox                 case Keyword_GroupBox:                     {                         var group = (GroupBox)(control ?? new GroupBox());                         parent.Controls.Add(group);                         control = group;                         group.Text = content;                     }                     break;                 #endregion                  #region Tab                 case Keyword_Tab:                 case Keyword_Tab2:                     {                         var tab = (TabControl)(control ?? new TabControl());                         parent.Controls.Add(tab);                         control = tab;                         opts = GuiApplyStyles(tab' options);                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Background: break;                                 case Keyword_Buttons: break;                                 case Keyword_Top: tab.Alignment = TabAlignment.Top; break;                                 case Keyword_Left: tab.Alignment = TabAlignment.Left; break;                                 case Keyword_Right: tab.Alignment = TabAlignment.Right; break;                                 case Keyword_Bottom: tab.Alignment = TabAlignment.Bottom; break;                                 case Keyword_Wrap: break;                                  default:                                     if (mode.StartsWith(Keyword_Choose' StringComparison.OrdinalIgnoreCase))                                     {                                         mode = mode.Substring(Keyword_Choose.Length);                                         int n;                                          if (int.TryParse(mode' out n) && n > -1 && n < tab.TabPages.Count)                                             tab.SelectedIndex = n;                                     }                                     break;                             }                         }                     }                     break;                 #endregion                  #region StatusBar                 case Keyword_StatusBar:                     {                         var info = GuiAssociatedInfo(parent);                          if (info.StatusBar != null)                         {                             opts = string.Empty;                             break;                         }                          var status = (StatusBar)(control ?? new StatusBar());                         parent.Controls.Add(status);                         control = status;                         info.StatusBar = status;                         status.Text = content;                     }                     break;                 #endregion                  #region WebBrowser                 case Keyword_WebBrowser:                     {                         var web = (WebBrowser)(control ?? new WebBrowser());                         parent.Controls.Add(web);                         control = web;                         web.Navigate(content);                     }                     break;                 #endregion             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlEdit,The following statement contains a magic number: switch (type.ToLowerInvariant())             {                 #region Text                 case Keyword_Text:                     {                         var text = (Label)(control ?? new Label());                         parent.Controls.Add(text);                         control = text;                         text.Text = content;                     }                     break;                 #endregion                  #region Edit                 case Keyword_Edit:                     {                         var edit = (TextBox)(control ?? new TextBox());                         parent.Controls.Add(edit);                         control = edit;                         edit.Text = NormaliseEol(content);                         edit.Tag = options;                         opts = GuiApplyStyles(edit' options);                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Limit:                                     if (!on)                                         edit.MaxLength = int.MaxValue;                                     break;                                  case Keyword_Lowercase: edit.CharacterCasing = on ? CharacterCasing.Lower : CharacterCasing.Normal; break;                                 case Keyword_Multi: edit.Multiline = on; break;                                 case Keyword_Number:                                     {                                         if (on)                                             edit.KeyPress += OnEditKeyPress;                                         else                                             edit.KeyPress -= OnEditKeyPress;                                         break;                                     }                                 case Keyword_Password: edit.PasswordChar = '●'; break;                                 case Keyword_Readonly: edit.ReadOnly = on; break;                                 case Keyword_Uppercase: edit.CharacterCasing = on ? CharacterCasing.Upper : CharacterCasing.Normal; break;                                 case Keyword_WantCtrlA: break; //I dont see that the normal ctrl+A works! perhaps new implementation?                                 case Keyword_WantReturn: edit.AcceptsReturn = on; break;                                 case Keyword_WantTab: edit.AcceptsTab = on; break;                                 case Keyword_Wrap: edit.WordWrap = on; break;                                  default:                                     int n;                                     if (mode.StartsWith(Keyword_Limit) && int.TryParse(mode.Substring(Keyword_Limit.Length)' out n))                                         edit.MaxLength = n;                                     break;                             }                         }                     }                     break;                 #endregion                  #region UpDown                 case Keyword_UpDown:                     {                         var updown = (NumericUpDown)(control ?? new NumericUpDown());                         var last = GuiAssociatedInfo(parent).LastControl;                          if (last != null && last is TextBox)                         {                             updown.Location = last.Location;                             updown.Size = last.Size;                             updown.Font = last.Font;                             updown.ForeColor = last.ForeColor;                             last.Parent.Controls.Remove(last);                             GuiAssociatedInfo(parent).Controls.Pop();                             options = string.Concat(last.Tag as string ?? string.Empty' " "' options);                         }                          parent.Controls.Add(updown);                         control = updown;                         updown.Value = decimal.Parse(content);                         opts = GuiApplyStyles(updown' options);                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Horz: break;                                 case Keyword_Left: break;                                 case Keyword_Wrap: break;                                 case "16": break;                                 case "0x80": break;                                  default:                                     if (mode.StartsWith(Keyword_Range))                                     {                                         string[] range = mode.Substring(Keyword_Range.Length).Split(new[] { "-" }' 2' StringSplitOptions.None);                                         decimal n;                                          if (decimal.TryParse(range[0]' out n))                                             updown.Minimum = n;                                          if (range.Length > 1 && decimal.TryParse(range[1]' out n))                                             updown.Maximum = n;                                     }                                     break;                             }                         }                     }                     break;                 #endregion                  #region Picture                 case Keyword_Picture:                 case Keyword_Pic:                     {                         var pic = (PictureBox)(control ?? new PictureBox());                         parent.Controls.Add(pic);                         control = pic;                         bool exists = File.Exists(content);                          if (exists)                         {                             pic.ImageLocation = content;                              try                             {                                 var image = Image.FromFile(pic.ImageLocation);                                 pic.Size = image.Size;                             }                             catch (Exception) { }                         }                          GuiApplyStyles(pic' options);                     }                     break;                 #endregion                  #region Button                 case Keyword_Button:                     {                         var button = (Button)(control ?? new Button());                         parent.Controls.Add(button);                         control = button;                         button.Text = content;                     }                     break;                 #endregion                  #region CheckBox                 case Keyword_CheckBox:                     {                         var check = (CheckBox)(control ?? new CheckBox());                         parent.Controls.Add(check);                         control = check;                         check.Text = content;                         opts = GuiApplyStyles(check' options);                          foreach (var opt in ParseOptions(opts))                         {                             switch (opt.ToLowerInvariant())                             {                                 case Keyword_Check3:                                 case Keyword_CheckedGray:                                     check.CheckState = CheckState.Indeterminate;                                     break;                                  case Keyword_Checked:                                     check.CheckState = CheckState.Checked;                                     break;                                  default:                                     if (opt.StartsWith(Keyword_Checked' StringComparison.OrdinalIgnoreCase))                                     {                                         string arg = opt.Substring(Keyword_Checked.Length).Trim();                                         int n;                                          if (int.TryParse(arg' out n))                                             check.CheckState = n == -1 ? CheckState.Indeterminate : n == 1 ? CheckState.Checked : CheckState.Unchecked;                                     }                                     break;                             }                         }                     }                     break;                 #endregion                  #region Radio                 case Keyword_Radio:                     {                         var radio = (RadioButton)(control ?? new RadioButton());                         parent.Controls.Add(radio);                         control = radio;                         radio.Text = content;                         radio.Checked = false;                         opts = GuiApplyStyles(radio' options);                          foreach (var opt in ParseOptions(opts))                         {                             switch (opt.ToLowerInvariant())                             {                                 case Keyword_Checked:                                     radio.Checked = true;                                     break;                                  default:                                     if (opt.StartsWith(Keyword_Checked' StringComparison.OrdinalIgnoreCase))                                     {                                         string arg = opt.Substring(Keyword_Checked.Length).Trim();                                         int n;                                          if (int.TryParse(arg' out n))                                             radio.Checked = n == 1;                                     }                                     break;                             }                         }                     }                     break;                 #endregion                  #region DropDownList                 case Keyword_DropDownList:                 case Keyword_DDL:                     {                         var ddl = (ComboBox)(control ?? new ComboBox());                         parent.Controls.Add(ddl);                         control = ddl;                         ddl.Text = content;                         ddl.DropDownStyle = ComboBoxStyle.DropDownList;                         opts = GuiApplyStyles(ddl' options);                          int select;                         bool clear;                         ddl.Items.AddRange(GuiParseList(ddl' out select' out clear));                          if (select > -1 && select < ddl.Items.Count)                             ddl.SelectedIndex = select;                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Sort: ddl.Sorted = on; break;                                 case Keyword_Uppercase: ddl.Text = ddl.Text.ToUpperInvariant(); break;                                 case Keyword_Lowercase: ddl.Text = ddl.Text.ToLowerInvariant(); break;                                  default:                                     if (mode.StartsWith(Keyword_Choose' StringComparison.OrdinalIgnoreCase))                                     {                                         mode = mode.Substring(Keyword_Choose.Length);                                         int n;                                          if (int.TryParse(mode' out n) && n > -1 && n < ddl.Items.Count)                                             ddl.SelectedIndex = n;                                     }                                     break;                             }                         }                     }                     break;                 #endregion                  #region ComboBox                 case Keyword_ComboBox:                     {                         var combo = (ComboBox)(control ?? new ComboBox());                         parent.Controls.Add(combo);                         control = combo;                         combo.Text = content;                         opts = GuiApplyStyles(combo' options);                          int select;                         bool clear;                         combo.Items.AddRange(GuiParseList(combo' out select' out clear));                          if (select > -1 && select < combo.Items.Count)                             combo.SelectedIndex = select;                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Limit: break;                                 case Keyword_Simple: break;                             }                         }                     }                     break;                 #endregion                  #region ListBox                 case Keyword_ListBox:                     {                         var listbox = new ListBox();                         parent.Controls.Add(listbox);                         control = listbox;                         listbox.Text = content;                         opts = GuiApplyStyles(listbox' options);                          int select;                         bool clear;                         listbox.Items.AddRange(GuiParseList(listbox' out select' out clear));                          if (select > -1 && select < listbox.Items.Count)                             listbox.SelectedIndex = select;                          bool multi = false' read = false;                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Multi:                                 case "8":                                     multi = on;                                     break;                                  case Keyword_Readonly: read = on; break;                                 case Keyword_Sort: listbox.Sorted = on; break;                                  default:                                     if (mode.StartsWith(Keyword_Choose' StringComparison.OrdinalIgnoreCase))                                     {                                         mode = mode.Substring(Keyword_Choose.Length);                                         int n;                                          if (int.TryParse(mode' out n) && n > -1 && n < listbox.Items.Count)                                             listbox.SelectedIndex = n;                                     }                                     break;                             }                         }                          listbox.SelectionMode = multi ? SelectionMode.MultiExtended : read ? SelectionMode.None : SelectionMode.One;                     }                     break;                 #endregion                  #region ListView                 case Keyword_ListView:                     {                         var lv = (ListView)(control ?? new ListView());                         parent.Controls.Add(lv);                         control = lv;                         lv.Text = content;                         opts = GuiApplyStyles(lv' options);                         lv.View = View.Details;                          int select;                         bool clear;                          foreach (var item in GuiParseList(lv' out select' out clear))                             lv.Columns.Add(new ColumnHeader { Text = item });                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Checked: lv.CheckBoxes = on; break;                                 case Keyword_Grid: lv.GridLines = on; break;                                 case Keyword_Hdr: break;                                 case "lv0x10": break;                                 case "lv0x20": break;                                 case Keyword_Multi: lv.MultiSelect = on; break;                                 case Keyword_NoSortHdr: break;                                 case Keyword_Readonly: break;                                 case Keyword_Sort: lv.Sorting = on ? SortOrder.Ascending : SortOrder.None; break;                                 case Keyword_SortDesc: lv.Sorting = on ? SortOrder.Descending : SortOrder.None; break;                                 case Keyword_WantF2: break;                             }                         }                     }                     break;                 #endregion                  #region TreeView                 case Keyword_TreeView:                     {                         var tree = (TreeView)(control ?? new TreeView());                         parent.Controls.Add(tree);                         control = tree;                         opts = GuiApplyStyles(tree' options);                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Buttons: break;                                 case Keyword_HScroll: break;                                 case Keyword_Lines: break;                                 case Keyword_Readonly: break;                                 case Keyword_WantF2: break;                                  default:                                     if (mode.StartsWith(Keyword_ImageList))                                     {                                         mode = mode.Substring(Keyword_ImageList.Length);                                          // UNDONE: TreeView control ImageList                                     }                                     break;                             }                         }                     }                     break;                 #endregion                  #region Hotkey                 case Keyword_Hotkey:                     {                         var hotkey = (HotkeyBox)(control ?? new HotkeyBox());                         parent.Controls.Add(hotkey);                         control = hotkey;                         opts = GuiApplyStyles(hotkey' options);                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Limit:                                     if (!on)                                         hotkey.Limit = HotkeyBox.Limits.None;                                     else                                     {                                         int n;                                          if (int.TryParse(mode' out n))                                             hotkey.Limit = (HotkeyBox.Limits)n;                                     }                                     break;                             }                         }                      }                     break;                 #endregion                  #region DateTime                 case Keyword_DateTime:                     {                         var date = (DateTimePicker)(control ?? new DateTimePicker());                         parent.Controls.Add(date);                         control = date;                         opts = GuiApplyStyles(date' options);                         if (content == string.Empty)                             date.Value = DateTime.Now;                         else                             date.Value = ToDateTime(content);                         date.Format = DateTimePickerFormat.Short;                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case "1": date.ShowUpDown = on; break;                                 case "2": date.ShowCheckBox = on; break;                                 case Keyword_Right: date.DropDownAlign = LeftRightAlignment.Right; break; //***Bug*** - case dont match!                                 case Keyword_LongDate: date.Format = DateTimePickerFormat.Long; date.Value = DateTime.Now; break;                                 case Keyword_Time: date.Format = DateTimePickerFormat.Time; date.Value = DateTime.Now; break;                                  default:                                     if (mode.StartsWith(Keyword_Range))                                     {                                         string[] range = mode.Substring(Keyword_Range.Length).Split(new[] { "-" }' 2' StringSplitOptions.None);                                          if (range[0].Length != 0)                                             date.MinDate = ToDateTime(range[0]);                                          if (range.Length > 0 && range[1].Length != 0)                                             date.MaxDate = ToDateTime(range[1]);                                      }                                     else if (mode.StartsWith(Keyword_Choose))                                     {                                         mode = mode.Substring(Keyword_Choose.Length);                                          if (mode.Length != 0)                                             date.Value = ToDateTime(mode);                                     }                                     break;                             }                         }                     }                     break;                 #endregion                  #region MonthCal                 case Keyword_MonthCal:                     {                         var cal = (MonthCalendar)(control ?? new MonthCalendar());                         parent.Controls.Add(cal);                         control = cal;                         opts = GuiApplyStyles(cal' options);                          if (!string.IsNullOrEmpty(content))                             cal.SetDate(ToDateTime(content));                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case "4": cal.ShowWeekNumbers = on; break;                                 case "8": cal.ShowTodayCircle = on; break;                                 case "16": cal.ShowToday = on; break;                                 case Keyword_Multi: cal.MaxSelectionCount = int.MaxValue; break;                                  default:                                     if (mode.StartsWith(Keyword_Range' StringComparison.OrdinalIgnoreCase))                                     {                                         string[] range = mode.Substring(Keyword_Range.Length).Split(new[] { "-" }' 2' StringSplitOptions.None);                                          if (!string.IsNullOrEmpty(range[0]))                                             cal.MinDate = ToDateTime(range[0]);                                          if (range.Length > 1 && !string.IsNullOrEmpty(range[1]))                                             cal.MaxDate = ToDateTime(range[1]);                                     }                                     break;                             }                         }                        }                     break;                 #endregion                  #region Slider                 case Keyword_Slider:                     {                         var slider = (TrackBar)(control ?? new TrackBar());                         parent.Controls.Add(slider);                         control = slider;                         opts = GuiApplyStyles(slider' options);                          int n;                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 // UNDONE: misc slider properties                                 case Keyword_Center: break;                                 case Keyword_Invert: break;                                 case Keyword_Left: break;                                 case Keyword_NoTicks: slider.TickStyle = TickStyle.None; break;                                 case Keyword_Thick: break;                                 case Keyword_Vertical: slider.Orientation = Orientation.Vertical; break;                                  default:                                     if (mode.StartsWith(Keyword_Line))                                     {                                         mode = mode.Substring(Keyword_Line.Length);                                          // UNDONE: slider line property                                     }                                     else if (mode.StartsWith(Keyword_Page))                                     {                                         mode = mode.Substring(Keyword_Page.Length);                                          // UNDONE: slider page property                                     }                                     else if (mode.StartsWith(Keyword_Range))                                     {                                         mode = mode.Substring(Keyword_Range.Length);                                         string[] parts = mode.Split(new[] { "-" }' 2' StringSplitOptions.None);                                          if (parts[0].Length != 0 && int.TryParse(parts[0]' out n))                                             slider.Minimum = n;                                          if (parts.Length > 0 && parts[1].Length != 0 && int.TryParse(parts[1]' out n))                                             slider.Maximum = n;                                     }                                     else if (mode.StartsWith(Keyword_TickInterval))                                     {                                         mode = mode.Substring(Keyword_TickInterval.Length);                                          if (mode.Length != 0 && int.TryParse(mode' out n))                                             slider.TickFrequency = n;                                     }                                     else if (mode.StartsWith(Keyword_ToolTip))                                     {                                         mode = mode.Substring(Keyword_ToolTip.Length);                                          switch (mode) // UNDONE: slider tooltip alignment                                         {                                             case Keyword_Left: break;                                             case Keyword_Right: break;                                             case Keyword_Top: break;                                             case Keyword_Bottom: break;                                         }                                     }                                     break;                             }                         }                          if (!string.IsNullOrEmpty(content) && int.TryParse(content' out n))                             slider.Value = Math.Max(slider.Minimum' Math.Min(slider.Maximum' n));                     }                     break;                 #endregion                  #region Progress                 case Keyword_Progress:                     {                         var progress = (ProgressBar)(control ?? new ProgressBar());                         parent.Controls.Add(progress);                         control = progress;                         opts = GuiApplyStyles(progress' options);                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Smooth: break;                                 case Keyword_Vertical: break; // TODO: vertical progress bar Gui control                                  default:                                     if (mode.StartsWith(Keyword_Range))                                     {                                         mode = mode.Substring(Keyword_Range.Length);                                         int z = mode.IndexOf('-');                                         string a = mode' b;                                          if (z == -1)                                             b = string.Empty;                                         else                                         {                                             a = mode.Substring(0' z);                                             z++;                                             b = z == mode.Length ? string.Empty : mode.Substring(z);                                         }                                          int x' y;                                          if (int.TryParse(a' out x))                                             progress.Minimum = x;                                          if (int.TryParse(b' out y) && y > x)                                             progress.Maximum = y;                                     }                                     else if (mode.StartsWith(Keyword_Background))                                     {                                         mode = mode.Substring(Keyword_Background.Length);                                         progress.ForeColor = ParseColor(mode);                                     }                                     break;                             }                         }                          int n;                          if (!string.IsNullOrEmpty(content) && int.TryParse(content' out n))                             progress.Value = Math.Max(progress.Minimum' Math.Min(progress.Maximum' n));                     }                     break;                 #endregion                  #region GroupBox                 case Keyword_GroupBox:                     {                         var group = (GroupBox)(control ?? new GroupBox());                         parent.Controls.Add(group);                         control = group;                         group.Text = content;                     }                     break;                 #endregion                  #region Tab                 case Keyword_Tab:                 case Keyword_Tab2:                     {                         var tab = (TabControl)(control ?? new TabControl());                         parent.Controls.Add(tab);                         control = tab;                         opts = GuiApplyStyles(tab' options);                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Background: break;                                 case Keyword_Buttons: break;                                 case Keyword_Top: tab.Alignment = TabAlignment.Top; break;                                 case Keyword_Left: tab.Alignment = TabAlignment.Left; break;                                 case Keyword_Right: tab.Alignment = TabAlignment.Right; break;                                 case Keyword_Bottom: tab.Alignment = TabAlignment.Bottom; break;                                 case Keyword_Wrap: break;                                  default:                                     if (mode.StartsWith(Keyword_Choose' StringComparison.OrdinalIgnoreCase))                                     {                                         mode = mode.Substring(Keyword_Choose.Length);                                         int n;                                          if (int.TryParse(mode' out n) && n > -1 && n < tab.TabPages.Count)                                             tab.SelectedIndex = n;                                     }                                     break;                             }                         }                     }                     break;                 #endregion                  #region StatusBar                 case Keyword_StatusBar:                     {                         var info = GuiAssociatedInfo(parent);                          if (info.StatusBar != null)                         {                             opts = string.Empty;                             break;                         }                          var status = (StatusBar)(control ?? new StatusBar());                         parent.Controls.Add(status);                         control = status;                         info.StatusBar = status;                         status.Text = content;                     }                     break;                 #endregion                  #region WebBrowser                 case Keyword_WebBrowser:                     {                         var web = (WebBrowser)(control ?? new WebBrowser());                         parent.Controls.Add(web);                         control = web;                         web.Navigate(content);                     }                     break;                 #endregion             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlEdit,The following statement contains a magic number: switch (type.ToLowerInvariant())             {                 #region Text                 case Keyword_Text:                     {                         var text = (Label)(control ?? new Label());                         parent.Controls.Add(text);                         control = text;                         text.Text = content;                     }                     break;                 #endregion                  #region Edit                 case Keyword_Edit:                     {                         var edit = (TextBox)(control ?? new TextBox());                         parent.Controls.Add(edit);                         control = edit;                         edit.Text = NormaliseEol(content);                         edit.Tag = options;                         opts = GuiApplyStyles(edit' options);                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Limit:                                     if (!on)                                         edit.MaxLength = int.MaxValue;                                     break;                                  case Keyword_Lowercase: edit.CharacterCasing = on ? CharacterCasing.Lower : CharacterCasing.Normal; break;                                 case Keyword_Multi: edit.Multiline = on; break;                                 case Keyword_Number:                                     {                                         if (on)                                             edit.KeyPress += OnEditKeyPress;                                         else                                             edit.KeyPress -= OnEditKeyPress;                                         break;                                     }                                 case Keyword_Password: edit.PasswordChar = '●'; break;                                 case Keyword_Readonly: edit.ReadOnly = on; break;                                 case Keyword_Uppercase: edit.CharacterCasing = on ? CharacterCasing.Upper : CharacterCasing.Normal; break;                                 case Keyword_WantCtrlA: break; //I dont see that the normal ctrl+A works! perhaps new implementation?                                 case Keyword_WantReturn: edit.AcceptsReturn = on; break;                                 case Keyword_WantTab: edit.AcceptsTab = on; break;                                 case Keyword_Wrap: edit.WordWrap = on; break;                                  default:                                     int n;                                     if (mode.StartsWith(Keyword_Limit) && int.TryParse(mode.Substring(Keyword_Limit.Length)' out n))                                         edit.MaxLength = n;                                     break;                             }                         }                     }                     break;                 #endregion                  #region UpDown                 case Keyword_UpDown:                     {                         var updown = (NumericUpDown)(control ?? new NumericUpDown());                         var last = GuiAssociatedInfo(parent).LastControl;                          if (last != null && last is TextBox)                         {                             updown.Location = last.Location;                             updown.Size = last.Size;                             updown.Font = last.Font;                             updown.ForeColor = last.ForeColor;                             last.Parent.Controls.Remove(last);                             GuiAssociatedInfo(parent).Controls.Pop();                             options = string.Concat(last.Tag as string ?? string.Empty' " "' options);                         }                          parent.Controls.Add(updown);                         control = updown;                         updown.Value = decimal.Parse(content);                         opts = GuiApplyStyles(updown' options);                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Horz: break;                                 case Keyword_Left: break;                                 case Keyword_Wrap: break;                                 case "16": break;                                 case "0x80": break;                                  default:                                     if (mode.StartsWith(Keyword_Range))                                     {                                         string[] range = mode.Substring(Keyword_Range.Length).Split(new[] { "-" }' 2' StringSplitOptions.None);                                         decimal n;                                          if (decimal.TryParse(range[0]' out n))                                             updown.Minimum = n;                                          if (range.Length > 1 && decimal.TryParse(range[1]' out n))                                             updown.Maximum = n;                                     }                                     break;                             }                         }                     }                     break;                 #endregion                  #region Picture                 case Keyword_Picture:                 case Keyword_Pic:                     {                         var pic = (PictureBox)(control ?? new PictureBox());                         parent.Controls.Add(pic);                         control = pic;                         bool exists = File.Exists(content);                          if (exists)                         {                             pic.ImageLocation = content;                              try                             {                                 var image = Image.FromFile(pic.ImageLocation);                                 pic.Size = image.Size;                             }                             catch (Exception) { }                         }                          GuiApplyStyles(pic' options);                     }                     break;                 #endregion                  #region Button                 case Keyword_Button:                     {                         var button = (Button)(control ?? new Button());                         parent.Controls.Add(button);                         control = button;                         button.Text = content;                     }                     break;                 #endregion                  #region CheckBox                 case Keyword_CheckBox:                     {                         var check = (CheckBox)(control ?? new CheckBox());                         parent.Controls.Add(check);                         control = check;                         check.Text = content;                         opts = GuiApplyStyles(check' options);                          foreach (var opt in ParseOptions(opts))                         {                             switch (opt.ToLowerInvariant())                             {                                 case Keyword_Check3:                                 case Keyword_CheckedGray:                                     check.CheckState = CheckState.Indeterminate;                                     break;                                  case Keyword_Checked:                                     check.CheckState = CheckState.Checked;                                     break;                                  default:                                     if (opt.StartsWith(Keyword_Checked' StringComparison.OrdinalIgnoreCase))                                     {                                         string arg = opt.Substring(Keyword_Checked.Length).Trim();                                         int n;                                          if (int.TryParse(arg' out n))                                             check.CheckState = n == -1 ? CheckState.Indeterminate : n == 1 ? CheckState.Checked : CheckState.Unchecked;                                     }                                     break;                             }                         }                     }                     break;                 #endregion                  #region Radio                 case Keyword_Radio:                     {                         var radio = (RadioButton)(control ?? new RadioButton());                         parent.Controls.Add(radio);                         control = radio;                         radio.Text = content;                         radio.Checked = false;                         opts = GuiApplyStyles(radio' options);                          foreach (var opt in ParseOptions(opts))                         {                             switch (opt.ToLowerInvariant())                             {                                 case Keyword_Checked:                                     radio.Checked = true;                                     break;                                  default:                                     if (opt.StartsWith(Keyword_Checked' StringComparison.OrdinalIgnoreCase))                                     {                                         string arg = opt.Substring(Keyword_Checked.Length).Trim();                                         int n;                                          if (int.TryParse(arg' out n))                                             radio.Checked = n == 1;                                     }                                     break;                             }                         }                     }                     break;                 #endregion                  #region DropDownList                 case Keyword_DropDownList:                 case Keyword_DDL:                     {                         var ddl = (ComboBox)(control ?? new ComboBox());                         parent.Controls.Add(ddl);                         control = ddl;                         ddl.Text = content;                         ddl.DropDownStyle = ComboBoxStyle.DropDownList;                         opts = GuiApplyStyles(ddl' options);                          int select;                         bool clear;                         ddl.Items.AddRange(GuiParseList(ddl' out select' out clear));                          if (select > -1 && select < ddl.Items.Count)                             ddl.SelectedIndex = select;                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Sort: ddl.Sorted = on; break;                                 case Keyword_Uppercase: ddl.Text = ddl.Text.ToUpperInvariant(); break;                                 case Keyword_Lowercase: ddl.Text = ddl.Text.ToLowerInvariant(); break;                                  default:                                     if (mode.StartsWith(Keyword_Choose' StringComparison.OrdinalIgnoreCase))                                     {                                         mode = mode.Substring(Keyword_Choose.Length);                                         int n;                                          if (int.TryParse(mode' out n) && n > -1 && n < ddl.Items.Count)                                             ddl.SelectedIndex = n;                                     }                                     break;                             }                         }                     }                     break;                 #endregion                  #region ComboBox                 case Keyword_ComboBox:                     {                         var combo = (ComboBox)(control ?? new ComboBox());                         parent.Controls.Add(combo);                         control = combo;                         combo.Text = content;                         opts = GuiApplyStyles(combo' options);                          int select;                         bool clear;                         combo.Items.AddRange(GuiParseList(combo' out select' out clear));                          if (select > -1 && select < combo.Items.Count)                             combo.SelectedIndex = select;                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Limit: break;                                 case Keyword_Simple: break;                             }                         }                     }                     break;                 #endregion                  #region ListBox                 case Keyword_ListBox:                     {                         var listbox = new ListBox();                         parent.Controls.Add(listbox);                         control = listbox;                         listbox.Text = content;                         opts = GuiApplyStyles(listbox' options);                          int select;                         bool clear;                         listbox.Items.AddRange(GuiParseList(listbox' out select' out clear));                          if (select > -1 && select < listbox.Items.Count)                             listbox.SelectedIndex = select;                          bool multi = false' read = false;                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Multi:                                 case "8":                                     multi = on;                                     break;                                  case Keyword_Readonly: read = on; break;                                 case Keyword_Sort: listbox.Sorted = on; break;                                  default:                                     if (mode.StartsWith(Keyword_Choose' StringComparison.OrdinalIgnoreCase))                                     {                                         mode = mode.Substring(Keyword_Choose.Length);                                         int n;                                          if (int.TryParse(mode' out n) && n > -1 && n < listbox.Items.Count)                                             listbox.SelectedIndex = n;                                     }                                     break;                             }                         }                          listbox.SelectionMode = multi ? SelectionMode.MultiExtended : read ? SelectionMode.None : SelectionMode.One;                     }                     break;                 #endregion                  #region ListView                 case Keyword_ListView:                     {                         var lv = (ListView)(control ?? new ListView());                         parent.Controls.Add(lv);                         control = lv;                         lv.Text = content;                         opts = GuiApplyStyles(lv' options);                         lv.View = View.Details;                          int select;                         bool clear;                          foreach (var item in GuiParseList(lv' out select' out clear))                             lv.Columns.Add(new ColumnHeader { Text = item });                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Checked: lv.CheckBoxes = on; break;                                 case Keyword_Grid: lv.GridLines = on; break;                                 case Keyword_Hdr: break;                                 case "lv0x10": break;                                 case "lv0x20": break;                                 case Keyword_Multi: lv.MultiSelect = on; break;                                 case Keyword_NoSortHdr: break;                                 case Keyword_Readonly: break;                                 case Keyword_Sort: lv.Sorting = on ? SortOrder.Ascending : SortOrder.None; break;                                 case Keyword_SortDesc: lv.Sorting = on ? SortOrder.Descending : SortOrder.None; break;                                 case Keyword_WantF2: break;                             }                         }                     }                     break;                 #endregion                  #region TreeView                 case Keyword_TreeView:                     {                         var tree = (TreeView)(control ?? new TreeView());                         parent.Controls.Add(tree);                         control = tree;                         opts = GuiApplyStyles(tree' options);                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Buttons: break;                                 case Keyword_HScroll: break;                                 case Keyword_Lines: break;                                 case Keyword_Readonly: break;                                 case Keyword_WantF2: break;                                  default:                                     if (mode.StartsWith(Keyword_ImageList))                                     {                                         mode = mode.Substring(Keyword_ImageList.Length);                                          // UNDONE: TreeView control ImageList                                     }                                     break;                             }                         }                     }                     break;                 #endregion                  #region Hotkey                 case Keyword_Hotkey:                     {                         var hotkey = (HotkeyBox)(control ?? new HotkeyBox());                         parent.Controls.Add(hotkey);                         control = hotkey;                         opts = GuiApplyStyles(hotkey' options);                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Limit:                                     if (!on)                                         hotkey.Limit = HotkeyBox.Limits.None;                                     else                                     {                                         int n;                                          if (int.TryParse(mode' out n))                                             hotkey.Limit = (HotkeyBox.Limits)n;                                     }                                     break;                             }                         }                      }                     break;                 #endregion                  #region DateTime                 case Keyword_DateTime:                     {                         var date = (DateTimePicker)(control ?? new DateTimePicker());                         parent.Controls.Add(date);                         control = date;                         opts = GuiApplyStyles(date' options);                         if (content == string.Empty)                             date.Value = DateTime.Now;                         else                             date.Value = ToDateTime(content);                         date.Format = DateTimePickerFormat.Short;                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case "1": date.ShowUpDown = on; break;                                 case "2": date.ShowCheckBox = on; break;                                 case Keyword_Right: date.DropDownAlign = LeftRightAlignment.Right; break; //***Bug*** - case dont match!                                 case Keyword_LongDate: date.Format = DateTimePickerFormat.Long; date.Value = DateTime.Now; break;                                 case Keyword_Time: date.Format = DateTimePickerFormat.Time; date.Value = DateTime.Now; break;                                  default:                                     if (mode.StartsWith(Keyword_Range))                                     {                                         string[] range = mode.Substring(Keyword_Range.Length).Split(new[] { "-" }' 2' StringSplitOptions.None);                                          if (range[0].Length != 0)                                             date.MinDate = ToDateTime(range[0]);                                          if (range.Length > 0 && range[1].Length != 0)                                             date.MaxDate = ToDateTime(range[1]);                                      }                                     else if (mode.StartsWith(Keyword_Choose))                                     {                                         mode = mode.Substring(Keyword_Choose.Length);                                          if (mode.Length != 0)                                             date.Value = ToDateTime(mode);                                     }                                     break;                             }                         }                     }                     break;                 #endregion                  #region MonthCal                 case Keyword_MonthCal:                     {                         var cal = (MonthCalendar)(control ?? new MonthCalendar());                         parent.Controls.Add(cal);                         control = cal;                         opts = GuiApplyStyles(cal' options);                          if (!string.IsNullOrEmpty(content))                             cal.SetDate(ToDateTime(content));                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case "4": cal.ShowWeekNumbers = on; break;                                 case "8": cal.ShowTodayCircle = on; break;                                 case "16": cal.ShowToday = on; break;                                 case Keyword_Multi: cal.MaxSelectionCount = int.MaxValue; break;                                  default:                                     if (mode.StartsWith(Keyword_Range' StringComparison.OrdinalIgnoreCase))                                     {                                         string[] range = mode.Substring(Keyword_Range.Length).Split(new[] { "-" }' 2' StringSplitOptions.None);                                          if (!string.IsNullOrEmpty(range[0]))                                             cal.MinDate = ToDateTime(range[0]);                                          if (range.Length > 1 && !string.IsNullOrEmpty(range[1]))                                             cal.MaxDate = ToDateTime(range[1]);                                     }                                     break;                             }                         }                        }                     break;                 #endregion                  #region Slider                 case Keyword_Slider:                     {                         var slider = (TrackBar)(control ?? new TrackBar());                         parent.Controls.Add(slider);                         control = slider;                         opts = GuiApplyStyles(slider' options);                          int n;                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 // UNDONE: misc slider properties                                 case Keyword_Center: break;                                 case Keyword_Invert: break;                                 case Keyword_Left: break;                                 case Keyword_NoTicks: slider.TickStyle = TickStyle.None; break;                                 case Keyword_Thick: break;                                 case Keyword_Vertical: slider.Orientation = Orientation.Vertical; break;                                  default:                                     if (mode.StartsWith(Keyword_Line))                                     {                                         mode = mode.Substring(Keyword_Line.Length);                                          // UNDONE: slider line property                                     }                                     else if (mode.StartsWith(Keyword_Page))                                     {                                         mode = mode.Substring(Keyword_Page.Length);                                          // UNDONE: slider page property                                     }                                     else if (mode.StartsWith(Keyword_Range))                                     {                                         mode = mode.Substring(Keyword_Range.Length);                                         string[] parts = mode.Split(new[] { "-" }' 2' StringSplitOptions.None);                                          if (parts[0].Length != 0 && int.TryParse(parts[0]' out n))                                             slider.Minimum = n;                                          if (parts.Length > 0 && parts[1].Length != 0 && int.TryParse(parts[1]' out n))                                             slider.Maximum = n;                                     }                                     else if (mode.StartsWith(Keyword_TickInterval))                                     {                                         mode = mode.Substring(Keyword_TickInterval.Length);                                          if (mode.Length != 0 && int.TryParse(mode' out n))                                             slider.TickFrequency = n;                                     }                                     else if (mode.StartsWith(Keyword_ToolTip))                                     {                                         mode = mode.Substring(Keyword_ToolTip.Length);                                          switch (mode) // UNDONE: slider tooltip alignment                                         {                                             case Keyword_Left: break;                                             case Keyword_Right: break;                                             case Keyword_Top: break;                                             case Keyword_Bottom: break;                                         }                                     }                                     break;                             }                         }                          if (!string.IsNullOrEmpty(content) && int.TryParse(content' out n))                             slider.Value = Math.Max(slider.Minimum' Math.Min(slider.Maximum' n));                     }                     break;                 #endregion                  #region Progress                 case Keyword_Progress:                     {                         var progress = (ProgressBar)(control ?? new ProgressBar());                         parent.Controls.Add(progress);                         control = progress;                         opts = GuiApplyStyles(progress' options);                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Smooth: break;                                 case Keyword_Vertical: break; // TODO: vertical progress bar Gui control                                  default:                                     if (mode.StartsWith(Keyword_Range))                                     {                                         mode = mode.Substring(Keyword_Range.Length);                                         int z = mode.IndexOf('-');                                         string a = mode' b;                                          if (z == -1)                                             b = string.Empty;                                         else                                         {                                             a = mode.Substring(0' z);                                             z++;                                             b = z == mode.Length ? string.Empty : mode.Substring(z);                                         }                                          int x' y;                                          if (int.TryParse(a' out x))                                             progress.Minimum = x;                                          if (int.TryParse(b' out y) && y > x)                                             progress.Maximum = y;                                     }                                     else if (mode.StartsWith(Keyword_Background))                                     {                                         mode = mode.Substring(Keyword_Background.Length);                                         progress.ForeColor = ParseColor(mode);                                     }                                     break;                             }                         }                          int n;                          if (!string.IsNullOrEmpty(content) && int.TryParse(content' out n))                             progress.Value = Math.Max(progress.Minimum' Math.Min(progress.Maximum' n));                     }                     break;                 #endregion                  #region GroupBox                 case Keyword_GroupBox:                     {                         var group = (GroupBox)(control ?? new GroupBox());                         parent.Controls.Add(group);                         control = group;                         group.Text = content;                     }                     break;                 #endregion                  #region Tab                 case Keyword_Tab:                 case Keyword_Tab2:                     {                         var tab = (TabControl)(control ?? new TabControl());                         parent.Controls.Add(tab);                         control = tab;                         opts = GuiApplyStyles(tab' options);                          foreach (var opt in ParseOptions(opts))                         {                             bool on = opt[0] != '-';                             string mode = opt.Substring(!on || opt[0] == '+' ? 1 : 0).ToLowerInvariant();                              switch (mode)                             {                                 case Keyword_Background: break;                                 case Keyword_Buttons: break;                                 case Keyword_Top: tab.Alignment = TabAlignment.Top; break;                                 case Keyword_Left: tab.Alignment = TabAlignment.Left; break;                                 case Keyword_Right: tab.Alignment = TabAlignment.Right; break;                                 case Keyword_Bottom: tab.Alignment = TabAlignment.Bottom; break;                                 case Keyword_Wrap: break;                                  default:                                     if (mode.StartsWith(Keyword_Choose' StringComparison.OrdinalIgnoreCase))                                     {                                         mode = mode.Substring(Keyword_Choose.Length);                                         int n;                                          if (int.TryParse(mode' out n) && n > -1 && n < tab.TabPages.Count)                                             tab.SelectedIndex = n;                                     }                                     break;                             }                         }                     }                     break;                 #endregion                  #region StatusBar                 case Keyword_StatusBar:                     {                         var info = GuiAssociatedInfo(parent);                          if (info.StatusBar != null)                         {                             opts = string.Empty;                             break;                         }                          var status = (StatusBar)(control ?? new StatusBar());                         parent.Controls.Add(status);                         control = status;                         info.StatusBar = status;                         status.Text = content;                     }                     break;                 #endregion                  #region WebBrowser                 case Keyword_WebBrowser:                     {                         var web = (WebBrowser)(control ?? new WebBrowser());                         parent.Controls.Add(web);                         control = web;                         web.Navigate(content);                     }                     break;                 #endregion             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiCreateWindow,The following statement contains a magic number: int x = (int)Math.Round(win.Font.Size * 1.25)' y = (int)Math.Round(win.Font.Size * .75);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiCreateWindow,The following statement contains a magic number: int x = (int)Math.Round(win.Font.Size * 1.25)' y = (int)Math.Round(win.Font.Size * .75);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiApplyStyles,The following statement contains a magic number: float dw = control.Font.SizeInPoints * 15;
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiApplyStyles,The following statement contains a magic number: r = 2;
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiApplyStyles,The following statement contains a magic number: control.Size = new Size(Math.Max((int)w' control.PreferredSize.Width)' ++r > 2 ? (int)(r * control.Parent.Font.Height) : control.PreferredSize.Height);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlMove,The following statement contains a magic number: mode.Length < 2
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlMove,The following statement contains a magic number: switch (mode[0])             {                 case 'x':                 case 'X':                     {                         offset = true;                         int p = 0;                          switch (mode[1])                         {                             case 's':                             case 'S':                                 {                                     var sec = GuiAssociatedInfo(control).Section;                                     var last = sec.IsEmpty ? new Point(control.Parent.Margin.Left' control.Parent.Margin.Top) : sec;                                     p = alt ? last.Y : last.X;                                 }                                 break;                              case 'm':                             case 'M':                                 {                                     p = alt ? control.Parent.Margin.Top : control.Parent.Margin.Left;                                     var all = control.FindForm().Controls;                                      if (all.Count == 0)                                         break;                                      int x = 0' y = 0;                                     int px = 0' py = 0;                                      foreach (Control ctrl in all)                                     {                                         if (ctrl == control)                                             continue;                                          x = Math.Max(x' ctrl.Location.X + ctrl.Width);                                         y = Math.Max(y' ctrl.Location.Y + ctrl.Height);                                          px = ctrl.Margin.Right;                                         py = ctrl.Margin.Bottom;                                     }                                      px += control.Margin.Left;                                     py += control.Margin.Top;                                      // don't know why this is necessary:                                     px *= 2;                                     py *= 2;                                      control.Location = alt ? new Point(px + x' control.Location.Y) : new Point(control.Location.X' py + y);                                 }                                 break;                              case 'p':                             case 'P':                                 {                                     Control last = null;                                     try {                                         last = GuiAssociatedInfo(control).LastControl;                                     } catch(InvalidOperationException) { }                                      if (last == null)                                         return;                                     var s = last.Location;                                     p = alt ? s.Y : s.X;                                 }                                 break;                              case '+':                                 {                                     Control last = null;                                     try {                                         last = GuiAssociatedInfo(control).LastControl;                                     } catch(InvalidOperationException) { }                                      if(last == null)                                         return;                                     p = alt ? last.Location.Y + last.Size.Height : last.Location.X + last.Size.Width;                                 }                                 break;                              default:                                 offset = false;                                 break;                         }                          arg = mode.Substring(offset ? 2 : 1);                          if (!int.TryParse(arg' out d))                             d = 0;                          d += p;                          if (alt)                             control.Location = new Point(control.Location.X' d);                         else                             control.Location = new Point(d' control.Location.Y);                     }                     break;                  case 'y':                 case 'Y':                     alt = true;                     goto case 'x';                  case 'w':                 case 'W':                     {                         offset = mode[1] == 'p' || mode[1] == 'P';                         arg = mode.Substring(offset ? 2 : 1);                          if (arg.Length == 0)                             d = 0;                         else if (!int.TryParse(arg' out d))                             return;                          if (offset)                         {                             Control last = null;                             try {                                 last = GuiAssociatedInfo(control).LastControl;                             } catch(InvalidOperationException) { }                              if (last == null)                                 return;                             var s = last.Size;                             d += alt ? s.Height : s.Width;                         }                          if (alt)                             control.Size = new Size(control.Size.Width' d);                         else                             control.Size = new Size(d' control.Size.Height);                     }                     break;                  case 'h':                 case 'H':                     if (control is TextBox)                         ((TextBox)control).Multiline = true;                     alt = true;                     goto case 'w';             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlMove,The following statement contains a magic number: switch (mode[0])             {                 case 'x':                 case 'X':                     {                         offset = true;                         int p = 0;                          switch (mode[1])                         {                             case 's':                             case 'S':                                 {                                     var sec = GuiAssociatedInfo(control).Section;                                     var last = sec.IsEmpty ? new Point(control.Parent.Margin.Left' control.Parent.Margin.Top) : sec;                                     p = alt ? last.Y : last.X;                                 }                                 break;                              case 'm':                             case 'M':                                 {                                     p = alt ? control.Parent.Margin.Top : control.Parent.Margin.Left;                                     var all = control.FindForm().Controls;                                      if (all.Count == 0)                                         break;                                      int x = 0' y = 0;                                     int px = 0' py = 0;                                      foreach (Control ctrl in all)                                     {                                         if (ctrl == control)                                             continue;                                          x = Math.Max(x' ctrl.Location.X + ctrl.Width);                                         y = Math.Max(y' ctrl.Location.Y + ctrl.Height);                                          px = ctrl.Margin.Right;                                         py = ctrl.Margin.Bottom;                                     }                                      px += control.Margin.Left;                                     py += control.Margin.Top;                                      // don't know why this is necessary:                                     px *= 2;                                     py *= 2;                                      control.Location = alt ? new Point(px + x' control.Location.Y) : new Point(control.Location.X' py + y);                                 }                                 break;                              case 'p':                             case 'P':                                 {                                     Control last = null;                                     try {                                         last = GuiAssociatedInfo(control).LastControl;                                     } catch(InvalidOperationException) { }                                      if (last == null)                                         return;                                     var s = last.Location;                                     p = alt ? s.Y : s.X;                                 }                                 break;                              case '+':                                 {                                     Control last = null;                                     try {                                         last = GuiAssociatedInfo(control).LastControl;                                     } catch(InvalidOperationException) { }                                      if(last == null)                                         return;                                     p = alt ? last.Location.Y + last.Size.Height : last.Location.X + last.Size.Width;                                 }                                 break;                              default:                                 offset = false;                                 break;                         }                          arg = mode.Substring(offset ? 2 : 1);                          if (!int.TryParse(arg' out d))                             d = 0;                          d += p;                          if (alt)                             control.Location = new Point(control.Location.X' d);                         else                             control.Location = new Point(d' control.Location.Y);                     }                     break;                  case 'y':                 case 'Y':                     alt = true;                     goto case 'x';                  case 'w':                 case 'W':                     {                         offset = mode[1] == 'p' || mode[1] == 'P';                         arg = mode.Substring(offset ? 2 : 1);                          if (arg.Length == 0)                             d = 0;                         else if (!int.TryParse(arg' out d))                             return;                          if (offset)                         {                             Control last = null;                             try {                                 last = GuiAssociatedInfo(control).LastControl;                             } catch(InvalidOperationException) { }                              if (last == null)                                 return;                             var s = last.Size;                             d += alt ? s.Height : s.Width;                         }                          if (alt)                             control.Size = new Size(control.Size.Width' d);                         else                             control.Size = new Size(d' control.Size.Height);                     }                     break;                  case 'h':                 case 'H':                     if (control is TextBox)                         ((TextBox)control).Multiline = true;                     alt = true;                     goto case 'w';             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlMove,The following statement contains a magic number: switch (mode[0])             {                 case 'x':                 case 'X':                     {                         offset = true;                         int p = 0;                          switch (mode[1])                         {                             case 's':                             case 'S':                                 {                                     var sec = GuiAssociatedInfo(control).Section;                                     var last = sec.IsEmpty ? new Point(control.Parent.Margin.Left' control.Parent.Margin.Top) : sec;                                     p = alt ? last.Y : last.X;                                 }                                 break;                              case 'm':                             case 'M':                                 {                                     p = alt ? control.Parent.Margin.Top : control.Parent.Margin.Left;                                     var all = control.FindForm().Controls;                                      if (all.Count == 0)                                         break;                                      int x = 0' y = 0;                                     int px = 0' py = 0;                                      foreach (Control ctrl in all)                                     {                                         if (ctrl == control)                                             continue;                                          x = Math.Max(x' ctrl.Location.X + ctrl.Width);                                         y = Math.Max(y' ctrl.Location.Y + ctrl.Height);                                          px = ctrl.Margin.Right;                                         py = ctrl.Margin.Bottom;                                     }                                      px += control.Margin.Left;                                     py += control.Margin.Top;                                      // don't know why this is necessary:                                     px *= 2;                                     py *= 2;                                      control.Location = alt ? new Point(px + x' control.Location.Y) : new Point(control.Location.X' py + y);                                 }                                 break;                              case 'p':                             case 'P':                                 {                                     Control last = null;                                     try {                                         last = GuiAssociatedInfo(control).LastControl;                                     } catch(InvalidOperationException) { }                                      if (last == null)                                         return;                                     var s = last.Location;                                     p = alt ? s.Y : s.X;                                 }                                 break;                              case '+':                                 {                                     Control last = null;                                     try {                                         last = GuiAssociatedInfo(control).LastControl;                                     } catch(InvalidOperationException) { }                                      if(last == null)                                         return;                                     p = alt ? last.Location.Y + last.Size.Height : last.Location.X + last.Size.Width;                                 }                                 break;                              default:                                 offset = false;                                 break;                         }                          arg = mode.Substring(offset ? 2 : 1);                          if (!int.TryParse(arg' out d))                             d = 0;                          d += p;                          if (alt)                             control.Location = new Point(control.Location.X' d);                         else                             control.Location = new Point(d' control.Location.Y);                     }                     break;                  case 'y':                 case 'Y':                     alt = true;                     goto case 'x';                  case 'w':                 case 'W':                     {                         offset = mode[1] == 'p' || mode[1] == 'P';                         arg = mode.Substring(offset ? 2 : 1);                          if (arg.Length == 0)                             d = 0;                         else if (!int.TryParse(arg' out d))                             return;                          if (offset)                         {                             Control last = null;                             try {                                 last = GuiAssociatedInfo(control).LastControl;                             } catch(InvalidOperationException) { }                              if (last == null)                                 return;                             var s = last.Size;                             d += alt ? s.Height : s.Width;                         }                          if (alt)                             control.Size = new Size(control.Size.Width' d);                         else                             control.Size = new Size(d' control.Size.Height);                     }                     break;                  case 'h':                 case 'H':                     if (control is TextBox)                         ((TextBox)control).Multiline = true;                     alt = true;                     goto case 'w';             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlMove,The following statement contains a magic number: switch (mode[0])             {                 case 'x':                 case 'X':                     {                         offset = true;                         int p = 0;                          switch (mode[1])                         {                             case 's':                             case 'S':                                 {                                     var sec = GuiAssociatedInfo(control).Section;                                     var last = sec.IsEmpty ? new Point(control.Parent.Margin.Left' control.Parent.Margin.Top) : sec;                                     p = alt ? last.Y : last.X;                                 }                                 break;                              case 'm':                             case 'M':                                 {                                     p = alt ? control.Parent.Margin.Top : control.Parent.Margin.Left;                                     var all = control.FindForm().Controls;                                      if (all.Count == 0)                                         break;                                      int x = 0' y = 0;                                     int px = 0' py = 0;                                      foreach (Control ctrl in all)                                     {                                         if (ctrl == control)                                             continue;                                          x = Math.Max(x' ctrl.Location.X + ctrl.Width);                                         y = Math.Max(y' ctrl.Location.Y + ctrl.Height);                                          px = ctrl.Margin.Right;                                         py = ctrl.Margin.Bottom;                                     }                                      px += control.Margin.Left;                                     py += control.Margin.Top;                                      // don't know why this is necessary:                                     px *= 2;                                     py *= 2;                                      control.Location = alt ? new Point(px + x' control.Location.Y) : new Point(control.Location.X' py + y);                                 }                                 break;                              case 'p':                             case 'P':                                 {                                     Control last = null;                                     try {                                         last = GuiAssociatedInfo(control).LastControl;                                     } catch(InvalidOperationException) { }                                      if (last == null)                                         return;                                     var s = last.Location;                                     p = alt ? s.Y : s.X;                                 }                                 break;                              case '+':                                 {                                     Control last = null;                                     try {                                         last = GuiAssociatedInfo(control).LastControl;                                     } catch(InvalidOperationException) { }                                      if(last == null)                                         return;                                     p = alt ? last.Location.Y + last.Size.Height : last.Location.X + last.Size.Width;                                 }                                 break;                              default:                                 offset = false;                                 break;                         }                          arg = mode.Substring(offset ? 2 : 1);                          if (!int.TryParse(arg' out d))                             d = 0;                          d += p;                          if (alt)                             control.Location = new Point(control.Location.X' d);                         else                             control.Location = new Point(d' control.Location.Y);                     }                     break;                  case 'y':                 case 'Y':                     alt = true;                     goto case 'x';                  case 'w':                 case 'W':                     {                         offset = mode[1] == 'p' || mode[1] == 'P';                         arg = mode.Substring(offset ? 2 : 1);                          if (arg.Length == 0)                             d = 0;                         else if (!int.TryParse(arg' out d))                             return;                          if (offset)                         {                             Control last = null;                             try {                                 last = GuiAssociatedInfo(control).LastControl;                             } catch(InvalidOperationException) { }                              if (last == null)                                 return;                             var s = last.Size;                             d += alt ? s.Height : s.Width;                         }                          if (alt)                             control.Size = new Size(control.Size.Width' d);                         else                             control.Size = new Size(d' control.Size.Height);                     }                     break;                  case 'h':                 case 'H':                     if (control is TextBox)                         ((TextBox)control).Multiline = true;                     alt = true;                     goto case 'w';             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlAsync,The following statement contains a magic number: switch (cmd)             {                 case Keyword_Text:                     if (ctrl is TextBox)                         arg = NormaliseEol(arg);                     ctrl.Text = arg;                     break;                 case "":                     {                         if (ctrl is ProgressBar || ctrl is TrackBar || ctrl is NumericUpDown)                         {                             int argAsInt;                             if (int.TryParse(arg' out argAsInt))                                 SafeSetProperty(ctrl' "Value"' argAsInt);                                                      }                         else                         {                             if (ctrl is DateTimePicker)                             {                                 DateTime argAsDateTime = ToDateTime(arg);                                 if (!(string.IsNullOrEmpty(arg)))                                     SafeSetProperty(ctrl' "Value"' argAsDateTime);                                 else                                     SafeSetProperty(ctrl' "Value"' DateTime.Now);                             }                             else                             {                                 if (ctrl is ComboBox)                                 {                                     if (SubStr(arg' 1' 1) == "|")                                         ((ComboBox)ctrl).Items.Clear(); arg = SubStr(arg' 2' StrLen(arg) - 1);                                     string[] argAsStringArray = arg.Split('|');                                     foreach (string s in argAsStringArray)                                             ((ComboBox)ctrl).Items.Add(s);                                 }                                 else                                 {                                     if (ctrl is PictureBox)                                     {                                         if (File.Exists(arg))                                         {                                             try                                                 {                                                     SafeSetProperty(ctrl' "ImageLocation"' arg);                                                 }                                             catch(Exception){ }                                         }                                     }                                     else                                     {                                         if (ctrl is WebBrowser)                                         {                                             ((WebBrowser)ctrl).Navigate(arg);                                         }                                         else                                         {                                             if (ctrl is ListBox)                                             {                                                 if (SubStr(arg' 1' 1) == "|")                                                     ((ListBox)ctrl).Items.Clear(); arg = SubStr(arg' 2' StrLen(arg) - 1);                                                 string[] argAsStringArray = arg.Split('|');                                                 foreach (string s in argAsStringArray)                                                         ((ListBox)ctrl).Items.Add(s);                                             }                                             else                                             {                                                 arg = NormaliseEol(arg);                                                 SafeSetProperty(ctrl' "Text"' arg);                                             }                                         }                                     }                                 }                             }                         }                     }                     break;                  case Keyword_Move:                 case Keyword_MoveDraw:                     GuiControlMove(arg' ctrl);                     break;                  case Keyword_Focus:                     ctrl.Focus();                     break;                  case Keyword_Enable:                     ctrl.Enabled = true;                     break;                  case Keyword_Disable:                     ctrl.Enabled = false;                     break;                  case Keyword_Hide:                     ctrl.Visible = false;                     break;                  case Keyword_Show:                     ctrl.Visible = true;                     break;                  case Keyword_Delete:                     ctrl.Parent.Controls.Remove(ctrl);                     ctrl.Dispose();                     break;                  case Keyword_Choose:                     // UNDONE: choose item for gui control                     break;                  case Keyword_Font:                     // TODO: change control font                     break;                  default:                     int n;                     if (cmd.StartsWith(Keyword_Enable) && int.TryParse(cmd.Substring(Keyword_Enable.Length)' out n) && (n == 1 || n == 0))                         ctrl.Enabled = n == 1;                     if (cmd.StartsWith(Keyword_Disable) && int.TryParse(cmd.Substring(Keyword_Disable.Length)' out n) && (n == 1 || n == 0))                         ctrl.Enabled = n == 0;                     GuiApplyExtendedStyles(ctrl' arg);                     break;             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlAsync,The following statement contains a magic number: switch (cmd)             {                 case Keyword_Text:                     if (ctrl is TextBox)                         arg = NormaliseEol(arg);                     ctrl.Text = arg;                     break;                 case "":                     {                         if (ctrl is ProgressBar || ctrl is TrackBar || ctrl is NumericUpDown)                         {                             int argAsInt;                             if (int.TryParse(arg' out argAsInt))                                 SafeSetProperty(ctrl' "Value"' argAsInt);                                                      }                         else                         {                             if (ctrl is DateTimePicker)                             {                                 DateTime argAsDateTime = ToDateTime(arg);                                 if (!(string.IsNullOrEmpty(arg)))                                     SafeSetProperty(ctrl' "Value"' argAsDateTime);                                 else                                     SafeSetProperty(ctrl' "Value"' DateTime.Now);                             }                             else                             {                                 if (ctrl is ComboBox)                                 {                                     if (SubStr(arg' 1' 1) == "|")                                         ((ComboBox)ctrl).Items.Clear(); arg = SubStr(arg' 2' StrLen(arg) - 1);                                     string[] argAsStringArray = arg.Split('|');                                     foreach (string s in argAsStringArray)                                             ((ComboBox)ctrl).Items.Add(s);                                 }                                 else                                 {                                     if (ctrl is PictureBox)                                     {                                         if (File.Exists(arg))                                         {                                             try                                                 {                                                     SafeSetProperty(ctrl' "ImageLocation"' arg);                                                 }                                             catch(Exception){ }                                         }                                     }                                     else                                     {                                         if (ctrl is WebBrowser)                                         {                                             ((WebBrowser)ctrl).Navigate(arg);                                         }                                         else                                         {                                             if (ctrl is ListBox)                                             {                                                 if (SubStr(arg' 1' 1) == "|")                                                     ((ListBox)ctrl).Items.Clear(); arg = SubStr(arg' 2' StrLen(arg) - 1);                                                 string[] argAsStringArray = arg.Split('|');                                                 foreach (string s in argAsStringArray)                                                         ((ListBox)ctrl).Items.Add(s);                                             }                                             else                                             {                                                 arg = NormaliseEol(arg);                                                 SafeSetProperty(ctrl' "Text"' arg);                                             }                                         }                                     }                                 }                             }                         }                     }                     break;                  case Keyword_Move:                 case Keyword_MoveDraw:                     GuiControlMove(arg' ctrl);                     break;                  case Keyword_Focus:                     ctrl.Focus();                     break;                  case Keyword_Enable:                     ctrl.Enabled = true;                     break;                  case Keyword_Disable:                     ctrl.Enabled = false;                     break;                  case Keyword_Hide:                     ctrl.Visible = false;                     break;                  case Keyword_Show:                     ctrl.Visible = true;                     break;                  case Keyword_Delete:                     ctrl.Parent.Controls.Remove(ctrl);                     ctrl.Dispose();                     break;                  case Keyword_Choose:                     // UNDONE: choose item for gui control                     break;                  case Keyword_Font:                     // TODO: change control font                     break;                  default:                     int n;                     if (cmd.StartsWith(Keyword_Enable) && int.TryParse(cmd.Substring(Keyword_Enable.Length)' out n) && (n == 1 || n == 0))                         ctrl.Enabled = n == 1;                     if (cmd.StartsWith(Keyword_Disable) && int.TryParse(cmd.Substring(Keyword_Disable.Length)' out n) && (n == 1 || n == 0))                         ctrl.Enabled = n == 0;                     GuiApplyExtendedStyles(ctrl' arg);                     break;             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,OnEditKeyPress,The following statement contains a magic number: !(char.IsDigit(e.KeyChar) || char.IsNumber(e.KeyChar) || e.KeyChar == '.' || e.KeyChar == ''' || (int)e.KeyChar == 8 || (int)e.KeyChar == 58 || (int)e.KeyChar == 59)
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,OnEditKeyPress,The following statement contains a magic number: !(char.IsDigit(e.KeyChar) || char.IsNumber(e.KeyChar) || e.KeyChar == '.' || e.KeyChar == ''' || (int)e.KeyChar == 8 || (int)e.KeyChar == 58 || (int)e.KeyChar == 59)
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,OnEditKeyPress,The following statement contains a magic number: !(char.IsDigit(e.KeyChar) || char.IsNumber(e.KeyChar) || e.KeyChar == '.' || e.KeyChar == ''' || (int)e.KeyChar == 8 || (int)e.KeyChar == 58 || (int)e.KeyChar == 59)
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,LV_GetCount,The following statement contains a magic number: type == Keyword_Column || type.Length == 1 && type[0] == Keyword_Column[0] || type.Length == 3 && Keyword_Column.StartsWith(type)
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,LV_SetImageList,The following statement contains a magic number: switch (type)             {                 case 0: list.LargeImageList = img; break;                 case 1: list.SmallImageList = img; break;                 case 2: list.StateImageList = img; break;             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,SB_SetText,The following statement contains a magic number: switch (Style)             {                 case 0:                     border = StatusBarPanelBorderStyle.Sunken;                     break;                  case 1:                     border = StatusBarPanelBorderStyle.None;                     break;                  case 2:                     border = StatusBarPanelBorderStyle.Raised;                     break;             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Hotkey,The following statement contains a magic number: switch (KeyName.ToLowerInvariant())             {                 case Keyword_IfWinActive: win = 0; break;                 case Keyword_IfWinExist: win = 1; break;                 case Keyword_IfWinNotActive: win = 2; break;                 case Keyword_IfWinNotExit: win = 3; break;             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Hotkey,The following statement contains a magic number: switch (KeyName.ToLowerInvariant())             {                 case Keyword_IfWinActive: win = 0; break;                 case Keyword_IfWinExist: win = 1; break;                 case Keyword_IfWinNotActive: win = 2; break;                 case Keyword_IfWinNotExit: win = 3; break;             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Hotkey,The following statement contains a magic number: var cond = new string[4' 2];
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Hotkey,The following statement contains a magic number: var cond = new string[4' 2];
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Hotkey,The following statement contains a magic number: switch (option.ToLowerInvariant())                 {                     case Keyword_On: enabled = true; break;                     case Keyword_Off: enabled = false; break;                     case Keyword_Toggle: enabled = null; break;                     case Keyword_UseErrorLevel: break;                      default:                         switch (option[0])                         {                             case 'B':                             case 'b':                             case 'P':                             case 'p':                             case 'T':                             case 't':                                 break;                              default:                                 ErrorLevel = 10;                                 break;                         }                         break;                 }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,HotkeyPrecondition,The following statement contains a magic number: !string.IsNullOrEmpty(win[2' 0]) || !string.IsNullOrEmpty(win[2' 1])
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,HotkeyPrecondition,The following statement contains a magic number: !string.IsNullOrEmpty(win[2' 0]) || !string.IsNullOrEmpty(win[2' 1])
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,HotkeyPrecondition,The following statement contains a magic number: !string.IsNullOrEmpty(win[3' 0]) || !string.IsNullOrEmpty(win[3' 1])
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,HotkeyPrecondition,The following statement contains a magic number: !string.IsNullOrEmpty(win[3' 0]) || !string.IsNullOrEmpty(win[3' 1])
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,KeyWait,The following statement contains a magic number: keyWaitCommand.TimeOutVal = (int)(timeout * 1000);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Input,The following statement contains a magic number: inputHandler.TimeOutVal = (int)(timeout * 1000);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Log,The following statement contains a magic number: return b == 10 ? Math.Log10(n) : Math.Log(n' b);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,PixelGetColor,The following statement contains a magic number: switch (colour)             {                 case 8:                 case 16:                     format = PixelFormat.Format16bppRgb565;                     break;                 case 24: format = PixelFormat.Format24bppRgb;                     break;                 case 32: format = PixelFormat.Format32bppArgb;                     break;                 default: format = PixelFormat.Format32bppArgb;                     break;             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,PixelGetColor,The following statement contains a magic number: switch (colour)             {                 case 8:                 case 16:                     format = PixelFormat.Format16bppRgb565;                     break;                 case 24: format = PixelFormat.Format24bppRgb;                     break;                 case 32: format = PixelFormat.Format32bppArgb;                     break;                 default: format = PixelFormat.Format32bppArgb;                     break;             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,PixelGetColor,The following statement contains a magic number: switch (colour)             {                 case 8:                 case 16:                     format = PixelFormat.Format16bppRgb565;                     break;                 case 24: format = PixelFormat.Format24bppRgb;                     break;                 case 32: format = PixelFormat.Format32bppArgb;                     break;                 default: format = PixelFormat.Format32bppArgb;                     break;             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,PixelGetColor,The following statement contains a magic number: switch (colour)             {                 case 8:                 case 16:                     format = PixelFormat.Format16bppRgb565;                     break;                 case 24: format = PixelFormat.Format24bppRgb;                     break;                 case 32: format = PixelFormat.Format32bppArgb;                     break;                 default: format = PixelFormat.Format32bppArgb;                     break;             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Click,The following statement contains a magic number: MousePos.Y = Convert.ToInt32(Match.Groups[2].Value);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Click,The following statement contains a magic number: var aInput = new WindowsAPI.INPUT[2];
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,MouseGetPos,The following statement contains a magic number: var cid = (mode & 2) == 2;
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,MouseGetPos,The following statement contains a magic number: var cid = (mode & 2) == 2;
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Process,The following statement contains a magic number: const int scale = 1000;
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,SoundBeep,The following statement contains a magic number: frequency = 523;
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,SoundBeep,The following statement contains a magic number: duration = 150;
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,SoundPlay,The following statement contains a magic number: switch (n)                 {                     case -1: SystemSounds.Beep.Play(); break;                     case 16: SystemSounds.Hand.Play(); break;                     case 32: SystemSounds.Question.Play(); break;                     case 48: SystemSounds.Exclamation.Play(); break;                     case 64: SystemSounds.Asterisk.Play(); break;                     default: ErrorLevel = 1; break;                 }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,SoundPlay,The following statement contains a magic number: switch (n)                 {                     case -1: SystemSounds.Beep.Play(); break;                     case 16: SystemSounds.Hand.Play(); break;                     case 32: SystemSounds.Question.Play(); break;                     case 48: SystemSounds.Exclamation.Play(); break;                     case 64: SystemSounds.Asterisk.Play(); break;                     default: ErrorLevel = 1; break;                 }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,SoundPlay,The following statement contains a magic number: switch (n)                 {                     case -1: SystemSounds.Beep.Play(); break;                     case 16: SystemSounds.Hand.Play(); break;                     case 32: SystemSounds.Question.Play(); break;                     case 48: SystemSounds.Exclamation.Play(); break;                     case 64: SystemSounds.Asterisk.Play(); break;                     default: ErrorLevel = 1; break;                 }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,SoundPlay,The following statement contains a magic number: switch (n)                 {                     case -1: SystemSounds.Beep.Play(); break;                     case 16: SystemSounds.Hand.Play(); break;                     case 32: SystemSounds.Question.Play(); break;                     case 48: SystemSounds.Exclamation.Play(); break;                     case 64: SystemSounds.Asterisk.Play(); break;                     default: ErrorLevel = 1; break;                 }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,SoundSetWaveVolume,The following statement contains a magic number: vol = (uint)(vol * double.Parse(percent.Substring(1)) / 100);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FormatTime,The following statement contains a magic number: switch (format.ToLowerInvariant())             {                 case Keyword_Time:                     format = "t";                     break;                  case Keyword_ShortDate:                     format = "d";                     break;                  case Keyword_LongDate:                     format = "D";                     break;                  case Keyword_YearMonth:                     format = "Y";                     break;                  case Keyword_YDay:                     output = time.DayOfYear.ToString();                     return;                  case Keyword_YDay0:                     output = time.DayOfYear.ToString().PadLeft(3' '0');                     return;                  case Keyword_WDay:                     output = time.DayOfWeek.ToString();                     return;                  case Keyword_YWeek:                     {                         int week = System.Threading.Thread.CurrentThread.CurrentCulture.Calendar.GetWeekOfYear(time' CalendarWeekRule.FirstDay' DayOfWeek.Monday);                         output = time.ToString("Y") + week;                         return;                     }                  default:                     if (format.Length == 0)                         format = "f";                     break;             }
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,HexDecode,The following statement contains a magic number: var binary = new byte[hex.Length / 2];
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,HexDecode,The following statement contains a magic number: binary[i / 2] = byte.Parse(n' NumberStyles.AllowHexSpecifier);
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Sort,The following statement contains a magic number: Array.Sort(list' delegate(string x' string y)             {                 if (function != null)                 {                     object value = null;                      try { value = function.Invoke(null' new object[] { new object[] { x' y } }); }                     catch (Exception) { }                      int result;                      if (value is string && int.TryParse((string)value' out result))                         return result;                      return 0;                 }                 else if (x == y)                     return 0;                 else if (random)                     return rand.Next(-1' 2);                 else if (numeric)                 {                     int a' b;                     return int.TryParse(x' out a) && int.TryParse(y' out b) ?                         a.CompareTo(b) : x.CompareTo(y);                 }                 else                 {                     if (slash)                     {                         int z = x.LastIndexOf('\\');                         if (z != -1)                             x = x.Substring(z + 1);                         z = y.LastIndexOf('\\');                         if (z != -1)                             y = y.Substring(z + 1);                         if (x == y)                             return 0;                     }                     return withcase ? x.CompareTo(y) : comp.Compare(x' y);                 }             });
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,WinWait,The following statement contains a magic number: ErrorLevel = win.Wait(seconds == -1 ? seconds : seconds * 1000) ? 0 : 1;
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,WinWaitActive,The following statement contains a magic number: ErrorLevel = win.WaitActive(seconds == -1 ? seconds : seconds * 1000) ? 0 : 1;
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,WinWaitClose,The following statement contains a magic number: ErrorLevel = win.WaitClose(seconds == -1 ? seconds : seconds * 1000) ? 0 : 1;
Magic Number,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,WinWaitNotActive,The following statement contains a magic number: ErrorLevel = win.WaitNotActive(seconds == -1 ? seconds : seconds * 1000) ? 0 : 1;
Magic Number,IronAHK.Rusty,ComplexDlgOptions,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\ComplexDlgOptions.cs,ParseGuiID,The following statement contains a magic number: this.Param1 = RegEx_GUIID.Match(Param1).Groups[2].Captures[0].ToString();
Magic Number,IronAHK.Rusty,InputDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\InputDialog.cs,InitializeComponent,The following statement contains a magic number: prompt.Location = new Point(20' 20);
Magic Number,IronAHK.Rusty,InputDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\InputDialog.cs,InitializeComponent,The following statement contains a magic number: prompt.Location = new Point(20' 20);
Magic Number,IronAHK.Rusty,InputDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\InputDialog.cs,InitializeComponent,The following statement contains a magic number: prompt.Size = new Size(240' 48);
Magic Number,IronAHK.Rusty,InputDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\InputDialog.cs,InitializeComponent,The following statement contains a magic number: prompt.Size = new Size(240' 48);
Magic Number,IronAHK.Rusty,InputDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\InputDialog.cs,InitializeComponent,The following statement contains a magic number: btnOK.Location = new Point(16' 104);
Magic Number,IronAHK.Rusty,InputDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\InputDialog.cs,InitializeComponent,The following statement contains a magic number: btnOK.Location = new Point(16' 104);
Magic Number,IronAHK.Rusty,InputDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\InputDialog.cs,InitializeComponent,The following statement contains a magic number: btnOK.Size = new Size(96' 24);
Magic Number,IronAHK.Rusty,InputDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\InputDialog.cs,InitializeComponent,The following statement contains a magic number: btnOK.Size = new Size(96' 24);
Magic Number,IronAHK.Rusty,InputDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\InputDialog.cs,InitializeComponent,The following statement contains a magic number: btnOK.TabIndex = 2;
Magic Number,IronAHK.Rusty,InputDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\InputDialog.cs,InitializeComponent,The following statement contains a magic number: btnCancel.Location = new Point(152' 104);
Magic Number,IronAHK.Rusty,InputDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\InputDialog.cs,InitializeComponent,The following statement contains a magic number: btnCancel.Location = new Point(152' 104);
Magic Number,IronAHK.Rusty,InputDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\InputDialog.cs,InitializeComponent,The following statement contains a magic number: btnCancel.Size = new Size(96' 24);
Magic Number,IronAHK.Rusty,InputDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\InputDialog.cs,InitializeComponent,The following statement contains a magic number: btnCancel.Size = new Size(96' 24);
Magic Number,IronAHK.Rusty,InputDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\InputDialog.cs,InitializeComponent,The following statement contains a magic number: btnCancel.TabIndex = 3;
Magic Number,IronAHK.Rusty,InputDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\InputDialog.cs,InitializeComponent,The following statement contains a magic number: txtMessage.Location = new Point(16' 72);
Magic Number,IronAHK.Rusty,InputDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\InputDialog.cs,InitializeComponent,The following statement contains a magic number: txtMessage.Location = new Point(16' 72);
Magic Number,IronAHK.Rusty,InputDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\InputDialog.cs,InitializeComponent,The following statement contains a magic number: txtMessage.Size = new Size(232' 20);
Magic Number,IronAHK.Rusty,InputDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\InputDialog.cs,InitializeComponent,The following statement contains a magic number: txtMessage.Size = new Size(232' 20);
Magic Number,IronAHK.Rusty,InputDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\InputDialog.cs,InitializeComponent,The following statement contains a magic number: AutoScaleBaseSize = new Size(5' 13);
Magic Number,IronAHK.Rusty,InputDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\InputDialog.cs,InitializeComponent,The following statement contains a magic number: AutoScaleBaseSize = new Size(5' 13);
Magic Number,IronAHK.Rusty,InputDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\InputDialog.cs,InitializeComponent,The following statement contains a magic number: ClientSize = new Size(266' 151);
Magic Number,IronAHK.Rusty,InputDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\InputDialog.cs,InitializeComponent,The following statement contains a magic number: ClientSize = new Size(266' 151);
Magic Number,IronAHK.Rusty,ProgressDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\ProgressDialog.cs,InitializeComponent,The following statement contains a magic number: layoutTable.RowCount = 3;
Magic Number,IronAHK.Rusty,ProgressDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\ProgressDialog.cs,InitializeComponent,The following statement contains a magic number: mainText.Size = new Size(240' 48);
Magic Number,IronAHK.Rusty,ProgressDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\ProgressDialog.cs,InitializeComponent,The following statement contains a magic number: mainText.Size = new Size(240' 48);
Magic Number,IronAHK.Rusty,ProgressDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\ProgressDialog.cs,InitializeComponent,The following statement contains a magic number: mainText.Font = new Font(mainText.Font.FontFamily' 12' FontStyle.Bold);
Magic Number,IronAHK.Rusty,ProgressDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\ProgressDialog.cs,InitializeComponent,The following statement contains a magic number: progressBar.Size = new Size(300' 20);
Magic Number,IronAHK.Rusty,ProgressDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\ProgressDialog.cs,InitializeComponent,The following statement contains a magic number: progressBar.Size = new Size(300' 20);
Magic Number,IronAHK.Rusty,ProgressDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\ProgressDialog.cs,InitializeComponent,The following statement contains a magic number: subText.Size = new Size(232' 20);
Magic Number,IronAHK.Rusty,ProgressDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\ProgressDialog.cs,InitializeComponent,The following statement contains a magic number: subText.Size = new Size(232' 20);
Magic Number,IronAHK.Rusty,ProgressDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\ProgressDialog.cs,InitializeComponent,The following statement contains a magic number: layoutTable.Controls.Add(subText' 0' 2);
Magic Number,IronAHK.Rusty,ProgressDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\ProgressDialog.cs,InitializeComponent,The following statement contains a magic number: AutoScaleBaseSize = new Size(5' 13);
Magic Number,IronAHK.Rusty,ProgressDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\ProgressDialog.cs,InitializeComponent,The following statement contains a magic number: AutoScaleBaseSize = new Size(5' 13);
Magic Number,IronAHK.Rusty,ProgressDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\ProgressDialog.cs,InitializeComponent,The following statement contains a magic number: ClientSize = new Size(320' 151);
Magic Number,IronAHK.Rusty,ProgressDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\ProgressDialog.cs,InitializeComponent,The following statement contains a magic number: ClientSize = new Size(320' 151);
Magic Number,IronAHK.Rusty,SplashDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\SplashDialog.cs,InitializeComponent,The following statement contains a magic number: layoutTable.RowCount = 3;
Magic Number,IronAHK.Rusty,SplashDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\SplashDialog.cs,InitializeComponent,The following statement contains a magic number: main.Size = new Size(100' 20);
Magic Number,IronAHK.Rusty,SplashDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\SplashDialog.cs,InitializeComponent,The following statement contains a magic number: main.Size = new Size(100' 20);
Magic Number,IronAHK.Rusty,SplashDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\SplashDialog.cs,InitializeComponent,The following statement contains a magic number: main.Location = new Point(0' 30);
Magic Number,IronAHK.Rusty,SplashDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\SplashDialog.cs,InitializeComponent,The following statement contains a magic number: pic.Size = new Size(100' 20);
Magic Number,IronAHK.Rusty,SplashDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\SplashDialog.cs,InitializeComponent,The following statement contains a magic number: pic.Size = new Size(100' 20);
Magic Number,IronAHK.Rusty,SplashDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\SplashDialog.cs,InitializeComponent,The following statement contains a magic number: pic.Location = new Point(0' 40);
Magic Number,IronAHK.Rusty,SplashDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\SplashDialog.cs,InitializeComponent,The following statement contains a magic number: sub.Size = new Size(100' 20);
Magic Number,IronAHK.Rusty,SplashDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\SplashDialog.cs,InitializeComponent,The following statement contains a magic number: sub.Size = new Size(100' 20);
Magic Number,IronAHK.Rusty,SplashDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\SplashDialog.cs,InitializeComponent,The following statement contains a magic number: sub.Location = new Point(0' 150);
Magic Number,IronAHK.Rusty,SplashDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\SplashDialog.cs,InitializeComponent,The following statement contains a magic number: layoutTable.Controls.Add(sub' 0' 2);
Magic Number,IronAHK.Rusty,SplashDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\SplashDialog.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(500' 400);
Magic Number,IronAHK.Rusty,SplashDialog,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\Dialogs\SplashDialog.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(500' 400);
Magic Number,IronAHK.Rusty,HotkeyBox,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\HotkeyBox.cs,Validate,The following statement contains a magic number: i < 3
Magic Number,IronAHK.Rusty,HotkeyBox,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Gui\HotkeyBox.cs,SetText,The following statement contains a magic number: var buf = new StringBuilder(45);
Magic Number,IronAHK.Rusty,WindowsAPI,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Windows\PInvoke.cs,MakeInt,The following statement contains a magic number: return (int)(((ushort)lowPart) | (uint)(highPart << 16));
Magic Number,IronAHK.Rusty,WindowsAPI,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Windows\PInvoke.cs,GetClassName,The following statement contains a magic number: var buf = new StringBuilder(64);
Magic Number,IronAHK.Rusty.Common,IAInputCommand,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\InputCommand.cs,StartCatching,The following statement contains a magic number: Thread.Sleep(2);
Magic Number,IronAHK.Rusty.Common,IAInputCommand,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\InputCommand.cs,OnKeyPressedEvent,The following statement contains a magic number: catchedText = catchedText.Substring(0' catchedText.Length - 2);
Magic Number,IronAHK.Rusty.Common,KeyboardHook,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\KeyboardHook.cs,HasModifiers,The following statement contains a magic number: i < 3
Magic Number,IronAHK.Rusty.Common,KeyParser,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\KeyParser.cs,ParseKeyStream,The following statement contains a magic number: var buf = new[] { new StringBuilder(sequence.Length)' new StringBuilder(16) };
Magic Number,IronAHK.Rusty.Common,KeyWaitCommand,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\KeyWaitCommand.cs,Wait,The following statement contains a magic number: Thread.Sleep(2);
Magic Number,IronAHK.Rusty.Common,CRC32,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\CRC32.cs,HashCore,The following statement contains a magic number: value = table[(value ^ buffer[start++]) & 0xFF] ^ (value >> 8);
Magic Number,IronAHK.Rusty.Common,CRC32,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\CRC32.cs,HashFinal,The following statement contains a magic number: HashValue = new[]             {                 (byte)((value >> 24) & 0xff)'                  (byte)((value >> 16) & 0xff)'                  (byte)((value >> 8) & 0xff)'                  (byte)(value & 0xff)              };
Magic Number,IronAHK.Rusty.Common,CRC32,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\CRC32.cs,HashFinal,The following statement contains a magic number: HashValue = new[]             {                 (byte)((value >> 24) & 0xff)'                  (byte)((value >> 16) & 0xff)'                  (byte)((value >> 8) & 0xff)'                  (byte)(value & 0xff)              };
Magic Number,IronAHK.Rusty.Common,CRC32,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\CRC32.cs,HashFinal,The following statement contains a magic number: HashValue = new[]             {                 (byte)((value >> 24) & 0xff)'                  (byte)((value >> 16) & 0xff)'                  (byte)((value >> 8) & 0xff)'                  (byte)(value & 0xff)              };
Magic Number,IronAHK.Rusty.Linux,KeyboardHook,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Linux\KeyboardHook.cs,StringToWFKey,The following statement contains a magic number: Event.KeyEvent.state = 16;
Magic Number,IronAHK.Rusty.Linux,KeyboardHook,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Linux\KeyboardHook.cs,StringToWFKey,The following statement contains a magic number: Xlib.XLookupString(ref Event' Dummy' 10' IntPtr.Zero' IntPtr.Zero) != 0
Magic Number,IronAHK.Rusty.Linux,XConnectionSingleton,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Linux\XConnection.cs,Listen,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,IronAHK.Rusty.Windows,WindowManager,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Windows\WindowManager.cs,MinimizeAll,The following statement contains a magic number: WindowsAPI.PostMessage(window.Handle' (uint)WindowsAPI.WM_COMMAND' new IntPtr(419)' IntPtr.Zero);
Magic Number,IronAHK.Rusty.Windows,WindowManager,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Windows\WindowManager.cs,MinimizeAllUndo,The following statement contains a magic number: WindowsAPI.PostMessage(window.Handle' (uint)WindowsAPI.WM_COMMAND' new IntPtr(416)' IntPtr.Zero);
Magic Number,IronAHK.Rusty.Windows,KeyboardHook,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Windows\KeyboardHook.cs,Send,The following statement contains a magic number: var len = keys.Length * 2;
Magic Number,IronAHK.Rusty.Windows,KeyboardHook,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Windows\KeyboardHook.cs,Send,The following statement contains a magic number: int x = i * 2;
Magic Number,IronAHK.Rusty.Windows,KeyboardHook,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Windows\KeyboardHook.cs,Backspace,The following statement contains a magic number: length *= 2;
Magic Number,IronAHK.Rusty.Windows,KeyboardHook,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Windows\KeyboardHook.cs,ScanDeadKeys,The following statement contains a magic number: const int vkmax = 256;
Magic Number,IronAHK.Rusty.Windows,KeyboardHook,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Windows\KeyboardHook.cs,ScanDeadKeys,The following statement contains a magic number: var buf = new StringBuilder(4);
Magic Number,IronAHK.Rusty.Windows,KeyboardHook,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Windows\KeyboardHook.cs,MapKey,The following statement contains a magic number: var state = new byte[256];
Magic Number,IronAHK.Rusty.Windows,KeyboardHook,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Windows\KeyboardHook.cs,MapKey,The following statement contains a magic number: bool s = WindowsAPI.GetKeyState(key) >> 8 != 0;
Magic Number,IronAHK.Rusty.Windows,KeyboardHook,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Windows\KeyboardHook.cs,MapKey,The following statement contains a magic number: var buf = new StringBuilder(4);
Magic Number,IronAHK.Rusty.Windows,KeyboardHook,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Windows\KeyboardHook.cs,HookCallback,The following statement contains a magic number: int sc = Marshal.ReadInt32(lParam' 8);
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ParseFont,The following switch statement is missing a default case: switch (mode[0])                         {                             case 'c':                                 break;                              case 's':                                 if (int.TryParse(prop' out n))                                     size = n;                                 break;                              case 'w':                                 if (int.TryParse(prop' out n))                                 {                                     if (n <= 400)                                         display &= ~FontStyle.Bold;                                     else if (n >= 700)                                         display |= FontStyle.Bold;                                 }                                 break;                         }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ToFileAttribs,The following switch statement is missing a default case: switch (flag)                 {                     case '+':                     case '-':                     case '^':                         state = flag;                         continue;                      case 'r':                     case 'R':                         applied = FileAttributes.ReadOnly;                         break;                      case 'a':                     case 'A':                         applied = FileAttributes.Archive;                         break;                      case 's':                     case 'S':                         applied = FileAttributes.System;                         break;                      case 'h':                     case 'H':                         applied = FileAttributes.Hidden;                         break;                      case 'n':                     case 'N':                         applied = FileAttributes.Normal;                         break;                      case 'd':                     case 'D':                         applied = FileAttributes.Directory;                         break;                      case 'o':                     case 'O':                         applied = FileAttributes.Offline;                         break;                      case 'c':                     case 'C':                         applied = FileAttributes.Compressed;                         break;                      case 't':                     case 'T':                         applied = FileAttributes.Temporary;                         break;                 }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,ToRegexOptions,The following switch statement is missing a default case: switch (modifier)                 {                     case 'i':                     case 'I':                         options |= RegexOptions.IgnoreCase;                         break;                      case 'm':                     case 'M':                         options |= RegexOptions.Multiline;                         break;                      case 's':                     case 'S':                         options |= RegexOptions.Singleline;                         break;                      case 'x':                     case 'X':                         options |= RegexOptions.IgnorePatternWhitespace;                         break;                 }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,LV_RowOptions,The following switch statement is missing a default case: switch (opts[i].Trim().ToLowerInvariant())                 {                     case Keyword_Check: row.Checked = enable; break;                     case Keyword_Focus: row.Focused = enable; break;                     case Keyword_Icon: row.ImageIndex = int.Parse(mode.Substring(4)); break;                     case Keyword_Select: row.Selected = enable; break;                     case Keyword_Vis: row.EnsureVisible(); break;                 }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,TV_NodeOptions,The following switch statement is missing a default case: switch (mode)                 {                     // TODO: TV_Modify extended options                     case Keyword_Bold: node.NodeFont = new Font(node.TreeView.Font' on ? FontStyle.Bold : FontStyle.Regular); break;                     case Keyword_Check: node.Checked = on; break;                     case Keyword_Select: node.TreeView.SelectedNode = node; break;                     case Keyword_Vis: node.EnsureVisible(); break;                 }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FileGetSize,The following switch statement is missing a default case: switch (units[0])                     {                         case 'k':                         case 'K':                             size /= scale;                             break;                          case 'm':                         case 'M':                             size /= scale * scale;                             break;                          case 'g':                         case 'G':                             size /= scale * scale * scale;                             break;                     }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FileGetTime,The following switch statement is missing a default case: switch (time[0])             {                 case 'm':                 case 'M':                     date = info.LastWriteTime;                     break;                  case 'c':                 case 'C':                     date = info.CreationTime;                     break;                  case 'a':                 case 'A':                     date = info.LastAccessTime;                     break;             }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,FileRead,The following switch statement is missing a default case: switch (mode)                 {                     case 'c':                     case 'C':                         binary = true;                         break;                      case 't':                     case 'T':                         nocrlf = true;                         break;                      case 'm':                     case 'M':                         int s = n;                         while (n < Filename.Length && char.IsDigit(Filename' n))                             n++;                         if (s < n)                             max = int.Parse(Filename.Substring(s' n - s));                         break;                 }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,TrayTip,The following switch statement is missing a default case: switch (Options)             {                 case 1: icon = ToolTipIcon.Info; break;                 case 2: icon = ToolTipIcon.Warning; break;                 case 3: icon = ToolTipIcon.Error; break;             }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,MsgBox,The following switch statement is missing a default case: switch (Options & 0xf)             {                 case 0: buttons = MessageBoxButtons.OK; break;                 case 1: buttons = MessageBoxButtons.OKCancel; break;                 case 2: buttons = MessageBoxButtons.AbortRetryIgnore; break;                 case 3: buttons = MessageBoxButtons.YesNoCancel; break;                 case 4: buttons = MessageBoxButtons.YesNo; break;                 case 5: buttons = MessageBoxButtons.RetryCancel; break;                 //case 6: /* Cancel/Try Again/Continue */ ; break;                 //case 7: /* Adds a Help button */ ; break; // help done differently             }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,MsgBox,The following switch statement is missing a default case: switch (Options & 0xf0)             {                 case 16: icon = MessageBoxIcon.Hand; break;                 case 32: icon = MessageBoxIcon.Question; break;                 case 48: icon = MessageBoxIcon.Exclamation; break;                 case 64: icon = MessageBoxIcon.Asterisk; break;             }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,MsgBox,The following switch statement is missing a default case: switch (Options & 0xf00)             {                 case 256: defaultbutton = MessageBoxDefaultButton.Button2; break;                 case 512: defaultbutton = MessageBoxDefaultButton.Button3; break;             }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,MsgBox,The following switch statement is missing a default case: switch (Options & 0xf0000)             {                 case 131072: options = MessageBoxOptions.DefaultDesktopOnly; break;                 case 262144: options = MessageBoxOptions.ServiceNotification; break;                 case 524288: options = MessageBoxOptions.RightAlign; break;                 case 1048576: options = MessageBoxOptions.RtlReading; break;             }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,DllCall,The following switch statement is missing a default case: switch (name[name.Length - 1])                 {                     case '*':                     case 'P':                     case 'p':                         name = name.Substring(0' name.Length - 1).Trim();                         ErrorLevel = -6;                         // TODO: unmanaged pointers for pinvokes                         return null;                 }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,SetTimer,The following switch statement is missing a default case: switch (mode.ToLowerInvariant())             {                 case Keyword_On:                     if (timers.ContainsKey(label))                     {                         timers[label].Start();                         return;                     }                     else                         mode = "250";                     break;                  case Keyword_Off:                     if (timers.ContainsKey(label))                         timers[label].Stop();                     else                         ErrorLevel = 1;                     return;             }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,NormaliseEol,The following switch statement is missing a default case: switch (eol)             {                 case CR:                     return text.Replace(CRLF' CR).Replace(LF' CR);                  case LF:                     return text.Replace(CRLF' LF).Replace(CR' LF);                  case CRLF:                     return text.Replace(CR' string.Empty).Replace(LF' CRLF);             }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Gui,The following switch statement is missing a default case: switch (mode[0])                             {                                 case 'w': select = 0; break;                                 case 'h': select = 1; break;                                 case 'x': select = 2; break;                                 case 'y': select = 3; break;                             }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Gui,The following switch statement is missing a default case: switch (mode)                                 {                                     case Keyword_Center: center = true; break;                                     case Keyword_AutoSize: auto = true; break;                                     case Keyword_Maximize: max = true; break;                                     case Keyword_Minimize: min = true; break;                                     case Keyword_Restore: restore = true; break;                                     case Keyword_NoActivate: break;                                     case Keyword_NA: break;                                     case Keyword_Hide: hide = true; break;                                 }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlEdit,The following switch statement is missing a default case: switch (mode)                             {                                 case Keyword_Limit: break;                                 case Keyword_Simple: break;                             }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlEdit,The following switch statement is missing a default case: switch (mode)                             {                                 case Keyword_Checked: lv.CheckBoxes = on; break;                                 case Keyword_Grid: lv.GridLines = on; break;                                 case Keyword_Hdr: break;                                 case "lv0x10": break;                                 case "lv0x20": break;                                 case Keyword_Multi: lv.MultiSelect = on; break;                                 case Keyword_NoSortHdr: break;                                 case Keyword_Readonly: break;                                 case Keyword_Sort: lv.Sorting = on ? SortOrder.Ascending : SortOrder.None; break;                                 case Keyword_SortDesc: lv.Sorting = on ? SortOrder.Descending : SortOrder.None; break;                                 case Keyword_WantF2: break;                             }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlEdit,The following switch statement is missing a default case: switch (mode)                             {                                 case Keyword_Limit:                                     if (!on)                                         hotkey.Limit = HotkeyBox.Limits.None;                                     else                                     {                                         int n;                                          if (int.TryParse(mode' out n))                                             hotkey.Limit = (HotkeyBox.Limits)n;                                     }                                     break;                             }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlEdit,The following switch statement is missing a default case: switch (mode) // UNDONE: slider tooltip alignment                                         {                                             case Keyword_Left: break;                                             case Keyword_Right: break;                                             case Keyword_Top: break;                                             case Keyword_Bottom: break;                                         }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlGet,The following switch statement is missing a default case: switch (command)             {                 case Keyword_Focus:                 case Keyword_Focus + "v":                     var focued = GuiControlGetFocused(gui);                      if (Environment.OSVersion.Platform == PlatformID.Win32NT && command == Keyword_Focus)                         result = WindowsAPI.GetClassName(focued.Handle);                     else                         result = focued.Name;                      return;             }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GuiControlGet,The following switch statement is missing a default case: switch (command)             {                 case Keyword_Text:                     result = ctrl.Text;                     break;                 case "":                     {                         if(ctrl is ProgressBar) {                             result = ((ProgressBar)ctrl).Value.ToString();                         } else if(ctrl is ComboBox) {                             result = ((ComboBox)ctrl).SelectedText;                         } else if(ctrl is TrackBar) {                             result = ((TrackBar)ctrl).Value.ToString();                         } else if(ctrl is ListBox) {                             result = ((ListBox)ctrl).SelectedItems.ToString();                         } else if(ctrl is DateTimePicker) {                             result = ((DateTimePicker)ctrl).Value.ToString();                         } else if(ctrl is MonthCalendar) {                             //TODO: MonthCalender Get!                         } else if(ctrl is WebBrowser) {                             result = ((WebBrowser)ctrl).Url.ToString();                         } else if(ctrl is PictureBox) {                             result = ((PictureBox)ctrl).ImageLocation;                         } else if(ctrl is NumericUpDown) {                             result = ((NumericUpDown)ctrl).Value.ToString();                         } else {                             result = ctrl.Text;                         }                         break;                     }                  case Keyword_Pos:                     {                         var loc = new Dictionary<string' object>();                         loc.Add("x"' ctrl.Location.X);                         loc.Add("y"' ctrl.Location.Y);                         loc.Add("w"' ctrl.Size.Width);                         loc.Add("h"' ctrl.Size.Height);                         result = loc;                     }                     break;                  case Keyword_Enabled:                     result = ctrl.Enabled ? 1 : 0;                     break;                  case Keyword_Visible:                     result = ctrl.Visible ? 1 : 0;                     break;                  case Keyword_Hwnd:                     result = ctrl.Handle.ToInt64().ToString();                     break;             }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,LV_SetImageList,The following switch statement is missing a default case: switch (type)             {                 case 0: list.LargeImageList = img; break;                 case 1: list.SmallImageList = img; break;                 case 2: list.StateImageList = img; break;             }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,SB_SetText,The following switch statement is missing a default case: switch (Style)             {                 case 0:                     border = StatusBarPanelBorderStyle.Sunken;                     break;                  case 1:                     border = StatusBarPanelBorderStyle.None;                     break;                  case 2:                     border = StatusBarPanelBorderStyle.Raised;                     break;             }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Hotkey,The following switch statement is missing a default case: switch (KeyName.ToLowerInvariant())             {                 case Keyword_IfWinActive: win = 0; break;                 case Keyword_IfWinExist: win = 1; break;                 case Keyword_IfWinNotActive: win = 2; break;                 case Keyword_IfWinNotExit: win = 3; break;             }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Hotkey,The following switch statement is missing a default case: switch (Label.ToLowerInvariant())                 {                     case Keyword_On: hotkeys[id].Enabled = true; break;                     case Keyword_Off: hotkeys[id].Enabled = true; break;                     case Keyword_Toggle: hotkeys[id].Enabled = !hotkeys[id].Enabled; break;                 }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,EnvAdd,The following switch statement is missing a default case: switch (units.ToLowerInvariant())             {                 case Keyword_Seconds:                 case "s":                     time = time.AddSeconds(value);                     break;                  case Keyword_Minutes:                 case "m":                     time = time.AddMinutes(value);                     break;                  case Keyword_Hours:                 case "h":                     time = time.AddHours(value);                     break;                  case Keyword_Days:                 case "d":                     time = time.AddDays(value);                     break;                  case Keyword_Months:                 case "mn":                     time = time.AddMonths((int)value);                     break;                  case Keyword_Years:                 case "y":                     time = time.AddYears((int)value);                     break;             }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,CoordMode,The following switch statement is missing a default case: switch (item.ToLowerInvariant())             {                 case Keyword_ToolTip: coords.Tooltip = target; break;                 case Keyword_Pixel: coords.Pixel = target; break;                 case Keyword_Mouse: coords.Mouse = target; break;                 case Keyword_Caret: coords.Caret = target; break;                 case Keyword_Menu: coords.Menu = target; break;             }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Process,The following switch statement is missing a default case: switch (command)             {                 case Keyword_Exist:                     break;                  case Keyword_Close:                     try { prc.Kill(); }                     catch (System.ComponentModel.Win32Exception) { }                     break;                  case Keyword_Priority:                     arg = string.IsNullOrEmpty(arg) ? string.Empty : arg.ToLowerInvariant();                      if (arg.Length == 1)                     {                         foreach (var mode in new[] { Keyword_Low' Keyword_BelowNormal' Keyword_Normal' Keyword_AboveNormal' Keyword_High' Keyword_Realtime })                             if (mode[0] == arg[0])                                 arg = mode;                     }                      switch (arg.ToLowerInvariant())                     {                         case Keyword_Low: prc.PriorityClass = ProcessPriorityClass.Idle; break;                         case Keyword_BelowNormal: prc.PriorityClass = ProcessPriorityClass.BelowNormal; break;                         case Keyword_Normal: prc.PriorityClass = ProcessPriorityClass.Normal; break;                         case Keyword_AboveNormal: prc.PriorityClass = ProcessPriorityClass.AboveNormal; break;                         case Keyword_High: prc.PriorityClass = ProcessPriorityClass.High; break;                         case Keyword_Realtime: prc.PriorityClass = ProcessPriorityClass.RealTime; break;                     }                     break;                  case Keyword_Wait:                     {                         int t = -1;                         double d;                          if (!string.IsNullOrEmpty(arg) && double.TryParse(arg' out d))                             t = (int)(d * scale);                          var start = Environment.TickCount;                          while (0 == (ErrorLevel = FindProcess(name).Id))                         {                             System.Threading.Thread.Sleep(LoopFrequency);                              if (t != -1 && Environment.TickCount - start > t)                                 break;                         }                     }                     break;                  case Keyword_WaitClose:                     if (string.IsNullOrEmpty(arg))                         prc.WaitForExit();                     else                     {                         double d;                          if (double.TryParse(arg' out d))                             prc.WaitForExit((int)(d * scale));                         else                             prc.WaitForExit();                     }                     break;             }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Process,The following switch statement is missing a default case: switch (arg.ToLowerInvariant())                     {                         case Keyword_Low: prc.PriorityClass = ProcessPriorityClass.Idle; break;                         case Keyword_BelowNormal: prc.PriorityClass = ProcessPriorityClass.BelowNormal; break;                         case Keyword_Normal: prc.PriorityClass = ProcessPriorityClass.Normal; break;                         case Keyword_AboveNormal: prc.PriorityClass = ProcessPriorityClass.AboveNormal; break;                         case Keyword_High: prc.PriorityClass = ProcessPriorityClass.High; break;                         case Keyword_Realtime: prc.PriorityClass = ProcessPriorityClass.RealTime; break;                     }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Run,The following switch statement is missing a default case: switch (showMode.ToLowerInvariant())             {                 case Keyword_Max: prc.StartInfo.WindowStyle = ProcessWindowStyle.Maximized; break;                 case Keyword_Min: prc.StartInfo.WindowStyle = ProcessWindowStyle.Minimized; break;                 case Keyword_Hide: prc.StartInfo.WindowStyle = ProcessWindowStyle.Hidden; break;                 case Keyword_UseErrorLevel: error = true; break;             }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,Transform,The following switch statement is missing a default case: switch (Cmd.Trim().ToLowerInvariant())             {                 case Keyword_Unicode:                     if (Value1 == null)                         OutputVar = Clipboard.GetText();                     else OutputVar = Value1;                     break;                 case Keyword_Asc:                     OutputVar = char.GetNumericValue(Value1' 0).ToString();                     break;                 case Keyword_Chr:                     OutputVar = char.ConvertFromUtf32(int.Parse(Value1));                     break;                 case Keyword_Deref:                     // TODO: dereference transform                     break;                 case "html":                     OutputVar = Value1                         .Replace("\""' "&quot;")                         .Replace("&"' "&amp;")                         .Replace("<"' "&lt;")                         .Replace(">"' "&gt;")                         .Replace("\n"' "<br/>\n");                     break;                 case Keyword_Mod:                     OutputVar = (double.Parse(Value1) % double.Parse(Value2)).ToString();                     break;                 case Keyword_Pow:                     OutputVar = Math.Pow(double.Parse(Value1)' double.Parse(Value2)).ToString();                     break;                 case Keyword_Exp:                     OutputVar = Math.Pow(double.Parse(Value1)' Math.E).ToString();                     break;                 case Keyword_Sqrt:                     OutputVar = Math.Sqrt(double.Parse(Value1)).ToString();                     break;                 case Keyword_Log:                     OutputVar = Math.Log10(double.Parse(Value1)).ToString();                     break;                 case Keyword_Ln:                     OutputVar = Math.Log(double.Parse(Value1)' Math.E).ToString();                     break;                 case Keyword_Round:                     int p = int.Parse(Value2);                     OutputVar = Math.Round(double.Parse(Value1)' p == 0 ? 1 : p).ToString();                     break;                 case Keyword_Ceil:                     OutputVar = Math.Ceiling(double.Parse(Value1)).ToString();                     break;                 case Keyword_Floor:                     OutputVar = Math.Floor(double.Parse(Value1)).ToString();                     break;                 case Keyword_Abs:                     double d = double.Parse(Value1);                     OutputVar = (d < 0 ? d * -1 : d).ToString();                     break;                 case Keyword_Sin:                     OutputVar = Math.Sin(double.Parse(Value1)).ToString();                     break;                 case Keyword_Cos:                     OutputVar = Math.Cos(double.Parse(Value1)).ToString();                     break;                 case Keyword_Tan:                     OutputVar = Math.Tan(double.Parse(Value1)).ToString();                     break;                 case Keyword_Asin:                     OutputVar = Math.Asin(double.Parse(Value1)).ToString();                     break;                 case Keyword_Acos:                     OutputVar = Math.Acos(double.Parse(Value1)).ToString();                     break;                 case Keyword_Atan:                     OutputVar = Math.Atan(double.Parse(Value1)).ToString();                     break;                 case Keyword_BitNot:                     OutputVar = (~int.Parse(Value1)).ToString();                     break;                 case Keyword_BitAnd:                     OutputVar = (int.Parse(Value1) & int.Parse(Value2)).ToString();                     break;                 case Keyword_BitOr:                     OutputVar = (int.Parse(Value1) | int.Parse(Value2)).ToString();                     break;                 case Keyword_BitXor:                     OutputVar = (int.Parse(Value1) ^ int.Parse(Value2)).ToString();                     break;                 case Keyword_BitShiftLeft:                     OutputVar = (int.Parse(Value1) << int.Parse(Value2)).ToString();                     break;                 case Keyword_BitShiftRight:                     OutputVar = (int.Parse(Value1) >> int.Parse(Value2)).ToString();                     break;             }
Missing Default,IronAHK.Rusty,Core,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Core\Helpers\Conversions.cs,GroupClose,The following switch statement is missing a default case: switch (mode.ToLowerInvariant())             {                 case Keyword_A:                     while (windowGroups[name].Count != 0)                         windowGroups[name].Pop().Close();                     windowGroups.Remove(name);                     break;                  case Keyword_R:                     windowGroups[name].Pop().Close();                     windowGroups[name].Peek().Active = true;                     break;                  case "":                     windowGroups[name].Pop().Close();                     if (windowGroups[name].Count != 0)                         windowGroups[name].ToArray()[windowGroups[name].Count - 1].Active = true;                     break;             }
Missing Default,IronAHK.Rusty.Common,HotstringDefinition,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\HotstringDefinition.cs,ParseOptions,The following switch statement is missing a default case: switch (sym)                     {                         case Core.Keyword_HotstringAuto: change = Options.AutoTrigger; break;                         case Core.Keyword_HotstringNested: change = Options.Nested; break;                         case Core.Keyword_HotstringBackspace: change = Options.Backspace; break;                         case Core.Keyword_HotstringCase: change = Options.CaseSensitive; break;                         case Core.Keyword_HotstringOmitEnding: change = Options.OmitEnding; break;                         case Core.Keyword_HotstringReset: change = Options.Reset; break;                     }
Missing Default,IronAHK.Rusty.Common,KeyboardHook,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\KeyboardHook.cs,Letter,The following switch statement is missing a default case: switch (key)                 {                     case Keys.Space: return ' ';                     case Keys.Enter: return '\n';                 }
Missing Default,IronAHK.Rusty.Common,KeyboardHook,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\KeyboardHook.cs,KeyMatch,The following switch statement is missing a default case: switch (expected)                 {                     case Keys.ControlKey:                         return received == Keys.LControlKey || received == Keys.RControlKey;                      case Keys.ShiftKey:                         return received == Keys.LShiftKey || received == Keys.RShiftKey;                 }
Missing Default,IronAHK.Rusty.Common,KeyParser,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\KeyParser.cs,ParseKeyStream,The following switch statement is missing a default case: switch (buf[1].ToString().ToLowerInvariant())                                 {                                     case Core.Keyword_Raw:                                         buf[0].Append(sequence' i' sequence.Length - i);                                         i = sequence.Length;                                         break;                                 }
Missing Default,IronAHK.Rusty.Common,KeyParser,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\KeyParser.cs,ParseKey,The following switch statement is missing a default case: switch (name.ToLowerInvariant())                     {                         case "esc": value = Keys.Escape; break;                         case "backspace": value = Keys.Back; break;                         case "bs": value = Keys.Back; break;                         case "del": value = Keys.Delete; break;                         case "ins": value = Keys.Insert; break;                         case "pgup": value = Keys.PageUp; break;                         case "pgdn": value = Keys.PageDown; break;                         case "scrolllock": value = Keys.Scroll; break;                         case "appskey": value = Keys.Apps; break;                         case "ctrl": value = Keys.Control; break;                         case "lcontrol": value = Keys.LControlKey; break;                         case "lctrl": value = Keys.LControlKey; break;                         case "rcontrol": value = Keys.RControlKey; break;                         case "rctrl": value = Keys.RControlKey; break;                         case "lshift": value = Keys.LShiftKey; break;                         case "rshift": value = Keys.RShiftKey; break;                         case "lalt": value = Keys.LMenu; break;                         case "ralt": value = Keys.RMenu; break;                         case "break": value = Keys.Pause; break;                         case "numpad1": value = Keys.Oem1; break;                         case "numpad2": value = Keys.Oem2; break;                         case "numpad3": value = Keys.Oem3; break;                         case "numpad4": value = Keys.Oem4; break;                         case "numpad5": value = Keys.Oem5; break;                         case "numpad6": value = Keys.Oem6; break;                         case "numpad7": value = Keys.Oem7; break;                         case "numpad8": value = Keys.Oem8; break;                         case ";": value = Keys.OemSemicolon; break;                         case "=": value = Keys.Oemplus; break;                         case "'": value = Keys.Oemcomma; break;                         case "-": value = Keys.OemMinus; break;                         case ".": value = Keys.OemPeriod; break;                         case "/": value = Keys.OemQuestion; break;                         case "'": value = Keys.Oemtilde; break;                         case "[": value = Keys.OemOpenBrackets; break;                         case "\\": value = Keys.OemPipe; break;                         case "]": value = Keys.OemCloseBrackets; break;                         case "#": value = Keys.Oem7; break;                         case "`": value = Keys.Oem8; break;                     }
Missing Default,IronAHK.Rusty.Common,KeyParser,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Keyboard\KeyParser.cs,ParseKey,The following switch statement is missing a default case: switch (value)                 {                     case Keys.Control: value = Keys.ControlKey; break;                     case Keys.Shift: value = Keys.ShiftKey; break;                     case Keys.Alt: value = Keys.LMenu; break;                 }
Missing Default,IronAHK.Rusty.Common,SearchCriteria,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Window\SearchCriteria.cs,FromString,The following switch statement is missing a default case: switch (word.ToLowerInvariant())                     {                         case Core.Keyword_ahk_class: criteria.ClassName = arg; break;                         case Core.Keyword_ahk_group: criteria.Group = arg; break;                          case Core.Keyword_ahk_id:                             if (long.TryParse(arg' out n))                                 criteria.ID = new IntPtr(n);                             break;                          case Core.Keyword_ahk_pid:                             if (long.TryParse(arg' out n))                                 criteria.PID = new IntPtr(n);                             break;                     }
Missing Default,IronAHK.Rusty.Common,WindowItemBase,C:\research\architectureSmells\repos\polyethene_IronAHK\Rusty\Common\Window\WindowItemBase.cs,TitleCompare,The following switch statement is missing a default case: switch (Core.A_TitleMatchMode.ToLowerInvariant())                 {                     case "1":                         return a.StartsWith(b' comp);                      case "2":                         return a.IndexOf(b' comp) != -1;                      case "3":                         return a.Equals(b' comp);                      case Core.Keyword_RegEx:                         return new Regex(b).IsMatch(a);                 }
