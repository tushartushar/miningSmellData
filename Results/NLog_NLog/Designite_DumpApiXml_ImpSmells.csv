Implementation smell,Namespace,Class,File,Method,Description
Long Method,DumpApiXml,DocFileBuilder,C:\repos\NLog_NLog\tools\DumpApiXml\DocFileBuilder.cs,DumpTypeMembers,The method has 148 lines of code.
Complex Method,DumpApiXml,DocFileBuilder,C:\repos\NLog_NLog\tools\DumpApiXml\DocFileBuilder.cs,DumpApiDocs,Cyclomatic complexity of the method is 9
Complex Method,DumpApiXml,DocFileBuilder,C:\repos\NLog_NLog\tools\DumpApiXml\DocFileBuilder.cs,DumpTypeMembers,Cyclomatic complexity of the method is 16
Complex Method,DumpApiXml,DocFileBuilder,C:\repos\NLog_NLog\tools\DumpApiXml\DocFileBuilder.cs,IncludeProperty,Cyclomatic complexity of the method is 8
Long Parameter List,DumpApiXml,DocFileBuilder,C:\repos\NLog_NLog\tools\DumpApiXml\DocFileBuilder.cs,DumpApiDocs,The method has 5 parameters. Parameters: writer' kind' attributeTypeName' titlePrefix' titleSuffix
Long Statement,DumpApiXml,DocFileBuilder,C:\repos\NLog_NLog\tools\DumpApiXml\DocFileBuilder.cs,IncludeProperty,The length of the statement  "                if ((pi.PropertyType.FullName.StartsWith("NLog.ILayout") || pi.PropertyType.FullName.StartsWith("NLog.Layout")) && pi.Name != "Layout" && pi.Name.EndsWith("Layout")) " is 165.
Long Statement,DumpApiXml,DocFileBuilder,C:\repos\NLog_NLog\tools\DumpApiXml\DocFileBuilder.cs,IncludeProperty,The length of the statement  "                if (pi.PropertyType.FullName.StartsWith("NLog.Conditions.ConditionExpression") && pi.Name != "Condition" && pi.Name.EndsWith("Condition")) " is 138.
Complex Conditional,DumpApiXml,DocFileBuilder,C:\repos\NLog_NLog\tools\DumpApiXml\DocFileBuilder.cs,IncludeProperty,The conditional expression  "pi.CanRead && pi.CanWrite && pi.GetSetMethod() != null && pi.GetSetMethod().IsPublic"  is complex.
Complex Conditional,DumpApiXml,DocFileBuilder,C:\repos\NLog_NLog\tools\DumpApiXml\DocFileBuilder.cs,IncludeProperty,The conditional expression  "(pi.PropertyType.FullName.StartsWith("NLog.ILayout") || pi.PropertyType.FullName.StartsWith("NLog.Layout")) && pi.Name != "Layout" && pi.Name.EndsWith("Layout")"  is complex.
Empty Catch Block,DumpApiXml,DocFileBuilder,C:\repos\NLog_NLog\tools\DumpApiXml\DocFileBuilder.cs,HasAttribute,The method has an empty catch block.
Empty Catch Block,DumpApiXml,DocFileBuilder,C:\repos\NLog_NLog\tools\DumpApiXml\DocFileBuilder.cs,HasAttribute,The method has an empty catch block.
Magic Number,DumpApiXml,DocFileBuilder,C:\repos\NLog_NLog\tools\DumpApiXml\DocFileBuilder.cs,DumpTypeMembers,The following statement contains a magic number: categories["General Options"] = 10;
Magic Number,DumpApiXml,DocFileBuilder,C:\repos\NLog_NLog\tools\DumpApiXml\DocFileBuilder.cs,DumpTypeMembers,The following statement contains a magic number: categories["Layout Options"] = 20;
Magic Number,DumpApiXml,DocFileBuilder,C:\repos\NLog_NLog\tools\DumpApiXml\DocFileBuilder.cs,DumpTypeMembers,The following statement contains a magic number: foreach (PropertyInfo propInfo in                  this.GetProperties(type))              {                  string category = null;                  int order = 100;                    if (this.TryGetMemberDoc(                      "P:" + propInfo.DeclaringType.FullName + "." + propInfo.Name' out memberDoc))                  {                      propertyDoc.Add(propInfo' memberDoc);                        var docgen = (XmlElement)memberDoc.SelectSingleNode("docgen");                      if (docgen != null)                      {                          category = docgen.GetAttribute("category");                          order = Convert.ToInt32(docgen.GetAttribute("order"));                      }                  }                    if (string.IsNullOrEmpty(category))                  {                      Console.WriteLine("WARNING: Property {0}.{1} does not have <docgen /> element defined."'                          propInfo.DeclaringType.Name' propInfo.Name);                        category = "Other";                  }                    int categoryOrder;                    if (!categories.TryGetValue(category' out categoryOrder))                  {                      categories.Add(category' 100 + categories.Count);                  }                    //Console.WriteLine("p: {0} cat: {1} order: {2}"' propInfo.Name' category' order);                  property2Category[propInfo] = category;                  propertyOrderWithinCategory[propInfo] = order;              }
Magic Number,DumpApiXml,DocFileBuilder,C:\repos\NLog_NLog\tools\DumpApiXml\DocFileBuilder.cs,DumpTypeMembers,The following statement contains a magic number: foreach (PropertyInfo propInfo in                  this.GetProperties(type))              {                  string category = null;                  int order = 100;                    if (this.TryGetMemberDoc(                      "P:" + propInfo.DeclaringType.FullName + "." + propInfo.Name' out memberDoc))                  {                      propertyDoc.Add(propInfo' memberDoc);                        var docgen = (XmlElement)memberDoc.SelectSingleNode("docgen");                      if (docgen != null)                      {                          category = docgen.GetAttribute("category");                          order = Convert.ToInt32(docgen.GetAttribute("order"));                      }                  }                    if (string.IsNullOrEmpty(category))                  {                      Console.WriteLine("WARNING: Property {0}.{1} does not have <docgen /> element defined."'                          propInfo.DeclaringType.Name' propInfo.Name);                        category = "Other";                  }                    int categoryOrder;                    if (!categories.TryGetValue(category' out categoryOrder))                  {                      categories.Add(category' 100 + categories.Count);                  }                    //Console.WriteLine("p: {0} cat: {1} order: {2}"' propInfo.Name' category' order);                  property2Category[propInfo] = category;                  propertyOrderWithinCategory[propInfo] = order;              }
Magic Number,DumpApiXml,DocFileBuilder,C:\repos\NLog_NLog\tools\DumpApiXml\DocFileBuilder.cs,GetCategoryOrder,The following statement contains a magic number: if (this.TryGetMemberDoc("P:" + propInfo.DeclaringType.FullName + "." + propInfo.Name' out memberDoc))              {                  string category = null;                  var docgen = (XmlElement)memberDoc.SelectSingleNode("docgen");                  if (docgen != null)                  {                      category = docgen.GetAttribute("category");                  }                    if (string.IsNullOrEmpty(category))                  {                      category = "General";                  }                    int categoryOrder;                  if (!orders.TryGetValue(category' out categoryOrder))                  {                      categoryOrder = 100 + orders.Count;                      orders.Add(category' categoryOrder);                  }                    return categoryOrder;              }
Magic Number,DumpApiXml,DocFileBuilder,C:\repos\NLog_NLog\tools\DumpApiXml\DocFileBuilder.cs,GetCategoryOrder,The following statement contains a magic number: return 50;
Magic Number,DumpApiXml,DocFileBuilder,C:\repos\NLog_NLog\tools\DumpApiXml\DocFileBuilder.cs,GetOrder,The following statement contains a magic number: return 100;
Magic Number,DumpApiXml,DocFileBuilder,C:\repos\NLog_NLog\tools\DumpApiXml\DocFileBuilder.cs,MakeCamelCase,The following statement contains a magic number: if (s.Length <= 2)              {                  return s.ToLowerInvariant();              }
Magic Number,DumpApiXml,DocFileBuilder,C:\repos\NLog_NLog\tools\DumpApiXml\DocFileBuilder.cs,MakeCamelCase,The following statement contains a magic number: if (s.StartsWith("DB"))              {                  return "db" + s.Substring(2);              }
Missing Default,DumpApiXml,DocFileBuilder,C:\repos\NLog_NLog\tools\DumpApiXml\DocFileBuilder.cs,GetSlug,The following switch statement is missing a default case: switch (kind)              {                  case "target":                      return name + "_target";                    case "layout-renderer":                      return name + "_layout_renderer";                    case "layout":                      return name;                    case "filter":                      return name + "_filter";                    case "time-source":                      return name + "_time_source";              }
