Implementation smell,Namespace,Class,File,Method,Description
Long Method,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TraceTest,The method has 122 lines of code.
Long Method,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,DebugTest,The method has 122 lines of code.
Long Method,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,InfoTest,The method has 122 lines of code.
Long Method,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,WarnTest,The method has 122 lines of code.
Long Method,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ErrorTest,The method has 122 lines of code.
Long Method,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,FatalTest,The method has 122 lines of code.
Long Method,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,LogTest,The method has 104 lines of code.
Long Method,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The method has 122 lines of code.
Long Method,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The method has 122 lines of code.
Long Method,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,StructuredEventsTest1,The method has 147 lines of code.
Long Method,NLog.UnitTests.Common,InternalLoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Common\InternalLoggerTests.cs,ExceptionTests,The method has 114 lines of code.
Long Method,NLog.UnitTests.LayoutRenderers,Log4JXmlTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Log4JXmlTests.cs,Log4JXmlTest,The method has 152 lines of code.
Long Method,NLog.UnitTests.Targets,ConcurrentFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConcurrentFileTargetTests.cs,DoConcurrentTest,The method has 111 lines of code.
Long Method,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DateArchive_UsesDateFromCurrentTimeSource,The method has 101 lines of code.
Long Method,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DateArchive_AllLoggersTransferToCurrentLogFile,The method has 104 lines of code.
Long Method,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,HandleArchiveFilesMultipleContextMultipleTargetsTest,The method has 119 lines of code.
Complex Method,NLog.UnitTests,ApiTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\ApiTests.cs,PublicEnumsTest,Cyclomatic complexity of the method is 13
Complex Method,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TraceTest,Cyclomatic complexity of the method is 50
Complex Method,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,DebugTest,Cyclomatic complexity of the method is 50
Complex Method,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,InfoTest,Cyclomatic complexity of the method is 50
Complex Method,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,WarnTest,Cyclomatic complexity of the method is 50
Complex Method,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ErrorTest,Cyclomatic complexity of the method is 50
Complex Method,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,FatalTest,Cyclomatic complexity of the method is 50
Complex Method,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,LogTest,Cyclomatic complexity of the method is 41
Complex Method,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,Cyclomatic complexity of the method is 48
Complex Method,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,Cyclomatic complexity of the method is 48
Complex Method,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,StructuredEventsTest1,Cyclomatic complexity of the method is 14
Complex Method,NLog.UnitTests,NLogTestBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\NLogTestBase.cs,AssertFileContents,Cyclomatic complexity of the method is 8
Complex Method,NLog.UnitTests.Internal,MruCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\MruCacheTests.cs,OverflowFreshCacheAndLookupTest,Cyclomatic complexity of the method is 8
Complex Method,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,OverrideMessagePropertiesDictionary,Cyclomatic complexity of the method is 9
Complex Method,NLog.UnitTests.LayoutRenderers,Log4JXmlTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Log4JXmlTests.cs,Log4JXmlTest,Cyclomatic complexity of the method is 24
Complex Method,NLog.UnitTests.LayoutRenderers,Log4JXmlTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Log4JXmlTests.cs,BadXmlValueTest,Cyclomatic complexity of the method is 8
Complex Method,NLog.UnitTests.Targets,ConcurrentFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConcurrentFileTargetTests.cs,DoConcurrentTest,Cyclomatic complexity of the method is 13
Long Parameter List,NLog.UnitTests,ConfigFileLocatorTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\ConfigFileLocatorTests.cs,AssertResult,The method has 5 parameters. Parameters: tmpDir' appDir' processDir' appName' result
Long Parameter List,NLog.UnitTests.Config,InternalLoggingTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\InternalLoggingTests.cs,InternalLoggingConfigTest,The method has 9 parameters. Parameters: logLevel' logToConsole' logToConsoleError' globalThreshold' throwExceptions' throwConfigExceptions' file' logToTrace' autoShutdown
Long Parameter List,NLog.UnitTests.Internal,SimpleStringReaderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\Strings\SimpleStringReaderTests.cs,DebugView_CurrentState,The method has 5 parameters. Parameters: input' position' expectedDone' expectedCurrent' expectedTodo
Long Parameter List,NLog.UnitTests.Internal,StringHelpersTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\Strings\StringHelpersTests.cs,ReplaceTest,The method has 5 parameters. Parameters: input' search' replace' comparer' result
Long Parameter List,NLog.UnitTests.Internal,StringSplitterTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\Strings\StringSplitterTests.cs,SplitStringWithQuotes,The method has 5 parameters. Parameters: input' splitChar' quoteChar' escapeChar' output
Long Parameter List,NLog.UnitTests.LayoutRenderers,GenericClass<TA;TB;TC>,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\ExceptionTests.cs,Method1,The method has 6 parameters. Parameters: aaa' b' o' i' now' exceptionMessage
Long Parameter List,NLog.UnitTests.LayoutRenderers,GenericClass<TA;TB;TC>,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\ExceptionTests.cs,Method2,The method has 8 parameters. Parameters: aaa' b' o' i' now' gfff' something' exceptionMessage
Long Parameter List,NLog.UnitTests.LayoutRenderers,ProcessTimeLayoutRendererTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Processes\ProcessTimeLayoutRendererTests.cs,RenderTimeSpanTest,The method has 6 parameters. Parameters: day' hour' min' sec' milisec' expected
Long Parameter List,NLog.UnitTests.MessageTemplates,MessageTemplateParametersTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\MessageTemplateParametersTests.cs,IndexerTest,The method has 6 parameters. Parameters: input' index' expectedValue' expectedName' expectedPositionalIndex' expectedCaptureType
Long Parameter List,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,GetParameterValueFromStringTest,The method has 5 parameters. Parameters: value' dbType' expected' format' cultureInfo
Long Parameter List,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,DatabaseConnectionStringTest,The method has 5 parameters. Parameters: host' database' username' password' expected
Long Parameter List,NLog.UnitTests.Targets,EventLogTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\EventLogTargetTests.cs,WriteWithMock,The method has 6 parameters. Parameters: logLevel' expectedEventLogEntryType' logMessage' entryType' overflowAction' maxMessageLength
Long Parameter List,NLog.UnitTests.Targets,EventRecordMock,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\EventLogTargetTests.cs,EventRecordMock,The method has 6 parameters. Parameters: id' logName' providerName' type' message' category
Long Parameter List,NLog.UnitTests.Targets,EventLogTargetMock,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\EventLogTargetTests.cs,WriteEntry,The method has 5 parameters. Parameters: logEventInfo' message' entryType' eventId' category
Long Parameter List,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,SimpleFileTest,The method has 6 parameters. Parameters: concurrentWrites' keepFileOpen' networkWrites' forceManaged' forceMutexConcurrentWrites' optimizeBufferReuse
Long Parameter List,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,SimpleFileDeleteTest,The method has 6 parameters. Parameters: concurrentWrites' keepFileOpen' networkWrites' forceManaged' forceMutexConcurrentWrites' optimizeBufferReuse
Long Parameter List,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,NonExistingDriveShouldNotDelayMuch,The method has 6 parameters. Parameters: concurrentWrites' keepFileOpen' networkWrites' forceManaged' forceMutexConcurrentWrites' optimizeBufferReuse
Long Parameter List,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DateArchive_UsesDateFromCurrentTimeSource,The method has 8 parameters. Parameters: timeKind' includeDateInLogFilePath' concurrentWrites' keepFileOpen' networkWrites' includeSequenceInArchive' forceManaged' forceMutexConcurrentWrites
Long Parameter List,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DateArchive_ArchiveOnceOnly,The method has 7 parameters. Parameters: concurrentWrites' keepFileOpen' networkWrites' dateInLogFilePath' includeSequenceInArchive' forceManaged' forceMutexConcurrentWrites
Long Parameter List,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DateArchive_AllLoggersTransferToCurrentLogFile,The method has 8 parameters. Parameters: concurrentWrites' keepFileOpen' networkWrites' includeDateInLogFilePath' includeSequenceInArchive' enableArchiveCompression' forceManaged' forceMutexConcurrentWrites
Long Parameter List,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,TestMaxArchiveFilesWithDate,The method has 6 parameters. Parameters: archivePath' logdir' maxArchiveFilesConfig' expectedArchiveFiles' dateFormat' changeCreationAndWriteTime
Long Parameter List,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,HandleArchiveFilesMultipleContextMultipleTargetsTest,The method has 6 parameters. Parameters: archivePath' logdir' maxArchiveFilesConfig' expectedArchiveFiles' dateFormat' changeCreationAndWriteTime
Long Parameter List,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,HandleArchiveFilesMultipleContextSingleTargetsTest,The method has 6 parameters. Parameters: archivePath' logdir' maxArchiveFilesConfig' expectedArchiveFiles' dateFormat' changeCreationAndWriteTime
Long Parameter List,NLog.UnitTests.Targets,TargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\TargetTests.cs,CheckEquals,The method has 5 parameters. Parameters: targetType' defaultConstructedTarget' namedConstructedTarget' lastPropertyName' checked
Long Parameter List,NLog.UnitTests.Targets,TestContext,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,TestContext,The method has 9 parameters. Parameters: portOffset' expectedMessages' xmlInsteadOfJson' expectedHeaders' expected1' expected2' expected3' expected4' expectedContentType
Long Parameter List,NLog.UnitTests.Targets.Wrappers,ImpersonatingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\ImpersonatingTargetWrapperTests.cs,CreateWindowsIdentity,The method has 6 parameters. Parameters: username' domain' password' logonType' logonProviderType' impersonationLevel
Long Parameter List,NLog.UnitTests.Targets.Wrappers,NativeMethods,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\ImpersonatingTargetWrapperTests.cs,LogonUser,The method has 6 parameters. Parameters: pszUsername' pszDomain' pszPassword' dwLogonType' dwLogonProvider' phToken
Long Identifier,NLog.UnitTests.Config,InternalLoggingTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\InternalLoggingTests.cs,InternalLoggingConfigTest,The length of the parameter internalLogToConsoleErrorString is 31.
Long Identifier,NLog.UnitTests.Config,VariableTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\VariableTests.cs,NLogConfigurationExceptionShouldThrown_WhenVariableNodeIsWrittenToWrongPlace,The length of the parameter configurationString_VariableNodeIsInnerTargets is 46.
Long Identifier,NLog.UnitTests.Config,VariableTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\VariableTests.cs,NLogConfigurationExceptionShouldThrown_WhenVariableNodeIsWrittenToWrongPlace,The length of the parameter configurationString_VariableNodeIsAfterTargets is 46.
Long Identifier,NLog.UnitTests.LayoutRenderers,AssemblyVersionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Assemblies and appdomains\AssemblyVersionTests.cs,,The length of the parameter AssemblyInformationalVersionTest is 32.
Long Identifier,NLog.UnitTests.LayoutRenderers,NetworkInterfaceRetrieverBuilder,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\LocalIpAddressLayoutRendererTests.cs,BuildNetworkInterfaceMock,The length of the parameter unicastIpAddressInformationCollection is 37.
Long Identifier,NLog.UnitTests.LayoutRenderers,NetworkInterfaceRetrieverBuilder,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\LocalIpAddressLayoutRendererTests.cs,,The length of the parameter _networkInterfaceRetrieverMock is 30.
Long Identifier,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,,The length of the parameter ExpectedIncludeAllPropertiesWithExcludes is 40.
Long Identifier,NLog.UnitTests.Targets,SqlServerTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,,The length of the parameter AppVeyorConnectionStringMaster is 30.
Long Identifier,NLog.UnitTests.Targets,SqlServerTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,,The length of the parameter AppVeyorConnectionStringNLogTest is 32.
Long Identifier,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_WithDateAndSequenceArchiveNumbering_ShouldPadSequenceNumberInArchiveFileName,The length of the parameter expectedSequenceInArchiveFileName is 33.
Long Identifier,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_WithDateAndSequenceArchiveNumbering_ShouldPadSequenceNumberInArchiveFileName,The length of the parameter resultArchiveWithExpectedNameExists is 35.
Long Identifier,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_WithDateAndSequenceArchiveNumbering_ShouldRespectArchiveDateFormat,The length of the parameter resultArchiveWithExpectedNameExists is 35.
Long Identifier,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,HandleArchiveFilesMultipleContextMultipleTargetsTest,The length of the parameter numberFilesCreatedPerTargetArchive is 34.
Long Identifier,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,HandleArchiveFilesMultipleContextSingleTargetsTest,The length of the parameter numberFilesCreatedPerTargetArchive is 34.
Long Statement,NLog.UnitTests,ApiTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\ApiTests.cs,IStringValueRenderer_AppDomainFixedOutput_Attribute_NotRequired,The length of the statement  "                    Assert.True(ReferenceEquals(appDomainFixedOutputAttribute' null)' $"{type.ToString()} should not implement IStringValueRenderer"); " is 130.
Long Statement,NLog.UnitTests,ConfigFileLocatorTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\ConfigFileLocatorTests.cs,GetConfigFile_absolutePath_loads_testData,The length of the statement  "            yield return new object[] { "nlog.config"' $"{baseDir}dir1{d}nlog.config"' $"{baseDir}dir1{d}nlog.config"' dirInBaseDir }; //exists " is 131.
Long Statement,NLog.UnitTests,ConfigFileLocatorTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\ConfigFileLocatorTests.cs,GetConfigFile_absolutePath_loads_testData,The length of the statement  "            yield return new object[] { "nlog.config"' $"{baseDir}dir1{d}nlog2.config"' "nlog.config"' dirInBaseDir }; //not existing' fallback " is 131.
Long Statement,NLog.UnitTests,LogFactoryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogFactoryTests.cs,Flush_DoNotThrowExceptionsAndTimeout_DoesNotThrow,The length of the statement  "                    <targets><target type='MethodCall' name='test' methodName='Throws' className='NLog.UnitTests.LogFactoryTests' NLog.UnitTests.netfx40' /></targets> " is 146.
Long Statement,NLog.UnitTests,LogFactoryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogFactoryTests.cs,InvalidXMLConfiguration_DoesNotThrowErrorWhen_ThrowExceptionFlagIsNotSet,The length of the statement  "                <targets><target type='MethodCall' name='test' methodName='Throws' className='NLog.UnitTests.LogFactoryTests' NLog.UnitTests.netfx40' /></targets> " is 146.
Long Statement,NLog.UnitTests,LogFactoryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogFactoryTests.cs,InvalidXMLConfiguration_ThrowErrorWhen_ThrowExceptionFlagIsSet,The length of the statement  "                <targets><target type='MethodCall' name='test' methodName='Throws' className='NLog.UnitTests.LogFactoryTests' NLog.UnitTests.netfx40' /></targets> " is 146.
Long Statement,NLog.UnitTests,LogFactoryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogFactoryTests.cs,ReloadConfigOnTimer_DoesNotThrowConfigException_IfConfigChangedInBetween,The length of the statement  "                testChanged = (s' e) => { called = true; oldConfiguration = e.DeactivatedConfiguration; newConfiguration = e.ActivatedConfiguration; }; " is 135.
Long Statement,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,LogTest,The length of the statement  "            foreach (LogLevel level in new LogLevel[] { LogLevel.Debug' LogLevel.Info' LogLevel.Warn' LogLevel.Error' LogLevel.Fatal }) " is 123.
Long Statement,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The length of the statement  "                if (enabled == 1) AssertDebugLastMessage("debug"' "A|we\'ve got error 500' 501' 502' 503'5 ...arg1 is obvious wrong\r\nParameter name: arg1"); " is 142.
Long Statement,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The length of the statement  "                if (enabled == 1) AssertDebugLastMessage("debug"' "A|we\'ve got error 500' 501' 502' 503.5 ...arg1 is obvious wrong\r\nParameter name: arg1"); " is 142.
Long Statement,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The length of the statement  "                if (enabled == 1) AssertDebugLastMessage("debug"' "A|we\'ve got error 500' 501' 502' 503'5 ...arg1 is obvious wrong\r\nParameter name: arg1"); " is 142.
Long Statement,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The length of the statement  "                if (enabled == 1) AssertDebugLastMessage("debug"' "A|we\'ve got error 500' 501' 502' 503.5 ...arg1 is obvious wrong\r\nParameter name: arg1"); " is 142.
Long Statement,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,SwallowTest,The length of the statement  "            Assert.Equal(0' logger.Swallow(() => { if (warningFix) throw new InvalidOperationException("Test message 2"); return 1; })); " is 124.
Long Statement,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,SwallowTest,The length of the statement  "            Assert.Equal(2' logger.Swallow(() => { if (warningFix) throw new InvalidOperationException("Test message 3"); return 1; }' 2)); " is 127.
Long Statement,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,SwallowTest,The length of the statement  "            logger.SwallowAsync(async () => { await Task.Delay(20); throw new InvalidOperationException("Test message 5"); }).Wait(); " is 121.
Long Statement,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,SwallowTest,The length of the statement  "            Assert.Equal(0' logger.SwallowAsync(async () => { await Task.Delay(20); if (warningFix) throw new InvalidOperationException("Test message 6"); return 1; }).Result); " is 164.
Long Statement,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,SwallowTest,The length of the statement  "            Assert.Equal(2' logger.SwallowAsync(async () => { await Task.Delay(20); if (warningFix) throw new InvalidOperationException("Test message 7"); return 1; }' 2).Result); " is 167.
Long Statement,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,When_Logging_LogEvent_Without_Logger_Defined_UseLoggerName,The length of the statement  "            logger.Log(logger.GetType()' new LogEventInfo() { Level = LogLevel.Error' Message = "Hello"' LoggerName = string.Empty }); " is 122.
Long Statement,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,MixedStructuredEventsConfigTest,The length of the statement  "            logger.Debug("Process order {" + param1 + "} for {" + param2 + "}"' 13424' new { ClientId = 3001' ClientName = "John Doe" }); " is 125.
Long Statement,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,StructuredEventsTest1,The length of the statement  "                if (enabled == 1) AssertDebugLastMessage("debug"' "A|hello from {\"Name\":\"Jane\"' \"Childs\":[{\"Name\":\"James\"}'{\"Name\":\"Mike\"}]}"); " is 141.
Long Statement,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,StructuredEventsTest1,The length of the statement  "                logger.Error("hello from {FamilyNames}"' new Dictionary<int' string>() { { 1' "James" }' { 2' "Mike" }' { 3' "Jane" } }); " is 121.
Long Statement,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TestStructuredProperties_json,The length of the statement  "            AssertDebugLastMessage("debug"' "{ \"LogMessage\": \"Login request from {@Username} for {$Application}\"' \"Username\": {\"Name\":\"John\"}' \"Application\": \"BestApplicationEver\" }"); " is 186.
Long Statement,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TestStructuredProperties_json_async,The length of the statement  "            AssertDebugLastMessage("debug"' "{ \"LogMessage\": \"Login request from {@Username} for {$Application}\"' \"Username\": {\"Name\":\"John\"}' \"Application\": \"BestApplicationEver\" }"); " is 186.
Long Statement,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TestStructuredProperties_json_compound,The length of the statement  "            AssertDebugLastMessage("debug"' "Login request from \"John\" for \"BestApplicationEver\"{ \"Username\": \"\\\"John\\\"\"' \"Application\": \"BestApplicationEver\" }"); " is 167.
Long Statement,NLog.UnitTests,LogLevelTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogLevelTests.cs,LogLevel_GetAllLevels,The length of the statement  "                new List<LogLevel>() { LogLevel.Trace' LogLevel.Debug' LogLevel.Info' LogLevel.Warn' LogLevel.Error' LogLevel.Fatal' LogLevel.Off }' " is 132.
Long Statement,NLog.UnitTests,LogManagerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogManagerTests.cs,ThreadSafe_Shutdown,The length of the statement  "            LogManager.Configuration.AddTarget("memory"' new NLog.Targets.Wrappers.BufferingTargetWrapper(new MemoryTarget() { MaxLogsCount = 500 }' 5' 1)); " is 144.
Long Statement,NLog.UnitTests,LogManagerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogManagerTests.cs,ThreadSafe_Shutdown,The length of the statement  "            LogManager.Configuration.LoggingRules.Add(new LoggingRule("*"' LogLevel.Debug' LogManager.Configuration.FindTargetByName("memory"))); " is 133.
Long Statement,NLog.UnitTests,LogManagerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogManagerTests.cs,ThreadSafe_Shutdown,The length of the statement  "            LogManager.Configuration.AddTarget("memory2"' new NLog.Targets.Wrappers.BufferingTargetWrapper(new MemoryTarget() { MaxLogsCount = 500 }' 5' 1)); " is 145.
Long Statement,NLog.UnitTests,LogManagerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogManagerTests.cs,ThreadSafe_Shutdown,The length of the statement  "            LogManager.Configuration.LoggingRules.Add(new LoggingRule("*"' LogLevel.Debug' LogManager.Configuration.FindTargetByName("memory2"))); " is 134.
Long Statement,NLog.UnitTests,LogManagerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogManagerTests.cs,ThreadSafe_Shutdown,The length of the statement  "            Task.Run(() => { try { var logger = LogManager.GetLogger("Hello"); while (!stopFlag) { logger.Debug("Hello World"); System.Threading.Thread.Sleep(1); } } catch { exceptionThrown = true; } }); " is 191.
Long Statement,NLog.UnitTests,LogManagerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogManagerTests.cs,ThreadSafe_Shutdown,The length of the statement  "            Task.Run(() => { try { var logger = LogManager.GetLogger("Hello"); while (!stopFlag) { logger.Debug("Hello World"); System.Threading.Thread.Sleep(1); } } catch { exceptionThrown = true; } }); " is 191.
Long Statement,NLog.UnitTests,LogManagerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogManagerTests.cs,RemovedTargetShouldNotLog,The length of the statement  "            Assert.Equal(new[] { "TargetA"' "TargetB" }' LogManager.Configuration.ConfiguredNamedTargets.Select(target => target.Name)); " is 124.
Long Statement,NLog.UnitTests,LogMessageFormatterTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogMessageFormatterTests.cs,ExtensionsLoggingFormatTest,The length of the statement  "            LogEventInfo logEventInfo = new LogEventInfo(LogLevel.Info' "MyLogger"' "Login request from {Username} for {Application}"' new[] " is 128.
Long Statement,NLog.UnitTests,LogMessageFormatterTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogMessageFormatterTests.cs,ExtensionsLoggingFormatTest,The length of the statement  "            AssertDebugLastMessage("debug"' "{ \"LogMessage\": \"Login request from {Username} for {Application}\"' \"Username\": \"John\"' \"Application\": \"BestApplicationEver\" }"); " is 173.
Long Statement,NLog.UnitTests,LogMessageFormatterTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogMessageFormatterTests.cs,ExtensionsLoggingFormatTest,The length of the statement  "            Assert.Contains(new MessageTemplateParameter("Username"' "John"' null' CaptureType.Normal)' logEventInfo.MessageTemplateParameters); " is 132.
Long Statement,NLog.UnitTests,LogMessageFormatterTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogMessageFormatterTests.cs,ExtensionsLoggingFormatTest,The length of the statement  "            Assert.Contains(new MessageTemplateParameter("Application"' "BestApplicationEver"' null' CaptureType.Normal)' logEventInfo.MessageTemplateParameters); " is 150.
Long Statement,NLog.UnitTests,LogMessageFormatterTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogMessageFormatterTests.cs,NormalStringFormatTest,The length of the statement  "            LogEventInfo logEventInfo = new LogEventInfo(LogLevel.Info' "MyLogger"' null' "{0:X} - Login request from {1} for {2} with userid {0}"' new object[] " is 148.
Long Statement,NLog.UnitTests,LogMessageFormatterTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogMessageFormatterTests.cs,NormalStringFormatTest,The length of the statement  "            Assert.Contains(new MessageTemplateParameter("0"' 42' "X"' CaptureType.Normal)' logEventInfo.MessageTemplateParameters); " is 120.
Long Statement,NLog.UnitTests,LogMessageFormatterTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogMessageFormatterTests.cs,NormalStringFormatTest,The length of the statement  "            Assert.Contains(new MessageTemplateParameter("1"' "John"' null' CaptureType.Normal)' logEventInfo.MessageTemplateParameters); " is 125.
Long Statement,NLog.UnitTests,LogMessageFormatterTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogMessageFormatterTests.cs,NormalStringFormatTest,The length of the statement  "            Assert.Contains(new MessageTemplateParameter("2"' "BestApplicationEver"' null' CaptureType.Normal)' logEventInfo.MessageTemplateParameters); " is 140.
Long Statement,NLog.UnitTests,LogMessageFormatterTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogMessageFormatterTests.cs,NormalStringFormatTest,The length of the statement  "            Assert.Contains(new MessageTemplateParameter("0"' 42' null' CaptureType.Normal)' logEventInfo.MessageTemplateParameters); " is 121.
Long Statement,NLog.UnitTests,LogMessageFormatterTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogMessageFormatterTests.cs,MessageTemplateFormatTest,The length of the statement  "            LogEventInfo logEventInfo = new LogEventInfo(LogLevel.Info' "MyLogger"' null' "Login request from {@Username} for {Application:l}"' new object[] " is 144.
Long Statement,NLog.UnitTests,LogMessageFormatterTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogMessageFormatterTests.cs,MessageTemplateFormatTest,The length of the statement  "            AssertDebugLastMessage("debug"' "{ \"LogMessage\": \"Login request from {@Username} for {Application:l}\"' \"Username\": \"John\"' \"Application\": \"BestApplicationEver\" }"); " is 176.
Long Statement,NLog.UnitTests,LogMessageFormatterTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogMessageFormatterTests.cs,MessageTemplateFormatTest,The length of the statement  "            Assert.Contains(new MessageTemplateParameter("Username"' "John"' null' CaptureType.Serialize)' logEventInfo.MessageTemplateParameters); " is 135.
Long Statement,NLog.UnitTests,LogMessageFormatterTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogMessageFormatterTests.cs,MessageTemplateFormatTest,The length of the statement  "            Assert.Contains(new MessageTemplateParameter("Application"' "BestApplicationEver"' "l"' CaptureType.Normal)' logEventInfo.MessageTemplateParameters); " is 149.
Long Statement,NLog.UnitTests,NLogTestBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\NLogTestBase.cs,AssertFileContentsStartsWith,The length of the statement  "                $"File:{fileName} encodedBytes:{encodedBuf.Length} does not match file.content:{buf.Length}' file.length = {fi.Length}"); " is 121.
Long Statement,NLog.UnitTests,NLogTestBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\NLogTestBase.cs,AssertFileContents,The length of the statement  "                $"File:{fileName} encodedBytes:{encodedBuf.Length} does not match file.content:{buf.Length}' file.length = {fi.Length}"); " is 121.
Long Statement,NLog.UnitTests,NLogTraceListenerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\NLogTraceListenerTests.cs,ForceLogLevelTest,The length of the statement  "            ts.Listeners.Add(new NLogTraceListener { Name = "Logger1"' DefaultLogLevel = LogLevel.Trace' ForceLogLevel = LogLevel.Warn }); " is 126.
Long Statement,NLog.UnitTests,NLogTraceListenerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\NLogTraceListenerTests.cs,FilterTraceTest,The length of the statement  "            ts.Listeners.Add(new NLogTraceListener { Name = "Logger1"' DefaultLogLevel = LogLevel.Trace' ForceLogLevel = LogLevel.Warn' Filter = new EventTypeFilter(SourceLevels.Error) }); " is 176.
Long Statement,NLog.UnitTests.Common,InternalLoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Common\InternalLoggerTests.cs,WriteToStringWriterWithArgsTests,The length of the statement  "                const string expected = "Warn WWW 0\nError EEE 0' 1\nFatal FFF 0' 1' 2\nTrace TTT 0' 1' 2\nDebug DDD 0' 1\nInfo III 0\n"; " is 121.
Long Statement,NLog.UnitTests.Conditions,ConditionEvaluatorTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Conditions\ConditionEvaluatorTests.cs,ConditionMethodsTest,The length of the statement  "            Assert.Throws<ConditionEvaluationException>(() => AssertEvaluationResult(true' "regex-matches('foo\nbar'' '^Foo$'' 'ignorecase'nonexistent')")); " is 144.
Long Statement,NLog.UnitTests.Conditions,ConditionEvaluatorTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Conditions\ConditionEvaluatorTests.cs,ConditionMethodNegativeTest1,The length of the statement  "                Assert.Equal("Condition method 'starts-with' requires between 2 and 3 parameters' but passed 1."' ex.InnerException.Message); " is 125.
Long Statement,NLog.UnitTests.Conditions,ConditionEvaluatorTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Conditions\ConditionEvaluatorTests.cs,ConditionMethodNegativeTest2,The length of the statement  "                Assert.Equal("Condition method 'starts-with' requires between 2 and 3 parameters' but passed 4."' ex.InnerException.Message); " is 125.
Long Statement,NLog.UnitTests.Conditions,ConditionEvaluatorTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Conditions\ConditionEvaluatorTests.cs,TypePromotionTest,The length of the statement  "            Assert.Equal(true' ConditionParser.ParseExpression("ToDateTime('2010/01/01') == '2010/01/01'"' factories).Evaluate(CreateWellKnownContext())); " is 142.
Long Statement,NLog.UnitTests.Conditions,ConditionEvaluatorTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Conditions\ConditionEvaluatorTests.cs,TypePromotionTest,The length of the statement  "            Assert.Equal(true' ConditionParser.ParseExpression("ToInt64(1) == ToInt32(1)"' factories).Evaluate(CreateWellKnownContext())); " is 126.
Long Statement,NLog.UnitTests.Conditions,ConditionEvaluatorTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Conditions\ConditionEvaluatorTests.cs,TypePromotionTest,The length of the statement  "            Assert.Equal(true' ConditionParser.ParseExpression("ToInt32(3) == ToInt16(3)"' factories).Evaluate(CreateWellKnownContext())); " is 126.
Long Statement,NLog.UnitTests.Conditions,ConditionEvaluatorTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Conditions\ConditionEvaluatorTests.cs,TypePromotionTest,The length of the statement  "            Assert.Equal(true' ConditionParser.ParseExpression("ToInt16(3) == ToInt32(3)"' factories).Evaluate(CreateWellKnownContext())); " is 126.
Long Statement,NLog.UnitTests.Conditions,ConditionEvaluatorTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Conditions\ConditionEvaluatorTests.cs,TypePromotionTest,The length of the statement  "            Assert.Equal(true' ConditionParser.ParseExpression("true == ToInt16(1)"' factories).Evaluate(CreateWellKnownContext())); " is 120.
Long Statement,NLog.UnitTests.Conditions,ConditionEvaluatorTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Conditions\ConditionEvaluatorTests.cs,TypePromotionTest,The length of the statement  "            Assert.Equal(true' ConditionParser.ParseExpression("ToInt16(1) == true"' factories).Evaluate(CreateWellKnownContext())); " is 120.
Long Statement,NLog.UnitTests.Conditions,ConditionEvaluatorTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Conditions\ConditionEvaluatorTests.cs,TypePromotionTest,The length of the statement  "            Assert.Equal(false' ConditionParser.ParseExpression("ToDateTime('2010/01/01') == '2010/01/02'"' factories).Evaluate(CreateWellKnownContext())); " is 143.
Long Statement,NLog.UnitTests.Conditions,ConditionEvaluatorTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Conditions\ConditionEvaluatorTests.cs,TypePromotionTest,The length of the statement  "            Assert.Equal(false' ConditionParser.ParseExpression("ToInt64(1) == ToInt32(2)"' factories).Evaluate(CreateWellKnownContext())); " is 127.
Long Statement,NLog.UnitTests.Conditions,ConditionEvaluatorTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Conditions\ConditionEvaluatorTests.cs,TypePromotionTest,The length of the statement  "            Assert.Equal(false' ConditionParser.ParseExpression("ToDecimal(3) == 4"' factories).Evaluate(CreateWellKnownContext())); " is 120.
Long Statement,NLog.UnitTests.Conditions,ConditionEvaluatorTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Conditions\ConditionEvaluatorTests.cs,TypePromotionTest,The length of the statement  "            Assert.Equal(false' ConditionParser.ParseExpression("3 == ToDecimal(4)"' factories).Evaluate(CreateWellKnownContext())); " is 120.
Long Statement,NLog.UnitTests.Conditions,ConditionEvaluatorTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Conditions\ConditionEvaluatorTests.cs,TypePromotionTest,The length of the statement  "            Assert.Equal(false' ConditionParser.ParseExpression("ToInt32(3) == ToInt16(4)"' factories).Evaluate(CreateWellKnownContext())); " is 127.
Long Statement,NLog.UnitTests.Conditions,ConditionEvaluatorTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Conditions\ConditionEvaluatorTests.cs,TypePromotionTest,The length of the statement  "            Assert.Equal(false' ConditionParser.ParseExpression("ToInt16(3) == ToInt32(4)"' factories).Evaluate(CreateWellKnownContext())); " is 127.
Long Statement,NLog.UnitTests.Conditions,ConditionEvaluatorTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Conditions\ConditionEvaluatorTests.cs,TypePromotionTest,The length of the statement  "            Assert.Equal(false' ConditionParser.ParseExpression("false == ToInt16(4)"' factories).Evaluate(CreateWellKnownContext())); " is 122.
Long Statement,NLog.UnitTests.Conditions,ConditionEvaluatorTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Conditions\ConditionEvaluatorTests.cs,TypePromotionTest,The length of the statement  "            Assert.Equal(false' ConditionParser.ParseExpression("ToInt16(1) == false"' factories).Evaluate(CreateWellKnownContext())); " is 122.
Long Statement,NLog.UnitTests.Conditions,ConditionEvaluatorTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Conditions\ConditionEvaluatorTests.cs,TypePromotionTest,The length of the statement  "            Assert.Equal(false' ConditionParser.ParseExpression("ToDateTime('2010/01/01') == '20xx/01/01'"' factories).Evaluate(CreateWellKnownContext())); " is 143.
Long Statement,NLog.UnitTests.Conditions,ConditionEvaluatorTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Conditions\ConditionEvaluatorTests.cs,TypePromotionNegativeTest2,The length of the statement  "            Assert.Throws<ConditionEvaluationException>(() => ConditionParser.ParseExpression("GetGuid() == ToInt16(1)"' factories).Evaluate(CreateWellKnownContext())); " is 156.
Long Statement,NLog.UnitTests.Conditions,ConditionParserTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Conditions\ConditionParserTests.cs,MethodNameWithUnderscores,The length of the statement  "            configurationItemFactory.ConditionMethods.RegisterDefinition("__check__"' typeof(MyConditionMethods).GetMethod("CheckIt")); " is 123.
Long Statement,NLog.UnitTests.Config,ConfigApiTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\ConfigApiTests.cs,AddTarget_WithName_NullNameParam,The length of the statement  "            Exception ex = Assert.Throws<ArgumentNullException>(() => config.AddTarget(name: null' target: new FileTarget { Name = "name1" })); " is 131.
Long Statement,NLog.UnitTests.Config,ConfigApiTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\ConfigApiTests.cs,AddTarget_WithName_EmptyPameParam,The length of the statement  "            Exception ex = Assert.Throws<ArgumentException>(() => config.AddTarget(name: ""' target: new FileTarget { Name = "name1" })); " is 125.
Long Statement,NLog.UnitTests.Config,DuplicateConfigurationAttributeTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\DuplicateConfigurationAttributeTests.cs,ShoudWriteToInternalLogOnDuplicateAttributeTest,The length of the statement  "            Assert.True(internalLog.Contains("Skipping Duplicate value for 'logger'. PropertyName=minLevel. Skips Value=trace. Existing Value=info")' internalLog); " is 151.
Long Statement,NLog.UnitTests.Config,DuplicateConfigurationAttributeTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\DuplicateConfigurationAttributeTests.cs,ShoudWriteToInternalLogOnDuplicateAttributeTest,The length of the statement  "            Assert.True(internalLog.Contains("Skipping Duplicate value for 'whencontains'. PropertyName=Substring. Skips Value=msg1. Existing Value=msg")' internalLog); " is 156.
Long Statement,NLog.UnitTests.Config,InternalLoggingTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\InternalLoggingTests.cs,InternalLoggingConfigTest2,The length of the statement  "            InternalLoggingConfigTest(LogLevel.Error' false' false' LogLevel.Info' false' false' @"c:\temp\nlog\file2.txt"' false' false); " is 126.
Long Statement,NLog.UnitTests.Config,InternalLoggingTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\InternalLoggingTests.cs,InternalLoggingConfigTes3,The length of the statement  "            InternalLoggingConfigTest(LogLevel.Info' false' false' LogLevel.Trace' false' null' @"c:\temp\nlog\file3.txt"' false' true); " is 124.
Long Statement,NLog.UnitTests.Config,RuleConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\RuleConfigurationTests.cs,UnusedTargetsShouldBeLoggedToInternalLogger,The length of the statement  "                AssertFileContains(tempFileName' "Unused target detected. Add a rule for this target to the configuration. TargetName: d4"' Encoding.UTF8); " is 139.
Long Statement,NLog.UnitTests.Config,RuleConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\RuleConfigurationTests.cs,UnusedTargetsShouldBeLoggedToInternalLogger,The length of the statement  "                AssertFileContains(tempFileName' "Unused target detected. Add a rule for this target to the configuration. TargetName: d5"' Encoding.UTF8); " is 139.
Long Statement,NLog.UnitTests.Config,RuleConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\RuleConfigurationTests.cs,UnusedTargetsShouldBeLoggedToInternalLogger_PermitWrapped,The length of the statement  "                AssertFileNotContains(tempFileName' "Unused target detected. Add a rule for this target to the configuration. TargetName: d2"' Encoding.UTF8); " is 142.
Long Statement,NLog.UnitTests.Config,RuleConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\RuleConfigurationTests.cs,UnusedTargetsShouldBeLoggedToInternalLogger_PermitWrapped,The length of the statement  "                AssertFileNotContains(tempFileName' "Unused target detected. Add a rule for this target to the configuration. TargetName: d3"' Encoding.UTF8); " is 142.
Long Statement,NLog.UnitTests.Config,RuleConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\RuleConfigurationTests.cs,UnusedTargetsShouldBeLoggedToInternalLogger_PermitWrapped,The length of the statement  "                AssertFileNotContains(tempFileName' "Unused target detected. Add a rule for this target to the configuration. TargetName: d4"' Encoding.UTF8); " is 142.
Long Statement,NLog.UnitTests.Config,RuleConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\RuleConfigurationTests.cs,UnusedTargetsShouldBeLoggedToInternalLogger_PermitWrapped,The length of the statement  "                AssertFileContains(tempFileName' "Unused target detected. Add a rule for this target to the configuration. TargetName: d5"' Encoding.UTF8); " is 139.
Long Statement,NLog.UnitTests.Config,RuleConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\RuleConfigurationTests.cs,LoggingRule_LevelLayout_ParseLevel,The length of the statement  "            LogLevel expectedLogLevel = (NLog.Internal.StringHelpers.IsNullOrWhiteSpace(levelVariable) || levelVariable == "Wrong") ? LogLevel.Off : LogLevel.FromString(levelVariable.Trim()); " is 179.
Long Statement,NLog.UnitTests.Config,RuleConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\RuleConfigurationTests.cs,LoggingRule_MinMaxLayout_ParseLevel_TestCases2,The length of the statement  "            yield return new object[] { ""' "Off"' new[] { LogLevel.Trace' LogLevel.Debug' LogLevel.Info' LogLevel.Warn' LogLevel.Error' LogLevel.Fatal } }; " is 144.
Long Statement,NLog.UnitTests.Config,RuleConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\RuleConfigurationTests.cs,LoggingRule_MinMaxLayout_ParseLevel_TestCases2,The length of the statement  "            yield return new object[] { ""' "Fatal"' new[] { LogLevel.Trace' LogLevel.Debug' LogLevel.Info' LogLevel.Warn' LogLevel.Error' LogLevel.Fatal } }; " is 146.
Long Statement,NLog.UnitTests.Config,RuleConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\RuleConfigurationTests.cs,LoggingRule_MinMaxLayout_ParseLevel_TestCases2,The length of the statement  "            yield return new object[] { ""' " error"' new[] { LogLevel.Trace' LogLevel.Debug' LogLevel.Info' LogLevel.Warn' LogLevel.Error } }; " is 131.
Long Statement,NLog.UnitTests.Config,RuleConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\RuleConfigurationTests.cs,LoggingRule_MinMaxLayout_ParseLevel_TestCases2,The length of the statement  "            yield return new object[] { "Trace"' ""' new[] { LogLevel.Trace' LogLevel.Debug' LogLevel.Info' LogLevel.Warn' LogLevel.Error' LogLevel.Fatal } }; " is 146.
Long Statement,NLog.UnitTests.Config,TargetConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\TargetConfigurationTests.cs,DontThrowExceptionWhenArchiveEverySetByDefaultParameters,The length of the statement  "            LogManager.GetLogger("TestLogger").Info("DefaultFileTargetParametersTests.DontThrowExceptionWhenArchiveEverySetByDefaultParameters is true"); " is 141.
Long Statement,NLog.UnitTests.Config,XmlConfigTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\XmlConfigTests.cs,ParseNLogOptionsTest,The length of the statement  "                var xml = "<nlog logfile='test.txt' internalLogIncludeTimestamp='false' internalLogToConsole='true' internalLogToConsoleError='true'></nlog>"; " is 142.
Long Statement,NLog.UnitTests.Config,XmlConfigTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\XmlConfigTests.cs,XmlConfig_attributes_shouldNotLogWarningsToInternalLog,The length of the statement  "                var factory = ConfigurationItemFactory.Default; // retrieve factory for calling preload and so won't assert those warnings " is 122.
Long Statement,NLog.UnitTests.Contexts,MappedDiagnosticsLogicalContextTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Contexts\MappedDiagnosticsLogicalContextTests.cs,disposable_multiple_items,The length of the statement  "            using (MappedDiagnosticsLogicalContext.SetScoped(new[] { new KeyValuePair<string' object>(item1Key' "1")' new KeyValuePair<string' object>(item2Key' "2") })) " is 157.
Long Statement,NLog.UnitTests.Contexts,MappedDiagnosticsLogicalContextTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Contexts\MappedDiagnosticsLogicalContextTests.cs,disposable_multiple_items,The length of the statement  "            using (MappedDiagnosticsLogicalContext.SetScoped(new[] { new KeyValuePair<string' object>(item1Key' "1")' new KeyValuePair<string' object>(item2Key' "2")' new KeyValuePair<string' object>(item3Key' "3")' new KeyValuePair<string' object>(item4Key' "4") })) " is 255.
Long Statement,NLog.UnitTests.Contexts,MappedDiagnosticsLogicalContextTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Contexts\MappedDiagnosticsLogicalContextTests.cs,disposable_multiple_items,The length of the statement  "                Assert.Equal(MappedDiagnosticsLogicalContext.GetNames()' new[] { itemNotRemovedKey' item1Key' item2Key' item3Key' item4Key }); " is 126.
Long Statement,NLog.UnitTests.Contexts,MappedDiagnosticsLogicalContextTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Contexts\MappedDiagnosticsLogicalContextTests.cs,disposable_fast_clear_multiple_items,The length of the statement  "            using (MappedDiagnosticsLogicalContext.SetScoped(new[] { new KeyValuePair<string' object>(item1Key' "1")' new KeyValuePair<string' object>(item2Key' "2") })) " is 157.
Long Statement,NLog.UnitTests.Contexts,MappedDiagnosticsLogicalContextTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Contexts\MappedDiagnosticsLogicalContextTests.cs,disposable_fast_clear_multiple_items,The length of the statement  "            using (MappedDiagnosticsLogicalContext.SetScoped(new[] { new KeyValuePair<string' object>(item1Key' "1")' new KeyValuePair<string' object>(item2Key' "2")' new KeyValuePair<string' object>(item3Key' "3")' new KeyValuePair<string' object>(item4Key' "4") })) " is 255.
Long Statement,NLog.UnitTests.Filters,APITests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\APITests.cs,WhenMethodFilterApiTest,The length of the statement  "            config.LoggingRules.Last().Filters.Add(new WhenMethodFilter((l) => l.LoggerName == logger1.Name ? FilterResult.Ignore : FilterResult.Log)); " is 139.
Long Statement,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedMaxCacheSizeIgnoreTest,The length of the statement  "                        <whenRepeated layout='${message}' action='Ignore' maxFilterCacheSize='5' defaultFilterCacheSize='5' timeoutSeconds='10' /> " is 122.
Long Statement,NLog.UnitTests.Fluent,LogBuilderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Fluent\LogBuilderTests.cs,LogBuilder_nLogEventInfo,The length of the statement  "            var logEventInfo = new LogBuilder(LogManager.GetLogger("a")).LoggerName("b").Level(LogLevel.Fatal).TimeStamp(d).LogEventInfo; " is 125.
Long Statement,NLog.UnitTests.Fluent,LogBuilderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Fluent\LogBuilderTests.cs,LogBuilder_Structured_Logging_Test,The length of the statement  "            var logEvent = _logger.Info().Property("Property1Key"' "Property1Value").Message("{@message}"' "My custom message").LogEventInfo; " is 129.
Long Statement,NLog.UnitTests.Internal,AsyncLogEventInfoTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\AsyncLogEventInfoTests.cs,TestNotEquals,The length of the statement  "            //2 delegates will return the same hashcode' https://stackoverflow.com/questions/6624151/why-do-2-delegate-instances-return-the-same-hashcode " is 141.
Long Statement,NLog.UnitTests.Internal,ExceptionHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\ExceptionHelperTests.cs,CreateException,The length of the statement  "            return exceptionType.GetConstructor(BindingFlags.NonPublic | BindingFlags.Default | BindingFlags.Instance | BindingFlags.Public' null' Type.EmptyTypes' null).Invoke(null) as Exception; " is 184.
Long Statement,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,EmptyMessagePropertiesDictionary,The length of the statement  "            LogEventInfo logEvent = new LogEventInfo(LogLevel.Info' "MyLogger"' string.Empty' (IList<MessageTemplateParameter>)null); " is 121.
Long Statement,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,EmptyPropertiesDictionary,The length of the statement  "            LogEventInfo logEvent = new LogEventInfo(LogLevel.Info' "MyLogger"' string.Empty' (IList<MessageTemplateParameter>)null); " is 121.
Long Statement,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,SingleItemMessagePropertiesDictionaryNoLookup,The length of the statement  "            LogEventInfo logEvent = new LogEventInfo(LogLevel.Info' "MyLogger"' string.Empty' new[] { new MessageTemplateParameter("Hello World"' 42' null' CaptureType.Normal) }); " is 167.
Long Statement,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,SingleItemMessagePropertiesDictionaryWithLookup,The length of the statement  "            LogEventInfo logEvent = new LogEventInfo(LogLevel.Info' "MyLogger"' string.Empty' new[] { new MessageTemplateParameter("Hello World"' 42' null' CaptureType.Normal) }); " is 167.
Long Statement,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,MultiItemPropertiesDictionary,The length of the statement  "            LogEventInfo logEvent = new LogEventInfo(LogLevel.Info' "MyLogger"' string.Empty' new[] { new MessageTemplateParameter("Hello World"' 42' null' CaptureType.Normal) }); " is 167.
Long Statement,NLog.UnitTests.Internal,SortHelpersTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\SortHelpersTests.cs,SingleBucketDictionary_NoBucketTest,The length of the statement  "            SortHelpers.ReadOnlySingleBucketDictionary<string' IList<string>> dict = new SortHelpers.ReadOnlySingleBucketDictionary<string' IList<string>>(); " is 145.
Long Statement,NLog.UnitTests.Internal,SortHelpersTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\SortHelpersTests.cs,SingleBucketDictionary_OneBucketEmptyTest,The length of the statement  "            SortHelpers.ReadOnlySingleBucketDictionary<string' IList<string>> dict = new SortHelpers.ReadOnlySingleBucketDictionary<string' IList<string>>(new KeyValuePair<string' IList<string>>("Bucket1"' bucket)); " is 203.
Long Statement,NLog.UnitTests.Internal,SortHelpersTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\SortHelpersTests.cs,SingleBucketDictionary_OneBucketOneItem,The length of the statement  "            SortHelpers.ReadOnlySingleBucketDictionary<string' IList<string>> dict = new SortHelpers.ReadOnlySingleBucketDictionary<string' IList<string>>(new KeyValuePair<string' IList<string>>("Bucket1"' bucket)); " is 203.
Long Statement,NLog.UnitTests.Internal,SortHelpersTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\SortHelpersTests.cs,SingleBucketDictionary_OneBucketTwoItemsTest,The length of the statement  "            SortHelpers.ReadOnlySingleBucketDictionary<string' IList<string>> dict = new SortHelpers.ReadOnlySingleBucketDictionary<string' IList<string>>(new KeyValuePair<string' IList<string>>("Bucket1"' bucket)); " is 203.
Long Statement,NLog.UnitTests.Internal,SortHelpersTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\SortHelpersTests.cs,SingleBucketDictionary_TwoBucketEmptyTest,The length of the statement  "            SortHelpers.ReadOnlySingleBucketDictionary<string' IList<string>> dict = new SortHelpers.ReadOnlySingleBucketDictionary<string' IList<string>>(buckets); " is 152.
Long Statement,NLog.UnitTests.Internal,SortHelpersTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\SortHelpersTests.cs,SingleBucketDictionary_TwoBuckettOneItemTest,The length of the statement  "            SortHelpers.ReadOnlySingleBucketDictionary<string' IList<string>> dict = new SortHelpers.ReadOnlySingleBucketDictionary<string' IList<string>>(buckets); " is 152.
Long Statement,NLog.UnitTests.Internal,StringBuilderPoolTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\StringBuilderPoolTests.cs,StringBuilderPoolMaxCapacityTest,The length of the statement  "            RecursiveAcquirePoolItems(poolItemCount' pool' mediumPayload' false);       // Verify fast-pool + slow-pool has kept their capacity " is 131.
Long Statement,NLog.UnitTests.Internal,UrlHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\UrlHelperTests.cs,UrlEncodeTest,The length of the statement  "            SimpleLayout l = spaceAsPlus ? "${url-encode:escapeDataNLogLegacy=true:${message}}" : "${url-encode:escapeDataNLogLegacy=true:spaceAsPlus=false:${message}}"; " is 157.
Long Statement,NLog.UnitTests.Internal,UrlHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\UrlHelperTests.cs,EscapeDataEncodeTestRfc2396,The length of the statement  "            UrlHelper.EscapeEncodingOptions encodingOptions = UrlHelper.EscapeEncodingOptions.LowerCaseHex | UrlHelper.EscapeEncodingOptions.LegacyRfc2396 | UrlHelper.EscapeEncodingOptions.UriString; " is 187.
Long Statement,NLog.UnitTests.Internal.FileAppenders,FileAppenderCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\FileAppenders\FileAppenderCacheTests.cs,FileAppenderCache_GetFileCharacteristics_Multi,The length of the statement  "            ICreateFileParameters fileTarget = new FileTarget() { ArchiveNumbering = ArchiveNumberingMode.Date' ForceManaged = true }; " is 122.
Long Statement,NLog.UnitTests.Internal.FileAppenders,FileAppenderCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\FileAppenders\FileAppenderCacheTests.cs,FileAppenderCache_GetFileCharacteristics,The length of the statement  "            Assert.True(fileCreationTimeUtc > Time.TimeSource.Current.FromSystemTime(DateTime.UtcNow.AddMinutes(-2))'"creationtime is wrong"); " is 130.
Long Statement,NLog.UnitTests.Internal.NetworkSenders,HttpNetworkSenderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\NetworkSenders\HttpNetworkSenderTests.cs,HttpNetworkSenderViaNetworkTargetRecoveryTest,The length of the statement  "            networkSenderFactoryMock.Received(1).Create("http://test.with.mock"' 0' SslProtocols.None' new TimeSpan()); // Only created one HttpNetworkSender " is 145.
Long Statement,NLog.UnitTests.Internal.NetworkSenders,MockSocket,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\NetworkSenders\TcpNetworkSenderTests.cs,SendAsync,The length of the statement  "                    log.WriteLine("send async {0} {1} '{2}'"' args.Offset' args.Count' Encoding.UTF8.GetString(args.Buffer' args.Offset' args.Count)); " is 130.
Long Statement,NLog.UnitTests.Internal.NetworkSenders,MockSocket,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\NetworkSenders\TcpNetworkSenderTests.cs,SendToAsync,The length of the statement  "                    log.WriteLine("sendto async {0} {1} '{2}' {3}"' args.Offset' args.Count' Encoding.UTF8.GetString(args.Buffer' args.Offset' args.Count)' args.RemoteEndPoint); " is 157.
Long Statement,NLog.UnitTests.LayoutRenderers,AppSettingTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\AppSettingTests.cs,UseConnectionStringTest,The length of the statement  "            configurationManager.ConnectionStrings["myConnection"] = new ConnectionStringSettings() { ConnectionString = expected }; " is 120.
Long Statement,NLog.UnitTests.LayoutRenderers,AssemblyVersionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Assemblies and appdomains\AssemblyVersionTests.cs,AssemblyVersionTypeTest,The length of the statement  "                <targets><target name='debug' type='Debug' layout='${message:withException=true}|${assembly-version:type=" + type.ToString().ToLower() + @"}' /></targets> " is 154.
Long Statement,NLog.UnitTests.LayoutRenderers,AssemblyVersionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Assemblies and appdomains\AssemblyVersionTests.cs,AssemblyVersionFormatAndTypeTest,The length of the statement  "                <targets><target name='debug' type='Debug' layout='${message:withException=true}|${assembly-version:type=" + type.ToString().ToLower() + @":format=" + format + @"}' /></targets> " is 177.
Long Statement,NLog.UnitTests.LayoutRenderers,AssemblyVersionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Assemblies and appdomains\AssemblyVersionTests.cs,GenerateTestAssembly,The length of the statement  "                            var entryAssemblyField = manager.GetType().GetField(""m_entryAssembly""' BindingFlags.Instance | BindingFlags.NonPublic); " is 121.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteFileNameLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteFileNameLayoutTests.cs,ShowFileNameOnlyTest,The length of the statement  "                <targets><target name='debug' type='Debug' layout='${callsite-filename:includeSourcePath=False}|${message}' /></targets> " is 120.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteFileNameLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteFileNameLayoutTests.cs,ShowFileNameOnlyAsyncTest,The length of the statement  "                <targets><target name='debug' type='Debug' layout='${callsite-filename:includeSourcePath=False}|${message}' /></targets> " is 120.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteLineNumberTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteLineNumberTests.cs,LineNumberOnlyTest,The length of the statement  "            Assert.True(lastMessage.IndexOf(linenumber.ToString()' StringComparison.OrdinalIgnoreCase) == 0' "Invalid line number. Expected prefix of 10000' got: " + lastMessage); " is 167.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,LineNumberTest,The length of the statement  "            Assert.True(lastMessage.IndexOf("callsitetests.cs:" + linenumber' StringComparison.OrdinalIgnoreCase) >= 0' "Invalid line number. Expected prefix of 10000' got: " + lastMessage); " is 178.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,ClassNameTestWithoutNamespace,The length of the statement  "                <targets><target name='debug' type='Debug' layout='${callsite:classname=true:methodname=false:includeNamespace=false} ${message}' /></targets> " is 142.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,ClassNameTestWithOverride,The length of the statement  "                <targets><target name='debug' type='Debug' layout='${callsite:classname=true:methodname=false:includeNamespace=false} ${message}' /></targets> " is 142.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,ClassNameWithPaddingTestPadLeftAlignLeftTest,The length of the statement  "                <targets><target name='debug' type='Debug' layout='${callsite:classname=true:methodname=false:padding=3:fixedlength=true} ${message}' /></targets> " is 146.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,ClassNameWithPaddingTestPadLeftAlignRightTest,The length of the statement  "                <targets><target name='debug' type='Debug' layout='${callsite:classname=true:methodname=false:padding=3:fixedlength=true:alignmentOnTruncation=right} ${message}' /></targets> " is 174.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,ClassNameWithPaddingTestPadRightAlignLeftTest,The length of the statement  "                <targets><target name='debug' type='Debug' layout='${callsite:classname=true:methodname=false:padding=-3:fixedlength=true:alignmentOnTruncation=left} ${message}' /></targets> " is 174.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,ClassNameWithPaddingTestPadRightAlignRightTest,The length of the statement  "                <targets><target name='debug' type='Debug' layout='${callsite:classname=true:methodname=false:padding=-3:fixedlength=true:alignmentOnTruncation=right} ${message}' /></targets> " is 175.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,MethodNameWithPaddingTestPadLeftAlignLeftTest,The length of the statement  "                <targets><target name='debug' type='Debug' layout='${callsite:classname=false:methodname=true:padding=16:fixedlength=true} ${message}' /></targets> " is 147.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,MethodNameWithPaddingTestPadLeftAlignRightTest,The length of the statement  "                <targets><target name='debug' type='Debug' layout='${callsite:classname=false:methodname=true:padding=16:fixedlength=true:alignmentOnTruncation=right} ${message}' /></targets> " is 175.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,MethodNameWithPaddingTestPadRightAlignLeftTest,The length of the statement  "                <targets><target name='debug' type='Debug' layout='${callsite:classname=false:methodname=true:padding=-16:fixedlength=true:alignmentOnTruncation=left} ${message}' /></targets> " is 175.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,MethodNameWithPaddingTestPadRightAlignRightTest,The length of the statement  "                <targets><target name='debug' type='Debug' layout='${callsite:classname=false:methodname=true:padding=-16:fixedlength=true:alignmentOnTruncation=right} ${message}' /></targets> " is 176.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,GivenSkipFrameNotDefined_WhenLogging_ThenLogFirstUserStackFrame,The length of the statement  "            AssertDebugLastMessage("debug"' "NLog.UnitTests.LayoutRenderers.CallSiteTests.GivenSkipFrameNotDefined_WhenLogging_ThenLogFirstUserStackFrame msg"); " is 148.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,GivenOneSkipFrameDefined_WhenLogging_ShouldSkipOneUserStackFrame,The length of the statement  "            AssertDebugLastMessage("debug"' "NLog.UnitTests.LayoutRenderers.CallSiteTests.GivenOneSkipFrameDefined_WhenLogging_ShouldSkipOneUserStackFrame msg"); " is 149.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,CleanMethodNamesOfAnonymousDelegatesTest,The length of the statement  "                    <targets><target name='debug' type='Debug' layout='${callsite:ClassName=false:CleanNamesOfAnonymousDelegates=true}' /></targets> " is 128.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,DontCleanMethodNamesOfAnonymousDelegatesTest,The length of the statement  "                    <targets><target name='debug' type='Debug' layout='${callsite:ClassName=false:CleanNamesOfAnonymousDelegates=false}' /></targets> " is 129.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,CleanClassNamesOfAnonymousDelegatesTest,The length of the statement  "                    <targets><target name='debug' type='Debug' layout='${callsite:ClassName=true:MethodName=false:CleanNamesOfAnonymousDelegates=true}' /></targets> " is 144.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,DontCleanClassNamesOfAnonymousDelegatesTest,The length of the statement  "                    <targets><target name='debug' type='Debug' layout='${callsite:ClassName=true:MethodName=false:CleanNamesOfAnonymousDelegates=false}' /></targets> " is 145.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,When_NotIncludeNameSpace_Then_CleanAnonymousDelegateClassNameShouldReturnParentClassName,The length of the statement  "                    <targets><target name='debug' type='Debug' layout='${callsite:ClassName=true:MethodName=false:IncludeNamespace=false:CleanNamesOfAnonymousDelegates=true}' /></targets> " is 167.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,When_Wrapped_Ignore_Wrapper_Methods_In_Callstack,The length of the statement  "            const string currentMethodFullName = "NLog.UnitTests.LayoutRenderers.CallSiteTests.When_Wrapped_Ignore_Wrapper_Methods_In_Callstack"; " is 133.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,CheckStackTraceUsageForTwoRules_chained,The length of the statement  "            AssertDebugLastMessage("debug2"' "NLog.UnitTests.LayoutRenderers.CallSiteTests.CheckStackTraceUsageForTwoRules_chained msg"); " is 125.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,CheckStackTraceUsageForMultipleRules,The length of the statement  "            AssertDebugLastMessage("debug2"' "NLog.UnitTests.LayoutRenderers.CallSiteTests.CheckStackTraceUsageForMultipleRules msg"); " is 122.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,When_WrappedInCompsition_Ignore_Wrapper_Methods_In_Callstack,The length of the statement  "            const string currentMethodFullName = "NLog.UnitTests.LayoutRenderers.CallSiteTests.When_WrappedInCompsition_Ignore_Wrapper_Methods_In_Callstack"; " is 145.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,Show_correct_filename_with_async,The length of the statement  "               <targets><target name='debug' type='Debug' layout='${callsite:className=False:fileName=True:includeSourcePath=False:methodName=False}|${message}' /></targets> " is 158.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,LogAfterTaskRunAwait_CleanNamesOfAsyncContinuationsIsTrue_ShouldCleanMethodName,The length of the statement  "            const string callsiteMethodName = nameof(LogAfterTaskRunAwait_CleanNamesOfAsyncContinuationsIsTrue_ShouldCleanMethodName); " is 122.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,LogAfterTaskRunAwait_CleanNamesOfAsyncContinuationsIsTrue_ShouldCleanMethodName,The length of the statement  "                    <targets><target name='debug' type='Debug' layout='${callsite:classname=false:cleannamesofasynccontinuations=true}' /></targets> " is 128.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,LogAfterTaskRunAwait_CleanNamesOfAsyncContinuationsIsTrue_ShouldCleanClassName,The length of the statement  "            string callsiteMethodFullName = $"{GetType()}.{nameof(LogAfterTaskRunAwait_CleanNamesOfAsyncContinuationsIsTrue_ShouldCleanClassName)}"; " is 136.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,LogAfterTaskRunAwait_CleanNamesOfAsyncContinuationsIsTrue_ShouldCleanClassName,The length of the statement  "                    <targets><target name='debug' type='Debug' layout='${callsite:classname=true:includenamespace=true:cleannamesofasynccontinuations=true:cleanNamesOfAnonymousDelegates=true}' /></targets> " is 185.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,LogAfterTaskRunAwait_CleanNamesOfAsyncContinuationsIsFalse_ShouldNotCleanNames,The length of the statement  "                    <targets><target name='debug' type='Debug' layout='${callsite:includenamespace=true:cleannamesofasynccontinuations=false}' /></targets> " is 135.
Long Statement,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,CallsiteTargetUsesStackTraceTest,The length of the statement  "            var target = new MyTarget() { StackTraceUsage = includeStackTraceUsage ? StackTraceUsage.WithStackTrace : StackTraceUsage.None }; " is 129.
Long Statement,NLog.UnitTests.LayoutRenderers,StackTraceRendererTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\StackTraceRendererTests.cs,RenderStackTrace,The length of the statement  "            AssertDebugLastMessageContains("debug"' " => StackTraceRendererTests.RenderStackTrace => StackTraceRendererTests.RenderMe"); " is 124.
Long Statement,NLog.UnitTests.LayoutRenderers,StackTraceRendererTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\StackTraceRendererTests.cs,RenderStackTrace_topframes,The length of the statement  "            AssertDebugLastMessage("debug"' "I am: StackTraceRendererTests.RenderStackTrace_topframes => StackTraceRendererTests.RenderMe"); " is 128.
Long Statement,NLog.UnitTests.LayoutRenderers,StackTraceRendererTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\StackTraceRendererTests.cs,RenderStackTrace_DetailedFlat,The length of the statement  "            AssertDebugLastMessageContains("debug"' " => [Void RenderStackTrace_DetailedFlat()] => [Void RenderMe(System.String)]"); " is 120.
Long Statement,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTop1TestTest,The length of the statement  "            Assert.Null(NestedDiagnosticsLogicalContext.Pop()); //inconsistent with NDC - should be string.empty' but for backwardsscomp. Fix in NLog 5 " is 139.
Long Statement,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTop1TestTest,The length of the statement  "            Assert.Null(NestedDiagnosticsLogicalContext.Pop()); //inconsistent with NDC - should be string.empty' but for backwardsscomp. Fix in NLog 5 " is 139.
Long Statement,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The length of the statement  "                <targets><target name='debug' type='Debug' layout='${ndlc}|${ndlctiming:CurrentScope=false:ScopeBeginTime=true:Format=yyyy-MM-dd HH\:mm\:ss}|${ndlctiming:CurrentScope=false:ScopeBeginTime=false:Format=fff}|${ndlctiming:CurrentScope=true:ScopeBeginTime=true:Format=HH\:mm\:ss.fff}|${ndlctiming:CurrentScope=true:ScopeBeginTime=false:Format=fffffff}|${message}' /></targets> " is 372.
Long Statement,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCAsyncLogging,The length of the statement  "                task = System.Threading.Tasks.Task.Run(async () => { await System.Threading.Tasks.Task.Delay(50); LogManager.GetLogger("B").Debug("b"); }); " is 139.
Long Statement,NLog.UnitTests.LayoutRenderers,CounterTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Counters\CounterTests.cs,LayoutCounterTest,The length of the statement  "                <targets><target name='debug' type='Debug' layout='${message} ${counter:sequence=${event-context:item=context1}} ${counter}' /></targets> " is 137.
Long Statement,NLog.UnitTests.LayoutRenderers,SequenceIdLayoutRendererTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Counters\SequenceIdLayoutRendererTest.cs,RenderSequenceIdLayoutRenderer,The length of the statement  "            AssertLayoutRendererOutput("${sequenceid}"' logEventInfo' logEventInfo.SequenceID.ToString(CultureInfo.InvariantCulture)); " is 122.
Long Statement,NLog.UnitTests.LayoutRenderers,DateTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\DateTests.cs,DefaultDateTest,The length of the statement  "            DateTime dt = DateTime.ParseExact(GetDebugLastMessage("debug")' "yyyy/MM/dd HH:mm:ss.fff"' CultureInfo.InvariantCulture); " is 121.
Long Statement,NLog.UnitTests.LayoutRenderers,LongDateTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\LongDateTests.cs,UniversalTimeTest,The length of the statement  "            Assert.Equal(ei.TimeStamp.ToUniversalTime().ToString("yyyy-MM-dd HH:mm:ss.ffff"' CultureInfo.InvariantCulture)' dt.Render(ei)); " is 127.
Long Statement,NLog.UnitTests.LayoutRenderers,LongDateTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\LongDateTests.cs,LongDateWithPaddingPadLeftAlignRight,The length of the statement  "                <targets><target name='debug' type='Debug' layout='${longdate:padding=5:fixedlength=true:alignmentOnTruncation=right}' /></targets> " is 131.
Long Statement,NLog.UnitTests.LayoutRenderers,LongDateTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\LongDateTests.cs,LongDateWithPaddingPadRightAlignLeft,The length of the statement  "                <targets><target name='debug' type='Debug' layout='${longdate:padding=-5:fixedlength=true:alignmentOnTruncation=left}' /></targets> " is 131.
Long Statement,NLog.UnitTests.LayoutRenderers,LongDateTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\LongDateTests.cs,LongDateWithPaddingPadRightAlignRight,The length of the statement  "                <targets><target name='debug' type='Debug' layout='${longdate:padding=-5:fixedlength=true:alignmentOnTruncation=right}' /></targets> " is 132.
Long Statement,NLog.UnitTests.LayoutRenderers,TimeTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\TimeTests.cs,LongDateWithPaddingPadLeftAlignRight,The length of the statement  "                <targets><target name='debug' type='Debug' layout='${longdate:padding=5:fixedlength=true:alignmentOnTruncation=right}' /></targets> " is 131.
Long Statement,NLog.UnitTests.LayoutRenderers,TimeTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\TimeTests.cs,LongDateWithPaddingPadRightAlignLeft,The length of the statement  "                <targets><target name='debug' type='Debug' layout='${longdate:padding=-5:fixedlength=true:alignmentOnTruncation=left}' /></targets> " is 131.
Long Statement,NLog.UnitTests.LayoutRenderers,TimeTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\TimeTests.cs,LongDateWithPaddingPadRightAlignRight,The length of the statement  "                <targets><target name='debug' type='Debug' layout='${longdate:padding=-5:fixedlength=true:alignmentOnTruncation=right}' /></targets> " is 132.
Long Statement,NLog.UnitTests.LayoutRenderers,BaseDirTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Directories\BaseDirTests.cs,BaseDir_FixTempDir_ChoosesProcessDir,The length of the statement  "                AssertLayoutRendererOutput("${basedir:fixtempdir=true}"' Path.GetDirectoryName(System.Diagnostics.Process.GetCurrentProcess().MainModule.FileName)); " is 148.
Long Statement,NLog.UnitTests.LayoutRenderers,SpecialFolderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Directories\SpecialFolderTests.cs,SpecialFolderDirFileCombineTest,The length of the statement  "            AssertLayoutRendererOutput($"${{specialfolder:folder={sysDirString}:dir=aaa:file=bbb.txt}}"' Path.Combine(sysDir' "aaa"' "bbb.txt")); " is 133.
Long Statement,NLog.UnitTests.LayoutRenderers,TempDirRendererTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Directories\TempDirRendererTests.cs,RenderTempDir_with_file_and_dir,The length of the statement  "            Assert.Equal(Path.Combine(Path.Combine(Path.GetTempPath()' "test" + Path.DirectorySeparatorChar)' "file1.txt")' actual); " is 120.
Long Statement,NLog.UnitTests.LayoutRenderers,ExceptionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\ExceptionTests.cs,CustomInnerExceptionTest,The length of the statement  "                    <target name='debug1' type='Debug' layout='${exception:format=shorttype'message:maxInnerExceptionLevel=1:innerExceptionSeparator=&#13;&#10;----INNER----&#13;&#10;:innerFormat=type'message}' /> " is 192.
Long Statement,NLog.UnitTests.LayoutRenderers,ExceptionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\ExceptionTests.cs,CustomInnerExceptionTest,The length of the statement  "                    <target name='debug2' type='Debug' layout='${exception:format=shorttype'message:maxInnerExceptionLevel=1:innerExceptionSeparator=&#13;&#10;----INNER----&#13;&#10;:innerFormat=type'message'data}' /> " is 197.
Long Statement,NLog.UnitTests.LayoutRenderers,ExceptionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\ExceptionTests.cs,AggregateExceptionMultiTest,The length of the statement  "            var task1 = System.Threading.Tasks.Task.Factory.StartNew(() => { throw new Exception("Test exception 1"' new Exception("Test Inner 1")); }' " is 139.
Long Statement,NLog.UnitTests.LayoutRenderers,ExceptionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\ExceptionTests.cs,AggregateExceptionMultiTest,The length of the statement  "                System.Threading.CancellationToken.None' System.Threading.Tasks.TaskCreationOptions.None' System.Threading.Tasks.TaskScheduler.Default); " is 136.
Long Statement,NLog.UnitTests.LayoutRenderers,ExceptionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\ExceptionTests.cs,AggregateExceptionMultiTest,The length of the statement  "            var task2 = System.Threading.Tasks.Task.Factory.StartNew(() => { throw new Exception("Test exception 2"' new Exception("Test Inner 2")); }' " is 139.
Long Statement,NLog.UnitTests.LayoutRenderers,ExceptionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\ExceptionTests.cs,AggregateExceptionMultiTest,The length of the statement  "                System.Threading.CancellationToken.None' System.Threading.Tasks.TaskCreationOptions.None' System.Threading.Tasks.TaskScheduler.Default); " is 136.
Long Statement,NLog.UnitTests.LayoutRenderers,ExceptionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\ExceptionTests.cs,AggregateExceptionSingleTest,The length of the statement  "            var task1 = System.Threading.Tasks.Task.Factory.StartNew(() => { throw new Exception("Test exception 1"' new Exception("Test Inner 1")); }' " is 139.
Long Statement,NLog.UnitTests.LayoutRenderers,ExceptionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\ExceptionTests.cs,AggregateExceptionSingleTest,The length of the statement  "                System.Threading.CancellationToken.None' System.Threading.Tasks.TaskCreationOptions.None' System.Threading.Tasks.TaskScheduler.Default); " is 136.
Long Statement,NLog.UnitTests.LayoutRenderers,ExceptionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\ExceptionTests.cs,SetConfigurationForExceptionUsingRootMethodTests,The length of the statement  "                    <target name='debug1' type='Debug' layout='${level:uppercase=true}*${message}*${exception:format=message'shorttype:separator=*}' /> " is 131.
Long Statement,NLog.UnitTests.LayoutRenderers,ExceptionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\ExceptionTests.cs,InnerExceptionTestAPI,The length of the statement  "                    <target name='debug1' type='Debug' layout='${exception:format=shorttype'message:maxInnerExceptionLevel=3:innerFormat=message}' /> " is 129.
Long Statement,NLog.UnitTests.LayoutRenderers,ExceptionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\ExceptionTests.cs,CustomExceptionLayoutRendrerInnerExceptionTest,The length of the statement  "            ConfigurationItemFactory.Default.LayoutRenderers.RegisterDefinition("exception-custom"' typeof(CustomExceptionLayoutRendrer)); " is 126.
Long Statement,NLog.UnitTests.LayoutRenderers,ExceptionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\ExceptionTests.cs,CustomExceptionLayoutRendrerInnerExceptionTest,The length of the statement  "                    <target name='debug1' type='Debug' layout='${exception-custom:format=shorttype'message:maxInnerExceptionLevel=1:innerExceptionSeparator=&#13;&#10;----INNER----&#13;&#10;:innerFormat=type'message}' /> " is 199.
Long Statement,NLog.UnitTests.LayoutRenderers,ExceptionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\ExceptionTests.cs,CustomExceptionLayoutRendrerInnerExceptionTest,The length of the statement  "                    <target name='debug2' type='Debug' layout='${exception-custom:format=shorttype'message:maxInnerExceptionLevel=1:innerExceptionSeparator=&#13;&#10;----INNER----&#13;&#10;:innerFormat=type'message'data}' /> " is 204.
Long Statement,NLog.UnitTests.LayoutRenderers,ExceptionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\ExceptionTests.cs,CustomExceptionLayoutRendrerInnerExceptionTest,The length of the statement  "                                                           "System.ArgumentException Wrapper1" + "\r\ncustom-exception-renderer " + ExceptionDataFormat' exceptionDataKey' exceptionDataValue + "\r\ncustom-exception-renderer-data")); " is 172.
Long Statement,NLog.UnitTests.LayoutRenderers,ExceptionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\ExceptionTests.cs,ExceptionDataWithDifferentSeparators,The length of the statement  "            AssertDebugLastMessage("debug1"' string.Format(ExceptionDataFormat' exceptionDataKey1' exceptionDataValue1) + defaultExceptionDataSeparator + string.Format(ExceptionDataFormat' exceptionDataKey2' exceptionDataValue2)); " is 218.
Long Statement,NLog.UnitTests.LayoutRenderers,ExceptionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\ExceptionTests.cs,ExceptionDataWithDifferentSeparators,The length of the statement  "            AssertDebugLastMessage("debug2"' string.Format(ExceptionDataFormat' exceptionDataKey1' exceptionDataValue1) + "*" + string.Format(ExceptionDataFormat' exceptionDataKey2' exceptionDataValue2)); " is 192.
Long Statement,NLog.UnitTests.LayoutRenderers,ExceptionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\ExceptionTests.cs,ExceptionDataWithDifferentSeparators,The length of the statement  "            AssertDebugLastMessage("debug3"' string.Format(ExceptionDataFormat' exceptionDataKey1' exceptionDataValue1) + "## **" + string.Format(ExceptionDataFormat' exceptionDataKey2' exceptionDataValue2)); " is 196.
Long Statement,NLog.UnitTests.LayoutRenderers,ExceptionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\ExceptionTests.cs,ExceptionDataWithNewLineSeparator,The length of the statement  "                    <target name='debug3' type='Debug' layout='${exception:format=data:ExceptionDataSeparator=&#13;&#10;----DATA----&#13;&#10;}' /> " is 127.
Long Statement,NLog.UnitTests.LayoutRenderers,ExceptionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\ExceptionTests.cs,ExceptionDataWithNewLineSeparator,The length of the statement  "            AssertDebugLastMessage("debug1"' string.Format(ExceptionDataFormat' exceptionDataKey1' exceptionDataValue1) + "\r\n" + string.Format(ExceptionDataFormat' exceptionDataKey2' exceptionDataValue2)); " is 195.
Long Statement,NLog.UnitTests.LayoutRenderers,ExceptionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\ExceptionTests.cs,ExceptionDataWithNewLineSeparator,The length of the statement  "            AssertDebugLastMessage("debug2"' string.Format(ExceptionDataFormat' exceptionDataKey1' exceptionDataValue1) + "\r\n----DATA----\r\n" + string.Format(ExceptionDataFormat' exceptionDataKey2' exceptionDataValue2)); " is 211.
Long Statement,NLog.UnitTests.LayoutRenderers,ExceptionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\ExceptionTests.cs,ExceptionDataWithNewLineSeparator,The length of the statement  "            AssertDebugLastMessage("debug3"' string.Format(ExceptionDataFormat' exceptionDataKey1' exceptionDataValue1) + "\r\n----DATA----\r\n" + string.Format(ExceptionDataFormat' exceptionDataKey2' exceptionDataValue2)); " is 211.
Long Statement,NLog.UnitTests.LayoutRenderers,ExceptionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\ExceptionTests.cs,ExceptionWithSeparatorForExistingRender,The length of the statement  "            AssertDebugLastMessage("debug1"' string.Format(ExceptionDataFormat' ex.GetType().FullName' exceptionMessage) + "\r\nXXX" + string.Format(ExceptionDataFormat' exceptionDataKey1' exceptionDataValue1)); " is 199.
Long Statement,NLog.UnitTests.LayoutRenderers,IdentityTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\IdentityTests.cs,IdentityTest1,The length of the statement  "            Thread.CurrentPrincipal = new GenericPrincipal(new GenericIdentity("SOMEDOMAIN\\SomeUser"' "CustomAuth")' new[] { "Role1"' "Role2" }); " is 134.
Long Statement,NLog.UnitTests.LayoutRenderers,IdentityTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\IdentityTests.cs,IdentityTest1Async,The length of the statement  "                    Thread.CurrentPrincipal = new GenericPrincipal(new GenericIdentity("SOMEDOMAIN\\SomeUser"' "CustomAuth")' new[] { "Role1"' "Role2" }); " is 134.
Long Statement,NLog.UnitTests.LayoutRenderers,LocalIpAddressLayoutRendererTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\LocalIpAddressLayoutRendererTests.cs,LocalIpAddress_CurrentMachine_NotEmpty,The length of the statement  "                Console.WriteLine("[SKIP] NetworkIpAddressLayoutRendererTests.LocalIpAddress_CurrentMachine_NotEmpty because we are running in Travis"); " is 136.
Long Statement,NLog.UnitTests.LayoutRenderers,NetworkInterfaceRetrieverBuilder,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\LocalIpAddressLayoutRendererTests.cs,BuildAllNetworkInterfaces,The length of the statement  "                    var networkInterfaceMock = BuildNetworkInterfaceMock(ips' networkInterface.mac' networkInterface.networkInterfaceType' networkInterface.status); " is 144.
Long Statement,NLog.UnitTests.LayoutRenderers,Log4JXmlTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Log4JXmlTests.cs,Log4JXmlTest,The length of the statement  "                    <target name='debug' type='Debug' layout='${log4jxmlevent:includeCallSite=true:includeSourceInfo=true:includeNdlc=true:includeMdc=true:IncludeNdc=true:includeMdlc=true:IncludeAllProperties=true:ndcItemSeparator=\:\::includenlogdata=true:loggerName=${logger}}' /> " is 262.
Long Statement,NLog.UnitTests.LayoutRenderers,Log4JXmlTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Log4JXmlTests.cs,Log4JXmlTest,The length of the statement  "            var logEventInfo = LogEventInfo.Create(LogLevel.Debug' "A"' new Exception("Hello Exception"' new Exception("Goodbye Exception"))' null' "some message"); " is 152.
Long Statement,NLog.UnitTests.LayoutRenderers,Log4JXmlTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Log4JXmlTests.cs,Log4JXmlTest,The length of the statement  "            string wrappedResult = "<log4j:dummyRoot xmlns:log4j='http://log4j' xmlns:nlog='http://nlog'>" + result + "</log4j:dummyRoot>"; " is 127.
Long Statement,NLog.UnitTests.LayoutRenderers,Log4JXmlTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Log4JXmlTests.cs,Log4JXmlEventLayoutParameterTest,The length of the statement  "            Assert.Equal($"<log4j:event logger=\"MyLOgger\" level=\"INFO\" timestamp=\"1262349296000\" thread=\"{threadid}\"><log4j:message>hello' world</log4j:message><log4j:properties><log4j:data name=\"mt\" value=\"hello' {{0}}\" /><log4j:data name=\"log4japp\" value=\"MyApp\" /><log4j:data name=\"log4jmachinename\" value=\"{machinename}\" /></log4j:properties></log4j:event>"' log4jLayout.Render(logEventInfo));  " is 405.
Long Statement,NLog.UnitTests.LayoutRenderers,PerformanceCounterLayoutRendererTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Machine\PerformanceCounterLayoutRendererTests.cs,PerformanceCounterLayoutRendererTest,The length of the statement  "                <targets><target name='debug' type='Debug' layout='${performancecounter:category=Process:counter=Working Set:format=F0:MachineName=}' /></targets> " is 146.
Long Statement,NLog.UnitTests.LayoutRenderers,RegistryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Machine\RegistryTests.cs,RegistryNamedValueTest_hive32,The length of the statement  "                <targets><target name='debug' type='Debug' layout='${registry:key=HKCU\\Software\\NLogTest:value=view32:view=Registry32}' /></targets> " is 134.
Long Statement,NLog.UnitTests.LayoutRenderers,RegistryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Machine\RegistryTests.cs,RegistryNamedValueTest_hive64,The length of the statement  "                <targets><target name='debug' type='Debug' layout='${registry:key=HKCU\\Software\\NLogTest:value=view64:view=Registry64}' /></targets> " is 134.
Long Statement,NLog.UnitTests.LayoutRenderers,RegistryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Machine\RegistryTests.cs,RegistryKeyNotFoundTest,The length of the statement  "                <targets><target name='debug' type='Debug' layout='${registry:key=HKCU\\Software\\NoSuchKey:defaultValue=xyz}' /></targets> " is 123.
Long Statement,NLog.UnitTests.LayoutRenderers,RegistryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Machine\RegistryTests.cs,RegistryKeyNotFoundTest_forward_slash,The length of the statement  "                <targets><target name='debug' type='Debug' layout='${registry:key=HKCU/Software/NoSuchKey:defaultValue=xyz}' /></targets> " is 121.
Long Statement,NLog.UnitTests.LayoutRenderers,RegistryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Machine\RegistryTests.cs,RegistryValueNotFoundTest,The length of the statement  "                <targets><target name='debug' type='Debug' layout='${registry:key=HKCU\\Software\\NLogTest:value=NoSuchValue:defaultValue=xyz}' /></targets> " is 140.
Long Statement,NLog.UnitTests.LayoutRenderers,RegistryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Machine\RegistryTests.cs,RegistryDefaultValueTest_with_foward_slash2,The length of the statement  "                AssertLayoutRendererOutput("${registry:value=NOT_EXISTENT:key=HKLM/NOT_EXISTENT:defaultValue=C\\temp:requireEscapingSlashesInDefaultValue=false}"' " is 146.
Long Statement,NLog.UnitTests.LayoutRenderers,RegistryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Machine\RegistryTests.cs,RegistryTestWrongKey_ex,The length of the statement  "                () => { AssertLayoutRendererOutput("${registry:value=NOT_EXISTENT:key=garabageHKLM/NOT_EXISTENT:defaultValue=empty}"' ""); }); " is 126.
Long Statement,NLog.UnitTests.LayoutRenderers,MessageTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\MessageTests.cs,MessageFixedLengthRightPaddingRightAlignmentTest,The length of the statement  "                <targets><target name='debug' type='Debug' layout='${message:padding=3:fixedlength=true:alignmentOnTruncation=right}' /></targets> " is 130.
Long Statement,NLog.UnitTests.LayoutRenderers,MessageTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\MessageTests.cs,MessageFixedLengthLeftPaddingRightAlignmentTest,The length of the statement  "                <targets><target name='debug' type='Debug' layout='${message:padding=-3:padcharacter=x:fixedlength=true:alignmentOnTruncation=right}' /></targets> " is 146.
Long Statement,NLog.UnitTests.LayoutRenderers,ProcessNameLayoutRendererTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Processes\ProcessNameLayoutRendererTests.cs,RenderProcessNameLayoutRenderer,The length of the statement  "            var allowedProcessNames = new List<string> {"vstest.executionengine"' "xunit"' "mono-sgen"' "dotnet"' "testhost.x86"' "testhost.x64" }; " is 135.
Long Statement,NLog.UnitTests.LayoutRenderers,Rot13Tests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Wrappers\Encodings\Rot13Tests.cs,Test1,The length of the statement  "            Assert.Equal("How can you tell an extrovert from an introvert at NSA? Va gur ryringbef' gur rkgebiregf ybbx ng gur BGURE thl'f fubrf."' " is 135.
Long Statement,NLog.UnitTests.LayoutRenderers,Rot13Tests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Wrappers\Encodings\Rot13Tests.cs,Test1,The length of the statement  "                            "Ubj pna lbh gryy na rkgebireg sebz na vagebireg ng AFN? In the elevators' the extroverts look at the OTHER guy's shoes.")); " is 124.
Long Statement,NLog.UnitTests.Layouts,CompoundLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CompoundLayoutTests.cs,CodeCompoundLayoutIsRenderedCorrectly,The length of the statement  "            const string expected = "Long date - 2010-01-20 12:34:56.0000|Before| { \"short date\": \"2010-01-20\"' \"message\": \"hello' world\" } |After|Last - Info"; " is 156.
Long Statement,NLog.UnitTests.Layouts,CompoundLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CompoundLayoutTests.cs,XmlCompoundLayoutIsRenderedCorrectly,The length of the statement  "            const string expected = "Long date - 2010-01-20 12:34:56.0000|Before| { \"short date\": \"2010-01-20\"' \"message\": \"hello' world\" } |After|Last - Info"; " is 156.
Long Statement,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,JsonLayoutRendering,The length of the statement  "            Assert.Equal("{ \"date\": \"2010-01-01 12:34:56.0000\"' \"level\": \"Info\"' \"message\": \"hello' world\" }"' jsonLayout.Render(logEventInfo)); " is 144.
Long Statement,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,JsonLayoutRenderingNoSpaces,The length of the statement  "            Assert.Equal("{\"date\":\"2010-01-01 12:34:56.0000\"'\"level\":\"Info\"'\"message\":\"hello' world\"}"' jsonLayout.Render(logEventInfo)); " is 137.
Long Statement,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,JsonLayoutRenderingAndEncodingSpecialCharacters,The length of the statement  "            Assert.Equal("{ \"date\": \"2010-01-01 12:34:56.0000\"' \"level\": \"Info\"' \"message\": \"\\\"hello' world\\\"\" }"' jsonLayout.Render(logEventInfo)); " is 152.
Long Statement,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,JsonLayoutRenderingAndEncodingLineBreaks,The length of the statement  "            Assert.Equal("{ \"date\": \"2010-01-01 12:34:56.0000\"' \"level\": \"Info\"' \"message\": \"hello'\\n\\r world\" }"' jsonLayout.Render(logEventInfo)); " is 150.
Long Statement,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,JsonLayoutRenderingAndNotEncodingMessageAttribute,The length of the statement  "            Assert.Equal("{ \"date\": \"2010-01-01 12:34:56.0000\"' \"level\": \"Info\"' \"message\": { \"hello\" : \"world\" } }"' jsonLayout.Render(logEventInfo)); " is 153.
Long Statement,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,JsonLayoutRenderingAndEncodingMessageAttribute,The length of the statement  "            Assert.Equal("{ \"date\": \"2010-01-01 12:34:56.0000\"' \"level\": \"Info\"' \"message\": \"{ \\\"hello\\\" : \\\"world\\\" }\" }"' jsonLayout.Render(logEventInfo)); " is 165.
Long Statement,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,NestedJsonAttrTest,The length of the statement  "                            new JsonAttribute("message"' "${exception:format=:innerFormat=Message:MaxInnerExceptionLevel=1:InnerExceptionSeparator=}")' " is 123.
Long Statement,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,NestedJsonAttrTest,The length of the statement  "            Assert.Equal("{ \"type\": \"NLog.NLogRuntimeException\"' \"message\": \"test\"' \"innerException\": { \"type\": \"System.NullReferenceException\"' \"message\": \"null is bad!\" } }"' json); " is 189.
Long Statement,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,NestedJsonAttrDoesNotRenderEmptyLiteralIfRenderEmptyObjectIsFalseTest,The length of the statement  "                            new JsonAttribute("message"' "${exception:format=:innerFormat=Message:MaxInnerExceptionLevel=1:InnerExceptionSeparator=}")' " is 123.
Long Statement,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,NestedJsonAttrRendersEmptyLiteralIfRenderEmptyObjectIsTrueTest,The length of the statement  "                            new JsonAttribute("message"' "${exception:format=:innerFormat=Message:MaxInnerExceptionLevel=1:InnerExceptionSeparator=}")' " is 123.
Long Statement,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,NestedJsonAttrTestFromXML,The length of the statement  "            Assert.Equal("{ \"time\": \"2016-10-30 13:30:55.0000\"' \"level\": \"INFO\"' \"nested\": { \"message\": \"this is message\"' \"exception\": \"test\" } }"' json); " is 161.
Long Statement,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,SerializeObjectRecursionSingle,The length of the statement  "            logEventInfo1.Properties.Add("nestedObject"' new List<object> { new { val = 1' val2 = "value2" }' new { val3 = 3' val4 = "value4" } }); " is 135.
Long Statement,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,SerializeObjectRecursionSingle,The length of the statement  "            AssertDebugLastMessage("debug"' "{ \"nestedObject\": [{\"val\":1' \"val2\":\"value2\"}'{\"val3\":3' \"val4\":\"value4\"}] }"); " is 126.
Long Statement,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,SerializeObjectRecursionSingle,The length of the statement  "            logEventInfo3.Properties.Add("nestedObject"' new List<object> { new List<object> { new { val = 1' val2 = "value2" } } }); " is 121.
Long Statement,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,SerializeObjectRecursionSingle,The length of the statement  "            AssertDebugLastMessage("debug"' "{ \"nestedObject\": [[\"{ val = 1' val2 = value2 }\"]] }");  // Allows nested collection' but then only ToString " is 145.
Long Statement,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,SerializeObjectRecursionZero,The length of the statement  "            logEventInfo1.Properties.Add("nestedObject"' new List<object> { new { val = 1' val2 = "value2" }' new { val3 = 3' val4 = "value5" } }); " is 135.
Long Statement,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,SerializeObjectRecursionZero,The length of the statement  "            AssertDebugLastMessage("debug"' "{ \"nestedObject\": [\"{ val = 1' val2 = value2 }\"'\"{ val3 = 3' val4 = value5 }\"] }");  // Allows single collection recursion " is 161.
Long Statement,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,SerializeObjectRecursionZero,The length of the statement  "            AssertDebugLastMessage("debug"' "{ \"nestedObject\": \"{ val = 1' val2 = value2 }\" }");    // Never object recursion' only ToString " is 132.
Long Statement,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,SerializeObjectRecursionZero,The length of the statement  "            logEventInfo3.Properties.Add("nestedObject"' new List<object> { new List<object> { new { val = 1' val2 = "value2" } } }); " is 121.
Long Statement,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,EncodesInvalidCharacters,The length of the statement  "            AssertDebugLastMessage("debug"' "{ \"InvalidCharacters\": [\"|\"'\"#\"'\"{\"'\"}\"'\"%\"'\"&\"'\"\\\"\"'\"~\"'\"+\"'\"\\\\\"'\"\\/\"'\":\"'\"*\"'\"?\"'\"<\"'\">\"] }"); " is 168.
Long Statement,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,EncodesInvalidDoubles,The length of the statement  "            AssertDebugLastMessage("debug"' "{ \"DoubleNaN\": \"NaN\"' \"DoubleInfPositive\": \"Infinity\"' \"DoubleInfNegative\": \"-Infinity\"' \"FloatNaN\": \"NaN\"' \"FloatInfPositive\": \"Infinity\"' \"FloatInfNegative\": \"-Infinity\" }"); " is 233.
Long Statement,NLog.UnitTests.Layouts,SimpleLayoutParserTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\SimpleLayoutParserTests.cs,LayoutParserEscapeCodesForRegExTestV1,The length of the statement  "    <variable name=""message1"" value=""${replace:inner=${message}:searchFor=${searchExp}:replaceWith=\u003a\u003a:regex=true:ignorecase=true}"" /> " is 143.
Long Statement,NLog.UnitTests.Layouts,SimpleLayoutParserTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\SimpleLayoutParserTests.cs,LayoutParserEscapeCodesForRegExTestV2,The length of the statement  "    <variable name=""message1"" value=""${replace:inner=${message}:searchFor=${searchExp}:replaceWith=\u003a\u003a:regex=true:ignorecase=true}"" /> " is 143.
Long Statement,NLog.UnitTests.Layouts,SimpleLayoutParserTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\SimpleLayoutParserTests.cs,LayoutWithListParamTest,The length of the statement  "            ConfigurationItemFactory.Default.LayoutRenderers.RegisterDefinition("layoutrenderer-with-list"' typeof(LayoutRendererWithListParam)); " is 133.
Long Statement,NLog.UnitTests.Layouts,SimpleLayoutParserTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\SimpleLayoutParserTests.cs,LayoutWithListParamTest_incorrect,The length of the statement  "            ConfigurationItemFactory.Default.LayoutRenderers.RegisterDefinition("layoutrenderer-with-list"' typeof(LayoutRendererWithListParam)); " is 133.
Long Statement,NLog.UnitTests.Layouts,LayoutRendererWithListParam,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\SimpleLayoutParserTests.cs,AppendFormattable,The length of the statement  "                if (items != null) builder.Append(string.Join("-"' items.Select(it => it.ToString(null' CultureInfo.InvariantCulture)).ToArray())); " is 131.
Long Statement,NLog.UnitTests.Layouts,ThreadAgnosticTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\ThreadAgnosticTests.cs,ThreadAgnosticAttributeTest,The length of the statement  "                    Assert.True(t.IsDefined(typeof(ThreadAgnosticAttribute)' true)' "Type " + t + " is missing [ThreadAgnostic] attribute."); " is 121.
Long Statement,NLog.UnitTests.Layouts,ThreadAgnosticTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\ThreadAgnosticTests.cs,ComplexNonAgnosticWithCondition,The length of the statement  "            Layout l = @"${message:padding=-10:padCharacter=Y:when='${pad:${threadname}:padding=10:padCharacter=X}'=='XXXXlogger'}"; " is 120.
Long Statement,NLog.UnitTests.Layouts,XmlLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\XmlLayoutTests.cs,XmlLayoutRendering,The length of the statement  "            Assert.Equal(string.Format(System.Globalization.CultureInfo.InvariantCulture' @"<logevent>{0}{1}<date>2010-01-01 12:34:56.0000</date>{0}{1}<level>Info</level>{0}{1}<message>hello' world</message>{0}{1}<property key=""nlogPropertyKey"">nlogPropertyValue</property>{0}</logevent>"' Environment.NewLine' "  ")' xmlLayout.Render(logEventInfo)); " is 340.
Long Statement,NLog.UnitTests.Layouts,XmlLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\XmlLayoutTests.cs,XmlLayoutLog4j,The length of the statement  "                            <layout type='xmllayout' elementName='log4j:event' propertiesElementName='log4j:data' propertiesElementKeyAttribute='name' propertiesElementValueAttribute='value' includeAllProperties='true' includeMdc='true' includeMdlc='true' > " is 229.
Long Statement,NLog.UnitTests.Layouts,XmlLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\XmlLayoutTests.cs,XmlLayoutLog4j,The length of the statement  "            Assert.Equal(@"<log4j:event logger=""A"" level=""DEBUG""><log4j:message>some message</log4j:message><log4j:locationInfo class=""NLog.UnitTests.Layouts.XmlLayoutTests""/><log4j:data name=""foo1"" value=""bar1""/><log4j:data name=""foo2"" value=""bar2""/><log4j:data name=""foo3"" value=""bar3""/><log4j:data name=""nlogPropertyKey"" value=""&lt;nlog&#13;&#10;PropertyValue&gt;""/></log4j:event>"' target.LastMessage); " is 416.
Long Statement,NLog.UnitTests.Layouts,XmlLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\XmlLayoutTests.cs,XmlLayout_NoIndent_RendersOneLine,The length of the statement  "                @"<logevent><level>Debug</level><message>message 1</message><property key=""prop1"">a</property><property key=""prop2"">b</property><property key=""prop3"">c</property></logevent>"; " is 181.
Long Statement,NLog.UnitTests.Layouts,XmlLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\XmlLayoutTests.cs,XmlLayout_ExcludeProperties_RenderNotProperty,The length of the statement  "            const string expected = @"<logevent><message>message 1</message><property key=""prop1"">a</property><property key=""prop3"">c</property></logevent>"; " is 149.
Long Statement,NLog.UnitTests.Layouts,XmlLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\XmlLayoutTests.cs,XmlLayout_OnlyLogEventProperties_RenderRootCorrect,The length of the statement  "            const string expected = @"<logevent><property key=""prop1"">a</property><property key=""prop2"">b</property><property key=""prop3"">c</property></logevent>"; " is 157.
Long Statement,NLog.UnitTests.Layouts,XmlLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\XmlLayoutTests.cs,XmlLayout_InvalidXmlPropertyName_RenderNameCorrect,The length of the statement  "            const string expected = @"<logevent><_1prop>a</_1prop><_2prop>b</_2prop><_3prop>c</_3prop><_4_prop>d</_4_prop></logevent>"; " is 123.
Long Statement,NLog.UnitTests.Layouts,XmlLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\XmlLayoutTests.cs,XmlLayout_DoubleNestedElements_RendersAllElements,The length of the statement  "            string expected = @"<logevent><message>message 1<level>Debug</level><property key=""prop1"">a</property><property key=""prop2"">b</property></message></logevent>"; " is 163.
Long Statement,NLog.UnitTests.Layouts,XmlLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\XmlLayoutTests.cs,XmlLayout_PropertiesElementNameDefault_Properties_RenderPropertyDictionary,The length of the statement  "            const string expected = @"<logevent><message>Monster massage</message><property key=""nlogPropertyKey""><property key=""Hello"">World</property></property></logevent>"; " is 168.
Long Statement,NLog.UnitTests.Layouts,XmlLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\XmlLayoutTests.cs,XmlLayout_PropertiesElementNameFormat_RenderPropertyDictionary,The length of the statement  "            const string expected = @"<logevent><message>Monster massage</message><nlogPropertyKey><Hello>World</Hello></nlogPropertyKey></logevent>"; " is 138.
Long Statement,NLog.UnitTests.Layouts,XmlLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\XmlLayoutTests.cs,XmlLayout_PropertiesElementNameDefault_Properties_RenderPropertyList,The length of the statement  "            const string expected = @"<logevent><message>Monster massage</message><property key=""nlogPropertyKey""><item>Hello</item><item>World</item></property></logevent>"; " is 164.
Long Statement,NLog.UnitTests.Layouts,XmlLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\XmlLayoutTests.cs,XmlLayout_PropertiesElementNameFormat_RenderPropertyList,The length of the statement  "            const string expected = @"<logevent><message>Monster massage</message><nlogPropertyKey><node value=""Hello""/><node value=""World""/></nlogPropertyKey></logevent>"; " is 164.
Long Statement,NLog.UnitTests.Layouts,XmlLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\XmlLayoutTests.cs,XmlLayout_PropertiesElementNameDefault_Properties_RenderPropertyObject,The length of the statement  "            logEventInfo.Properties["nlogPropertyKey"] = new { Id = guid' Name = "Hello World"' Elements = new[] { "Earth"' "Wind"' "Fire" } }; " is 131.
Long Statement,NLog.UnitTests.Layouts,XmlLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\XmlLayoutTests.cs,XmlLayout_PropertiesElementNameDefault_Properties_RenderPropertyObject,The length of the statement  "            string expected = @"<logevent><message>Monster massage</message><property key=""nlogPropertyKey""><property key=""Id"">" + guid.ToString() + @"</property><property key=""Name"">Hello World</property><property key=""Elements""><item>Earth</item><item>Wind</item><item>Fire</item></property></property></logevent>"; " is 313.
Long Statement,NLog.UnitTests.Layouts,XmlLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\XmlLayoutTests.cs,XmlLayout_PropertiesElementNameFormat_RenderPropertyObject,The length of the statement  "            logEventInfo.Properties["nlogPropertyKey"] = new { Id = guid' Name = "Hello World"' Elements = new[] { "Earth"' "Wind"' "Fire" } }; " is 131.
Long Statement,NLog.UnitTests.Layouts,XmlLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\XmlLayoutTests.cs,XmlLayout_PropertiesElementNameFormat_RenderPropertyObject,The length of the statement  "            string expected = @"<logevent><message>Monster massage</message><nlogPropertyKey><Id>" + guid.ToString() + @"</Id><Name>Hello World</Name><Elements><item>Earth</item><item>Wind</item><item>Fire</item></Elements></nlogPropertyKey></logevent>"; " is 242.
Long Statement,NLog.UnitTests.Layouts,XmlLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\XmlLayoutTests.cs,XmlLayout_PropertiesElementNameDefault_Properties_RenderPropertyExpando,The length of the statement  "            const string expected = @"<logevent><message>Monster massage</message><property key=""nlogPropertyKey""><property key=""Id"">123</property><property key=""Name"">test name</property></property></logevent>"; " is 206.
Long Statement,NLog.UnitTests.Layouts,XmlLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\XmlLayoutTests.cs,XmlLayout_PropertiesElementNameFormat_RenderTrickyDictionary,The length of the statement  "            const string expected = @"<logevent><message>Monster massage</message><nlogPropertyKey><key1>13</key1><key_2>1.3</key_2></nlogPropertyKey></logevent>"; " is 151.
Long Statement,NLog.UnitTests.LayoutRenderers.Wrappers,ReplaceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Wrappers\String transformations\ReplaceTests.cs,ReplaceTestWithSimpleRegExFromConfig2,The length of the statement  "    <variable name=""oneLineMessage"" value=""${replace:inner=${message}:searchFor=${whitespace}:replaceWith= :regex=true}"" /> " is 123.
Long Statement,NLog.UnitTests.LayoutRenderers.Wrappers,ReplaceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Wrappers\String transformations\ReplaceTests.cs,ReplaceTestWithComplexRegEx,The length of the statement  "    <variable name=""message1"" value=""${replace:inner=${message}:searchFor=${searchExp}:replaceWith=X:replaceGroupName=digits:regex=true:ignorecase=true}"" /> " is 156.
Long Statement,NLog.UnitTests.LayoutRenderers.Wrappers,WhenTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Wrappers\WhenTests.cs,ComplexWhenTest,The length of the statement  "            SimpleLayout l = @"${message:when='${pad:${logger}:padding=10:padCharacter=X}'=='XXXXlogger':padding=-10:padCharacter=Y}"; " is 122.
Long Statement,NLog.UnitTests.LayoutRenderers.Wrappers,WhenTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Wrappers\WhenTests.cs,ComplexWhenTest2,The length of the statement  "            SimpleLayout l = @"${message:padding=-10:padCharacter=Y:when='${pad:${logger}:padding=10:padCharacter=X}'=='XXXXlogger'}"; " is 122.
Long Statement,NLog.UnitTests.LogReceiverService,LogReceiverForwardingServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverForwardingServiceTests.cs,ToLogEventInfoTest,The length of the statement  "                    <target name='debug1' type='Debug' layout='${message} ${event-context:foo} ${event-context:bar} ${event-context:baz}' /> " is 120.
Long Statement,NLog.UnitTests.LogReceiverService,LogReceiverForwardingServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverForwardingServiceTests.cs,ToLogEventInfoTest,The length of the statement  "                    <target name='debug2' type='Debug' layout='${message} ${event-context:foo} ${event-context:bar} ${event-context:baz}' /> " is 120.
Long Statement,NLog.UnitTests.LogReceiverService,LogReceiverForwardingServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverForwardingServiceTests.cs,ToLogEventInfoTest,The length of the statement  "                    <target name='debug3' type='Debug' layout='${message} ${event-context:foo} ${event-context:bar} ${event-context:baz}' /> " is 120.
Long Statement,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,CheckReceived1,The length of the statement  "            var logmessages = new HashSet<string> { received[0].ToEventInfo().First().Message' received[1].ToEventInfo().First().Message }; " is 127.
Long Statement,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestStringifyOfStringIsSuccessful,The length of the statement  "            var result = ValueFormatter.Instance.FormatValue(@class' string.Empty' CaptureType.Stringify' new CultureInfo("fr-FR")' builder); " is 129.
Long Statement,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestStringifyOfIFormatableObjectIsSuccessful,The length of the statement  "            var result = ValueFormatter.Instance.FormatValue(@class' string.Empty' CaptureType.Stringify' new CultureInfo("fr-FR")' builder); " is 129.
Long Statement,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestStringifyOfNonIFormatableObjectIsSuccessful,The length of the statement  "            var result = ValueFormatter.Instance.FormatValue(@class' string.Empty' CaptureType.Stringify' new CultureInfo("fr-FR")' builder); " is 129.
Long Statement,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerializationOfListObjectIsSuccessful,The length of the statement  "            var result = ValueFormatter.Instance.FormatValue(list' string.Empty' CaptureType.Normal' new CultureInfo("fr-FR")' builder); " is 124.
Long Statement,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerializationOfDictionaryObjectIsSuccessful,The length of the statement  "            var result = ValueFormatter.Instance.FormatValue(list' string.Empty' CaptureType.Normal' new CultureInfo("fr-FR")' builder); " is 124.
Long Statement,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerializationOfCollectionOfListObjectWithDepth2IsNotSuccessful,The length of the statement  "            var list = new List<List<List<List<int>>>>() { new List<List<List<int>>>() { new List<List<int>>() { new List<int>() { 1' 2 }' new List<int>() { 3' 4 } }' new List<List<int>>() { new List<int>() { 4' 5 }' new List<int>() { 6' 7 } } } }; " is 236.
Long Statement,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerializationOfCollectionOfListObjectWithDepth2IsNotSuccessful,The length of the statement  "            var result = ValueFormatter.Instance.FormatValue(list' string.Empty' CaptureType.Normal' new CultureInfo("fr-FR")' builder); " is 124.
Long Statement,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerializationWillbeSkippedForElementsThatHaveRepeatedElements,The length of the statement  "            var list = new List<List<List<List<int>>>>() { new List<List<List<int>>>() { new List<List<int>>() { new List<int>() { 1' 2 }' new List<int>() { 1' 2 } }' new List<List<int>>() { new List<int>() { 1' 2 }' new List<int>() { 1' 2 } } } }; " is 236.
Long Statement,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerializationWillbeSkippedForElementsThatHaveRepeatedElements,The length of the statement  "            var result = ValueFormatter.Instance.FormatValue(list' string.Empty' CaptureType.Normal' new CultureInfo("fr-FR")' builder); " is 124.
Long Statement,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerializationWillBeSuccessfulForNullObjects,The length of the statement  "            var result = ValueFormatter.Instance.FormatValue(list' string.Empty' CaptureType.Normal' new CultureInfo("fr-FR")' builder); " is 124.
Long Statement,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerializationOfStringIsSuccessful,The length of the statement  "            var result = ValueFormatter.Instance.FormatValue(@class' string.Empty' CaptureType.Normal' new CultureInfo("fr-FR")' builder); " is 126.
Long Statement,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerialisationOfIConvertibleObjectIsSuccessful,The length of the statement  "            var result = ValueFormatter.Instance.FormatValue(@class' string.Empty' CaptureType.Normal' new CultureInfo("fr-FR")' builder); " is 126.
Long Statement,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerialisationOfIConvertibleStringObjectIsSuccessful,The length of the statement  "            var result = ValueFormatter.Instance.FormatValue(@class' string.Empty' CaptureType.Normal' new CultureInfo("fr-FR")' builder); " is 126.
Long Statement,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerialisationOfIConvertibleBooleanObjectIsSuccessful,The length of the statement  "            var result = ValueFormatter.Instance.FormatValue(@class' string.Empty' CaptureType.Normal' new CultureInfo("fr-FR")' builder); " is 126.
Long Statement,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerialisationOfIConvertibleCharObjectIsSuccessful,The length of the statement  "            var result = ValueFormatter.Instance.FormatValue(@class' string.Empty' CaptureType.Normal' new CultureInfo("fr-FR")' builder); " is 126.
Long Statement,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerialisationOfIConvertibleNumericObjectIsSuccessful,The length of the statement  "            var result = ValueFormatter.Instance.FormatValue(@class' string.Empty' CaptureType.Normal' new CultureInfo("fr-FR")' builder); " is 126.
Long Statement,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerialisationOfIConvertibleEnumObjectIsSuccessful,The length of the statement  "            var result = ValueFormatter.Instance.FormatValue(@class.Data' string.Empty' CaptureType.Normal' new CultureInfo("fr-FR")' builder); " is 131.
Long Statement,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerialisationOfIConvertibleDateTimeObjectIsSuccessful,The length of the statement  "            var result = ValueFormatter.Instance.FormatValue(@class' string.Empty' CaptureType.Normal' new CultureInfo("fr-FR")' builder); " is 126.
Long Statement,NLog.UnitTests.Targets,AsyncTaskTargetTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\AsyncTaskTargetTest.cs,AsyncTaskTarget_TestThrottleOnTaskDelay,The length of the statement  "            Assert.True(asyncTarget.Logs.Count > 25' $"{asyncTarget.Logs.Count} LogEvents are too few after {asyncTarget.WriteTasks} writes"); " is 130.
Long Statement,NLog.UnitTests.Targets,AsyncTaskTestTarget,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\AsyncTaskTargetTest.cs,WriteLogQueue,The length of the statement  "                    await Task.Delay(10' token).ContinueWith((t) => { throw new InvalidOperationException("AsyncTaskTargetTest Async Failure"); }).ConfigureAwait(false); " is 149.
Long Statement,NLog.UnitTests.Targets,AsyncTaskTestTarget,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\AsyncTaskTargetTest.cs,WriteLogQueue,The length of the statement  "                    await Task.Delay(10' token).ContinueWith((t) => Logs.Enqueue(RenderLogEvent(Layout' logEvent))' token).ContinueWith(async (t) => await Task.Delay(10).ConfigureAwait(false)).ConfigureAwait(false); " is 195.
Long Statement,NLog.UnitTests.Targets,ColoredConsoleTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ColoredConsoleTargetTests.cs,AssertOutput,The length of the statement  "                target.WriteAsyncLogEvent(new LogEventInfo(LogLevel.Info' loggerName.Trim()' message).WithContinuation(exceptions.Add)); " is 120.
Long Statement,NLog.UnitTests.Targets,ConcurrentFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConcurrentFileTargetTests.cs,ConfigureSharedFile,The length of the statement  "                    SimpleConfigurator.ConfigureForTargetLogging(new AsyncTargetWrapper(ft' 100' AsyncTargetWrapperOverflowAction.Grow) { Name = name' TimeToSleepBetweenBatches = 10 }' LogLevel.Debug); " is 181.
Long Statement,NLog.UnitTests.Targets,ConcurrentFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConcurrentFileTargetTests.cs,Process,The length of the statement  "            NLog.Common.InternalLogger.LogFile = Path.Combine(Path.GetDirectoryName(fileName)' string.Format("Internal_{0}.txt"' processIndex)); " is 132.
Long Statement,NLog.UnitTests.Targets,ConcurrentFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConcurrentFileTargetTests.cs,Process,The length of the statement  "                using (var textWriter = File.AppendText(Path.Combine(Path.GetDirectoryName(fileName)' string.Format("Internal_{0}.txt"' processIndex)))) " is 136.
Long Statement,NLog.UnitTests.Targets,ConcurrentFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConcurrentFileTargetTests.cs,Process,The length of the statement  "            using (var textWriter = File.AppendText(Path.Combine(Path.GetDirectoryName(fileName)' string.Format("Internal_{0}.txt"' processIndex)))) " is 136.
Long Statement,NLog.UnitTests.Targets,ConcurrentFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConcurrentFileTargetTests.cs,DoConcurrentTest,The length of the statement  "                    throw new InvalidOperationException($"Error when comparing path {tempPath} for process {currentProcess}. Is this a recording problem? {reoderProblem}"' ex); " is 156.
Long Statement,NLog.UnitTests.Targets,ConsoleTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConsoleTargetTests.cs,ConsoleErrorTest,The length of the statement  "            string expectedResult = string.Format("-- header --{0}Logger1 message1{0}Logger1 message2{0}Logger1 message3{0}Logger2 message4{0}Logger2 message5{0}Logger1 message6{0}-- footer --{0}"' Environment.NewLine); " is 207.
Long Statement,NLog.UnitTests.Targets,ConsoleTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConsoleTargetTests.cs,ConsoleEncodingTest,The length of the statement  "                // Not really testing whether Console.OutputEncoding works' but just that it is configured without breaking ConsoleTarget " is 121.
Long Statement,NLog.UnitTests.Targets,ConsoleTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConsoleTargetTests.cs,ConsoleEncodingTest,The length of the statement  "            string expectedResult = string.Format("-- header --{0}Logger1 message1{0}Logger1 message2{0}-- footer --{0}"' Environment.NewLine); " is 131.
Long Statement,NLog.UnitTests.Targets,ConsoleTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConsoleTargetTests.cs,ConsoleRaceCondtionIgnoreInnerTest,The length of the statement  "            // See https://stackoverflow.com/questions/33915790/console-out-and-console-error-race-condition-error-in-a-windows-service-written " is 131.
Long Statement,NLog.UnitTests.Targets,ConsoleTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConsoleTargetTests.cs,ConsoleRaceCondtionIgnoreInnerTest,The length of the statement  "            // and https://connect.microsoft.com/VisualStudio/feedback/details/2057284/console-out-probable-i-o-race-condition-issue-in-multi-threaded-windows-service " is 154.
Long Statement,NLog.UnitTests.Targets,ConsoleTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConsoleTargetTests.cs,ConsoleRaceCondtionIgnoreInnerTest,The length of the statement  "            //   Error during session close: System.IndexOutOfRangeException: Probable I/ O race condition detected while copying memory. " is 125.
Long Statement,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,InstallParameterTest,The length of the statement  "                Text = $"INSERT INTO dbo.SomeTable(SomeColumn) SELECT @paramOne WHERE NOT EXISTS(SELECT 1 FROM dbo.SomeOtherTable WHERE SomeColumn = @paramOne);" " is 145.
Long Statement,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,InstallParameterTest,The length of the statement  "ExecuteNonQuery: INSERT INTO dbo.SomeTable(SomeColumn) SELECT @paramOne WHERE NOT EXISTS(SELECT 1 FROM dbo.SomeOtherTable WHERE SomeColumn = @paramOne); " is 152.
Long Statement,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The length of the statement  "            yield return new object[] { "23-12-2018 22:56"' DbType.DateTime' new DateTime(2018' 12' 23' 22' 56' 0)' "dd-MM-yyyy HH:mm" }; " is 125.
Long Statement,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The length of the statement  "            yield return new object[] { new DateTime(2018' 12' 23' 22' 56' 0).ToString(CultureInfo.InvariantCulture)' DbType.DateTime' new DateTime(2018' 12' 23' 22' 56' 0)' null' CultureInfo.InvariantCulture }; " is 199.
Long Statement,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The length of the statement  "            yield return new object[] { "2018-12-23 +2:30"' DbType.DateTimeOffset' new DateTimeOffset(2018' 12' 23' 0' 0' 0' new TimeSpan(2' 30' 0)) }; " is 139.
Long Statement,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The length of the statement  "            yield return new object[] { "23-12-2018 22:56 +2:30"' DbType.DateTimeOffset' new DateTimeOffset(2018' 12' 23' 22' 56' 0' new TimeSpan(2' 30' 0))' "dd-MM-yyyy HH:mm zzz" }; " is 171.
Long Statement,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The length of the statement  "            yield return new object[] { "3888CCA3-D11D-45C9-89A5-E6B72185D287"' DbType.Guid' Guid.Parse("3888CCA3-D11D-45C9-89A5-E6B72185D287") }; " is 134.
Long Statement,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The length of the statement  "            yield return new object[] { "3888CCA3D11D45C989A5E6B72185D287"' DbType.Guid' Guid.Parse("3888CCA3-D11D-45C9-89A5-E6B72185D287") }; " is 130.
Long Statement,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The length of the statement  "            yield return new object[] { "3888CCA3D11D45C989A5E6B72185D287"' DbType.Guid' Guid.Parse("3888CCA3-D11D-45C9-89A5-E6B72185D287")' "N" }; " is 135.
Long Statement,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The length of the statement  "            yield return new object[] { "${date:universalTime=true:format=yyyy-MM:norawvalue=true}"' DbType.DateTime' DateTime.SpecifyKind(DateTime.UtcNow.Date.AddDays(-DateTime.UtcNow.Day + 1)' DateTimeKind.Unspecified) }; " is 211.
Long Statement,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ParameterDbTypePropertyNameTest,The length of the statement  "                        <parameter name='@date' dbType='MockDbType.DateTime' format='yyyy-MM-dd HH:mm:ss.fff' layout='${date:format=yyyy-MM-dd HH\:mm\:ss.fff}'/> " is 137.
Long Statement,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ParameterDbTypePropertyNameTest,The length of the statement  "            expectedLog = string.Format(expectedLog + expectedLog' LogLevel.Info.Ordinal' alogEvent.LogEvent.TimeStamp.ToString(CultureInfo.InvariantCulture)); " is 147.
Long Statement,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,SQLite_InstallAndLogMessageProgrammatically,The length of the statement  "                var tableName = sqlLite.IssueScalarQuery("SELECT name FROM sqlite_master WHERE type = 'table' AND name = 'NLogTestTable'"); " is 123.
Long Statement,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,SQLite_InstallAndLogMessage,The length of the statement  "                    <target name='database' xsi:type='Database' dbProvider=""" + dbProvider + @""" connectionstring=""" + connectionString + @""" " is 125.
Long Statement,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,SQLite_InstallAndLogMessage,The length of the statement  "                var tableName = sqlLite.IssueScalarQuery("SELECT name FROM sqlite_master WHERE type = 'table' AND name = 'NLogSqlLiteTest'"); " is 125.
Long Statement,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,SQLite_InstallTest,The length of the statement  "                    <target name='database' xsi:type='Database' dbProvider=""" + dbProvider + @""" connectionstring=""" + connectionString + @""" " is 125.
Long Statement,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,SQLite_InstallTest,The length of the statement  "                var tableName = sqlLite.IssueScalarQuery("SELECT name FROM sqlite_master WHERE type = 'table' AND name = 'NLogSqlLiteTestAppNames'"); " is 133.
Long Statement,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,SQLite_InstallProgramaticallyTest,The length of the statement  "                        "INSERT INTO NLogSqlLiteTestAppNames(Id' Name) SELECT 1' @paramOne WHERE NOT EXISTS(SELECT 1 FROM NLogSqlLiteTestAppNames WHERE Name = @paramOne);" " is 147.
Long Statement,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,SQLite_InstallProgramaticallyTest,The length of the statement  "                var tableName = sqlLite.IssueScalarQuery("SELECT name FROM sqlite_master WHERE type = 'table' AND name = 'NLogSqlLiteTestAppNames'"); " is 133.
Long Statement,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,SetupSqliteConfigWithInvalidInstallCommand,The length of the statement  "            LogManager.Configuration = XmlLoggingConfiguration.CreateFromXmlString(String.Format(nlogXmlConfig' GetSQLiteDbProvider()' connectionString)); " is 142.
Long Statement,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,SqlServer_NoTargetInstallException,The length of the statement  "                var tableCatalog = SqlServerTest.IssueScalarQuery(isAppVeyor' @"SELECT TABLE_NAME FROM NLogTest.INFORMATION_SCHEMA.TABLES  " is 121.
Long Statement,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,GetProviderNameFromConnectionString,The length of the statement  "                    "metadata=res://*/Model.csdl|res://*/Model.ssdl|res://*/Model.msl;provider=System.Data.SqlClient;provider connection string=\"data source=192.168.0.100;initial catalog=TEST_DB;user id=myUser;password=SecretPassword;multipleactiveresultsets=True;application name=EntityFramework\""' " is 281.
Long Statement,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,GetProviderNameFromConnectionString,The length of the statement  "            Assert.Equal("data source=192.168.0.100;initial catalog=TEST_DB;user id=myUser;password=SecretPassword;multipleactiveresultsets=True;application name=EntityFramework"' ((NLog.Layouts.SimpleLayout)databaseTarget.ConnectionString).FixedText); " is 240.
Long Statement,NLog.UnitTests.Targets,DefaultJsonSerializerLegacyTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerLegacyTests.cs,SerializeNumber_formatNL_Test,The length of the statement  "            var actual = SerializeObjectWithOptions(o' new JsonSerializeOptions() { Format = "N2"' FormatProvider = new CultureInfo("nl-nl") }); " is 132.
Long Statement,NLog.UnitTests.Targets,DefaultJsonSerializerLegacyTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerLegacyTests.cs,SerializeDateTime_formatNl_Test,The length of the statement  "            var actual = SerializeObjectWithOptions(utcNow' new JsonSerializeOptions { Format = "dddd d M"' FormatProvider = new CultureInfo("nl-nl") }); " is 141.
Long Statement,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,StringWithMixedControlCharacters_Test,The length of the statement  "            var text = "First\\Second\tand" + (char)3 + "for" + (char)0x1f + "with" + (char)0x10 + "but" + (char)0x0d + "and no" + (char)0x20; " is 130.
Long Statement,NLog.UnitTests.Targets,EventLogTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\EventLogTargetTests.cs,ConfigurationShouldThrowException_WhenMaxMessageLengthIsNegativeOrZero,The length of the statement  "            NLogConfigurationException ex = Assert.Throws<NLogConfigurationException>(() => XmlLoggingConfiguration.CreateFromXmlString(configrationText)); " is 143.
Long Statement,NLog.UnitTests.Targets,EventLogTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\EventLogTargetTests.cs,Configuration_ShouldThrowException_WhenMaxKilobytesIsInvalid,The length of the statement  "            NLogConfigurationException ex = Assert.Throws<NLogConfigurationException>(() => XmlLoggingConfiguration.CreateFromXmlString(configrationText)); " is 143.
Long Statement,NLog.UnitTests.Targets,EventLogTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\EventLogTargetTests.cs,Configuration_ShouldThrowException_WhenMaxKilobytesIsInvalid,The length of the statement  "            Assert.Equal("MaxKilobytes must be a multiple of 64' and between 64 and 4194240"' ex.InnerException.InnerException.Message); " is 124.
Long Statement,NLog.UnitTests.Targets,EventLogTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\EventLogTargetTests.cs,ShouldSetMaxKilobytes_WhenNeeded,The length of the statement  "                Source = "NLog.UnitTests" + Guid.NewGuid().ToString("N")' // set the source explicitly to prevent random AppDomain name being used as the source name " is 149.
Long Statement,NLog.UnitTests.Targets,EventLogTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\EventLogTargetTests.cs,ShouldSetMaxKilobytes_WhenNeeded,The length of the statement  "                Layout = new SimpleLayout("${message}")' // Be able to check message length and content' the Layout is intentionally only ${message}. " is 133.
Long Statement,NLog.UnitTests.Targets,EventLogTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\EventLogTargetTests.cs,SplitMessagesShouldBeWrittenAtCorrenpondingNLogLevel,The length of the statement  "            var entries = WriteWithMock(logLevel' expectedEventLogEntryType' testMessage' entryTypeLayout' EventLogTargetOverflowAction.Split).ToList(); " is 140.
Long Statement,NLog.UnitTests.Targets,EventLogTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\EventLogTargetTests.cs,WriteEventLogEntryLargerThanMaxMessageLengthWithOverflowSplitEntries_TheMessageShouldBeSplit,The length of the statement  "            var entries = WriteWithMock(LogLevel.Info' EventLogEntryType.Information' testMessage' null' EventLogTargetOverflowAction.Split).ToList(); " is 138.
Long Statement,NLog.UnitTests.Targets,EventLogTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\EventLogTargetTests.cs,WriteEventLogEntryEqualToMaxMessageLengthWithOverflowSplitEntries_TheMessageShouldBeSplitInTwoChunks,The length of the statement  "            var entries = WriteWithMock(LogLevel.Info' EventLogEntryType.Information' testMessage' null' EventLogTargetOverflowAction.Split).ToList(); " is 138.
Long Statement,NLog.UnitTests.Targets,EventLogTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\EventLogTargetTests.cs,WriteEventLogEntryEqualToMaxMessageLengthWithOverflowSplitEntries_TheMessageIsNotSplit,The length of the statement  "            var entries = WriteWithMock(LogLevel.Info' EventLogEntryType.Information' expectedMessage' null' EventLogTargetOverflowAction.Split).ToList(); " is 142.
Long Statement,NLog.UnitTests.Targets,EventLogTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\EventLogTargetTests.cs,WriteEventLogEntryEqualToMaxMessageLengthWithOverflowDiscard_TheMessageIsWritten,The length of the statement  "            var entries = WriteWithMock(LogLevel.Info' EventLogEntryType.Information' expectedMessage' null' EventLogTargetOverflowAction.Discard).ToList(); " is 144.
Long Statement,NLog.UnitTests.Targets,EventLogTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\EventLogTargetTests.cs,WriteEventLogEntryLargerThanMaxMessageLengthWithOverflowDiscard_TheMessageIsNotWritten,The length of the statement  "                bool wasWritten = WriteWithMock(LogLevel.Info' EventLogEntryType.Information' testMessage' null' EventLogTargetOverflowAction.Discard).Any(); " is 141.
Long Statement,NLog.UnitTests.Targets,EventLogTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\EventLogTargetTests.cs,WriteEventLogEntryWithDynamicSource,The length of the statement  "            var target = CreateEventLogTarget<EventLogTarget>("NLog.UnitTests" + Guid.NewGuid().ToString("N")' EventLogTargetOverflowAction.Split' maxMessageLength); " is 153.
Long Statement,NLog.UnitTests.Targets,EventLogTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\EventLogTargetTests.cs,LogEntryWithStaticEventIdAndCategoryInTargetLayout,The length of the statement  "            var target = CreateEventLogTarget<EventLogTarget>("NLog.UnitTests" + Guid.NewGuid().ToString("N")' EventLogTargetOverflowAction.Truncate' 5000); " is 144.
Long Statement,NLog.UnitTests.Targets,EventLogTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\EventLogTargetTests.cs,LogEntryWithDynamicEventIdAndCategory,The length of the statement  "            var target = CreateEventLogTarget<EventLogTarget>("NLog.UnitTests" + Guid.NewGuid().ToString("N")' EventLogTargetOverflowAction.Truncate' 5000); " is 144.
Long Statement,NLog.UnitTests.Targets,EventLogTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\EventLogTargetTests.cs,WriteWithMock,The length of the statement  "            var target = CreateEventLogTarget<EventLogTargetMock>("NLog.UnitTests" + Guid.NewGuid().ToString("N")' overflowAction' maxMessageLength' entryType); " is 148.
Long Statement,NLog.UnitTests.Targets,EventLogTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\EventLogTargetTests.cs,WriteWithMock,The length of the statement  "                    $"No message is expected. But {filteredEntries.Count()} message(s) found entry of type '{expectedEventLogEntryType}' from source '{expectedSource}'."); " is 151.
Long Statement,NLog.UnitTests.Targets,EventLogTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\EventLogTargetTests.cs,CreateEventLogTarget,The length of the statement  "                Layout = new SimpleLayout("${message}")' //Be able to check message length and content' the Layout is intentionally only ${message}. " is 132.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,SimpleFileDeleteTest,The length of the statement  "                Console.WriteLine("[SKIP] FileTargetTests.SimpleFileDeleteTest Not supported on MONO on Travis' because of FileSystemWatcher not working"); " is 139.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,CsvHeaderTest,The length of the statement  "                AssertFileContents(logFile' "name;level;message\nNLog.UnitTests.Targets.FileTargetTests;Debug;aaa\nNLog.UnitTests.Targets.FileTargetTests;Debug;aaa\n"' Encoding.UTF8); " is 167.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DeleteFileOnStartTest_noExceptionWhenMissing,The length of the statement  "      <target name='file1' encoding='UTF-8' type='File'  deleteOldFileOnStartup='true' fileName='c://temp2/logs/i-dont-exist.log' layout='${message} ' /> " is 147.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,ArchiveAboveSizeWithArchiveNumberingModeDate_maxfiles_o,The length of the statement  "            var tempPath = Path.Combine(Path.GetTempPath()' "ArchiveEveryCombinedWithArchiveAboveSize_" + Guid.NewGuid().ToString()); " is 121.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,ArchiveAboveSizeWithArchiveNumberingModeDate_maxfiles_o,The length of the statement  "                   StringRepeat(times' "aaa\n") + StringRepeat(times' "bbb\n") + StringRepeat(times' "ccc\n") + StringRepeat(times' "ddd\n")' " is 122.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DateArchive_UsesDateFromCurrentTimeSource,The length of the statement  "                Console.WriteLine("[SKIP] FileTargetTests.DateArchive_UsesDateFromCurrentTimeSource because SetLastWriteTime is not working on Travis"); " is 136.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DateArchive_UsesDateFromCurrentTimeSource,The length of the statement  "                    var archiveFileName = archiveFileNameTemplate.Replace("{#}"' previousWriteTime.ToString(archiveDateFormat) + (includeSequenceInArchive ? ".0" : string.Empty)); " is 159.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,AsyncMultiFileWrite,The length of the statement  "                SimpleConfigurator.ConfigureForTargetLogging(new AsyncTargetWrapper(fileTarget' 10' AsyncTargetWrapperOverflowAction.Grow) " is 122.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_ArchiveNumbering_DateAndSequence,The length of the statement  "            FileTarget_ArchiveNumbering_DateAndSequenceTests(enableCompression: false' fileTxt: "file.txt"' archiveFileName: Path.Combine("archive"' "{#}.txt")); " is 149.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_ArchiveNumbering_DateAndSequence_archive_same_as_log_name,The length of the statement  "            FileTarget_ArchiveNumbering_DateAndSequenceTests(enableCompression: false' fileTxt: "file-${date:format=yyyy-MM-dd}.txt"' archiveFileName: "file-{#}.txt"); " is 155.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_ArchiveNumbering_DateAndSequence_WithCompression,The length of the statement  "            FileTarget_ArchiveNumbering_DateAndSequenceTests(enableCompression: true' fileTxt: "file.txt"' archiveFileName: Path.Combine("archive"' "{#}.zip")); " is 148.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_ArchiveNumbering_DateAndSequenceTests,The length of the statement  "                var assertFileContents = enableCompression ? new Action<string' string' Encoding>(AssertZipFileContents) : AssertFileContents; " is 126.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_Handle_Other_Files_That_Match_Archive_Format,The length of the statement  "                string archiveFileLayout = Path.Combine(Path.GetDirectoryName(logFile)' Path.GetFileNameWithoutExtension(logFile) + "{#}" + Path.GetExtension(logFile)); " is 152.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_ArchiveNumbering_remove_correct_order,The length of the statement  "                ArchiveFileNameHelper helper = new ArchiveFileNameHelper(Path.Combine(tempPath' "archive")' DateTime.Now.ToString(fileTarget.ArchiveDateFormat)' archiveExtension); " is 163.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_ArchiveNumbering_remove_correct_wildcard,The length of the statement  "                    logFile1 = string.Format(logFile' logger1.Name' TimeSource.Current.Time.Date.ToString("yyyy-MM-dd") + "." + i.ToString()); " is 122.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_ArchiveNumbering_remove_correct_wildcard,The length of the statement  "                    logFile2 = string.Format(logFile' logger2.Name' TimeSource.Current.Time.Date.ToString("yyyy-MM-dd") + "." + i.ToString()); " is 122.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_ArchiveNumbering_remove_correct_wildcard,The length of the statement  "                    var logFile1 = string.Format(logFile' logger1.Name' TimeSource.Current.Time.Date.ToString("yyyy-MM-dd") + "." + i.ToString()); " is 126.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_ArchiveNumbering_remove_correct_wildcard,The length of the statement  "                    var logFile2 = string.Format(logFile' logger2.Name' TimeSource.Current.Time.Date.ToString("yyyy-MM-dd") + "." + i.ToString()); " is 126.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_ArchiveNumbering_remove_correct_wildcard,The length of the statement  "                    var logFile1 = string.Format(logFile' logger1.Name' TimeSource.Current.Time.Date.ToString("yyyy-MM-dd") + "." + numberToBeRemoved.ToString()); " is 142.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_ArchiveNumbering_remove_correct_wildcard,The length of the statement  "                    var logFile2 = string.Format(logFile' logger2.Name' TimeSource.Current.Time.Date.ToString("yyyy-MM-dd") + "." + numberToBeRemoved.ToString()); " is 142.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_ArchiveNumbering_remove_correct_wildcard,The length of the statement  "                    logFile1 = string.Format(logFile' logger1.Name' TimeSource.Current.Time.Date.ToString("yyyy-MM-dd") + "." + i.ToString()); " is 122.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_ArchiveNumbering_remove_correct_wildcard,The length of the statement  "                    logFile2 = string.Format(logFile' logger2.Name' TimeSource.Current.Time.Date.ToString("yyyy-MM-dd") + "." + i.ToString()); " is 122.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,Dont_throw_Exception_when_archiving_is_enabled,The length of the statement  "    <target name='logfile' xsi:type='File' fileName='${basedir}/log.txt' archiveFileName='${basedir}/log.${date}' archiveEvery='Day' archiveNumbering='Date' /> " is 155.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,Dont_throw_Exception_when_archiving_is_enabled_with_async,The length of the statement  "    <target  name='logfile' xsi:type='File' fileName='${basedir}/log.txt' archiveFileName='${basedir}/log.${date}' archiveEvery='Day' archiveNumbering='Date' /> " is 156.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DatedArchiveForFileTargetWithMultipleFiles,The length of the statement  "                Assert.Contains(logEvent.Properties["serialNo"] + "." + currentDate.ToString("yyyy-MM-dd") + ".txt"' currentFiles.Select(f => f.Name)); " is 135.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DatedArchiveForFileTargetWithMultipleFiles,The length of the statement  "                Assert.Contains(logEvent2.Properties["serialNo"] + "." + currentDate.ToString("yyyy-MM-dd") + ".txt"' currentFiles.Select(f => f.Name)); " is 136.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,HandleArchiveFilesMultipleContextMultipleTargetTest,The length of the statement  "            HandleArchiveFilesMultipleContextMultipleTargetsTest(archivePath' logdir' 2' 2' "yyyyMMdd-HHmm"' changeCreationAndWriteTime); " is 125.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,HandleArchiveFilesMultipleContextSingleTargetTest_ascii,The length of the statement  "            HandleArchiveFilesMultipleContextSingleTargetsTest(archivePath' logdir' 2' 2' "yyyyMMdd-HHmm"' changeCreationAndWriteTime); " is 123.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,HandleArchiveFilesMultipleContextMultipleTargetsTest,The length of the statement  "                foreach (string filePath in ArchiveFileNamesGenerator(archivePath' dateFormat' app1TraceNm + fileExt).Take(numberFilesCreatedPerTargetArchive)) " is 143.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,HandleArchiveFilesMultipleContextMultipleTargetsTest,The length of the statement  "                foreach (string filePath in ArchiveFileNamesGenerator(archivePath' dateFormat' app1DebugNm + fileExt).Take(numberFilesCreatedPerTargetArchive)) " is 143.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,HandleArchiveFilesMultipleContextMultipleTargetsTest,The length of the statement  "                foreach (string filePath in ArchiveFileNamesGenerator(archivePath' dateFormat' app2Nm + fileExt).Take(numberFilesCreatedPerTargetArchive)) " is 138.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,HandleArchiveFilesMultipleContextMultipleTargetsTest,The length of the statement  "                File.WriteAllLines(logdir + "\\" + app1DebugNm + fileExt' new[] { "Write first app debug target. Startup will archive this file" }' Encoding.ASCII); " is 148.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,HandleArchiveFilesMultipleContextMultipleTargetsTest,The length of the statement  "                logger.Trace("Test 1 - Write to the log file that already exists; trigger archive to happen because archiveOldFileOnStartup='true'"); " is 133.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,HandleArchiveFilesMultipleContextMultipleTargetsTest,The length of the statement  "                // TODO: perhaps extra App1 Debug and Trace files should both be deleted?  (then app1TraceTargetFileCnt would be expected to = expectedArchiveFiles too) " is 152.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,HandleArchiveFilesMultipleContextSingleTargetsTest,The length of the statement  "                foreach (string filePath in ArchiveFileNamesGenerator(archivePath' dateFormat' app1Nm + fileExt).Take(numberFilesCreatedPerTargetArchive)) " is 138.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,HandleArchiveFilesMultipleContextSingleTargetsTest,The length of the statement  "                foreach (string filePath in ArchiveFileNamesGenerator(archivePath' dateFormat' app2Nm + fileExt).Take(numberFilesCreatedPerTargetArchive)) " is 138.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,HandleArchiveFilesMultipleContextSingleTargetsTest,The length of the statement  "                File.WriteAllLines(Path.Combine(logdir' app1Nm + fileExt)' new[] { "Write first app debug target. Startup will archive this file" }' Encoding.ASCII); " is 149.
Long Statement,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,HandleArchiveFilesMultipleContextSingleTargetsTest,The length of the statement  "                logger.Debug("Test 1 - Write to the log file that already exists; trigger archive to happen because archiveOldFileOnStartup='true'"); " is 133.
Long Statement,NLog.UnitTests.Targets,PlainFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,HandleArchiveFileAlreadyExistsTest,The length of the statement  "                AssertFileContents(archiveFileName' "message already in archive" + Environment.NewLine + "some content" + Environment.NewLine' encoding' hasBom); " is 145.
Long Statement,NLog.UnitTests.Targets,PlainFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,HandleArchiveFileAlreadyExistsTest,The length of the statement  "                AssertFileContents(logFile' "log to force archiving" + Environment.NewLine + "log to same file" + Environment.NewLine' encoding' hasBom); " is 137.
Long Statement,NLog.UnitTests.Targets,LogReceiverWebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\LogReceiverWebServiceTargetTests.cs,NoEmptyEventLists,The length of the statement  "                asyncTarget.WriteAsyncLogEvents(new[] { LogEventInfo.Create(LogLevel.Info' "logger1"' "message1").WithContinuation(ex => { }) }); " is 129.
Long Statement,NLog.UnitTests.Targets,MailTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MailTargetTests.cs,CsvLayoutTest,The length of the statement  "            string expectedBody = "name;level;message\nMyLogger1;Info;log message 1\nMyLogger2;Debug;log message 2\nMyLogger3;Error;log message 3\n"; " is 137.
Long Statement,NLog.UnitTests.Targets,MailTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MailTargetTests.cs,MailTarget_WithEmptyTo_ThrowsNLogRuntimeException,The length of the statement  "            Assert.Throws<NLogRuntimeException>(() => mmt.WriteAsyncLogEvent(new LogEventInfo(LogLevel.Info' "MyLogger"' "log message 1").WithContinuation(exceptions.Add))); " is 161.
Long Statement,NLog.UnitTests.Targets,MailTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MailTargetTests.cs,MailTarget_WithEmptyFrom_ThrowsNLogRuntimeException,The length of the statement  "            Assert.Throws<NLogRuntimeException>(() => mmt.WriteAsyncLogEvent(new LogEventInfo(LogLevel.Info' "MyLogger"' "log message 1").WithContinuation(exceptions.Add))); " is 161.
Long Statement,NLog.UnitTests.Targets,MailTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MailTargetTests.cs,MailTarget_WithEmptySmtpServer_ThrowsNLogRuntimeException,The length of the statement  "            Assert.Throws<NLogRuntimeException>(() => mmt.WriteAsyncLogEvent(new LogEventInfo(LogLevel.Info' "MyLogger"' "log message 1").WithContinuation(exceptions.Add))); " is 161.
Long Statement,NLog.UnitTests.Targets,MethodCallTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MethodCallTests.cs,TestMethodCall2,The length of the statement  "            TestMethodCall(new MethodCallRecord("StaticAndPublic"' "test1"' 2)' "StaticAndPublic"' "NLog.UnitTests.Targets.MethodCallTests' NLog.UnitTests' Version=1.0.0.0' Culture=neutral' PublicKeyToken=b793d3de60bec2b9"); " is 212.
Long Statement,NLog.UnitTests.Targets,MethodCallTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MethodCallTests.cs,OptionalParameters,The length of the statement  "            TestMethodCall(new MethodCallRecord("StaticAndPublicOptional"' "test1"' 2' "fixedValue")' "StaticAndPublicOptional"' CorrectClassName); " is 135.
Long Statement,NLog.UnitTests.Targets,MethodCallTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MethodCallTests.cs,FluentDelegateConfiguration,The length of the statement  "            configuration.AddRuleForAllLevels(new MethodCallTarget("Hello"' (logEvent' parameters) => { actualMessage = logEvent.Message; })); " is 130.
Long Statement,NLog.UnitTests.Targets,MethodCallRecord,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MethodCallTests.cs,GetHashCode,The length of the statement  "                    return ((Method != null ? Method.GetHashCode() : 0) * 397) ^ (ParameterValues != null ? ParameterValues.GetHashCode() : 0); " is 123.
Long Statement,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,HappyPathTest,The length of the statement  "            Assert.Equal(string.Join(eol' messages) + eol' target.Encoding.GetString(sender.MemoryStream.GetBuffer()' 0' (int)sender.MemoryStream.Length)); " is 143.
Long Statement,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetMultipleConnectionsWithMessageSplitTest,The length of the statement  "            target.WriteAsyncLogEvent(new LogEventInfo(LogLevel.Info' "logger1"' "012345678901234567890123456789").WithContinuation(asyncContinuation)); " is 140.
Long Statement,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetMultipleConnectionsWithMessageSplitTest,The length of the statement  "            target.WriteAsyncLogEvent(new LogEventInfo(LogLevel.Info' "logger1"' "012345678901234").WithContinuation(asyncContinuation)); " is 125.
Long Statement,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetMultipleConnectionsWithMessageSplitTest,The length of the statement  "            target.WriteAsyncLogEvent(new LogEventInfo(LogLevel.Info' "logger2"' "012345678901234567890123").WithContinuation(asyncContinuation)); " is 134.
Long Statement,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetMultipleConnectionsWithMessageDiscardTest,The length of the statement  "            target.WriteAsyncLogEvent(new LogEventInfo(LogLevel.Info' "logger1"' "012345678901234").WithContinuation(asyncContinuation)); " is 125.
Long Statement,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetMultipleConnectionsWithMessageErrorTest,The length of the statement  "            target.WriteAsyncLogEvent(new LogEventInfo(LogLevel.Info' "logger1"' "012345678901234").WithContinuation(asyncContinuation)); " is 125.
Long Statement,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetMultipleConnectionsWithMessageErrorTest,The length of the statement  "            Assert.Equal("Attempted to send a message larger than MaxMessageSize (10). Actual size was: 15. Adjust OnOverflow and MaxMessageSize parameters accordingly."' exceptions[1].Message); " is 182.
Long Statement,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetTcpTest,The length of the statement  "                    var ev = new LogEventInfo(LogLevel.Info' "logger1"' "messagemessagemessagemessagemessage" + i).WithContinuation(writeFinished); " is 127.
Long Statement,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetUdpTest,The length of the statement  "                            listener.BeginReceiveFrom(receiveBuffer' 0' receiveBuffer.Length' SocketFlags.None' ref remoteEndPoint' receivedDatagram' null); " is 128.
Long Statement,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetUdpTest,The length of the statement  "                listener.BeginReceiveFrom(receiveBuffer' 0' receiveBuffer.Length' SocketFlags.None' ref remoteEndPoint' receivedDatagram' null); " is 128.
Long Statement,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,SslProtocolsConfigTest,The length of the statement  "                <targets><target name='target1' type='network' layout='${{message}}' Address='tcp://127.0.0.1:50001' sslProtocols='{sslOptions}' /></targets> " is 141.
Long Statement,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,KeepAliveTimeConfigTest,The length of the statement  "                <targets><target name='target1' type='network' layout='${{message}}' Address='tcp://127.0.0.1:50001' keepAliveTimeSeconds='{keepAliveTimeSeconds}' /></targets> " is 159.
Long Statement,NLog.UnitTests.Targets,TargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\TargetTests.cs,TargetContructorWithNameTest,The length of the statement  "            var targetTypes = typeof(Target).Assembly.GetTypes().Where(t => !t.IsAbstract && t.IsSubclassOf(typeof(Target))).ToList(); " is 122.
Long Statement,NLog.UnitTests.Targets,TargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\TargetTests.cs,InitializeTest,The length of the statement  "            Assert.Equal(1' target.InitializeCount + target.FlushCount + target.CloseCount + target.WriteCount + target.WriteCount2 + target.WriteCount3); " is 142.
Long Statement,NLog.UnitTests.Targets,TargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\TargetTests.cs,DoubleInitializeTest,The length of the statement  "            Assert.Equal(1' target.InitializeCount + target.FlushCount + target.CloseCount + target.WriteCount + target.WriteCount2 + target.WriteCount3); " is 142.
Long Statement,NLog.UnitTests.Targets,TargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\TargetTests.cs,DoubleCloseTest,The length of the statement  "            Assert.Equal(2' target.InitializeCount + target.FlushCount + target.CloseCount + target.WriteCount + target.WriteCount2 + target.WriteCount3); " is 142.
Long Statement,NLog.UnitTests.Targets,TargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\TargetTests.cs,CloseWithoutInitializeTest,The length of the statement  "            Assert.Equal(0' target.InitializeCount + target.FlushCount + target.CloseCount + target.WriteCount + target.WriteCount2 + target.WriteCount3); " is 142.
Long Statement,NLog.UnitTests.Targets,TargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\TargetTests.cs,WriteWithoutInitializeTest,The length of the statement  "            Assert.Equal(0' target.InitializeCount + target.FlushCount + target.CloseCount + target.WriteCount + target.WriteCount2 + target.WriteCount3); " is 142.
Long Statement,NLog.UnitTests.Targets,TargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\TargetTests.cs,WriteOnClosedTargetTest,The length of the statement  "            Assert.Equal(2' target.InitializeCount + target.FlushCount + target.CloseCount + target.WriteCount + target.WriteCount2 + target.WriteCount3); " is 142.
Long Statement,NLog.UnitTests.Targets,TargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\TargetTests.cs,FlushTest,The length of the statement  "            Assert.Equal(2' target.InitializeCount + target.FlushCount + target.CloseCount + target.WriteCount + target.WriteCount2 + target.WriteCount3); " is 142.
Long Statement,NLog.UnitTests.Targets,TargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\TargetTests.cs,FlushWithoutInitializeTest,The length of the statement  "            Assert.Equal(0' target.InitializeCount + target.FlushCount + target.CloseCount + target.WriteCount + target.WriteCount2 + target.WriteCount3); " is 142.
Long Statement,NLog.UnitTests.Targets,TargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\TargetTests.cs,FlushOnClosedTargetTest,The length of the statement  "            Assert.Equal(2' target.InitializeCount + target.FlushCount + target.CloseCount + target.WriteCount + target.WriteCount2 + target.WriteCount3); " is 142.
Long Statement,NLog.UnitTests.Targets,TargetWithContextTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\TargetWithContextTest.cs,TargetWithContextAsyncTest,The length of the statement  "            Assert.Contains(new KeyValuePair<string' object>("threadid"' System.Environment.CurrentManagedThreadId.ToString())' target.LastCombinedProperties); " is 147.
Long Statement,NLog.UnitTests.Targets,TargetWithContextTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\TargetWithContextTest.cs,TargetWithContextConfigTest,The length of the statement  "            Assert.Contains(new KeyValuePair<string' object>("threadid"' System.Environment.CurrentManagedThreadId.ToString())' lastCombinedProperties); " is 140.
Long Statement,NLog.UnitTests.Targets,TargetWithContextTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\TargetWithContextTest.cs,TargetWithContextPropertyTypeTest,The length of the statement  "                            <contextproperty name='int-non-existing' layout='${event-properties:non-existing}' propertyType='System.Int32' includeEmptyValue='true' /> " is 138.
Long Statement,NLog.UnitTests.Targets,TargetWithContextTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\TargetWithContextTest.cs,TargetWithContextPropertyTypeTest,The length of the statement  "                            <contextproperty name='int-non-existing-empty' layout='${event-properties:non-existing}' propertyType='System.Int32' includeEmptyValue='false' /> " is 145.
Long Statement,NLog.UnitTests.Targets,TargetWithContextTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\TargetWithContextTest.cs,TargetWithContextPropertyTypeTest,The length of the statement  "                            <contextproperty name='object-non-existing' layout='${event-properties:non-existing}' propertyType='System.Object' includeEmptyValue='true' /> " is 142.
Long Statement,NLog.UnitTests.Targets,TargetWithContextTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\TargetWithContextTest.cs,TargetWithContextPropertyTypeTest,The length of the statement  "                            <contextproperty name='object-non-existing-empty' layout='${event-properties:non-existing}' propertyType='System.Object' includeEmptyValue='false' /> " is 149.
Long Statement,NLog.UnitTests.Targets,TargetWithContextTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\TargetWithContextTest.cs,TargetWithContextPropertyTypeTest,The length of the statement  "            Assert.Contains(new KeyValuePair<string' object>("threadid"' System.Environment.CurrentManagedThreadId)' lastCombinedProperties); " is 129.
Long Statement,NLog.UnitTests.Targets,TargetWithContextTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\TargetWithContextTest.cs,TargetWithContextPropertyTypeTest,The length of the statement  "            Assert.Contains(new KeyValuePair<string' object>("processid"' System.Diagnostics.Process.GetCurrentProcess().Id)' lastCombinedProperties); " is 138.
Long Statement,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,Stream_CopyWithOffset_test,The length of the statement  "Lorem ipsum dolor sit amet consectetuer tellus semper dictum urna consectetuer. Eu iaculis enim tincidunt mi pede id ut sociis non vitae. Condimentum augue Nam Vestibulum faucibus tortor et at Sed et molestie. Interdum morbi Nullam pellentesque Vestibulum pede et eget semper Pellentesque quis. Velit cursus nec dolor vitae id et urna quis ante velit. Neque urna et vitae neque Vestibulum tellus convallis dui. " is 410.
Long Statement,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,Stream_CopyWithOffset_test,The length of the statement  "Tellus nibh enim augue senectus ut augue Donec Pellentesque Sed pretium. Volutpat nunc rutrum auctor dolor pharetra malesuada elit sapien ac nec. Adipiscing et id penatibus turpis a odio risus orci Suspendisse eu. Nibh eu facilisi eu consectetuer nibh eu in Nunc Curabitur rutrum. Quisque sit lacus consectetuer eu Duis quis felis hendrerit lobortis mauris. Nam Vivamus enim Aenean rhoncus. " is 390.
Long Statement,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,Stream_CopyWithOffset_test,The length of the statement  "Nulla tellus dui orci montes Vestibulum Aenean condimentum non id vel. Euismod Nam libero odio ut ut Nunc ac dui Nulla volutpat. Quisque facilisis consequat tempus tempus Curabitur tortor id Phasellus Suspendisse In. Lorem et Phasellus wisi Fusce fringilla pretium pede sapien amet ligula. In sed id In eget tristique quam sed interdum wisi commodo. Volutpat neque nibh mauris Quisque lorem nunc porttitor Cras faucibus augue. Sociis tempus et. " is 444.
Long Statement,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,Stream_CopyWithOffset_test,The length of the statement  "Morbi Nulla justo Aenean orci Vestibulum ullamcorper tincidunt mollis et hendrerit. Enim at laoreet elit eros ut at laoreet vel velit quis. Netus sed Suspendisse sed Curabitur vel sed wisi sapien nonummy congue. Semper Sed a malesuada tristique Vivamus et est eu quis ante. Wisi cursus Suspendisse dictum pretium habitant sodales scelerisque dui tempus libero. Venenatis consequat Lorem eu. " is 390.
Long Statement,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,WebserviceTest_httppost_utf8,The length of the statement  "            var parameterValues = new object[] { ""' "336cec87129942eeabab3d8babceead7"' "Debg"' "2014-06-26 23:15:14.6348"' "TestClient.Program"' "Debug" }; " is 145.
Long Statement,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,WebserviceTest_httppost_utf8,The length of the statement  "            const string expectedUrl = "empty=&guid=336cec87129942eeabab3d8babceead7&m=Debg&date=2014-06-26+23%3a15%3a14.6348&logger=TestClient.Program&level=Debug"; " is 153.
Long Statement,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,WebserviceTest_restapi_json,The length of the statement  "            var txt = "message 1 with a JSON POST<hello><again\\>\"\b";   // Lets tease the JSON serializer and see it can handle valid and invalid xml chars " is 145.
Long Statement,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,WebserviceTest_restapi_json,The length of the statement  "            var context = new LogDocController.TestContext(1' count' false' new Dictionary<string' string>() { { "Authorization"' "OpenBackDoor" } }' txt' "info"' true' DateTime.UtcNow); " is 174.
Long Statement,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,WebserviceTest_restapi_xml,The length of the statement  "            var txt = "message 1 with a XML POST<hello><again\\>\"";   // Lets tease the Xml-Serializer' and see it can handle xml-tags " is 123.
Long Statement,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,StartOwinTest,The length of the statement  "            // HttpSelfHostConfiguration. So info: http://www.asp.net/web-api/overview/hosting-aspnet-web-api/use-owin-to-self-host-web-api " is 127.
Long Statement,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,StartOwinTest,The length of the statement  "                //wait for all received message' or timeout. There is no exception on timeout' so we have to check carefully in the unit test. " is 126.
Long Statement,NLog.UnitTests.Targets,StartupDoc,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,Configuration,The length of the statement  "                    // Use ISO 8601 / RFC 3339 Date-Format (2012-07-27T18:51:45.53403Z)' instead of Microsoft JSON date format ("\/Date(ticks)\/") " is 126.
Long Statement,NLog.UnitTests.Targets,StartupDoc,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,Configuration,The length of the statement  "                    config.Formatters.JsonFormatter.SerializerSettings.DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat; " is 121.
Long Statement,NLog.UnitTests.Targets,StartupDoc,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,Configuration,The length of the statement  "                    config.Formatters.JsonFormatter.UseDataContractJsonSerializer = false;  // JSON.NET serializer instead of the ancient DataContractJsonSerializer " is 144.
Long Statement,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperSyncTest_WhenTimeToSleepBetweenBatchesIsEqualToZero,The length of the statement  "                    itemPrepareList.Add(logEvent.WithContinuation((ex) => { if (blockConsumer) Thread.Sleep(125); itemWrittenList.Add(sequenceID); })); " is 131.
Long Statement,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,EnqueuQueueBlock_OnClose_ReleasesWriters,The length of the statement  "            AsyncHelpers.ForEachItemInParallel(System.Linq.Enumerable.Range(1' 6)' (ex) => Interlocked.Exchange(ref allTasksCompleted' 1)' (value' cont) => { for (int i = 0; i < 100; ++i) logger.Info("Hello {0}"' value); cont(null); }); " is 224.
Long Statement,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,MultipleConditionalAutoFlushWrappersTest,The length of the statement  "            autoFlushOnMessageWrapper.WriteAsyncLogEvent(LogEventInfo.Create(LogLevel.Trace' "*"' "test").WithContinuation(continuation)); " is 126.
Long Statement,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,MultipleConditionalAutoFlushWrappersTest,The length of the statement  "            autoFlushOnMessageWrapper.WriteAsyncLogEvent(LogEventInfo.Create(LogLevel.Fatal' "*"' "test").WithContinuation(continuation)); " is 126.
Long Statement,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,MultipleConditionalAutoFlushWrappersTest,The length of the statement  "            autoFlushOnMessageWrapper.WriteAsyncLogEvent(LogEventInfo.Create(LogLevel.Trace' "*"' "Please FlushThis").WithContinuation(continuation)); " is 138.
Long Statement,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,BufferingAutoFlushWrapperTest,The length of the statement  "            autoFlushOnLevelWrapper.WriteAsyncLogEvent(LogEventInfo.Create(LogLevel.Trace' "*"' "test").WithContinuation(continuation)); " is 124.
Long Statement,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,BufferingAutoFlushWrapperTest,The length of the statement  "            autoFlushOnLevelWrapper.WriteAsyncLogEvent(LogEventInfo.Create(LogLevel.Fatal' "*"' "test").WithContinuation(continuation)); " is 124.
Long Statement,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,BufferingAutoFlushWrapperTest,The length of the statement  "            autoFlushOnLevelWrapper.WriteAsyncLogEvent(LogEventInfo.Create(LogLevel.Trace' "*"' "Please do not FlushThis").WithContinuation(continuation)); " is 143.
Long Statement,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,IgnoreExplicitAutoFlushWrapperTest,The length of the statement  "            autoFlushOnLevelWrapper.WriteAsyncLogEvent(LogEventInfo.Create(LogLevel.Trace' "*"' "test").WithContinuation(continuation)); " is 124.
Long Statement,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,IgnoreExplicitAutoFlushWrapperTest,The length of the statement  "            autoFlushOnLevelWrapper.WriteAsyncLogEvent(LogEventInfo.Create(LogLevel.Fatal' "*"' "test").WithContinuation(continuation)); " is 124.
Long Statement,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,IgnoreExplicitAutoFlushWrapperTest,The length of the statement  "            autoFlushOnLevelWrapper.WriteAsyncLogEvent(LogEventInfo.Create(LogLevel.Trace' "*"' "Please do not FlushThis").WithContinuation(continuation)); " is 143.
Long Statement,NLog.UnitTests.Targets.Wrappers,ConcurrentRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\ConcurrentRequestQueueTests.cs,RaiseEventLogEventDropped_OnLogItems,The length of the statement  "            ConcurrentRequestQueue requestQueue = new ConcurrentRequestQueue(RequestsLimit' AsyncTargetWrapperOverflowAction.Discard); " is 122.
Long Statement,NLog.UnitTests.Targets.Wrappers,GroupByTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\GroupByTargetWrapperTests.cs,SimpleGroupByTest,The length of the statement  "            groupByTarget.WriteAsyncLogEvent(LogEventInfo.Create(LogLevel.Info' logger1.Name' "Special Hello").WithContinuation((ex) => { })); " is 130.
Long Statement,NLog.UnitTests.Targets.Wrappers,ImpersonatingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\ImpersonatingTargetWrapperTests.cs,RevertToSelfTest,The length of the statement  "                var id = CreateWindowsIdentity(NLogTestUser' Environment.MachineName' NLogTestUserPassword' SecurityLogOnType.Interactive' LogOnProviderType.Default' SecurityImpersonationLevel.Identification); " is 193.
Long Statement,NLog.UnitTests.Targets.Wrappers,ImpersonatingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\ImpersonatingTargetWrapperTests.cs,RevertToSelfTest,The length of the statement  "                Assert.Contains(NLogTestUser.ToLowerInvariant()' changedIdentity.Name.ToLowerInvariant()' StringComparison.InvariantCulture); " is 125.
Long Statement,NLog.UnitTests.Targets.Wrappers,SplitGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\SplitGroupTargetTests.cs,SplitGroupToStringTest,The length of the statement  "            Assert.Equal("SplitGroup Target[(unnamed)](MyTarget' File Target[file1]' Console Target[Console2])"' wrapper.ToString()); " is 121.
Complex Conditional,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,UniqueBaseAppender,The conditional expression  "networkWrites && keepFileOpen && !concurrentWrites && !forceMutexConcurrentWrites"  is complex.
Complex Conditional,NLog.UnitTests.Targets,LogDocController,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,processRequest,The conditional expression  "string.Equals(Context.ExpectedParam2' complexType.Param2' StringComparison.OrdinalIgnoreCase)                          && Context.ExpectedParam1 == complexType.Param1                          && Context.ExpectedParam3 == complexType.Param3                          && Context.ExpectedParam4.Date == complexType.Param4.Date"  is complex.
Empty Catch Block,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,OneTimeOnlyExceptionInHandlerTest_RethrowExceptionEnabled,The method has an empty catch block.
Empty Catch Block,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,OneTimeOnlyExceptionInHandlerTest_RethrowExceptionEnabled,The method has an empty catch block.
Empty Catch Block,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,OneTimeOnlyExceptionInHandlerTest_RethrowExceptionEnabled,The method has an empty catch block.
Empty Catch Block,NLog.UnitTests,LogFactoryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogFactoryTests.cs,SecondaryLogFactoryDoesNotTakePrimaryLogFactoryLock,The method has an empty catch block.
Empty Catch Block,NLog.UnitTests.LayoutRenderers,RegistryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Machine\RegistryTests.cs,Dispose,The method has an empty catch block.
Empty Catch Block,NLog.UnitTests.LayoutRenderers,RegistryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Machine\RegistryTests.cs,Dispose,The method has an empty catch block.
Empty Catch Block,NLog.UnitTests.LayoutRenderers,RegistryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Machine\RegistryTests.cs,Dispose,The method has an empty catch block.
Empty Catch Block,NLog.UnitTests.Targets,ConcurrentFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConcurrentFileTargetTests.cs,DoConcurrentTest,The method has an empty catch block.
Empty Catch Block,NLog.UnitTests.Targets,SQLiteTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,TryDropDatabase,The method has an empty catch block.
Empty Catch Block,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DateArchive_UsesDateFromCurrentTimeSource,The method has an empty catch block.
Empty Catch Block,NLog.UnitTests.Targets,PlainFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,HandleArchiveFileAlreadyExistsTest,The method has an empty catch block.
Empty Catch Block,NLog.UnitTests.Targets,PlainFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DontCrashWhenDateAndSequenceDoesntMatchFiles,The method has an empty catch block.
Empty Catch Block,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,WebserviceTest_restapi_httpget_flush,The method has an empty catch block.
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ContinuationTimeoutTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var resetEvent = new ManualResetEvent(false);                  var exceptions = new List<Exception>();                    // set up a timer to strike in 1 second                  var cont = AsyncHelpers.WithTimeout(ex =>                  {                      exceptions.Add(ex);                      resetEvent.Set();                  }' TimeSpan.FromMilliseconds(1));                    resetEvent.WaitOne(TimeSpan.FromSeconds(1));                    // make sure we got timeout exception                  Assert.Single(exceptions);                  Assert.IsType<TimeoutException>(exceptions[0]);                  Assert.Equal("Timeout."' exceptions[0].Message);                    // those will be ignored                  cont(null);                  cont(new ApplicationException("Some exception"));                  cont(null);                  cont(new ApplicationException("Some exception"));                    Assert.Single(exceptions);              });
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ContinuationTimeoutNotHitTest,The following statement contains a magic number: var cont = AsyncHelpers.WithTimeout(AsyncHelpers.PreventMultipleCalls(exceptions.Add)' TimeSpan.FromMilliseconds(50));
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ContinuationTimeoutNotHitTest,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ContinuationErrorTimeoutNotHitTest,The following statement contains a magic number: var cont = AsyncHelpers.WithTimeout(AsyncHelpers.PreventMultipleCalls(exceptions.Add)' TimeSpan.FromMilliseconds(50));
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ContinuationErrorTimeoutNotHitTest,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,RepeatTest1,The following statement contains a magic number: AsyncHelpers.Repeat(10' finalContinuation'                  cont =>                      {                          callCount++;                          cont(null);                      });
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,RepeatTest1,The following statement contains a magic number: Assert.Equal(10' callCount);
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,RepeatTest2,The following statement contains a magic number: AsyncHelpers.Repeat(10' finalContinuation'                  cont =>                  {                      callCount++;                      cont(sampleException);                      cont(sampleException);                  });
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,RepeatTest3,The following statement contains a magic number: AsyncHelpers.Repeat(10' finalContinuation'                      cont =>                      {                          callCount++;                          throw sampleException;                      });
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemSequentiallyTest1,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemSequentiallyTest1,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemSequentiallyTest1,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemSequentiallyTest1,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemSequentiallyTest1,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemSequentiallyTest1,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemSequentiallyTest1,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemSequentiallyTest1,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemSequentiallyTest1,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemSequentiallyTest1,The following statement contains a magic number: Assert.Equal(55' sum);
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemSequentiallyTest2,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemSequentiallyTest2,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemSequentiallyTest2,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemSequentiallyTest2,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemSequentiallyTest2,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemSequentiallyTest2,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemSequentiallyTest2,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemSequentiallyTest2,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemSequentiallyTest2,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemSequentiallyTest3,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemSequentiallyTest3,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemSequentiallyTest3,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemSequentiallyTest3,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemSequentiallyTest3,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemSequentiallyTest3,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemSequentiallyTest3,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemSequentiallyTest3,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemSequentiallyTest3,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemInParallelTest,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemInParallelTest,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemInParallelTest,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemInParallelTest,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemInParallelTest,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemInParallelTest,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemInParallelTest,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemInParallelTest,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemInParallelTest,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemInParallelTest,The following statement contains a magic number: Assert.Equal(55' sum);
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemInParallelSingleFailureTest,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemInParallelSingleFailureTest,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemInParallelSingleFailureTest,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemInParallelSingleFailureTest,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemInParallelSingleFailureTest,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemInParallelSingleFailureTest,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemInParallelSingleFailureTest,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemInParallelSingleFailureTest,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemInParallelSingleFailureTest,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemInParallelSingleFailureTest,The following statement contains a magic number: AsyncHelpers.ForEachItemInParallel(input' finalContinuation'                      (i' cont) =>                          {                                lock (input)                              {                                  sum += i;                              }                                if (i == 7)                              {                                  throw new ApplicationException("Some failure.");                              }                                cont(null);                          });
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemInParallelSingleFailureTest,The following statement contains a magic number: Assert.Equal(55' sum);
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemInParallelMultipleFailuresTest,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemInParallelMultipleFailuresTest,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemInParallelMultipleFailuresTest,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemInParallelMultipleFailuresTest,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemInParallelMultipleFailuresTest,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemInParallelMultipleFailuresTest,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemInParallelMultipleFailuresTest,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemInParallelMultipleFailuresTest,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemInParallelMultipleFailuresTest,The following statement contains a magic number: var input = new[] { 1' 2' 3' 4' 5' 6' 7' 8' 9' 10' };
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,ForEachItemInParallelMultipleFailuresTest,The following statement contains a magic number: Assert.Equal(55' sum);
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,PrecededByTest1,The following statement contains a magic number: int sequence = 7;
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,PrecededByTest1,The following statement contains a magic number: Assert.Equal(7' invokedCount2Sequence);
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,PrecededByTest1,The following statement contains a magic number: Assert.Equal(8' invokedCount1Sequence);
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,PrecededByTest2,The following statement contains a magic number: int sequence = 7;
Magic Number,NLog.UnitTests,AsyncHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\AsyncHelperTests.cs,PrecededByTest2,The following statement contains a magic number: Assert.Equal(7' invokedCount1Sequence);
Magic Number,NLog.UnitTests,ConfigFileLocatorTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\ConfigFileLocatorTests.cs,LoadConfigFile_EmptyEnvironment_UseCurrentDirectory,The following statement contains a magic number: Assert.Equal(2' result.Count);
Magic Number,NLog.UnitTests,ConfigFileLocatorTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\ConfigFileLocatorTests.cs,AssertResult,The following statement contains a magic number: Assert.Equal(4' result.Count);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TraceTest,The following statement contains a magic number: logger.Trace(CultureInfo.InvariantCulture' "message{0}"' (object)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TraceTest,The following statement contains a magic number: logger.Trace("message{0}{1}"' 1' 2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TraceTest,The following statement contains a magic number: logger.Trace("message{0}{1}{2}"' 1' 2' 3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TraceTest,The following statement contains a magic number: logger.Trace("message{0}{1}{2}"' 1' 2' 3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TraceTest,The following statement contains a magic number: logger.Trace(NLCulture' "message{0}{1}{2}"' 1.4' 2.5' 3.6);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TraceTest,The following statement contains a magic number: logger.Trace(NLCulture' "message{0}{1}{2}"' 1.4' 2.5' 3.6);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TraceTest,The following statement contains a magic number: logger.Trace(NLCulture' "message{0}{1}{2}"' 1.4' 2.5' 3.6);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TraceTest,The following statement contains a magic number: logger.Trace("message{0}"' (float)2.3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TraceTest,The following statement contains a magic number: logger.Trace("message{0}"' (double)2.3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TraceTest,The following statement contains a magic number: logger.Trace("message{0}"' (decimal)2.3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TraceTest,The following statement contains a magic number: logger.Trace("message{0}"' (object)2.3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TraceTest,The following statement contains a magic number: logger.Trace(NLCulture' "message{0}"' (object)2.3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TraceTest,The following statement contains a magic number: logger.Trace(CultureInfo.InvariantCulture' "message{0}"' (ulong)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TraceTest,The following statement contains a magic number: logger.Trace(CultureInfo.InvariantCulture' "message{0}"' (long)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TraceTest,The following statement contains a magic number: logger.Trace(CultureInfo.InvariantCulture' "message{0}"' (uint)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TraceTest,The following statement contains a magic number: logger.Trace(CultureInfo.InvariantCulture' "message{0}"' 2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TraceTest,The following statement contains a magic number: logger.Trace(CultureInfo.InvariantCulture' "message{0}"' (ushort)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TraceTest,The following statement contains a magic number: logger.Trace(CultureInfo.InvariantCulture' "message{0}"' (sbyte)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TraceTest,The following statement contains a magic number: logger.Trace(CultureInfo.InvariantCulture' "message{0}"' (short)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TraceTest,The following statement contains a magic number: logger.Trace(CultureInfo.InvariantCulture' "message{0}"' (byte)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TraceTest,The following statement contains a magic number: logger.Trace(CultureInfo.InvariantCulture' "message{0}{1}"' "eee"' 2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TraceTest,The following statement contains a magic number: logger.Trace(CultureInfo.InvariantCulture' "message{0}{1}{2}"' "eee"' 2' "fff");
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TraceTest,The following statement contains a magic number: logger.Trace("message{0}{1}{2}{3}"' "eee"' 2' "fff"' "ggg");
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TraceTest,The following statement contains a magic number: logger.Trace(CultureInfo.InvariantCulture' "message{0}"' (float)2.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TraceTest,The following statement contains a magic number: logger.Trace(CultureInfo.InvariantCulture' "message{0}"' 2.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TraceTest,The following statement contains a magic number: logger.Trace(CultureInfo.InvariantCulture' "message{0}"' (decimal)2.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TraceTest,The following statement contains a magic number: enabled < 2
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,DebugTest,The following statement contains a magic number: logger.Debug(CultureInfo.InvariantCulture' "message{0}"' (object)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,DebugTest,The following statement contains a magic number: logger.Debug("message{0}{1}"' 1' 2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,DebugTest,The following statement contains a magic number: logger.Debug("message{0}{1}{2}"' 1' 2' 3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,DebugTest,The following statement contains a magic number: logger.Debug("message{0}{1}{2}"' 1' 2' 3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,DebugTest,The following statement contains a magic number: logger.Debug(NLCulture' "message{0}{1}{2}"' 1.4' 2.5' 3.6);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,DebugTest,The following statement contains a magic number: logger.Debug(NLCulture' "message{0}{1}{2}"' 1.4' 2.5' 3.6);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,DebugTest,The following statement contains a magic number: logger.Debug(NLCulture' "message{0}{1}{2}"' 1.4' 2.5' 3.6);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,DebugTest,The following statement contains a magic number: logger.Debug("message{0}"' (float)2.3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,DebugTest,The following statement contains a magic number: logger.Debug("message{0}"' (double)2.3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,DebugTest,The following statement contains a magic number: logger.Debug("message{0}"' (decimal)2.3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,DebugTest,The following statement contains a magic number: logger.Debug("message{0}"' (object)2.3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,DebugTest,The following statement contains a magic number: logger.Debug(NLCulture' "message{0}"' (object)2.3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,DebugTest,The following statement contains a magic number: logger.Debug(CultureInfo.InvariantCulture' "message{0}"' (ulong)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,DebugTest,The following statement contains a magic number: logger.Debug(CultureInfo.InvariantCulture' "message{0}"' (long)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,DebugTest,The following statement contains a magic number: logger.Debug(CultureInfo.InvariantCulture' "message{0}"' (uint)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,DebugTest,The following statement contains a magic number: logger.Debug(CultureInfo.InvariantCulture' "message{0}"' 2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,DebugTest,The following statement contains a magic number: logger.Debug(CultureInfo.InvariantCulture' "message{0}"' (ushort)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,DebugTest,The following statement contains a magic number: logger.Debug(CultureInfo.InvariantCulture' "message{0}"' (sbyte)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,DebugTest,The following statement contains a magic number: logger.Debug(CultureInfo.InvariantCulture' "message{0}"' (short)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,DebugTest,The following statement contains a magic number: logger.Debug(CultureInfo.InvariantCulture' "message{0}"' (byte)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,DebugTest,The following statement contains a magic number: logger.Debug(CultureInfo.InvariantCulture' "message{0}{1}"' "eee"' 2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,DebugTest,The following statement contains a magic number: logger.Debug(CultureInfo.InvariantCulture' "message{0}{1}{2}"' "eee"' 2' "fff");
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,DebugTest,The following statement contains a magic number: logger.Debug("message{0}{1}{2}{3}"' "eee"' 2' "fff"' "ggg");
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,DebugTest,The following statement contains a magic number: logger.Debug(CultureInfo.InvariantCulture' "message{0}"' (float)2.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,DebugTest,The following statement contains a magic number: logger.Debug(CultureInfo.InvariantCulture' "message{0}"' 2.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,DebugTest,The following statement contains a magic number: logger.Debug(CultureInfo.InvariantCulture' "message{0}"' (decimal)2.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,DebugTest,The following statement contains a magic number: enabled < 2
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,InfoTest,The following statement contains a magic number: logger.Info(CultureInfo.InvariantCulture' "message{0}"' (object)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,InfoTest,The following statement contains a magic number: logger.Info("message{0}{1}"' 1' 2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,InfoTest,The following statement contains a magic number: logger.Info("message{0}{1}{2}"' 1' 2' 3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,InfoTest,The following statement contains a magic number: logger.Info("message{0}{1}{2}"' 1' 2' 3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,InfoTest,The following statement contains a magic number: logger.Info(NLCulture' "message{0}{1}{2}"' 1.4' 2.5' 3.6);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,InfoTest,The following statement contains a magic number: logger.Info(NLCulture' "message{0}{1}{2}"' 1.4' 2.5' 3.6);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,InfoTest,The following statement contains a magic number: logger.Info(NLCulture' "message{0}{1}{2}"' 1.4' 2.5' 3.6);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,InfoTest,The following statement contains a magic number: logger.Info("message{0}"' (float)2.3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,InfoTest,The following statement contains a magic number: logger.Info("message{0}"' (double)2.3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,InfoTest,The following statement contains a magic number: logger.Info("message{0}"' (decimal)2.3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,InfoTest,The following statement contains a magic number: logger.Info("message{0}"' (object)2.3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,InfoTest,The following statement contains a magic number: logger.Info(NLCulture' "message{0}"' (object)2.3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,InfoTest,The following statement contains a magic number: logger.Info(CultureInfo.InvariantCulture' "message{0}"' (ulong)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,InfoTest,The following statement contains a magic number: logger.Info(CultureInfo.InvariantCulture' "message{0}"' (long)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,InfoTest,The following statement contains a magic number: logger.Info(CultureInfo.InvariantCulture' "message{0}"' (uint)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,InfoTest,The following statement contains a magic number: logger.Info(CultureInfo.InvariantCulture' "message{0}"' 2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,InfoTest,The following statement contains a magic number: logger.Info(CultureInfo.InvariantCulture' "message{0}"' (ushort)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,InfoTest,The following statement contains a magic number: logger.Info(CultureInfo.InvariantCulture' "message{0}"' (sbyte)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,InfoTest,The following statement contains a magic number: logger.Info(CultureInfo.InvariantCulture' "message{0}"' (short)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,InfoTest,The following statement contains a magic number: logger.Info(CultureInfo.InvariantCulture' "message{0}"' (byte)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,InfoTest,The following statement contains a magic number: logger.Info(CultureInfo.InvariantCulture' "message{0}{1}"' "eee"' 2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,InfoTest,The following statement contains a magic number: logger.Info(CultureInfo.InvariantCulture' "message{0}{1}{2}"' "eee"' 2' "fff");
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,InfoTest,The following statement contains a magic number: logger.Info("message{0}{1}{2}{3}"' "eee"' 2' "fff"' "ggg");
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,InfoTest,The following statement contains a magic number: logger.Info(CultureInfo.InvariantCulture' "message{0}"' (float)2.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,InfoTest,The following statement contains a magic number: logger.Info(CultureInfo.InvariantCulture' "message{0}"' 2.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,InfoTest,The following statement contains a magic number: logger.Info(CultureInfo.InvariantCulture' "message{0}"' (decimal)2.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,InfoTest,The following statement contains a magic number: enabled < 2
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,WarnTest,The following statement contains a magic number: logger.Warn(CultureInfo.InvariantCulture' "message{0}"' (object)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,WarnTest,The following statement contains a magic number: logger.Warn("message{0}{1}"' 1' 2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,WarnTest,The following statement contains a magic number: logger.Warn("message{0}{1}{2}"' 1' 2' 3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,WarnTest,The following statement contains a magic number: logger.Warn("message{0}{1}{2}"' 1' 2' 3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,WarnTest,The following statement contains a magic number: logger.Warn(NLCulture' "message{0}{1}{2}"' 1.4' 2.5' 3.6);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,WarnTest,The following statement contains a magic number: logger.Warn(NLCulture' "message{0}{1}{2}"' 1.4' 2.5' 3.6);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,WarnTest,The following statement contains a magic number: logger.Warn(NLCulture' "message{0}{1}{2}"' 1.4' 2.5' 3.6);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,WarnTest,The following statement contains a magic number: logger.Warn("message{0}"' (float)2.3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,WarnTest,The following statement contains a magic number: logger.Warn("message{0}"' (double)2.3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,WarnTest,The following statement contains a magic number: logger.Warn("message{0}"' (decimal)2.3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,WarnTest,The following statement contains a magic number: logger.Warn("message{0}"' (object)2.3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,WarnTest,The following statement contains a magic number: logger.Warn(NLCulture' "message{0}"' (object)2.3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,WarnTest,The following statement contains a magic number: logger.Warn(CultureInfo.InvariantCulture' "message{0}"' (ulong)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,WarnTest,The following statement contains a magic number: logger.Warn(CultureInfo.InvariantCulture' "message{0}"' (long)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,WarnTest,The following statement contains a magic number: logger.Warn(CultureInfo.InvariantCulture' "message{0}"' (uint)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,WarnTest,The following statement contains a magic number: logger.Warn(CultureInfo.InvariantCulture' "message{0}"' 2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,WarnTest,The following statement contains a magic number: logger.Warn(CultureInfo.InvariantCulture' "message{0}"' (ushort)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,WarnTest,The following statement contains a magic number: logger.Warn(CultureInfo.InvariantCulture' "message{0}"' (sbyte)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,WarnTest,The following statement contains a magic number: logger.Warn(CultureInfo.InvariantCulture' "message{0}"' (short)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,WarnTest,The following statement contains a magic number: logger.Warn(CultureInfo.InvariantCulture' "message{0}"' (byte)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,WarnTest,The following statement contains a magic number: logger.Warn(CultureInfo.InvariantCulture' "message{0}{1}"' "eee"' 2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,WarnTest,The following statement contains a magic number: logger.Warn(CultureInfo.InvariantCulture' "message{0}{1}{2}"' "eee"' 2' "fff");
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,WarnTest,The following statement contains a magic number: logger.Warn("message{0}{1}{2}{3}"' "eee"' 2' "fff"' "ggg");
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,WarnTest,The following statement contains a magic number: logger.Warn(CultureInfo.InvariantCulture' "message{0}"' (float)2.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,WarnTest,The following statement contains a magic number: logger.Warn(CultureInfo.InvariantCulture' "message{0}"' 2.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,WarnTest,The following statement contains a magic number: logger.Warn(CultureInfo.InvariantCulture' "message{0}"' (decimal)2.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,WarnTest,The following statement contains a magic number: enabled < 2
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ErrorTest,The following statement contains a magic number: logger.Error(CultureInfo.InvariantCulture' "message{0}"' (object)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ErrorTest,The following statement contains a magic number: logger.Error("message{0}{1}"' 1' 2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ErrorTest,The following statement contains a magic number: logger.Error("message{0}{1}{2}"' 1' 2' 3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ErrorTest,The following statement contains a magic number: logger.Error("message{0}{1}{2}"' 1' 2' 3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ErrorTest,The following statement contains a magic number: logger.Error(NLCulture' "message{0}{1}{2}"' 1.4' 2.5' 3.6);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ErrorTest,The following statement contains a magic number: logger.Error(NLCulture' "message{0}{1}{2}"' 1.4' 2.5' 3.6);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ErrorTest,The following statement contains a magic number: logger.Error(NLCulture' "message{0}{1}{2}"' 1.4' 2.5' 3.6);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ErrorTest,The following statement contains a magic number: logger.Error("message{0}"' (float)2.3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ErrorTest,The following statement contains a magic number: logger.Error("message{0}"' (double)2.3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ErrorTest,The following statement contains a magic number: logger.Error("message{0}"' (decimal)2.3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ErrorTest,The following statement contains a magic number: logger.Error("message{0}"' (object)2.3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ErrorTest,The following statement contains a magic number: logger.Error(NLCulture' "message{0}"' (object)2.3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ErrorTest,The following statement contains a magic number: logger.Error(CultureInfo.InvariantCulture' "message{0}"' (ulong)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ErrorTest,The following statement contains a magic number: logger.Error(CultureInfo.InvariantCulture' "message{0}"' (long)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ErrorTest,The following statement contains a magic number: logger.Error(CultureInfo.InvariantCulture' "message{0}"' (uint)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ErrorTest,The following statement contains a magic number: logger.Error(CultureInfo.InvariantCulture' "message{0}"' 2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ErrorTest,The following statement contains a magic number: logger.Error(CultureInfo.InvariantCulture' "message{0}"' (ushort)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ErrorTest,The following statement contains a magic number: logger.Error(CultureInfo.InvariantCulture' "message{0}"' (sbyte)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ErrorTest,The following statement contains a magic number: logger.Error(CultureInfo.InvariantCulture' "message{0}"' (short)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ErrorTest,The following statement contains a magic number: logger.Error(CultureInfo.InvariantCulture' "message{0}"' (byte)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ErrorTest,The following statement contains a magic number: logger.Error(CultureInfo.InvariantCulture' "message{0}{1}"' "eee"' 2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ErrorTest,The following statement contains a magic number: logger.Error(CultureInfo.InvariantCulture' "message{0}{1}{2}"' "eee"' 2' "fff");
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ErrorTest,The following statement contains a magic number: logger.Error("message{0}{1}{2}{3}"' "eee"' 2' "fff"' "ggg");
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ErrorTest,The following statement contains a magic number: logger.Error(CultureInfo.InvariantCulture' "message{0}"' (float)2.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ErrorTest,The following statement contains a magic number: logger.Error(CultureInfo.InvariantCulture' "message{0}"' 2.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ErrorTest,The following statement contains a magic number: logger.Error(CultureInfo.InvariantCulture' "message{0}"' (decimal)2.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ErrorTest,The following statement contains a magic number: enabled < 2
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,FatalTest,The following statement contains a magic number: logger.Fatal(CultureInfo.InvariantCulture' "message{0}"' (object)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,FatalTest,The following statement contains a magic number: logger.Fatal("message{0}{1}"' 1' 2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,FatalTest,The following statement contains a magic number: logger.Fatal("message{0}{1}{2}"' 1' 2' 3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,FatalTest,The following statement contains a magic number: logger.Fatal("message{0}{1}{2}"' 1' 2' 3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,FatalTest,The following statement contains a magic number: logger.Fatal(NLCulture' "message{0}{1}{2}"' 1.4' 2.5' 3.6);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,FatalTest,The following statement contains a magic number: logger.Fatal(NLCulture' "message{0}{1}{2}"' 1.4' 2.5' 3.6);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,FatalTest,The following statement contains a magic number: logger.Fatal(NLCulture' "message{0}{1}{2}"' 1.4' 2.5' 3.6);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,FatalTest,The following statement contains a magic number: logger.Fatal("message{0}"' (float)2.3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,FatalTest,The following statement contains a magic number: logger.Fatal("message{0}"' (double)2.3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,FatalTest,The following statement contains a magic number: logger.Fatal("message{0}"' (decimal)2.3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,FatalTest,The following statement contains a magic number: logger.Fatal("message{0}"' (object)2.3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,FatalTest,The following statement contains a magic number: logger.Fatal(NLCulture' "message{0}"' (object)2.3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,FatalTest,The following statement contains a magic number: logger.Fatal(CultureInfo.InvariantCulture' "message{0}"' (ulong)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,FatalTest,The following statement contains a magic number: logger.Fatal(CultureInfo.InvariantCulture' "message{0}"' (long)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,FatalTest,The following statement contains a magic number: logger.Fatal(CultureInfo.InvariantCulture' "message{0}"' (uint)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,FatalTest,The following statement contains a magic number: logger.Fatal(CultureInfo.InvariantCulture' "message{0}"' 2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,FatalTest,The following statement contains a magic number: logger.Fatal(CultureInfo.InvariantCulture' "message{0}"' (ushort)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,FatalTest,The following statement contains a magic number: logger.Fatal(CultureInfo.InvariantCulture' "message{0}"' (sbyte)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,FatalTest,The following statement contains a magic number: logger.Fatal(CultureInfo.InvariantCulture' "message{0}"' (short)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,FatalTest,The following statement contains a magic number: logger.Fatal(CultureInfo.InvariantCulture' "message{0}"' (byte)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,FatalTest,The following statement contains a magic number: logger.Fatal(CultureInfo.InvariantCulture' "message{0}{1}"' "eee"' 2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,FatalTest,The following statement contains a magic number: logger.Fatal(CultureInfo.InvariantCulture' "message{0}{1}{2}"' "eee"' 2' "fff");
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,FatalTest,The following statement contains a magic number: logger.Fatal("message{0}{1}{2}{3}"' "eee"' 2' "fff"' "ggg");
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,FatalTest,The following statement contains a magic number: logger.Fatal(CultureInfo.InvariantCulture' "message{0}"' (float)2.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,FatalTest,The following statement contains a magic number: logger.Fatal(CultureInfo.InvariantCulture' "message{0}"' 2.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,FatalTest,The following statement contains a magic number: logger.Fatal(CultureInfo.InvariantCulture' "message{0}"' (decimal)2.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,FatalTest,The following statement contains a magic number: enabled < 2
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,LogTest,The following statement contains a magic number: logger.Log(level' CultureInfo.InvariantCulture' "message{0}"' (ulong)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,LogTest,The following statement contains a magic number: logger.Log(level' CultureInfo.InvariantCulture' "message{0}"' (long)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,LogTest,The following statement contains a magic number: logger.Log(level' CultureInfo.InvariantCulture' "message{0}"' (uint)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,LogTest,The following statement contains a magic number: logger.Log(level' CultureInfo.InvariantCulture' "message{0}"' (int)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,LogTest,The following statement contains a magic number: logger.Log(level' CultureInfo.InvariantCulture' "message{0}"' (ushort)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,LogTest,The following statement contains a magic number: logger.Log(level' CultureInfo.InvariantCulture' "message{0}"' (sbyte)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,LogTest,The following statement contains a magic number: logger.Log(level' CultureInfo.InvariantCulture' "message{0}"' (short)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,LogTest,The following statement contains a magic number: logger.Log(level' CultureInfo.InvariantCulture' "message{0}"' (byte)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,LogTest,The following statement contains a magic number: logger.Log(level' CultureInfo.InvariantCulture' "message{0}{1}"' "eee"' 2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,LogTest,The following statement contains a magic number: logger.Log(level' CultureInfo.InvariantCulture' "message{0}{1}{2}"' "eee"' 2' "fff");
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,LogTest,The following statement contains a magic number: logger.Log(level' "message{0}{1}{2}{3}"' "eee"' 2' "fff"' "ggg");
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,LogTest,The following statement contains a magic number: logger.Log(level' CultureInfo.InvariantCulture' "message{0}"' (float)2.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,LogTest,The following statement contains a magic number: logger.Log(level' CultureInfo.InvariantCulture' "message{0}"' (double)2.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,LogTest,The following statement contains a magic number: logger.Log(level' CultureInfo.InvariantCulture' "message{0}"' (decimal)2.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,LogTest,The following statement contains a magic number: enabled < 2
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(404);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(NLCulture' 404.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(NLCulture' "hello error {0} !"' 404.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(NLCulture' "hello error {0} and {1} !"' 404.5' 401);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(NLCulture' "hello error {0} and {1} !"' 404.5' 401);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(NLCulture' "hello error {0}' {1} & {2} !"' 404.5' 401' 500);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(NLCulture' "hello error {0}' {1} & {2} !"' 404.5' 401' 500);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(NLCulture' "hello error {0}' {1} & {2} !"' 404.5' 401' 500);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(NLCulture' "we've got error {0}' {1}' {2}' {3} ..."' 500' 501' 502' 503);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(NLCulture' "we've got error {0}' {1}' {2}' {3} ..."' 500' 501' 502' 503);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(NLCulture' "we've got error {0}' {1}' {2}' {3} ..."' 500' 501' 502' 503);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(NLCulture' "we've got error {0}' {1}' {2}' {3} ..."' 500' 501' 502' 503);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(argException' NLCulture' "we've got error {0}' {1}' {2}' {3} ..."' 500' 501' 502' 503.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(argException' NLCulture' "we've got error {0}' {1}' {2}' {3} ..."' 500' 501' 502' 503.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(argException' NLCulture' "we've got error {0}' {1}' {2}' {3} ..."' 500' 501' 502' 503.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(argException' NLCulture' "we've got error {0}' {1}' {2}' {3} ..."' 500' 501' 502' 503.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(argException' "we've got error {0}' {1}' {2}' {3} ..."' 500' 501' 502' 503.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(argException' "we've got error {0}' {1}' {2}' {3} ..."' 500' 501' 502' 503.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(argException' "we've got error {0}' {1}' {2}' {3} ..."' 500' 501' 502' 503.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(argException' "we've got error {0}' {1}' {2}' {3} ..."' 500' 501' 502' 503.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(CultureInfo.InvariantCulture' "message{0}"' (ulong)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(CultureInfo.InvariantCulture' "message{0}"' (long)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(CultureInfo.InvariantCulture' "message{0}"' (uint)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(CultureInfo.InvariantCulture' "message{0}"' 2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(CultureInfo.InvariantCulture' "message{0}"' (ushort)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(CultureInfo.InvariantCulture' "message{0}"' (sbyte)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(CultureInfo.InvariantCulture' "message{0}"' (short)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(CultureInfo.InvariantCulture' "message{0}"' (byte)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(CultureInfo.InvariantCulture' "message{0}{1}"' "eee"' 2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(CultureInfo.InvariantCulture' "message{0}{1}{2}"' "eee"' 2' "fff");
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace("message{0}{1}{2}{3}"' "eee"' 2' "fff"' "ggg");
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(CultureInfo.InvariantCulture' "message{0}"' (float)2.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(CultureInfo.InvariantCulture' "message{0}"' 2.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: logger.ConditionalTrace(CultureInfo.InvariantCulture' "message{0}"' (decimal)2.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalTraceTest,The following statement contains a magic number: enabled < 2
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(404);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(NLCulture' 404.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(NLCulture' "hello error {0} !"' 404.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(NLCulture' "hello error {0} and {1} !"' 404.5' 401);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(NLCulture' "hello error {0} and {1} !"' 404.5' 401);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(NLCulture' "hello error {0}' {1} & {2} !"' 404.5' 401' 500);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(NLCulture' "hello error {0}' {1} & {2} !"' 404.5' 401' 500);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(NLCulture' "hello error {0}' {1} & {2} !"' 404.5' 401' 500);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(NLCulture' "we've got error {0}' {1}' {2}' {3} ..."' 500' 501' 502' 503);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(NLCulture' "we've got error {0}' {1}' {2}' {3} ..."' 500' 501' 502' 503);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(NLCulture' "we've got error {0}' {1}' {2}' {3} ..."' 500' 501' 502' 503);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(NLCulture' "we've got error {0}' {1}' {2}' {3} ..."' 500' 501' 502' 503);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(argException' NLCulture' "we've got error {0}' {1}' {2}' {3} ..."' 500' 501' 502' 503.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(argException' NLCulture' "we've got error {0}' {1}' {2}' {3} ..."' 500' 501' 502' 503.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(argException' NLCulture' "we've got error {0}' {1}' {2}' {3} ..."' 500' 501' 502' 503.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(argException' NLCulture' "we've got error {0}' {1}' {2}' {3} ..."' 500' 501' 502' 503.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(argException' "we've got error {0}' {1}' {2}' {3} ..."' 500' 501' 502' 503.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(argException' "we've got error {0}' {1}' {2}' {3} ..."' 500' 501' 502' 503.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(argException' "we've got error {0}' {1}' {2}' {3} ..."' 500' 501' 502' 503.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(argException' "we've got error {0}' {1}' {2}' {3} ..."' 500' 501' 502' 503.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(CultureInfo.InvariantCulture' "message{0}"' (ulong)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(CultureInfo.InvariantCulture' "message{0}"' (long)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(CultureInfo.InvariantCulture' "message{0}"' (uint)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(CultureInfo.InvariantCulture' "message{0}"' 2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(CultureInfo.InvariantCulture' "message{0}"' (ushort)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(CultureInfo.InvariantCulture' "message{0}"' (sbyte)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(CultureInfo.InvariantCulture' "message{0}"' (short)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(CultureInfo.InvariantCulture' "message{0}"' (byte)2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(CultureInfo.InvariantCulture' "message{0}{1}"' "eee"' 2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(CultureInfo.InvariantCulture' "message{0}{1}{2}"' "eee"' 2' "fff");
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug("message{0}{1}{2}{3}"' "eee"' 2' "fff"' "ggg");
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(CultureInfo.InvariantCulture' "message{0}"' (float)2.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(CultureInfo.InvariantCulture' "message{0}"' 2.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: logger.ConditionalDebug(CultureInfo.InvariantCulture' "message{0}"' (decimal)2.5);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,ConditionalDebugTest,The following statement contains a magic number: enabled < 2
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,SwallowTest,The following statement contains a magic number: Assert.Equal(1' logger.Swallow(() => 1' 2));
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,SwallowTest,The following statement contains a magic number: logger.SwallowAsync(async () => { await Task.Delay(20); ++executions; }).Wait();
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,SwallowTest,The following statement contains a magic number: Assert.True(executions == 2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,SwallowTest,The following statement contains a magic number: Assert.Equal(1' logger.SwallowAsync(async () => { await Task.Delay(20); return 1; }).Result);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,SwallowTest,The following statement contains a magic number: Assert.Equal(1' logger.SwallowAsync(async () => { await Task.Delay(20); return 1; }' 2).Result);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,SwallowTest,The following statement contains a magic number: Assert.Equal(1' logger.SwallowAsync(async () => { await Task.Delay(20); return 1; }' 2).Result);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,SwallowTest,The following statement contains a magic number: Assert.Equal(2' logger.Swallow(() => { if (warningFix) throw new InvalidOperationException("Test message 3"); return 1; }' 2));
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,SwallowTest,The following statement contains a magic number: Assert.Equal(2' logger.Swallow(() => { if (warningFix) throw new InvalidOperationException("Test message 3"); return 1; }' 2));
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,SwallowTest,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,SwallowTest,The following statement contains a magic number: logger.SwallowAsync(async () => { await Task.Delay(20); throw new InvalidOperationException("Test message 5"); }).Wait();
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,SwallowTest,The following statement contains a magic number: Assert.Equal(0' logger.SwallowAsync(async () => { await Task.Delay(20); if (warningFix) throw new InvalidOperationException("Test message 6"); return 1; }).Result);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,SwallowTest,The following statement contains a magic number: Assert.Equal(2' logger.SwallowAsync(async () => { await Task.Delay(20); if (warningFix) throw new InvalidOperationException("Test message 7"); return 1; }' 2).Result);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,SwallowTest,The following statement contains a magic number: Assert.Equal(2' logger.SwallowAsync(async () => { await Task.Delay(20); if (warningFix) throw new InvalidOperationException("Test message 7"); return 1; }' 2).Result);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,SwallowTest,The following statement contains a magic number: Assert.Equal(2' logger.SwallowAsync(async () => { await Task.Delay(20); if (warningFix) throw new InvalidOperationException("Test message 7"); return 1; }' 2).Result);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,MixedStructuredEventsConfigTest,The following statement contains a magic number: logger.Debug("Process order {" + param1 + "} for {" + param2 + "}"' 13424' new { ClientId = 3001' ClientName = "John Doe" });
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,MixedStructuredEventsConfigTest,The following statement contains a magic number: logger.Debug("Process order {" + param1 + "} for {" + param2 + "}"' 13424' new { ClientId = 3001' ClientName = "John Doe" });
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,TooManyStructuredParametersShouldKeepBeInParamList,The following statement contains a magic number: Assert.Equal(2' target.LastEvent.Parameters.Length);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,StructuredEventsTest1,The following statement contains a magic number: logger.Error("Test structured logging in {NLogVersion} for .NET {NETVersion}"' "4.5-alpha01"' new[] { 3.5' 4' 4.5 });
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,StructuredEventsTest1,The following statement contains a magic number: logger.Error("Test structured logging in {NLogVersion} for .NET {NETVersion}"' "4.5-alpha01"' new[] { 3.5' 4' 4.5 });
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,StructuredEventsTest1,The following statement contains a magic number: logger.Error("Test structured logging in {NLogVersion} for .NET {NETVersion}"' "4.5-alpha01"' new[] { 3.5' 4' 4.5 });
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,StructuredEventsTest1,The following statement contains a magic number: logger.Error("hello from {FamilyNames}"' new Dictionary<int' string>() { { 1' "James" }' { 2' "Mike" }' { 3' "Jane" } });
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,StructuredEventsTest1,The following statement contains a magic number: logger.Error("hello from {FamilyNames}"' new Dictionary<int' string>() { { 1' "James" }' { 2' "Mike" }' { 3' "Jane" } });
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,StructuredEventsTest1,The following statement contains a magic number: logger.Error("message {a} {b}"' 1' 2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,StructuredEventsTest1,The following statement contains a magic number: logger.Error("message{a}{b}{c}"' 1' 2' 3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,StructuredEventsTest1,The following statement contains a magic number: logger.Error("message{a}{b}{c}"' 1' 2' 3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,StructuredEventsTest1,The following statement contains a magic number: logger.Error("message{a}{b}{c}"' 1' 2' 3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,StructuredEventsTest1,The following statement contains a magic number: logger.Error("message{a}{b}{c}"' 1' 2' 3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,StructuredEventsTest1,The following statement contains a magic number: logger.Error("message{a'2}{b'-2}{c'1}{d'-1}{f'1}"' 1' 2' 3' 4' "");
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,StructuredEventsTest1,The following statement contains a magic number: logger.Error("message{a'2}{b'-2}{c'1}{d'-1}{f'1}"' 1' 2' 3' 4' "");
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,StructuredEventsTest1,The following statement contains a magic number: logger.Error("message{a'2}{b'-2}{c'1}{d'-1}{f'1}"' 1' 2' 3' 4' "");
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,StructuredEventsTest1,The following statement contains a magic number: enabled < 2
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,LogEventTemplateHandleTrickyDictionary,The following statement contains a magic number: dictionary.Add("key1"' 13);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,LogEventTemplateHandleTrickyDictionary,The following statement contains a magic number: dictionary.Add("key 2"' 1.3m);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,LogEventTemplateShouldOverrideProperties,The following statement contains a magic number: var loggerStage2 = loggerStage1.WithProperty("Stage"' 2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,LogEventTemplateShouldOverrideProperties,The following statement contains a magic number: Assert.Equal(2' target.LastEvent.Properties.Count);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,LogEventTemplateShouldOverrideProperties,The following statement contains a magic number: Assert.Equal(2' target.LastEvent.Properties.Count);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,LogEventTemplateShouldOverrideProperties,The following statement contains a magic number: AssertContainsInDictionary(target.LastEvent.Properties' "Stage"' 2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,LoggerWithPropertyShouldInheritLogLevel,The following statement contains a magic number: var loggerStage2 = loggerStage1.WithProperty("Stage"' 2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,LoggerSetPropertyChangesCurrentLogger,The following statement contains a magic number: var loggerStage2 = globalLogger.WithProperty("Stage"' 2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,LoggerSetPropertyChangesCurrentLogger,The following statement contains a magic number: AssertContainsInDictionary(target.LastEvent.Properties' "Stage"' 2);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,LoggerSetPropertyChangesCurrentLogger,The following statement contains a magic number: globalLogger.SetProperty("Stage"' 4);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,LoggerSetPropertyChangesCurrentLogger,The following statement contains a magic number: loggerStage2.SetProperty("Stage"' 3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,LoggerSetPropertyChangesCurrentLogger,The following statement contains a magic number: AssertContainsInDictionary(target.LastEvent.Properties' "Stage"' 3);
Magic Number,NLog.UnitTests,LoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LoggerTests.cs,LoggerSetPropertyChangesCurrentLogger,The following statement contains a magic number: AssertContainsInDictionary(target.LastEvent.Properties' "Stage"' 4);
Magic Number,NLog.UnitTests,LogLevelTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogLevelTests.cs,LogLevelFromOrdinal_InputInRange_ExpectValidLevel,The following statement contains a magic number: Assert.Same(LogLevel.FromOrdinal(2)' LogLevel.Info);
Magic Number,NLog.UnitTests,LogLevelTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogLevelTests.cs,LogLevelFromOrdinal_InputInRange_ExpectValidLevel,The following statement contains a magic number: Assert.Same(LogLevel.FromOrdinal(3)' LogLevel.Warn);
Magic Number,NLog.UnitTests,LogLevelTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogLevelTests.cs,LogLevelFromOrdinal_InputInRange_ExpectValidLevel,The following statement contains a magic number: Assert.Same(LogLevel.FromOrdinal(4)' LogLevel.Error);
Magic Number,NLog.UnitTests,LogLevelTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogLevelTests.cs,LogLevelFromOrdinal_InputInRange_ExpectValidLevel,The following statement contains a magic number: Assert.Same(LogLevel.FromOrdinal(5)' LogLevel.Fatal);
Magic Number,NLog.UnitTests,LogLevelTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogLevelTests.cs,LogLevelFromOrdinal_InputInRange_ExpectValidLevel,The following statement contains a magic number: Assert.Same(LogLevel.FromOrdinal(6)' LogLevel.Off);
Magic Number,NLog.UnitTests,LogLevelTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogLevelTests.cs,LogLevelFromOrdinal_InputOutOfRange_ExpectException,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => LogLevel.FromOrdinal(100));
Magic Number,NLog.UnitTests,LogLevelTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogLevelTests.cs,LogLevelFromOrdinal_InputOutOfRange_ExpectException,The following statement contains a magic number: Assert.Throws<ArgumentException>(() => LogLevel.FromOrdinal(7));
Magic Number,NLog.UnitTests,LogLevelTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogLevelTests.cs,LogLevelCompareTo_ValidLevels_ExpectIntValues,The following statement contains a magic number: Assert.Equal(2' LogLevel.Info.CompareTo(levelMin));
Magic Number,NLog.UnitTests,LogLevelTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogLevelTests.cs,LogLevelCompareTo_ValidLevels_ExpectIntValues,The following statement contains a magic number: Assert.Equal(3' LogLevel.Warn.CompareTo(levelMin));
Magic Number,NLog.UnitTests,LogLevelTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogLevelTests.cs,LogLevelCompareTo_ValidLevels_ExpectIntValues,The following statement contains a magic number: Assert.Equal(4' LogLevel.Error.CompareTo(levelMin));
Magic Number,NLog.UnitTests,LogLevelTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogLevelTests.cs,LogLevelCompareTo_ValidLevels_ExpectIntValues,The following statement contains a magic number: Assert.Equal(5' LogLevel.Fatal.CompareTo(levelMin));
Magic Number,NLog.UnitTests,LogLevelTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogLevelTests.cs,LogLevelCompareTo_ValidLevels_ExpectIntValues,The following statement contains a magic number: Assert.Equal(6' LogLevel.Off.CompareTo(levelMin));
Magic Number,NLog.UnitTests,LogLevelTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogLevelTests.cs,LogLevelCompareTo_ValidLevels_ExpectIntValues,The following statement contains a magic number: Assert.Equal(LogLevel.Trace.CompareTo(levelMax)' -5);
Magic Number,NLog.UnitTests,LogLevelTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogLevelTests.cs,LogLevelCompareTo_ValidLevels_ExpectIntValues,The following statement contains a magic number: Assert.Equal(LogLevel.Debug.CompareTo(levelMax)' -4);
Magic Number,NLog.UnitTests,LogLevelTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogLevelTests.cs,LogLevelCompareTo_ValidLevels_ExpectIntValues,The following statement contains a magic number: Assert.Equal(LogLevel.Info.CompareTo(levelMax)' -3);
Magic Number,NLog.UnitTests,LogLevelTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogLevelTests.cs,LogLevelCompareTo_ValidLevels_ExpectIntValues,The following statement contains a magic number: Assert.Equal(LogLevel.Warn.CompareTo(levelMax)' -2);
Magic Number,NLog.UnitTests,LogLevelTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogLevelTests.cs,LogLevelGetHashCode,The following statement contains a magic number: Assert.Equal(2' LogLevel.Info.GetHashCode());
Magic Number,NLog.UnitTests,LogLevelTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogLevelTests.cs,LogLevelGetHashCode,The following statement contains a magic number: Assert.Equal(3' LogLevel.Warn.GetHashCode());
Magic Number,NLog.UnitTests,LogLevelTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogLevelTests.cs,LogLevelGetHashCode,The following statement contains a magic number: Assert.Equal(4' LogLevel.Error.GetHashCode());
Magic Number,NLog.UnitTests,LogLevelTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogLevelTests.cs,LogLevelGetHashCode,The following statement contains a magic number: Assert.Equal(5' LogLevel.Fatal.GetHashCode());
Magic Number,NLog.UnitTests,LogLevelTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogLevelTests.cs,LogLevelGetHashCode,The following statement contains a magic number: Assert.Equal(6' LogLevel.Off.GetHashCode());
Magic Number,NLog.UnitTests,LogManagerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogManagerTests.cs,GarbageCollection2Test,The following statement contains a magic number: GC.Collect(2' GCCollectionMode.Forced' true);
Magic Number,NLog.UnitTests,LogManagerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogManagerTests.cs,WaitForConfigReload,The following statement contains a magic number: System.Threading.Thread.Sleep(100);
Magic Number,NLog.UnitTests,LogManagerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogManagerTests.cs,AutoReloadTest,The following statement contains a magic number: WaitForConfigReload(2);
Magic Number,NLog.UnitTests,LogManagerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogManagerTests.cs,AutoReloadTest,The following statement contains a magic number: WaitForConfigReload(3);
Magic Number,NLog.UnitTests,LogManagerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogManagerTests.cs,ThreadSafe_Shutdown,The following statement contains a magic number: LogManager.Configuration.AddTarget("memory"' new NLog.Targets.Wrappers.BufferingTargetWrapper(new MemoryTarget() { MaxLogsCount = 500 }' 5' 1));
Magic Number,NLog.UnitTests,LogManagerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogManagerTests.cs,ThreadSafe_Shutdown,The following statement contains a magic number: LogManager.Configuration.AddTarget("memory"' new NLog.Targets.Wrappers.BufferingTargetWrapper(new MemoryTarget() { MaxLogsCount = 500 }' 5' 1));
Magic Number,NLog.UnitTests,LogManagerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogManagerTests.cs,ThreadSafe_Shutdown,The following statement contains a magic number: LogManager.Configuration.AddTarget("memory2"' new NLog.Targets.Wrappers.BufferingTargetWrapper(new MemoryTarget() { MaxLogsCount = 500 }' 5' 1));
Magic Number,NLog.UnitTests,LogManagerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogManagerTests.cs,ThreadSafe_Shutdown,The following statement contains a magic number: LogManager.Configuration.AddTarget("memory2"' new NLog.Targets.Wrappers.BufferingTargetWrapper(new MemoryTarget() { MaxLogsCount = 500 }' 5' 1));
Magic Number,NLog.UnitTests,LogManagerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogManagerTests.cs,ThreadSafe_Shutdown,The following statement contains a magic number: System.Threading.Thread.Sleep(20);
Magic Number,NLog.UnitTests,LogManagerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogManagerTests.cs,ThreadSafe_Shutdown,The following statement contains a magic number: System.Threading.Thread.Sleep(20);
Magic Number,NLog.UnitTests,LogManagerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogManagerTests.cs,ThreadSafe_Shutdown,The following statement contains a magic number: System.Threading.Thread.Sleep(20);
Magic Number,NLog.UnitTests,LogManagerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogManagerTests.cs,ThreadSafe_getCurrentClassLogger_test,The following statement contains a magic number: MemoryTarget mTarget = new MemoryTarget() { Name = "memory"' MaxLogsCount = 1000 };
Magic Number,NLog.UnitTests,LogManagerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogManagerTests.cs,ThreadSafe_getCurrentClassLogger_test,The following statement contains a magic number: MemoryTarget mTarget2 = new MemoryTarget() { Name = "memory2"' MaxLogsCount = 1000 };
Magic Number,NLog.UnitTests,LogManagerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogManagerTests.cs,ThreadSafe_getCurrentClassLogger_test,The following statement contains a magic number: Parallel.For(0' 8' new ParallelOptions() { MaxDegreeOfParallelism = 8 }' (e) =>              {                  bool task1Complete = false' task2Complete = false;                  for (int i = 0; i < 100; ++i)                  {                      if (i > 25 && !task1Complete)                      {                          task1.Wait(5000);                          task1Complete = true;                      }                      if (i > 75 && !task2Complete)                      {                          task2.Wait(5000);                          task2Complete = true;                      }                        // Multiple threads initializing new loggers while configuration is changing                      var loggerA = LogManager.GetLogger(e + "A" + i);                      loggerA.Info("Hi there {0}"' e);                      var loggerB = LogManager.GetLogger(e + "B" + i);                      loggerB.Info("Hi there {0}"' e);                      var loggerC = LogManager.GetLogger(e + "C" + i);                      loggerC.Info("Hi there {0}"' e);                      var loggerD = LogManager.GetLogger(e + "D" + i);                      loggerD.Info("Hi there {0}"' e);                  };              });
Magic Number,NLog.UnitTests,LogManagerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogManagerTests.cs,ThreadSafe_getCurrentClassLogger_test,The following statement contains a magic number: Parallel.For(0' 8' new ParallelOptions() { MaxDegreeOfParallelism = 8 }' (e) =>              {                  bool task1Complete = false' task2Complete = false;                  for (int i = 0; i < 100; ++i)                  {                      if (i > 25 && !task1Complete)                      {                          task1.Wait(5000);                          task1Complete = true;                      }                      if (i > 75 && !task2Complete)                      {                          task2.Wait(5000);                          task2Complete = true;                      }                        // Multiple threads initializing new loggers while configuration is changing                      var loggerA = LogManager.GetLogger(e + "A" + i);                      loggerA.Info("Hi there {0}"' e);                      var loggerB = LogManager.GetLogger(e + "B" + i);                      loggerB.Info("Hi there {0}"' e);                      var loggerC = LogManager.GetLogger(e + "C" + i);                      loggerC.Info("Hi there {0}"' e);                      var loggerD = LogManager.GetLogger(e + "D" + i);                      loggerD.Info("Hi there {0}"' e);                  };              });
Magic Number,NLog.UnitTests,LogManagerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogManagerTests.cs,ThreadSafe_getCurrentClassLogger_test,The following statement contains a magic number: Parallel.For(0' 8' new ParallelOptions() { MaxDegreeOfParallelism = 8 }' (e) =>              {                  bool task1Complete = false' task2Complete = false;                  for (int i = 0; i < 100; ++i)                  {                      if (i > 25 && !task1Complete)                      {                          task1.Wait(5000);                          task1Complete = true;                      }                      if (i > 75 && !task2Complete)                      {                          task2.Wait(5000);                          task2Complete = true;                      }                        // Multiple threads initializing new loggers while configuration is changing                      var loggerA = LogManager.GetLogger(e + "A" + i);                      loggerA.Info("Hi there {0}"' e);                      var loggerB = LogManager.GetLogger(e + "B" + i);                      loggerB.Info("Hi there {0}"' e);                      var loggerC = LogManager.GetLogger(e + "C" + i);                      loggerC.Info("Hi there {0}"' e);                      var loggerD = LogManager.GetLogger(e + "D" + i);                      loggerD.Info("Hi there {0}"' e);                  };              });
Magic Number,NLog.UnitTests,LogManagerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogManagerTests.cs,ThreadSafe_getCurrentClassLogger_test,The following statement contains a magic number: Parallel.For(0' 8' new ParallelOptions() { MaxDegreeOfParallelism = 8 }' (e) =>              {                  bool task1Complete = false' task2Complete = false;                  for (int i = 0; i < 100; ++i)                  {                      if (i > 25 && !task1Complete)                      {                          task1.Wait(5000);                          task1Complete = true;                      }                      if (i > 75 && !task2Complete)                      {                          task2.Wait(5000);                          task2Complete = true;                      }                        // Multiple threads initializing new loggers while configuration is changing                      var loggerA = LogManager.GetLogger(e + "A" + i);                      loggerA.Info("Hi there {0}"' e);                      var loggerB = LogManager.GetLogger(e + "B" + i);                      loggerB.Info("Hi there {0}"' e);                      var loggerC = LogManager.GetLogger(e + "C" + i);                      loggerC.Info("Hi there {0}"' e);                      var loggerD = LogManager.GetLogger(e + "D" + i);                      loggerD.Info("Hi there {0}"' e);                  };              });
Magic Number,NLog.UnitTests,LogManagerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogManagerTests.cs,ThreadSafe_getCurrentClassLogger_test,The following statement contains a magic number: Parallel.For(0' 8' new ParallelOptions() { MaxDegreeOfParallelism = 8 }' (e) =>              {                  bool task1Complete = false' task2Complete = false;                  for (int i = 0; i < 100; ++i)                  {                      if (i > 25 && !task1Complete)                      {                          task1.Wait(5000);                          task1Complete = true;                      }                      if (i > 75 && !task2Complete)                      {                          task2.Wait(5000);                          task2Complete = true;                      }                        // Multiple threads initializing new loggers while configuration is changing                      var loggerA = LogManager.GetLogger(e + "A" + i);                      loggerA.Info("Hi there {0}"' e);                      var loggerB = LogManager.GetLogger(e + "B" + i);                      loggerB.Info("Hi there {0}"' e);                      var loggerC = LogManager.GetLogger(e + "C" + i);                      loggerC.Info("Hi there {0}"' e);                      var loggerD = LogManager.GetLogger(e + "D" + i);                      loggerD.Info("Hi there {0}"' e);                  };              });
Magic Number,NLog.UnitTests,LogManagerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogManagerTests.cs,ThreadSafe_getCurrentClassLogger_test,The following statement contains a magic number: Parallel.For(0' 8' new ParallelOptions() { MaxDegreeOfParallelism = 8 }' (e) =>              {                  bool task1Complete = false' task2Complete = false;                  for (int i = 0; i < 100; ++i)                  {                      if (i > 25 && !task1Complete)                      {                          task1.Wait(5000);                          task1Complete = true;                      }                      if (i > 75 && !task2Complete)                      {                          task2.Wait(5000);                          task2Complete = true;                      }                        // Multiple threads initializing new loggers while configuration is changing                      var loggerA = LogManager.GetLogger(e + "A" + i);                      loggerA.Info("Hi there {0}"' e);                      var loggerB = LogManager.GetLogger(e + "B" + i);                      loggerB.Info("Hi there {0}"' e);                      var loggerC = LogManager.GetLogger(e + "C" + i);                      loggerC.Info("Hi there {0}"' e);                      var loggerD = LogManager.GetLogger(e + "D" + i);                      loggerD.Info("Hi there {0}"' e);                  };              });
Magic Number,NLog.UnitTests,LogManagerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogManagerTests.cs,ThreadSafe_getCurrentClassLogger_test,The following statement contains a magic number: Parallel.For(0' 8' new ParallelOptions() { MaxDegreeOfParallelism = 8 }' (e) =>              {                  bool task1Complete = false' task2Complete = false;                  for (int i = 0; i < 100; ++i)                  {                      if (i > 25 && !task1Complete)                      {                          task1.Wait(5000);                          task1Complete = true;                      }                      if (i > 75 && !task2Complete)                      {                          task2.Wait(5000);                          task2Complete = true;                      }                        // Multiple threads initializing new loggers while configuration is changing                      var loggerA = LogManager.GetLogger(e + "A" + i);                      loggerA.Info("Hi there {0}"' e);                      var loggerB = LogManager.GetLogger(e + "B" + i);                      loggerB.Info("Hi there {0}"' e);                      var loggerC = LogManager.GetLogger(e + "C" + i);                      loggerC.Info("Hi there {0}"' e);                      var loggerD = LogManager.GetLogger(e + "D" + i);                      loggerD.Info("Hi there {0}"' e);                  };              });
Magic Number,NLog.UnitTests,LogMessageFormatterTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogMessageFormatterTests.cs,NormalStringFormatTest,The following statement contains a magic number: LogEventInfo logEventInfo = new LogEventInfo(LogLevel.Info' "MyLogger"' null' "{0:X} - Login request from {1} for {2} with userid {0}"' new object[]              {                  42'                  "John"'                  "BestApplicationEver"              });
Magic Number,NLog.UnitTests,LogMessageFormatterTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogMessageFormatterTests.cs,NormalStringFormatTest,The following statement contains a magic number: Assert.Contains(new MessageTemplateParameter("0"' 42' "X"' CaptureType.Normal)' logEventInfo.MessageTemplateParameters);
Magic Number,NLog.UnitTests,LogMessageFormatterTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogMessageFormatterTests.cs,NormalStringFormatTest,The following statement contains a magic number: Assert.Contains(new MessageTemplateParameter("0"' 42' null' CaptureType.Normal)' logEventInfo.MessageTemplateParameters);
Magic Number,NLog.UnitTests,NLogTraceListenerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\NLogTraceListenerTests.cs,TraceWriteTest,The following statement contains a magic number: Trace.Write(3.1415);
Magic Number,NLog.UnitTests,NLogTraceListenerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\NLogTraceListenerTests.cs,TraceWriteTest,The following statement contains a magic number: AssertDebugLastMessage("debug"' $"Logger1 Debug {3.1415}");
Magic Number,NLog.UnitTests,NLogTraceListenerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\NLogTraceListenerTests.cs,TraceWriteTest,The following statement contains a magic number: Trace.Write(3.1415' "Cat2");
Magic Number,NLog.UnitTests,NLogTraceListenerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\NLogTraceListenerTests.cs,TraceWriteTest,The following statement contains a magic number: AssertDebugLastMessage("debug"' $"Logger1 Debug Cat2: {3.1415}");
Magic Number,NLog.UnitTests,NLogTraceListenerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\NLogTraceListenerTests.cs,TraceWriteLineTest,The following statement contains a magic number: Trace.WriteLine(3.1415);
Magic Number,NLog.UnitTests,NLogTraceListenerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\NLogTraceListenerTests.cs,TraceWriteLineTest,The following statement contains a magic number: AssertDebugLastMessage("debug"' $"Logger1 Debug {3.1415}");
Magic Number,NLog.UnitTests,NLogTraceListenerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\NLogTraceListenerTests.cs,TraceWriteLineTest,The following statement contains a magic number: Trace.WriteLine(3.1415' "Cat2");
Magic Number,NLog.UnitTests,NLogTraceListenerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\NLogTraceListenerTests.cs,TraceWriteLineTest,The following statement contains a magic number: AssertDebugLastMessage("debug"' $"Logger1 Debug Cat2: {3.1415}");
Magic Number,NLog.UnitTests,NLogTraceListenerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\NLogTraceListenerTests.cs,TraceDataTests,The following statement contains a magic number: ts.TraceData(TraceEventType.Critical' 123' 42);
Magic Number,NLog.UnitTests,NLogTraceListenerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\NLogTraceListenerTests.cs,TraceDataTests,The following statement contains a magic number: ts.TraceData(TraceEventType.Critical' 123' 42);
Magic Number,NLog.UnitTests,NLogTraceListenerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\NLogTraceListenerTests.cs,TraceDataTests,The following statement contains a magic number: ts.TraceData(TraceEventType.Critical' 145' 42' 3.14' "foo");
Magic Number,NLog.UnitTests,NLogTraceListenerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\NLogTraceListenerTests.cs,TraceDataTests,The following statement contains a magic number: ts.TraceData(TraceEventType.Critical' 145' 42' 3.14' "foo");
Magic Number,NLog.UnitTests,NLogTraceListenerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\NLogTraceListenerTests.cs,TraceDataTests,The following statement contains a magic number: ts.TraceData(TraceEventType.Critical' 145' 42' 3.14' "foo");
Magic Number,NLog.UnitTests,NLogTraceListenerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\NLogTraceListenerTests.cs,TraceDataTests,The following statement contains a magic number: AssertDebugLastMessage("debug"' $"MySource1 Fatal 42' {3.14.ToString(CultureInfo.CurrentCulture)}' foo 145");
Magic Number,NLog.UnitTests,NLogTraceListenerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\NLogTraceListenerTests.cs,TraceEventTests,The following statement contains a magic number: ts.TraceEvent(TraceEventType.Information' 123' "Quick brown {0} jumps over the lazy {1}."' "fox"' "dog");
Magic Number,NLog.UnitTests,NLogTraceListenerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\NLogTraceListenerTests.cs,TraceEventTests,The following statement contains a magic number: ts.TraceEvent(TraceEventType.Information' 123);
Magic Number,NLog.UnitTests,NLogTraceListenerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\NLogTraceListenerTests.cs,TraceEventTests,The following statement contains a magic number: ts.TraceEvent(TraceEventType.Verbose' 145' "Bar");
Magic Number,NLog.UnitTests,NLogTraceListenerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\NLogTraceListenerTests.cs,TraceEventTests,The following statement contains a magic number: ts.TraceEvent(TraceEventType.Error' 145' "Foo");
Magic Number,NLog.UnitTests,NLogTraceListenerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\NLogTraceListenerTests.cs,TraceEventTests,The following statement contains a magic number: ts.TraceEvent(TraceEventType.Suspend' 145' "Bar");
Magic Number,NLog.UnitTests,NLogTraceListenerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\NLogTraceListenerTests.cs,TraceEventTests,The following statement contains a magic number: ts.TraceEvent(TraceEventType.Resume' 145' "Foo");
Magic Number,NLog.UnitTests,NLogTraceListenerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\NLogTraceListenerTests.cs,TraceEventTests,The following statement contains a magic number: ts.TraceEvent(TraceEventType.Warning' 145' "Bar");
Magic Number,NLog.UnitTests,NLogTraceListenerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\NLogTraceListenerTests.cs,TraceEventTests,The following statement contains a magic number: ts.TraceEvent(TraceEventType.Critical' 145' "Foo");
Magic Number,NLog.UnitTests,RegressionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\RegressionTests.cs,Bug4655UnableToReconfigureExistingLoggers,The following statement contains a magic number: Assert.Equal(2' debugTarget1.Counter);
Magic Number,NLog.UnitTests,RoutingTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\RoutingTests.cs,LogThresholdTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests,RoutingTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\RoutingTests.cs,LogThresholdTest,The following statement contains a magic number: AssertDebugCounter("debug"' 3);
Magic Number,NLog.UnitTests,RoutingTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\RoutingTests.cs,LogThresholdTest,The following statement contains a magic number: AssertDebugCounter("debug"' 4);
Magic Number,NLog.UnitTests,RoutingTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\RoutingTests.cs,LogThresholdTest2,The following statement contains a magic number: AssertDebugCounter("debug1"' 5);
Magic Number,NLog.UnitTests,RoutingTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\RoutingTests.cs,LogThresholdTest2,The following statement contains a magic number: AssertDebugCounter("debug2"' 4);
Magic Number,NLog.UnitTests,RoutingTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\RoutingTests.cs,LogThresholdTest2,The following statement contains a magic number: AssertDebugCounter("debug3"' 3);
Magic Number,NLog.UnitTests,RoutingTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\RoutingTests.cs,LogThresholdTest2,The following statement contains a magic number: AssertDebugCounter("debug4"' 2);
Magic Number,NLog.UnitTests,RoutingTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\RoutingTests.cs,LoggerNameMatchTest,The following statement contains a magic number: AssertDebugCounter("debug2"' 2);
Magic Number,NLog.UnitTests,RoutingTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\RoutingTests.cs,LoggerNameMatchTest,The following statement contains a magic number: AssertDebugCounter("debug3"' 4);
Magic Number,NLog.UnitTests,RoutingTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\RoutingTests.cs,LoggerNameMatchTest,The following statement contains a magic number: AssertDebugCounter("debug4"' 2);
Magic Number,NLog.UnitTests,RoutingTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\RoutingTests.cs,MultiAppenderTest,The following statement contains a magic number: AssertDebugCounter("debug1"' 4);
Magic Number,NLog.UnitTests,RoutingTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\RoutingTests.cs,MultiAppenderTest,The following statement contains a magic number: AssertDebugCounter("debug2"' 4);
Magic Number,NLog.UnitTests,RoutingTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\RoutingTests.cs,MultiAppenderTest,The following statement contains a magic number: AssertDebugCounter("debug3"' 2);
Magic Number,NLog.UnitTests,TimeSourceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\TimeSourceTests.cs,TestTimeSource,The following statement contains a magic number: Assert.True((expected - evt.TimeStamp).Duration() < TimeSpan.FromSeconds(5));
Magic Number,NLog.UnitTests,TimeSourceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\TimeSourceTests.cs,TestTimeSource,The following statement contains a magic number: Assert.True((source.Time - source.FromSystemTime(DateTime.UtcNow)).Duration() < TimeSpan.FromSeconds(5));
Magic Number,NLog.UnitTests.Common,InternalLoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Common\InternalLoggerTests.cs,WriteToStringWriterWithArgsTests,The following statement contains a magic number: InternalLogger.Fatal("FFF {0}' {1}' {2}"' 0' 1' 2);
Magic Number,NLog.UnitTests.Common,InternalLoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Common\InternalLoggerTests.cs,WriteToStringWriterWithArgsTests,The following statement contains a magic number: InternalLogger.Trace("TTT {0}' {1}' {2}"' 0' 1' 2);
Magic Number,NLog.UnitTests.Common,InternalLoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Common\InternalLoggerTests.cs,WriteToStringWriterWithArgsTests,The following statement contains a magic number: InternalLogger.Log(LogLevel.Fatal' "FFF {0}' {1}' {2}"' 0' 1' 2);
Magic Number,NLog.UnitTests.Common,InternalLoggerTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Common\InternalLoggerTests.cs,WriteToStringWriterWithArgsTests,The following statement contains a magic number: InternalLogger.Log(LogLevel.Trace' "TTT {0}' {1}' {2}"' 0' 1' 2);
Magic Number,NLog.UnitTests.Conditions,ConditionEvaluatorTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Conditions\ConditionEvaluatorTests.cs,ConditionMethodsTest,The following statement contains a magic number: AssertEvaluationResult(4' "length('${level}')");
Magic Number,NLog.UnitTests.Conditions,ConditionEvaluatorTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Conditions\ConditionEvaluatorTests.cs,LiteralTest,The following statement contains a magic number: AssertEvaluationResult(3' "3");
Magic Number,NLog.UnitTests.Conditions,ConditionEvaluatorTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Conditions\ConditionEvaluatorTests.cs,LiteralTest,The following statement contains a magic number: AssertEvaluationResult(3.1415' "3.1415");
Magic Number,NLog.UnitTests.Conditions,ConditionEvaluatorTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Conditions\ConditionEvaluatorTests.cs,LiteralTest,The following statement contains a magic number: AssertEvaluationResult(-3.1415' "-3.1415");
Magic Number,NLog.UnitTests.Conditions,ConditionParserTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Conditions\ConditionParserTests.cs,StringTest,The following statement contains a magic number: Assert.Equal(3' sl.Renderers.Count);
Magic Number,NLog.UnitTests.Conditions,ConditionParserTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Conditions\ConditionParserTests.cs,StringTest,The following statement contains a magic number: Assert.IsType<LevelLayoutRenderer>(sl.Renderers[2]);
Magic Number,NLog.UnitTests.Config,CaseSensitivityTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\CaseSensitivityTests.cs,LowerCaseTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Config,CaseSensitivityTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\CaseSensitivityTests.cs,LowerCaseTest,The following statement contains a magic number: AssertDebugCounter("debug"' 3);
Magic Number,NLog.UnitTests.Config,CaseSensitivityTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\CaseSensitivityTests.cs,LowerCaseTest,The following statement contains a magic number: AssertDebugCounter("debug"' 4);
Magic Number,NLog.UnitTests.Config,CaseSensitivityTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\CaseSensitivityTests.cs,UpperCaseTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Config,CaseSensitivityTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\CaseSensitivityTests.cs,UpperCaseTest,The following statement contains a magic number: AssertDebugCounter("debug"' 3);
Magic Number,NLog.UnitTests.Config,CaseSensitivityTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\CaseSensitivityTests.cs,UpperCaseTest,The following statement contains a magic number: AssertDebugCounter("debug"' 4);
Magic Number,NLog.UnitTests.Config,CultureInfoTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\CultureInfoTests.cs,DifferentConfigurations_UseDifferentDefaultCulture,The following statement contains a magic number: var testNumber = 3.14;
Magic Number,NLog.UnitTests.Config,CultureInfoTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\CultureInfoTests.cs,EventPropRendererCultureTest,The following statement contains a magic number: logEventInfo.Properties["ADouble"] = 1.23;
Magic Number,NLog.UnitTests.Config,CultureInfoTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\CultureInfoTests.cs,AllEventPropRendererCultureTest,The following statement contains a magic number: logEventInfo.Properties["ADouble"] = 1.23;
Magic Number,NLog.UnitTests.Config,ExtensionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\ExtensionTests.cs,ExtensionTest2,The following statement contains a magic number: Assert.Equal(2' configuration.LoggingRules[0].Filters.Count);
Magic Number,NLog.UnitTests.Config,ExtensionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\ExtensionTests.cs,Extensions_NLogPackageLoader_should_beCalled,The following statement contains a magic number: Assert.Equal(4' Regex.Matches(logs' Regex.Escape("Preload successfully invoked for '")).Count);
Magic Number,NLog.UnitTests.Config,ExtensionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\ExtensionTests.cs,ImplicitConversionOperatorTest,The following statement contains a magic number: Assert.Equal(123' target.Layout.X);
Magic Number,NLog.UnitTests.Config,ConfigurationReloadWaiter,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\ReloadTests.cs,WaitForReload,The following statement contains a magic number: counterEvent.WaitOne(3000);
Magic Number,NLog.UnitTests.Config,RuleConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\RuleConfigurationTests.cs,SimpleRuleTest,The following statement contains a magic number: Assert.Equal(4' rule.Levels.Count);
Magic Number,NLog.UnitTests.Config,RuleConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\RuleConfigurationTests.cs,MinMaxLevelTest,The following statement contains a magic number: Assert.Equal(2' rule.Levels.Count);
Magic Number,NLog.UnitTests.Config,RuleConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\RuleConfigurationTests.cs,NoLevelsTest,The following statement contains a magic number: Assert.Equal(6' rule.Levels.Count);
Magic Number,NLog.UnitTests.Config,RuleConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\RuleConfigurationTests.cs,ExplicitLevelsTest,The following statement contains a magic number: Assert.Equal(3' rule.Levels.Count);
Magic Number,NLog.UnitTests.Config,RuleConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\RuleConfigurationTests.cs,MultipleTargetsTest,The following statement contains a magic number: Assert.Equal(3' rule.Targets.Count);
Magic Number,NLog.UnitTests.Config,RuleConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\RuleConfigurationTests.cs,MultipleTargetsTest,The following statement contains a magic number: Assert.Same(c.FindTargetByName("d3")' rule.Targets[2]);
Magic Number,NLog.UnitTests.Config,RuleConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\RuleConfigurationTests.cs,ChildRulesTest,The following statement contains a magic number: Assert.Equal(2' rule.ChildRules.Count);
Magic Number,NLog.UnitTests.Config,RuleConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\RuleConfigurationTests.cs,FiltersTest,The following statement contains a magic number: Assert.Equal(2' rule.Filters.Count);
Magic Number,NLog.UnitTests.Config,RuleConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\RuleConfigurationTests.cs,LoggingRule_LevelOff_NotSetAsActualLogLevel,The following statement contains a magic number: Assert.Equal(2' c.LoggingRules.Count);
Magic Number,NLog.UnitTests.Config,TargetConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\TargetConfigurationTests.cs,ArrayParameterTest,The following statement contains a magic number: Assert.Equal(3' t.Parameters.Count);
Magic Number,NLog.UnitTests.Config,TargetConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\TargetConfigurationTests.cs,ArrayParameterTest,The following statement contains a magic number: Assert.Equal("p3"' t.Parameters[2].Name);
Magic Number,NLog.UnitTests.Config,TargetConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\TargetConfigurationTests.cs,ArrayParameterTest,The following statement contains a magic number: Assert.Equal("${logger}"' t.Parameters[2].Layout.ToString());
Magic Number,NLog.UnitTests.Config,TargetConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\TargetConfigurationTests.cs,ArrayElementParameterTest,The following statement contains a magic number: Assert.Equal(3' t.Parameters.Count);
Magic Number,NLog.UnitTests.Config,TargetConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\TargetConfigurationTests.cs,ArrayElementParameterTest,The following statement contains a magic number: Assert.Equal(2' csvLayout.Columns.Count);
Magic Number,NLog.UnitTests.Config,TargetConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\TargetConfigurationTests.cs,ArrayElementParameterTest,The following statement contains a magic number: Assert.Equal("p3"' t.Parameters[2].Name);
Magic Number,NLog.UnitTests.Config,TargetConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\TargetConfigurationTests.cs,ArrayElementParameterTest,The following statement contains a magic number: Assert.Equal("${logger}"' t.Parameters[2].Layout.ToString());
Magic Number,NLog.UnitTests.Config,TargetConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\TargetConfigurationTests.cs,SimpleTest2,The following statement contains a magic number: Assert.Equal(3' l.Renderers.Count);
Magic Number,NLog.UnitTests.Config,TargetConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\TargetConfigurationTests.cs,SimpleTest2,The following statement contains a magic number: Assert.IsType<LevelLayoutRenderer>(l.Renderers[2]);
Magic Number,NLog.UnitTests.Config,TargetConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\TargetConfigurationTests.cs,WrapperTest,The following statement contains a magic number: Assert.Equal(19' btw.BufferSize);
Magic Number,NLog.UnitTests.Config,TargetConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\TargetConfigurationTests.cs,WrapperRefTest,The following statement contains a magic number: Assert.Equal(19' btw.BufferSize);
Magic Number,NLog.UnitTests.Config,TargetConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\TargetConfigurationTests.cs,CompoundTest,The following statement contains a magic number: Assert.Equal(4' rr.Targets.Count);
Magic Number,NLog.UnitTests.Config,TargetConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\TargetConfigurationTests.cs,CompoundTest,The following statement contains a magic number: Assert.Same(d3' rr.Targets[2]);
Magic Number,NLog.UnitTests.Config,TargetConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\TargetConfigurationTests.cs,CompoundTest,The following statement contains a magic number: Assert.Same(d4' rr.Targets[3]);
Magic Number,NLog.UnitTests.Config,TargetConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\TargetConfigurationTests.cs,CompoundRefTest,The following statement contains a magic number: Assert.Equal(4' rr.Targets.Count);
Magic Number,NLog.UnitTests.Config,TargetConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\TargetConfigurationTests.cs,CompoundRefTest,The following statement contains a magic number: Assert.Same(d3' rr.Targets[2]);
Magic Number,NLog.UnitTests.Config,TargetConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\TargetConfigurationTests.cs,CompoundRefTest,The following statement contains a magic number: Assert.Same(d4' rr.Targets[3]);
Magic Number,NLog.UnitTests.Config,TargetConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\TargetConfigurationTests.cs,DataTypesTest,The following statement contains a magic number: Assert.Equal((byte)42' myTarget.ByteProperty);
Magic Number,NLog.UnitTests.Config,TargetConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\TargetConfigurationTests.cs,DataTypesTest,The following statement contains a magic number: Assert.Equal((short)42' myTarget.Int16Property);
Magic Number,NLog.UnitTests.Config,TargetConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\TargetConfigurationTests.cs,DataTypesTest,The following statement contains a magic number: Assert.Equal(42' myTarget.Int32Property);
Magic Number,NLog.UnitTests.Config,TargetConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\TargetConfigurationTests.cs,DataTypesTest,The following statement contains a magic number: Assert.Equal(42000000000L' myTarget.Int64Property);
Magic Number,NLog.UnitTests.Config,TargetConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\TargetConfigurationTests.cs,DataTypesTest,The following statement contains a magic number: Assert.Equal(3.14159' myTarget.DoubleProperty);
Magic Number,NLog.UnitTests.Config,TargetConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\TargetConfigurationTests.cs,DataTypesTest,The following statement contains a magic number: Assert.Equal(3.14159f' myTarget.FloatProperty);
Magic Number,NLog.UnitTests.Config,TargetConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\TargetConfigurationTests.cs,NullableDataTypesTest,The following statement contains a magic number: Assert.Equal((byte)42' myTarget.ByteProperty);
Magic Number,NLog.UnitTests.Config,TargetConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\TargetConfigurationTests.cs,NullableDataTypesTest,The following statement contains a magic number: Assert.Equal((short)42' myTarget.Int16Property);
Magic Number,NLog.UnitTests.Config,TargetConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\TargetConfigurationTests.cs,NullableDataTypesTest,The following statement contains a magic number: Assert.Equal(42' myTarget.Int32Property);
Magic Number,NLog.UnitTests.Config,TargetConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\TargetConfigurationTests.cs,NullableDataTypesTest,The following statement contains a magic number: Assert.Equal(42000000000L' myTarget.Int64Property);
Magic Number,NLog.UnitTests.Config,TargetConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\TargetConfigurationTests.cs,NullableDataTypesTest,The following statement contains a magic number: Assert.Equal(3.14159' myTarget.DoubleProperty);
Magic Number,NLog.UnitTests.Config,TargetConfigurationTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\TargetConfigurationTests.cs,NullableDataTypesTest,The following statement contains a magic number: Assert.Equal(3.14159f' myTarget.FloatProperty);
Magic Number,NLog.UnitTests.Config,VariableTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\VariableTests.cs,VariablesTest1,The following statement contains a magic number: Assert.Equal(3' layout.Renderers.Count);
Magic Number,NLog.UnitTests.Config,VariableTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\VariableTests.cs,VariablesTest1,The following statement contains a magic number: var lr3 = layout.Renderers[2] as LiteralLayoutRenderer;
Magic Number,NLog.UnitTests.Config,VariableTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\VariableTests.cs,Xml_configuration_with_innerLayouts_returns_defined_variables,The following statement contains a magic number: Assert.Equal(2' jsonLayout.Attributes.Count);
Magic Number,NLog.UnitTests.Config,XmlConfigNodesOrderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Config\XmlConfigNodesOrderTests.cs,RulesBeforeTargetsTest,The following statement contains a magic number: Assert.Equal(4' rule.Levels.Count);
Magic Number,NLog.UnitTests.Contexts,GlobalDiagnosticsContextTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Contexts\GlobalDiagnosticsContextTests.cs,GDCTest1,The following statement contains a magic number: Assert.Equal(2' GlobalDiagnosticsContext.GetNames().Count);
Magic Number,NLog.UnitTests.Contexts,MappedDiagnosticsContextTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Contexts\MappedDiagnosticsContextTests.cs,MDCTest1,The following statement contains a magic number: int counter = 100;
Magic Number,NLog.UnitTests.Contexts,MappedDiagnosticsContextTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Contexts\MappedDiagnosticsContextTests.cs,MDCTest1,The following statement contains a magic number: ThreadPool.QueueUserWorkItem(                      s =>                          {                              try                              {                                  MappedDiagnosticsContext.Clear();                                  Assert.False(MappedDiagnosticsContext.Contains("foo"));                                  Assert.Equal(string.Empty' MappedDiagnosticsContext.Get("foo"));                                  Assert.False(MappedDiagnosticsContext.Contains("foo2"));                                  Assert.Equal(string.Empty' MappedDiagnosticsContext.Get("foo2"));                                  Assert.Equal(0' MappedDiagnosticsContext.GetNames().Count);                                    MappedDiagnosticsContext.Set("foo"' "bar");                                  MappedDiagnosticsContext.Set("foo2"' "bar2");                                    Assert.True(MappedDiagnosticsContext.Contains("foo"));                                  Assert.Equal("bar"' MappedDiagnosticsContext.Get("foo"));                                  Assert.Equal(2' MappedDiagnosticsContext.GetNames().Count);                                    MappedDiagnosticsContext.Remove("foo");                                  Assert.False(MappedDiagnosticsContext.Contains("foo"));                                  Assert.Equal(string.Empty' MappedDiagnosticsContext.Get("foo"));                                    Assert.True(MappedDiagnosticsContext.Contains("foo2"));                                  Assert.Equal("bar2"' MappedDiagnosticsContext.Get("foo2"));                                    Assert.Equal(1' MappedDiagnosticsContext.GetNames().Count);                                  Assert.True(MappedDiagnosticsContext.GetNames().Contains("foo2"));                                    Assert.Null(MappedDiagnosticsContext.GetObject("foo3"));                                  MappedDiagnosticsContext.Set("foo3"' new { One = 1 });                              }                              catch (Exception exception)                              {                                  lock (exceptions)                                  {                                      exceptions.Add(exception);                                  }                              }                              finally                              {                                  if (Interlocked.Decrement(ref remaining) == 0)                                  {                                      mre.Set();                                  }                              }                          });
Magic Number,NLog.UnitTests.Contexts,MappedDiagnosticsContextTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Contexts\MappedDiagnosticsContextTests.cs,MDCTest2,The following statement contains a magic number: int counter = 100;
Magic Number,NLog.UnitTests.Contexts,MappedDiagnosticsLogicalContextTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Contexts\MappedDiagnosticsLogicalContextTests.cs,given_item_exists_when_getting_item_should_return_item_for_objecttype_2,The following statement contains a magic number: object value = 5;
Magic Number,NLog.UnitTests.Contexts,MappedDiagnosticsLogicalContextTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Contexts\MappedDiagnosticsLogicalContextTests.cs,given_item_exists_after_removing_item_when_getting_items_should_not_contain_item,The following statement contains a magic number: MappedDiagnosticsLogicalContext.Set(keyThatIsRemoved' 7);
Magic Number,NLog.UnitTests.Contexts,MappedDiagnosticsLogicalContextTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Contexts\MappedDiagnosticsLogicalContextTests.cs,given_item_exists_after_removing_item_when_getting_items_should_not_contain_item,The following statement contains a magic number: MappedDiagnosticsLogicalContext.Set(keyThatRemains2' 8);
Magic Number,NLog.UnitTests.Contexts,MappedDiagnosticsLogicalContextTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Contexts\MappedDiagnosticsLogicalContextTests.cs,given_item_exists_after_removing_item_when_getting_items_should_not_contain_item,The following statement contains a magic number: Assert.Equal(2' MappedDiagnosticsLogicalContext.GetNames().Count);
Magic Number,NLog.UnitTests.Contexts,NestedDiagnosticsContextTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Contexts\NestedDiagnosticsContextTests.cs,NDCTest1,The following statement contains a magic number: int counter = 100;
Magic Number,NLog.UnitTests.Contexts,NestedDiagnosticsContextTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Contexts\NestedDiagnosticsContextTests.cs,NDCTest2_object,The following statement contains a magic number: int counter = 100;
Magic Number,NLog.UnitTests.Filters,ConditionBasedFilterTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\ConditionBasedFilterTests.cs,WhenTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenContainsTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenContainsTests.cs,WhenContainsTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenContainsTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenContainsTests.cs,WhenContainsInsensitiveTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenContainsTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenContainsTests.cs,WhenContainsQuoteTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenContainsTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenContainsTests.cs,WhenContainsQuoteTestComplex,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenContainsTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenContainsTests.cs,WhenContainsQuoteTestComplex,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenContainsTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenContainsTests.cs,WhenContainsQuoteTestComplex,The following statement contains a magic number: AssertDebugCounter("debug"' 3);
Magic Number,NLog.UnitTests.Filters,WhenEqualTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenEqualTests.cs,WhenEqualTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenNotContainsTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenNotContainsTests.cs,WhenNotContainsInsensitiveTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenNotContainsTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenNotContainsTests.cs,WhenNotContainsInsensitiveTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenNotEqualTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenNotEqualTests.cs,WhenNotEqualInsensitiveTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenNotEqualTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenNotEqualTests.cs,WhenNotEqualInsensitiveTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedIgnoreDualTargetTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedIgnoreDualTargetTest,The following statement contains a magic number: AssertDebugCounter("debug2"' 2);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedIgnoreDualTargetTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedIgnoreDualTargetTest,The following statement contains a magic number: AssertDebugCounter("debug2"' 2);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedTimeoutIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedTimeoutIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedTimeoutIgnoreTest,The following statement contains a magic number: timeSource.AddToLocalTime(TimeSpan.FromSeconds(5));
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedTimeoutIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedTimeoutIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 3);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedTimeoutIgnoreTest,The following statement contains a magic number: timeSource.AddToLocalTime(TimeSpan.FromSeconds(10));
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedTimeoutIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 4);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedTimeoutLogAfterTimeoutTest,The following statement contains a magic number: timeSource.AddToLocalTime(TimeSpan.FromSeconds(5));
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedTimeoutLogAfterTimeoutTest,The following statement contains a magic number: timeSource.AddToLocalTime(TimeSpan.FromSeconds(10));
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedDefaultFilterCountIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedDefaultFilterCountIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedDefaultFilterCountIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 3);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedDefaultFilterCountIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 4);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedDefaultFilterCountIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 5);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedDefaultFilterCountIgnoreTest,The following statement contains a magic number: timeSource.AddToLocalTime(TimeSpan.FromSeconds(5));
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedDefaultFilterCountIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 6);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedDefaultFilterCountIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 7);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedDefaultFilterCountIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 7);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedDefaultFilterCountIgnoreTest,The following statement contains a magic number: timeSource.AddToLocalTime(TimeSpan.FromSeconds(10));
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedDefaultFilterCountIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 8 + i);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedDefaultFilterCountIgnoreTest,The following statement contains a magic number: i < 10
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedDefaultFilterCountIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 18);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedMaxCacheSizeIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedMaxCacheSizeIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedMaxCacheSizeIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 3);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedMaxCacheSizeIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 4);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedMaxCacheSizeIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 5);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedMaxCacheSizeIgnoreTest,The following statement contains a magic number: timeSource.AddToLocalTime(TimeSpan.FromSeconds(5));
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedMaxCacheSizeIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 6);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedMaxCacheSizeIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 7);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedMaxCacheSizeIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 7);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedMaxCacheSizeIgnoreTest,The following statement contains a magic number: timeSource.AddToLocalTime(TimeSpan.FromSeconds(10));
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedMaxCacheSizeIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 8 + i);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedMaxCacheSizeIgnoreTest,The following statement contains a magic number: i < 10
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedMaxCacheSizeIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 18);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedLevelIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedLevelIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedLevelIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 3);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedLevelIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 3);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedLevelIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 3);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedLevelIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 4);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedMaxLengthIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedMaxLengthIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedMaxLengthIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedMaxLengthIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 3);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedFilterCountPropertyNameIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedFilterCountPropertyNameIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedFilterCountPropertyNameIgnoreTest,The following statement contains a magic number: timeSource.AddToLocalTime(TimeSpan.FromSeconds(3));
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedFilterCountPropertyNameIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedFilterCountPropertyNameIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 3);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedFilterCountPropertyNameIgnoreTest,The following statement contains a magic number: timeSource.AddToLocalTime(TimeSpan.FromSeconds(3));
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedFilterCountPropertyNameIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 4);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedFilterCountPropertyNameIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 4);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedFilterCountPropertyNameIgnoreTest,The following statement contains a magic number: timeSource.AddToLocalTime(TimeSpan.FromSeconds(12));
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedFilterCountPropertyNameIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 5);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedFilterCountAppendFormatIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedFilterCountAppendFormatIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedFilterCountAppendFormatIgnoreTest,The following statement contains a magic number: timeSource.AddToLocalTime(TimeSpan.FromSeconds(3));
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedFilterCountAppendFormatIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedFilterCountAppendFormatIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 3);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedFilterCountAppendFormatIgnoreTest,The following statement contains a magic number: timeSource.AddToLocalTime(TimeSpan.FromSeconds(3));
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedFilterCountAppendFormatIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 4);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedFilterCountAppendFormatIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 4);
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedFilterCountAppendFormatIgnoreTest,The following statement contains a magic number: timeSource.AddToLocalTime(TimeSpan.FromSeconds(12));
Magic Number,NLog.UnitTests.Filters,WhenRepeatedTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Filters\WhenRepeatedTests.cs,WhenRepeatedFilterCountAppendFormatIgnoreTest,The following statement contains a magic number: AssertDebugCounter("debug"' 5);
Magic Number,NLog.UnitTests.Fluent,LogBuilderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Fluent\LogBuilderTests.cs,LogWriteProperties,The following statement contains a magic number: i < 2
Magic Number,NLog.UnitTests.Fluent,LogBuilderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Fluent\LogBuilderTests.cs,LogBuilder_nLogEventInfo,The following statement contains a magic number: var d = new DateTime(2015' 01' 30' 14' 30' 5);
Magic Number,NLog.UnitTests.Fluent,LogBuilderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Fluent\LogBuilderTests.cs,LogBuilder_nLogEventInfo,The following statement contains a magic number: var d = new DateTime(2015' 01' 30' 14' 30' 5);
Magic Number,NLog.UnitTests.Fluent,LogBuilderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Fluent\LogBuilderTests.cs,LogBuilder_nLogEventInfo,The following statement contains a magic number: var d = new DateTime(2015' 01' 30' 14' 30' 5);
Magic Number,NLog.UnitTests.Fluent,LogBuilderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Fluent\LogBuilderTests.cs,LogBuilder_nLogEventInfo,The following statement contains a magic number: var d = new DateTime(2015' 01' 30' 14' 30' 5);
Magic Number,NLog.UnitTests.Fluent,LogBuilderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Fluent\LogBuilderTests.cs,LogBuilder_nLogEventInfo,The following statement contains a magic number: var d = new DateTime(2015' 01' 30' 14' 30' 5);
Magic Number,NLog.UnitTests.Fluent,LogBuilderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Fluent\LogBuilderTests.cs,LogBuilder_message_overloadsTest,The following statement contains a magic number: _logger.Debug()                .Message("Message with {0} args. {1}"' 2' "YES")                .Write();
Magic Number,NLog.UnitTests.Fluent,LogBuilderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Fluent\LogBuilderTests.cs,LogBuilder_message_overloadsTest,The following statement contains a magic number: _logger.Debug()                .Message("Message with {0} args. {1} {2}"' 3' ":) "' 2)                .Write();
Magic Number,NLog.UnitTests.Fluent,LogBuilderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Fluent\LogBuilderTests.cs,LogBuilder_message_overloadsTest,The following statement contains a magic number: _logger.Debug()                .Message("Message with {0} args. {1} {2}"' 3' ":) "' 2)                .Write();
Magic Number,NLog.UnitTests.Fluent,LogBuilderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Fluent\LogBuilderTests.cs,LogBuilder_message_overloadsTest,The following statement contains a magic number: _logger.Debug()                .Message("Message with {0} args. {1} {2}{3}"' "more"' ":) "' 2' "b")                .Write();
Magic Number,NLog.UnitTests.Fluent,LogBuilderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Fluent\LogBuilderTests.cs,LogBuilder_message_cultureTest,The following statement contains a magic number: _logger.Debug()               .Message("Message with {0} {1} {2} {3}"' 4.1' 4.001' new DateTime(2016' 12' 31)' true)               .Write();
Magic Number,NLog.UnitTests.Fluent,LogBuilderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Fluent\LogBuilderTests.cs,LogBuilder_message_cultureTest,The following statement contains a magic number: _logger.Debug()               .Message("Message with {0} {1} {2} {3}"' 4.1' 4.001' new DateTime(2016' 12' 31)' true)               .Write();
Magic Number,NLog.UnitTests.Fluent,LogBuilderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Fluent\LogBuilderTests.cs,LogBuilder_message_cultureTest,The following statement contains a magic number: _logger.Debug()               .Message("Message with {0} {1} {2} {3}"' 4.1' 4.001' new DateTime(2016' 12' 31)' true)               .Write();
Magic Number,NLog.UnitTests.Fluent,LogBuilderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Fluent\LogBuilderTests.cs,LogBuilder_message_cultureTest,The following statement contains a magic number: _logger.Debug()               .Message("Message with {0} {1} {2} {3}"' 4.1' 4.001' new DateTime(2016' 12' 31)' true)               .Write();
Magic Number,NLog.UnitTests.Fluent,LogBuilderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Fluent\LogBuilderTests.cs,LogBuilder_message_cultureTest,The following statement contains a magic number: _logger.Debug()               .Message("Message with {0} {1} {2} {3}"' 4.1' 4.001' new DateTime(2016' 12' 31)' true)               .Write();
Magic Number,NLog.UnitTests.Fluent,LogBuilderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Fluent\LogBuilderTests.cs,LogBuilder_message_cultureTest,The following statement contains a magic number: _logger.Debug()             .Message(GetCultureInfo("nl-nl")' "Message with {0} {1} {2} {3}"' 4.1' 4.001' new DateTime(2016' 12' 31)' true)             .Write();
Magic Number,NLog.UnitTests.Fluent,LogBuilderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Fluent\LogBuilderTests.cs,LogBuilder_message_cultureTest,The following statement contains a magic number: _logger.Debug()             .Message(GetCultureInfo("nl-nl")' "Message with {0} {1} {2} {3}"' 4.1' 4.001' new DateTime(2016' 12' 31)' true)             .Write();
Magic Number,NLog.UnitTests.Fluent,LogBuilderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Fluent\LogBuilderTests.cs,LogBuilder_message_cultureTest,The following statement contains a magic number: _logger.Debug()             .Message(GetCultureInfo("nl-nl")' "Message with {0} {1} {2} {3}"' 4.1' 4.001' new DateTime(2016' 12' 31)' true)             .Write();
Magic Number,NLog.UnitTests.Fluent,LogBuilderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Fluent\LogBuilderTests.cs,LogBuilder_message_cultureTest,The following statement contains a magic number: _logger.Debug()             .Message(GetCultureInfo("nl-nl")' "Message with {0} {1} {2} {3}"' 4.1' 4.001' new DateTime(2016' 12' 31)' true)             .Write();
Magic Number,NLog.UnitTests.Fluent,LogBuilderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Fluent\LogBuilderTests.cs,LogBuilder_message_cultureTest,The following statement contains a magic number: _logger.Debug()             .Message(GetCultureInfo("nl-nl")' "Message with {0} {1} {2} {3}"' 4.1' 4.001' new DateTime(2016' 12' 31)' true)             .Write();
Magic Number,NLog.UnitTests.Internal,AppDomainPartialTrustTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\AppDomainPartialTrustTests.cs,MediumTrustWithExternalClass,The following statement contains a magic number: int times = 25;
Magic Number,NLog.UnitTests.Internal,AppDomainPartialTrustTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\AppDomainPartialTrustTests.cs,MediumTrustWithExternalClassNoAutoFlush,The following statement contains a magic number: int times = 5;
Magic Number,NLog.UnitTests.Internal,MruCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\MruCacheTests.cs,SimpleCacheAddAndLookupTest,The following statement contains a magic number: MruCache<int' string> mruCache = new MruCache<int' string>(100);
Magic Number,NLog.UnitTests.Internal,MruCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\MruCacheTests.cs,SimpleCacheAddAndLookupTest,The following statement contains a magic number: i < 100
Magic Number,NLog.UnitTests.Internal,MruCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\MruCacheTests.cs,SimpleCacheAddAndLookupTest,The following statement contains a magic number: i < 100
Magic Number,NLog.UnitTests.Internal,MruCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\MruCacheTests.cs,SimpleCacheAddAndLookupTest,The following statement contains a magic number: Assert.False(mruCache.TryGetValue(101' out value));
Magic Number,NLog.UnitTests.Internal,MruCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\MruCacheTests.cs,OverflowCacheAndLookupTest,The following statement contains a magic number: MruCache<int' string> mruCache = new MruCache<int' string>(100);
Magic Number,NLog.UnitTests.Internal,MruCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\MruCacheTests.cs,OverflowCacheAndLookupTest,The following statement contains a magic number: i < 200
Magic Number,NLog.UnitTests.Internal,MruCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\MruCacheTests.cs,OverflowCacheAndLookupTest,The following statement contains a magic number: i < 100
Magic Number,NLog.UnitTests.Internal,MruCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\MruCacheTests.cs,OverflowCacheAndLookupTest,The following statement contains a magic number: i < 200
Magic Number,NLog.UnitTests.Internal,MruCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\MruCacheTests.cs,OverflowVersionCacheAndLookupTest,The following statement contains a magic number: MruCache<int' string> mruCache = new MruCache<int' string>(100);
Magic Number,NLog.UnitTests.Internal,MruCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\MruCacheTests.cs,OverflowVersionCacheAndLookupTest,The following statement contains a magic number: i < 200
Magic Number,NLog.UnitTests.Internal,MruCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\MruCacheTests.cs,OverflowVersionCacheAndLookupTest,The following statement contains a magic number: i < 90
Magic Number,NLog.UnitTests.Internal,MruCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\MruCacheTests.cs,OverflowVersionCacheAndLookupTest,The following statement contains a magic number: i < 200
Magic Number,NLog.UnitTests.Internal,MruCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\MruCacheTests.cs,OverflowFreshCacheAndLookupTest,The following statement contains a magic number: MruCache<int' string> mruCache = new MruCache<int' string>(100);
Magic Number,NLog.UnitTests.Internal,MruCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\MruCacheTests.cs,OverflowFreshCacheAndLookupTest,The following statement contains a magic number: i < 200
Magic Number,NLog.UnitTests.Internal,MruCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\MruCacheTests.cs,OverflowFreshCacheAndLookupTest,The following statement contains a magic number: i < 200
Magic Number,NLog.UnitTests.Internal,MruCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\MruCacheTests.cs,OverflowFreshCacheAndLookupTest,The following statement contains a magic number: j < 2
Magic Number,NLog.UnitTests.Internal,MruCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\MruCacheTests.cs,OverflowFreshCacheAndLookupTest,The following statement contains a magic number: i < 310
Magic Number,NLog.UnitTests.Internal,MruCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\MruCacheTests.cs,OverflowFreshCacheAndLookupTest,The following statement contains a magic number: i < 200
Magic Number,NLog.UnitTests.Internal,MruCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\MruCacheTests.cs,OverflowFreshCacheAndLookupTest,The following statement contains a magic number: Assert.True(cacheCount > 60);
Magic Number,NLog.UnitTests.Internal,MruCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\MruCacheTests.cs,RecentlyUsedLookupTest,The following statement contains a magic number: MruCache<int' string> mruCache = new MruCache<int' string>(100);
Magic Number,NLog.UnitTests.Internal,MruCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\MruCacheTests.cs,RecentlyUsedLookupTest,The following statement contains a magic number: i < 200
Magic Number,NLog.UnitTests.Internal,MruCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\MruCacheTests.cs,RecentlyUsedLookupTest,The following statement contains a magic number: j < 100
Magic Number,NLog.UnitTests.Internal,MruCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\MruCacheTests.cs,RecentlyUsedLookupTest,The following statement contains a magic number: i < 200
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,DefaultPropertiesDictionary,The following statement contains a magic number: Assert.False(dictionary.Values.Contains(42));
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,EmptyEventPropertiesDictionary,The following statement contains a magic number: dictionary.Add("Hello World"' 42);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,EmptyEventPropertiesDictionary,The following statement contains a magic number: Assert.False(dictionary.Values.Contains(42));
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,EmptyMessagePropertiesDictionary,The following statement contains a magic number: Assert.False(dictionary.Values.Contains(42));
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,EmptyPropertiesDictionary,The following statement contains a magic number: Assert.False(dictionary.Values.Contains(42));
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,SingleItemEventPropertiesDictionary,The following statement contains a magic number: dictionary.Add("Hello World"' 42);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,SingleItemEventPropertiesDictionary,The following statement contains a magic number: Assert.Equal(42' item.Value);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,SingleItemEventPropertiesDictionary,The following statement contains a magic number: Assert.Equal(42' item);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,SingleItemEventPropertiesDictionary,The following statement contains a magic number: AssertContainsInDictionary(dictionary' "Hello World"' 42);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,SingleItemEventPropertiesDictionary,The following statement contains a magic number: Assert.True(dictionary.Values.Contains(42));
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,SingleItemEventPropertiesDictionary,The following statement contains a magic number: Assert.Equal(42' value);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,SingleItemEventPropertiesDictionary,The following statement contains a magic number: Assert.Equal(42' copyToArray[0].Value);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,SingleItemEventPropertiesDictionary,The following statement contains a magic number: Assert.Equal(42' copyToValuesArray[0]);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,SingleItemEventPropertiesDictionary,The following statement contains a magic number: dictionary["Hello World"] = 42;
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,SingleItemMessagePropertiesDictionaryNoLookup,The following statement contains a magic number: LogEventInfo logEvent = new LogEventInfo(LogLevel.Info' "MyLogger"' string.Empty' new[] { new MessageTemplateParameter("Hello World"' 42' null' CaptureType.Normal) });
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,SingleItemMessagePropertiesDictionaryNoLookup,The following statement contains a magic number: Assert.Equal(42' item.Value);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,SingleItemMessagePropertiesDictionaryNoLookup,The following statement contains a magic number: Assert.Equal(42' item);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,SingleItemMessagePropertiesDictionaryNoLookup,The following statement contains a magic number: Assert.Equal(42' copyToArray[0].Value);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,SingleItemMessagePropertiesDictionaryNoLookup,The following statement contains a magic number: Assert.Equal(42' copyToValuesArray[0]);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,SingleItemMessagePropertiesDictionaryWithLookup,The following statement contains a magic number: LogEventInfo logEvent = new LogEventInfo(LogLevel.Info' "MyLogger"' string.Empty' new[] { new MessageTemplateParameter("Hello World"' 42' null' CaptureType.Normal) });
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,SingleItemMessagePropertiesDictionaryWithLookup,The following statement contains a magic number: AssertContainsInDictionary(dictionary' "Hello World"' 42);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,SingleItemMessagePropertiesDictionaryWithLookup,The following statement contains a magic number: Assert.True(dictionary.Values.Contains(42));
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,SingleItemMessagePropertiesDictionaryWithLookup,The following statement contains a magic number: Assert.Equal(42' value);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,SingleItemMessagePropertiesDictionaryWithLookup,The following statement contains a magic number: Assert.Equal(42' copyToArray[0].Value);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,SingleItemMessagePropertiesDictionaryWithLookup,The following statement contains a magic number: Assert.Equal(42' copyToValuesArray[0]);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,MultiItemPropertiesDictionary,The following statement contains a magic number: LogEventInfo logEvent = new LogEventInfo(LogLevel.Info' "MyLogger"' string.Empty' new[] { new MessageTemplateParameter("Hello World"' 42' null' CaptureType.Normal) });
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,MultiItemPropertiesDictionary,The following statement contains a magic number: dictionary["Goodbye World"] = 666;
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,MultiItemPropertiesDictionary,The following statement contains a magic number: Assert.Equal(2' dictionary.Count);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,MultiItemPropertiesDictionary,The following statement contains a magic number: switch (i++)                  {                      case 0:                          Assert.Equal("Hello World"' item.Key);                          Assert.Equal(42' item.Value);                          break;                      case 1:                          Assert.Equal("Goodbye World"' item.Key);                          Assert.Equal(666' item.Value);                          break;                  }
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,MultiItemPropertiesDictionary,The following statement contains a magic number: switch (i++)                  {                      case 0:                          Assert.Equal("Hello World"' item.Key);                          Assert.Equal(42' item.Value);                          break;                      case 1:                          Assert.Equal("Goodbye World"' item.Key);                          Assert.Equal(666' item.Value);                          break;                  }
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,MultiItemPropertiesDictionary,The following statement contains a magic number: Assert.Equal(2' i);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,MultiItemPropertiesDictionary,The following statement contains a magic number: Assert.Equal(2' i);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,MultiItemPropertiesDictionary,The following statement contains a magic number: switch (i++)                  {                      case 0:                          Assert.Equal(42' item);                          break;                      case 1:                          Assert.Equal(666' item);                          break;                  }
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,MultiItemPropertiesDictionary,The following statement contains a magic number: switch (i++)                  {                      case 0:                          Assert.Equal(42' item);                          break;                      case 1:                          Assert.Equal(666' item);                          break;                  }
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,MultiItemPropertiesDictionary,The following statement contains a magic number: AssertContainsInDictionary(dictionary' "Hello World"' 42);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,MultiItemPropertiesDictionary,The following statement contains a magic number: Assert.True(dictionary.Values.Contains(42));
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,MultiItemPropertiesDictionary,The following statement contains a magic number: AssertContainsInDictionary(dictionary' "Goodbye World"' 666);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,MultiItemPropertiesDictionary,The following statement contains a magic number: Assert.True(dictionary.Values.Contains(666));
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,MultiItemPropertiesDictionary,The following statement contains a magic number: Assert.Equal(42' value);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,MultiItemPropertiesDictionary,The following statement contains a magic number: Assert.Equal(666' value);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,MultiItemPropertiesDictionary,The following statement contains a magic number: var copyToArray = new KeyValuePair<object' object>[2];
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,MultiItemPropertiesDictionary,The following statement contains a magic number: Assert.Contains(new KeyValuePair<object' object>("Hello World"' 42)' copyToArray);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,MultiItemPropertiesDictionary,The following statement contains a magic number: Assert.Contains(new KeyValuePair<object' object>("Goodbye World"' 666)' copyToArray);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,MultiItemPropertiesDictionary,The following statement contains a magic number: var copyToValuesArray = new object[2];
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,MultiItemPropertiesDictionary,The following statement contains a magic number: Assert.Contains(42' copyToValuesArray);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,MultiItemPropertiesDictionary,The following statement contains a magic number: Assert.Contains(666' copyToValuesArray);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,MultiItemPropertiesDictionary,The following statement contains a magic number: var copyToKeysArray = new object[2];
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,MultiItemPropertiesDictionary,The following statement contains a magic number: dictionary["Goodbye World"] = 666;
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,MultiItemPropertiesDictionary,The following statement contains a magic number: Assert.Equal(2' dictionary.Count);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,OverrideMessagePropertiesDictionary,The following statement contains a magic number: LogEventInfo logEvent = new LogEventInfo(LogLevel.Info' "MyLogger"' string.Empty' new[]              {                  new MessageTemplateParameter("Hello World"' 42' null' CaptureType.Normal)'                  new MessageTemplateParameter("Goodbye World"' 666' null' CaptureType.Normal)              });
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,OverrideMessagePropertiesDictionary,The following statement contains a magic number: LogEventInfo logEvent = new LogEventInfo(LogLevel.Info' "MyLogger"' string.Empty' new[]              {                  new MessageTemplateParameter("Hello World"' 42' null' CaptureType.Normal)'                  new MessageTemplateParameter("Goodbye World"' 666' null' CaptureType.Normal)              });
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,OverrideMessagePropertiesDictionary,The following statement contains a magic number: Assert.Equal(42' dictionary["Hello World"]);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,OverrideMessagePropertiesDictionary,The following statement contains a magic number: dictionary["Hello World"] = 999;
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,OverrideMessagePropertiesDictionary,The following statement contains a magic number: Assert.Equal(999' dictionary["Hello World"]);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,OverrideMessagePropertiesDictionary,The following statement contains a magic number: Assert.True(dictionary.Values.Contains(999));
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,OverrideMessagePropertiesDictionary,The following statement contains a magic number: Assert.True(dictionary.Values.Contains(666));
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,OverrideMessagePropertiesDictionary,The following statement contains a magic number: Assert.False(dictionary.Values.Contains(42));
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,OverrideMessagePropertiesDictionary,The following statement contains a magic number: switch (i++)                  {                      case 1:                          Assert.Equal("Hello World"' item.Key);                          Assert.Equal(999' item.Value);                          break;                      case 0:                          Assert.Equal("Goodbye World"' item.Key);                          Assert.Equal(666' item.Value);                          break;                  }
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,OverrideMessagePropertiesDictionary,The following statement contains a magic number: switch (i++)                  {                      case 1:                          Assert.Equal("Hello World"' item.Key);                          Assert.Equal(999' item.Value);                          break;                      case 0:                          Assert.Equal("Goodbye World"' item.Key);                          Assert.Equal(666' item.Value);                          break;                  }
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,OverrideMessagePropertiesDictionary,The following statement contains a magic number: Assert.Equal(2' i);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,OverrideMessagePropertiesDictionary,The following statement contains a magic number: Assert.Equal(2' i);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,OverrideMessagePropertiesDictionary,The following statement contains a magic number: switch (i++)                  {                      case 1:                          Assert.Equal(999' item);                          break;                      case 0:                          Assert.Equal(666' item);                          break;                  }
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,OverrideMessagePropertiesDictionary,The following statement contains a magic number: switch (i++)                  {                      case 1:                          Assert.Equal(999' item);                          break;                      case 0:                          Assert.Equal(666' item);                          break;                  }
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,OverrideMessagePropertiesDictionary,The following statement contains a magic number: dictionary["Goodbye World"] = 42;
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,OverrideMessagePropertiesDictionary,The following statement contains a magic number: Assert.Equal(2' i);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,NonUniqueMessagePropertiesDictionary,The following statement contains a magic number: LogEventInfo logEvent = new LogEventInfo(LogLevel.Info' "MyLogger"' string.Empty' new[]  {                  new MessageTemplateParameter("Hello World"' 42' null' CaptureType.Normal)'                  new MessageTemplateParameter("Hello World"' 666' null' CaptureType.Normal)              });
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,NonUniqueMessagePropertiesDictionary,The following statement contains a magic number: LogEventInfo logEvent = new LogEventInfo(LogLevel.Info' "MyLogger"' string.Empty' new[]  {                  new MessageTemplateParameter("Hello World"' 42' null' CaptureType.Normal)'                  new MessageTemplateParameter("Hello World"' 666' null' CaptureType.Normal)              });
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,NonUniqueMessagePropertiesDictionary,The following statement contains a magic number: Assert.Equal(42' dictionary["Hello World"]);
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,NonUniqueMessagePropertiesDictionary,The following statement contains a magic number: parameters.Add(new MessageTemplateParameter("Hello World"' 42' null' CaptureType.Normal));
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,NonUniqueMessagePropertiesDictionary,The following statement contains a magic number: parameters.Add(new MessageTemplateParameter("Hello World"' 666' null' CaptureType.Normal));
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,NonUniqueMessagePropertiesDictionary,The following statement contains a magic number: i < 100
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,NonUniqueMessagePropertiesDictionary,The following statement contains a magic number: logEvent = new LogEventInfo(LogLevel.Info' "MyLogger"' string.Empty' new[]              {                  new MessageTemplateParameter("Hello World"' 42' null' CaptureType.Normal)'                  new MessageTemplateParameter("Hello World"' 666' null' CaptureType.Normal)              });
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,NonUniqueMessagePropertiesDictionary,The following statement contains a magic number: logEvent = new LogEventInfo(LogLevel.Info' "MyLogger"' string.Empty' new[]              {                  new MessageTemplateParameter("Hello World"' 42' null' CaptureType.Normal)'                  new MessageTemplateParameter("Hello World"' 666' null' CaptureType.Normal)              });
Magic Number,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,NonUniqueMessagePropertiesDictionary,The following statement contains a magic number: Assert.Equal(42' dictionary["Hello World"]);
Magic Number,NLog.UnitTests.Internal,SortHelpersTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\SortHelpersTests.cs,SingleBucketDictionary_OneBucketEmptyTest,The following statement contains a magic number: KeyValuePair<string' IList<string>>[] copyToResult = new KeyValuePair<string' IList<string>>[10];
Magic Number,NLog.UnitTests.Internal,SortHelpersTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\SortHelpersTests.cs,SingleBucketDictionary_OneBucketOneItem,The following statement contains a magic number: KeyValuePair<string' IList<string>>[] copyToResult = new KeyValuePair<string' IList<string>>[10];
Magic Number,NLog.UnitTests.Internal,SortHelpersTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\SortHelpersTests.cs,SingleBucketDictionary_OneBucketTwoItemsTest,The following statement contains a magic number: KeyValuePair<string' IList<string>>[] copyToResult = new KeyValuePair<string' IList<string>>[10];
Magic Number,NLog.UnitTests.Internal,SortHelpersTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\SortHelpersTests.cs,SingleBucketDictionary_OneBucketTwoItemsTest,The following statement contains a magic number: Assert.Equal(2' copyToResult[0].Value.Count);
Magic Number,NLog.UnitTests.Internal,SortHelpersTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\SortHelpersTests.cs,SingleBucketDictionary_OneBucketTwoItemsTest,The following statement contains a magic number: Assert.Equal(2' item.Value.Count);
Magic Number,NLog.UnitTests.Internal,SortHelpersTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\SortHelpersTests.cs,SingleBucketDictionary_OneBucketTwoItemsTest,The following statement contains a magic number: Assert.Equal(2' val.Count);
Magic Number,NLog.UnitTests.Internal,SortHelpersTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\SortHelpersTests.cs,SingleBucketDictionary_OneBucketTwoItemsTest,The following statement contains a magic number: Assert.Equal(2' dict["Bucket1"].Count);
Magic Number,NLog.UnitTests.Internal,SortHelpersTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\SortHelpersTests.cs,SingleBucketDictionary_OneBucketTwoItemsTest,The following statement contains a magic number: Assert.True(dict.TryGetValue("Bucket1"' out bucket) && bucket.Count == 2);
Magic Number,NLog.UnitTests.Internal,SortHelpersTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\SortHelpersTests.cs,SingleBucketDictionary_TwoBucketEmptyTest,The following statement contains a magic number: Assert.Equal(2' dict.Count);
Magic Number,NLog.UnitTests.Internal,SortHelpersTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\SortHelpersTests.cs,SingleBucketDictionary_TwoBucketEmptyTest,The following statement contains a magic number: KeyValuePair<string' IList<string>>[] copyToResult = new KeyValuePair<string' IList<string>>[10];
Magic Number,NLog.UnitTests.Internal,SortHelpersTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\SortHelpersTests.cs,SingleBucketDictionary_TwoBucketEmptyTest,The following statement contains a magic number: Assert.Equal(2' dict.Count());
Magic Number,NLog.UnitTests.Internal,SortHelpersTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\SortHelpersTests.cs,SingleBucketDictionary_TwoBucketEmptyTest,The following statement contains a magic number: Assert.Equal(2' dict.Keys.Count);
Magic Number,NLog.UnitTests.Internal,SortHelpersTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\SortHelpersTests.cs,SingleBucketDictionary_TwoBucketEmptyTest,The following statement contains a magic number: Assert.Equal(2' dict.Values.Count);
Magic Number,NLog.UnitTests.Internal,SortHelpersTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\SortHelpersTests.cs,SingleBucketDictionary_TwoBuckettOneItemTest,The following statement contains a magic number: Assert.Equal(2' dict.Count);
Magic Number,NLog.UnitTests.Internal,SortHelpersTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\SortHelpersTests.cs,SingleBucketDictionary_TwoBuckettOneItemTest,The following statement contains a magic number: KeyValuePair<string' IList<string>>[] copyToResult = new KeyValuePair<string' IList<string>>[10];
Magic Number,NLog.UnitTests.Internal,SortHelpersTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\SortHelpersTests.cs,SingleBucketDictionary_TwoBuckettOneItemTest,The following statement contains a magic number: Assert.Equal(2' dict.Count());
Magic Number,NLog.UnitTests.Internal,SortHelpersTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\SortHelpersTests.cs,SingleBucketDictionary_TwoBuckettOneItemTest,The following statement contains a magic number: Assert.Equal(2' dict.Keys.Count);
Magic Number,NLog.UnitTests.Internal,SortHelpersTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\SortHelpersTests.cs,SingleBucketDictionary_TwoBuckettOneItemTest,The following statement contains a magic number: Assert.Equal(2' dict.Values.Count);
Magic Number,NLog.UnitTests.Internal,StringBuilderPoolTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\StringBuilderPoolTests.cs,StringBuilderPoolMaxCapacityTest,The following statement contains a magic number: int poolItemCount = 10;
Magic Number,NLog.UnitTests.Internal,StringBuilderPoolTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\StringBuilderPoolTests.cs,StringBuilderPoolMaxCapacityTest,The following statement contains a magic number: string mediumPayload = new string('A'' 300000);
Magic Number,NLog.UnitTests.Internal,StringBuilderPoolTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\StringBuilderPoolTests.cs,StringBuilderPoolMaxCapacityTest,The following statement contains a magic number: string largePayload = new string('A'' 1000000);
Magic Number,NLog.UnitTests.Internal,UrlHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\UrlHelperTests.cs,EscapeDataEncodeTestRfc2396,The following statement contains a magic number: System.Text.StringBuilder builder = new System.Text.StringBuilder(input.Length + 20);
Magic Number,NLog.UnitTests.Internal,UrlHelperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\UrlHelperTests.cs,EscapeDataEncodeTestRfc3986,The following statement contains a magic number: System.Text.StringBuilder builder = new System.Text.StringBuilder(input.Length + 20);
Magic Number,NLog.UnitTests.Internal.FileAppenders,FileAppenderCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\FileAppenders\FileAppenderCacheTests.cs,FileAppenderCache_Construction,The following statement contains a magic number: FileAppenderCache cache = new FileAppenderCache(3' appenderFactory' fileTarget);
Magic Number,NLog.UnitTests.Internal.FileAppenders,FileAppenderCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\FileAppenders\FileAppenderCacheTests.cs,FileAppenderCache_Construction,The following statement contains a magic number: Assert.True(cache.Size == 3);
Magic Number,NLog.UnitTests.Internal.FileAppenders,FileAppenderCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\FileAppenders\FileAppenderCacheTests.cs,FileAppenderCache_Allocate,The following statement contains a magic number: FileAppenderCache cache = new FileAppenderCache(3' appenderFactory' fileTarget);
Magic Number,NLog.UnitTests.Internal.FileAppenders,FileAppenderCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\FileAppenders\FileAppenderCacheTests.cs,FileAppenderCache_InvalidateAppender,The following statement contains a magic number: FileAppenderCache cache = new FileAppenderCache(3' appenderFactory' fileTarget);
Magic Number,NLog.UnitTests.Internal.FileAppenders,FileAppenderCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\FileAppenders\FileAppenderCacheTests.cs,FileAppenderCache_CloseAppenders,The following statement contains a magic number: FileAppenderCache cache = new FileAppenderCache(3' appenderFactory' fileTarget);
Magic Number,NLog.UnitTests.Internal.FileAppenders,FileAppenderCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\FileAppenders\FileAppenderCacheTests.cs,FileAppenderCache_CloseAppenders,The following statement contains a magic number: FileAppenderCache cache2 = new FileAppenderCache(3' appenderFactory' fileTarget);
Magic Number,NLog.UnitTests.Internal.FileAppenders,FileAppenderCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\FileAppenders\FileAppenderCacheTests.cs,FileAppenderCache_GetFileCharacteristics,The following statement contains a magic number: FileAppenderCache cache = new FileAppenderCache(3' appenderFactory' fileParameters);
Magic Number,NLog.UnitTests.Internal.FileAppenders,FileAppenderCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\FileAppenders\FileAppenderCacheTests.cs,FileAppenderCache_GetFileCharacteristics,The following statement contains a magic number: Assert.True(fileCreationTimeUtc > Time.TimeSource.Current.FromSystemTime(DateTime.UtcNow.AddMinutes(-2))'"creationtime is wrong");
Magic Number,NLog.UnitTests.Internal.FileAppenders,FileAppenderCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\FileAppenders\FileAppenderCacheTests.cs,FileAppenderCache_GetFileCharacteristics,The following statement contains a magic number: Assert.True(fileLastWriteTimeUtc > DateTime.UtcNow.AddMinutes(-2)' "lastwrite is wrong");
Magic Number,NLog.UnitTests.Internal.FileAppenders,FileAppenderCacheTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\FileAppenders\FileAppenderCacheTests.cs,FileAppenderCache_GetFileCharacteristics,The following statement contains a magic number: Assert.Equal(34' cache.GetFileLength(tempFile));
Magic Number,NLog.UnitTests.Internal.NetworkSenders,TcpNetworkSenderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\NetworkSenders\TcpNetworkSenderTests.cs,TcpHappyPathTest,The following statement contains a magic number: i < 8
Magic Number,NLog.UnitTests.Internal.NetworkSenders,TcpNetworkSenderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\NetworkSenders\TcpNetworkSenderTests.cs,TcpHappyPathTest,The following statement contains a magic number: i < 8
Magic Number,NLog.UnitTests.Internal.NetworkSenders,TcpNetworkSenderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\NetworkSenders\TcpNetworkSenderTests.cs,TcpConnectFailureTest,The following statement contains a magic number: sender.Send(                      buffer' 0' i' ex =>                      {                          lock (exceptions)                          {                              exceptions.Add(ex);                              if (exceptions.Count == 7)                              {                                  allSent.Set();                              }                          }                      });
Magic Number,NLog.UnitTests.Internal.NetworkSenders,TcpNetworkSenderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\NetworkSenders\TcpNetworkSenderTests.cs,TcpConnectFailureTest,The following statement contains a magic number: i < 8
Magic Number,NLog.UnitTests.Internal.NetworkSenders,TcpNetworkSenderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\NetworkSenders\TcpNetworkSenderTests.cs,TcpConnectFailureTest,The following statement contains a magic number: Assert.True(allSent.WaitOne(3000' false));
Magic Number,NLog.UnitTests.Internal.NetworkSenders,TcpNetworkSenderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\NetworkSenders\TcpNetworkSenderTests.cs,TcpConnectFailureTest,The following statement contains a magic number: mre.WaitOne(3000' false);
Magic Number,NLog.UnitTests.Internal.NetworkSenders,TcpNetworkSenderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\NetworkSenders\TcpNetworkSenderTests.cs,TcpSendFailureTest,The following statement contains a magic number: var sender = new MyTcpNetworkSender("tcp://hostname:123"' AddressFamily.Unspecified)              {                  SendFailureIn = 3' // will cause failure on 3rd send                  Async = true'              };
Magic Number,NLog.UnitTests.Internal.NetworkSenders,TcpNetworkSenderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\NetworkSenders\TcpNetworkSenderTests.cs,TcpSendFailureTest,The following statement contains a magic number: var exceptions = new Exception[9];
Magic Number,NLog.UnitTests.Internal.NetworkSenders,TcpNetworkSenderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\NetworkSenders\TcpNetworkSenderTests.cs,TcpSendFailureTest,The following statement contains a magic number: i < 10
Magic Number,NLog.UnitTests.Internal.NetworkSenders,TcpNetworkSenderTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\NetworkSenders\TcpNetworkSenderTests.cs,TcpSendFailureTest,The following statement contains a magic number: i < 2
Magic Number,NLog.UnitTests.Internal.NetworkSenders,MockSocket,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\NetworkSenders\TcpNetworkSenderTests.cs,InvokeCallback,The following statement contains a magic number: ThreadPool.QueueUserWorkItem(s =>                              {                                  Thread.Sleep(10);                                  args2.RaiseCompleted();                              });
Magic Number,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,ClassNameWithPaddingTestPadLeftAlignLeftTest,The following statement contains a magic number: AssertDebugLastMessage("debug"' currentMethod.DeclaringType.FullName.Substring(0' 3) + " msg");
Magic Number,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,ClassNameWithPaddingTestPadLeftAlignRightTest,The following statement contains a magic number: AssertDebugLastMessage("debug"' typeName.Substring(typeName.Length - 3) + " msg");
Magic Number,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,ClassNameWithPaddingTestPadRightAlignLeftTest,The following statement contains a magic number: AssertDebugLastMessage("debug"' currentMethod.DeclaringType.FullName.Substring(0' 3) + " msg");
Magic Number,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,ClassNameWithPaddingTestPadRightAlignRightTest,The following statement contains a magic number: AssertDebugLastMessage("debug"' typeName.Substring(typeName.Length - 3) + " msg");
Magic Number,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,CleanMethodNamesOfAnonymousDelegatesTest,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,DontCleanMethodNamesOfAnonymousDelegatesTest,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,CleanClassNamesOfAnonymousDelegatesTest,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,DontCleanClassNamesOfAnonymousDelegatesTest,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,When_NotIncludeNameSpace_Then_CleanAnonymousDelegateClassNameShouldReturnParentClassName,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,Should_preserve_correct_callsite_information,The following statement contains a magic number: logMessage = target.Logs[2];
Magic Number,NLog.UnitTests.LayoutRenderers,CallSiteTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\CallSite and stacktraces\CallSiteTests.cs,Should_preserve_correct_callsite_information,The following statement contains a magic number: logMessage = target.Logs[3];
Magic Number,NLog.UnitTests.LayoutRenderers,EventPropertiesTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\EventPropertiesTests.cs,DateTime,The following statement contains a magic number: logEvent.Properties["prop1"] = new DateTime(2020' 2' 21' 23' 1' 0);
Magic Number,NLog.UnitTests.LayoutRenderers,EventPropertiesTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\EventPropertiesTests.cs,DateTime,The following statement contains a magic number: logEvent.Properties["prop1"] = new DateTime(2020' 2' 21' 23' 1' 0);
Magic Number,NLog.UnitTests.LayoutRenderers,EventPropertiesTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\EventPropertiesTests.cs,DateTime,The following statement contains a magic number: logEvent.Properties["prop1"] = new DateTime(2020' 2' 21' 23' 1' 0);
Magic Number,NLog.UnitTests.LayoutRenderers,EventPropertiesTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\EventPropertiesTests.cs,DateTime,The following statement contains a magic number: logEvent.Properties["prop1"] = new DateTime(2020' 2' 21' 23' 1' 0);
Magic Number,NLog.UnitTests.LayoutRenderers,EventPropertiesTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\EventPropertiesTests.cs,DateTimeFormat,The following statement contains a magic number: logEvent.Properties["prop1"] = new DateTime(2020' 2' 21' 23' 1' 0);
Magic Number,NLog.UnitTests.LayoutRenderers,EventPropertiesTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\EventPropertiesTests.cs,DateTimeFormat,The following statement contains a magic number: logEvent.Properties["prop1"] = new DateTime(2020' 2' 21' 23' 1' 0);
Magic Number,NLog.UnitTests.LayoutRenderers,EventPropertiesTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\EventPropertiesTests.cs,DateTimeFormat,The following statement contains a magic number: logEvent.Properties["prop1"] = new DateTime(2020' 2' 21' 23' 1' 0);
Magic Number,NLog.UnitTests.LayoutRenderers,EventPropertiesTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\EventPropertiesTests.cs,DateTimeFormat,The following statement contains a magic number: logEvent.Properties["prop1"] = new DateTime(2020' 2' 21' 23' 1' 0);
Magic Number,NLog.UnitTests.LayoutRenderers,EventPropertiesTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\EventPropertiesTests.cs,DateTimeCulture,The following statement contains a magic number: logEvent.Properties["prop1"] = new DateTime(2020' 2' 21' 23' 1' 0);
Magic Number,NLog.UnitTests.LayoutRenderers,EventPropertiesTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\EventPropertiesTests.cs,DateTimeCulture,The following statement contains a magic number: logEvent.Properties["prop1"] = new DateTime(2020' 2' 21' 23' 1' 0);
Magic Number,NLog.UnitTests.LayoutRenderers,EventPropertiesTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\EventPropertiesTests.cs,DateTimeCulture,The following statement contains a magic number: logEvent.Properties["prop1"] = new DateTime(2020' 2' 21' 23' 1' 0);
Magic Number,NLog.UnitTests.LayoutRenderers,EventPropertiesTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\EventPropertiesTests.cs,DateTimeCulture,The following statement contains a magic number: logEvent.Properties["prop1"] = new DateTime(2020' 2' 21' 23' 1' 0);
Magic Number,NLog.UnitTests.LayoutRenderers,EventPropertiesTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\EventPropertiesTests.cs,ObjectPathNestedProperty,The following statement contains a magic number: logEvent.Properties["prop1"] = new { Id = 1' id = 2' Name = "test"' Nested = new { Id = 3 } };
Magic Number,NLog.UnitTests.LayoutRenderers,EventPropertiesTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\EventPropertiesTests.cs,ObjectPathNestedProperty,The following statement contains a magic number: logEvent.Properties["prop1"] = new { Id = 1' id = 2' Name = "test"' Nested = new { Id = 3 } };
Magic Number,NLog.UnitTests.LayoutRenderers,EventPropertiesTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\EventPropertiesTests.cs,ObjectPathNestedProperty,The following statement contains a magic number: logEvent2.Properties["prop1"] = new { Id = 1' id = 2' Name = "test"' Nested = new { Id = 3 } };
Magic Number,NLog.UnitTests.LayoutRenderers,EventPropertiesTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\EventPropertiesTests.cs,ObjectPathNestedProperty,The following statement contains a magic number: logEvent2.Properties["prop1"] = new { Id = 1' id = 2' Name = "test"' Nested = new { Id = 3 } };
Magic Number,NLog.UnitTests.LayoutRenderers,GDCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\GDCTests.cs,GDCFormatTest,The following statement contains a magic number: GlobalDiagnosticsContext.Set("appid"' new { AppId = 123 });
Magic Number,NLog.UnitTests.LayoutRenderers,MDCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\MDCTests.cs,MDCFormatTest,The following statement contains a magic number: MappedDiagnosticsContext.Set("myitem"' new { RequestId = 123 });
Magic Number,NLog.UnitTests.LayoutRenderers,MdlcLayoutRendererTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\MdlcLayoutRendererTests.cs,MdlcLayoutFormatTest,The following statement contains a magic number: MappedDiagnosticsLogicalContext.Set("myitem"' new { RequestId = 123 });
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCDeepTest,The following statement contains a magic number: i <= 100
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: Assert.Equal(6' measurements.Length);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: Assert.InRange(int.Parse(measurements[2])' 0' 999);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: Assert.InRange(int.Parse(measurements[2])' 0' 999);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: Assert.InRange(int.Parse(measurements[4])' 0' 9999999);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: Assert.InRange(int.Parse(measurements[4])' 0' 9999999);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: System.Threading.Thread.Sleep(10);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: Assert.InRange(int.Parse(measurements[2])' 10' 999);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: Assert.InRange(int.Parse(measurements[2])' 10' 999);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: Assert.InRange(int.Parse(measurements[2])' 10' 999);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: Assert.InRange(int.Parse(measurements[4])' 100000' 9999999);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: Assert.InRange(int.Parse(measurements[4])' 100000' 9999999);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: Assert.InRange(int.Parse(measurements[4])' 100000' 9999999);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: Assert.Equal(6' measurements.Length);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: Assert.InRange(int.Parse(measurements[2])' 10' 999);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: Assert.InRange(int.Parse(measurements[2])' 10' 999);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: Assert.InRange(int.Parse(measurements[2])' 10' 999);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: Assert.InRange(int.Parse(measurements[4])' 0' 9999999);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: Assert.InRange(int.Parse(measurements[4])' 0' 9999999);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: System.Threading.Thread.Sleep(10);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: Assert.Equal(6' measurements.Length);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: Assert.InRange(int.Parse(measurements[2])' 20' 999);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: Assert.InRange(int.Parse(measurements[2])' 20' 999);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: Assert.InRange(int.Parse(measurements[2])' 20' 999);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: Assert.InRange(int.Parse(measurements[4])' 100000' 9999999);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: Assert.InRange(int.Parse(measurements[4])' 100000' 9999999);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: Assert.InRange(int.Parse(measurements[4])' 100000' 9999999);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: Assert.InRange(int.Parse(measurements[2])' 20' 999);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: Assert.InRange(int.Parse(measurements[2])' 20' 999);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: Assert.InRange(int.Parse(measurements[2])' 20' 999);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: Assert.InRange(int.Parse(measurements[4])' 200000' 9999999);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: Assert.InRange(int.Parse(measurements[4])' 200000' 9999999);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCTimingTest,The following statement contains a magic number: Assert.InRange(int.Parse(measurements[4])' 200000' 9999999);
Magic Number,NLog.UnitTests.LayoutRenderers,NDLCTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\NDLCTests.cs,NDLCAsyncLogging,The following statement contains a magic number: task = System.Threading.Tasks.Task.Run(async () => { await System.Threading.Tasks.Task.Delay(50); LogManager.GetLogger("B").Debug("b"); });
Magic Number,NLog.UnitTests.LayoutRenderers,DateTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\DateTests.cs,DefaultDateTest,The following statement contains a magic number: Assert.True(Math.Abs((dt - now).TotalSeconds) < 5);
Magic Number,NLog.UnitTests.LayoutRenderers,LongDateTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\LongDateTests.cs,LongDateTest,The following statement contains a magic number: Assert.Equal(24' date.Length);
Magic Number,NLog.UnitTests.LayoutRenderers,LongDateTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\LongDateTests.cs,LongDateTest,The following statement contains a magic number: Assert.Equal('-'' date[4]);
Magic Number,NLog.UnitTests.LayoutRenderers,LongDateTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\LongDateTests.cs,LongDateTest,The following statement contains a magic number: Assert.Equal('-'' date[7]);
Magic Number,NLog.UnitTests.LayoutRenderers,LongDateTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\LongDateTests.cs,LongDateTest,The following statement contains a magic number: Assert.Equal(' '' date[10]);
Magic Number,NLog.UnitTests.LayoutRenderers,LongDateTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\LongDateTests.cs,LongDateTest,The following statement contains a magic number: Assert.Equal(':'' date[13]);
Magic Number,NLog.UnitTests.LayoutRenderers,LongDateTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\LongDateTests.cs,LongDateTest,The following statement contains a magic number: Assert.Equal(':'' date[16]);
Magic Number,NLog.UnitTests.LayoutRenderers,LongDateTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\LongDateTests.cs,LongDateTest,The following statement contains a magic number: Assert.Equal('.'' date[19]);
Magic Number,NLog.UnitTests.LayoutRenderers,LongDateTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\LongDateTests.cs,LongDateWithPaddingPadLeftAlignLeft,The following statement contains a magic number: Assert.Equal(5' date.Length);
Magic Number,NLog.UnitTests.LayoutRenderers,LongDateTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\LongDateTests.cs,LongDateWithPaddingPadLeftAlignLeft,The following statement contains a magic number: Assert.Equal('-'' date[4]);
Magic Number,NLog.UnitTests.LayoutRenderers,LongDateTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\LongDateTests.cs,LongDateWithPaddingPadLeftAlignRight,The following statement contains a magic number: Assert.Equal(5' date.Length);
Magic Number,NLog.UnitTests.LayoutRenderers,LongDateTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\LongDateTests.cs,LongDateWithPaddingPadRightAlignLeft,The following statement contains a magic number: Assert.Equal(5' date.Length);
Magic Number,NLog.UnitTests.LayoutRenderers,LongDateTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\LongDateTests.cs,LongDateWithPaddingPadRightAlignLeft,The following statement contains a magic number: Assert.Equal('-'' date[4]);
Magic Number,NLog.UnitTests.LayoutRenderers,LongDateTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\LongDateTests.cs,LongDateWithPaddingPadRightAlignRight,The following statement contains a magic number: Assert.Equal(5' date.Length);
Magic Number,NLog.UnitTests.LayoutRenderers,ShortDateTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\ShortDateTests.cs,OneDigitMonthTest,The following statement contains a magic number: logEvent.TimeStamp = new DateTime(2015' 1' 1);
Magic Number,NLog.UnitTests.LayoutRenderers,ShortDateTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\ShortDateTests.cs,TwoDigitMonthTest,The following statement contains a magic number: logEvent.TimeStamp = new DateTime(2015' 12' 1);
Magic Number,NLog.UnitTests.LayoutRenderers,ShortDateTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\ShortDateTests.cs,TwoDigitMonthTest,The following statement contains a magic number: logEvent.TimeStamp = new DateTime(2015' 12' 1);
Magic Number,NLog.UnitTests.LayoutRenderers,ShortDateTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\ShortDateTests.cs,OneDigitDayTest,The following statement contains a magic number: logEvent.TimeStamp = new DateTime(2015' 1' 1);
Magic Number,NLog.UnitTests.LayoutRenderers,ShortDateTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\ShortDateTests.cs,TwoDigitDayTest,The following statement contains a magic number: logEvent.TimeStamp = new DateTime(2015' 12' 12);
Magic Number,NLog.UnitTests.LayoutRenderers,ShortDateTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\ShortDateTests.cs,TwoDigitDayTest,The following statement contains a magic number: logEvent.TimeStamp = new DateTime(2015' 12' 12);
Magic Number,NLog.UnitTests.LayoutRenderers,ShortDateTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\ShortDateTests.cs,TwoDigitDayTest,The following statement contains a magic number: logEvent.TimeStamp = new DateTime(2015' 12' 12);
Magic Number,NLog.UnitTests.LayoutRenderers,TimeTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\TimeTests.cs,TimeTest,The following statement contains a magic number: Assert.Equal(13' date.Length);
Magic Number,NLog.UnitTests.LayoutRenderers,TimeTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\TimeTests.cs,TimeTest,The following statement contains a magic number: Assert.Equal(':'' date[2]);
Magic Number,NLog.UnitTests.LayoutRenderers,TimeTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\TimeTests.cs,TimeTest,The following statement contains a magic number: Assert.Equal(':'' date[5]);
Magic Number,NLog.UnitTests.LayoutRenderers,TimeTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\TimeTests.cs,TimeTest,The following statement contains a magic number: Assert.Equal('.'' date[8]);
Magic Number,NLog.UnitTests.LayoutRenderers,TimeTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\TimeTests.cs,LongDateWithPaddingPadLeftAlignLeft,The following statement contains a magic number: Assert.Equal(5' date.Length);
Magic Number,NLog.UnitTests.LayoutRenderers,TimeTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\TimeTests.cs,LongDateWithPaddingPadLeftAlignLeft,The following statement contains a magic number: Assert.Equal('-'' date[4]);
Magic Number,NLog.UnitTests.LayoutRenderers,TimeTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\TimeTests.cs,LongDateWithPaddingPadLeftAlignRight,The following statement contains a magic number: Assert.Equal(5' date.Length);
Magic Number,NLog.UnitTests.LayoutRenderers,TimeTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\TimeTests.cs,LongDateWithPaddingPadRightAlignLeft,The following statement contains a magic number: Assert.Equal(5' date.Length);
Magic Number,NLog.UnitTests.LayoutRenderers,TimeTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\TimeTests.cs,LongDateWithPaddingPadRightAlignLeft,The following statement contains a magic number: Assert.Equal('-'' date[4]);
Magic Number,NLog.UnitTests.LayoutRenderers,TimeTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Date and timings\TimeTests.cs,LongDateWithPaddingPadRightAlignRight,The following statement contains a magic number: Assert.Equal(5' date.Length);
Magic Number,NLog.UnitTests.LayoutRenderers,ExceptionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\ExceptionTests.cs,GetExceptionWithStackTrace,The following statement contains a magic number: GenericClass<int' string' bool>.Method1("aaa"' true' null' 42' DateTime.Now' exceptionMessage);
Magic Number,NLog.UnitTests.LayoutRenderers,ExceptionTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\ExceptionTests.cs,GetNestedExceptionWithStackTrace,The following statement contains a magic number: GenericClass<int' string' bool>.Method1("aaa"' true' null' 42' DateTime.Now' exceptionMessage);
Magic Number,NLog.UnitTests.LayoutRenderers,Log4JXmlTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Log4JXmlTests.cs,Log4JXmlTest,The following statement contains a magic number: switch (reader.LocalName)                          {                              case "dummyRoot":                                  break;                                case "event":                                  Assert.Equal("DEBUG"' reader.GetAttribute("level"));                                  Assert.Equal("A"' reader.GetAttribute("logger"));                                    var epochStart = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);                                  long timestamp = Convert.ToInt64(reader.GetAttribute("timestamp"));                                  var time = epochStart.AddMilliseconds(timestamp);                                  var now = DateTime.UtcNow;                                  Assert.True(now.Ticks - time.Ticks < TimeSpan.FromSeconds(3).Ticks);                                    Assert.Equal(Thread.CurrentThread.ManagedThreadId.ToString()' reader.GetAttribute("thread"));                                  break;                                case "message":                                  reader.Read();                                  Assert.Equal("some message"' reader.Value);                                  break;                                case "NDC":                                  reader.Read();                                  Assert.Equal("baz3::baz2::baz1::boo2 boo1"' reader.Value);                                  break;                                case "locationInfo":                                  Assert.Equal(MethodBase.GetCurrentMethod().DeclaringType.FullName' reader.GetAttribute("class"));                                  Assert.Equal(MethodBase.GetCurrentMethod().ToString()' reader.GetAttribute("method"));                                  break;                                case "properties":                                  break;                                case "throwable":                                  reader.Read();                                  Assert.Contains("Hello Exception"' reader.Value);                                  Assert.Contains("Goodbye Exception"' reader.Value);                                  break;                              case "data":                                  string name = reader.GetAttribute("name");                                  string value = reader.GetAttribute("value");                                    switch (name)                                  {                                      case "log4japp":                                          Assert.Equal(AppDomain.CurrentDomain.FriendlyName + "(" + Process.GetCurrentProcess().Id + ")"' value);                                          break;                                        case "log4jmachinename":                                          Assert.Equal(Environment.MachineName' value);                                          break;                                        case "foo1":                                          Assert.Equal("bar1"' value);                                          break;                                        case "foo2":                                          Assert.Equal("bar2"' value);                                          break;                                        case "foo3":                                          Assert.Equal("bar3"' value);                                          break;                                        case "nlogPropertyKey":                                          Assert.Equal("nlogPropertyValue"' value);                                          break;                                        default:                                          Assert.True(false' "Unknown <log4j:data>: " + name);                                          break;                                  }                                  break;                                default:                                  throw new NotSupportedException("Unknown element: " + key);                          }
Magic Number,NLog.UnitTests.LayoutRenderers,Log4JXmlTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Log4JXmlTests.cs,Log4JXmlTest,The following statement contains a magic number: switch (reader.LocalName)                          {                              case "dummyRoot":                                  break;                                case "event":                                  Assert.Equal("DEBUG"' reader.GetAttribute("level"));                                  Assert.Equal("A"' reader.GetAttribute("logger"));                                    var epochStart = new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc);                                  long timestamp = Convert.ToInt64(reader.GetAttribute("timestamp"));                                  var time = epochStart.AddMilliseconds(timestamp);                                  var now = DateTime.UtcNow;                                  Assert.True(now.Ticks - time.Ticks < TimeSpan.FromSeconds(3).Ticks);                                    Assert.Equal(Thread.CurrentThread.ManagedThreadId.ToString()' reader.GetAttribute("thread"));                                  break;                                case "message":                                  reader.Read();                                  Assert.Equal("some message"' reader.Value);                                  break;                                case "NDC":                                  reader.Read();                                  Assert.Equal("baz3::baz2::baz1::boo2 boo1"' reader.Value);                                  break;                                case "locationInfo":                                  Assert.Equal(MethodBase.GetCurrentMethod().DeclaringType.FullName' reader.GetAttribute("class"));                                  Assert.Equal(MethodBase.GetCurrentMethod().ToString()' reader.GetAttribute("method"));                                  break;                                case "properties":                                  break;                                case "throwable":                                  reader.Read();                                  Assert.Contains("Hello Exception"' reader.Value);                                  Assert.Contains("Goodbye Exception"' reader.Value);                                  break;                              case "data":                                  string name = reader.GetAttribute("name");                                  string value = reader.GetAttribute("value");                                    switch (name)                                  {                                      case "log4japp":                                          Assert.Equal(AppDomain.CurrentDomain.FriendlyName + "(" + Process.GetCurrentProcess().Id + ")"' value);                                          break;                                        case "log4jmachinename":                                          Assert.Equal(Environment.MachineName' value);                                          break;                                        case "foo1":                                          Assert.Equal("bar1"' value);                                          break;                                        case "foo2":                                          Assert.Equal("bar2"' value);                                          break;                                        case "foo3":                                          Assert.Equal("bar3"' value);                                          break;                                        case "nlogPropertyKey":                                          Assert.Equal("nlogPropertyValue"' value);                                          break;                                        default:                                          Assert.True(false' "Unknown <log4j:data>: " + name);                                          break;                                  }                                  break;                                default:                                  throw new NotSupportedException("Unknown element: " + key);                          }
Magic Number,NLog.UnitTests.LayoutRenderers,Log4JXmlTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Log4JXmlTests.cs,Log4JXmlEventLayoutParameterTest,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  LoggerName = "MyLOgger"'                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56' DateTimeKind.Utc)'                  Level = LogLevel.Info'                  Message = "hello' {0}"'                  Parameters = new[] { "world" }'              };
Magic Number,NLog.UnitTests.LayoutRenderers,Log4JXmlTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Log4JXmlTests.cs,Log4JXmlEventLayoutParameterTest,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  LoggerName = "MyLOgger"'                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56' DateTimeKind.Utc)'                  Level = LogLevel.Info'                  Message = "hello' {0}"'                  Parameters = new[] { "world" }'              };
Magic Number,NLog.UnitTests.LayoutRenderers,Log4JXmlTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Log4JXmlTests.cs,Log4JXmlEventLayoutParameterTest,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  LoggerName = "MyLOgger"'                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56' DateTimeKind.Utc)'                  Level = LogLevel.Info'                  Message = "hello' {0}"'                  Parameters = new[] { "world" }'              };
Magic Number,NLog.UnitTests.LayoutRenderers,Log4JXmlTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Log4JXmlTests.cs,Log4JXmlEventLayoutParameterTest,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  LoggerName = "MyLOgger"'                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56' DateTimeKind.Utc)'                  Level = LogLevel.Info'                  Message = "hello' {0}"'                  Parameters = new[] { "world" }'              };
Magic Number,NLog.UnitTests.LayoutRenderers,Log4JXmlTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Log4JXmlTests.cs,BadXmlValueTest,The following statement contains a magic number: int start = 64976;
Magic Number,NLog.UnitTests.LayoutRenderers,Log4JXmlTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Log4JXmlTests.cs,BadXmlValueTest,The following statement contains a magic number: int end = 65007;
Magic Number,NLog.UnitTests.LayoutRenderers,MessageTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\MessageTests.cs,MessageWithoutPaddingTest,The following statement contains a magic number: logger.Debug(CultureInfo.InvariantCulture' "a{0}"' new DateTime(2005' 1' 1));
Magic Number,NLog.UnitTests.LayoutRenderers,MessageTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\MessageTests.cs,MessageRightPaddingTest,The following statement contains a magic number: logger.Debug(CultureInfo.InvariantCulture' "a{0}"' new DateTime(2005' 1' 1));
Magic Number,NLog.UnitTests.LayoutRenderers,MessageTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\MessageTests.cs,MessageFixedLengthRightPaddingLeftAlignmentTest,The following statement contains a magic number: logger.Debug(CultureInfo.InvariantCulture' "a{0}"' new DateTime(2005' 1' 1));
Magic Number,NLog.UnitTests.LayoutRenderers,MessageTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\MessageTests.cs,MessageFixedLengthRightPaddingRightAlignmentTest,The following statement contains a magic number: logger.Debug(CultureInfo.InvariantCulture' "a{0}"' new DateTime(2005' 1' 1));
Magic Number,NLog.UnitTests.LayoutRenderers,MessageTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\MessageTests.cs,MessageLeftPaddingTest,The following statement contains a magic number: logger.Debug(CultureInfo.InvariantCulture' "a{0}"' new DateTime(2005' 1' 1));
Magic Number,NLog.UnitTests.LayoutRenderers,MessageTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\MessageTests.cs,MessageFixedLengthLeftPaddingLeftAlignmentTest,The following statement contains a magic number: logger.Debug(CultureInfo.InvariantCulture' "a{0}"' new DateTime(2005' 1' 1));
Magic Number,NLog.UnitTests.LayoutRenderers,MessageTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\MessageTests.cs,MessageFixedLengthLeftPaddingRightAlignmentTest,The following statement contains a magic number: logger.Debug(CultureInfo.InvariantCulture' "a{0}"' new DateTime(2005' 1' 1));
Magic Number,NLog.UnitTests.Layouts,AllEventPropertiesTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\AllEventPropertiesTests.cs,BuildLogEventWithProperties,The following statement contains a magic number: ev.Properties[17] = 100;
Magic Number,NLog.UnitTests.Layouts,AllEventPropertiesTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Contexts\AllEventPropertiesTests.cs,BuildLogEventWithProperties,The following statement contains a magic number: ev.Properties[17] = 100;
Magic Number,NLog.UnitTests.Layouts,CompoundLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CompoundLayoutTests.cs,CodeCompoundLayoutIsRenderedCorrectly,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 20' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,CompoundLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CompoundLayoutTests.cs,CodeCompoundLayoutIsRenderedCorrectly,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 20' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,CompoundLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CompoundLayoutTests.cs,CodeCompoundLayoutIsRenderedCorrectly,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 20' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,CompoundLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CompoundLayoutTests.cs,CodeCompoundLayoutIsRenderedCorrectly,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 20' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,CompoundLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CompoundLayoutTests.cs,CodeCompoundLayoutIsRenderedCorrectly,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 20' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,CompoundLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CompoundLayoutTests.cs,XmlCompoundLayoutIsRenderedCorrectly,The following statement contains a magic number: Assert.Equal(5' layouts.Count);
Magic Number,NLog.UnitTests.Layouts,CompoundLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CompoundLayoutTests.cs,XmlCompoundLayoutIsRenderedCorrectly,The following statement contains a magic number: var innerJsonLayout = (JsonLayout)layouts[2];
Magic Number,NLog.UnitTests.Layouts,CompoundLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CompoundLayoutTests.cs,XmlCompoundLayoutIsRenderedCorrectly,The following statement contains a magic number: Assert.Equal(2' innerJsonLayout.Attributes.Count);
Magic Number,NLog.UnitTests.Layouts,CompoundLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CompoundLayoutTests.cs,XmlCompoundLayoutIsRenderedCorrectly,The following statement contains a magic number: Assert.Equal(typeof(SimpleLayout)' layouts[3].GetType());
Magic Number,NLog.UnitTests.Layouts,CompoundLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CompoundLayoutTests.cs,XmlCompoundLayoutIsRenderedCorrectly,The following statement contains a magic number: Assert.Equal(typeof(SimpleLayout)' layouts[4].GetType());
Magic Number,NLog.UnitTests.Layouts,CompoundLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CompoundLayoutTests.cs,XmlCompoundLayoutIsRenderedCorrectly,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 20' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,CompoundLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CompoundLayoutTests.cs,XmlCompoundLayoutIsRenderedCorrectly,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 20' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,CompoundLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CompoundLayoutTests.cs,XmlCompoundLayoutIsRenderedCorrectly,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 20' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,CompoundLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CompoundLayoutTests.cs,XmlCompoundLayoutIsRenderedCorrectly,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 20' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,CompoundLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CompoundLayoutTests.cs,XmlCompoundLayoutIsRenderedCorrectly,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 20' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutRenderingNoQuoting,The following statement contains a magic number: ev.TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56);
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutRenderingNoQuoting,The following statement contains a magic number: ev.TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56);
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutRenderingNoQuoting,The following statement contains a magic number: ev.TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56);
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutRenderingNoQuoting,The following statement contains a magic number: ev.TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56);
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutRenderingFullQuoting,The following statement contains a magic number: ev.TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56);
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutRenderingFullQuoting,The following statement contains a magic number: ev.TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56);
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutRenderingFullQuoting,The following statement contains a magic number: ev.TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56);
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutRenderingFullQuoting,The following statement contains a magic number: ev.TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56);
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutRenderingAutoQuoting,The following statement contains a magic number: Assert.Equal(                  "2010-01-01 12:34:56.0000;Info;hello' world"'                  csvLayout.Render(new LogEventInfo                  {                      TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                      Level = LogLevel.Info'                      Message = "hello' world"                  }));
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutRenderingAutoQuoting,The following statement contains a magic number: Assert.Equal(                  "2010-01-01 12:34:56.0000;Info;hello' world"'                  csvLayout.Render(new LogEventInfo                  {                      TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                      Level = LogLevel.Info'                      Message = "hello' world"                  }));
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutRenderingAutoQuoting,The following statement contains a magic number: Assert.Equal(                  "2010-01-01 12:34:56.0000;Info;hello' world"'                  csvLayout.Render(new LogEventInfo                  {                      TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                      Level = LogLevel.Info'                      Message = "hello' world"                  }));
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutRenderingAutoQuoting,The following statement contains a magic number: Assert.Equal(                  "2010-01-01 12:34:56.0000;Info;hello' world"'                  csvLayout.Render(new LogEventInfo                  {                      TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                      Level = LogLevel.Info'                      Message = "hello' world"                  }));
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutRenderingAutoQuoting,The following statement contains a magic number: Assert.Equal(                  "2010-01-01 12:34:56.0000;Info;'hello\rworld'"'                  csvLayout.Render(new LogEventInfo                  {                      TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                      Level = LogLevel.Info'                      Message = "hello\rworld"                  }));
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutRenderingAutoQuoting,The following statement contains a magic number: Assert.Equal(                  "2010-01-01 12:34:56.0000;Info;'hello\rworld'"'                  csvLayout.Render(new LogEventInfo                  {                      TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                      Level = LogLevel.Info'                      Message = "hello\rworld"                  }));
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutRenderingAutoQuoting,The following statement contains a magic number: Assert.Equal(                  "2010-01-01 12:34:56.0000;Info;'hello\rworld'"'                  csvLayout.Render(new LogEventInfo                  {                      TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                      Level = LogLevel.Info'                      Message = "hello\rworld"                  }));
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutRenderingAutoQuoting,The following statement contains a magic number: Assert.Equal(                  "2010-01-01 12:34:56.0000;Info;'hello\rworld'"'                  csvLayout.Render(new LogEventInfo                  {                      TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                      Level = LogLevel.Info'                      Message = "hello\rworld"                  }));
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutRenderingAutoQuoting,The following statement contains a magic number: Assert.Equal(                  "2010-01-01 12:34:56.0000;Info;'hello\nworld'"'                  csvLayout.Render(new LogEventInfo                  {                      TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                      Level = LogLevel.Info'                      Message = "hello\nworld"                  }));
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutRenderingAutoQuoting,The following statement contains a magic number: Assert.Equal(                  "2010-01-01 12:34:56.0000;Info;'hello\nworld'"'                  csvLayout.Render(new LogEventInfo                  {                      TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                      Level = LogLevel.Info'                      Message = "hello\nworld"                  }));
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutRenderingAutoQuoting,The following statement contains a magic number: Assert.Equal(                  "2010-01-01 12:34:56.0000;Info;'hello\nworld'"'                  csvLayout.Render(new LogEventInfo                  {                      TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                      Level = LogLevel.Info'                      Message = "hello\nworld"                  }));
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutRenderingAutoQuoting,The following statement contains a magic number: Assert.Equal(                  "2010-01-01 12:34:56.0000;Info;'hello\nworld'"'                  csvLayout.Render(new LogEventInfo                  {                      TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                      Level = LogLevel.Info'                      Message = "hello\nworld"                  }));
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutRenderingAutoQuoting,The following statement contains a magic number: Assert.Equal(                  "2010-01-01 12:34:56.0000;Info;'hello''world'"'                  csvLayout.Render(new LogEventInfo                  {                      TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                      Level = LogLevel.Info'                      Message = "hello'world"                  }));
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutRenderingAutoQuoting,The following statement contains a magic number: Assert.Equal(                  "2010-01-01 12:34:56.0000;Info;'hello''world'"'                  csvLayout.Render(new LogEventInfo                  {                      TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                      Level = LogLevel.Info'                      Message = "hello'world"                  }));
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutRenderingAutoQuoting,The following statement contains a magic number: Assert.Equal(                  "2010-01-01 12:34:56.0000;Info;'hello''world'"'                  csvLayout.Render(new LogEventInfo                  {                      TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                      Level = LogLevel.Info'                      Message = "hello'world"                  }));
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutRenderingAutoQuoting,The following statement contains a magic number: Assert.Equal(                  "2010-01-01 12:34:56.0000;Info;'hello''world'"'                  csvLayout.Render(new LogEventInfo                  {                      TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                      Level = LogLevel.Info'                      Message = "hello'world"                  }));
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutCachingTest,The following statement contains a magic number: var e1 = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutCachingTest,The following statement contains a magic number: var e1 = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutCachingTest,The following statement contains a magic number: var e1 = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutCachingTest,The following statement contains a magic number: var e1 = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutCachingTest,The following statement contains a magic number: var e2 = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 57)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutCachingTest,The following statement contains a magic number: var e2 = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 57)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutCachingTest,The following statement contains a magic number: var e2 = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 57)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,CsvLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\CsvLayoutTests.cs,CsvLayoutCachingTest,The following statement contains a magic number: var e2 = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 57)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,JsonLayoutRendering,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,JsonLayoutRendering,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,JsonLayoutRendering,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,JsonLayoutRendering,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,JsonLayoutRenderingNoSpaces,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,JsonLayoutRenderingNoSpaces,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,JsonLayoutRenderingNoSpaces,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,JsonLayoutRenderingNoSpaces,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,JsonLayoutRenderingAndEncodingSpecialCharacters,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "\"hello' world\""              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,JsonLayoutRenderingAndEncodingSpecialCharacters,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "\"hello' world\""              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,JsonLayoutRenderingAndEncodingSpecialCharacters,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "\"hello' world\""              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,JsonLayoutRenderingAndEncodingSpecialCharacters,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "\"hello' world\""              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,JsonLayoutRenderingAndEncodingLineBreaks,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello'\n\r world"              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,JsonLayoutRenderingAndEncodingLineBreaks,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello'\n\r world"              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,JsonLayoutRenderingAndEncodingLineBreaks,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello'\n\r world"              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,JsonLayoutRenderingAndEncodingLineBreaks,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello'\n\r world"              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,JsonLayoutRenderingAndNotEncodingMessageAttribute,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "{ \"hello\" : \"world\" }"              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,JsonLayoutRenderingAndNotEncodingMessageAttribute,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "{ \"hello\" : \"world\" }"              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,JsonLayoutRenderingAndNotEncodingMessageAttribute,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "{ \"hello\" : \"world\" }"              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,JsonLayoutRenderingAndNotEncodingMessageAttribute,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "{ \"hello\" : \"world\" }"              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,JsonLayoutRenderingAndEncodingMessageAttribute,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "{ \"hello\" : \"world\" }"              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,JsonLayoutRenderingAndEncodingMessageAttribute,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "{ \"hello\" : \"world\" }"              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,JsonLayoutRenderingAndEncodingMessageAttribute,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "{ \"hello\" : \"world\" }"              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,JsonLayoutRenderingAndEncodingMessageAttribute,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "{ \"hello\" : \"world\" }"              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,NestedJsonAttrTestFromXML,The following statement contains a magic number: Assert.Equal(3' attrs.Count);
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,NestedJsonAttrTestFromXML,The following statement contains a magic number: Assert.Equal(typeof(JsonLayout)' attrs[2].Layout.GetType());
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,NestedJsonAttrTestFromXML,The following statement contains a magic number: var nestedJsonLayout = (JsonLayout)attrs[2].Layout;
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,NestedJsonAttrTestFromXML,The following statement contains a magic number: Assert.Equal(2' nestedJsonLayout.Attributes.Count);
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,NestedJsonAttrTestFromXML,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2016' 10' 30' 13' 30' 55)'                  Message = "this is message"'                  Level = LogLevel.Info'                  Exception = new NLogRuntimeException("test"' new NullReferenceException("null is bad!"))              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,NestedJsonAttrTestFromXML,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2016' 10' 30' 13' 30' 55)'                  Message = "this is message"'                  Level = LogLevel.Info'                  Exception = new NLogRuntimeException("test"' new NullReferenceException("null is bad!"))              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,NestedJsonAttrTestFromXML,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2016' 10' 30' 13' 30' 55)'                  Message = "this is message"'                  Level = LogLevel.Info'                  Exception = new NLogRuntimeException("test"' new NullReferenceException("null is bad!"))              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,NestedJsonAttrTestFromXML,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2016' 10' 30' 13' 30' 55)'                  Message = "this is message"'                  Level = LogLevel.Info'                  Exception = new NLogRuntimeException("test"' new NullReferenceException("null is bad!"))              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,NestedJsonAttrTestFromXML,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2016' 10' 30' 13' 30' 55)'                  Message = "this is message"'                  Level = LogLevel.Info'                  Exception = new NLogRuntimeException("test"' new NullReferenceException("null is bad!"))              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,NestedJsonAttrTestFromXML,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2016' 10' 30' 13' 30' 55)'                  Message = "this is message"'                  Level = LogLevel.Info'                  Exception = new NLogRuntimeException("test"' new NullReferenceException("null is bad!"))              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,IncludeAllJsonPropertiesMaxRecursionLimit,The following statement contains a magic number: LogEventInfo logEventInfo = new LogEventInfo()              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,IncludeAllJsonPropertiesMaxRecursionLimit,The following statement contains a magic number: LogEventInfo logEventInfo = new LogEventInfo()              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,IncludeAllJsonPropertiesMaxRecursionLimit,The following statement contains a magic number: LogEventInfo logEventInfo = new LogEventInfo()              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,IncludeAllJsonPropertiesMaxRecursionLimit,The following statement contains a magic number: LogEventInfo logEventInfo = new LogEventInfo()              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,IncludeAllJsonPropertiesMaxRecursionLimit,The following statement contains a magic number: logEventInfo.Properties["Message"] = new              {                  data = new Dictionary<int' string>() { { 42' "Hello" } }              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,SerializeObjectRecursionSingle,The following statement contains a magic number: logEventInfo1.Properties.Add("nestedObject"' new List<object> { new { val = 1' val2 = "value2" }' new { val3 = 3' val4 = "value4" } });
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,SerializeObjectRecursionZero,The following statement contains a magic number: logEventInfo1.Properties.Add("nestedObject"' new List<object> { new { val = 1' val2 = "value2" }' new { val3 = 3' val4 = "value5" } });
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,CreateLogEventWithExcluded,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,CreateLogEventWithExcluded,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,CreateLogEventWithExcluded,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,CreateLogEventWithExcluded,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,CreateLogEventWithExcluded,The following statement contains a magic number: logEventInfo.Properties.Add("IntProp"' 123);
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,CreateLogEventWithExcluded,The following statement contains a magic number: logEventInfo.Properties.Add("DoubleProp"' 123.123);
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,CreateLogEventWithExcluded,The following statement contains a magic number: logEventInfo.Properties.Add("DecimalProp"' 123.123m);
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,CreateLogEventWithExcluded,The following statement contains a magic number: logEventInfo.Properties.Add("DateTimeProp"' new DateTime(2345' 1' 23' 12' 34' 56' DateTimeKind.Utc));
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,CreateLogEventWithExcluded,The following statement contains a magic number: logEventInfo.Properties.Add("DateTimeProp"' new DateTime(2345' 1' 23' 12' 34' 56' DateTimeKind.Utc));
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,CreateLogEventWithExcluded,The following statement contains a magic number: logEventInfo.Properties.Add("DateTimeProp"' new DateTime(2345' 1' 23' 12' 34' 56' DateTimeKind.Utc));
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,CreateLogEventWithExcluded,The following statement contains a magic number: logEventInfo.Properties.Add("DateTimeProp"' new DateTime(2345' 1' 23' 12' 34' 56' DateTimeKind.Utc));
Magic Number,NLog.UnitTests.Layouts,JsonLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\JsonLayoutTests.cs,CreateLogEventWithExcluded,The following statement contains a magic number: logEventInfo.Properties.Add("DateTimeProp"' new DateTime(2345' 1' 23' 12' 34' 56' DateTimeKind.Utc));
Magic Number,NLog.UnitTests.Layouts,SimpleLayoutOutputTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\SimpleLayoutOutputTests.cs,VeryLongRendererOutput,The following statement contains a magic number: int stringLength = 100000;
Magic Number,NLog.UnitTests.Layouts,SimpleLayoutParserTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\SimpleLayoutParserTests.cs,NestedLayoutTest,The following statement contains a magic number: Assert.Equal(3' ndcLayoutRenderer.TopFrames);
Magic Number,NLog.UnitTests.Layouts,SimpleLayoutParserTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\SimpleLayoutParserTests.cs,DoubleNestedLayoutTest,The following statement contains a magic number: Assert.Equal(3' ndcLayoutRenderer.TopFrames);
Magic Number,NLog.UnitTests.Layouts,SimpleLayoutParserTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\SimpleLayoutParserTests.cs,DoubleNestedLayoutWithDefaultLayoutParametersTest,The following statement contains a magic number: Assert.Equal(3' ndcLayoutRenderer.TopFrames);
Magic Number,NLog.UnitTests.Layouts,XmlLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\XmlLayoutTests.cs,XmlLayoutRendering,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,XmlLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\XmlLayoutTests.cs,XmlLayoutRendering,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,XmlLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\XmlLayoutTests.cs,XmlLayoutRendering,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,XmlLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\XmlLayoutTests.cs,XmlLayoutRendering,The following statement contains a magic number: var logEventInfo = new LogEventInfo              {                  TimeStamp = new DateTime(2010' 01' 01' 12' 34' 56)'                  Level = LogLevel.Info'                  Message = "hello' world"              };
Magic Number,NLog.UnitTests.Layouts,XmlLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\XmlLayoutTests.cs,XmlLayout_PropertiesElementNameDefault_Properties_RenderPropertyExpando,The following statement contains a magic number: object1.Id = 123;
Magic Number,NLog.UnitTests.Layouts,XmlLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\XmlLayoutTests.cs,XmlLayout_PropertiesElementNameFormat_RenderInfiniteLoop,The following statement contains a magic number: var xmlLayout = new XmlLayout()              {                  Elements = { new XmlElement("message"' "${message}") }'                  PropertiesElementName = "{0}"'                  PropertiesElementKeyAttribute = ""'                  IncludeAllProperties = true'                  MaxRecursionLimit = 10'              };
Magic Number,NLog.UnitTests.Layouts,XmlLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\XmlLayoutTests.cs,XmlLayout_PropertiesElementNameFormat_RenderInfiniteLoop,The following statement contains a magic number: Assert.Equal(10' cnt);
Magic Number,NLog.UnitTests.Layouts,XmlLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\XmlLayoutTests.cs,XmlLayout_PropertiesElementNameFormat_RenderTrickyDictionary,The following statement contains a magic number: var xmlLayout = new XmlLayout()              {                  Elements = { new XmlElement("message"' "${message}") }'                  PropertiesElementName = "{0}"'                  PropertiesElementKeyAttribute = ""'                  IncludeAllProperties = true'                  MaxRecursionLimit = 10'              };
Magic Number,NLog.UnitTests.Layouts,XmlLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\XmlLayoutTests.cs,XmlLayout_PropertiesElementNameFormat_RenderTrickyDictionary,The following statement contains a magic number: testDictionary.Add("key1"' 13);
Magic Number,NLog.UnitTests.Layouts,XmlLayoutTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Layouts\XmlLayoutTests.cs,XmlLayout_PropertiesElementNameFormat_RenderTrickyDictionary,The following statement contains a magic number: testDictionary.Add("key 2"' 1.3m);
Magic Number,NLog.UnitTests.LayoutRenderers.Wrappers,ObjectPathRendererWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Wrappers\ObjectPathRendererWrapperTests.cs,RenderPropertyOfExceptionWithFormat,The following statement contains a magic number: var logEvent = new LogEventInfo              {                  Exception = new ExternalException("Exception with errorCode"' 5000)'              };
Magic Number,NLog.UnitTests.LayoutRenderers.Wrappers,ObjectPathRendererWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Wrappers\ObjectPathRendererWrapperTests.cs,RenderPropertyOfExceptionRawValue,The following statement contains a magic number: var logEvent = new LogEventInfo              {                  Exception = new ExternalException("Exception with errorCode"' 5000)'              };
Magic Number,NLog.UnitTests.LayoutRenderers.Wrappers,WhenTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Wrappers\WhenTests.cs,WhenLogLevelConditionTest,The following statement contains a magic number: AssertDebugCounter("debug"' 2);
Magic Number,NLog.UnitTests.LayoutRenderers.Wrappers,WhenTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Wrappers\WhenTests.cs,WhenLogLevelConditionTest,The following statement contains a magic number: AssertDebugCounter("debug"' 3);
Magic Number,NLog.UnitTests.LayoutRenderers.Wrappers,WhenTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Wrappers\WhenTests.cs,WhenLogLevelConditionTest,The following statement contains a magic number: AssertDebugCounter("debug"' 4);
Magic Number,NLog.UnitTests.LayoutRenderers.Wrappers,WhenTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Wrappers\WhenTests.cs,WhenNumericAndPropertyConditionTest,The following statement contains a magic number: WhenNumericAndPropertyConditionTest_inner(l' 101' false);
Magic Number,NLog.UnitTests.LayoutRenderers.Wrappers,WhenTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Wrappers\WhenTests.cs,WhenNumericAndPropertyConditionTest,The following statement contains a magic number: WhenNumericAndPropertyConditionTest_inner(l' 11' true);
Magic Number,NLog.UnitTests.LayoutRenderers.Wrappers,WhenTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Wrappers\WhenTests.cs,WhenNumericAndPropertyConditionTest,The following statement contains a magic number: WhenNumericAndPropertyConditionTest_inner(l' 100' true);
Magic Number,NLog.UnitTests.LayoutRenderers.Wrappers,WhenTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Wrappers\WhenTests.cs,WhenNumericAndPropertyConditionTest,The following statement contains a magic number: WhenNumericAndPropertyConditionTest_inner(l' 2' true);
Magic Number,NLog.UnitTests.LayoutRenderers.Wrappers,WhenTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Wrappers\WhenTests.cs,WhenNumericAndPropertyConditionTest,The following statement contains a magic number: WhenNumericAndPropertyConditionTest_inner(l' 20' true);
Magic Number,NLog.UnitTests.LayoutRenderers.Wrappers,WhenTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LayoutRenderers\Wrappers\WhenTests.cs,WhenNumericAndPropertyConditionTest,The following statement contains a magic number: WhenNumericAndPropertyConditionTest_inner(l' 100000' false);
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverForwardingServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverForwardingServiceTests.cs,ToLogEventInfoTest,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = new DateTime(2010' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection { "foo"' "bar"' "baz" }'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3"' "zzz"' "message1" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 30000000'                              MessageOrdinal = 4'                              Values = "0|1|2"                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              MessageOrdinal = 4'                              TimeDelta = 30050000'                              Values = "0|1|3"'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverForwardingServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverForwardingServiceTests.cs,ToLogEventInfoTest,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = new DateTime(2010' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection { "foo"' "bar"' "baz" }'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3"' "zzz"' "message1" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 30000000'                              MessageOrdinal = 4'                              Values = "0|1|2"                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              MessageOrdinal = 4'                              TimeDelta = 30050000'                              Values = "0|1|3"'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverForwardingServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverForwardingServiceTests.cs,ToLogEventInfoTest,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = new DateTime(2010' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection { "foo"' "bar"' "baz" }'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3"' "zzz"' "message1" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 30000000'                              MessageOrdinal = 4'                              Values = "0|1|2"                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              MessageOrdinal = 4'                              TimeDelta = 30050000'                              Values = "0|1|3"'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverForwardingServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverForwardingServiceTests.cs,ToLogEventInfoTest,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = new DateTime(2010' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection { "foo"' "bar"' "baz" }'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3"' "zzz"' "message1" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 30000000'                              MessageOrdinal = 4'                              Values = "0|1|2"                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              MessageOrdinal = 4'                              TimeDelta = 30050000'                              Values = "0|1|3"'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverForwardingServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverForwardingServiceTests.cs,ToLogEventInfoTest,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = new DateTime(2010' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection { "foo"' "bar"' "baz" }'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3"' "zzz"' "message1" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 30000000'                              MessageOrdinal = 4'                              Values = "0|1|2"                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              MessageOrdinal = 4'                              TimeDelta = 30050000'                              Values = "0|1|3"'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverForwardingServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverForwardingServiceTests.cs,ToLogEventInfoTest,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = new DateTime(2010' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection { "foo"' "bar"' "baz" }'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3"' "zzz"' "message1" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 30000000'                              MessageOrdinal = 4'                              Values = "0|1|2"                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              MessageOrdinal = 4'                              TimeDelta = 30050000'                              Values = "0|1|3"'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverForwardingServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverForwardingServiceTests.cs,ToLogEventInfoTest,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = new DateTime(2010' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection { "foo"' "bar"' "baz" }'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3"' "zzz"' "message1" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 30000000'                              MessageOrdinal = 4'                              Values = "0|1|2"                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              MessageOrdinal = 4'                              TimeDelta = 30050000'                              Values = "0|1|3"'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverForwardingServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverForwardingServiceTests.cs,ToLogEventInfoTest,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = new DateTime(2010' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection { "foo"' "bar"' "baz" }'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3"' "zzz"' "message1" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 30000000'                              MessageOrdinal = 4'                              Values = "0|1|2"                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              MessageOrdinal = 4'                              TimeDelta = 30050000'                              Values = "0|1|3"'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverForwardingServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverForwardingServiceTests.cs,ToLogEventInfoTest,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = new DateTime(2010' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection { "foo"' "bar"' "baz" }'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3"' "zzz"' "message1" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 30000000'                              MessageOrdinal = 4'                              Values = "0|1|2"                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              MessageOrdinal = 4'                              TimeDelta = 30050000'                              Values = "0|1|3"'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,ToLogEventInfoTest,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = new DateTime(2010' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection { "foo"' "bar"' "baz" }'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3"' "zzz"' "message1" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 30000000'                              MessageOrdinal = 4'                              Values = "0|1|2"                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              MessageOrdinal = 4'                              TimeDelta = 30050000'                              Values = "0|1|3"'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,ToLogEventInfoTest,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = new DateTime(2010' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection { "foo"' "bar"' "baz" }'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3"' "zzz"' "message1" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 30000000'                              MessageOrdinal = 4'                              Values = "0|1|2"                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              MessageOrdinal = 4'                              TimeDelta = 30050000'                              Values = "0|1|3"'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,ToLogEventInfoTest,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = new DateTime(2010' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection { "foo"' "bar"' "baz" }'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3"' "zzz"' "message1" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 30000000'                              MessageOrdinal = 4'                              Values = "0|1|2"                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              MessageOrdinal = 4'                              TimeDelta = 30050000'                              Values = "0|1|3"'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,ToLogEventInfoTest,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = new DateTime(2010' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection { "foo"' "bar"' "baz" }'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3"' "zzz"' "message1" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 30000000'                              MessageOrdinal = 4'                              Values = "0|1|2"                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              MessageOrdinal = 4'                              TimeDelta = 30050000'                              Values = "0|1|3"'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,ToLogEventInfoTest,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = new DateTime(2010' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection { "foo"' "bar"' "baz" }'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3"' "zzz"' "message1" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 30000000'                              MessageOrdinal = 4'                              Values = "0|1|2"                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              MessageOrdinal = 4'                              TimeDelta = 30050000'                              Values = "0|1|3"'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,ToLogEventInfoTest,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = new DateTime(2010' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection { "foo"' "bar"' "baz" }'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3"' "zzz"' "message1" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 30000000'                              MessageOrdinal = 4'                              Values = "0|1|2"                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              MessageOrdinal = 4'                              TimeDelta = 30050000'                              Values = "0|1|3"'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,ToLogEventInfoTest,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = new DateTime(2010' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection { "foo"' "bar"' "baz" }'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3"' "zzz"' "message1" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 30000000'                              MessageOrdinal = 4'                              Values = "0|1|2"                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              MessageOrdinal = 4'                              TimeDelta = 30050000'                              Values = "0|1|3"'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,ToLogEventInfoTest,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = new DateTime(2010' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection { "foo"' "bar"' "baz" }'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3"' "zzz"' "message1" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 30000000'                              MessageOrdinal = 4'                              Values = "0|1|2"                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              MessageOrdinal = 4'                              TimeDelta = 30050000'                              Values = "0|1|3"'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,ToLogEventInfoTest,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = new DateTime(2010' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection { "foo"' "bar"' "baz" }'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3"' "zzz"' "message1" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 30000000'                              MessageOrdinal = 4'                              Values = "0|1|2"                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              MessageOrdinal = 4'                              TimeDelta = 30050000'                              Values = "0|1|3"'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,ToLogEventInfoTest,The following statement contains a magic number: Assert.Equal(2' converted.Count);
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,ToLogEventInfoTest,The following statement contains a magic number: Assert.Equal(new DateTime(2010' 1' 1' 0' 0' 3' 0' DateTimeKind.Utc)' converted[0].TimeStamp.ToUniversalTime());
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,ToLogEventInfoTest,The following statement contains a magic number: Assert.Equal(new DateTime(2010' 1' 1' 0' 0' 3' 0' DateTimeKind.Utc)' converted[0].TimeStamp.ToUniversalTime());
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,ToLogEventInfoTest,The following statement contains a magic number: Assert.Equal(new DateTime(2010' 1' 1' 0' 0' 3' 5' DateTimeKind.Utc)' converted[1].TimeStamp.ToUniversalTime());
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,ToLogEventInfoTest,The following statement contains a magic number: Assert.Equal(new DateTime(2010' 1' 1' 0' 0' 3' 5' DateTimeKind.Utc)' converted[1].TimeStamp.ToUniversalTime());
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,ToLogEventInfoTest,The following statement contains a magic number: Assert.Equal(new DateTime(2010' 1' 1' 0' 0' 3' 5' DateTimeKind.Utc)' converted[1].TimeStamp.ToUniversalTime());
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,NoLayoutsTest,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = new DateTime(2010' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection()'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3"' "zzz"' "message1" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 30000000'                              MessageOrdinal = 4'                              Values = null'                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              MessageOrdinal = 4'                              TimeDelta = 30050000'                              Values = null'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,NoLayoutsTest,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = new DateTime(2010' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection()'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3"' "zzz"' "message1" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 30000000'                              MessageOrdinal = 4'                              Values = null'                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              MessageOrdinal = 4'                              TimeDelta = 30050000'                              Values = null'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,NoLayoutsTest,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = new DateTime(2010' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection()'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3"' "zzz"' "message1" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 30000000'                              MessageOrdinal = 4'                              Values = null'                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              MessageOrdinal = 4'                              TimeDelta = 30050000'                              Values = null'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,NoLayoutsTest,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = new DateTime(2010' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection()'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3"' "zzz"' "message1" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 30000000'                              MessageOrdinal = 4'                              Values = null'                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              MessageOrdinal = 4'                              TimeDelta = 30050000'                              Values = null'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,NoLayoutsTest,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = new DateTime(2010' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection()'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3"' "zzz"' "message1" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 30000000'                              MessageOrdinal = 4'                              Values = null'                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              MessageOrdinal = 4'                              TimeDelta = 30050000'                              Values = null'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,NoLayoutsTest,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = new DateTime(2010' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection()'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3"' "zzz"' "message1" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 30000000'                              MessageOrdinal = 4'                              Values = null'                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              MessageOrdinal = 4'                              TimeDelta = 30050000'                              Values = null'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,NoLayoutsTest,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = new DateTime(2010' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection()'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3"' "zzz"' "message1" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 30000000'                              MessageOrdinal = 4'                              Values = null'                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              MessageOrdinal = 4'                              TimeDelta = 30050000'                              Values = null'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,NoLayoutsTest,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = new DateTime(2010' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection()'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3"' "zzz"' "message1" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 30000000'                              MessageOrdinal = 4'                              Values = null'                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              MessageOrdinal = 4'                              TimeDelta = 30050000'                              Values = null'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,NoLayoutsTest,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = new DateTime(2010' 1' 1' 0' 0' 0' 0' DateTimeKind.Utc).Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection()'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3"' "zzz"' "message1" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 30000000'                              MessageOrdinal = 4'                              Values = null'                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              MessageOrdinal = 4'                              TimeDelta = 30050000'                              Values = null'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,NoLayoutsTest,The following statement contains a magic number: Assert.Equal(2' converted.Count);
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,NoLayoutsTest,The following statement contains a magic number: Assert.Equal(new DateTime(2010' 1' 1' 0' 0' 3' 0' DateTimeKind.Utc)' converted[0].TimeStamp.ToUniversalTime());
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,NoLayoutsTest,The following statement contains a magic number: Assert.Equal(new DateTime(2010' 1' 1' 0' 0' 3' 0' DateTimeKind.Utc)' converted[0].TimeStamp.ToUniversalTime());
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,NoLayoutsTest,The following statement contains a magic number: Assert.Equal(new DateTime(2010' 1' 1' 0' 0' 3' 5' DateTimeKind.Utc)' converted[1].TimeStamp.ToUniversalTime());
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,NoLayoutsTest,The following statement contains a magic number: Assert.Equal(new DateTime(2010' 1' 1' 0' 0' 3' 5' DateTimeKind.Utc)' converted[1].TimeStamp.ToUniversalTime());
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,NoLayoutsTest,The following statement contains a magic number: Assert.Equal(new DateTime(2010' 1' 1' 0' 0' 3' 5' DateTimeKind.Utc)' converted[1].TimeStamp.ToUniversalTime());
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,CompareSerializationFormats,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = DateTime.UtcNow.Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection { "foo"' "bar"' "baz" }'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 34'                              Values = "1|2|3"                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              TimeDelta = 345'                              Values = "1|2|3"'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,CompareSerializationFormats,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = DateTime.UtcNow.Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection { "foo"' "bar"' "baz" }'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 34'                              Values = "1|2|3"                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              TimeDelta = 345'                              Values = "1|2|3"'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,CompareSerializationFormats,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = DateTime.UtcNow.Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection { "foo"' "bar"' "baz" }'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 34'                              Values = "1|2|3"                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              TimeDelta = 345'                              Values = "1|2|3"'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,CompareSerializationFormats,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = DateTime.UtcNow.Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection { "foo"' "bar"' "baz" }'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 34'                              Values = "1|2|3"                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              TimeDelta = 345'                              Values = "1|2|3"'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,CompareSerializationFormats,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = DateTime.UtcNow.Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection { "foo"' "bar"' "baz" }'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 34'                              Values = "1|2|3"                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              TimeDelta = 345'                              Values = "1|2|3"'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,CompareSerializationFormats,The following statement contains a magic number: var events = new NLogEvents              {                  BaseTimeUtc = DateTime.UtcNow.Ticks'                  ClientName = "foo"'                  LayoutNames = new StringCollection { "foo"' "bar"' "baz" }'                  Strings = new StringCollection { "logger1"' "logger2"' "logger3" }'                  Events =                      new[]                      {                          new NLogEvent                          {                              Id = 1'                              LevelOrdinal = 2'                              LoggerOrdinal = 0'                              TimeDelta = 34'                              Values = "1|2|3"                          }'                          new NLogEvent                          {                              Id = 2'                              LevelOrdinal = 3'                              LoggerOrdinal = 2'                              TimeDelta = 345'                              Values = "1|2|3"'                          }                      }              };
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,RealTestLogReciever,The following statement contains a magic number: ExecLogRecieverAndCheck(ExecLogging1' CheckReceived1' 2);
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,ExecLogRecieverAndCheck,The following statement contains a magic number: countdownEvent.Wait(20000);
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,CheckReceived1,The following statement contains a magic number: Assert.Equal(2' received.Count);
Magic Number,NLog.UnitTests.LogReceiverService,LogReceiverServiceTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\LogReceiverService\LogReceiverServiceTests.cs,ExecLogging1,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,NLog.UnitTests.MessageTemplates,MessageTemplateParametersTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\MessageTemplateParametersTests.cs,IsPositionalTest,The following statement contains a magic number: var parameters = CreateParameters(10);
Magic Number,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerializationOfListObjectIsSuccessful,The following statement contains a magic number: var list = new List<int>() { 1' 2' 3' 4' 5' 6 };
Magic Number,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerializationOfListObjectIsSuccessful,The following statement contains a magic number: var list = new List<int>() { 1' 2' 3' 4' 5' 6 };
Magic Number,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerializationOfListObjectIsSuccessful,The following statement contains a magic number: var list = new List<int>() { 1' 2' 3' 4' 5' 6 };
Magic Number,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerializationOfListObjectIsSuccessful,The following statement contains a magic number: var list = new List<int>() { 1' 2' 3' 4' 5' 6 };
Magic Number,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerializationOfListObjectIsSuccessful,The following statement contains a magic number: var list = new List<int>() { 1' 2' 3' 4' 5' 6 };
Magic Number,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerializationOfDictionaryObjectIsSuccessful,The following statement contains a magic number: var list = new Dictionary<int' object>() { { 1' new Test() }' { 2' new Test1() } };
Magic Number,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerializationOfCollectionOfListObjectWithDepth2IsNotSuccessful,The following statement contains a magic number: var list = new List<List<List<List<int>>>>() { new List<List<List<int>>>() { new List<List<int>>() { new List<int>() { 1' 2 }' new List<int>() { 3' 4 } }' new List<List<int>>() { new List<int>() { 4' 5 }' new List<int>() { 6' 7 } } } };
Magic Number,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerializationOfCollectionOfListObjectWithDepth2IsNotSuccessful,The following statement contains a magic number: var list = new List<List<List<List<int>>>>() { new List<List<List<int>>>() { new List<List<int>>() { new List<int>() { 1' 2 }' new List<int>() { 3' 4 } }' new List<List<int>>() { new List<int>() { 4' 5 }' new List<int>() { 6' 7 } } } };
Magic Number,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerializationOfCollectionOfListObjectWithDepth2IsNotSuccessful,The following statement contains a magic number: var list = new List<List<List<List<int>>>>() { new List<List<List<int>>>() { new List<List<int>>() { new List<int>() { 1' 2 }' new List<int>() { 3' 4 } }' new List<List<int>>() { new List<int>() { 4' 5 }' new List<int>() { 6' 7 } } } };
Magic Number,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerializationOfCollectionOfListObjectWithDepth2IsNotSuccessful,The following statement contains a magic number: var list = new List<List<List<List<int>>>>() { new List<List<List<int>>>() { new List<List<int>>() { new List<int>() { 1' 2 }' new List<int>() { 3' 4 } }' new List<List<int>>() { new List<int>() { 4' 5 }' new List<int>() { 6' 7 } } } };
Magic Number,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerializationOfCollectionOfListObjectWithDepth2IsNotSuccessful,The following statement contains a magic number: var list = new List<List<List<List<int>>>>() { new List<List<List<int>>>() { new List<List<int>>() { new List<int>() { 1' 2 }' new List<int>() { 3' 4 } }' new List<List<int>>() { new List<int>() { 4' 5 }' new List<int>() { 6' 7 } } } };
Magic Number,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerializationOfCollectionOfListObjectWithDepth2IsNotSuccessful,The following statement contains a magic number: var list = new List<List<List<List<int>>>>() { new List<List<List<int>>>() { new List<List<int>>() { new List<int>() { 1' 2 }' new List<int>() { 3' 4 } }' new List<List<int>>() { new List<int>() { 4' 5 }' new List<int>() { 6' 7 } } } };
Magic Number,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerializationOfCollectionOfListObjectWithDepth2IsNotSuccessful,The following statement contains a magic number: var list = new List<List<List<List<int>>>>() { new List<List<List<int>>>() { new List<List<int>>() { new List<int>() { 1' 2 }' new List<int>() { 3' 4 } }' new List<List<int>>() { new List<int>() { 4' 5 }' new List<int>() { 6' 7 } } } };
Magic Number,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerializationWillbeSkippedForElementsThatHaveRepeatedElements,The following statement contains a magic number: var list = new List<List<List<List<int>>>>() { new List<List<List<int>>>() { new List<List<int>>() { new List<int>() { 1' 2 }' new List<int>() { 1' 2 } }' new List<List<int>>() { new List<int>() { 1' 2 }' new List<int>() { 1' 2 } } } };
Magic Number,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerializationWillbeSkippedForElementsThatHaveRepeatedElements,The following statement contains a magic number: var list = new List<List<List<List<int>>>>() { new List<List<List<int>>>() { new List<List<int>>() { new List<int>() { 1' 2 }' new List<int>() { 1' 2 } }' new List<List<int>>() { new List<int>() { 1' 2 }' new List<int>() { 1' 2 } } } };
Magic Number,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerializationWillbeSkippedForElementsThatHaveRepeatedElements,The following statement contains a magic number: var list = new List<List<List<List<int>>>>() { new List<List<List<int>>>() { new List<List<int>>() { new List<int>() { 1' 2 }' new List<int>() { 1' 2 } }' new List<List<int>>() { new List<int>() { 1' 2 }' new List<int>() { 1' 2 } } } };
Magic Number,NLog.UnitTests.MessageTemplates,ValueFormatterTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,TestSerializationWillbeSkippedForElementsThatHaveRepeatedElements,The following statement contains a magic number: var list = new List<List<List<List<int>>>>() { new List<List<List<int>>>() { new List<List<int>>() { new List<int>() { 1' 2 }' new List<int>() { 1' 2 } }' new List<List<int>>() { new List<int>() { 1' 2 }' new List<int>() { 1' 2 } } } };
Magic Number,NLog.UnitTests.MessageTemplates,Test,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,ToDateTime,The following statement contains a magic number: return new DateTime(2019' 7' 28);
Magic Number,NLog.UnitTests.MessageTemplates,Test,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,ToDateTime,The following statement contains a magic number: return new DateTime(2019' 7' 28);
Magic Number,NLog.UnitTests.MessageTemplates,Test,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\MessageTemplates\ValueFormatterTest.cs,ToDateTime,The following statement contains a magic number: return new DateTime(2019' 7' 28);
Magic Number,NLog.UnitTests.Mocks,WebRequestMock,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Mocks\WebRequestMock.cs,EndGetResponse,The following statement contains a magic number: System.Threading.Thread.Sleep(50);
Magic Number,NLog.UnitTests.Targets,AsyncTaskTargetTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\AsyncTaskTargetTest.cs,AsyncTaskTarget_TestLogging,The following statement contains a magic number: Assert.Equal(6' asyncTarget.Logs.Count);
Magic Number,NLog.UnitTests.Targets,AsyncTaskTargetTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\AsyncTaskTargetTest.cs,AsyncTaskTarget_TestAsyncException,The following statement contains a magic number: var asyncTarget = new AsyncTaskTestTarget              {                  Layout = "${level}"'                  RetryDelayMilliseconds = 50              };
Magic Number,NLog.UnitTests.Targets,AsyncTaskTargetTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\AsyncTaskTargetTest.cs,AsyncTaskTarget_TestTimeout,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  ILogger logger = LogManager.GetCurrentClassLogger();                    var asyncTarget = new AsyncTaskTestTarget                  {                      Layout = "${level}"'                      TaskTimeoutSeconds = 1                  };                    SimpleConfigurator.ConfigureForTargetLogging(asyncTarget' LogLevel.Trace);                    logger.Trace("TTT");                  logger.Debug("TIMEOUT");                  logger.Info("III");                  logger.Warn("WWW");                  logger.Error("EEE");                  logger.Fatal("FFF");                  Assert.True(asyncTarget.WaitForWriteEvent());                  Assert.NotEmpty(asyncTarget.Logs);                  LogManager.Flush();                  Assert.Equal(5' asyncTarget.Logs.Count);                  while (asyncTarget.Logs.TryDequeue(out var logEventMessage))                  {                      Assert.Equal(-1' logEventMessage.IndexOf("Debug|"));                  }                    LogManager.Configuration = null;              });
Magic Number,NLog.UnitTests.Targets,AsyncTaskTargetTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\AsyncTaskTargetTest.cs,AsyncTaskTarget_TestTimeout,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  ILogger logger = LogManager.GetCurrentClassLogger();                    var asyncTarget = new AsyncTaskTestTarget                  {                      Layout = "${level}"'                      TaskTimeoutSeconds = 1                  };                    SimpleConfigurator.ConfigureForTargetLogging(asyncTarget' LogLevel.Trace);                    logger.Trace("TTT");                  logger.Debug("TIMEOUT");                  logger.Info("III");                  logger.Warn("WWW");                  logger.Error("EEE");                  logger.Fatal("FFF");                  Assert.True(asyncTarget.WaitForWriteEvent());                  Assert.NotEmpty(asyncTarget.Logs);                  LogManager.Flush();                  Assert.Equal(5' asyncTarget.Logs.Count);                  while (asyncTarget.Logs.TryDequeue(out var logEventMessage))                  {                      Assert.Equal(-1' logEventMessage.IndexOf("Debug|"));                  }                    LogManager.Configuration = null;              });
Magic Number,NLog.UnitTests.Targets,AsyncTaskTargetTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\AsyncTaskTargetTest.cs,AsyncTaskTarget_TestRetryAsyncException,The following statement contains a magic number: var asyncTarget = new AsyncTaskTestTarget              {                  Layout = "${level}"'                  RetryDelayMilliseconds = 10'                  RetryCount = 3              };
Magic Number,NLog.UnitTests.Targets,AsyncTaskTargetTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\AsyncTaskTargetTest.cs,AsyncTaskTarget_TestRetryAsyncException,The following statement contains a magic number: var asyncTarget = new AsyncTaskTestTarget              {                  Layout = "${level}"'                  RetryDelayMilliseconds = 10'                  RetryCount = 3              };
Magic Number,NLog.UnitTests.Targets,AsyncTaskTargetTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\AsyncTaskTargetTest.cs,AsyncTaskTarget_TestRetryAsyncException,The following statement contains a magic number: Assert.Equal(LogLevel.MaxLevel.Ordinal + 4' asyncTarget.WriteTasks);
Magic Number,NLog.UnitTests.Targets,AsyncTaskTargetTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\AsyncTaskTargetTest.cs,AsyncTaskTarget_TestRetryException,The following statement contains a magic number: var asyncTarget = new AsyncTaskTestTarget              {                  Layout = "${level}"'                  RetryDelayMilliseconds = 10'                  RetryCount = 3              };
Magic Number,NLog.UnitTests.Targets,AsyncTaskTargetTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\AsyncTaskTargetTest.cs,AsyncTaskTarget_TestRetryException,The following statement contains a magic number: var asyncTarget = new AsyncTaskTestTarget              {                  Layout = "${level}"'                  RetryDelayMilliseconds = 10'                  RetryCount = 3              };
Magic Number,NLog.UnitTests.Targets,AsyncTaskTargetTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\AsyncTaskTargetTest.cs,AsyncTaskTarget_TestRetryException,The following statement contains a magic number: Assert.Equal(LogLevel.MaxLevel.Ordinal + 4' asyncTarget.WriteTasks);
Magic Number,NLog.UnitTests.Targets,AsyncTaskTargetTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\AsyncTaskTargetTest.cs,AsyncTaskTarget_TestBatchWriting,The following statement contains a magic number: var asyncTarget = new AsyncTaskBatchTestTarget              {                  Layout = "${level}"'                  BatchSize = 3'                  TaskDelayMilliseconds = 10              };
Magic Number,NLog.UnitTests.Targets,AsyncTaskTargetTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\AsyncTaskTargetTest.cs,AsyncTaskTarget_TestBatchWriting,The following statement contains a magic number: var asyncTarget = new AsyncTaskBatchTestTarget              {                  Layout = "${level}"'                  BatchSize = 3'                  TaskDelayMilliseconds = 10              };
Magic Number,NLog.UnitTests.Targets,AsyncTaskTargetTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\AsyncTaskTargetTest.cs,AsyncTaskTarget_TestBatchWriting,The following statement contains a magic number: Assert.Equal(LogLevel.MaxLevel.Ordinal / 2' asyncTarget.WriteTasks);
Magic Number,NLog.UnitTests.Targets,AsyncTaskTargetTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\AsyncTaskTargetTest.cs,AsyncTaskTarget_TestFakeBatchWriting,The following statement contains a magic number: var asyncTarget = new AsyncTaskTestTarget              {                  Layout = "${level}"'                  BatchSize = 3'                  TaskDelayMilliseconds = 10              };
Magic Number,NLog.UnitTests.Targets,AsyncTaskTargetTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\AsyncTaskTargetTest.cs,AsyncTaskTarget_TestFakeBatchWriting,The following statement contains a magic number: var asyncTarget = new AsyncTaskTestTarget              {                  Layout = "${level}"'                  BatchSize = 3'                  TaskDelayMilliseconds = 10              };
Magic Number,NLog.UnitTests.Targets,AsyncTaskTargetTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\AsyncTaskTargetTest.cs,AsyncTaskTarget_TestSlowBatchWriting,The following statement contains a magic number: var asyncTarget = new AsyncTaskBatchTestTarget              {                  Layout = "${level}"'                  TaskDelayMilliseconds = 200              };
Magic Number,NLog.UnitTests.Targets,AsyncTaskTargetTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\AsyncTaskTargetTest.cs,AsyncTaskTarget_TestSlowBatchWriting,The following statement contains a magic number: Assert.True(shutdownTime < TimeSpan.FromSeconds(4)' $"Shutdown took {shutdownTime.TotalMilliseconds} msec");
Magic Number,NLog.UnitTests.Targets,AsyncTaskTargetTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\AsyncTaskTargetTest.cs,AsyncTaskTarget_TestThrottleOnTaskDelay,The following statement contains a magic number: var asyncTarget = new AsyncTaskBatchTestTarget              {                  Layout = "${level}"'                  TaskDelayMilliseconds = 50'                  BatchSize = 10'              };
Magic Number,NLog.UnitTests.Targets,AsyncTaskTargetTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\AsyncTaskTargetTest.cs,AsyncTaskTarget_TestThrottleOnTaskDelay,The following statement contains a magic number: var asyncTarget = new AsyncTaskBatchTestTarget              {                  Layout = "${level}"'                  TaskDelayMilliseconds = 50'                  BatchSize = 10'              };
Magic Number,NLog.UnitTests.Targets,AsyncTaskTargetTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\AsyncTaskTargetTest.cs,AsyncTaskTarget_TestThrottleOnTaskDelay,The following statement contains a magic number: Thread.Sleep(20);
Magic Number,NLog.UnitTests.Targets,AsyncTaskTargetTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\AsyncTaskTargetTest.cs,AsyncTaskTarget_TestThrottleOnTaskDelay,The following statement contains a magic number: j < 10
Magic Number,NLog.UnitTests.Targets,AsyncTaskTargetTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\AsyncTaskTargetTest.cs,AsyncTaskTarget_TestThrottleOnTaskDelay,The following statement contains a magic number: i < 5
Magic Number,NLog.UnitTests.Targets,AsyncTaskTargetTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\AsyncTaskTargetTest.cs,AsyncTaskTarget_TestThrottleOnTaskDelay,The following statement contains a magic number: Assert.True(asyncTarget.Logs.Count > 25' $"{asyncTarget.Logs.Count} LogEvents are too few after {asyncTarget.WriteTasks} writes");
Magic Number,NLog.UnitTests.Targets,AsyncTaskTargetTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\AsyncTaskTargetTest.cs,AsyncTaskTarget_TestThrottleOnTaskDelay,The following statement contains a magic number: Assert.True(asyncTarget.WriteTasks < 20' $"{asyncTarget.WriteTasks} writes are too many.");
Magic Number,NLog.UnitTests.Targets,AsyncTaskTestTarget,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\AsyncTaskTargetTest.cs,WaitForWriteEvent,The following statement contains a magic number: Thread.Sleep(25);
Magic Number,NLog.UnitTests.Targets,ConcurrentFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConcurrentFileTargetTests.cs,ConfigureSharedFile,The following statement contains a magic number: ft.OpenFileCacheTimeout = 10;
Magic Number,NLog.UnitTests.Targets,ConcurrentFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConcurrentFileTargetTests.cs,ConfigureSharedFile,The following statement contains a magic number: ft.ArchiveAboveSize = Array.IndexOf(modes' "archive") >= 0 ? 50 : -1;
Magic Number,NLog.UnitTests.Targets,ConcurrentFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConcurrentFileTargetTests.cs,ConfigureSharedFile,The following statement contains a magic number: ft.MaxArchiveFiles = 10000;
Magic Number,NLog.UnitTests.Targets,ConcurrentFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConcurrentFileTargetTests.cs,ConfigureSharedFile,The following statement contains a magic number: switch (modes[0])              {                  case "async":                      SimpleConfigurator.ConfigureForTargetLogging(new AsyncTargetWrapper(ft' 100' AsyncTargetWrapperOverflowAction.Grow) { Name = name' TimeToSleepBetweenBatches = 10 }' LogLevel.Debug);                      break;                    case "buffered":                      SimpleConfigurator.ConfigureForTargetLogging(new BufferingTargetWrapper(ft' 100) { Name = name }' LogLevel.Debug);                      break;                    case "buffered_timed_flush":                      SimpleConfigurator.ConfigureForTargetLogging(new BufferingTargetWrapper(ft' 100' 10) { Name = name }' LogLevel.Debug);                      break;                    default:                      SimpleConfigurator.ConfigureForTargetLogging(ft' LogLevel.Debug);                      break;              }
Magic Number,NLog.UnitTests.Targets,ConcurrentFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConcurrentFileTargetTests.cs,ConfigureSharedFile,The following statement contains a magic number: switch (modes[0])              {                  case "async":                      SimpleConfigurator.ConfigureForTargetLogging(new AsyncTargetWrapper(ft' 100' AsyncTargetWrapperOverflowAction.Grow) { Name = name' TimeToSleepBetweenBatches = 10 }' LogLevel.Debug);                      break;                    case "buffered":                      SimpleConfigurator.ConfigureForTargetLogging(new BufferingTargetWrapper(ft' 100) { Name = name }' LogLevel.Debug);                      break;                    case "buffered_timed_flush":                      SimpleConfigurator.ConfigureForTargetLogging(new BufferingTargetWrapper(ft' 100' 10) { Name = name }' LogLevel.Debug);                      break;                    default:                      SimpleConfigurator.ConfigureForTargetLogging(ft' LogLevel.Debug);                      break;              }
Magic Number,NLog.UnitTests.Targets,ConcurrentFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConcurrentFileTargetTests.cs,ConfigureSharedFile,The following statement contains a magic number: switch (modes[0])              {                  case "async":                      SimpleConfigurator.ConfigureForTargetLogging(new AsyncTargetWrapper(ft' 100' AsyncTargetWrapperOverflowAction.Grow) { Name = name' TimeToSleepBetweenBatches = 10 }' LogLevel.Debug);                      break;                    case "buffered":                      SimpleConfigurator.ConfigureForTargetLogging(new BufferingTargetWrapper(ft' 100) { Name = name }' LogLevel.Debug);                      break;                    case "buffered_timed_flush":                      SimpleConfigurator.ConfigureForTargetLogging(new BufferingTargetWrapper(ft' 100' 10) { Name = name }' LogLevel.Debug);                      break;                    default:                      SimpleConfigurator.ConfigureForTargetLogging(ft' LogLevel.Debug);                      break;              }
Magic Number,NLog.UnitTests.Targets,ConcurrentFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConcurrentFileTargetTests.cs,ConfigureSharedFile,The following statement contains a magic number: switch (modes[0])              {                  case "async":                      SimpleConfigurator.ConfigureForTargetLogging(new AsyncTargetWrapper(ft' 100' AsyncTargetWrapperOverflowAction.Grow) { Name = name' TimeToSleepBetweenBatches = 10 }' LogLevel.Debug);                      break;                    case "buffered":                      SimpleConfigurator.ConfigureForTargetLogging(new BufferingTargetWrapper(ft' 100) { Name = name }' LogLevel.Debug);                      break;                    case "buffered_timed_flush":                      SimpleConfigurator.ConfigureForTargetLogging(new BufferingTargetWrapper(ft' 100' 10) { Name = name }' LogLevel.Debug);                      break;                    default:                      SimpleConfigurator.ConfigureForTargetLogging(ft' LogLevel.Debug);                      break;              }
Magic Number,NLog.UnitTests.Targets,ConcurrentFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConcurrentFileTargetTests.cs,ConfigureSharedFile,The following statement contains a magic number: switch (modes[0])              {                  case "async":                      SimpleConfigurator.ConfigureForTargetLogging(new AsyncTargetWrapper(ft' 100' AsyncTargetWrapperOverflowAction.Grow) { Name = name' TimeToSleepBetweenBatches = 10 }' LogLevel.Debug);                      break;                    case "buffered":                      SimpleConfigurator.ConfigureForTargetLogging(new BufferingTargetWrapper(ft' 100) { Name = name }' LogLevel.Debug);                      break;                    case "buffered_timed_flush":                      SimpleConfigurator.ConfigureForTargetLogging(new BufferingTargetWrapper(ft' 100' 10) { Name = name }' LogLevel.Debug);                      break;                    default:                      SimpleConfigurator.ConfigureForTargetLogging(ft' LogLevel.Debug);                      break;              }
Magic Number,NLog.UnitTests.Targets,ConcurrentFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConcurrentFileTargetTests.cs,Process,The following statement contains a magic number: Thread.Sleep(Math.Max((10 - idxProcess)' 1) * 5);
Magic Number,NLog.UnitTests.Targets,ConcurrentFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConcurrentFileTargetTests.cs,Process,The following statement contains a magic number: Thread.Sleep(Math.Max((10 - idxProcess)' 1) * 5);
Magic Number,NLog.UnitTests.Targets,ConcurrentFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConcurrentFileTargetTests.cs,DoConcurrentTest,The following statement contains a magic number: Assert.Equal(2' tokens.Length);
Magic Number,NLog.UnitTests.Targets,ConcurrentFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConcurrentFileTargetTests.cs,DoConcurrentTest,The following statement contains a magic number: sr.BaseStream.Length > 100
Magic Number,NLog.UnitTests.Targets,ConcurrentFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConcurrentFileTargetTests.cs,SimpleConcurrentTest,The following statement contains a magic number: RetryingIntegrationTest(3' () => DoConcurrentTest(numProcesses' numLogs' mode));
Magic Number,NLog.UnitTests.Targets,ConcurrentFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConcurrentFileTargetTests.cs,AsyncConcurrentTest,The following statement contains a magic number: DoConcurrentTest(5' 1000' mode);
Magic Number,NLog.UnitTests.Targets,ConcurrentFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConcurrentFileTargetTests.cs,AsyncConcurrentTest,The following statement contains a magic number: DoConcurrentTest(5' 1000' mode);
Magic Number,NLog.UnitTests.Targets,ConcurrentFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConcurrentFileTargetTests.cs,BufferedConcurrentTest,The following statement contains a magic number: DoConcurrentTest(5' 1000' mode);
Magic Number,NLog.UnitTests.Targets,ConcurrentFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConcurrentFileTargetTests.cs,BufferedConcurrentTest,The following statement contains a magic number: DoConcurrentTest(5' 1000' mode);
Magic Number,NLog.UnitTests.Targets,ConcurrentFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConcurrentFileTargetTests.cs,BufferedTimedFlushConcurrentTest,The following statement contains a magic number: DoConcurrentTest(5' 1000' mode);
Magic Number,NLog.UnitTests.Targets,ConcurrentFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConcurrentFileTargetTests.cs,BufferedTimedFlushConcurrentTest,The following statement contains a magic number: DoConcurrentTest(5' 1000' mode);
Magic Number,NLog.UnitTests.Targets,ConsoleTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConsoleTargetTests.cs,ConsoleOutTest,The following statement contains a magic number: Assert.Equal(6' exceptions.Count);
Magic Number,NLog.UnitTests.Targets,ConsoleTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConsoleTargetTests.cs,ConsoleErrorTest,The following statement contains a magic number: Assert.Equal(6' exceptions.Count);
Magic Number,NLog.UnitTests.Targets,ConsoleTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConsoleTargetTests.cs,ConsoleEncodingTest,The following statement contains a magic number: Assert.Equal(2' exceptions.Count);
Magic Number,NLog.UnitTests.Targets,ConsoleTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConsoleTargetTests.cs,ConsoleRaceCondtionIgnoreInnerTest,The following statement contains a magic number: Parallel.For(0' 10' new ParallelOptions() { MaxDegreeOfParallelism = 10 }' (_) =>                    {                        for (int i = 0; i < 100; i++)                        {                            logger.Trace("test message to the out and error stream");                        }                    });
Magic Number,NLog.UnitTests.Targets,ConsoleTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConsoleTargetTests.cs,ConsoleRaceCondtionIgnoreInnerTest,The following statement contains a magic number: Parallel.For(0' 10' new ParallelOptions() { MaxDegreeOfParallelism = 10 }' (_) =>                    {                        for (int i = 0; i < 100; i++)                        {                            logger.Trace("test message to the out and error stream");                        }                    });
Magic Number,NLog.UnitTests.Targets,ConsoleTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\ConsoleTargetTests.cs,ConsoleRaceCondtionIgnoreInnerTest,The following statement contains a magic number: Parallel.For(0' 10' new ParallelOptions() { MaxDegreeOfParallelism = 10 }' (_) =>                    {                        for (int i = 0; i < 100; i++)                        {                            logger.Trace("test message to the out and error stream");                        }                    });
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,GetParameterValueTest,The following statement contains a magic number: logEventInfo.Properties["intprop"] = 123;
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,GetParameterValueTest,The following statement contains a magic number: logEventInfo.Properties["dateprop"] = new DateTime(2018' 12' 30' 13' 34' 56);
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,GetParameterValueTest,The following statement contains a magic number: logEventInfo.Properties["dateprop"] = new DateTime(2018' 12' 30' 13' 34' 56);
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,GetParameterValueTest,The following statement contains a magic number: logEventInfo.Properties["dateprop"] = new DateTime(2018' 12' 30' 13' 34' 56);
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,GetParameterValueTest,The following statement contains a magic number: logEventInfo.Properties["dateprop"] = new DateTime(2018' 12' 30' 13' 34' 56);
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,GetParameterValueTest,The following statement contains a magic number: logEventInfo.Properties["dateprop"] = new DateTime(2018' 12' 30' 13' 34' 56);
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,GetParameterValueTest,The following statement contains a magic number: logEventInfo.Properties["dateprop"] = new DateTime(2018' 12' 30' 13' 34' 56);
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "1'2"' DbType.VarNumeric' (decimal)1.2 };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "1'2"' DbType.Currency' (decimal)1.2 };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "1'2"' DbType.Decimal' (decimal)1.2 };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "1'2"' DbType.Double' (double)1.2 };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "1'2"' DbType.Single' (Single)1.2 };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "2:30"' DbType.Time' new TimeSpan(0' 2' 30' 0)' };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "2:30"' DbType.Time' new TimeSpan(0' 2' 30' 0)' };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "2018-12-23 22:56"' DbType.DateTime' new DateTime(2018' 12' 23' 22' 56' 0)' };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "2018-12-23 22:56"' DbType.DateTime' new DateTime(2018' 12' 23' 22' 56' 0)' };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "2018-12-23 22:56"' DbType.DateTime' new DateTime(2018' 12' 23' 22' 56' 0)' };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "2018-12-23 22:56"' DbType.DateTime' new DateTime(2018' 12' 23' 22' 56' 0)' };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "2018-12-23 22:56"' DbType.DateTime' new DateTime(2018' 12' 23' 22' 56' 0)' };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "2018-12-23 22:56"' DbType.DateTime2' new DateTime(2018' 12' 23' 22' 56' 0)' };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "2018-12-23 22:56"' DbType.DateTime2' new DateTime(2018' 12' 23' 22' 56' 0)' };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "2018-12-23 22:56"' DbType.DateTime2' new DateTime(2018' 12' 23' 22' 56' 0)' };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "2018-12-23 22:56"' DbType.DateTime2' new DateTime(2018' 12' 23' 22' 56' 0)' };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "2018-12-23 22:56"' DbType.DateTime2' new DateTime(2018' 12' 23' 22' 56' 0)' };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "23-12-2018 22:56"' DbType.DateTime' new DateTime(2018' 12' 23' 22' 56' 0)' "dd-MM-yyyy HH:mm" };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "23-12-2018 22:56"' DbType.DateTime' new DateTime(2018' 12' 23' 22' 56' 0)' "dd-MM-yyyy HH:mm" };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "23-12-2018 22:56"' DbType.DateTime' new DateTime(2018' 12' 23' 22' 56' 0)' "dd-MM-yyyy HH:mm" };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "23-12-2018 22:56"' DbType.DateTime' new DateTime(2018' 12' 23' 22' 56' 0)' "dd-MM-yyyy HH:mm" };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "23-12-2018 22:56"' DbType.DateTime' new DateTime(2018' 12' 23' 22' 56' 0)' "dd-MM-yyyy HH:mm" };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { new DateTime(2018' 12' 23' 22' 56' 0).ToString(CultureInfo.InvariantCulture)' DbType.DateTime' new DateTime(2018' 12' 23' 22' 56' 0)' null' CultureInfo.InvariantCulture };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { new DateTime(2018' 12' 23' 22' 56' 0).ToString(CultureInfo.InvariantCulture)' DbType.DateTime' new DateTime(2018' 12' 23' 22' 56' 0)' null' CultureInfo.InvariantCulture };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { new DateTime(2018' 12' 23' 22' 56' 0).ToString(CultureInfo.InvariantCulture)' DbType.DateTime' new DateTime(2018' 12' 23' 22' 56' 0)' null' CultureInfo.InvariantCulture };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { new DateTime(2018' 12' 23' 22' 56' 0).ToString(CultureInfo.InvariantCulture)' DbType.DateTime' new DateTime(2018' 12' 23' 22' 56' 0)' null' CultureInfo.InvariantCulture };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { new DateTime(2018' 12' 23' 22' 56' 0).ToString(CultureInfo.InvariantCulture)' DbType.DateTime' new DateTime(2018' 12' 23' 22' 56' 0)' null' CultureInfo.InvariantCulture };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { new DateTime(2018' 12' 23' 22' 56' 0).ToString(CultureInfo.InvariantCulture)' DbType.DateTime' new DateTime(2018' 12' 23' 22' 56' 0)' null' CultureInfo.InvariantCulture };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { new DateTime(2018' 12' 23' 22' 56' 0).ToString(CultureInfo.InvariantCulture)' DbType.DateTime' new DateTime(2018' 12' 23' 22' 56' 0)' null' CultureInfo.InvariantCulture };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { new DateTime(2018' 12' 23' 22' 56' 0).ToString(CultureInfo.InvariantCulture)' DbType.DateTime' new DateTime(2018' 12' 23' 22' 56' 0)' null' CultureInfo.InvariantCulture };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { new DateTime(2018' 12' 23' 22' 56' 0).ToString(CultureInfo.InvariantCulture)' DbType.DateTime' new DateTime(2018' 12' 23' 22' 56' 0)' null' CultureInfo.InvariantCulture };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { new DateTime(2018' 12' 23' 22' 56' 0).ToString(CultureInfo.InvariantCulture)' DbType.DateTime' new DateTime(2018' 12' 23' 22' 56' 0)' null' CultureInfo.InvariantCulture };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "2018-12-23"' DbType.Date' new DateTime(2018' 12' 23' 0' 0' 0)' };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "2018-12-23"' DbType.Date' new DateTime(2018' 12' 23' 0' 0' 0)' };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "2018-12-23"' DbType.Date' new DateTime(2018' 12' 23' 0' 0' 0)' };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "2018-12-23 +2:30"' DbType.DateTimeOffset' new DateTimeOffset(2018' 12' 23' 0' 0' 0' new TimeSpan(2' 30' 0)) };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "2018-12-23 +2:30"' DbType.DateTimeOffset' new DateTimeOffset(2018' 12' 23' 0' 0' 0' new TimeSpan(2' 30' 0)) };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "2018-12-23 +2:30"' DbType.DateTimeOffset' new DateTimeOffset(2018' 12' 23' 0' 0' 0' new TimeSpan(2' 30' 0)) };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "2018-12-23 +2:30"' DbType.DateTimeOffset' new DateTimeOffset(2018' 12' 23' 0' 0' 0' new TimeSpan(2' 30' 0)) };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "2018-12-23 +2:30"' DbType.DateTimeOffset' new DateTimeOffset(2018' 12' 23' 0' 0' 0' new TimeSpan(2' 30' 0)) };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "23-12-2018 22:56 +2:30"' DbType.DateTimeOffset' new DateTimeOffset(2018' 12' 23' 22' 56' 0' new TimeSpan(2' 30' 0))' "dd-MM-yyyy HH:mm zzz" };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "23-12-2018 22:56 +2:30"' DbType.DateTimeOffset' new DateTimeOffset(2018' 12' 23' 22' 56' 0' new TimeSpan(2' 30' 0))' "dd-MM-yyyy HH:mm zzz" };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "23-12-2018 22:56 +2:30"' DbType.DateTimeOffset' new DateTimeOffset(2018' 12' 23' 22' 56' 0' new TimeSpan(2' 30' 0))' "dd-MM-yyyy HH:mm zzz" };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "23-12-2018 22:56 +2:30"' DbType.DateTimeOffset' new DateTimeOffset(2018' 12' 23' 22' 56' 0' new TimeSpan(2' 30' 0))' "dd-MM-yyyy HH:mm zzz" };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "23-12-2018 22:56 +2:30"' DbType.DateTimeOffset' new DateTimeOffset(2018' 12' 23' 22' 56' 0' new TimeSpan(2' 30' 0))' "dd-MM-yyyy HH:mm zzz" };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "23-12-2018 22:56 +2:30"' DbType.DateTimeOffset' new DateTimeOffset(2018' 12' 23' 22' 56' 0' new TimeSpan(2' 30' 0))' "dd-MM-yyyy HH:mm zzz" };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "23-12-2018 22:56 +2:30"' DbType.DateTimeOffset' new DateTimeOffset(2018' 12' 23' 22' 56' 0' new TimeSpan(2' 30' 0))' "dd-MM-yyyy HH:mm zzz" };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "3"' DbType.Byte' (byte)3 };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "3"' DbType.SByte' (sbyte)3 };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "3"' DbType.Int16' (short)3 };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { " 3 "' DbType.Int16' (short)3 };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "3"' DbType.Int32' 3 };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "3"' DbType.Int64' (long)3 };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "3"' DbType.UInt16' (ushort)3 };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "3"' DbType.UInt32' (uint)3 };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ConvertFromStringTestCases,The following statement contains a magic number: yield return new object[] { "3"' DbType.UInt64' (ulong)3 };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ParameterFacetTest,The following statement contains a magic number: DatabaseTarget dt = new DatabaseTarget()              {                  CommandText = "INSERT INTO FooBar VALUES(@msg' @lvl' @lg)"'                  DBProvider = typeof(MockDbConnection).AssemblyQualifiedName'                  KeepConnection = true'                  Parameters =                  {                      new DatabaseParameterInfo("msg"' "${message}")                      {                          Precision = 3'                          Scale = 7'                          Size = 9'                      }'                      new DatabaseParameterInfo("lvl"' "${level}")                      {                          Scale = 7                      }'                      new DatabaseParameterInfo("lg"' "${logger}")                      {                          Precision = 0                      }'                  }              };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ParameterFacetTest,The following statement contains a magic number: DatabaseTarget dt = new DatabaseTarget()              {                  CommandText = "INSERT INTO FooBar VALUES(@msg' @lvl' @lg)"'                  DBProvider = typeof(MockDbConnection).AssemblyQualifiedName'                  KeepConnection = true'                  Parameters =                  {                      new DatabaseParameterInfo("msg"' "${message}")                      {                          Precision = 3'                          Scale = 7'                          Size = 9'                      }'                      new DatabaseParameterInfo("lvl"' "${level}")                      {                          Scale = 7                      }'                      new DatabaseParameterInfo("lg"' "${logger}")                      {                          Precision = 0                      }'                  }              };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ParameterFacetTest,The following statement contains a magic number: DatabaseTarget dt = new DatabaseTarget()              {                  CommandText = "INSERT INTO FooBar VALUES(@msg' @lvl' @lg)"'                  DBProvider = typeof(MockDbConnection).AssemblyQualifiedName'                  KeepConnection = true'                  Parameters =                  {                      new DatabaseParameterInfo("msg"' "${message}")                      {                          Precision = 3'                          Scale = 7'                          Size = 9'                      }'                      new DatabaseParameterInfo("lvl"' "${level}")                      {                          Scale = 7                      }'                      new DatabaseParameterInfo("lg"' "${logger}")                      {                          Precision = 0                      }'                  }              };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,ParameterFacetTest,The following statement contains a magic number: DatabaseTarget dt = new DatabaseTarget()              {                  CommandText = "INSERT INTO FooBar VALUES(@msg' @lvl' @lg)"'                  DBProvider = typeof(MockDbConnection).AssemblyQualifiedName'                  KeepConnection = true'                  Parameters =                  {                      new DatabaseParameterInfo("msg"' "${message}")                      {                          Precision = 3'                          Scale = 7'                          Size = 9'                      }'                      new DatabaseParameterInfo("lvl"' "${level}")                      {                          Scale = 7                      }'                      new DatabaseParameterInfo("lg"' "${logger}")                      {                          Precision = 0                      }'                  }              };
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,DatabaseExceptionTest2,The following statement contains a magic number: Assert.Equal(3' exceptions.Count);
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,DatabaseExceptionTest2,The following statement contains a magic number: Assert.NotNull(exceptions[2]);
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,DatabaseExceptionTest2,The following statement contains a magic number: Assert.Equal("Failure during ExecuteNonQuery"' exceptions[2].Message);
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,DatabaseExceptionTest3,The following statement contains a magic number: Assert.Equal(3' exceptions.Count);
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,DatabaseExceptionTest3,The following statement contains a magic number: Assert.NotNull(exceptions[2]);
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,DatabaseExceptionTest3,The following statement contains a magic number: Assert.Equal("Failure during ExecuteNonQuery"' exceptions[2].Message);
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,SQLite_InstallAndLogMessageProgrammatically,The following statement contains a magic number: Assert.Equal((long)2' logcount);
Magic Number,NLog.UnitTests.Targets,DatabaseTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DatabaseTargetTests.cs,SQLite_InstallAndLogMessage,The following statement contains a magic number: Assert.Equal((long)3' logcount);
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerLegacyTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerLegacyTests.cs,SerializeDateTime_isoformat_Test,The following statement contains a magic number: var val = new DateTime(2016' 12' 31);
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerLegacyTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerLegacyTests.cs,SerializeDateTime_isoformat_Test,The following statement contains a magic number: var val = new DateTime(2016' 12' 31);
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerLegacyTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerLegacyTests.cs,SerializeDateTime_isoformat_Test,The following statement contains a magic number: var val = new DateTime(2016' 12' 31);
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,ReferenceLoopInDictionary_Test,The following statement contains a magic number: d.Add("First"' 17);
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,ReferenceLoopInList_Test,The following statement contains a magic number: d.Add(17);
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,ReferenceLoopInList_Test,The following statement contains a magic number: d.Add(3.14);
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,InfiniteLoop_Test,The following statement contains a magic number: Assert.Equal(10' cnt);
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,StringWithMixedControlCharacters_Test,The following statement contains a magic number: var text = "First\\Second\tand" + (char)3 + "for" + (char)0x1f + "with" + (char)0x10 + "but" + (char)0x0d + "and no" + (char)0x20;
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SerializeDateTime_Test2,The following statement contains a magic number: var val = new DateTime(2016' 12' 31);
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SerializeDateTime_Test2,The following statement contains a magic number: var val = new DateTime(2016' 12' 31);
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SerializeDateTime_Test2,The following statement contains a magic number: var val = new DateTime(2016' 12' 31);
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SerializeDateTimeOffset_Test,The following statement contains a magic number: var val = new DateTimeOffset(new DateTime(2016' 12' 31' 2' 30' 59)' new TimeSpan(4' 30' 0));
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SerializeDateTimeOffset_Test,The following statement contains a magic number: var val = new DateTimeOffset(new DateTime(2016' 12' 31' 2' 30' 59)' new TimeSpan(4' 30' 0));
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SerializeDateTimeOffset_Test,The following statement contains a magic number: var val = new DateTimeOffset(new DateTime(2016' 12' 31' 2' 30' 59)' new TimeSpan(4' 30' 0));
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SerializeDateTimeOffset_Test,The following statement contains a magic number: var val = new DateTimeOffset(new DateTime(2016' 12' 31' 2' 30' 59)' new TimeSpan(4' 30' 0));
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SerializeDateTimeOffset_Test,The following statement contains a magic number: var val = new DateTimeOffset(new DateTime(2016' 12' 31' 2' 30' 59)' new TimeSpan(4' 30' 0));
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SerializeDateTimeOffset_Test,The following statement contains a magic number: var val = new DateTimeOffset(new DateTime(2016' 12' 31' 2' 30' 59)' new TimeSpan(4' 30' 0));
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SerializeDateTimeOffset_Test,The following statement contains a magic number: var val = new DateTimeOffset(new DateTime(2016' 12' 31' 2' 30' 59)' new TimeSpan(4' 30' 0));
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SerializeDateTimeOffset_Test,The following statement contains a magic number: var val = new DateTimeOffset(new DateTime(2016' 12' 31' 2' 30' 59)' new TimeSpan(4' 30' 0));
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SerializeTime_Test,The following statement contains a magic number: var actual = SerializeObject(new TimeSpan(1' 2' 3' 4));
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SerializeTime_Test,The following statement contains a magic number: var actual = SerializeObject(new TimeSpan(1' 2' 3' 4));
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SerializeTime_Test,The following statement contains a magic number: var actual = SerializeObject(new TimeSpan(1' 2' 3' 4));
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SerializeTime2_Test,The following statement contains a magic number: var actual = SerializeObject(new TimeSpan(0' 2' 3' 4));
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SerializeTime2_Test,The following statement contains a magic number: var actual = SerializeObject(new TimeSpan(0' 2' 3' 4));
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SerializeTime2_Test,The following statement contains a magic number: var actual = SerializeObject(new TimeSpan(0' 2' 3' 4));
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SerializeTime3_Test,The following statement contains a magic number: var actual = SerializeObject(new TimeSpan(0' 0' 2' 3' 4));
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SerializeTime3_Test,The following statement contains a magic number: var actual = SerializeObject(new TimeSpan(0' 0' 2' 3' 4));
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SerializeTime3_Test,The following statement contains a magic number: var actual = SerializeObject(new TimeSpan(0' 0' 2' 3' 4));
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SerializeDict_Test,The following statement contains a magic number: dictionary.Add("key1"' 13);
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SerializeDict_Test,The following statement contains a magic number: dictionary.Add("key 2"' 1.3m);
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SerializeTrickyDict_Test,The following statement contains a magic number: dictionary.Add("key1"' 13);
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SerializeTrickyDict_Test,The following statement contains a magic number: dictionary.Add("key 2"' 1.3m);
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SerializeExpandoDict_Test,The following statement contains a magic number: dictionary.Add("key 2"' 1.3m);
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SerializeIntegerKeyDict_Test,The following statement contains a magic number: dictionary.Add(2' "Two");
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SerializeEnumKeyDict_Test,The following statement contains a magic number: dictionary.Add(ExceptionRenderingFormat.Method' 4);
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SerializeEnumKeyDict_Test,The following statement contains a magic number: dictionary.Add(ExceptionRenderingFormat.StackTrace' 5);
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SerializeAnonymousObject_Test,The following statement contains a magic number: var object1 = new { Id = 123' Name = "test name" };
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SerializeExpandoObject_Test,The following statement contains a magic number: object1.Id = 123;
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SingleItemOptimizedHashSetTest,The following statement contains a magic number: Assert.Equal(2' hashSet.Count);
Magic Number,NLog.UnitTests.Targets,DefaultJsonSerializerTestsBase,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\DefaultJsonSerializerTestsBase.cs,SingleItemOptimizedHashSetTest,The following statement contains a magic number: object[] objArray = new object[2];
Magic Number,NLog.UnitTests.Targets,EventLogTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\EventLogTargetTests.cs,MaxMessageLengthShouldBeAsSpecifiedOption,The following statement contains a magic number: const int expectedMaxMessageLength = 1000;
Magic Number,NLog.UnitTests.Targets,EventLogTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\EventLogTargetTests.cs,SplitMessagesShouldBeWrittenAtCorrenpondingNLogLevel,The following statement contains a magic number: const int expectedEntryCount = 2;
Magic Number,NLog.UnitTests.Targets,EventLogTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\EventLogTargetTests.cs,WriteEventLogEntryLargerThanMaxMessageLengthWithOverflowSplitEntries_TheMessageShouldBeSplit,The following statement contains a magic number: const int expectedEntryCount = 5;
Magic Number,NLog.UnitTests.Targets,EventLogTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\EventLogTargetTests.cs,WriteEventLogEntryEqualToMaxMessageLengthWithOverflowSplitEntries_TheMessageShouldBeSplitInTwoChunks,The following statement contains a magic number: const int expectedEntryCount = 2;
Magic Number,NLog.UnitTests.Targets,EventLogTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\EventLogTargetTests.cs,WriteEventLogEntryWithDynamicSource,The following statement contains a magic number: const int maxMessageLength = 10;
Magic Number,NLog.UnitTests.Targets,EventLogTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\EventLogTargetTests.cs,LogEntryWithStaticEventIdAndCategoryInTargetLayout,The following statement contains a magic number: var target = CreateEventLogTarget<EventLogTarget>("NLog.UnitTests" + Guid.NewGuid().ToString("N")' EventLogTargetOverflowAction.Truncate' 5000);
Magic Number,NLog.UnitTests.Targets,EventLogTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\EventLogTargetTests.cs,LogEntryWithDynamicEventIdAndCategory,The following statement contains a magic number: var target = CreateEventLogTarget<EventLogTarget>("NLog.UnitTests" + Guid.NewGuid().ToString("N")' EventLogTargetOverflowAction.Truncate' 5000);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,SimpleFileDeleteTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var logFile = Path.GetTempFileName();                  var logFile2 = Path.Combine(Path.Combine(Path.GetTempPath()' Guid.NewGuid().ToString())' Path.GetFileName(logFile));                    try                  {                      var fileTarget = WrapFileTarget(new FileTarget                      {                          FileName = SimpleLayout.Escape(logFile)'                          LineEnding = LineEndingMode.LF'                          Layout = "${level} ${message}"'                          OpenFileCacheTimeout = 0'                          EnableFileDelete = true'                          ConcurrentWrites = concurrentWrites'                          KeepFileOpen = keepFileOpen'                          NetworkWrites = networkWrites'                          ForceManaged = forceManaged'                          ForceMutexConcurrentWrites = forceMutexConcurrentWrites'                          OptimizeBufferReuse = optimizeBufferReuse'                      });                        SimpleConfigurator.ConfigureForTargetLogging(fileTarget' LogLevel.Debug);                        logger.Debug("aaa");                        LogManager.Flush();                        Directory.CreateDirectory(Path.GetDirectoryName(logFile2));                      File.Move(logFile' logFile2);                        if (isSimpleKeepFileOpen)                          Thread.Sleep(1500); // Ensure EnableFileDeleteSimpleMonitor will trigger                      else if (keepFileOpen && !networkWrites)                          Thread.Sleep(150); // Allow AutoClose-Timer-Thread to react (FileWatcher schedules timer after 50 msec)                        logger.Info("bbb");                        LogManager.Configuration = null;                        AssertFileContents(logFile' "Info bbb\n"' Encoding.UTF8);                  }                  finally                  {                      if (File.Exists(logFile2))                      {                          File.Delete(logFile2);                          Directory.Delete(Path.GetDirectoryName(logFile2));                      }                        if (File.Exists(logFile))                          File.Delete(logFile);                  }              });
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,SimpleFileDeleteTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var logFile = Path.GetTempFileName();                  var logFile2 = Path.Combine(Path.Combine(Path.GetTempPath()' Guid.NewGuid().ToString())' Path.GetFileName(logFile));                    try                  {                      var fileTarget = WrapFileTarget(new FileTarget                      {                          FileName = SimpleLayout.Escape(logFile)'                          LineEnding = LineEndingMode.LF'                          Layout = "${level} ${message}"'                          OpenFileCacheTimeout = 0'                          EnableFileDelete = true'                          ConcurrentWrites = concurrentWrites'                          KeepFileOpen = keepFileOpen'                          NetworkWrites = networkWrites'                          ForceManaged = forceManaged'                          ForceMutexConcurrentWrites = forceMutexConcurrentWrites'                          OptimizeBufferReuse = optimizeBufferReuse'                      });                        SimpleConfigurator.ConfigureForTargetLogging(fileTarget' LogLevel.Debug);                        logger.Debug("aaa");                        LogManager.Flush();                        Directory.CreateDirectory(Path.GetDirectoryName(logFile2));                      File.Move(logFile' logFile2);                        if (isSimpleKeepFileOpen)                          Thread.Sleep(1500); // Ensure EnableFileDeleteSimpleMonitor will trigger                      else if (keepFileOpen && !networkWrites)                          Thread.Sleep(150); // Allow AutoClose-Timer-Thread to react (FileWatcher schedules timer after 50 msec)                        logger.Info("bbb");                        LogManager.Configuration = null;                        AssertFileContents(logFile' "Info bbb\n"' Encoding.UTF8);                  }                  finally                  {                      if (File.Exists(logFile2))                      {                          File.Delete(logFile2);                          Directory.Delete(Path.GetDirectoryName(logFile2));                      }                        if (File.Exists(logFile))                          File.Delete(logFile);                  }              });
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,SimpleFileDeleteTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var logFile = Path.GetTempFileName();                  var logFile2 = Path.Combine(Path.Combine(Path.GetTempPath()' Guid.NewGuid().ToString())' Path.GetFileName(logFile));                    try                  {                      var fileTarget = WrapFileTarget(new FileTarget                      {                          FileName = SimpleLayout.Escape(logFile)'                          LineEnding = LineEndingMode.LF'                          Layout = "${level} ${message}"'                          OpenFileCacheTimeout = 0'                          EnableFileDelete = true'                          ConcurrentWrites = concurrentWrites'                          KeepFileOpen = keepFileOpen'                          NetworkWrites = networkWrites'                          ForceManaged = forceManaged'                          ForceMutexConcurrentWrites = forceMutexConcurrentWrites'                          OptimizeBufferReuse = optimizeBufferReuse'                      });                        SimpleConfigurator.ConfigureForTargetLogging(fileTarget' LogLevel.Debug);                        logger.Debug("aaa");                        LogManager.Flush();                        Directory.CreateDirectory(Path.GetDirectoryName(logFile2));                      File.Move(logFile' logFile2);                        if (isSimpleKeepFileOpen)                          Thread.Sleep(1500); // Ensure EnableFileDeleteSimpleMonitor will trigger                      else if (keepFileOpen && !networkWrites)                          Thread.Sleep(150); // Allow AutoClose-Timer-Thread to react (FileWatcher schedules timer after 50 msec)                        logger.Info("bbb");                        LogManager.Configuration = null;                        AssertFileContents(logFile' "Info bbb\n"' Encoding.UTF8);                  }                  finally                  {                      if (File.Exists(logFile2))                      {                          File.Delete(logFile2);                          Directory.Delete(Path.GetDirectoryName(logFile2));                      }                        if (File.Exists(logFile))                          File.Delete(logFile);                  }              });
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,NonExistingDriveShouldNotDelayMuch,The following statement contains a magic number: i < 300
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,NonExistingDriveShouldNotDelayMuch,The following statement contains a magic number: Assert.True(DateTime.UtcNow - start < TimeSpan.FromSeconds(5));
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,RollingArchiveEveryMonth,The following statement contains a magic number: timeSource.Time.Minute == 59
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,RollingArchiveEveryMonth,The following statement contains a magic number: j < 31
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,RollingArchiveEveryMonth,The following statement contains a magic number: i < 12
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,RollingArchiveEveryMonth,The following statement contains a magic number: Assert.Equal(30' files.Length);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,RollingArchiveEveryMonth,The following statement contains a magic number: files.Length < 28 || files.Length > 31
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,RollingArchiveEveryMonth,The following statement contains a magic number: files.Length < 28 || files.Length > 31
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,RollingArchiveEveryMonth,The following statement contains a magic number: Assert.Equal(14' Path.GetFileName(file).Length);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DatedArchiveEveryMonth,The following statement contains a magic number: var fileTarget = WrapFileTarget(new FileTarget                  {                      FileName = Path.Combine(tempPath' "AppName.log")'                      LineEnding = LineEndingMode.LF'                      Layout = "${message}"'                      ArchiveNumbering = ArchiveNumberingMode.Date'                      ArchiveEvery = FileArchivePeriod.Month'                      ArchiveDateFormat = "yyyyMMdd"'                      MaxArchiveFiles = 2'                  });
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DatedArchiveEveryMonth,The following statement contains a magic number: File.SetCreationTime(files[0]' DateTime.Now.AddMonths(-2));
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DatedArchiveEveryMonth,The following statement contains a magic number: var fileTarget2 = WrapFileTarget(new FileTarget                  {                      FileName = Path.Combine(tempPath' "AppName.log")'                      LineEnding = LineEndingMode.LF'                      Layout = "${message}"'                      ArchiveNumbering = ArchiveNumberingMode.Date'                      ArchiveEvery = FileArchivePeriod.Month'                      ArchiveDateFormat = "yyyyMMdd"'                      MaxArchiveFiles = 2'                  });
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DatedArchiveEveryMonth,The following statement contains a magic number: Assert.Equal(2' files.Length);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,CsvHeaderTest,The following statement contains a magic number: var fileTarget = WrapFileTarget(new FileTarget                      {                          FileName = SimpleLayout.Escape(logFile)'                          LineEnding = LineEndingMode.LF'                          Layout = layout'                          OpenFileCacheTimeout = 0'                          ReplaceFileContentsOnEachWrite = false'                          ArchiveAboveSize = 120' // Only 2 LogEvents per file                          MaxArchiveFiles = 1'                      });
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,CsvHeaderTest,The following statement contains a magic number: j < 3
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,CsvHeaderTest,The following statement contains a magic number: i < 2
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,CsvHeaderTest,The following statement contains a magic number: Assert.NotEqual(3' Directory.GetFiles(tempPath).Count());
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,SequentialArchiveTest,The following statement contains a magic number: var fileTarget = WrapFileTarget(new FileTarget                  {                      FileName = logFile'                      ArchiveFileName = Path.Combine(archiveFolder' "{####}.txt")'                      ArchiveAboveSize = 100'                      LineEnding = LineEndingMode.LF'                      Layout = "${message}"'                      MaxArchiveFiles = 3'                      ArchiveNumbering = ArchiveNumberingMode.Sequence                  });
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,SequentialArchiveTest,The following statement contains a magic number: var fileTarget = WrapFileTarget(new FileTarget                  {                      FileName = logFile'                      ArchiveFileName = Path.Combine(archiveFolder' "{####}.txt")'                      ArchiveAboveSize = 100'                      LineEnding = LineEndingMode.LF'                      Layout = "${message}"'                      MaxArchiveFiles = 3'                      ArchiveNumbering = ArchiveNumberingMode.Sequence                  });
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,SequentialArchiveTest,The following statement contains a magic number: var times = 25;
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,SequentialArchiveTest_MaxArchiveFiles_0,The following statement contains a magic number: var fileTarget = WrapFileTarget(new FileTarget                  {                      FileName = logFile'                      ArchiveFileName = Path.Combine(archiveFolder' "{####}.txt")'                      ArchiveAboveSize = 100'                      LineEnding = LineEndingMode.LF'                      ArchiveNumbering = ArchiveNumberingMode.Sequence'                      Layout = "${message}"'                      MaxArchiveFiles = 0                  });
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,SequentialArchiveTest_MaxArchiveFiles_0,The following statement contains a magic number: AssertFileContents(logFile'                      StringRepeat(25' "eee\n")'                      Encoding.UTF8);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,SequentialArchiveTest_MaxArchiveFiles_0,The following statement contains a magic number: AssertFileContents(                     Path.Combine(archiveFolder' "0000.txt")'                     StringRepeat(25' "aaa\n")'                     Encoding.UTF8);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,SequentialArchiveTest_MaxArchiveFiles_0,The following statement contains a magic number: AssertFileContents(                      Path.Combine(archiveFolder' "0001.txt")'                      StringRepeat(25' "bbb\n")'                      Encoding.UTF8);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,SequentialArchiveTest_MaxArchiveFiles_0,The following statement contains a magic number: AssertFileContents(                      Path.Combine(archiveFolder' "0002.txt")'                      StringRepeat(25' "ccc\n")'                      Encoding.UTF8);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,SequentialArchiveTest_MaxArchiveFiles_0,The following statement contains a magic number: AssertFileContents(                      Path.Combine(archiveFolder' "0003.txt")'                      StringRepeat(25' "ddd\n")'                      Encoding.UTF8);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,ArchiveAboveSizeWithArchiveNumberingModeDate_maxfiles_o,The following statement contains a magic number: var fileTarget = WrapFileTarget(new FileTarget                  {                      FileName = logFile'                      ArchiveFileName = Path.Combine(archiveFolder' "{####}.txt")'                      ArchiveAboveSize = 100'                      LineEnding = LineEndingMode.LF'                      Layout = "${message}"'                      ArchiveNumbering = ArchiveNumberingMode.Date                  });
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,ArchiveAboveSizeWithArchiveNumberingModeDate_maxfiles_o,The following statement contains a magic number: var times = 25;
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DeleteArchiveFilesByDate,The following statement contains a magic number: const int maxArchiveFiles = 3;
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DeleteArchiveFilesByDate,The following statement contains a magic number: var fileTarget = WrapFileTarget(new FileTarget                  {                      FileName = logFile'                      ArchiveFileName = Path.Combine(archiveFolder' "{#}.txt")'                      ArchiveAboveSize = 50'                      LineEnding = LineEndingMode.LF'                      ArchiveNumbering = ArchiveNumberingMode.Date'                      ArchiveDateFormat = "yyyyMMddHHmmssfff"' //make sure the milliseconds are set in the filename                      Layout = "${message}"'                      MaxArchiveFiles = maxArchiveFiles                  });
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DeleteArchiveFilesByDate,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DeleteArchiveFilesByDate,The following statement contains a magic number: i % 5 == 0
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DeleteArchiveFilesByDate,The following statement contains a magic number: i < 19
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DeleteArchiveFilesByDate,The following statement contains a magic number: Assert.Equal(files.ElementAt(2)' files2.ElementAt(1));
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DeleteArchiveFilesByDate,The following statement contains a magic number: Assert.DoesNotContain(files2.ElementAt(2)' files);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DeleteArchiveFilesByDateWithDateName,The following statement contains a magic number: const int maxArchiveFiles = 3;
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DeleteArchiveFilesByDateWithDateName,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DeleteArchiveFilesByDateWithDateName,The following statement contains a magic number: i < 4
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DeleteArchiveFilesByDateWithDateName,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DeleteArchiveFilesByDateWithDateName,The following statement contains a magic number: Assert.Equal(files.ElementAt(2)' files2.ElementAt(1));
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DeleteArchiveFilesByDateWithDateName,The following statement contains a magic number: Assert.Equal(files.ElementAt(3)' files2.ElementAt(2));
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DeleteArchiveFilesByDateWithDateName,The following statement contains a magic number: Assert.Equal(files.ElementAt(3)' files2.ElementAt(2));
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DeleteArchiveFilesByDateWithDateName,The following statement contains a magic number: Assert.DoesNotContain(files2.ElementAt(3)' files);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DateArchive_UsesDateFromCurrentTimeSource,The following statement contains a magic number: const int maxArchiveFiles = 3;
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DateArchive_UsesDateFromCurrentTimeSource,The following statement contains a magic number: const int daysToTestLogging = 3;
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DateArchive_UsesDateFromCurrentTimeSource,The following statement contains a magic number: const int intervalsPerDay = 24;
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DateArchive_UsesDateFromCurrentTimeSource,The following statement contains a magic number: Assert.Equal(files[2]' files2[1]);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DateArchive_UsesDateFromCurrentTimeSource,The following statement contains a magic number: Assert.DoesNotContain(files2[2]' files);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DateArchive_ArchiveOnceOnly,The following statement contains a magic number: timeSource.Time.Minute == 59
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DateArchive_ArchiveOnceOnly,The following statement contains a magic number: AssertFileContents(currentLogFile' StringRepeat(2' "123456789\n")' Encoding.UTF8);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DateArchive_SkipPeriod,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DateArchive_SkipPeriod,The following statement contains a magic number: DateTime.Now.Second > 55
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DateArchive_SkipPeriod,The following statement contains a magic number: timeSource.Time.Minute == 59
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DateArchive_SkipPeriod,The following statement contains a magic number: timeSource.AddToLocalTime(TimeSpan.FromDays(2));
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DateArchive_AllLoggersTransferToCurrentLogFile,The following statement contains a magic number: timeSource.Time.Minute == 59
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DateArchive_AllLoggersTransferToCurrentLogFile,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DateArchive_AllLoggersTransferToCurrentLogFile,The following statement contains a magic number: AssertFileContents(prevLogFile' StringRepeat(2' "123456789\n")' Encoding.UTF8);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DateArchive_AllLoggersTransferToCurrentLogFile,The following statement contains a magic number: AssertFileContents(currentLogFile' StringRepeat(2' "123456789\n")' Encoding.UTF8);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DeleteArchiveFilesByDate_MaxArchiveFiles_0,The following statement contains a magic number: var fileTarget = WrapFileTarget(new FileTarget                  {                      FileName = logFile'                      ArchiveFileName = Path.Combine(archiveFolder' "{#}.txt")'                      ArchiveAboveSize = 50'                      LineEnding = LineEndingMode.LF'                      ArchiveNumbering = ArchiveNumberingMode.Date'                      ArchiveDateFormat = "yyyyMMddHHmmssfff"' //make sure the milliseconds are set in the filename                      Layout = "${message}"'                      MaxArchiveFiles = 0                  });
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DeleteArchiveFilesByDate_MaxArchiveFiles_0,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DeleteArchiveFilesByDate_MaxArchiveFiles_0,The following statement contains a magic number: i % 5 == 0
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DeleteArchiveFilesByDate_MaxArchiveFiles_0,The following statement contains a magic number: i < 19
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DeleteArchiveFilesByDate_MaxArchiveFiles_0,The following statement contains a magic number: Assert.Equal(3' fileCount);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DeleteArchiveFilesByDate_MaxArchiveFiles_0,The following statement contains a magic number: Assert.Equal(4' fileCount2);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DeleteArchiveFilesByDate_AlteredMaxArchive,The following statement contains a magic number: var innerFileTarget = new FileTarget                  {                      FileName = logFile'                      ArchiveFileName = Path.Combine(archiveFolder' "{#}.txt")'                      ArchiveAboveSize = 50'                      LineEnding = LineEndingMode.LF'                      ArchiveNumbering = ArchiveNumberingMode.Date'                      ArchiveDateFormat = "yyyyMMddHHmmssfff"' //make sure the milliseconds are set in the filename                      Layout = "${message}"'                      MaxArchiveFiles = 5                  };
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DeleteArchiveFilesByDate_AlteredMaxArchive,The following statement contains a magic number: var innerFileTarget = new FileTarget                  {                      FileName = logFile'                      ArchiveFileName = Path.Combine(archiveFolder' "{#}.txt")'                      ArchiveAboveSize = 50'                      LineEnding = LineEndingMode.LF'                      ArchiveNumbering = ArchiveNumberingMode.Date'                      ArchiveDateFormat = "yyyyMMddHHmmssfff"' //make sure the milliseconds are set in the filename                      Layout = "${message}"'                      MaxArchiveFiles = 5                  };
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DeleteArchiveFilesByDate_AlteredMaxArchive,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DeleteArchiveFilesByDate_AlteredMaxArchive,The following statement contains a magic number: i % 5 == 0
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DeleteArchiveFilesByDate_AlteredMaxArchive,The following statement contains a magic number: i < 29
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DeleteArchiveFilesByDate_AlteredMaxArchive,The following statement contains a magic number: innerFileTarget.MaxArchiveFiles = 2;
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DeleteArchiveFilesByDate_AlteredMaxArchive,The following statement contains a magic number: Assert.DoesNotContain(files.ElementAt(2)' files2);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DeleteArchiveFilesByDate_AlteredMaxArchive,The following statement contains a magic number: Assert.DoesNotContain(files.ElementAt(3)' files2);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DeleteArchiveFilesByDate_AlteredMaxArchive,The following statement contains a magic number: Assert.Equal(files.ElementAt(4)' files2.ElementAt(0));
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,RepeatingHeaderTest,The following statement contains a magic number: var fileTarget = WrapFileTarget(new FileTarget                  {                      FileName = logFile'                      ArchiveFileName = Path.Combine(archiveFolder' "{####}.txt")'                      ArchiveAboveSize = 51'                      LineEnding = LineEndingMode.LF'                      ArchiveNumbering = ArchiveNumberingMode.Sequence'                      Layout = "${message}"'                      Header = header'                      MaxArchiveFiles = 2'                  });
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,RepeatingHeaderTest,The following statement contains a magic number: var fileTarget = WrapFileTarget(new FileTarget                  {                      FileName = logFile'                      ArchiveFileName = Path.Combine(archiveFolder' "{####}.txt")'                      ArchiveAboveSize = 51'                      LineEnding = LineEndingMode.LF'                      ArchiveNumbering = ArchiveNumberingMode.Sequence'                      Layout = "${message}"'                      Header = header'                      MaxArchiveFiles = 2'                  });
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,RepeatingHeaderTest,The following statement contains a magic number: i < 16
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,RepeatingFooterTest,The following statement contains a magic number: var ft = new FileTarget                  {                      FileName = logFile'                      ArchiveFileName = Path.Combine(archiveFolder' "{####}.txt")'                      ArchiveAboveSize = 51'                      LineEnding = LineEndingMode.LF'                      ArchiveNumbering = ArchiveNumberingMode.Sequence'                      Layout = "${message}"'                      Footer = footer'                      MaxArchiveFiles = 2'                      WriteFooterOnArchivingOnly = writeFooterOnArchivingOnly                  };
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,RepeatingFooterTest,The following statement contains a magic number: var ft = new FileTarget                  {                      FileName = logFile'                      ArchiveFileName = Path.Combine(archiveFolder' "{####}.txt")'                      ArchiveAboveSize = 51'                      LineEnding = LineEndingMode.LF'                      ArchiveNumbering = ArchiveNumberingMode.Sequence'                      Layout = "${message}"'                      Footer = footer'                      MaxArchiveFiles = 2'                      WriteFooterOnArchivingOnly = writeFooterOnArchivingOnly                  };
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,RepeatingFooterTest,The following statement contains a magic number: i < 16
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,RollingArchiveTests,The following statement contains a magic number: var innerFileTarget = new FileTarget                  {                      EnableArchiveFileCompression = enableCompression'                      FileName = logFile'                      ArchiveAboveSize = 100'                      LineEnding = LineEndingMode.LF'                      ArchiveNumbering = ArchiveNumberingMode.Rolling'                      Layout = "${message}"'                      MaxArchiveFiles = 3                  };
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,RollingArchiveTests,The following statement contains a magic number: var innerFileTarget = new FileTarget                  {                      EnableArchiveFileCompression = enableCompression'                      FileName = logFile'                      ArchiveAboveSize = 100'                      LineEnding = LineEndingMode.LF'                      ArchiveNumbering = ArchiveNumberingMode.Rolling'                      Layout = "${message}"'                      MaxArchiveFiles = 3                  };
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,RollingArchiveTests,The following statement contains a magic number: var times = 25;
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,RollingArchiveTests,The following statement contains a magic number: assertFileContents(                      Path.Combine(tempPath' string.Format(archiveFileNameFormat' 2))'                      StringRepeat(times' "bbb\n")'                      Encoding.UTF8);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,RollingArchiveTests,The following statement contains a magic number: Assert.True(!File.Exists(Path.Combine(tempPath' string.Format(archiveFileNameFormat' 3))));
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,RollingArchiveTest_MaxArchiveFiles_0,The following statement contains a magic number: var fileTarget = WrapFileTarget(new FileTarget                  {                      FileName = logFile'                      ArchiveFileName = Path.Combine(tempPath' "archive" + slash + "{####}.txt")'                      ArchiveAboveSize = 100'                      LineEnding = LineEndingMode.LF'                      ArchiveNumbering = ArchiveNumberingMode.Rolling'                      Layout = "${message}"'                      MaxArchiveFiles = 0                  });
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,RollingArchiveTest_MaxArchiveFiles_0,The following statement contains a magic number: var times = 25;
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,MultiFileWrite,The following statement contains a magic number: var times = 25;
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,BufferedMultiFileWrite,The following statement contains a magic number: SimpleConfigurator.ConfigureForTargetLogging(new BufferingTargetWrapper(fileTarget' 10)' LogLevel.Debug);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,BufferedMultiFileWrite,The following statement contains a magic number: var times = 25;
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,AsyncMultiFileWrite,The following statement contains a magic number: SimpleConfigurator.ConfigureForTargetLogging(new AsyncTargetWrapper(fileTarget' 10' AsyncTargetWrapperOverflowAction.Grow)                  {                      Name = "AsyncMultiFileWrite_wrapper"'                      TimeToSleepBetweenBatches = 1'                  }' LogLevel.Debug);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,AsyncMultiFileWrite,The following statement contains a magic number: var times = 25;
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_ArchiveNumbering_DateAndSequenceTests,The following statement contains a magic number: const int archiveAboveSize = 100;
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_ArchiveNumbering_DateAndSequenceTests,The following statement contains a magic number: var fileTarget = WrapFileTarget(new FileTarget                  {                      EnableArchiveFileCompression = enableCompression'                      FileName = logFile'                      ArchiveFileName = Path.Combine(tempPath' archiveFileName)'                      ArchiveDateFormat = archiveDateFormat'                      ArchiveAboveSize = archiveAboveSize'                      LineEnding = LineEndingMode.LF'                      Layout = "${message}"'                      MaxArchiveFiles = 3'                      ArchiveNumbering = ArchiveNumberingMode.DateAndSequence'                      ArchiveEvery = FileArchivePeriod.Day                  });
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_ArchiveNumbering_DateAndSequenceTests,The following statement contains a magic number: var times = 25;
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_ArchiveNumbering_DateAndSequenceTests,The following statement contains a magic number: assertFileContents(helper.GetFullPath(2)' StringRepeat(times' "ccc\n")' Encoding.UTF8);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_ArchiveNumbering_DateAndSequenceTests,The following statement contains a magic number: assertFileContents(helper.GetFullPath(3)' StringRepeat(times' "ddd\n")' Encoding.UTF8);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_ArchiveNumbering_DateAndSequenceTests,The following statement contains a magic number: Assert.False(helper.Exists(4)' "Fifth archive must not have been created yet.");
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTargetArchiveFileNameTest,The following statement contains a magic number: var fileTarget = WrapFileTarget(new FileTarget                  {                      FileName = logFile'                      ArchiveFileName = Path.Combine(tempPath' ".."' subPath' archiveFileName)'                      ArchiveNumbering = archiveNumbering'                      ArchiveAboveSize = 1000'                      MaxArchiveFiles = 1000'                  });
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTargetArchiveFileNameTest,The following statement contains a magic number: var fileTarget = WrapFileTarget(new FileTarget                  {                      FileName = logFile'                      ArchiveFileName = Path.Combine(tempPath' ".."' subPath' archiveFileName)'                      ArchiveNumbering = archiveNumbering'                      ArchiveAboveSize = 1000'                      MaxArchiveFiles = 1000'                  });
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTargetArchiveFileNameTest,The following statement contains a magic number: i < 25
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_LogAndArchiveFilesWithSameName_ShouldArchive,The following statement contains a magic number: var fileTarget = WrapFileTarget(new FileTarget                  {                      FileName = logFile'                      ArchiveFileName = archiveFile'                      ArchiveAboveSize = 1' //Force immediate archival                      ArchiveNumbering = ArchiveNumberingMode.DateAndSequence'                      MaxArchiveFiles = 5                  });
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_LogAndArchiveFilesWithSameName_ShouldArchive,The following statement contains a magic number: i <= 5
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_LogAndArchiveFilesWithSameName_ShouldArchive,The following statement contains a magic number: Assert.True(tempDirectory.GetFiles(archiveFileMask).Count() == 5 + 1);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_Handle_Other_Files_That_Match_Archive_Format,The following statement contains a magic number: var fileTarget = WrapFileTarget(new FileTarget                  {                      FileName = logFile'                      Layout = "${message}"'                      EnableFileDelete = false'                      Encoding = Encoding.UTF8'                      ArchiveFileName = archiveFileLayout'                      ArchiveEvery = FileArchivePeriod.Day'                      ArchiveNumbering = ArchiveNumberingMode.Date'                      ArchiveDateFormat = "___________yyyyMMddHHmm"'                      MaxArchiveFiles = 10   // Get past the optimization to avoid deleting old files.                  });
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,SingleArchiveFileRollsCorrectly,The following statement contains a magic number: var fileTarget = WrapFileTarget(new FileTarget                  {                      FileName = logFile'                      ArchiveFileName = Path.Combine(tempPath' "archive"' "file.txt2")'                      ArchiveAboveSize = 100'                      LineEnding = LineEndingMode.LF'                      Layout = "${message}"'                      MaxArchiveFiles = 1'                  });
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,SingleArchiveFileRollsCorrectly,The following statement contains a magic number: var times = 25;
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,ArchiveFileRollsCorrectly,The following statement contains a magic number: var fileTarget = WrapFileTarget(new FileTarget                  {                      FileName = logFile'                      ArchiveFileName = Path.Combine(tempPath' "archive"' "file.txt2")'                      ArchiveAboveSize = 100'                      LineEnding = LineEndingMode.LF'                      Layout = "${message}"'                      MaxArchiveFiles = 2'                  });
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,ArchiveFileRollsCorrectly,The following statement contains a magic number: var fileTarget = WrapFileTarget(new FileTarget                  {                      FileName = logFile'                      ArchiveFileName = Path.Combine(tempPath' "archive"' "file.txt2")'                      ArchiveAboveSize = 100'                      LineEnding = LineEndingMode.LF'                      Layout = "${message}"'                      MaxArchiveFiles = 2'                  });
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,ArchiveFileRollsCorrectly,The following statement contains a magic number: var times = 25;
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,ArchiveFileRollsCorrectly_ExistingArchives,The following statement contains a magic number: var fileTarget = WrapFileTarget(new FileTarget                  {                      FileName = logFile'                      ArchiveFileName = Path.Combine(tempPath' "archive"' "file.txt2")'                      ArchiveAboveSize = 100'                      LineEnding = LineEndingMode.LF'                      Layout = "${message}"'                      MaxArchiveFiles = 2'                  });
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,ArchiveFileRollsCorrectly_ExistingArchives,The following statement contains a magic number: var fileTarget = WrapFileTarget(new FileTarget                  {                      FileName = logFile'                      ArchiveFileName = Path.Combine(tempPath' "archive"' "file.txt2")'                      ArchiveAboveSize = 100'                      LineEnding = LineEndingMode.LF'                      Layout = "${message}"'                      MaxArchiveFiles = 2'                  });
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,ArchiveFileRollsCorrectly_ExistingArchives,The following statement contains a magic number: var times = 25;
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_ArchiveNumbering_remove_correct_order,The following statement contains a magic number: const int maxArchiveFiles = 10;
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_ArchiveNumbering_remove_correct_order,The following statement contains a magic number: var fileTarget = new FileTarget                  {                      FileName = logFile'                      ArchiveFileName = Path.Combine(tempPath' "archive"' "{#}." + archiveExtension)'                      ArchiveDateFormat = "yyyy-MM-dd"'                      ArchiveAboveSize = 100'                      LineEnding = LineEndingMode.LF'                      Layout = "${message}"'                      MaxArchiveFiles = maxArchiveFiles'                      ArchiveNumbering = ArchiveNumberingMode.DateAndSequence'                  };
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_ArchiveNumbering_remove_correct_order,The following statement contains a magic number: i < 21
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_ArchiveNumbering_remove_correct_wildcard,The following statement contains a magic number: const int maxArchiveFiles = 5;
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_ArchiveNumbering_remove_correct_wildcard,The following statement contains a magic number: timeSource.Time.Minute == 59
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_ArchiveNumbering_remove_correct_wildcard,The following statement contains a magic number: var fileTarget = new FileTarget                  {                      FileName = string.Format(logFile' "${logger}"' "${shortdate}")'                      ArchiveAboveSize = 100'                      LineEnding = LineEndingMode.LF'                      Layout = "${message}"'                      MaxArchiveFiles = maxArchiveFiles'                  };
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_ArchiveNumbering_remove_correct_wildcard,The following statement contains a magic number: i <= maxArchiveFiles - 3
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_ArchiveNumbering_remove_correct_wildcard,The following statement contains a magic number: i < 10
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_SameDirectory_MaxArchiveFiles_One,The following statement contains a magic number: var fileTarget1 = new FileTarget                  {                      FileName = string.Format(logFile1' "")'                      ArchiveAboveSize = 100'                      LineEnding = LineEndingMode.LF'                      Layout = "${message}"'                      MaxArchiveFiles = maxArchiveFiles'                      Encoding = Encoding.ASCII'                  };
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_SameDirectory_MaxArchiveFiles_One,The following statement contains a magic number: var times = 25;
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,Generate100BytesLog,The following statement contains a magic number: logger.Debug(new string(c' 3));
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,Generate100BytesLog,The following statement contains a magic number: i < 25
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,FileTarget_WithDateAndSequenceArchiveNumbering_ShouldRespectArchiveDateFormat,The following statement contains a magic number: GenerateArchives(count: 2' archiveDateFormat: archiveDateFormat' archiveFileName: archiveFileName'                  archiveNumbering: ArchiveNumberingMode.DateAndSequence);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DatedArchiveForFileTargetWithMultipleFiles,The following statement contains a magic number: timeSource.Time.Minute == 59
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DatedArchiveForFileTargetWithMultipleFiles,The following statement contains a magic number: timeSource.AddToLocalTime(TimeSpan.FromDays(5));
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DatedArchiveForFileTargetWithMultipleFiles,The following statement contains a magic number: Assert.Equal(4' currentFiles.Length);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,MaxArchiveFilesWithDate,The following statement contains a magic number: TestMaxArchiveFilesWithDate(archivePath' logdir' 2' 2' "yyyyMMdd-HHmm"' changeCreationAndWriteTime);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,MaxArchiveFilesWithDate,The following statement contains a magic number: TestMaxArchiveFilesWithDate(archivePath' logdir' 2' 2' "yyyyMMdd-HHmm"' changeCreationAndWriteTime);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,MaxArchiveFilesWithDate_only_date,The following statement contains a magic number: TestMaxArchiveFilesWithDate(archivePath' logdir' 2' 2' "yyyyMMdd"' changeCreationAndWriteTime);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,MaxArchiveFilesWithDate_only_date,The following statement contains a magic number: TestMaxArchiveFilesWithDate(archivePath' logdir' 2' 2' "yyyyMMdd"' changeCreationAndWriteTime);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,MaxArchiveFilesWithDate_only_date2,The following statement contains a magic number: TestMaxArchiveFilesWithDate(archivePath' logdir' 2' 2' "yyyy-MM-dd"' changeCreationAndWriteTime);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,MaxArchiveFilesWithDate_only_date2,The following statement contains a magic number: TestMaxArchiveFilesWithDate(archivePath' logdir' 2' 2' "yyyy-MM-dd"' changeCreationAndWriteTime);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,MaxArchiveFilesWithDate_in_sameDir,The following statement contains a magic number: TestMaxArchiveFilesWithDate(archivePath' logdir' 2' 2' "yyyyMMdd-HHmm"' changeCreationAndWriteTime);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,MaxArchiveFilesWithDate_in_sameDir,The following statement contains a magic number: TestMaxArchiveFilesWithDate(archivePath' logdir' 2' 2' "yyyyMMdd-HHmm"' changeCreationAndWriteTime);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,TestMaxArchiveFilesWithDate,The following statement contains a magic number: ArchiveFileNamesGenerator(archivePath' dateFormat' fileExt).Take(30)
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,HandleArchiveFilesMultipleContextMultipleTargetTest,The following statement contains a magic number: HandleArchiveFilesMultipleContextMultipleTargetsTest(archivePath' logdir' 2' 2' "yyyyMMdd-HHmm"' changeCreationAndWriteTime);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,HandleArchiveFilesMultipleContextMultipleTargetTest,The following statement contains a magic number: HandleArchiveFilesMultipleContextMultipleTargetsTest(archivePath' logdir' 2' 2' "yyyyMMdd-HHmm"' changeCreationAndWriteTime);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,HandleArchiveFilesMultipleContextSingleTargetTest_ascii,The following statement contains a magic number: HandleArchiveFilesMultipleContextSingleTargetsTest(archivePath' logdir' 2' 2' "yyyyMMdd-HHmm"' changeCreationAndWriteTime);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,HandleArchiveFilesMultipleContextSingleTargetTest_ascii,The following statement contains a magic number: HandleArchiveFilesMultipleContextSingleTargetsTest(archivePath' logdir' 2' 2' "yyyyMMdd-HHmm"' changeCreationAndWriteTime);
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,HandleArchiveFilesMultipleContextMultipleTargetsTest,The following statement contains a magic number: var numberFilesCreatedPerTargetArchive = 30;
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,HandleArchiveFilesMultipleContextSingleTargetsTest,The following statement contains a magic number: var numberFilesCreatedPerTargetArchive = 30;
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,RelativeSequentialArchiveTest_MaxArchiveFiles_0,The following statement contains a magic number: var fileTarget = WrapFileTarget(new FileTarget                  {                      FileName = logfile'                      ArchiveFileName = Path.Combine(archiveFolder' "{####}.txt")'                      ArchiveAboveSize = 100'                      LineEnding = LineEndingMode.LF'                      ArchiveNumbering = ArchiveNumberingMode.Sequence'                      Layout = "${message}"'                      MaxArchiveFiles = 0                  });
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,RelativeSequentialArchiveTest_MaxArchiveFiles_0,The following statement contains a magic number: var times = 25;
Magic Number,NLog.UnitTests.Targets,FileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,TestFilenameCleanup,The following statement contains a magic number: Assert.True(invalidFileName.Length >= 2);
Magic Number,NLog.UnitTests.Targets,PlainFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,BatchErrorHandlingTest,The following statement contains a magic number: Assert.Equal(4' exceptions.Count);
Magic Number,NLog.UnitTests.Targets,PlainFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,BatchErrorHandlingTest,The following statement contains a magic number: Assert.NotNull(exceptions[2]);
Magic Number,NLog.UnitTests.Targets,PlainFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,BatchErrorHandlingTest,The following statement contains a magic number: Assert.NotNull(exceptions[3]);
Magic Number,NLog.UnitTests.Targets,PlainFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,HandleArchiveFileAlreadyExistsTest,The following statement contains a magic number: var oldTime = DateTime.Now.AddDays(-2);
Magic Number,NLog.UnitTests.Targets,PlainFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DontCrashWhenDateAndSequenceDoesntMatchFiles,The following statement contains a magic number: var oldTime = DateTime.Now.AddDays(-2);
Magic Number,NLog.UnitTests.Targets,PlainFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DontCrashWhenDateAndSequenceDoesntMatchFiles,The following statement contains a magic number: var fileTarget = new FileTarget("file")                  {                      FileName = logFile'                      ArchiveEvery = FileArchivePeriod.Day'                      ArchiveFileName = "log-{#}.txt"'                      ArchiveNumbering = ArchiveNumberingMode.DateAndSequence'                      ArchiveAboveSize = 50000'                      MaxArchiveFiles = 7                  };
Magic Number,NLog.UnitTests.Targets,PlainFileTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\FileTargetTests.cs,DontCrashWhenDateAndSequenceDoesntMatchFiles,The following statement contains a magic number: var fileTarget = new FileTarget("file")                  {                      FileName = logFile'                      ArchiveEvery = FileArchivePeriod.Day'                      ArchiveFileName = "log-{#}.txt"'                      ArchiveNumbering = ArchiveNumberingMode.DateAndSequence'                      ArchiveAboveSize = 50000'                      MaxArchiveFiles = 7                  };
Magic Number,NLog.UnitTests.Targets,LogReceiverWebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\LogReceiverWebServiceTargetTests.cs,LogReceiverWebServiceTargetSingleEventTest,The following statement contains a magic number: Assert.Equal(2' payload.LayoutNames.Count);
Magic Number,NLog.UnitTests.Targets,LogReceiverWebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\LogReceiverWebServiceTargetTests.cs,LogReceiverWebServiceTargetSingleEventTest,The following statement contains a magic number: Assert.Equal(3' payload.Strings.Count);
Magic Number,NLog.UnitTests.Targets,LogReceiverWebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\LogReceiverWebServiceTargetTests.cs,LogReceiverWebServiceTargetMultipleEventTest,The following statement contains a magic number: Assert.Equal(2' payload.LayoutNames.Count);
Magic Number,NLog.UnitTests.Targets,LogReceiverWebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\LogReceiverWebServiceTargetTests.cs,LogReceiverWebServiceTargetMultipleEventTest,The following statement contains a magic number: Assert.Equal(7' payload.Strings.Count);
Magic Number,NLog.UnitTests.Targets,LogReceiverWebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\LogReceiverWebServiceTargetTests.cs,LogReceiverWebServiceTargetMultipleEventTest,The following statement contains a magic number: Assert.Equal(3' payload.Events.Length);
Magic Number,NLog.UnitTests.Targets,LogReceiverWebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\LogReceiverWebServiceTargetTests.cs,LogReceiverWebServiceTargetMultipleEventTest,The following statement contains a magic number: Assert.Equal("message2"' payload.Strings[payload.Events[2].ValueIndexes[0]]);
Magic Number,NLog.UnitTests.Targets,LogReceiverWebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\LogReceiverWebServiceTargetTests.cs,LogReceiverWebServiceTargetMultipleEventTest,The following statement contains a magic number: Assert.Equal("Fatal"' payload.Strings[payload.Events[2].ValueIndexes[1]]);
Magic Number,NLog.UnitTests.Targets,LogReceiverWebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\LogReceiverWebServiceTargetTests.cs,LogReceiverWebServiceTargetMultipleEventTest,The following statement contains a magic number: Assert.Equal("logger1"' payload.Strings[payload.Events[2].LoggerOrdinal]);
Magic Number,NLog.UnitTests.Targets,LogReceiverWebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\LogReceiverWebServiceTargetTests.cs,LogReceiverWebServiceTargetMultipleEventTest,The following statement contains a magic number: Assert.Equal(payload.Events[0].LoggerOrdinal' payload.Events[2].LoggerOrdinal);
Magic Number,NLog.UnitTests.Targets,LogReceiverWebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\LogReceiverWebServiceTargetTests.cs,LogReceiverWebServiceTargetMultipleEventWithPerEventPropertiesTest,The following statement contains a magic number: events[2].LogEvent.Properties["prop1"] = "value3";
Magic Number,NLog.UnitTests.Targets,LogReceiverWebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\LogReceiverWebServiceTargetTests.cs,LogReceiverWebServiceTargetMultipleEventWithPerEventPropertiesTest,The following statement contains a magic number: Assert.Equal(4' payload.LayoutNames.Count);
Magic Number,NLog.UnitTests.Targets,LogReceiverWebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\LogReceiverWebServiceTargetTests.cs,LogReceiverWebServiceTargetMultipleEventWithPerEventPropertiesTest,The following statement contains a magic number: Assert.Equal("prop1"' payload.LayoutNames[2]);
Magic Number,NLog.UnitTests.Targets,LogReceiverWebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\LogReceiverWebServiceTargetTests.cs,LogReceiverWebServiceTargetMultipleEventWithPerEventPropertiesTest,The following statement contains a magic number: Assert.Equal("prop2"' payload.LayoutNames[3]);
Magic Number,NLog.UnitTests.Targets,LogReceiverWebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\LogReceiverWebServiceTargetTests.cs,LogReceiverWebServiceTargetMultipleEventWithPerEventPropertiesTest,The following statement contains a magic number: Assert.Equal(12' payload.Strings.Count);
Magic Number,NLog.UnitTests.Targets,LogReceiverWebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\LogReceiverWebServiceTargetTests.cs,LogReceiverWebServiceTargetMultipleEventWithPerEventPropertiesTest,The following statement contains a magic number: Assert.Equal(3' payload.Events.Length);
Magic Number,NLog.UnitTests.Targets,LogReceiverWebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\LogReceiverWebServiceTargetTests.cs,LogReceiverWebServiceTargetMultipleEventWithPerEventPropertiesTest,The following statement contains a magic number: Assert.Equal("message2"' payload.Strings[payload.Events[2].ValueIndexes[0]]);
Magic Number,NLog.UnitTests.Targets,LogReceiverWebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\LogReceiverWebServiceTargetTests.cs,LogReceiverWebServiceTargetMultipleEventWithPerEventPropertiesTest,The following statement contains a magic number: Assert.Equal("Fatal"' payload.Strings[payload.Events[2].ValueIndexes[1]]);
Magic Number,NLog.UnitTests.Targets,LogReceiverWebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\LogReceiverWebServiceTargetTests.cs,LogReceiverWebServiceTargetMultipleEventWithPerEventPropertiesTest,The following statement contains a magic number: Assert.Equal("value1"' payload.Strings[payload.Events[0].ValueIndexes[2]]);
Magic Number,NLog.UnitTests.Targets,LogReceiverWebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\LogReceiverWebServiceTargetTests.cs,LogReceiverWebServiceTargetMultipleEventWithPerEventPropertiesTest,The following statement contains a magic number: Assert.Equal("value2"' payload.Strings[payload.Events[1].ValueIndexes[2]]);
Magic Number,NLog.UnitTests.Targets,LogReceiverWebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\LogReceiverWebServiceTargetTests.cs,LogReceiverWebServiceTargetMultipleEventWithPerEventPropertiesTest,The following statement contains a magic number: Assert.Equal("value3"' payload.Strings[payload.Events[2].ValueIndexes[2]]);
Magic Number,NLog.UnitTests.Targets,LogReceiverWebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\LogReceiverWebServiceTargetTests.cs,LogReceiverWebServiceTargetMultipleEventWithPerEventPropertiesTest,The following statement contains a magic number: Assert.Equal("value3"' payload.Strings[payload.Events[2].ValueIndexes[2]]);
Magic Number,NLog.UnitTests.Targets,LogReceiverWebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\LogReceiverWebServiceTargetTests.cs,LogReceiverWebServiceTargetMultipleEventWithPerEventPropertiesTest,The following statement contains a magic number: Assert.Equal("value2a"' payload.Strings[payload.Events[0].ValueIndexes[3]]);
Magic Number,NLog.UnitTests.Targets,LogReceiverWebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\LogReceiverWebServiceTargetTests.cs,LogReceiverWebServiceTargetMultipleEventWithPerEventPropertiesTest,The following statement contains a magic number: Assert.Equal(""' payload.Strings[payload.Events[1].ValueIndexes[3]]);
Magic Number,NLog.UnitTests.Targets,LogReceiverWebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\LogReceiverWebServiceTargetTests.cs,LogReceiverWebServiceTargetMultipleEventWithPerEventPropertiesTest,The following statement contains a magic number: Assert.Equal(""' payload.Strings[payload.Events[2].ValueIndexes[3]]);
Magic Number,NLog.UnitTests.Targets,LogReceiverWebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\LogReceiverWebServiceTargetTests.cs,LogReceiverWebServiceTargetMultipleEventWithPerEventPropertiesTest,The following statement contains a magic number: Assert.Equal(""' payload.Strings[payload.Events[2].ValueIndexes[3]]);
Magic Number,NLog.UnitTests.Targets,LogReceiverWebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\LogReceiverWebServiceTargetTests.cs,LogReceiverWebServiceTargetMultipleEventWithPerEventPropertiesTest,The following statement contains a magic number: Assert.Equal("logger1"' payload.Strings[payload.Events[2].LoggerOrdinal]);
Magic Number,NLog.UnitTests.Targets,LogReceiverWebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\LogReceiverWebServiceTargetTests.cs,LogReceiverWebServiceTargetMultipleEventWithPerEventPropertiesTest,The following statement contains a magic number: Assert.Equal(payload.Events[0].LoggerOrdinal' payload.Events[2].LoggerOrdinal);
Magic Number,NLog.UnitTests.Targets,LogReceiverWebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\LogReceiverWebServiceTargetTests.cs,NoEmptyEventLists,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,NLog.UnitTests.Targets,MailTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MailTargetTests.cs,SimpleEmailTest,The following statement contains a magic number: var mmt = new MockMailTarget              {                  From = "foo@bar.com"'                  To = "bar@foo.com"'                  CC = "me@myserver.com;you@yourserver.com"'                  Bcc = "foo@myserver.com;bar@yourserver.com"'                  Subject = "Hello from NLog"'                  SmtpServer = "server1"'                  SmtpPort = 27'                  Body = "${level} ${logger} ${message}"              };
Magic Number,NLog.UnitTests.Targets,MailTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MailTargetTests.cs,SimpleEmailTest,The following statement contains a magic number: Assert.Equal(27' mock.Port);
Magic Number,NLog.UnitTests.Targets,MailTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MailTargetTests.cs,SimpleEmailTest,The following statement contains a magic number: Assert.Equal(2' msg.CC.Count);
Magic Number,NLog.UnitTests.Targets,MailTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MailTargetTests.cs,SimpleEmailTest,The following statement contains a magic number: Assert.Equal(2' msg.Bcc.Count);
Magic Number,NLog.UnitTests.Targets,MailTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MailTargetTests.cs,MailTarget_WithNewlineInSubject_SendsMail,The following statement contains a magic number: var mmt = new MockMailTarget              {                  From = "foo@bar.com"'                  To = "bar@foo.com"'                  CC = "me@myserver.com;you@yourserver.com"'                  Bcc = "foo@myserver.com;bar@yourserver.com"'                  Subject = "Hello from NLog\n"'                  SmtpServer = "server1"'                  SmtpPort = 27'                  Body = "${level} ${logger} ${message}"              };
Magic Number,NLog.UnitTests.Targets,MailTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MailTargetTests.cs,PerMessageServer,The following statement contains a magic number: Assert.Equal(2' mmt.CreatedMocks.Count);
Magic Number,NLog.UnitTests.Targets,MailTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MailTargetTests.cs,ErrorHandlingTest,The following statement contains a magic number: Assert.Equal(2' mmt.CreatedMocks.Count);
Magic Number,NLog.UnitTests.Targets,MailTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MailTargetTests.cs,PerMessageAddress,The following statement contains a magic number: Assert.Equal(2' mmt.CreatedMocks.Count);
Magic Number,NLog.UnitTests.Targets,MailTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MailTargetTests.cs,ReplaceNewlinesWithBreakInHtmlMail,The following statement contains a magic number: Assert.True(lines.Length == 3);
Magic Number,NLog.UnitTests.Targets,MailTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MailTargetTests.cs,NoReplaceNewlinesWithBreakInHtmlMail,The following statement contains a magic number: Assert.True(lines.Length == 3);
Magic Number,NLog.UnitTests.Targets,MailTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MailTargetTests.cs,MailTarget_WithValidToAndEmptyCC_SendsMail,The following statement contains a magic number: var mmt = new MockMailTarget              {                  From = "foo@bar.com"'                  To = "bar@foo.com"'                  CC = ""'                  Subject = "Hello from NLog"'                  SmtpServer = "server1"'                  SmtpPort = 27'                  Body = "${level} ${logger} ${message}"'              };
Magic Number,NLog.UnitTests.Targets,MailTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MailTargetTests.cs,MailTarget_WithValidToAndEmptyBcc_SendsMail,The following statement contains a magic number: var mmt = new MockMailTarget              {                  From = "foo@bar.com"'                  To = "bar@foo.com"'                  Bcc = ""'                  Subject = "Hello from NLog"'                  SmtpServer = "server1"'                  SmtpPort = 27'                  Body = "${level} ${logger} ${message}"'              };
Magic Number,NLog.UnitTests.Targets,MailTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MailTargetTests.cs,MailTarget_WithEmptyTo_ThrowsNLogRuntimeException,The following statement contains a magic number: var mmt = new MockMailTarget              {                  From = "foo@bar.com"'                  To = ""'                  Subject = "Hello from NLog"'                  SmtpServer = "server1"'                  SmtpPort = 27'                  Body = "${level} ${logger} ${message}"'              };
Magic Number,NLog.UnitTests.Targets,MailTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MailTargetTests.cs,MailTarget_WithEmptyFrom_ThrowsNLogRuntimeException,The following statement contains a magic number: var mmt = new MockMailTarget              {                  From = ""'                  To = "foo@bar.com"'                  Subject = "Hello from NLog"'                  SmtpServer = "server1"'                  SmtpPort = 27'                  Body = "${level} ${logger} ${message}"              };
Magic Number,NLog.UnitTests.Targets,MailTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MailTargetTests.cs,MailTarget_WithEmptySmtpServer_ThrowsNLogRuntimeException,The following statement contains a magic number: var mmt = new MockMailTarget              {                  From = "bar@bar.com"'                  To = "foo@bar.com"'                  Subject = "Hello from NLog"'                  SmtpServer = ""'                  SmtpPort = 27'                  Body = "${level} ${logger} ${message}"              };
Magic Number,NLog.UnitTests.Targets,MailTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MailTargetTests.cs,MailTargetInitialize_WithoutSpecifiedTo_ThrowsConfigException,The following statement contains a magic number: var mmt = new MockMailTarget              {                  From = "foo@bar.com"'                  Subject = "Hello from NLog"'                  SmtpServer = "server1"'                  SmtpPort = 27'                  Body = "${level} ${logger} ${message}"              };
Magic Number,NLog.UnitTests.Targets,MailTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MailTargetTests.cs,MailTargetInitialize_WithoutSpecifiedFrom_ThrowsConfigException,The following statement contains a magic number: var mmt = new MockMailTarget              {                  To = "foo@bar.com"'                  Subject = "Hello from NLog"'                  SmtpServer = "server1"'                  SmtpPort = 27'                  Body = "${level} ${logger} ${message}"'                  UseSystemNetMailSettings = false              };
Magic Number,NLog.UnitTests.Targets,MailTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MailTargetTests.cs,MailTargetInitialize_WithoutSpecifiedSmtpServer_should_not_ThrowsConfigException,The following statement contains a magic number: var mmt = new MockMailTarget              {                  From = "foo@bar.com"'                  To = "bar@bar.com"'                  Subject = "Hello from NLog"'                  SmtpPort = 27'                  Body = "${level} ${logger} ${message}"'                  UseSystemNetMailSettings = true              };
Magic Number,NLog.UnitTests.Targets,MailTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MailTargetTests.cs,MailTargetInitialize_WithoutSpecifiedSmtpServer_ThrowsConfigException_if_UseSystemNetMailSettings,The following statement contains a magic number: var mmt = new MockMailTarget              {                  From = "foo@bar.com"'                  To = "bar@bar.com"'                  Subject = "Hello from NLog"'                  SmtpPort = 27'                  Body = "${level} ${logger} ${message}"'                  UseSystemNetMailSettings = false              };
Magic Number,NLog.UnitTests.Targets,MailTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MailTargetTests.cs,MailTarget_UseSystemNetMailSettings_False_Override_ThrowsNLogRuntimeException_if_DeliveryMethodNotSpecified,The following statement contains a magic number: var mmt = new MockMailTarget(inConfigVal)              {                  From = "foo@bar.com"'                  To = "bar@bar.com"'                  Subject = "Hello from NLog"'                  SmtpPort = 27'                  Body = "${level} ${logger} ${message}"'                  PickupDirectoryLocation = @"C:\TEMP"'                  UseSystemNetMailSettings = false              };
Magic Number,NLog.UnitTests.Targets,MailTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MailTargetTests.cs,MailTarget_UseSystemNetMailSettings_False_Override_DeliveryMethod_SpecifiedDeliveryMethod,The following statement contains a magic number: var mmt = new MockMailTarget(inConfigVal)              {                  From = "foo@bar.com"'                  To = "bar@bar.com"'                  Subject = "Hello from NLog"'                  SmtpPort = 27'                  Body = "${level} ${logger} ${message}"'                  PickupDirectoryLocation = @"C:\TEMP"'                  UseSystemNetMailSettings = false'                  DeliveryMethod = SmtpDeliveryMethod.SpecifiedPickupDirectory              };
Magic Number,NLog.UnitTests.Targets,MailTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MailTargetTests.cs,MailTarget_UseSystemNetMailSettings_True_ReadFromFromConfigFile_dontoverride,The following statement contains a magic number: var mmt = new MailTarget()              {                  From = "nlog@foo.com"'                  To = "bar@bar.com"'                  SmtpServer = "server1"'                  SmtpPort = 27'                  Body = "${level} ${logger} ${message}"'                  UseSystemNetMailSettings = true'  #if !NETSTANDARD                  SmtpSection = new SmtpSection { From = "config@foo.com" }  #endif              };
Magic Number,NLog.UnitTests.Targets,MailTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MailTargetTests.cs,MailTarget_UseSystemNetMailSettings_True_ReadFromFromConfigFile,The following statement contains a magic number: var mmt = new MailTarget()              {                  From = null'                  To = "bar@bar.com"'                  SmtpServer = "server1"'                  SmtpPort = 27'                  Body = "${level} ${logger} ${message}"'                  UseSystemNetMailSettings = true'                  SmtpSection = new SmtpSection { From = "config@foo.com" }              };
Magic Number,NLog.UnitTests.Targets,MailTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MailTargetTests.cs,MailTarget_UseSystemNetMailSettings_False_ReadFromFromConfigFile,The following statement contains a magic number: var mmt = new MailTarget()              {                  From = null'                  To = "bar@bar.com"'                  SmtpServer = "server1"'                  SmtpPort = 27'                  Body = "${level} ${logger} ${message}"'                  UseSystemNetMailSettings = false'                  SmtpSection = new SmtpSection { From = "config@foo.com" }              };
Magic Number,NLog.UnitTests.Targets,MailTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MailTargetTests.cs,MailTarget_WithoutSubject_SendsMessageWithDefaultSubject,The following statement contains a magic number: var mmt = new MockMailTarget              {                  From = "foo@bar.com"'                  To = "bar@bar.com"'                  SmtpServer = "server1"'                  SmtpPort = 27'                  Body = "${level} ${logger} ${message}"              };
Magic Number,NLog.UnitTests.Targets,MemoryTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MemoryTargetTests.cs,MemoryTarget_LogLevelTest,The following statement contains a magic number: Assert.True(memoryTarget.Logs.Count() == 6);
Magic Number,NLog.UnitTests.Targets,MemoryTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MemoryTargetTests.cs,MemoryTarget_LogLevelTest,The following statement contains a magic number: Assert.True(memoryTarget.Logs[2] == "Info III");
Magic Number,NLog.UnitTests.Targets,MemoryTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MemoryTargetTests.cs,MemoryTarget_LogLevelTest,The following statement contains a magic number: Assert.True(memoryTarget.Logs[3] == "Warn WWW");
Magic Number,NLog.UnitTests.Targets,MemoryTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MemoryTargetTests.cs,MemoryTarget_LogLevelTest,The following statement contains a magic number: Assert.True(memoryTarget.Logs[4] == "Error EEE");
Magic Number,NLog.UnitTests.Targets,MemoryTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MemoryTargetTests.cs,MemoryTarget_LogLevelTest,The following statement contains a magic number: Assert.True(memoryTarget.Logs[5] == "Fatal FFF");
Magic Number,NLog.UnitTests.Targets,MemoryTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MemoryTargetTests.cs,MemoryTarget_ReconfigureTest_SameTarget_ExpectLogsEmptied,The following statement contains a magic number: Assert.True(memoryTarget.Logs.Count() == 3);
Magic Number,NLog.UnitTests.Targets,MemoryTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MemoryTargetTests.cs,MemoryTarget_ReconfigureTest_SameTarget_ExpectLogsEmptied,The following statement contains a magic number: Assert.True(memoryTarget.Logs[2] == "Warn WWW");
Magic Number,NLog.UnitTests.Targets,MemoryTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MemoryTargetTests.cs,MemoryTarget_ReconfigureTest_SameTarget_ExpectLogsEmptied,The following statement contains a magic number: Assert.True(memoryTarget.Logs.Count() == 3);
Magic Number,NLog.UnitTests.Targets,MemoryTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MemoryTargetTests.cs,MemoryTarget_ReconfigureTest_SameTarget_ExpectLogsEmptied,The following statement contains a magic number: Assert.True(memoryTarget.Logs[2] == "Fatal FFF");
Magic Number,NLog.UnitTests.Targets,MemoryTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MemoryTargetTests.cs,MemoryTarget_ClearLogsTest,The following statement contains a magic number: Assert.True(memoryTarget.Logs.Count() == 3);
Magic Number,NLog.UnitTests.Targets,MemoryTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MemoryTargetTests.cs,MemoryTarget_ClearLogsTest,The following statement contains a magic number: Assert.True(memoryTarget.Logs[2] == "Info III");
Magic Number,NLog.UnitTests.Targets,MemoryTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MemoryTargetTests.cs,MemoryTarget_NullMessageTest,The following statement contains a magic number: Assert.True(memoryTarget.Logs.Count() == 5);
Magic Number,NLog.UnitTests.Targets,MemoryTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MemoryTargetTests.cs,MemoryTarget_NullMessageTest,The following statement contains a magic number: Assert.True(memoryTarget.Logs[2] == "Info III");
Magic Number,NLog.UnitTests.Targets,MemoryTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MemoryTargetTests.cs,MemoryTarget_NullMessageTest,The following statement contains a magic number: Assert.True(memoryTarget.Logs[3] == "Warn ");
Magic Number,NLog.UnitTests.Targets,MemoryTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MemoryTargetTests.cs,MemoryTarget_NullMessageTest,The following statement contains a magic number: Assert.True(memoryTarget.Logs[4] == "Error EEE");
Magic Number,NLog.UnitTests.Targets,MemoryTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MemoryTargetTests.cs,MemoryTarget_EmptyMessageTest,The following statement contains a magic number: Assert.True(memoryTarget.Logs.Count() == 5);
Magic Number,NLog.UnitTests.Targets,MemoryTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MemoryTargetTests.cs,MemoryTarget_EmptyMessageTest,The following statement contains a magic number: Assert.True(memoryTarget.Logs[2] == "Info III");
Magic Number,NLog.UnitTests.Targets,MemoryTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MemoryTargetTests.cs,MemoryTarget_EmptyMessageTest,The following statement contains a magic number: Assert.True(memoryTarget.Logs[3] == "Warn ");
Magic Number,NLog.UnitTests.Targets,MemoryTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MemoryTargetTests.cs,MemoryTarget_EmptyMessageTest,The following statement contains a magic number: Assert.True(memoryTarget.Logs[4] == "Error EEE");
Magic Number,NLog.UnitTests.Targets,MethodCallTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MethodCallTests.cs,TestMethodCall1,The following statement contains a magic number: TestMethodCall(new MethodCallRecord("StaticAndPublic"' "test1"' 2)' "StaticAndPublic"' CorrectClassName);
Magic Number,NLog.UnitTests.Targets,MethodCallTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MethodCallTests.cs,TestMethodCall2,The following statement contains a magic number: TestMethodCall(new MethodCallRecord("StaticAndPublic"' "test1"' 2)' "StaticAndPublic"' "NLog.UnitTests.Targets.MethodCallTests' NLog.UnitTests' Version=1.0.0.0' Culture=neutral' PublicKeyToken=b793d3de60bec2b9");
Magic Number,NLog.UnitTests.Targets,MethodCallTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MethodCallTests.cs,OptionalParameters,The following statement contains a magic number: TestMethodCall(new MethodCallRecord("StaticAndPublicOptional"' "test1"' 2' "fixedValue")' "StaticAndPublicOptional"' CorrectClassName);
Magic Number,NLog.UnitTests.Targets,MethodCallRecord,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\MethodCallTests.cs,GetHashCode,The following statement contains a magic number: return ((Method != null ? Method.GetHashCode() : 0) * 397) ^ (ParameterValues != null ? ParameterValues.GetHashCode() : 0);
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,HappyPathTest,The following statement contains a magic number: int remaining = 3;
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetDefaultsTest,The following statement contains a magic number: Assert.Equal(65000' target.MaxMessageSize);
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetDefaultsTest,The following statement contains a magic number: Assert.Equal(5' target.ConnectionCacheSize);
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetMultipleConnectionsTest,The following statement contains a magic number: int remaining = 3;
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetMultipleConnectionsWithCacheOverflowTest,The following statement contains a magic number: target.ConnectionCacheSize = 2;
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetMultipleConnectionsWithCacheOverflowTest,The following statement contains a magic number: int remaining = 6;
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetMultipleConnectionsWithoutKeepAliveTest,The following statement contains a magic number: int remaining = 6;
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetMultipleConnectionsWithMessageSplitTest,The following statement contains a magic number: target.MaxMessageSize = 9;
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetMultipleConnectionsWithMessageSplitTest,The following statement contains a magic number: int remaining = 3;
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetMultipleConnectionsWithMessageDiscardTest,The following statement contains a magic number: target.MaxMessageSize = 10;
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetMultipleConnectionsWithMessageDiscardTest,The following statement contains a magic number: int remaining = 3;
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetMultipleConnectionsWithMessageErrorTest,The following statement contains a magic number: target.MaxMessageSize = 10;
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetMultipleConnectionsWithMessageErrorTest,The following statement contains a magic number: int remaining = 3;
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetMultipleConnectionsWithMessageErrorTest,The following statement contains a magic number: Assert.Null(exceptions[2]);
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetSendFailureTests,The following statement contains a magic number: var senderFactory = new MySenderFactory()              {                  FailCounter = 3' // first 3 sends will fail              };
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetSendFailureTests,The following statement contains a magic number: int remaining = 5;
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetSendFailureTests,The following statement contains a magic number: Assert.NotNull(exceptions[2]);
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetSendFailureTests,The following statement contains a magic number: Assert.Null(exceptions[3]);
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetSendFailureTests,The following statement contains a magic number: Assert.Null(exceptions[4]);
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetTcpTest,The following statement contains a magic number: listener.Bind(new IPEndPoint(IPAddress.Loopback' 3004));
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetTcpTest,The following statement contains a magic number: listener.Listen(10);
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetTcpTest,The following statement contains a magic number: listener.BeginAccept(                      result =>                      {                          try                          {                              byte[] buffer = new byte[4096];                              using (Socket connectedSocket = listener.EndAccept(result))                              {                                  int got;                                  while ((got = connectedSocket.Receive(buffer' 0' buffer.Length' SocketFlags.None)) > 0)                                  {                                      resultStream.Write(buffer' 0' got);                                  }                              }                          }                          catch (Exception ex)                          {                              Console.WriteLine("Receive exception {0}"' ex);                              receiveException = ex;                          }                          finally                          {                              receiveFinished.Set();                          }                      }' null);
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetTcpTest,The following statement contains a magic number: int pendingWrites = 100;
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetTcpTest,The following statement contains a magic number: Assert.True(writeCompleted.WaitOne(10000' false)' "Writes did not complete");
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetTcpTest,The following statement contains a magic number: Assert.True(receiveFinished.WaitOne(10000' false)' "Receive did not complete");
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetUdpTest,The following statement contains a magic number: byte[] receiveBuffer = new byte[4096];
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetUdpTest,The following statement contains a magic number: listener.Bind(new IPEndPoint(IPAddress.Loopback' 3002));
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetUdpTest,The following statement contains a magic number: receivedDatagram = result =>                      {                          try                          {                              int got = listener.EndReceiveFrom(result' ref remoteEndPoint);                              string message = Encoding.UTF8.GetString(receiveBuffer' 0' got);                              lock (receivedMessages)                              {                                  receivedMessages.Add(message);                                  if (receivedMessages.Count == 100)                                  {                                      receiveFinished.Set();                                  }                              }                                remoteEndPoint = new IPEndPoint(IPAddress.Any' 0);                              listener.BeginReceiveFrom(receiveBuffer' 0' receiveBuffer.Length' SocketFlags.None' ref remoteEndPoint' receivedDatagram' null);                          }                          catch (Exception ex)                          {                              receiveException = ex;                          }                      };
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetUdpTest,The following statement contains a magic number: int pendingWrites = 100;
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetUdpTest,The following statement contains a magic number: Assert.True(writeCompleted.WaitOne(10000' false));
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetUdpTest,The following statement contains a magic number: Assert.True(receiveFinished.WaitOne(10000' false));
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetNotConnectedTest,The following statement contains a magic number: int toWrite = 10;
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetSendFailureWithoutKeepAliveTests,The following statement contains a magic number: var senderFactory = new MySenderFactory()              {                  FailCounter = 3' // first 3 sends will fail              };
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetSendFailureWithoutKeepAliveTests,The following statement contains a magic number: int remaining = 5;
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetSendFailureWithoutKeepAliveTests,The following statement contains a magic number: Assert.NotNull(exceptions[2]);
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetSendFailureWithoutKeepAliveTests,The following statement contains a magic number: Assert.Null(exceptions[3]);
Magic Number,NLog.UnitTests.Targets,NetworkTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\NetworkTargetTests.cs,NetworkTargetSendFailureWithoutKeepAliveTests,The following statement contains a magic number: Assert.Null(exceptions[4]);
Magic Number,NLog.UnitTests.Targets,TargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\TargetTests.cs,DoubleCloseTest,The following statement contains a magic number: Assert.Equal(2' target.InitializeCount + target.FlushCount + target.CloseCount + target.WriteCount + target.WriteCount2 + target.WriteCount3);
Magic Number,NLog.UnitTests.Targets,TargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\TargetTests.cs,WriteWithoutInitializeTest,The following statement contains a magic number: Assert.Equal(4' exceptions.Count);
Magic Number,NLog.UnitTests.Targets,TargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\TargetTests.cs,WriteOnClosedTargetTest,The following statement contains a magic number: Assert.Equal(2' target.InitializeCount + target.FlushCount + target.CloseCount + target.WriteCount + target.WriteCount2 + target.WriteCount3);
Magic Number,NLog.UnitTests.Targets,TargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\TargetTests.cs,WriteOnClosedTargetTest,The following statement contains a magic number: Assert.Equal(4' exceptions.Count);
Magic Number,NLog.UnitTests.Targets,TargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\TargetTests.cs,FlushTest,The following statement contains a magic number: Assert.Equal(2' target.InitializeCount + target.FlushCount + target.CloseCount + target.WriteCount + target.WriteCount2 + target.WriteCount3);
Magic Number,NLog.UnitTests.Targets,TargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\TargetTests.cs,FlushOnClosedTargetTest,The following statement contains a magic number: Assert.Equal(2' target.InitializeCount + target.FlushCount + target.CloseCount + target.WriteCount + target.WriteCount2 + target.WriteCount3);
Magic Number,NLog.UnitTests.Targets,TargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\TargetTests.cs,LockingTest,The following statement contains a magic number: Thread t = new Thread(() =>              {                  try                  {                      target.BlockingOperation(500);                  }                  catch (Exception ex)                  {                      backgroundThreadException = ex;                  }                  finally                  {                      mre.Set();                  }              });
Magic Number,NLog.UnitTests.Targets,TargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\TargetTests.cs,LockingTest,The following statement contains a magic number: Thread.Sleep(50);
Magic Number,NLog.UnitTests.Targets,AsyncRequestQueueEq,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\TargetTests.cs,GetHashCode,The following statement contains a magic number: return (obj.RequestLimit * 397) ^ (int)obj.OnOverflow;
Magic Number,NLog.UnitTests.Targets,TargetWithContextTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\TargetWithContextTest.cs,TargetWithContextAsyncTest,The following statement contains a magic number: Assert.Equal(7' target.LastCombinedProperties.Count);
Magic Number,NLog.UnitTests.Targets,TargetWithContextTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\TargetWithContextTest.cs,WaitForLastMessage,The following statement contains a magic number: i < 1000
Magic Number,NLog.UnitTests.Targets,TargetWithContextTest,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\TargetWithContextTest.cs,TargetWithContextJsonTest,The following statement contains a magic number: i < 1000
Magic Number,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,Stream_CopyWithOffset_test,The following statement contains a magic number: textStream.CopyWithOffset(resultStream' 3);
Magic Number,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,Stream_CopyWithOffset_test,The following statement contains a magic number: var expected = textBytes.Skip(3).ToArray();
Magic Number,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,WebserviceTest_httppost_utf8,The following statement contains a magic number: Assert.Equal(6' target.Parameters.Count);
Magic Number,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,WebserviceTest_httppost_utf8,The following statement contains a magic number: counterEvent.WaitOne(10000);
Magic Number,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,WebserviceTest_httppost_utf8,The following statement contains a magic number: Assert.True(bytes.Length > 3);
Magic Number,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,WebserviceTest_httppost_utf8,The following statement contains a magic number: var possbleBomBytes = bytes.Take(3).ToArray();
Magic Number,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,WebserviceTest_httppost_utf8,The following statement contains a magic number: Assert.Equal(bytes.Length' includeBom ? 126 : 123);
Magic Number,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,WebserviceTest_httppost_utf8,The following statement contains a magic number: Assert.Equal(bytes.Length' includeBom ? 126 : 123);
Magic Number,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,StreamToBytes,The following statement contains a magic number: byte[] buffer = new byte[16 * 1024];
Magic Number,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,StreamToBytes,The following statement contains a magic number: byte[] buffer = new byte[16 * 1024];
Magic Number,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,getWsAddress,The following statement contains a magic number: return WsAddress.Substring(0' WsAddress.Length - 5) + (9000 + portOffset).ToString() + "/";
Magic Number,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,getWsAddress,The following statement contains a magic number: return WsAddress.Substring(0' WsAddress.Length - 5) + (9000 + portOffset).ToString() + "/";
Magic Number,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,WebserviceTest_restapi_httppost,The following statement contains a magic number: LogMeController.ResetState(2);
Magic Number,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,WebserviceTest_restapi_httppost,The following statement contains a magic number: Assert.Equal(2' LogMeController.ReceivedLogsPostParam1.Count);
Magic Number,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,WebserviceTest_restapi_httpget,The following statement contains a magic number: LogMeController.ResetState(2);
Magic Number,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,WebserviceTest_restapi_httpget,The following statement contains a magic number: Assert.Equal(2' LogMeController.ReceivedLogsGetParam1.Count);
Magic Number,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,WebserviceTest_restapi_httpget_flush,The following statement contains a magic number: StartOwinTest(() =>              {                  for (int i = 0; i < 100; ++i)                      logger.Info(message1);                    // Make triple-flush to fully exercise the async flushing logic                  try                  {                      LogManager.Flush(0);                  }                  catch (NLogRuntimeException)                  { }                  LogManager.Flush(); // Waits for flush (Scheduled on top of the previous flush)                  LogManager.Flush(); // Nothing to flush              });
Magic Number,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,WebserviceTest_restapi_httpget_flush,The following statement contains a magic number: Assert.Equal(100' LogMeController.ReceivedLogsGetParam1.Count);
Magic Number,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,WebserviceTest_restapi_httppost_checkingLost,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                    const int messageCount = 1000;                  var createdMessages = new List<string>(messageCount);                    for (int i = 0; i < messageCount; i++)                  {                      var message = "message " + i;                      createdMessages.Add(message);                    }                    //reset                  LogMeController.ResetState(messageCount);                    StartOwinTest(() =>                  {                      foreach (var createdMessage in createdMessages)                      {                          logger.Info(createdMessage);                      }                  });                    Assert.Equal(0' LogMeController.CountdownEvent.CurrentCount);                  Assert.Equal(createdMessages.Count' LogMeController.ReceivedLogsPostParam1.Count);                  //Assert.Equal(createdMessages' ValuesController.ReceivedLogsPostParam1);              });
Magic Number,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,WebserviceTest_restapi_httppost_checkingLost,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                    const int messageCount = 1000;                  var createdMessages = new List<string>(messageCount);                    for (int i = 0; i < messageCount; i++)                  {                      var message = "message " + i;                      createdMessages.Add(message);                    }                    //reset                  LogMeController.ResetState(messageCount);                    StartOwinTest(() =>                  {                      foreach (var createdMessage in createdMessages)                      {                          logger.Info(createdMessage);                      }                  });                    Assert.Equal(0' LogMeController.CountdownEvent.CurrentCount);                  Assert.Equal(createdMessages.Count' LogMeController.ReceivedLogsPostParam1.Count);                  //Assert.Equal(createdMessages' ValuesController.ReceivedLogsPostParam1);              });
Magic Number,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,WebserviceTest_restapi_json,The following statement contains a magic number: var count = 101;
Magic Number,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,WebserviceTest_restapi_xml,The following statement contains a magic number: var count = 101;
Magic Number,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,StartOwinTest,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,NLog.UnitTests.Targets,WebServiceTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\WebServiceTargetTests.cs,StartOwinDocTest,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueWithDiscardBehaviorTest,The following statement contains a magic number: var queue = new AsyncRequestQueue(3' AsyncTargetWrapperOverflowAction.Discard);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueWithDiscardBehaviorTest,The following statement contains a magic number: Assert.Equal(3' queue.RequestLimit);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueWithDiscardBehaviorTest,The following statement contains a magic number: Assert.Equal(2' queue.RequestCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueWithDiscardBehaviorTest,The following statement contains a magic number: Assert.Equal(3' queue.RequestCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueWithDiscardBehaviorTest,The following statement contains a magic number: Assert.Equal(3' queue.RequestCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueWithDiscardBehaviorTest,The following statement contains a magic number: AsyncLogEventInfo[] logEventInfos = queue.DequeueBatch(10);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueWithDiscardBehaviorTest,The following statement contains a magic number: Assert.Same(logEventInfos[2].LogEvent' ev4.LogEvent);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueWithDiscardBehaviorTest,The following statement contains a magic number: Assert.Same(logEventInfos[2].Continuation' ev4.Continuation);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueWithGrowBehaviorTest,The following statement contains a magic number: var queue = new AsyncRequestQueue(3' AsyncTargetWrapperOverflowAction.Grow);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueWithGrowBehaviorTest,The following statement contains a magic number: Assert.Equal(3' queue.RequestLimit);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueWithGrowBehaviorTest,The following statement contains a magic number: Assert.Equal(2' queue.RequestCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueWithGrowBehaviorTest,The following statement contains a magic number: Assert.Equal(3' queue.RequestCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueWithGrowBehaviorTest,The following statement contains a magic number: Assert.Equal(4' queue.RequestCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueWithGrowBehaviorTest,The following statement contains a magic number: AsyncLogEventInfo[] logEventInfos = queue.DequeueBatch(10);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueWithGrowBehaviorTest,The following statement contains a magic number: Assert.Equal(4' result);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueWithGrowBehaviorTest,The following statement contains a magic number: Assert.Same(logEventInfos[2].LogEvent' ev3.LogEvent);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueWithGrowBehaviorTest,The following statement contains a magic number: Assert.Same(logEventInfos[3].LogEvent' ev4.LogEvent);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueWithGrowBehaviorTest,The following statement contains a magic number: Assert.Same(logEventInfos[2].Continuation' ev3.Continuation);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueWithGrowBehaviorTest,The following statement contains a magic number: Assert.Same(logEventInfos[3].Continuation' ev4.Continuation);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueWithBlockBehavior,The following statement contains a magic number: var queue = new AsyncRequestQueue(10' AsyncTargetWrapperOverflowAction.Block);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueWithBlockBehavior,The following statement contains a magic number: ThreadPool.QueueUserWorkItem(                  s =>                  {                      // producer thread                      for (int i = 0; i < 1000; ++i)                      {                          AsyncLogEventInfo logEvent = LogEventInfo.CreateNullEvent().WithContinuation(ex => { });                          logEvent.LogEvent.Message = "msg" + i;                                                    // Console.WriteLine("Pushing event {0}"' i);                          pushingEvent = i;                          queue.Enqueue(logEvent);                      }                        producerFinished.Set();                  });
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueWithBlockBehavior,The following statement contains a magic number: int left = 500 - total;
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueWithBlockBehavior,The following statement contains a magic number: total < 500
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueWithBlockBehavior,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueWithBlockBehavior,The following statement contains a magic number: Assert.Equal(510' pushingEvent);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueWithBlockBehavior,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueWithBlockBehavior,The following statement contains a magic number: Assert.Equal(511' pushingEvent);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueWithBlockBehavior,The following statement contains a magic number: int left = 1000 - total;
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueWithBlockBehavior,The following statement contains a magic number: total < 1000
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueClearTest,The following statement contains a magic number: var queue = new AsyncRequestQueue(3' AsyncTargetWrapperOverflowAction.Grow);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueClearTest,The following statement contains a magic number: Assert.Equal(3' queue.RequestLimit);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueClearTest,The following statement contains a magic number: Assert.Equal(2' queue.RequestCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueClearTest,The following statement contains a magic number: Assert.Equal(3' queue.RequestCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueClearTest,The following statement contains a magic number: Assert.Equal(4' queue.RequestCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,AsyncRequestQueueClearTest,The following statement contains a magic number: logEventInfos = queue.DequeueBatch(10);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,RaiseEventLogEventQueueGrow_OnLogItems,The following statement contains a magic number: const int RequestsLimit = 2;
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,RaiseEventLogEventQueueGrow_OnLogItems,The following statement contains a magic number: const int EventsCount = 5;
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,RaiseEventLogEventQueueGrow_OnLogItems,The following statement contains a magic number: const int ExpectedCountOfGrovingTimes = 2;
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,RaiseEventLogEventQueueGrow_OnLogItems,The following statement contains a magic number: const int ExpectedFinalSize = 8;
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,RaiseEventLogEventDropped_OnLogItems,The following statement contains a magic number: const int RequestsLimit = 2;
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncRequestQueueTests.cs,RaiseEventLogEventDropped_OnLogItems,The following statement contains a magic number: const int EventsCount = 5;
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperInitTest,The following statement contains a magic number: var targetWrapper = new AsyncTargetWrapper(myTarget' 300' AsyncTargetWrapperOverflowAction.Grow);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperInitTest,The following statement contains a magic number: Assert.Equal(300' targetWrapper.QueueLimit);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperInitTest,The following statement contains a magic number: Assert.Equal(200' targetWrapper.BatchSize);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperInitTest2,The following statement contains a magic number: Assert.Equal(10000' targetWrapper.QueueLimit);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperInitTest2,The following statement contains a magic number: Assert.Equal(200' targetWrapper.BatchSize);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperSyncTest_WhenTimeToSleepBetweenBatchesIsEqualToZero,The following statement contains a magic number: var targetWrapper = new AsyncTargetWrapper() {                  WrappedTarget = myTarget'                  TimeToSleepBetweenBatches = 0'  #if NET4_5                  ForceLockingQueue = forceLockingQueue'                  OptimizeBufferReuse = !forceLockingQueue'  #endif                  BatchSize = 3'                  QueueLimit = 5' // Will make it "sleep" between every second write                  FullBatchSizeWriteLimit = 1'                  OverflowAction = AsyncTargetWrapperOverflowAction.Block              };
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperSyncTest_WhenTimeToSleepBetweenBatchesIsEqualToZero,The following statement contains a magic number: var targetWrapper = new AsyncTargetWrapper() {                  WrappedTarget = myTarget'                  TimeToSleepBetweenBatches = 0'  #if NET4_5                  ForceLockingQueue = forceLockingQueue'                  OptimizeBufferReuse = !forceLockingQueue'  #endif                  BatchSize = 3'                  QueueLimit = 5' // Will make it "sleep" between every second write                  FullBatchSizeWriteLimit = 1'                  OverflowAction = AsyncTargetWrapperOverflowAction.Block              };
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperSyncTest_WhenTimeToSleepBetweenBatchesIsEqualToZero,The following statement contains a magic number: var itemPrepareList = new List<AsyncLogEventInfo>(500);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperSyncTest_WhenTimeToSleepBetweenBatchesIsEqualToZero,The following statement contains a magic number: bool blockConsumer = (itemPrepareList.Capacity / 2) == i;
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperSyncTest_WhenTimeToSleepBetweenBatchesIsEqualToZero,The following statement contains a magic number: itemPrepareList.Add(logEvent.WithContinuation((ex) => { if (blockConsumer) Thread.Sleep(125); itemWrittenList.Add(sequenceID); }));
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperSyncTest_WhenTimeToSleepBetweenBatchesIsEqualToZero,The following statement contains a magic number: ParameterizedThreadStart producerMethod = (s) =>                  {                      var eventProducer = (ManualResetEvent)s;                      if (eventProducer != null)                          eventProducer.Set();    // Signal we are ready                        int partitionNo = ReferenceEquals(eventProducer' eventProducer1) ? 1 : 0;                      for (int i = 0; i < itemPrepareList.Count; ++i)                      {                          if (i % 2 == partitionNo)                              targetWrapper.WriteAsyncLogEvent(itemPrepareList[i]);                      }                  };
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperSyncTest_WhenTimeToSleepBetweenBatchesIsEqualToZero,The following statement contains a magic number: Assert.True(eventProducer0.WaitOne(5000)' "Producer0 Start Timeout");
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperSyncTest_WhenTimeToSleepBetweenBatchesIsEqualToZero,The following statement contains a magic number: Assert.True(eventProducer1.WaitOne(5000)' "Producer1 Start Timeout");
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperSyncTest_WhenTimeToSleepBetweenBatchesIsEqualToZero,The following statement contains a magic number: Assert.True(producer0.Join(5000)' "Producer0 Complete Timeout");
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperSyncTest_WhenTimeToSleepBetweenBatchesIsEqualToZero,The following statement contains a magic number: Assert.True(producer1.Join(5000)' "Producer1 Complete Timeout");
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperSyncTest_WhenTimeToSleepBetweenBatchesIsEqualToZero,The following statement contains a magic number: i < itemPrepareList.Count * 2 && itemWrittenList.Count != itemPrepareList.Count
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperSyncTest_WhenTimeToSleepBetweenBatchesIsEqualToZero,The following statement contains a magic number: itemWrittenList[i] % 2 == 0
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperSyncTest_WhenTimeToSleepBetweenBatchesIsEqualToZero,The following statement contains a magic number: Assert.InRange(elapsedMilliseconds' 0' 950);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperSyncTest_WhenTimeToSleepBetweenBatchesIsEqualToZero,The following statement contains a magic number: i < 2000 && flushCounter != 2
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperSyncTest_WhenTimeToSleepBetweenBatchesIsEqualToZero,The following statement contains a magic number: i < 2000 && flushCounter != 2
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperSyncTest_WhenTimeToSleepBetweenBatchesIsEqualToZero,The following statement contains a magic number: Assert.Equal(2' flushCounter);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperSyncTest1,The following statement contains a magic number: Assert.True(continuationHit.WaitOne(5000));
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperSyncTest1,The following statement contains a magic number: Assert.True(continuationHit.WaitOne(5000));
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperSyncTest1,The following statement contains a magic number: Assert.Equal(2' myTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperAsyncTest1,The following statement contains a magic number: Assert.True(continuationHit.WaitOne(5000));
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperAsyncTest1,The following statement contains a magic number: Assert.True(continuationHit.WaitOne(5000));
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperAsyncTest1,The following statement contains a magic number: Assert.Equal(2' myTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperAsyncWithExceptionTest1,The following statement contains a magic number: Assert.True(continuationHit.WaitOne(5000));
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperAsyncWithExceptionTest1,The following statement contains a magic number: Assert.True(continuationHit.WaitOne(5000));
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperAsyncWithExceptionTest1,The following statement contains a magic number: Assert.Equal(2' myTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperFlushTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyAsyncTarget                  {                      ThrowExceptions = true                  };                    var targetWrapper = new AsyncTargetWrapper(myTarget)                  {                      Name = "AsyncTargetWrapperFlushTest_Wrapper"'                      OverflowAction = AsyncTargetWrapperOverflowAction.Grow                  };                    targetWrapper.Initialize(null);                  myTarget.Initialize(null);                    try                  {                      List<Exception> exceptions = new List<Exception>();                        int eventCount = 5000;                        for (int i = 0; i < eventCount; ++i)                      {                          targetWrapper.WriteAsyncLogEvent(LogEventInfo.CreateNullEvent().WithContinuation(                              ex =>                              {                                  lock (exceptions)                                  {                                      exceptions.Add(ex);                                  }                              }));                      }                        Exception lastException = null;                      ManualResetEvent mre = new ManualResetEvent(false);                        string internalLog = RunAndCaptureInternalLog(                          () =>                          {                              targetWrapper.Flush(                                  cont =>                                  {                                      try                                      {                                          // by this time all continuations should be completed                                          Assert.Equal(eventCount' exceptions.Count);                                            // with just 1 flush of the target                                          Assert.Equal(1' myTarget.FlushCount);                                            // and all writes should be accounted for                                          Assert.Equal(eventCount' myTarget.WriteCount);                                      }                                      catch (Exception ex)                                      {                                          lastException = ex;                                      }                                      finally                                      {                                          mre.Set();                                      }                                  });                              Assert.True(mre.WaitOne(5000)' InternalLogger.LogWriter?.ToString() ?? string.Empty);                          }'                          LogLevel.Trace);                        if (lastException != null)                      {                          Assert.True(false' lastException.ToString() + "\r\n" + internalLog);                      }                  }                  finally                  {                      myTarget.Close();                      targetWrapper.Close();                  }              });
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperFlushTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyAsyncTarget                  {                      ThrowExceptions = true                  };                    var targetWrapper = new AsyncTargetWrapper(myTarget)                  {                      Name = "AsyncTargetWrapperFlushTest_Wrapper"'                      OverflowAction = AsyncTargetWrapperOverflowAction.Grow                  };                    targetWrapper.Initialize(null);                  myTarget.Initialize(null);                    try                  {                      List<Exception> exceptions = new List<Exception>();                        int eventCount = 5000;                        for (int i = 0; i < eventCount; ++i)                      {                          targetWrapper.WriteAsyncLogEvent(LogEventInfo.CreateNullEvent().WithContinuation(                              ex =>                              {                                  lock (exceptions)                                  {                                      exceptions.Add(ex);                                  }                              }));                      }                        Exception lastException = null;                      ManualResetEvent mre = new ManualResetEvent(false);                        string internalLog = RunAndCaptureInternalLog(                          () =>                          {                              targetWrapper.Flush(                                  cont =>                                  {                                      try                                      {                                          // by this time all continuations should be completed                                          Assert.Equal(eventCount' exceptions.Count);                                            // with just 1 flush of the target                                          Assert.Equal(1' myTarget.FlushCount);                                            // and all writes should be accounted for                                          Assert.Equal(eventCount' myTarget.WriteCount);                                      }                                      catch (Exception ex)                                      {                                          lastException = ex;                                      }                                      finally                                      {                                          mre.Set();                                      }                                  });                              Assert.True(mre.WaitOne(5000)' InternalLogger.LogWriter?.ToString() ?? string.Empty);                          }'                          LogLevel.Trace);                        if (lastException != null)                      {                          Assert.True(false' lastException.ToString() + "\r\n" + internalLog);                      }                  }                  finally                  {                      myTarget.Close();                      targetWrapper.Close();                  }              });
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperFlushTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyAsyncTarget                  {                      ThrowExceptions = true                  };                    var targetWrapper = new AsyncTargetWrapper(myTarget)                  {                      Name = "AsyncTargetWrapperFlushTest_Wrapper"'                      OverflowAction = AsyncTargetWrapperOverflowAction.Grow                  };                    targetWrapper.Initialize(null);                  myTarget.Initialize(null);                    try                  {                      List<Exception> exceptions = new List<Exception>();                        int eventCount = 5000;                        for (int i = 0; i < eventCount; ++i)                      {                          targetWrapper.WriteAsyncLogEvent(LogEventInfo.CreateNullEvent().WithContinuation(                              ex =>                              {                                  lock (exceptions)                                  {                                      exceptions.Add(ex);                                  }                              }));                      }                        Exception lastException = null;                      ManualResetEvent mre = new ManualResetEvent(false);                        string internalLog = RunAndCaptureInternalLog(                          () =>                          {                              targetWrapper.Flush(                                  cont =>                                  {                                      try                                      {                                          // by this time all continuations should be completed                                          Assert.Equal(eventCount' exceptions.Count);                                            // with just 1 flush of the target                                          Assert.Equal(1' myTarget.FlushCount);                                            // and all writes should be accounted for                                          Assert.Equal(eventCount' myTarget.WriteCount);                                      }                                      catch (Exception ex)                                      {                                          lastException = ex;                                      }                                      finally                                      {                                          mre.Set();                                      }                                  });                              Assert.True(mre.WaitOne(5000)' InternalLogger.LogWriter?.ToString() ?? string.Empty);                          }'                          LogLevel.Trace);                        if (lastException != null)                      {                          Assert.True(false' lastException.ToString() + "\r\n" + internalLog);                      }                  }                  finally                  {                      myTarget.Close();                      targetWrapper.Close();                  }              });
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperCloseTest,The following statement contains a magic number: var targetWrapper = new AsyncTargetWrapper(myTarget)              {                  OverflowAction = AsyncTargetWrapperOverflowAction.Grow'                  TimeToSleepBetweenBatches = 1000'                  Name = "AsyncTargetWrapperCloseTest_Wrapper"'              };
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,AsyncTargetWrapperExceptionTest,The following statement contains a magic number: var targetWrapper = new AsyncTargetWrapper              {                  OverflowAction = AsyncTargetWrapperOverflowAction.Grow'                  TimeToSleepBetweenBatches = 500'                  WrappedTarget = new DebugTarget()'                  Name = "AsyncTargetWrapperExceptionTest_Wrapper"              };
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,FlushingMultipleTimesSimultaneous,The following statement contains a magic number: var asyncTarget = new AsyncTargetWrapper              {                  TimeToSleepBetweenBatches = 1000'                  WrappedTarget = new DebugTarget()'                  Name = "FlushingMultipleTimesSimultaneous_Wrapper"              };
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,FlushingMultipleTimesSimultaneous,The following statement contains a magic number: Assert.True(firstContinuationResetEvent.WaitOne(5000)' nameof(firstContinuationResetEvent));
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,FlushingMultipleTimesSimultaneous,The following statement contains a magic number: Assert.True(secondContinuationResetEvent.WaitOne(5000)' nameof(secondContinuationResetEvent));
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,LogEventDropped_OnRequestqueueOverflow,The following statement contains a magic number: int queueLimit = 2;
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,LogEventDropped_OnRequestqueueOverflow,The following statement contains a magic number: int loggedEventCount = 5;
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,LogEventDropped_OnRequestqueueOverflow,The following statement contains a magic number: var targetWrapper = new AsyncTargetWrapper()              {                  WrappedTarget = myTarget'                  QueueLimit = queueLimit'                  TimeToSleepBetweenBatches = 500'    // Make it slow                  OverflowAction = AsyncTargetWrapperOverflowAction.Discard'              };
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,LogEventNotDropped_IfOverflowActionBlock,The following statement contains a magic number: int queueLimit = 2;
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,LogEventNotDropped_IfOverflowActionBlock,The following statement contains a magic number: int loggedEventCount = 5;
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,LogEventNotDropped_IfOverflowActionGrow,The following statement contains a magic number: int queueLimit = 2;
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,LogEventNotDropped_IfOverflowActionGrow,The following statement contains a magic number: int loggedEventCount = 5;
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,EventQueueGrow_OnQueueGrow,The following statement contains a magic number: int queueLimit = 2;
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,EventQueueGrow_OnQueueGrow,The following statement contains a magic number: int loggedEventCount = 10;
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,EventQueueGrow_OnQueueGrow,The following statement contains a magic number: int expectedGrowingNumber = 3;
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,EventQueueGrow_OnQueueGrow,The following statement contains a magic number: var targetWrapper = new AsyncTargetWrapper()              {                  WrappedTarget = myTarget'                  QueueLimit = queueLimit'                  TimeToSleepBetweenBatches = 500'    // Make it slow                  OverflowAction = AsyncTargetWrapperOverflowAction.Grow'              };
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,EnqueuQueueBlock_OnClose_ReleasesWriters,The following statement contains a magic number: var slowTarget = new MethodCallTarget("slowTarget"' (logEvent' parms) => System.Threading.Thread.Sleep(300));
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,EnqueuQueueBlock_OnClose_ReleasesWriters,The following statement contains a magic number: var targetWrapper = new AsyncTargetWrapper("asynSlowTarget"' slowTarget)              {                  OverflowAction = AsyncTargetWrapperOverflowAction.Block'                  QueueLimit = 3'                  ForceLockingQueue = forceLockingQueue'              };
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,EnqueuQueueBlock_OnClose_ReleasesWriters,The following statement contains a magic number: AsyncHelpers.ForEachItemInParallel(System.Linq.Enumerable.Range(1' 6)' (ex) => Interlocked.Exchange(ref allTasksCompleted' 1)' (value' cont) => { for (int i = 0; i < 100; ++i) logger.Info("Hello {0}"' value); cont(null); });
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,EnqueuQueueBlock_OnClose_ReleasesWriters,The following statement contains a magic number: AsyncHelpers.ForEachItemInParallel(System.Linq.Enumerable.Range(1' 6)' (ex) => Interlocked.Exchange(ref allTasksCompleted' 1)' (value' cont) => { for (int i = 0; i < 100; ++i) logger.Info("Hello {0}"' value); cont(null); });
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,EnqueuQueueBlock_OnClose_ReleasesWriters,The following statement contains a magic number: Thread.Sleep(150);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,EnqueuQueueBlock_OnClose_ReleasesWriters,The following statement contains a magic number: Thread.Sleep(10);
Magic Number,NLog.UnitTests.Targets.Wrappers,AsyncTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AsyncTargetWrapperTests.cs,EnqueuQueueBlock_OnClose_ReleasesWriters,The following statement contains a magic number: i < 100
Magic Number,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,AutoFlushTargetWrapperSyncTest1,The following statement contains a magic number: Assert.Equal(2' myTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,AutoFlushTargetWrapperSyncTest1,The following statement contains a magic number: Assert.Equal(2' myTarget.FlushCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,AutoFlushTargetWrapperAsyncTest1,The following statement contains a magic number: Assert.Equal(2' myTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,AutoFlushTargetWrapperAsyncTest1,The following statement contains a magic number: Assert.Equal(2' myTarget.FlushCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,AutoFlushTargetWrapperAsyncTest2,The following statement contains a magic number: i < 100
Magic Number,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,AutoFlushTargetWrapperAsyncTest2,The following statement contains a magic number: Assert.Equal(100' myTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,AutoFlushTargetWrapperAsyncTest2,The following statement contains a magic number: Assert.Equal(103' myTarget.FlushCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,AutoFlushTargetWrapperAsyncWithExceptionTest1,The following statement contains a magic number: Assert.Equal(2' myTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,AutoFlushOnConditionTest,The following statement contains a magic number: Assert.Equal(2' testTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,AutoFlushOnConditionTest,The following statement contains a magic number: Assert.Equal(4' testTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,AutoFlushOnConditionTest,The following statement contains a magic number: Assert.Equal(2' testTarget.FlushCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,MultipleConditionalAutoFlushWrappersTest,The following statement contains a magic number: Assert.Equal(2' testTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,MultipleConditionalAutoFlushWrappersTest,The following statement contains a magic number: Assert.Equal(3' testTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,MultipleConditionalAutoFlushWrappersTest,The following statement contains a magic number: Assert.Equal(2' testTarget.FlushCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,BufferingAutoFlushWrapperTest,The following statement contains a magic number: var bufferingTargetWrapper = new BufferingTargetWrapper(testTarget' 100);
Magic Number,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,BufferingAutoFlushWrapperTest,The following statement contains a magic number: Assert.Equal(2' testTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,BufferingAutoFlushWrapperTest,The following statement contains a magic number: Assert.Equal(2' testTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,BufferingAutoFlushWrapperTest,The following statement contains a magic number: Assert.Equal(3' testTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,BufferingAutoFlushWrapperTest,The following statement contains a magic number: Assert.Equal(2' testTarget.FlushCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,IgnoreExplicitAutoFlushWrapperTest,The following statement contains a magic number: var bufferingTargetWrapper = new BufferingTargetWrapper(testTarget' 100);
Magic Number,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,IgnoreExplicitAutoFlushWrapperTest,The following statement contains a magic number: Assert.Equal(2' testTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,IgnoreExplicitAutoFlushWrapperTest,The following statement contains a magic number: Assert.Equal(2' testTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,AutoFlushTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\AutoFlushTargetWrapperTests.cs,IgnoreExplicitAutoFlushWrapperTest,The following statement contains a magic number: Assert.Equal(2' testTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncTest1,The following statement contains a magic number: var targetWrapper = new BufferingTargetWrapper              {                  WrappedTarget = myTarget'                  BufferSize = 10'              };
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncTest1,The following statement contains a magic number: const int totalEvents = 100;
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncTest1,The following statement contains a magic number: i < 9
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncTest1,The following statement contains a magic number: Assert.Equal(10' hitCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncTest1,The following statement contains a magic number: Assert.Equal(10' myTarget.BufferedTotalEvents);
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncTest1,The following statement contains a magic number: Assert.Equal(10' myTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncTest1,The following statement contains a magic number: i < 9
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncTest1,The following statement contains a magic number: Assert.Equal(10' hitCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncTest1,The following statement contains a magic number: Assert.Equal(10' myTarget.BufferedTotalEvents);
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncTest1,The following statement contains a magic number: Assert.Equal(10' myTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncTest1,The following statement contains a magic number: Assert.Equal(19' hitCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncTest1,The following statement contains a magic number: Assert.Equal(2' myTarget.BufferedWriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncTest1,The following statement contains a magic number: Assert.Equal(19' myTarget.BufferedTotalEvents);
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncTest1,The following statement contains a magic number: Assert.Equal(19' myTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncTest1,The following statement contains a magic number: Assert.Equal(19' hitCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncTest1,The following statement contains a magic number: Assert.Equal(2' myTarget.BufferedWriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncTest1,The following statement contains a magic number: Assert.Equal(19' myTarget.BufferedTotalEvents);
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncTest1,The following statement contains a magic number: Assert.Equal(19' myTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncTest1,The following statement contains a magic number: Assert.Equal(2' myTarget.FlushCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWithFallbackGroupAndFirstTargetFails_Write_SecondTargetWritesEvents,The following statement contains a magic number: var targetWrapper = new BufferingTargetWrapper              {                  WrappedTarget = fallbackGroup'                  BufferSize = 10'              };
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWithFallbackGroupAndFirstTargetFails_Write_SecondTargetWritesEvents,The following statement contains a magic number: const int totalEvents = 100;
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWithFallbackGroupAndFirstTargetFails_Write_SecondTargetWritesEvents,The following statement contains a magic number: i < 9
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWithFallbackGroupAndFirstTargetFails_Write_SecondTargetWritesEvents,The following statement contains a magic number: Assert.Equal(10' myTarget2.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                      FlushTimeout = 50'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                  Assert.Equal(0' myTarget.WriteCount);                    // sleep 100 ms' this will trigger the timer and flush all events                  Thread.Sleep(100);                  Assert.Equal(9' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(9' myTarget.BufferedTotalEvents);                  Assert.Equal(9' myTarget.WriteCount);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 11 more events' 10 will be hit immediately because the buffer will fill up                  // 1 will be pending                  for (var i = 0; i < 11; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                  Assert.Equal(19' myTarget.WriteCount);                    // sleep 100ms and the last remaining one will be flushed                  Thread.Sleep(100);                  Assert.Equal(20' hitCount);                  Assert.Equal(3' myTarget.BufferedWriteCount);                  Assert.Equal(20' myTarget.BufferedTotalEvents);                  Assert.Equal(20' myTarget.WriteCount);                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                      FlushTimeout = 50'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                  Assert.Equal(0' myTarget.WriteCount);                    // sleep 100 ms' this will trigger the timer and flush all events                  Thread.Sleep(100);                  Assert.Equal(9' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(9' myTarget.BufferedTotalEvents);                  Assert.Equal(9' myTarget.WriteCount);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 11 more events' 10 will be hit immediately because the buffer will fill up                  // 1 will be pending                  for (var i = 0; i < 11; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                  Assert.Equal(19' myTarget.WriteCount);                    // sleep 100ms and the last remaining one will be flushed                  Thread.Sleep(100);                  Assert.Equal(20' hitCount);                  Assert.Equal(3' myTarget.BufferedWriteCount);                  Assert.Equal(20' myTarget.BufferedTotalEvents);                  Assert.Equal(20' myTarget.WriteCount);                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                      FlushTimeout = 50'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                  Assert.Equal(0' myTarget.WriteCount);                    // sleep 100 ms' this will trigger the timer and flush all events                  Thread.Sleep(100);                  Assert.Equal(9' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(9' myTarget.BufferedTotalEvents);                  Assert.Equal(9' myTarget.WriteCount);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 11 more events' 10 will be hit immediately because the buffer will fill up                  // 1 will be pending                  for (var i = 0; i < 11; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                  Assert.Equal(19' myTarget.WriteCount);                    // sleep 100ms and the last remaining one will be flushed                  Thread.Sleep(100);                  Assert.Equal(20' hitCount);                  Assert.Equal(3' myTarget.BufferedWriteCount);                  Assert.Equal(20' myTarget.BufferedTotalEvents);                  Assert.Equal(20' myTarget.WriteCount);                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                      FlushTimeout = 50'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                  Assert.Equal(0' myTarget.WriteCount);                    // sleep 100 ms' this will trigger the timer and flush all events                  Thread.Sleep(100);                  Assert.Equal(9' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(9' myTarget.BufferedTotalEvents);                  Assert.Equal(9' myTarget.WriteCount);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 11 more events' 10 will be hit immediately because the buffer will fill up                  // 1 will be pending                  for (var i = 0; i < 11; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                  Assert.Equal(19' myTarget.WriteCount);                    // sleep 100ms and the last remaining one will be flushed                  Thread.Sleep(100);                  Assert.Equal(20' hitCount);                  Assert.Equal(3' myTarget.BufferedWriteCount);                  Assert.Equal(20' myTarget.BufferedTotalEvents);                  Assert.Equal(20' myTarget.WriteCount);                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                      FlushTimeout = 50'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                  Assert.Equal(0' myTarget.WriteCount);                    // sleep 100 ms' this will trigger the timer and flush all events                  Thread.Sleep(100);                  Assert.Equal(9' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(9' myTarget.BufferedTotalEvents);                  Assert.Equal(9' myTarget.WriteCount);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 11 more events' 10 will be hit immediately because the buffer will fill up                  // 1 will be pending                  for (var i = 0; i < 11; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                  Assert.Equal(19' myTarget.WriteCount);                    // sleep 100ms and the last remaining one will be flushed                  Thread.Sleep(100);                  Assert.Equal(20' hitCount);                  Assert.Equal(3' myTarget.BufferedWriteCount);                  Assert.Equal(20' myTarget.BufferedTotalEvents);                  Assert.Equal(20' myTarget.WriteCount);                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                      FlushTimeout = 50'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                  Assert.Equal(0' myTarget.WriteCount);                    // sleep 100 ms' this will trigger the timer and flush all events                  Thread.Sleep(100);                  Assert.Equal(9' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(9' myTarget.BufferedTotalEvents);                  Assert.Equal(9' myTarget.WriteCount);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 11 more events' 10 will be hit immediately because the buffer will fill up                  // 1 will be pending                  for (var i = 0; i < 11; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                  Assert.Equal(19' myTarget.WriteCount);                    // sleep 100ms and the last remaining one will be flushed                  Thread.Sleep(100);                  Assert.Equal(20' hitCount);                  Assert.Equal(3' myTarget.BufferedWriteCount);                  Assert.Equal(20' myTarget.BufferedTotalEvents);                  Assert.Equal(20' myTarget.WriteCount);                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                      FlushTimeout = 50'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                  Assert.Equal(0' myTarget.WriteCount);                    // sleep 100 ms' this will trigger the timer and flush all events                  Thread.Sleep(100);                  Assert.Equal(9' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(9' myTarget.BufferedTotalEvents);                  Assert.Equal(9' myTarget.WriteCount);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 11 more events' 10 will be hit immediately because the buffer will fill up                  // 1 will be pending                  for (var i = 0; i < 11; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                  Assert.Equal(19' myTarget.WriteCount);                    // sleep 100ms and the last remaining one will be flushed                  Thread.Sleep(100);                  Assert.Equal(20' hitCount);                  Assert.Equal(3' myTarget.BufferedWriteCount);                  Assert.Equal(20' myTarget.BufferedTotalEvents);                  Assert.Equal(20' myTarget.WriteCount);                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                      FlushTimeout = 50'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                  Assert.Equal(0' myTarget.WriteCount);                    // sleep 100 ms' this will trigger the timer and flush all events                  Thread.Sleep(100);                  Assert.Equal(9' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(9' myTarget.BufferedTotalEvents);                  Assert.Equal(9' myTarget.WriteCount);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 11 more events' 10 will be hit immediately because the buffer will fill up                  // 1 will be pending                  for (var i = 0; i < 11; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                  Assert.Equal(19' myTarget.WriteCount);                    // sleep 100ms and the last remaining one will be flushed                  Thread.Sleep(100);                  Assert.Equal(20' hitCount);                  Assert.Equal(3' myTarget.BufferedWriteCount);                  Assert.Equal(20' myTarget.BufferedTotalEvents);                  Assert.Equal(20' myTarget.WriteCount);                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                      FlushTimeout = 50'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                  Assert.Equal(0' myTarget.WriteCount);                    // sleep 100 ms' this will trigger the timer and flush all events                  Thread.Sleep(100);                  Assert.Equal(9' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(9' myTarget.BufferedTotalEvents);                  Assert.Equal(9' myTarget.WriteCount);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 11 more events' 10 will be hit immediately because the buffer will fill up                  // 1 will be pending                  for (var i = 0; i < 11; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                  Assert.Equal(19' myTarget.WriteCount);                    // sleep 100ms and the last remaining one will be flushed                  Thread.Sleep(100);                  Assert.Equal(20' hitCount);                  Assert.Equal(3' myTarget.BufferedWriteCount);                  Assert.Equal(20' myTarget.BufferedTotalEvents);                  Assert.Equal(20' myTarget.WriteCount);                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                      FlushTimeout = 50'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                  Assert.Equal(0' myTarget.WriteCount);                    // sleep 100 ms' this will trigger the timer and flush all events                  Thread.Sleep(100);                  Assert.Equal(9' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(9' myTarget.BufferedTotalEvents);                  Assert.Equal(9' myTarget.WriteCount);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 11 more events' 10 will be hit immediately because the buffer will fill up                  // 1 will be pending                  for (var i = 0; i < 11; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                  Assert.Equal(19' myTarget.WriteCount);                    // sleep 100ms and the last remaining one will be flushed                  Thread.Sleep(100);                  Assert.Equal(20' hitCount);                  Assert.Equal(3' myTarget.BufferedWriteCount);                  Assert.Equal(20' myTarget.BufferedTotalEvents);                  Assert.Equal(20' myTarget.WriteCount);                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                      FlushTimeout = 50'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                  Assert.Equal(0' myTarget.WriteCount);                    // sleep 100 ms' this will trigger the timer and flush all events                  Thread.Sleep(100);                  Assert.Equal(9' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(9' myTarget.BufferedTotalEvents);                  Assert.Equal(9' myTarget.WriteCount);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 11 more events' 10 will be hit immediately because the buffer will fill up                  // 1 will be pending                  for (var i = 0; i < 11; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                  Assert.Equal(19' myTarget.WriteCount);                    // sleep 100ms and the last remaining one will be flushed                  Thread.Sleep(100);                  Assert.Equal(20' hitCount);                  Assert.Equal(3' myTarget.BufferedWriteCount);                  Assert.Equal(20' myTarget.BufferedTotalEvents);                  Assert.Equal(20' myTarget.WriteCount);                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                      FlushTimeout = 50'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                  Assert.Equal(0' myTarget.WriteCount);                    // sleep 100 ms' this will trigger the timer and flush all events                  Thread.Sleep(100);                  Assert.Equal(9' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(9' myTarget.BufferedTotalEvents);                  Assert.Equal(9' myTarget.WriteCount);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 11 more events' 10 will be hit immediately because the buffer will fill up                  // 1 will be pending                  for (var i = 0; i < 11; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                  Assert.Equal(19' myTarget.WriteCount);                    // sleep 100ms and the last remaining one will be flushed                  Thread.Sleep(100);                  Assert.Equal(20' hitCount);                  Assert.Equal(3' myTarget.BufferedWriteCount);                  Assert.Equal(20' myTarget.BufferedTotalEvents);                  Assert.Equal(20' myTarget.WriteCount);                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                      FlushTimeout = 50'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                  Assert.Equal(0' myTarget.WriteCount);                    // sleep 100 ms' this will trigger the timer and flush all events                  Thread.Sleep(100);                  Assert.Equal(9' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(9' myTarget.BufferedTotalEvents);                  Assert.Equal(9' myTarget.WriteCount);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 11 more events' 10 will be hit immediately because the buffer will fill up                  // 1 will be pending                  for (var i = 0; i < 11; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                  Assert.Equal(19' myTarget.WriteCount);                    // sleep 100ms and the last remaining one will be flushed                  Thread.Sleep(100);                  Assert.Equal(20' hitCount);                  Assert.Equal(3' myTarget.BufferedWriteCount);                  Assert.Equal(20' myTarget.BufferedTotalEvents);                  Assert.Equal(20' myTarget.WriteCount);                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                      FlushTimeout = 50'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                  Assert.Equal(0' myTarget.WriteCount);                    // sleep 100 ms' this will trigger the timer and flush all events                  Thread.Sleep(100);                  Assert.Equal(9' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(9' myTarget.BufferedTotalEvents);                  Assert.Equal(9' myTarget.WriteCount);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 11 more events' 10 will be hit immediately because the buffer will fill up                  // 1 will be pending                  for (var i = 0; i < 11; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                  Assert.Equal(19' myTarget.WriteCount);                    // sleep 100ms and the last remaining one will be flushed                  Thread.Sleep(100);                  Assert.Equal(20' hitCount);                  Assert.Equal(3' myTarget.BufferedWriteCount);                  Assert.Equal(20' myTarget.BufferedTotalEvents);                  Assert.Equal(20' myTarget.WriteCount);                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                      FlushTimeout = 50'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                  Assert.Equal(0' myTarget.WriteCount);                    // sleep 100 ms' this will trigger the timer and flush all events                  Thread.Sleep(100);                  Assert.Equal(9' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(9' myTarget.BufferedTotalEvents);                  Assert.Equal(9' myTarget.WriteCount);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 11 more events' 10 will be hit immediately because the buffer will fill up                  // 1 will be pending                  for (var i = 0; i < 11; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                  Assert.Equal(19' myTarget.WriteCount);                    // sleep 100ms and the last remaining one will be flushed                  Thread.Sleep(100);                  Assert.Equal(20' hitCount);                  Assert.Equal(3' myTarget.BufferedWriteCount);                  Assert.Equal(20' myTarget.BufferedTotalEvents);                  Assert.Equal(20' myTarget.WriteCount);                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                      FlushTimeout = 50'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                  Assert.Equal(0' myTarget.WriteCount);                    // sleep 100 ms' this will trigger the timer and flush all events                  Thread.Sleep(100);                  Assert.Equal(9' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(9' myTarget.BufferedTotalEvents);                  Assert.Equal(9' myTarget.WriteCount);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 11 more events' 10 will be hit immediately because the buffer will fill up                  // 1 will be pending                  for (var i = 0; i < 11; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                  Assert.Equal(19' myTarget.WriteCount);                    // sleep 100ms and the last remaining one will be flushed                  Thread.Sleep(100);                  Assert.Equal(20' hitCount);                  Assert.Equal(3' myTarget.BufferedWriteCount);                  Assert.Equal(20' myTarget.BufferedTotalEvents);                  Assert.Equal(20' myTarget.WriteCount);                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                      FlushTimeout = 50'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                  Assert.Equal(0' myTarget.WriteCount);                    // sleep 100 ms' this will trigger the timer and flush all events                  Thread.Sleep(100);                  Assert.Equal(9' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(9' myTarget.BufferedTotalEvents);                  Assert.Equal(9' myTarget.WriteCount);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 11 more events' 10 will be hit immediately because the buffer will fill up                  // 1 will be pending                  for (var i = 0; i < 11; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                  Assert.Equal(19' myTarget.WriteCount);                    // sleep 100ms and the last remaining one will be flushed                  Thread.Sleep(100);                  Assert.Equal(20' hitCount);                  Assert.Equal(3' myTarget.BufferedWriteCount);                  Assert.Equal(20' myTarget.BufferedTotalEvents);                  Assert.Equal(20' myTarget.WriteCount);                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                      FlushTimeout = 50'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                  Assert.Equal(0' myTarget.WriteCount);                    // sleep 100 ms' this will trigger the timer and flush all events                  Thread.Sleep(100);                  Assert.Equal(9' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(9' myTarget.BufferedTotalEvents);                  Assert.Equal(9' myTarget.WriteCount);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 11 more events' 10 will be hit immediately because the buffer will fill up                  // 1 will be pending                  for (var i = 0; i < 11; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                  Assert.Equal(19' myTarget.WriteCount);                    // sleep 100ms and the last remaining one will be flushed                  Thread.Sleep(100);                  Assert.Equal(20' hitCount);                  Assert.Equal(3' myTarget.BufferedWriteCount);                  Assert.Equal(20' myTarget.BufferedTotalEvents);                  Assert.Equal(20' myTarget.WriteCount);                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                      FlushTimeout = 50'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                  Assert.Equal(0' myTarget.WriteCount);                    // sleep 100 ms' this will trigger the timer and flush all events                  Thread.Sleep(100);                  Assert.Equal(9' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(9' myTarget.BufferedTotalEvents);                  Assert.Equal(9' myTarget.WriteCount);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 11 more events' 10 will be hit immediately because the buffer will fill up                  // 1 will be pending                  for (var i = 0; i < 11; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                  Assert.Equal(19' myTarget.WriteCount);                    // sleep 100ms and the last remaining one will be flushed                  Thread.Sleep(100);                  Assert.Equal(20' hitCount);                  Assert.Equal(3' myTarget.BufferedWriteCount);                  Assert.Equal(20' myTarget.BufferedTotalEvents);                  Assert.Equal(20' myTarget.WriteCount);                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperAsyncTest1,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyAsyncTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                    // write one more event - everything will be flushed                  targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                    while (hitCount < 10)                  {                      Thread.Sleep(10);                  }                    Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 9 more events - they will all be buffered and no final continuation will be reached                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    // no change                  Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                    Exception flushException = null;                  var flushHit = new ManualResetEvent(false);                    targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Null(flushException);                    // make sure remaining events were written                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    // flushes happen on another thread                  for (var i = 10; i < hitCount; ++i)                  {                      Assert.NotNull(continuationThread[i]);                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // flush again - should not do anything                  flushHit.Reset();                  targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    targetWrapper.Close();                  myTarget.Close();                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperAsyncTest1,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyAsyncTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                    // write one more event - everything will be flushed                  targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                    while (hitCount < 10)                  {                      Thread.Sleep(10);                  }                    Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 9 more events - they will all be buffered and no final continuation will be reached                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    // no change                  Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                    Exception flushException = null;                  var flushHit = new ManualResetEvent(false);                    targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Null(flushException);                    // make sure remaining events were written                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    // flushes happen on another thread                  for (var i = 10; i < hitCount; ++i)                  {                      Assert.NotNull(continuationThread[i]);                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // flush again - should not do anything                  flushHit.Reset();                  targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    targetWrapper.Close();                  myTarget.Close();                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperAsyncTest1,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyAsyncTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                    // write one more event - everything will be flushed                  targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                    while (hitCount < 10)                  {                      Thread.Sleep(10);                  }                    Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 9 more events - they will all be buffered and no final continuation will be reached                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    // no change                  Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                    Exception flushException = null;                  var flushHit = new ManualResetEvent(false);                    targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Null(flushException);                    // make sure remaining events were written                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    // flushes happen on another thread                  for (var i = 10; i < hitCount; ++i)                  {                      Assert.NotNull(continuationThread[i]);                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // flush again - should not do anything                  flushHit.Reset();                  targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    targetWrapper.Close();                  myTarget.Close();                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperAsyncTest1,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyAsyncTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                    // write one more event - everything will be flushed                  targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                    while (hitCount < 10)                  {                      Thread.Sleep(10);                  }                    Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 9 more events - they will all be buffered and no final continuation will be reached                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    // no change                  Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                    Exception flushException = null;                  var flushHit = new ManualResetEvent(false);                    targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Null(flushException);                    // make sure remaining events were written                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    // flushes happen on another thread                  for (var i = 10; i < hitCount; ++i)                  {                      Assert.NotNull(continuationThread[i]);                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // flush again - should not do anything                  flushHit.Reset();                  targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    targetWrapper.Close();                  myTarget.Close();                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperAsyncTest1,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyAsyncTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                    // write one more event - everything will be flushed                  targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                    while (hitCount < 10)                  {                      Thread.Sleep(10);                  }                    Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 9 more events - they will all be buffered and no final continuation will be reached                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    // no change                  Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                    Exception flushException = null;                  var flushHit = new ManualResetEvent(false);                    targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Null(flushException);                    // make sure remaining events were written                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    // flushes happen on another thread                  for (var i = 10; i < hitCount; ++i)                  {                      Assert.NotNull(continuationThread[i]);                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // flush again - should not do anything                  flushHit.Reset();                  targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    targetWrapper.Close();                  myTarget.Close();                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperAsyncTest1,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyAsyncTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                    // write one more event - everything will be flushed                  targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                    while (hitCount < 10)                  {                      Thread.Sleep(10);                  }                    Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 9 more events - they will all be buffered and no final continuation will be reached                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    // no change                  Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                    Exception flushException = null;                  var flushHit = new ManualResetEvent(false);                    targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Null(flushException);                    // make sure remaining events were written                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    // flushes happen on another thread                  for (var i = 10; i < hitCount; ++i)                  {                      Assert.NotNull(continuationThread[i]);                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // flush again - should not do anything                  flushHit.Reset();                  targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    targetWrapper.Close();                  myTarget.Close();                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperAsyncTest1,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyAsyncTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                    // write one more event - everything will be flushed                  targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                    while (hitCount < 10)                  {                      Thread.Sleep(10);                  }                    Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 9 more events - they will all be buffered and no final continuation will be reached                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    // no change                  Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                    Exception flushException = null;                  var flushHit = new ManualResetEvent(false);                    targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Null(flushException);                    // make sure remaining events were written                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    // flushes happen on another thread                  for (var i = 10; i < hitCount; ++i)                  {                      Assert.NotNull(continuationThread[i]);                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // flush again - should not do anything                  flushHit.Reset();                  targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    targetWrapper.Close();                  myTarget.Close();                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperAsyncTest1,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyAsyncTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                    // write one more event - everything will be flushed                  targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                    while (hitCount < 10)                  {                      Thread.Sleep(10);                  }                    Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 9 more events - they will all be buffered and no final continuation will be reached                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    // no change                  Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                    Exception flushException = null;                  var flushHit = new ManualResetEvent(false);                    targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Null(flushException);                    // make sure remaining events were written                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    // flushes happen on another thread                  for (var i = 10; i < hitCount; ++i)                  {                      Assert.NotNull(continuationThread[i]);                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // flush again - should not do anything                  flushHit.Reset();                  targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    targetWrapper.Close();                  myTarget.Close();                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperAsyncTest1,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyAsyncTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                    // write one more event - everything will be flushed                  targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                    while (hitCount < 10)                  {                      Thread.Sleep(10);                  }                    Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 9 more events - they will all be buffered and no final continuation will be reached                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    // no change                  Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                    Exception flushException = null;                  var flushHit = new ManualResetEvent(false);                    targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Null(flushException);                    // make sure remaining events were written                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    // flushes happen on another thread                  for (var i = 10; i < hitCount; ++i)                  {                      Assert.NotNull(continuationThread[i]);                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // flush again - should not do anything                  flushHit.Reset();                  targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    targetWrapper.Close();                  myTarget.Close();                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperAsyncTest1,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyAsyncTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                    // write one more event - everything will be flushed                  targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                    while (hitCount < 10)                  {                      Thread.Sleep(10);                  }                    Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 9 more events - they will all be buffered and no final continuation will be reached                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    // no change                  Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                    Exception flushException = null;                  var flushHit = new ManualResetEvent(false);                    targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Null(flushException);                    // make sure remaining events were written                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    // flushes happen on another thread                  for (var i = 10; i < hitCount; ++i)                  {                      Assert.NotNull(continuationThread[i]);                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // flush again - should not do anything                  flushHit.Reset();                  targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    targetWrapper.Close();                  myTarget.Close();                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperAsyncTest1,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyAsyncTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                    // write one more event - everything will be flushed                  targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                    while (hitCount < 10)                  {                      Thread.Sleep(10);                  }                    Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 9 more events - they will all be buffered and no final continuation will be reached                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    // no change                  Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                    Exception flushException = null;                  var flushHit = new ManualResetEvent(false);                    targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Null(flushException);                    // make sure remaining events were written                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    // flushes happen on another thread                  for (var i = 10; i < hitCount; ++i)                  {                      Assert.NotNull(continuationThread[i]);                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // flush again - should not do anything                  flushHit.Reset();                  targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    targetWrapper.Close();                  myTarget.Close();                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperAsyncTest1,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyAsyncTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                    // write one more event - everything will be flushed                  targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                    while (hitCount < 10)                  {                      Thread.Sleep(10);                  }                    Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 9 more events - they will all be buffered and no final continuation will be reached                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    // no change                  Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                    Exception flushException = null;                  var flushHit = new ManualResetEvent(false);                    targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Null(flushException);                    // make sure remaining events were written                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    // flushes happen on another thread                  for (var i = 10; i < hitCount; ++i)                  {                      Assert.NotNull(continuationThread[i]);                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // flush again - should not do anything                  flushHit.Reset();                  targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    targetWrapper.Close();                  myTarget.Close();                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperAsyncTest1,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyAsyncTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                    // write one more event - everything will be flushed                  targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                    while (hitCount < 10)                  {                      Thread.Sleep(10);                  }                    Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 9 more events - they will all be buffered and no final continuation will be reached                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    // no change                  Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                    Exception flushException = null;                  var flushHit = new ManualResetEvent(false);                    targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Null(flushException);                    // make sure remaining events were written                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    // flushes happen on another thread                  for (var i = 10; i < hitCount; ++i)                  {                      Assert.NotNull(continuationThread[i]);                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // flush again - should not do anything                  flushHit.Reset();                  targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    targetWrapper.Close();                  myTarget.Close();                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperAsyncTest1,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyAsyncTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                    // write one more event - everything will be flushed                  targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                    while (hitCount < 10)                  {                      Thread.Sleep(10);                  }                    Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 9 more events - they will all be buffered and no final continuation will be reached                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    // no change                  Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                    Exception flushException = null;                  var flushHit = new ManualResetEvent(false);                    targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Null(flushException);                    // make sure remaining events were written                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    // flushes happen on another thread                  for (var i = 10; i < hitCount; ++i)                  {                      Assert.NotNull(continuationThread[i]);                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // flush again - should not do anything                  flushHit.Reset();                  targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    targetWrapper.Close();                  myTarget.Close();                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperAsyncTest1,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyAsyncTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                    // write one more event - everything will be flushed                  targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                    while (hitCount < 10)                  {                      Thread.Sleep(10);                  }                    Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 9 more events - they will all be buffered and no final continuation will be reached                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    // no change                  Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                    Exception flushException = null;                  var flushHit = new ManualResetEvent(false);                    targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Null(flushException);                    // make sure remaining events were written                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    // flushes happen on another thread                  for (var i = 10; i < hitCount; ++i)                  {                      Assert.NotNull(continuationThread[i]);                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // flush again - should not do anything                  flushHit.Reset();                  targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    targetWrapper.Close();                  myTarget.Close();                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperAsyncTest1,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyAsyncTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                    // write one more event - everything will be flushed                  targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                    while (hitCount < 10)                  {                      Thread.Sleep(10);                  }                    Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 9 more events - they will all be buffered and no final continuation will be reached                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    // no change                  Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                    Exception flushException = null;                  var flushHit = new ManualResetEvent(false);                    targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Null(flushException);                    // make sure remaining events were written                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    // flushes happen on another thread                  for (var i = 10; i < hitCount; ++i)                  {                      Assert.NotNull(continuationThread[i]);                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // flush again - should not do anything                  flushHit.Reset();                  targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    targetWrapper.Close();                  myTarget.Close();                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperAsyncTest1,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyAsyncTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                    // write one more event - everything will be flushed                  targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                    while (hitCount < 10)                  {                      Thread.Sleep(10);                  }                    Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 9 more events - they will all be buffered and no final continuation will be reached                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    // no change                  Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                    Exception flushException = null;                  var flushHit = new ManualResetEvent(false);                    targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Null(flushException);                    // make sure remaining events were written                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    // flushes happen on another thread                  for (var i = 10; i < hitCount; ++i)                  {                      Assert.NotNull(continuationThread[i]);                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // flush again - should not do anything                  flushHit.Reset();                  targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    targetWrapper.Close();                  myTarget.Close();                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperAsyncTest1,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var myTarget = new MyAsyncTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                          };                    // write 9 events - they will all be buffered and no final continuation will be reached                  var eventCounter = 0;                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    Assert.Equal(0' hitCount);                    // write one more event - everything will be flushed                  targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                    while (hitCount < 10)                  {                      Thread.Sleep(10);                  }                    Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                  for (var i = 0; i < hitCount; ++i)                  {                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // write 9 more events - they will all be buffered and no final continuation will be reached                  for (var i = 0; i < 9; ++i)                  {                      targetWrapper.WriteAsyncLogEvent(                          new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  }                    // no change                  Assert.Equal(10' hitCount);                  Assert.Equal(1' myTarget.BufferedWriteCount);                  Assert.Equal(10' myTarget.BufferedTotalEvents);                    Exception flushException = null;                  var flushHit = new ManualResetEvent(false);                    targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Null(flushException);                    // make sure remaining events were written                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    // flushes happen on another thread                  for (var i = 10; i < hitCount; ++i)                  {                      Assert.NotNull(continuationThread[i]);                      Assert.NotSame(Thread.CurrentThread' continuationThread[i]);                      Assert.Null(lastException[i]);                  }                    // flush again - should not do anything                  flushHit.Reset();                  targetWrapper.Flush(                      ex =>                      {                          flushException = ex;                          flushHit.Set();                      });                    flushHit.WaitOne();                  Assert.Equal(19' hitCount);                  Assert.Equal(2' myTarget.BufferedWriteCount);                  Assert.Equal(19' myTarget.BufferedTotalEvents);                    targetWrapper.Close();                  myTarget.Close();                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushNonSlidingTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                    var myTarget = new MyTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                      FlushTimeout = 400'                      SlidingTimeout = false'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    var resetEvent = new ManualResetEvent(false);                  CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                              if (eventNumber > 0)                              {                                  resetEvent.Set();                              }                          };                    var eventCounter = 0;                  targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                    Assert.Equal(0' hitCount);                  Assert.Equal(0' myTarget.WriteCount);                    targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  Assert.True(resetEvent.WaitOne(5000));                    Assert.Equal(2' hitCount);                  Assert.Equal(2' myTarget.WriteCount);                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushNonSlidingTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                    var myTarget = new MyTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                      FlushTimeout = 400'                      SlidingTimeout = false'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    var resetEvent = new ManualResetEvent(false);                  CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                              if (eventNumber > 0)                              {                                  resetEvent.Set();                              }                          };                    var eventCounter = 0;                  targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                    Assert.Equal(0' hitCount);                  Assert.Equal(0' myTarget.WriteCount);                    targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  Assert.True(resetEvent.WaitOne(5000));                    Assert.Equal(2' hitCount);                  Assert.Equal(2' myTarget.WriteCount);                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushNonSlidingTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                    var myTarget = new MyTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                      FlushTimeout = 400'                      SlidingTimeout = false'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    var resetEvent = new ManualResetEvent(false);                  CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                              if (eventNumber > 0)                              {                                  resetEvent.Set();                              }                          };                    var eventCounter = 0;                  targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                    Assert.Equal(0' hitCount);                  Assert.Equal(0' myTarget.WriteCount);                    targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  Assert.True(resetEvent.WaitOne(5000));                    Assert.Equal(2' hitCount);                  Assert.Equal(2' myTarget.WriteCount);                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushNonSlidingTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                    var myTarget = new MyTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                      FlushTimeout = 400'                      SlidingTimeout = false'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    var resetEvent = new ManualResetEvent(false);                  CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                              if (eventNumber > 0)                              {                                  resetEvent.Set();                              }                          };                    var eventCounter = 0;                  targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                    Assert.Equal(0' hitCount);                  Assert.Equal(0' myTarget.WriteCount);                    targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  Assert.True(resetEvent.WaitOne(5000));                    Assert.Equal(2' hitCount);                  Assert.Equal(2' myTarget.WriteCount);                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushNonSlidingTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                    var myTarget = new MyTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                      FlushTimeout = 400'                      SlidingTimeout = false'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    var resetEvent = new ManualResetEvent(false);                  CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                              if (eventNumber > 0)                              {                                  resetEvent.Set();                              }                          };                    var eventCounter = 0;                  targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                    Assert.Equal(0' hitCount);                  Assert.Equal(0' myTarget.WriteCount);                    targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  Assert.True(resetEvent.WaitOne(5000));                    Assert.Equal(2' hitCount);                  Assert.Equal(2' myTarget.WriteCount);                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushNonSlidingTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                    var myTarget = new MyTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                      FlushTimeout = 400'                      SlidingTimeout = false'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    var resetEvent = new ManualResetEvent(false);                  CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                              if (eventNumber > 0)                              {                                  resetEvent.Set();                              }                          };                    var eventCounter = 0;                  targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                    Assert.Equal(0' hitCount);                  Assert.Equal(0' myTarget.WriteCount);                    targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  Assert.True(resetEvent.WaitOne(5000));                    Assert.Equal(2' hitCount);                  Assert.Equal(2' myTarget.WriteCount);                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushNonSlidingTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                    var myTarget = new MyTarget();                  var targetWrapper = new BufferingTargetWrapper                  {                      WrappedTarget = myTarget'                      BufferSize = 10'                      FlushTimeout = 400'                      SlidingTimeout = false'                  };                    InitializeTargets(myTarget' targetWrapper);                    const int totalEvents = 100;                    var continuationHit = new bool[totalEvents];                  var lastException = new Exception[totalEvents];                  var continuationThread = new Thread[totalEvents];                  var hitCount = 0;                    var resetEvent = new ManualResetEvent(false);                  CreateContinuationFunc createAsyncContinuation =                      eventNumber =>                          ex =>                          {                              lastException[eventNumber] = ex;                              continuationThread[eventNumber] = Thread.CurrentThread;                              continuationHit[eventNumber] = true;                              Interlocked.Increment(ref hitCount);                              if (eventNumber > 0)                              {                                  resetEvent.Set();                              }                          };                    var eventCounter = 0;                  targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                    Assert.Equal(0' hitCount);                  Assert.Equal(0' myTarget.WriteCount);                    targetWrapper.WriteAsyncLogEvent(                      new LogEventInfo().WithContinuation(createAsyncContinuation(eventCounter++)));                  Assert.True(resetEvent.WaitOne(5000));                    Assert.Equal(2' hitCount);                  Assert.Equal(2' myTarget.WriteCount);                });
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushSlidingTest,The following statement contains a magic number: var targetWrapper = new BufferingTargetWrapper              {                  WrappedTarget = myTarget'                  BufferSize = 10'                  FlushTimeout = 400'              };
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushSlidingTest,The following statement contains a magic number: var targetWrapper = new BufferingTargetWrapper              {                  WrappedTarget = myTarget'                  BufferSize = 10'                  FlushTimeout = 400'              };
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushSlidingTest,The following statement contains a magic number: const int totalEvents = 100;
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushSlidingTest,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushSlidingTest,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushSlidingTest,The following statement contains a magic number: Thread.Sleep(600);
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushSlidingTest,The following statement contains a magic number: Assert.Equal(2' hitCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithTimedFlushSlidingTest,The following statement contains a magic number: Assert.Equal(2' myTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithOverflowDiscardTest,The following statement contains a magic number: const int totalEvents = 15;
Magic Number,NLog.UnitTests.Targets.Wrappers,BufferingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\BufferingTargetWrapperTests.cs,BufferingTargetWrapperSyncWithOverflowDiscardTest,The following statement contains a magic number: const int bufferSize = 10;
Magic Number,NLog.UnitTests.Targets.Wrappers,ConcurrentRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\ConcurrentRequestQueueTests.cs,DequeueBatch_WithNonEmptyList_ReturnsValidCount,The following statement contains a magic number: ConcurrentRequestQueue requestQueue = new ConcurrentRequestQueue(2' overflowAction);
Magic Number,NLog.UnitTests.Targets.Wrappers,ConcurrentRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\ConcurrentRequestQueueTests.cs,DequeueBatch_WithNonEmptyList_ReturnsValidCount,The following statement contains a magic number: Assert.Equal(2' requestQueue.Count);
Magic Number,NLog.UnitTests.Targets.Wrappers,ConcurrentRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\ConcurrentRequestQueueTests.cs,DequeueBatch_WithNonEmptyList_ReturnsValidCount,The following statement contains a magic number: Assert.Equal(2' batch.Count);
Magic Number,NLog.UnitTests.Targets.Wrappers,ConcurrentRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\ConcurrentRequestQueueTests.cs,RaiseEventLogEventQueueGrow_OnLogItems,The following statement contains a magic number: const int RequestsLimit = 2;
Magic Number,NLog.UnitTests.Targets.Wrappers,ConcurrentRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\ConcurrentRequestQueueTests.cs,RaiseEventLogEventQueueGrow_OnLogItems,The following statement contains a magic number: const int EventsCount = 5;
Magic Number,NLog.UnitTests.Targets.Wrappers,ConcurrentRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\ConcurrentRequestQueueTests.cs,RaiseEventLogEventQueueGrow_OnLogItems,The following statement contains a magic number: const int ExpectedCountOfGrovingTimes = 2;
Magic Number,NLog.UnitTests.Targets.Wrappers,ConcurrentRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\ConcurrentRequestQueueTests.cs,RaiseEventLogEventQueueGrow_OnLogItems,The following statement contains a magic number: const int ExpectedFinalSize = 8;
Magic Number,NLog.UnitTests.Targets.Wrappers,ConcurrentRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\ConcurrentRequestQueueTests.cs,RaiseEventLogEventDropped_OnLogItems,The following statement contains a magic number: const int RequestsLimit = 2;
Magic Number,NLog.UnitTests.Targets.Wrappers,ConcurrentRequestQueueTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\ConcurrentRequestQueueTests.cs,RaiseEventLogEventDropped_OnLogItems,The following statement contains a magic number: const int EventsCount = 5;
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FirstTargetWorks_Write_AllEventsAreWrittenToFirstTarget,The following statement contains a magic number: Assert.Equal(10' myTarget1.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FirstTargetFails_Write_SecondTargetWritesAllEvents,The following statement contains a magic number: Assert.Equal(10' myTarget2.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FirstTwoTargetsFails_Write_ThirdTargetWritesAllEvents,The following statement contains a magic number: Assert.Equal(10' myTarget3.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,ReturnToFirstOnSuccessAndSecondTargetSucceeds_Write_ReturnToFirstTargetOnSuccess,The following statement contains a magic number: Assert.Equal(10' myTarget1.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FallbackGroupTargetSyncTest5,The following statement contains a magic number: var myTarget1 = new MyTarget { FailCounter = 3 };
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FallbackGroupTargetSyncTest5,The following statement contains a magic number: var myTarget2 = new MyTarget { FailCounter = 3 };
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FallbackGroupTargetSyncTest5,The following statement contains a magic number: var myTarget3 = new MyTarget { FailCounter = 3 };
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FallbackGroupTargetSyncTest5,The following statement contains a magic number: i < 10
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FallbackGroupTargetSyncTest5,The following statement contains a magic number: Assert.Equal(10' exceptions.Count);
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FallbackGroupTargetSyncTest5,The following statement contains a magic number: i < 3
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FallbackGroupTargetSyncTest5,The following statement contains a magic number: i < 10
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FallbackGroupTargetSyncTest5,The following statement contains a magic number: Assert.Equal(10' myTarget1.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FallbackGroupTargetSyncTest5,The following statement contains a magic number: Assert.Equal(3' myTarget2.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FallbackGroupTargetSyncTest5,The following statement contains a magic number: Assert.Equal(3' myTarget3.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FallbackGroupTargetSyncTest6,The following statement contains a magic number: var myTarget1 = new MyTarget { FailCounter = 10 };
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FallbackGroupTargetSyncTest6,The following statement contains a magic number: var myTarget2 = new MyTarget { FailCounter = 3 };
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FallbackGroupTargetSyncTest6,The following statement contains a magic number: var myTarget3 = new MyTarget { FailCounter = 3 };
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FallbackGroupTargetSyncTest6,The following statement contains a magic number: i < 10
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FallbackGroupTargetSyncTest6,The following statement contains a magic number: Assert.Equal(10' exceptions.Count);
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FallbackGroupTargetSyncTest6,The following statement contains a magic number: i < 3
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FallbackGroupTargetSyncTest6,The following statement contains a magic number: i < 10
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FallbackGroupTargetSyncTest6,The following statement contains a magic number: Assert.Equal(10' myTarget1.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FallbackGroupTargetSyncTest6,The following statement contains a magic number: Assert.Equal(10' myTarget2.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FallbackGroupTargetSyncTest6,The following statement contains a magic number: Assert.Equal(3' myTarget3.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FallbackGroupWithBufferingTargets,The following statement contains a magic number: const int totalEvents = 1000;
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FallbackGroupWithBufferingTargets,The following statement contains a magic number: var buffer1 = new BufferingTargetWrapper() { WrappedTarget = myTarget1' FlushTimeout = 100' SlidingTimeout = false };
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FallbackGroupWithBufferingTargets,The following statement contains a magic number: var buffer2 = new BufferingTargetWrapper() { WrappedTarget = myTarget2' FlushTimeout = 100' SlidingTimeout = false };
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FallbackGroupWithBufferingTargets,The following statement contains a magic number: var buffer3 = new BufferingTargetWrapper() { WrappedTarget = myTarget3' FlushTimeout = 100' SlidingTimeout = false };
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FallbackGroupTargetAsyncTest,The following statement contains a magic number: i < 10
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FallbackGroupTargetAsyncTest,The following statement contains a magic number: resetEvent.WaitOne(1000);
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FallbackGroupTargetAsyncTest,The following statement contains a magic number: Assert.Equal(10' exceptions.Count);
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FallbackGroupTargetAsyncTest,The following statement contains a magic number: i < 10
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,FallbackGroupTargetAsyncTest,The following statement contains a magic number: Assert.Equal(10' myTarget2.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,WriteAndAssertNoExceptions,The following statement contains a magic number: i < 10
Magic Number,NLog.UnitTests.Targets.Wrappers,FallbackGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FallbackGroupTargetTests.cs,WriteAndAssertNoExceptions,The following statement contains a magic number: Assert.Equal(10' exceptions.Count);
Magic Number,NLog.UnitTests.Targets.Wrappers,FilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FilteringTargetWrapperTests.cs,FilteringTargetWrapperSyncTest1,The following statement contains a magic number: Assert.Equal(2' myTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,FilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FilteringTargetWrapperTests.cs,FilteringTargetWrapperSyncTest1,The following statement contains a magic number: Assert.Equal(2' myMockCondition.CallCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,FilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FilteringTargetWrapperTests.cs,FilteringTargetWrapperAsyncTest1,The following statement contains a magic number: Assert.Equal(2' myTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,FilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FilteringTargetWrapperTests.cs,FilteringTargetWrapperAsyncTest1,The following statement contains a magic number: Assert.Equal(2' myMockCondition.CallCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,FilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FilteringTargetWrapperTests.cs,FilteringTargetWrapperAsyncWithExceptionTest1,The following statement contains a magic number: Assert.Equal(2' myTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,FilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FilteringTargetWrapperTests.cs,FilteringTargetWrapperAsyncWithExceptionTest1,The following statement contains a magic number: Assert.Equal(2' myMockCondition.CallCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,FilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FilteringTargetWrapperTests.cs,FilteringTargetWrapperSyncTest2,The following statement contains a magic number: Assert.Equal(2' myMockCondition.CallCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,FilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FilteringTargetWrapperTests.cs,FilteringTargetWrapperAsyncTest2,The following statement contains a magic number: Assert.Equal(2' myMockCondition.CallCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,FilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FilteringTargetWrapperTests.cs,FilteringTargetWrapperAsyncWithExceptionTest2,The following statement contains a magic number: Assert.Equal(2' myMockCondition.CallCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,FilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FilteringTargetWrapperTests.cs,FilteringTargetWrapperWhenRepeatedFilter,The following statement contains a magic number: Assert.Equal(3' myTarget.Logs.Count);
Magic Number,NLog.UnitTests.Targets.Wrappers,FilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\FilteringTargetWrapperTests.cs,FilteringTargetWrapperWhenRepeatedFilter,The following statement contains a magic number: Assert.Equal(5' myTarget.Logs.Count);
Magic Number,NLog.UnitTests.Targets.Wrappers,GroupByTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\GroupByTargetWrapperTests.cs,SimpleGroupByTest,The following statement contains a magic number: Assert.Equal(4' memoryTarget.Logs.Count);
Magic Number,NLog.UnitTests.Targets.Wrappers,GroupByTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\GroupByTargetWrapperTests.cs,SimpleGroupByTest,The following statement contains a magic number: Assert.Equal("Fatal"' memoryTarget.Logs[2]);
Magic Number,NLog.UnitTests.Targets.Wrappers,GroupByTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\GroupByTargetWrapperTests.cs,SimpleGroupByTest,The following statement contains a magic number: Assert.Equal("Info"' memoryTarget.Logs[3]);
Magic Number,NLog.UnitTests.Targets.Wrappers,ImpersonatingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\ImpersonatingTargetWrapperTests.cs,ImpersonatingWrapperTest,The following statement contains a magic number: Assert.Equal(4' exceptions.Count);
Magic Number,NLog.UnitTests.Targets.Wrappers,ImpersonatingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\ImpersonatingTargetWrapperTests.cs,ImpersonatingWrapperTest,The following statement contains a magic number: Assert.Equal(5' exceptions.Count);
Magic Number,NLog.UnitTests.Targets.Wrappers,ImpersonatingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\ImpersonatingTargetWrapperTests.cs,RevertToSelfTest,The following statement contains a magic number: Assert.Equal(4' exceptions.Count);
Magic Number,NLog.UnitTests.Targets.Wrappers,ImpersonatingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\ImpersonatingTargetWrapperTests.cs,RevertToSelfTest,The following statement contains a magic number: Assert.Equal(5' exceptions.Count);
Magic Number,NLog.UnitTests.Targets.Wrappers,ImpersonatingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\ImpersonatingTargetWrapperTests.cs,ImpersonatingWrapperNegativeTest2,The following statement contains a magic number: var wrapper = new ImpersonatingTargetWrapper()              {                  UserName = NLogTestUser'                  Password = NLogTestUserPassword'                  Domain = Environment.MachineName'                  ImpersonationLevel = (SecurityImpersonationLevel)1234'                  WrappedTarget = wrapped'              };
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,WriteMoreMessagesThanLimitOnlyWritesLimitMessages,The following statement contains a magic number: i < 10
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,WriteMoreMessagesThanLimitOnlyWritesLimitMessages,The following statement contains a magic number: AssertDebugCounter("debug"' 5);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,WriteMessagesAfterLimitExpiredWritesMessages,The following statement contains a magic number: i < 10
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,WriteMessagesAfterLimitExpiredWritesMessages,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,WriteMessagesAfterLimitExpiredWritesMessages,The following statement contains a magic number: i < 20
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,WriteMessagesAfterLimitExpiredWritesMessages,The following statement contains a magic number: AssertDebugCounter("debug"' 10);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,WriteMessagesLessThanMessageLimitWritesToWrappedTarget,The following statement contains a magic number: LimitingTargetWrapper wrapper = new LimitingTargetWrapper(wrappedTarget' 5' TimeSpan.FromMilliseconds(100));
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,WriteMessagesLessThanMessageLimitWritesToWrappedTarget,The following statement contains a magic number: LimitingTargetWrapper wrapper = new LimitingTargetWrapper(wrappedTarget' 5' TimeSpan.FromMilliseconds(100));
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,WriteMessagesLessThanMessageLimitWritesToWrappedTarget,The following statement contains a magic number: WriteNumberAsyncLogEventsStartingAt(0' 5' wrapper);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,WriteMessagesLessThanMessageLimitWritesToWrappedTarget,The following statement contains a magic number: Assert.Equal(5' wrappedTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,WriteMessagesLessThanMessageLimitWritesToWrappedTarget,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,WriteMessagesLessThanMessageLimitWritesToWrappedTarget,The following statement contains a magic number: var lastException = WriteNumberAsyncLogEventsStartingAt(5' 5' wrapper);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,WriteMessagesLessThanMessageLimitWritesToWrappedTarget,The following statement contains a magic number: var lastException = WriteNumberAsyncLogEventsStartingAt(5' 5' wrapper);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,WriteMessagesLessThanMessageLimitWritesToWrappedTarget,The following statement contains a magic number: Assert.Equal(10' wrappedTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,WriteMoreMessagesThanMessageLimitDiscardsExcessMessages,The following statement contains a magic number: LimitingTargetWrapper wrapper = new LimitingTargetWrapper(wrappedTarget' 5' TimeSpan.FromHours(1));
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,WriteMoreMessagesThanMessageLimitDiscardsExcessMessages,The following statement contains a magic number: var lastException = WriteNumberAsyncLogEventsStartingAt(0' 5' wrapper);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,WriteMoreMessagesThanMessageLimitDiscardsExcessMessages,The following statement contains a magic number: Assert.Equal(5' wrappedTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,WriteMoreMessagesThanMessageLimitDiscardsExcessMessages,The following statement contains a magic number: string internalLog = RunAndCaptureInternalLog(() =>              {                  wrapper.WriteAsyncLogEvent(                      new LogEventInfo(LogLevel.Debug' "test"' $"Hello {5}").WithContinuation(ex => lastException = ex));              }' LogLevel.Trace);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,WriteMoreMessagesThanMessageLimitDiscardsExcessMessages,The following statement contains a magic number: Assert.Equal(5' wrappedTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,WriteMessageAfterIntervalHasExpiredStartsNewInterval,The following statement contains a magic number: LimitingTargetWrapper wrapper = new LimitingTargetWrapper(wrappedTarget' 5' TimeSpan.FromMilliseconds(100));
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,WriteMessageAfterIntervalHasExpiredStartsNewInterval,The following statement contains a magic number: LimitingTargetWrapper wrapper = new LimitingTargetWrapper(wrappedTarget' 5' TimeSpan.FromMilliseconds(100));
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,WriteMessageAfterIntervalHasExpiredStartsNewInterval,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,WriteMessageAfterIntervalHasExpiredStartsNewInterval,The following statement contains a magic number: string internalLog = RunAndCaptureInternalLog(() =>              {                  // We can write 5 messages again since a new interval started.                  lastException = WriteNumberAsyncLogEventsStartingAt(0' 5' wrapper);                }' LogLevel.Trace);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,WriteMessageAfterIntervalHasExpiredStartsNewInterval,The following statement contains a magic number: Assert.Equal(6' wrappedTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,TestWritingMessagesOverMultipleIntervals,The following statement contains a magic number: LimitingTargetWrapper wrapper = new LimitingTargetWrapper(wrappedTarget' 5' TimeSpan.FromMilliseconds(100));
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,TestWritingMessagesOverMultipleIntervals,The following statement contains a magic number: LimitingTargetWrapper wrapper = new LimitingTargetWrapper(wrappedTarget' 5' TimeSpan.FromMilliseconds(100));
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,TestWritingMessagesOverMultipleIntervals,The following statement contains a magic number: lastException = WriteNumberAsyncLogEventsStartingAt(0' 10' wrapper);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,TestWritingMessagesOverMultipleIntervals,The following statement contains a magic number: Thread.Sleep(100);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,TestWritingMessagesOverMultipleIntervals,The following statement contains a magic number: Assert.Equal(5' wrappedTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,TestWritingMessagesOverMultipleIntervals,The following statement contains a magic number: lastException = WriteNumberAsyncLogEventsStartingAt(10' 10' wrapper);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,TestWritingMessagesOverMultipleIntervals,The following statement contains a magic number: lastException = WriteNumberAsyncLogEventsStartingAt(10' 10' wrapper);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,TestWritingMessagesOverMultipleIntervals,The following statement contains a magic number: Assert.Equal(10' wrappedTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,TestWritingMessagesOverMultipleIntervals,The following statement contains a magic number: Thread.Sleep(230);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,TestWritingMessagesOverMultipleIntervals,The following statement contains a magic number: lastException = WriteNumberAsyncLogEventsStartingAt(20' 10' wrapper);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,TestWritingMessagesOverMultipleIntervals,The following statement contains a magic number: lastException = WriteNumberAsyncLogEventsStartingAt(20' 10' wrapper);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,TestWritingMessagesOverMultipleIntervals,The following statement contains a magic number: Assert.Equal(15' wrappedTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,TestWritingMessagesOverMultipleIntervals,The following statement contains a magic number: Thread.Sleep(20);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,TestWritingMessagesOverMultipleIntervals,The following statement contains a magic number: lastException = WriteNumberAsyncLogEventsStartingAt(30' 10' wrapper);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,TestWritingMessagesOverMultipleIntervals,The following statement contains a magic number: lastException = WriteNumberAsyncLogEventsStartingAt(30' 10' wrapper);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,TestWritingMessagesOverMultipleIntervals,The following statement contains a magic number: Assert.Equal(15' wrappedTarget.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,ConstructorWithNoParametersInitialisesDefaultsCorrectly,The following statement contains a magic number: Assert.Equal(1000' wrapper.MessageLimit);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,ConstructorWithTargetInitialisesDefaultsCorrectly,The following statement contains a magic number: Assert.Equal(1000' wrapper.MessageLimit);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,ConstructorWithNameInitialisesDefaultsCorrectly,The following statement contains a magic number: Assert.Equal(1000' wrapper.MessageLimit);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,CreatingFromConfigSetsMessageLimitCorrectly,The following statement contains a magic number: Assert.Equal(50' limitingWrapper.MessageLimit);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,CreatingFromConfigSetsIntervalCorrectly,The following statement contains a magic number: Assert.Equal(1000' limitingWrapper.MessageLimit);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,CreatingFromConfigSetsIntervalCorrectly,The following statement contains a magic number: Assert.Equal(TimeSpan.FromDays(1)+TimeSpan.FromHours(2)+TimeSpan.FromMinutes(5)' limitingWrapper.Interval);
Magic Number,NLog.UnitTests.Targets.Wrappers,LimitingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\LimitingTargetWrapperTests.cs,CreatingFromConfigSetsIntervalCorrectly,The following statement contains a magic number: Assert.Equal(TimeSpan.FromDays(1)+TimeSpan.FromHours(2)+TimeSpan.FromMinutes(5)' limitingWrapper.Interval);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperUsingDefaultFilterTest,The following statement contains a magic number: Assert.Equal(3' target.Events.Count);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperUsingDefaultFilterTest,The following statement contains a magic number: Assert.Same(events[2].LogEvent' target.Events[1]);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperUsingDefaultFilterTest,The following statement contains a magic number: Assert.Same(events[5].LogEvent' target.Events[2]);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperUsingDefaultFilterTest,The following statement contains a magic number: Assert.Same(events[5].LogEvent' target.Events[2]);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperUsingDefaultNonFilterTest,The following statement contains a magic number: Assert.Equal(6' target.Events.Count);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperUsingDefaultNonFilterTest,The following statement contains a magic number: Assert.Same(events[2].LogEvent' target.Events[2]);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperUsingDefaultNonFilterTest,The following statement contains a magic number: Assert.Same(events[2].LogEvent' target.Events[2]);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperUsingDefaultNonFilterTest,The following statement contains a magic number: Assert.Same(events[3].LogEvent' target.Events[3]);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperUsingDefaultNonFilterTest,The following statement contains a magic number: Assert.Same(events[3].LogEvent' target.Events[3]);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperUsingDefaultNonFilterTest,The following statement contains a magic number: Assert.Same(events[5].LogEvent' target.Events[4]);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperUsingDefaultNonFilterTest,The following statement contains a magic number: Assert.Same(events[5].LogEvent' target.Events[4]);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperUsingDefaultNonFilterTest,The following statement contains a magic number: Assert.Same(events[6].LogEvent' target.Events[5]);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperUsingDefaultNonFilterTest,The following statement contains a magic number: Assert.Same(events[6].LogEvent' target.Events[5]);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperUsingDefaultNonFilterTest2,The following statement contains a magic number: Assert.Equal(7' target.Events.Count);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperUsingDefaultNonFilterTest2,The following statement contains a magic number: Assert.Same(events[2].LogEvent' target.Events[2]);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperUsingDefaultNonFilterTest2,The following statement contains a magic number: Assert.Same(events[2].LogEvent' target.Events[2]);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperUsingDefaultNonFilterTest2,The following statement contains a magic number: Assert.Same(events[3].LogEvent' target.Events[3]);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperUsingDefaultNonFilterTest2,The following statement contains a magic number: Assert.Same(events[3].LogEvent' target.Events[3]);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperUsingDefaultNonFilterTest2,The following statement contains a magic number: Assert.Same(events[4].LogEvent' target.Events[4]);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperUsingDefaultNonFilterTest2,The following statement contains a magic number: Assert.Same(events[4].LogEvent' target.Events[4]);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperUsingDefaultNonFilterTest2,The following statement contains a magic number: Assert.Same(events[5].LogEvent' target.Events[5]);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperUsingDefaultNonFilterTest2,The following statement contains a magic number: Assert.Same(events[5].LogEvent' target.Events[5]);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperUsingDefaultNonFilterTest2,The following statement contains a magic number: Assert.Same(events[6].LogEvent' target.Events[6]);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperUsingDefaultNonFilterTest2,The following statement contains a magic number: Assert.Same(events[6].LogEvent' target.Events[6]);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperNoFiltersDefined,The following statement contains a magic number: Assert.Equal(7' target.Events.Count);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperNoFiltersDefined,The following statement contains a magic number: Assert.Same(events[2].LogEvent' target.Events[2]);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperNoFiltersDefined,The following statement contains a magic number: Assert.Same(events[2].LogEvent' target.Events[2]);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperNoFiltersDefined,The following statement contains a magic number: Assert.Same(events[3].LogEvent' target.Events[3]);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperNoFiltersDefined,The following statement contains a magic number: Assert.Same(events[3].LogEvent' target.Events[3]);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperNoFiltersDefined,The following statement contains a magic number: Assert.Same(events[4].LogEvent' target.Events[4]);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperNoFiltersDefined,The following statement contains a magic number: Assert.Same(events[4].LogEvent' target.Events[4]);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperNoFiltersDefined,The following statement contains a magic number: Assert.Same(events[5].LogEvent' target.Events[5]);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperNoFiltersDefined,The following statement contains a magic number: Assert.Same(events[5].LogEvent' target.Events[5]);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperNoFiltersDefined,The following statement contains a magic number: Assert.Same(events[6].LogEvent' target.Events[6]);
Magic Number,NLog.UnitTests.Targets.Wrappers,PostFilteringTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\PostFilteringTargetWrapperTests.cs,PostFilteringTargetWrapperNoFiltersDefined,The following statement contains a magic number: Assert.Same(events[6].LogEvent' target.Events[6]);
Magic Number,NLog.UnitTests.Targets.Wrappers,RandomizeGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RandomizeGroupTargetTests.cs,RandomizeGroupSyncTest1,The following statement contains a magic number: i < 10
Magic Number,NLog.UnitTests.Targets.Wrappers,RandomizeGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RandomizeGroupTargetTests.cs,RandomizeGroupSyncTest1,The following statement contains a magic number: Assert.Equal(10' exceptions.Count);
Magic Number,NLog.UnitTests.Targets.Wrappers,RandomizeGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RandomizeGroupTargetTests.cs,RandomizeGroupSyncTest1,The following statement contains a magic number: Assert.Equal(10' myTarget1.WriteCount + myTarget2.WriteCount + myTarget3.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,RandomizeGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RandomizeGroupTargetTests.cs,RandomizeGroupSyncTest2,The following statement contains a magic number: i < 10
Magic Number,NLog.UnitTests.Targets.Wrappers,RandomizeGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RandomizeGroupTargetTests.cs,RandomizeGroupSyncTest2,The following statement contains a magic number: Assert.Equal(10' exceptions.Count);
Magic Number,NLog.UnitTests.Targets.Wrappers,RepeatingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RepeatingTargetWrapperTests.cs,RepeatingTargetWrapperTest1,The following statement contains a magic number: var wrapper = new RepeatingTargetWrapper()              {                  WrappedTarget = target'                  RepeatCount = 3'              };
Magic Number,NLog.UnitTests.Targets.Wrappers,RepeatingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RepeatingTargetWrapperTests.cs,RepeatingTargetWrapperTest1,The following statement contains a magic number: Assert.Equal(9' target.Events.Count);
Magic Number,NLog.UnitTests.Targets.Wrappers,RepeatingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RepeatingTargetWrapperTests.cs,RepeatingTargetWrapperTest1,The following statement contains a magic number: Assert.Same(events[0].LogEvent' target.Events[2]);
Magic Number,NLog.UnitTests.Targets.Wrappers,RepeatingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RepeatingTargetWrapperTests.cs,RepeatingTargetWrapperTest1,The following statement contains a magic number: Assert.Same(events[1].LogEvent' target.Events[3]);
Magic Number,NLog.UnitTests.Targets.Wrappers,RepeatingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RepeatingTargetWrapperTests.cs,RepeatingTargetWrapperTest1,The following statement contains a magic number: Assert.Same(events[1].LogEvent' target.Events[4]);
Magic Number,NLog.UnitTests.Targets.Wrappers,RepeatingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RepeatingTargetWrapperTests.cs,RepeatingTargetWrapperTest1,The following statement contains a magic number: Assert.Same(events[1].LogEvent' target.Events[5]);
Magic Number,NLog.UnitTests.Targets.Wrappers,RepeatingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RepeatingTargetWrapperTests.cs,RepeatingTargetWrapperTest1,The following statement contains a magic number: Assert.Same(events[2].LogEvent' target.Events[6]);
Magic Number,NLog.UnitTests.Targets.Wrappers,RepeatingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RepeatingTargetWrapperTests.cs,RepeatingTargetWrapperTest1,The following statement contains a magic number: Assert.Same(events[2].LogEvent' target.Events[6]);
Magic Number,NLog.UnitTests.Targets.Wrappers,RepeatingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RepeatingTargetWrapperTests.cs,RepeatingTargetWrapperTest1,The following statement contains a magic number: Assert.Same(events[2].LogEvent' target.Events[7]);
Magic Number,NLog.UnitTests.Targets.Wrappers,RepeatingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RepeatingTargetWrapperTests.cs,RepeatingTargetWrapperTest1,The following statement contains a magic number: Assert.Same(events[2].LogEvent' target.Events[7]);
Magic Number,NLog.UnitTests.Targets.Wrappers,RepeatingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RepeatingTargetWrapperTests.cs,RepeatingTargetWrapperTest1,The following statement contains a magic number: Assert.Same(events[2].LogEvent' target.Events[8]);
Magic Number,NLog.UnitTests.Targets.Wrappers,RepeatingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RepeatingTargetWrapperTests.cs,RepeatingTargetWrapperTest1,The following statement contains a magic number: Assert.Same(events[2].LogEvent' target.Events[8]);
Magic Number,NLog.UnitTests.Targets.Wrappers,RepeatingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RepeatingTargetWrapperTests.cs,RepeatingTargetWrapperTest2,The following statement contains a magic number: var wrapper = new RepeatingTargetWrapper()                  {                      WrappedTarget = target'                      RepeatCount = 3'                  };
Magic Number,NLog.UnitTests.Targets.Wrappers,RepeatingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RepeatingTargetWrapperTests.cs,RepeatingTargetWrapperTest2,The following statement contains a magic number: Assert.Equal(3' target.Events.Count);
Magic Number,NLog.UnitTests.Targets.Wrappers,RepeatingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RepeatingTargetWrapperTests.cs,RepeatingTargetWrapperTest2,The following statement contains a magic number: Assert.Same(events[2].LogEvent' target.Events[2]);
Magic Number,NLog.UnitTests.Targets.Wrappers,RepeatingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RepeatingTargetWrapperTests.cs,RepeatingTargetWrapperTest2,The following statement contains a magic number: Assert.Same(events[2].LogEvent' target.Events[2]);
Magic Number,NLog.UnitTests.Targets.Wrappers,RetryingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RetryingTargetWrapperTests.cs,RetryingTargetWrapperTest1,The following statement contains a magic number: var wrapper = new RetryingTargetWrapper()              {                  WrappedTarget = target'                  RetryCount = 10'                  RetryDelayMilliseconds = 1'              };
Magic Number,NLog.UnitTests.Targets.Wrappers,RetryingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RetryingTargetWrapperTests.cs,RetryingTargetWrapperTest1,The following statement contains a magic number: Assert.Equal(3' target.Events.Count);
Magic Number,NLog.UnitTests.Targets.Wrappers,RetryingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RetryingTargetWrapperTests.cs,RetryingTargetWrapperTest1,The following statement contains a magic number: Assert.Same(events[2].LogEvent' target.Events[2]);
Magic Number,NLog.UnitTests.Targets.Wrappers,RetryingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RetryingTargetWrapperTests.cs,RetryingTargetWrapperTest1,The following statement contains a magic number: Assert.Same(events[2].LogEvent' target.Events[2]);
Magic Number,NLog.UnitTests.Targets.Wrappers,RetryingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RetryingTargetWrapperTests.cs,RetryingTargetWrapperTest2,The following statement contains a magic number: var target = new MyTarget()              {                  ThrowExceptions = 6'              };
Magic Number,NLog.UnitTests.Targets.Wrappers,RetryingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RetryingTargetWrapperTests.cs,RetryingTargetWrapperTest2,The following statement contains a magic number: var wrapper = new RetryingTargetWrapper()              {                  WrappedTarget = target'                  RetryCount = 4'                  RetryDelayMilliseconds = 1'              };
Magic Number,NLog.UnitTests.Targets.Wrappers,RetryingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RetryingTargetWrapperTests.cs,RetryingTargetWrapperTest2,The following statement contains a magic number: Assert.Equal(2' target.Events.Count);
Magic Number,NLog.UnitTests.Targets.Wrappers,RetryingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RetryingTargetWrapperTests.cs,RetryingTargetWrapperTest2,The following statement contains a magic number: Assert.Same(events[2].LogEvent' target.Events[1]);
Magic Number,NLog.UnitTests.Targets.Wrappers,RetryingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RetryingTargetWrapperTests.cs,RetryingTargetWrapperTest2,The following statement contains a magic number: Assert.Null(exceptions[2]);
Magic Number,NLog.UnitTests.Targets.Wrappers,RetryingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RetryingTargetWrapperTests.cs,RetryingTargetWrapperBlockingCloseTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var target = new MyTarget()                  {                      ThrowExceptions = 5'                  };                  var wrapper = new RetryingTargetWrapper()                  {                      WrappedTarget = target'                      RetryCount = 10'                      RetryDelayMilliseconds = 5000'                  };                  var asyncWrapper = new AsyncTargetWrapper(wrapper) {TimeToSleepBetweenBatches = 1};                    asyncWrapper.Initialize(null);                  wrapper.Initialize(null);                  target.Initialize(null);                    var exceptions = new List<Exception>();                    var events = new[]                  {                      new LogEventInfo(LogLevel.Debug' "Logger1"' "Hello").WithContinuation(exceptions.Add)'                      new LogEventInfo(LogLevel.Info' "Logger1"' "Hello").WithContinuation(exceptions.Add)'                      new LogEventInfo(LogLevel.Info' "Logger2"' "Hello").WithContinuation(exceptions.Add)'                  };                    // Attempt to write LogEvents that will take forever to retry                  asyncWrapper.WriteAsyncLogEvents(events);                  // Wait a little for the AsyncWrapper to start writing                  System.Threading.Thread.Sleep(50);                  // Close down the AsyncWrapper while busy writing                  asyncWrapper.Close();                  // Close down the RetryingWrapper while busy retrying                  wrapper.Close();                  // Close down the actual target while busy writing                  target.Close();                  // Wait a little for the RetryingWrapper to detect that it has been closed down                  System.Threading.Thread.Sleep(200);                  // The premature abort' causes the exception to be logged                  Assert.NotNull(exceptions[0]);              });
Magic Number,NLog.UnitTests.Targets.Wrappers,RetryingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RetryingTargetWrapperTests.cs,RetryingTargetWrapperBlockingCloseTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var target = new MyTarget()                  {                      ThrowExceptions = 5'                  };                  var wrapper = new RetryingTargetWrapper()                  {                      WrappedTarget = target'                      RetryCount = 10'                      RetryDelayMilliseconds = 5000'                  };                  var asyncWrapper = new AsyncTargetWrapper(wrapper) {TimeToSleepBetweenBatches = 1};                    asyncWrapper.Initialize(null);                  wrapper.Initialize(null);                  target.Initialize(null);                    var exceptions = new List<Exception>();                    var events = new[]                  {                      new LogEventInfo(LogLevel.Debug' "Logger1"' "Hello").WithContinuation(exceptions.Add)'                      new LogEventInfo(LogLevel.Info' "Logger1"' "Hello").WithContinuation(exceptions.Add)'                      new LogEventInfo(LogLevel.Info' "Logger2"' "Hello").WithContinuation(exceptions.Add)'                  };                    // Attempt to write LogEvents that will take forever to retry                  asyncWrapper.WriteAsyncLogEvents(events);                  // Wait a little for the AsyncWrapper to start writing                  System.Threading.Thread.Sleep(50);                  // Close down the AsyncWrapper while busy writing                  asyncWrapper.Close();                  // Close down the RetryingWrapper while busy retrying                  wrapper.Close();                  // Close down the actual target while busy writing                  target.Close();                  // Wait a little for the RetryingWrapper to detect that it has been closed down                  System.Threading.Thread.Sleep(200);                  // The premature abort' causes the exception to be logged                  Assert.NotNull(exceptions[0]);              });
Magic Number,NLog.UnitTests.Targets.Wrappers,RetryingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RetryingTargetWrapperTests.cs,RetryingTargetWrapperBlockingCloseTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var target = new MyTarget()                  {                      ThrowExceptions = 5'                  };                  var wrapper = new RetryingTargetWrapper()                  {                      WrappedTarget = target'                      RetryCount = 10'                      RetryDelayMilliseconds = 5000'                  };                  var asyncWrapper = new AsyncTargetWrapper(wrapper) {TimeToSleepBetweenBatches = 1};                    asyncWrapper.Initialize(null);                  wrapper.Initialize(null);                  target.Initialize(null);                    var exceptions = new List<Exception>();                    var events = new[]                  {                      new LogEventInfo(LogLevel.Debug' "Logger1"' "Hello").WithContinuation(exceptions.Add)'                      new LogEventInfo(LogLevel.Info' "Logger1"' "Hello").WithContinuation(exceptions.Add)'                      new LogEventInfo(LogLevel.Info' "Logger2"' "Hello").WithContinuation(exceptions.Add)'                  };                    // Attempt to write LogEvents that will take forever to retry                  asyncWrapper.WriteAsyncLogEvents(events);                  // Wait a little for the AsyncWrapper to start writing                  System.Threading.Thread.Sleep(50);                  // Close down the AsyncWrapper while busy writing                  asyncWrapper.Close();                  // Close down the RetryingWrapper while busy retrying                  wrapper.Close();                  // Close down the actual target while busy writing                  target.Close();                  // Wait a little for the RetryingWrapper to detect that it has been closed down                  System.Threading.Thread.Sleep(200);                  // The premature abort' causes the exception to be logged                  Assert.NotNull(exceptions[0]);              });
Magic Number,NLog.UnitTests.Targets.Wrappers,RetryingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RetryingTargetWrapperTests.cs,RetryingTargetWrapperBlockingCloseTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var target = new MyTarget()                  {                      ThrowExceptions = 5'                  };                  var wrapper = new RetryingTargetWrapper()                  {                      WrappedTarget = target'                      RetryCount = 10'                      RetryDelayMilliseconds = 5000'                  };                  var asyncWrapper = new AsyncTargetWrapper(wrapper) {TimeToSleepBetweenBatches = 1};                    asyncWrapper.Initialize(null);                  wrapper.Initialize(null);                  target.Initialize(null);                    var exceptions = new List<Exception>();                    var events = new[]                  {                      new LogEventInfo(LogLevel.Debug' "Logger1"' "Hello").WithContinuation(exceptions.Add)'                      new LogEventInfo(LogLevel.Info' "Logger1"' "Hello").WithContinuation(exceptions.Add)'                      new LogEventInfo(LogLevel.Info' "Logger2"' "Hello").WithContinuation(exceptions.Add)'                  };                    // Attempt to write LogEvents that will take forever to retry                  asyncWrapper.WriteAsyncLogEvents(events);                  // Wait a little for the AsyncWrapper to start writing                  System.Threading.Thread.Sleep(50);                  // Close down the AsyncWrapper while busy writing                  asyncWrapper.Close();                  // Close down the RetryingWrapper while busy retrying                  wrapper.Close();                  // Close down the actual target while busy writing                  target.Close();                  // Wait a little for the RetryingWrapper to detect that it has been closed down                  System.Threading.Thread.Sleep(200);                  // The premature abort' causes the exception to be logged                  Assert.NotNull(exceptions[0]);              });
Magic Number,NLog.UnitTests.Targets.Wrappers,RetryingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RetryingTargetWrapperTests.cs,RetryingTargetWrapperBlockingCloseTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var target = new MyTarget()                  {                      ThrowExceptions = 5'                  };                  var wrapper = new RetryingTargetWrapper()                  {                      WrappedTarget = target'                      RetryCount = 10'                      RetryDelayMilliseconds = 5000'                  };                  var asyncWrapper = new AsyncTargetWrapper(wrapper) {TimeToSleepBetweenBatches = 1};                    asyncWrapper.Initialize(null);                  wrapper.Initialize(null);                  target.Initialize(null);                    var exceptions = new List<Exception>();                    var events = new[]                  {                      new LogEventInfo(LogLevel.Debug' "Logger1"' "Hello").WithContinuation(exceptions.Add)'                      new LogEventInfo(LogLevel.Info' "Logger1"' "Hello").WithContinuation(exceptions.Add)'                      new LogEventInfo(LogLevel.Info' "Logger2"' "Hello").WithContinuation(exceptions.Add)'                  };                    // Attempt to write LogEvents that will take forever to retry                  asyncWrapper.WriteAsyncLogEvents(events);                  // Wait a little for the AsyncWrapper to start writing                  System.Threading.Thread.Sleep(50);                  // Close down the AsyncWrapper while busy writing                  asyncWrapper.Close();                  // Close down the RetryingWrapper while busy retrying                  wrapper.Close();                  // Close down the actual target while busy writing                  target.Close();                  // Wait a little for the RetryingWrapper to detect that it has been closed down                  System.Threading.Thread.Sleep(200);                  // The premature abort' causes the exception to be logged                  Assert.NotNull(exceptions[0]);              });
Magic Number,NLog.UnitTests.Targets.Wrappers,RetryingTargetWrapperTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RetryingTargetWrapperTests.cs,RetryingTargetWrapperBlockingCloseTest,The following statement contains a magic number: RetryingIntegrationTest(3' () =>              {                  var target = new MyTarget()                  {                      ThrowExceptions = 5'                  };                  var wrapper = new RetryingTargetWrapper()                  {                      WrappedTarget = target'                      RetryCount = 10'                      RetryDelayMilliseconds = 5000'                  };                  var asyncWrapper = new AsyncTargetWrapper(wrapper) {TimeToSleepBetweenBatches = 1};                    asyncWrapper.Initialize(null);                  wrapper.Initialize(null);                  target.Initialize(null);                    var exceptions = new List<Exception>();                    var events = new[]                  {                      new LogEventInfo(LogLevel.Debug' "Logger1"' "Hello").WithContinuation(exceptions.Add)'                      new LogEventInfo(LogLevel.Info' "Logger1"' "Hello").WithContinuation(exceptions.Add)'                      new LogEventInfo(LogLevel.Info' "Logger2"' "Hello").WithContinuation(exceptions.Add)'                  };                    // Attempt to write LogEvents that will take forever to retry                  asyncWrapper.WriteAsyncLogEvents(events);                  // Wait a little for the AsyncWrapper to start writing                  System.Threading.Thread.Sleep(50);                  // Close down the AsyncWrapper while busy writing                  asyncWrapper.Close();                  // Close down the RetryingWrapper while busy retrying                  wrapper.Close();                  // Close down the actual target while busy writing                  target.Close();                  // Wait a little for the RetryingWrapper to detect that it has been closed down                  System.Threading.Thread.Sleep(200);                  // The premature abort' causes the exception to be logged                  Assert.NotNull(exceptions[0]);              });
Magic Number,NLog.UnitTests.Targets.Wrappers,RoundRobinGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RoundRobinGroupTargetTests.cs,RoundRobinGroupTargetSyncTest1,The following statement contains a magic number: i < 10
Magic Number,NLog.UnitTests.Targets.Wrappers,RoundRobinGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RoundRobinGroupTargetTests.cs,RoundRobinGroupTargetSyncTest1,The following statement contains a magic number: Assert.Equal(10' exceptions.Count);
Magic Number,NLog.UnitTests.Targets.Wrappers,RoundRobinGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RoundRobinGroupTargetTests.cs,RoundRobinGroupTargetSyncTest1,The following statement contains a magic number: Assert.Equal(4' myTarget1.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,RoundRobinGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RoundRobinGroupTargetTests.cs,RoundRobinGroupTargetSyncTest1,The following statement contains a magic number: Assert.Equal(3' myTarget2.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,RoundRobinGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RoundRobinGroupTargetTests.cs,RoundRobinGroupTargetSyncTest1,The following statement contains a magic number: Assert.Equal(3' myTarget3.WriteCount);
Magic Number,NLog.UnitTests.Targets.Wrappers,RoundRobinGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RoundRobinGroupTargetTests.cs,RoundRobinGroupTargetSyncTest2,The following statement contains a magic number: i < 10
Magic Number,NLog.UnitTests.Targets.Wrappers,RoundRobinGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\RoundRobinGroupTargetTests.cs,RoundRobinGroupTargetSyncTest2,The following statement contains a magic number: Assert.Equal(10' exceptions.Count);
Magic Number,NLog.UnitTests.Targets.Wrappers,SplitGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\SplitGroupTargetTests.cs,SplitGroupSyncTest1inner,The following statement contains a magic number: i < 10
Magic Number,NLog.UnitTests.Targets.Wrappers,SplitGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\SplitGroupTargetTests.cs,SplitGroupSyncTest2,The following statement contains a magic number: i < 10
Magic Number,NLog.UnitTests.Targets.Wrappers,SplitGroupTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\Wrappers\SplitGroupTargetTests.cs,SplitGroupSyncTest2,The following statement contains a magic number: Assert.Equal(10' exceptions.Count);
Missing Default,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,MultiItemPropertiesDictionary,The following switch statement is missing a default case: switch (i++)                  {                      case 0:                          Assert.Equal("Hello World"' item.Key);                          Assert.Equal(42' item.Value);                          break;                      case 1:                          Assert.Equal("Goodbye World"' item.Key);                          Assert.Equal(666' item.Value);                          break;                  }
Missing Default,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,MultiItemPropertiesDictionary,The following switch statement is missing a default case: switch (i++)                  {                      case 0:                          Assert.Equal("Hello World"' item);                          break;                      case 1:                          Assert.Equal("Goodbye World"' item);                          break;                  }
Missing Default,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,MultiItemPropertiesDictionary,The following switch statement is missing a default case: switch (i++)                  {                      case 0:                          Assert.Equal(42' item);                          break;                      case 1:                          Assert.Equal(666' item);                          break;                  }
Missing Default,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,OverrideMessagePropertiesDictionary,The following switch statement is missing a default case: switch (i++)                  {                      case 1:                          Assert.Equal("Hello World"' item.Key);                          Assert.Equal(999' item.Value);                          break;                      case 0:                          Assert.Equal("Goodbye World"' item.Key);                          Assert.Equal(666' item.Value);                          break;                  }
Missing Default,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,OverrideMessagePropertiesDictionary,The following switch statement is missing a default case: switch (i++)                  {                      case 1:                          Assert.Equal("Hello World"' item);                          break;                      case 0:                          Assert.Equal("Goodbye World"' item);                          break;                  }
Missing Default,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,OverrideMessagePropertiesDictionary,The following switch statement is missing a default case: switch (i++)                  {                      case 1:                          Assert.Equal(999' item);                          break;                      case 0:                          Assert.Equal(666' item);                          break;                  }
Missing Default,NLog.UnitTests.Internal,PropertiesDictionaryTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Internal\PropertiesDictionaryTests.cs,OverrideMessagePropertiesDictionary,The following switch statement is missing a default case: switch (i++)                  {                      case 0:                          Assert.Equal("Hello World"' item);                          break;                      case 1:                          Assert.Equal("Goodbye World"' item);                          break;                  }
Missing Default,NLog.UnitTests.Targets,EventLogTargetTests,C:\research\architectureSmells\repos\NLog_NLog\tests\NLog.UnitTests\Targets\EventLogTargetTests.cs,HasEntryType,The following switch statement is missing a default case: switch (entryType)              {                  case EventLogEntryType.Error:                      return isClassicEvent && level == StandardEventLevel.Error;                  case EventLogEntryType.Warning:                      return isClassicEvent && level == StandardEventLevel.Warning;                  case EventLogEntryType.Information:                      return isClassicEvent && level == StandardEventLevel.Informational;                  case EventLogEntryType.SuccessAudit:                      return keywords.HasFlag(StandardEventKeywords.AuditSuccess);                  case EventLogEntryType.FailureAudit:                      return keywords.HasFlag(StandardEventKeywords.AuditFailure);              }
