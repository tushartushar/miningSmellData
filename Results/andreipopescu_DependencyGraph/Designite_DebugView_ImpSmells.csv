Implementation smell,Namespace,Class,File,Method,Description
Long Method,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The method has 124 lines of code.
Complex Method,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,Cyclomatic complexity of the method is 27
Complex Method,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawShape,Cyclomatic complexity of the method is 21
Long Parameter List,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawShape,The method has 5 parameters.
Long Parameter List,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawTooltip,The method has 6 parameters.
Long Parameter List,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawNode,The method has 6 parameters.
Long Parameter List,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawPolygon,The method has 5 parameters.
Long Parameter List,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawSolidPolygon,The method has 5 parameters.
Long Parameter List,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawCircle,The method has 5 parameters.
Long Parameter List,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawSolidCircle,The method has 6 parameters.
Long Parameter List,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawSegment,The method has 5 parameters.
Long Statement,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawSolidPolygon,The length of the statement  "	DrawSolidPolygon (vertices' count' Color.FromArgb (255' (byte)(red * 255)' (byte)(green * 255)' (byte)(blue * 255))' true); " is 123.
Long Statement,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawSolidCircle,The length of the statement  "	DrawSolidCircle (center' radius' axis' Color.FromArgb (255' (byte)(red * 255)' (byte)(green * 255)' (byte)(blue * 255))); " is 121.
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if ((Flags & DebugViewFlags.ContactPoints) == DebugViewFlags.ContactPoints) {  	const float axisScale = 0.3f;  	for (int i = 0; i < _pointCount; ++i) {  		ContactPoint point = _points [i];  		if (point.State == PointState.Add) {  			// Add  			DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  		}  		else if (point.State == PointState.Persist) {  			// Persist  			DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  		}  		if ((Flags & DebugViewFlags.ContactNormals) == DebugViewFlags.ContactNormals) {  			Vector2 p1 = point.Position;  			Vector2 p2 = p1 + axisScale * point.Normal;  			DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  		}  	}  	_pointCount = 0;  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if ((Flags & DebugViewFlags.ContactPoints) == DebugViewFlags.ContactPoints) {  	const float axisScale = 0.3f;  	for (int i = 0; i < _pointCount; ++i) {  		ContactPoint point = _points [i];  		if (point.State == PointState.Add) {  			// Add  			DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  		}  		else if (point.State == PointState.Persist) {  			// Persist  			DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  		}  		if ((Flags & DebugViewFlags.ContactNormals) == DebugViewFlags.ContactNormals) {  			Vector2 p1 = point.Position;  			Vector2 p2 = p1 + axisScale * point.Normal;  			DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  		}  	}  	_pointCount = 0;  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if ((Flags & DebugViewFlags.ContactPoints) == DebugViewFlags.ContactPoints) {  	const float axisScale = 0.3f;  	for (int i = 0; i < _pointCount; ++i) {  		ContactPoint point = _points [i];  		if (point.State == PointState.Add) {  			// Add  			DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  		}  		else if (point.State == PointState.Persist) {  			// Persist  			DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  		}  		if ((Flags & DebugViewFlags.ContactNormals) == DebugViewFlags.ContactNormals) {  			Vector2 p1 = point.Position;  			Vector2 p2 = p1 + axisScale * point.Normal;  			DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  		}  	}  	_pointCount = 0;  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if ((Flags & DebugViewFlags.ContactPoints) == DebugViewFlags.ContactPoints) {  	const float axisScale = 0.3f;  	for (int i = 0; i < _pointCount; ++i) {  		ContactPoint point = _points [i];  		if (point.State == PointState.Add) {  			// Add  			DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  		}  		else if (point.State == PointState.Persist) {  			// Persist  			DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  		}  		if ((Flags & DebugViewFlags.ContactNormals) == DebugViewFlags.ContactNormals) {  			Vector2 p1 = point.Position;  			Vector2 p2 = p1 + axisScale * point.Normal;  			DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  		}  	}  	_pointCount = 0;  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if ((Flags & DebugViewFlags.ContactPoints) == DebugViewFlags.ContactPoints) {  	const float axisScale = 0.3f;  	for (int i = 0; i < _pointCount; ++i) {  		ContactPoint point = _points [i];  		if (point.State == PointState.Add) {  			// Add  			DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  		}  		else if (point.State == PointState.Persist) {  			// Persist  			DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  		}  		if ((Flags & DebugViewFlags.ContactNormals) == DebugViewFlags.ContactNormals) {  			Vector2 p1 = point.Position;  			Vector2 p2 = p1 + axisScale * point.Normal;  			DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  		}  	}  	_pointCount = 0;  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if ((Flags & DebugViewFlags.ContactPoints) == DebugViewFlags.ContactPoints) {  	const float axisScale = 0.3f;  	for (int i = 0; i < _pointCount; ++i) {  		ContactPoint point = _points [i];  		if (point.State == PointState.Add) {  			// Add  			DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  		}  		else if (point.State == PointState.Persist) {  			// Persist  			DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  		}  		if ((Flags & DebugViewFlags.ContactNormals) == DebugViewFlags.ContactNormals) {  			Vector2 p1 = point.Position;  			Vector2 p2 = p1 + axisScale * point.Normal;  			DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  		}  	}  	_pointCount = 0;  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if ((Flags & DebugViewFlags.ContactPoints) == DebugViewFlags.ContactPoints) {  	const float axisScale = 0.3f;  	for (int i = 0; i < _pointCount; ++i) {  		ContactPoint point = _points [i];  		if (point.State == PointState.Add) {  			// Add  			DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  		}  		else if (point.State == PointState.Persist) {  			// Persist  			DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  		}  		if ((Flags & DebugViewFlags.ContactNormals) == DebugViewFlags.ContactNormals) {  			Vector2 p1 = point.Position;  			Vector2 p2 = p1 + axisScale * point.Normal;  			DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  		}  	}  	_pointCount = 0;  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if ((Flags & DebugViewFlags.ContactPoints) == DebugViewFlags.ContactPoints) {  	const float axisScale = 0.3f;  	for (int i = 0; i < _pointCount; ++i) {  		ContactPoint point = _points [i];  		if (point.State == PointState.Add) {  			// Add  			DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  		}  		else if (point.State == PointState.Persist) {  			// Persist  			DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  		}  		if ((Flags & DebugViewFlags.ContactNormals) == DebugViewFlags.ContactNormals) {  			Vector2 p1 = point.Position;  			Vector2 p2 = p1 + axisScale * point.Normal;  			DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  		}  	}  	_pointCount = 0;  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if ((Flags & DebugViewFlags.ContactPoints) == DebugViewFlags.ContactPoints) {  	const float axisScale = 0.3f;  	for (int i = 0; i < _pointCount; ++i) {  		ContactPoint point = _points [i];  		if (point.State == PointState.Add) {  			// Add  			DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  		}  		else if (point.State == PointState.Persist) {  			// Persist  			DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  		}  		if ((Flags & DebugViewFlags.ContactNormals) == DebugViewFlags.ContactNormals) {  			Vector2 p1 = point.Position;  			Vector2 p2 = p1 + axisScale * point.Normal;  			DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  		}  	}  	_pointCount = 0;  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if ((Flags & DebugViewFlags.ContactPoints) == DebugViewFlags.ContactPoints) {  	const float axisScale = 0.3f;  	for (int i = 0; i < _pointCount; ++i) {  		ContactPoint point = _points [i];  		if (point.State == PointState.Add) {  			// Add  			DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  		}  		else if (point.State == PointState.Persist) {  			// Persist  			DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  		}  		if ((Flags & DebugViewFlags.ContactNormals) == DebugViewFlags.ContactNormals) {  			Vector2 p1 = point.Position;  			Vector2 p2 = p1 + axisScale * point.Normal;  			DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  		}  	}  	_pointCount = 0;  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if ((Flags & DebugViewFlags.ContactPoints) == DebugViewFlags.ContactPoints) {  	const float axisScale = 0.3f;  	for (int i = 0; i < _pointCount; ++i) {  		ContactPoint point = _points [i];  		if (point.State == PointState.Add) {  			// Add  			DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  		}  		else if (point.State == PointState.Persist) {  			// Persist  			DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  		}  		if ((Flags & DebugViewFlags.ContactNormals) == DebugViewFlags.ContactNormals) {  			Vector2 p1 = point.Position;  			Vector2 p2 = p1 + axisScale * point.Normal;  			DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  		}  	}  	_pointCount = 0;  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if ((Flags & DebugViewFlags.ContactPoints) == DebugViewFlags.ContactPoints) {  	const float axisScale = 0.3f;  	for (int i = 0; i < _pointCount; ++i) {  		ContactPoint point = _points [i];  		if (point.State == PointState.Add) {  			// Add  			DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  		}  		else if (point.State == PointState.Persist) {  			// Persist  			DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  		}  		if ((Flags & DebugViewFlags.ContactNormals) == DebugViewFlags.ContactNormals) {  			Vector2 p1 = point.Position;  			Vector2 p2 = p1 + axisScale * point.Normal;  			DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  		}  	}  	_pointCount = 0;  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: for (int i = 0; i < _pointCount; ++i) {  	ContactPoint point = _points [i];  	if (point.State == PointState.Add) {  		// Add  		DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  	}  	else if (point.State == PointState.Persist) {  		// Persist  		DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  	}  	if ((Flags & DebugViewFlags.ContactNormals) == DebugViewFlags.ContactNormals) {  		Vector2 p1 = point.Position;  		Vector2 p2 = p1 + axisScale * point.Normal;  		DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: for (int i = 0; i < _pointCount; ++i) {  	ContactPoint point = _points [i];  	if (point.State == PointState.Add) {  		// Add  		DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  	}  	else if (point.State == PointState.Persist) {  		// Persist  		DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  	}  	if ((Flags & DebugViewFlags.ContactNormals) == DebugViewFlags.ContactNormals) {  		Vector2 p1 = point.Position;  		Vector2 p2 = p1 + axisScale * point.Normal;  		DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: for (int i = 0; i < _pointCount; ++i) {  	ContactPoint point = _points [i];  	if (point.State == PointState.Add) {  		// Add  		DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  	}  	else if (point.State == PointState.Persist) {  		// Persist  		DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  	}  	if ((Flags & DebugViewFlags.ContactNormals) == DebugViewFlags.ContactNormals) {  		Vector2 p1 = point.Position;  		Vector2 p2 = p1 + axisScale * point.Normal;  		DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: for (int i = 0; i < _pointCount; ++i) {  	ContactPoint point = _points [i];  	if (point.State == PointState.Add) {  		// Add  		DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  	}  	else if (point.State == PointState.Persist) {  		// Persist  		DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  	}  	if ((Flags & DebugViewFlags.ContactNormals) == DebugViewFlags.ContactNormals) {  		Vector2 p1 = point.Position;  		Vector2 p2 = p1 + axisScale * point.Normal;  		DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: for (int i = 0; i < _pointCount; ++i) {  	ContactPoint point = _points [i];  	if (point.State == PointState.Add) {  		// Add  		DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  	}  	else if (point.State == PointState.Persist) {  		// Persist  		DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  	}  	if ((Flags & DebugViewFlags.ContactNormals) == DebugViewFlags.ContactNormals) {  		Vector2 p1 = point.Position;  		Vector2 p2 = p1 + axisScale * point.Normal;  		DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: for (int i = 0; i < _pointCount; ++i) {  	ContactPoint point = _points [i];  	if (point.State == PointState.Add) {  		// Add  		DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  	}  	else if (point.State == PointState.Persist) {  		// Persist  		DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  	}  	if ((Flags & DebugViewFlags.ContactNormals) == DebugViewFlags.ContactNormals) {  		Vector2 p1 = point.Position;  		Vector2 p2 = p1 + axisScale * point.Normal;  		DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: for (int i = 0; i < _pointCount; ++i) {  	ContactPoint point = _points [i];  	if (point.State == PointState.Add) {  		// Add  		DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  	}  	else if (point.State == PointState.Persist) {  		// Persist  		DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  	}  	if ((Flags & DebugViewFlags.ContactNormals) == DebugViewFlags.ContactNormals) {  		Vector2 p1 = point.Position;  		Vector2 p2 = p1 + axisScale * point.Normal;  		DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: for (int i = 0; i < _pointCount; ++i) {  	ContactPoint point = _points [i];  	if (point.State == PointState.Add) {  		// Add  		DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  	}  	else if (point.State == PointState.Persist) {  		// Persist  		DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  	}  	if ((Flags & DebugViewFlags.ContactNormals) == DebugViewFlags.ContactNormals) {  		Vector2 p1 = point.Position;  		Vector2 p2 = p1 + axisScale * point.Normal;  		DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: for (int i = 0; i < _pointCount; ++i) {  	ContactPoint point = _points [i];  	if (point.State == PointState.Add) {  		// Add  		DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  	}  	else if (point.State == PointState.Persist) {  		// Persist  		DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  	}  	if ((Flags & DebugViewFlags.ContactNormals) == DebugViewFlags.ContactNormals) {  		Vector2 p1 = point.Position;  		Vector2 p2 = p1 + axisScale * point.Normal;  		DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: for (int i = 0; i < _pointCount; ++i) {  	ContactPoint point = _points [i];  	if (point.State == PointState.Add) {  		// Add  		DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  	}  	else if (point.State == PointState.Persist) {  		// Persist  		DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  	}  	if ((Flags & DebugViewFlags.ContactNormals) == DebugViewFlags.ContactNormals) {  		Vector2 p1 = point.Position;  		Vector2 p2 = p1 + axisScale * point.Normal;  		DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: for (int i = 0; i < _pointCount; ++i) {  	ContactPoint point = _points [i];  	if (point.State == PointState.Add) {  		// Add  		DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  	}  	else if (point.State == PointState.Persist) {  		// Persist  		DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  	}  	if ((Flags & DebugViewFlags.ContactNormals) == DebugViewFlags.ContactNormals) {  		Vector2 p1 = point.Position;  		Vector2 p2 = p1 + axisScale * point.Normal;  		DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: for (int i = 0; i < _pointCount; ++i) {  	ContactPoint point = _points [i];  	if (point.State == PointState.Add) {  		// Add  		DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  	}  	else if (point.State == PointState.Persist) {  		// Persist  		DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  	}  	if ((Flags & DebugViewFlags.ContactNormals) == DebugViewFlags.ContactNormals) {  		Vector2 p1 = point.Position;  		Vector2 p2 = p1 + axisScale * point.Normal;  		DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if (point.State == PointState.Add) {  	// Add  	DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  }  else if (point.State == PointState.Persist) {  	// Persist  	DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if (point.State == PointState.Add) {  	// Add  	DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  }  else if (point.State == PointState.Persist) {  	// Persist  	DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if (point.State == PointState.Add) {  	// Add  	DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  }  else if (point.State == PointState.Persist) {  	// Persist  	DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if (point.State == PointState.Add) {  	// Add  	DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  }  else if (point.State == PointState.Persist) {  	// Persist  	DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if (point.State == PointState.Add) {  	// Add  	DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  }  else if (point.State == PointState.Persist) {  	// Persist  	DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if (point.State == PointState.Add) {  	// Add  	DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  }  else if (point.State == PointState.Persist) {  	// Persist  	DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if (point.State == PointState.Add) {  	// Add  	DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  }  else if (point.State == PointState.Persist) {  	// Persist  	DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if (point.State == PointState.Add) {  	// Add  	DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  }  else if (point.State == PointState.Persist) {  	// Persist  	DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 243' 77));  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if (point.State == PointState.Persist) {  	// Persist  	DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if (point.State == PointState.Persist) {  	// Persist  	DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if (point.State == PointState.Persist) {  	// Persist  	DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if (point.State == PointState.Persist) {  	// Persist  	DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: DrawPoint (point.Position' 0.1f' Color.FromArgb (255' 77' 77' 243));  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if ((Flags & DebugViewFlags.ContactNormals) == DebugViewFlags.ContactNormals) {  	Vector2 p1 = point.Position;  	Vector2 p2 = p1 + axisScale * point.Normal;  	DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if ((Flags & DebugViewFlags.ContactNormals) == DebugViewFlags.ContactNormals) {  	Vector2 p1 = point.Position;  	Vector2 p2 = p1 + axisScale * point.Normal;  	DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if ((Flags & DebugViewFlags.ContactNormals) == DebugViewFlags.ContactNormals) {  	Vector2 p1 = point.Position;  	Vector2 p2 = p1 + axisScale * point.Normal;  	DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if ((Flags & DebugViewFlags.ContactNormals) == DebugViewFlags.ContactNormals) {  	Vector2 p1 = point.Position;  	Vector2 p2 = p1 + axisScale * point.Normal;  	DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: DrawSegment (p1' p2' Color.FromArgb (255' 102' 230' 102));  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if ((Flags & DebugViewFlags.Pair) == DebugViewFlags.Pair) {  	Color color = Color.FromArgb (255' 77' 230' 230);  	for (int i = 0; i < World.ContactManager.ContactList.Count; i++) {  		Contact c = World.ContactManager.ContactList [i];  		Fixture fixtureA = c.FixtureA;  		Fixture fixtureB = c.FixtureB;  		AABB aabbA;  		fixtureA.GetAABB (out aabbA' 0);  		AABB aabbB;  		fixtureB.GetAABB (out aabbB' 0);  		Vector2 cA = aabbA.Center;  		Vector2 cB = aabbB.Center;  		DrawSegment (cA' cB' color);  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if ((Flags & DebugViewFlags.Pair) == DebugViewFlags.Pair) {  	Color color = Color.FromArgb (255' 77' 230' 230);  	for (int i = 0; i < World.ContactManager.ContactList.Count; i++) {  		Contact c = World.ContactManager.ContactList [i];  		Fixture fixtureA = c.FixtureA;  		Fixture fixtureB = c.FixtureB;  		AABB aabbA;  		fixtureA.GetAABB (out aabbA' 0);  		AABB aabbB;  		fixtureB.GetAABB (out aabbB' 0);  		Vector2 cA = aabbA.Center;  		Vector2 cB = aabbB.Center;  		DrawSegment (cA' cB' color);  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if ((Flags & DebugViewFlags.Pair) == DebugViewFlags.Pair) {  	Color color = Color.FromArgb (255' 77' 230' 230);  	for (int i = 0; i < World.ContactManager.ContactList.Count; i++) {  		Contact c = World.ContactManager.ContactList [i];  		Fixture fixtureA = c.FixtureA;  		Fixture fixtureB = c.FixtureB;  		AABB aabbA;  		fixtureA.GetAABB (out aabbA' 0);  		AABB aabbB;  		fixtureB.GetAABB (out aabbB' 0);  		Vector2 cA = aabbA.Center;  		Vector2 cB = aabbB.Center;  		DrawSegment (cA' cB' color);  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if ((Flags & DebugViewFlags.Pair) == DebugViewFlags.Pair) {  	Color color = Color.FromArgb (255' 77' 230' 230);  	for (int i = 0; i < World.ContactManager.ContactList.Count; i++) {  		Contact c = World.ContactManager.ContactList [i];  		Fixture fixtureA = c.FixtureA;  		Fixture fixtureB = c.FixtureB;  		AABB aabbA;  		fixtureA.GetAABB (out aabbA' 0);  		AABB aabbB;  		fixtureB.GetAABB (out aabbB' 0);  		Vector2 cA = aabbA.Center;  		Vector2 cB = aabbB.Center;  		DrawSegment (cA' cB' color);  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if ((Flags & DebugViewFlags.AABB) == DebugViewFlags.AABB) {  	Color color = Color.FromArgb (255' 230' 77' 230);  	IBroadPhase bp = World.ContactManager.BroadPhase;  	foreach (Body b in World.BodyList) {  		if (b.Enabled == false) {  			continue;  		}  		foreach (Fixture f in b.FixtureList) {  			for (int t = 0; t < f.ProxyCount; ++t) {  				FixtureProxy proxy = f.Proxies [t];  				AABB aabb;  				bp.GetFatAABB (proxy.ProxyId' out aabb);  				Vector2[] vs = new Vector2[4];  				vs [0] = new Vector2 (aabb.LowerBound.X' aabb.LowerBound.Y);  				vs [1] = new Vector2 (aabb.UpperBound.X' aabb.LowerBound.Y);  				vs [2] = new Vector2 (aabb.UpperBound.X' aabb.UpperBound.Y);  				vs [3] = new Vector2 (aabb.LowerBound.X' aabb.UpperBound.Y);  				DrawPolygon (vs' 4' color);  			}  		}  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if ((Flags & DebugViewFlags.AABB) == DebugViewFlags.AABB) {  	Color color = Color.FromArgb (255' 230' 77' 230);  	IBroadPhase bp = World.ContactManager.BroadPhase;  	foreach (Body b in World.BodyList) {  		if (b.Enabled == false) {  			continue;  		}  		foreach (Fixture f in b.FixtureList) {  			for (int t = 0; t < f.ProxyCount; ++t) {  				FixtureProxy proxy = f.Proxies [t];  				AABB aabb;  				bp.GetFatAABB (proxy.ProxyId' out aabb);  				Vector2[] vs = new Vector2[4];  				vs [0] = new Vector2 (aabb.LowerBound.X' aabb.LowerBound.Y);  				vs [1] = new Vector2 (aabb.UpperBound.X' aabb.LowerBound.Y);  				vs [2] = new Vector2 (aabb.UpperBound.X' aabb.UpperBound.Y);  				vs [3] = new Vector2 (aabb.LowerBound.X' aabb.UpperBound.Y);  				DrawPolygon (vs' 4' color);  			}  		}  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if ((Flags & DebugViewFlags.AABB) == DebugViewFlags.AABB) {  	Color color = Color.FromArgb (255' 230' 77' 230);  	IBroadPhase bp = World.ContactManager.BroadPhase;  	foreach (Body b in World.BodyList) {  		if (b.Enabled == false) {  			continue;  		}  		foreach (Fixture f in b.FixtureList) {  			for (int t = 0; t < f.ProxyCount; ++t) {  				FixtureProxy proxy = f.Proxies [t];  				AABB aabb;  				bp.GetFatAABB (proxy.ProxyId' out aabb);  				Vector2[] vs = new Vector2[4];  				vs [0] = new Vector2 (aabb.LowerBound.X' aabb.LowerBound.Y);  				vs [1] = new Vector2 (aabb.UpperBound.X' aabb.LowerBound.Y);  				vs [2] = new Vector2 (aabb.UpperBound.X' aabb.UpperBound.Y);  				vs [3] = new Vector2 (aabb.LowerBound.X' aabb.UpperBound.Y);  				DrawPolygon (vs' 4' color);  			}  		}  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if ((Flags & DebugViewFlags.AABB) == DebugViewFlags.AABB) {  	Color color = Color.FromArgb (255' 230' 77' 230);  	IBroadPhase bp = World.ContactManager.BroadPhase;  	foreach (Body b in World.BodyList) {  		if (b.Enabled == false) {  			continue;  		}  		foreach (Fixture f in b.FixtureList) {  			for (int t = 0; t < f.ProxyCount; ++t) {  				FixtureProxy proxy = f.Proxies [t];  				AABB aabb;  				bp.GetFatAABB (proxy.ProxyId' out aabb);  				Vector2[] vs = new Vector2[4];  				vs [0] = new Vector2 (aabb.LowerBound.X' aabb.LowerBound.Y);  				vs [1] = new Vector2 (aabb.UpperBound.X' aabb.LowerBound.Y);  				vs [2] = new Vector2 (aabb.UpperBound.X' aabb.UpperBound.Y);  				vs [3] = new Vector2 (aabb.LowerBound.X' aabb.UpperBound.Y);  				DrawPolygon (vs' 4' color);  			}  		}  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if ((Flags & DebugViewFlags.AABB) == DebugViewFlags.AABB) {  	Color color = Color.FromArgb (255' 230' 77' 230);  	IBroadPhase bp = World.ContactManager.BroadPhase;  	foreach (Body b in World.BodyList) {  		if (b.Enabled == false) {  			continue;  		}  		foreach (Fixture f in b.FixtureList) {  			for (int t = 0; t < f.ProxyCount; ++t) {  				FixtureProxy proxy = f.Proxies [t];  				AABB aabb;  				bp.GetFatAABB (proxy.ProxyId' out aabb);  				Vector2[] vs = new Vector2[4];  				vs [0] = new Vector2 (aabb.LowerBound.X' aabb.LowerBound.Y);  				vs [1] = new Vector2 (aabb.UpperBound.X' aabb.LowerBound.Y);  				vs [2] = new Vector2 (aabb.UpperBound.X' aabb.UpperBound.Y);  				vs [3] = new Vector2 (aabb.LowerBound.X' aabb.UpperBound.Y);  				DrawPolygon (vs' 4' color);  			}  		}  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if ((Flags & DebugViewFlags.AABB) == DebugViewFlags.AABB) {  	Color color = Color.FromArgb (255' 230' 77' 230);  	IBroadPhase bp = World.ContactManager.BroadPhase;  	foreach (Body b in World.BodyList) {  		if (b.Enabled == false) {  			continue;  		}  		foreach (Fixture f in b.FixtureList) {  			for (int t = 0; t < f.ProxyCount; ++t) {  				FixtureProxy proxy = f.Proxies [t];  				AABB aabb;  				bp.GetFatAABB (proxy.ProxyId' out aabb);  				Vector2[] vs = new Vector2[4];  				vs [0] = new Vector2 (aabb.LowerBound.X' aabb.LowerBound.Y);  				vs [1] = new Vector2 (aabb.UpperBound.X' aabb.LowerBound.Y);  				vs [2] = new Vector2 (aabb.UpperBound.X' aabb.UpperBound.Y);  				vs [3] = new Vector2 (aabb.LowerBound.X' aabb.UpperBound.Y);  				DrawPolygon (vs' 4' color);  			}  		}  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if ((Flags & DebugViewFlags.AABB) == DebugViewFlags.AABB) {  	Color color = Color.FromArgb (255' 230' 77' 230);  	IBroadPhase bp = World.ContactManager.BroadPhase;  	foreach (Body b in World.BodyList) {  		if (b.Enabled == false) {  			continue;  		}  		foreach (Fixture f in b.FixtureList) {  			for (int t = 0; t < f.ProxyCount; ++t) {  				FixtureProxy proxy = f.Proxies [t];  				AABB aabb;  				bp.GetFatAABB (proxy.ProxyId' out aabb);  				Vector2[] vs = new Vector2[4];  				vs [0] = new Vector2 (aabb.LowerBound.X' aabb.LowerBound.Y);  				vs [1] = new Vector2 (aabb.UpperBound.X' aabb.LowerBound.Y);  				vs [2] = new Vector2 (aabb.UpperBound.X' aabb.UpperBound.Y);  				vs [3] = new Vector2 (aabb.LowerBound.X' aabb.UpperBound.Y);  				DrawPolygon (vs' 4' color);  			}  		}  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: if ((Flags & DebugViewFlags.AABB) == DebugViewFlags.AABB) {  	Color color = Color.FromArgb (255' 230' 77' 230);  	IBroadPhase bp = World.ContactManager.BroadPhase;  	foreach (Body b in World.BodyList) {  		if (b.Enabled == false) {  			continue;  		}  		foreach (Fixture f in b.FixtureList) {  			for (int t = 0; t < f.ProxyCount; ++t) {  				FixtureProxy proxy = f.Proxies [t];  				AABB aabb;  				bp.GetFatAABB (proxy.ProxyId' out aabb);  				Vector2[] vs = new Vector2[4];  				vs [0] = new Vector2 (aabb.LowerBound.X' aabb.LowerBound.Y);  				vs [1] = new Vector2 (aabb.UpperBound.X' aabb.LowerBound.Y);  				vs [2] = new Vector2 (aabb.UpperBound.X' aabb.UpperBound.Y);  				vs [3] = new Vector2 (aabb.LowerBound.X' aabb.UpperBound.Y);  				DrawPolygon (vs' 4' color);  			}  		}  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: foreach (Body b in World.BodyList) {  	if (b.Enabled == false) {  		continue;  	}  	foreach (Fixture f in b.FixtureList) {  		for (int t = 0; t < f.ProxyCount; ++t) {  			FixtureProxy proxy = f.Proxies [t];  			AABB aabb;  			bp.GetFatAABB (proxy.ProxyId' out aabb);  			Vector2[] vs = new Vector2[4];  			vs [0] = new Vector2 (aabb.LowerBound.X' aabb.LowerBound.Y);  			vs [1] = new Vector2 (aabb.UpperBound.X' aabb.LowerBound.Y);  			vs [2] = new Vector2 (aabb.UpperBound.X' aabb.UpperBound.Y);  			vs [3] = new Vector2 (aabb.LowerBound.X' aabb.UpperBound.Y);  			DrawPolygon (vs' 4' color);  		}  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: foreach (Body b in World.BodyList) {  	if (b.Enabled == false) {  		continue;  	}  	foreach (Fixture f in b.FixtureList) {  		for (int t = 0; t < f.ProxyCount; ++t) {  			FixtureProxy proxy = f.Proxies [t];  			AABB aabb;  			bp.GetFatAABB (proxy.ProxyId' out aabb);  			Vector2[] vs = new Vector2[4];  			vs [0] = new Vector2 (aabb.LowerBound.X' aabb.LowerBound.Y);  			vs [1] = new Vector2 (aabb.UpperBound.X' aabb.LowerBound.Y);  			vs [2] = new Vector2 (aabb.UpperBound.X' aabb.UpperBound.Y);  			vs [3] = new Vector2 (aabb.LowerBound.X' aabb.UpperBound.Y);  			DrawPolygon (vs' 4' color);  		}  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: foreach (Body b in World.BodyList) {  	if (b.Enabled == false) {  		continue;  	}  	foreach (Fixture f in b.FixtureList) {  		for (int t = 0; t < f.ProxyCount; ++t) {  			FixtureProxy proxy = f.Proxies [t];  			AABB aabb;  			bp.GetFatAABB (proxy.ProxyId' out aabb);  			Vector2[] vs = new Vector2[4];  			vs [0] = new Vector2 (aabb.LowerBound.X' aabb.LowerBound.Y);  			vs [1] = new Vector2 (aabb.UpperBound.X' aabb.LowerBound.Y);  			vs [2] = new Vector2 (aabb.UpperBound.X' aabb.UpperBound.Y);  			vs [3] = new Vector2 (aabb.LowerBound.X' aabb.UpperBound.Y);  			DrawPolygon (vs' 4' color);  		}  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: foreach (Body b in World.BodyList) {  	if (b.Enabled == false) {  		continue;  	}  	foreach (Fixture f in b.FixtureList) {  		for (int t = 0; t < f.ProxyCount; ++t) {  			FixtureProxy proxy = f.Proxies [t];  			AABB aabb;  			bp.GetFatAABB (proxy.ProxyId' out aabb);  			Vector2[] vs = new Vector2[4];  			vs [0] = new Vector2 (aabb.LowerBound.X' aabb.LowerBound.Y);  			vs [1] = new Vector2 (aabb.UpperBound.X' aabb.LowerBound.Y);  			vs [2] = new Vector2 (aabb.UpperBound.X' aabb.UpperBound.Y);  			vs [3] = new Vector2 (aabb.LowerBound.X' aabb.UpperBound.Y);  			DrawPolygon (vs' 4' color);  		}  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: foreach (Fixture f in b.FixtureList) {  	for (int t = 0; t < f.ProxyCount; ++t) {  		FixtureProxy proxy = f.Proxies [t];  		AABB aabb;  		bp.GetFatAABB (proxy.ProxyId' out aabb);  		Vector2[] vs = new Vector2[4];  		vs [0] = new Vector2 (aabb.LowerBound.X' aabb.LowerBound.Y);  		vs [1] = new Vector2 (aabb.UpperBound.X' aabb.LowerBound.Y);  		vs [2] = new Vector2 (aabb.UpperBound.X' aabb.UpperBound.Y);  		vs [3] = new Vector2 (aabb.LowerBound.X' aabb.UpperBound.Y);  		DrawPolygon (vs' 4' color);  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: foreach (Fixture f in b.FixtureList) {  	for (int t = 0; t < f.ProxyCount; ++t) {  		FixtureProxy proxy = f.Proxies [t];  		AABB aabb;  		bp.GetFatAABB (proxy.ProxyId' out aabb);  		Vector2[] vs = new Vector2[4];  		vs [0] = new Vector2 (aabb.LowerBound.X' aabb.LowerBound.Y);  		vs [1] = new Vector2 (aabb.UpperBound.X' aabb.LowerBound.Y);  		vs [2] = new Vector2 (aabb.UpperBound.X' aabb.UpperBound.Y);  		vs [3] = new Vector2 (aabb.LowerBound.X' aabb.UpperBound.Y);  		DrawPolygon (vs' 4' color);  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: foreach (Fixture f in b.FixtureList) {  	for (int t = 0; t < f.ProxyCount; ++t) {  		FixtureProxy proxy = f.Proxies [t];  		AABB aabb;  		bp.GetFatAABB (proxy.ProxyId' out aabb);  		Vector2[] vs = new Vector2[4];  		vs [0] = new Vector2 (aabb.LowerBound.X' aabb.LowerBound.Y);  		vs [1] = new Vector2 (aabb.UpperBound.X' aabb.LowerBound.Y);  		vs [2] = new Vector2 (aabb.UpperBound.X' aabb.UpperBound.Y);  		vs [3] = new Vector2 (aabb.LowerBound.X' aabb.UpperBound.Y);  		DrawPolygon (vs' 4' color);  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: foreach (Fixture f in b.FixtureList) {  	for (int t = 0; t < f.ProxyCount; ++t) {  		FixtureProxy proxy = f.Proxies [t];  		AABB aabb;  		bp.GetFatAABB (proxy.ProxyId' out aabb);  		Vector2[] vs = new Vector2[4];  		vs [0] = new Vector2 (aabb.LowerBound.X' aabb.LowerBound.Y);  		vs [1] = new Vector2 (aabb.UpperBound.X' aabb.LowerBound.Y);  		vs [2] = new Vector2 (aabb.UpperBound.X' aabb.UpperBound.Y);  		vs [3] = new Vector2 (aabb.LowerBound.X' aabb.UpperBound.Y);  		DrawPolygon (vs' 4' color);  	}  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: for (int t = 0; t < f.ProxyCount; ++t) {  	FixtureProxy proxy = f.Proxies [t];  	AABB aabb;  	bp.GetFatAABB (proxy.ProxyId' out aabb);  	Vector2[] vs = new Vector2[4];  	vs [0] = new Vector2 (aabb.LowerBound.X' aabb.LowerBound.Y);  	vs [1] = new Vector2 (aabb.UpperBound.X' aabb.LowerBound.Y);  	vs [2] = new Vector2 (aabb.UpperBound.X' aabb.UpperBound.Y);  	vs [3] = new Vector2 (aabb.LowerBound.X' aabb.UpperBound.Y);  	DrawPolygon (vs' 4' color);  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: for (int t = 0; t < f.ProxyCount; ++t) {  	FixtureProxy proxy = f.Proxies [t];  	AABB aabb;  	bp.GetFatAABB (proxy.ProxyId' out aabb);  	Vector2[] vs = new Vector2[4];  	vs [0] = new Vector2 (aabb.LowerBound.X' aabb.LowerBound.Y);  	vs [1] = new Vector2 (aabb.UpperBound.X' aabb.LowerBound.Y);  	vs [2] = new Vector2 (aabb.UpperBound.X' aabb.UpperBound.Y);  	vs [3] = new Vector2 (aabb.LowerBound.X' aabb.UpperBound.Y);  	DrawPolygon (vs' 4' color);  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: for (int t = 0; t < f.ProxyCount; ++t) {  	FixtureProxy proxy = f.Proxies [t];  	AABB aabb;  	bp.GetFatAABB (proxy.ProxyId' out aabb);  	Vector2[] vs = new Vector2[4];  	vs [0] = new Vector2 (aabb.LowerBound.X' aabb.LowerBound.Y);  	vs [1] = new Vector2 (aabb.UpperBound.X' aabb.LowerBound.Y);  	vs [2] = new Vector2 (aabb.UpperBound.X' aabb.UpperBound.Y);  	vs [3] = new Vector2 (aabb.LowerBound.X' aabb.UpperBound.Y);  	DrawPolygon (vs' 4' color);  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: for (int t = 0; t < f.ProxyCount; ++t) {  	FixtureProxy proxy = f.Proxies [t];  	AABB aabb;  	bp.GetFatAABB (proxy.ProxyId' out aabb);  	Vector2[] vs = new Vector2[4];  	vs [0] = new Vector2 (aabb.LowerBound.X' aabb.LowerBound.Y);  	vs [1] = new Vector2 (aabb.UpperBound.X' aabb.LowerBound.Y);  	vs [2] = new Vector2 (aabb.UpperBound.X' aabb.UpperBound.Y);  	vs [3] = new Vector2 (aabb.LowerBound.X' aabb.UpperBound.Y);  	DrawPolygon (vs' 4' color);  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: vs [2] = new Vector2 (aabb.UpperBound.X' aabb.UpperBound.Y);  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: vs [3] = new Vector2 (aabb.LowerBound.X' aabb.UpperBound.Y);  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawDebugData,The following statement contains a magic number: DrawPolygon (vs' 4' color);  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawTooltip,The following statement contains a magic number: if (count == 2) {  	DrawPolygon (vertices' count' color);  	return;  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,SetTooltipText,The following statement contains a magic number: if (!string.IsNullOrEmpty (description.Text) && description.Text != "Static") {  	TextBlock text = new TextBlock ();  	text.Text = description.Text;  	var textSize = (Size)description.Size;  	text.Width = textSize.Width * 8;  	text.FontWeight = FontWeights.SemiBold;  	text.TextWrapping = TextWrapping.WrapWithOverflow;  	text.TextAlignment = TextAlignment.Left;  	//text.Background = new SolidColorBrush(Colors.AliceBlue);  	Point position = Transform.Transform (new Point (body.Position.X' body.Position.Y));  	Canvas.SetLeft (text' position.X - textSize.Width * 3.7);  	Canvas.SetTop (text' position.Y - textSize.Height * 8);  	return text;  }  else  	return null;  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,SetTooltipText,The following statement contains a magic number: if (!string.IsNullOrEmpty (description.Text) && description.Text != "Static") {  	TextBlock text = new TextBlock ();  	text.Text = description.Text;  	var textSize = (Size)description.Size;  	text.Width = textSize.Width * 8;  	text.FontWeight = FontWeights.SemiBold;  	text.TextWrapping = TextWrapping.WrapWithOverflow;  	text.TextAlignment = TextAlignment.Left;  	//text.Background = new SolidColorBrush(Colors.AliceBlue);  	Point position = Transform.Transform (new Point (body.Position.X' body.Position.Y));  	Canvas.SetLeft (text' position.X - textSize.Width * 3.7);  	Canvas.SetTop (text' position.Y - textSize.Height * 8);  	return text;  }  else  	return null;  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,SetTooltipText,The following statement contains a magic number: if (!string.IsNullOrEmpty (description.Text) && description.Text != "Static") {  	TextBlock text = new TextBlock ();  	text.Text = description.Text;  	var textSize = (Size)description.Size;  	text.Width = textSize.Width * 8;  	text.FontWeight = FontWeights.SemiBold;  	text.TextWrapping = TextWrapping.WrapWithOverflow;  	text.TextAlignment = TextAlignment.Left;  	//text.Background = new SolidColorBrush(Colors.AliceBlue);  	Point position = Transform.Transform (new Point (body.Position.X' body.Position.Y));  	Canvas.SetLeft (text' position.X - textSize.Width * 3.7);  	Canvas.SetTop (text' position.Y - textSize.Height * 8);  	return text;  }  else  	return null;  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,SetTooltipText,The following statement contains a magic number: text.Width = textSize.Width * 8;  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,SetTooltipText,The following statement contains a magic number: Canvas.SetLeft (text' position.X - textSize.Width * 3.7);  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,SetTooltipText,The following statement contains a magic number: Canvas.SetTop (text' position.Y - textSize.Height * 8);  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,SetNodeText,The following statement contains a magic number: if (!string.IsNullOrEmpty (bodyDescription.Text) && bodyDescription.Text != "Static") {  	var radius = (float)bodyDescription.Size;  	TextBlock text = new TextBlock ();  	text.Text = bodyDescription.Text.Replace (' '' '\n');  	text.Width = radius * 13;  	text.FontSize = text.Width / 6;  	text.TextWrapping = TextWrapping.WrapWithOverflow;  	text.TextAlignment = TextAlignment.Center;  	//text.Background = new SolidColorBrush(Colors.AliceBlue);  	Point position = Transform.Transform (new Point (body.Position.X' body.Position.Y));  	Canvas.SetLeft (text' position.X - (radius * 6.5));  	Canvas.SetTop (text' position.Y - (radius * 3));  	return text;  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,SetNodeText,The following statement contains a magic number: if (!string.IsNullOrEmpty (bodyDescription.Text) && bodyDescription.Text != "Static") {  	var radius = (float)bodyDescription.Size;  	TextBlock text = new TextBlock ();  	text.Text = bodyDescription.Text.Replace (' '' '\n');  	text.Width = radius * 13;  	text.FontSize = text.Width / 6;  	text.TextWrapping = TextWrapping.WrapWithOverflow;  	text.TextAlignment = TextAlignment.Center;  	//text.Background = new SolidColorBrush(Colors.AliceBlue);  	Point position = Transform.Transform (new Point (body.Position.X' body.Position.Y));  	Canvas.SetLeft (text' position.X - (radius * 6.5));  	Canvas.SetTop (text' position.Y - (radius * 3));  	return text;  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,SetNodeText,The following statement contains a magic number: if (!string.IsNullOrEmpty (bodyDescription.Text) && bodyDescription.Text != "Static") {  	var radius = (float)bodyDescription.Size;  	TextBlock text = new TextBlock ();  	text.Text = bodyDescription.Text.Replace (' '' '\n');  	text.Width = radius * 13;  	text.FontSize = text.Width / 6;  	text.TextWrapping = TextWrapping.WrapWithOverflow;  	text.TextAlignment = TextAlignment.Center;  	//text.Background = new SolidColorBrush(Colors.AliceBlue);  	Point position = Transform.Transform (new Point (body.Position.X' body.Position.Y));  	Canvas.SetLeft (text' position.X - (radius * 6.5));  	Canvas.SetTop (text' position.Y - (radius * 3));  	return text;  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,SetNodeText,The following statement contains a magic number: if (!string.IsNullOrEmpty (bodyDescription.Text) && bodyDescription.Text != "Static") {  	var radius = (float)bodyDescription.Size;  	TextBlock text = new TextBlock ();  	text.Text = bodyDescription.Text.Replace (' '' '\n');  	text.Width = radius * 13;  	text.FontSize = text.Width / 6;  	text.TextWrapping = TextWrapping.WrapWithOverflow;  	text.TextAlignment = TextAlignment.Center;  	//text.Background = new SolidColorBrush(Colors.AliceBlue);  	Point position = Transform.Transform (new Point (body.Position.X' body.Position.Y));  	Canvas.SetLeft (text' position.X - (radius * 6.5));  	Canvas.SetTop (text' position.Y - (radius * 3));  	return text;  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,SetNodeText,The following statement contains a magic number: text.Width = radius * 13;  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,SetNodeText,The following statement contains a magic number: text.FontSize = text.Width / 6;  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,SetNodeText,The following statement contains a magic number: Canvas.SetLeft (text' position.X - (radius * 6.5));  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,SetNodeText,The following statement contains a magic number: Canvas.SetTop (text' position.Y - (radius * 3));  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawPolygon,The following statement contains a magic number: DrawPolygon (vertices' count' Color.FromArgb (255' (byte)(red * 255)' (byte)(green * 255)' (byte)(blue * 255)));  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawPolygon,The following statement contains a magic number: DrawPolygon (vertices' count' Color.FromArgb (255' (byte)(red * 255)' (byte)(green * 255)' (byte)(blue * 255)));  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawPolygon,The following statement contains a magic number: DrawPolygon (vertices' count' Color.FromArgb (255' (byte)(red * 255)' (byte)(green * 255)' (byte)(blue * 255)));  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawPolygon,The following statement contains a magic number: DrawPolygon (vertices' count' Color.FromArgb (255' (byte)(red * 255)' (byte)(green * 255)' (byte)(blue * 255)));  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawSolidPolygon,The following statement contains a magic number: DrawSolidPolygon (vertices' count' Color.FromArgb (255' (byte)(red * 255)' (byte)(green * 255)' (byte)(blue * 255))' true);  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawSolidPolygon,The following statement contains a magic number: DrawSolidPolygon (vertices' count' Color.FromArgb (255' (byte)(red * 255)' (byte)(green * 255)' (byte)(blue * 255))' true);  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawSolidPolygon,The following statement contains a magic number: DrawSolidPolygon (vertices' count' Color.FromArgb (255' (byte)(red * 255)' (byte)(green * 255)' (byte)(blue * 255))' true);  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawSolidPolygon,The following statement contains a magic number: DrawSolidPolygon (vertices' count' Color.FromArgb (255' (byte)(red * 255)' (byte)(green * 255)' (byte)(blue * 255))' true);  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawSolidPolygon,The following statement contains a magic number: if (count == 2) {  	DrawPolygon (vertices' count' color);  	return;  }  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawCircle,The following statement contains a magic number: DrawCircle (center' radius' Color.FromArgb (255' (byte)(red * 255)' (byte)(green * 255)' (byte)(blue * 255)));  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawCircle,The following statement contains a magic number: DrawCircle (center' radius' Color.FromArgb (255' (byte)(red * 255)' (byte)(green * 255)' (byte)(blue * 255)));  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawCircle,The following statement contains a magic number: DrawCircle (center' radius' Color.FromArgb (255' (byte)(red * 255)' (byte)(green * 255)' (byte)(blue * 255)));  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawCircle,The following statement contains a magic number: DrawCircle (center' radius' Color.FromArgb (255' (byte)(red * 255)' (byte)(green * 255)' (byte)(blue * 255)));  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawCircle,The following statement contains a magic number: circle.Width = Math.Abs (radius * 2 * ((TranslateTransform)Transform.Children [1]).X);  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawCircle,The following statement contains a magic number: circle.Height = Math.Abs (radius * 2 * ((TranslateTransform)Transform.Children [1]).Y);  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawCircle,The following statement contains a magic number: Canvas.SetLeft (circle' c.X - circle.Width / 2);  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawCircle,The following statement contains a magic number: Canvas.SetTop (circle' c.Y - circle.Height / 2);  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawSolidCircle,The following statement contains a magic number: DrawSolidCircle (center' radius' axis' Color.FromArgb (255' (byte)(red * 255)' (byte)(green * 255)' (byte)(blue * 255)));  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawSolidCircle,The following statement contains a magic number: DrawSolidCircle (center' radius' axis' Color.FromArgb (255' (byte)(red * 255)' (byte)(green * 255)' (byte)(blue * 255)));  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawSolidCircle,The following statement contains a magic number: DrawSolidCircle (center' radius' axis' Color.FromArgb (255' (byte)(red * 255)' (byte)(green * 255)' (byte)(blue * 255)));  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawSolidCircle,The following statement contains a magic number: DrawSolidCircle (center' radius' axis' Color.FromArgb (255' (byte)(red * 255)' (byte)(green * 255)' (byte)(blue * 255)));  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawSolidCircle,The following statement contains a magic number: circle.Width = Math.Abs (radius * 2 * ((TranslateTransform)Transform.Children [1]).X);  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawSolidCircle,The following statement contains a magic number: circle.Height = Math.Abs (radius * 2 * ((TranslateTransform)Transform.Children [1]).Y);  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawSolidCircle,The following statement contains a magic number: Canvas.SetLeft (circle' c.X - circle.Width / 2);  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawSolidCircle,The following statement contains a magic number: Canvas.SetTop (circle' c.Y - circle.Height / 2);  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawSegment,The following statement contains a magic number: DrawSegment (start' end' Color.FromArgb (255' (byte)(red * 255)' (byte)(green * 255)' (byte)(blue * 255)));  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawSegment,The following statement contains a magic number: DrawSegment (start' end' Color.FromArgb (255' (byte)(red * 255)' (byte)(green * 255)' (byte)(blue * 255)));  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawSegment,The following statement contains a magic number: DrawSegment (start' end' Color.FromArgb (255' (byte)(red * 255)' (byte)(green * 255)' (byte)(blue * 255)));  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawSegment,The following statement contains a magic number: DrawSegment (start' end' Color.FromArgb (255' (byte)(red * 255)' (byte)(green * 255)' (byte)(blue * 255)));  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawSegment,The following statement contains a magic number: line.StrokeThickness = 3;  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawPoint,The following statement contains a magic number: verts [2] = p + new Vector2 (hs' hs);  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawPoint,The following statement contains a magic number: verts [3] = p + new Vector2 (-hs' hs);  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawPoint,The following statement contains a magic number: DrawSolidPolygon (verts' 4' color' true);  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawAABB,The following statement contains a magic number: verts [2] = new Vector2 (aabb.UpperBound.X' aabb.UpperBound.Y);  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawAABB,The following statement contains a magic number: verts [3] = new Vector2 (aabb.LowerBound.X' aabb.UpperBound.Y);  
Magic Number,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawAABB,The following statement contains a magic number: DrawPolygon (verts' 4' color);  
Missing Default,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawShape,The following switch statement is missing a default case: switch (fixture.ShapeType) {  case ShapeType.Circle:  	{  		CircleShape circle = (CircleShape)fixture.Shape;  		Vector2 center = MathUtils.Multiply (ref xf' circle.Position);  		float radius = circle.Radius;  		Vector2 axis = xf.R.Col1;  		DrawSolidCircle (center' radius' axis' color);  	}  	break;  case ShapeType.Polygon:  	{  		PolygonShape poly = (PolygonShape)fixture.Shape;  		int vertexCount = poly.Vertices.Count;  		Debug.Assert (vertexCount <= Settings.MaxPolygonVertices);  		Vector2[] vertices = new Vector2[Settings.MaxPolygonVertices];  		for (int i = 0; i < vertexCount; ++i) {  			vertices [i] = MathUtils.Multiply (ref xf' poly.Vertices [i]);  		}  		if (fixture.UserData == null) {  			fixture.UserData = string.Empty;  		}  		var bodyDescription = fixture.Body.UserData as BodyDescription;  		if (bodyDescription == null) {  			DrawSolidPolygon (vertices' vertexCount' color);  		}  		else {  			switch (bodyDescription.FigureType) {  			case FigureType.Node:  				DrawNode (vertices' vertexCount' fillcolor' color' bodyDescription' fixture.Body);  				break;  			case FigureType.Tooltip:  				DrawTooltip (vertices' vertexCount' color' true' bodyDescription' fixture.Body);  				break;  			}  		}  	}  	break;  case ShapeType.Edge:  	{  		EdgeShape edge = (EdgeShape)fixture.Shape;  		Vector2 v1 = MathUtils.Multiply (ref xf' edge.Vertex1);  		Vector2 v2 = MathUtils.Multiply (ref xf' edge.Vertex2);  		DrawSegment (v1' v2' color);  	}  	break;  case ShapeType.Loop:  	{  		LoopShape loop = (LoopShape)fixture.Shape;  		int count = loop.Vertices.Count;  		Vector2 v1 = MathUtils.Multiply (ref xf' loop.Vertices [count - 1]);  		for (int i = 0; i < count; ++i) {  			Vector2 v2 = MathUtils.Multiply (ref xf' loop.Vertices [i]);  			DrawSegment (v1' v2' color);  			v1 = v2;  		}  	}  	break;  }  
Missing Default,Endava.DependencyGraph,DebugViewGraph,C:\repos\andreipopescu_DependencyGraph\DebugView\DebugViewGraph.cs,DrawShape,The following switch statement is missing a default case: switch (bodyDescription.FigureType) {  case FigureType.Node:  	DrawNode (vertices' vertexCount' fillcolor' color' bodyDescription' fixture.Body);  	break;  case FigureType.Tooltip:  	DrawTooltip (vertices' vertexCount' color' true' bodyDescription' fixture.Body);  	break;  }  
