Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Endava.DependencyGraph.ScreenSystem,GameScreen,C:\repos\andreipopescu_DependencyGraph\Physics Components\ScreenSystem\GameScreen.cs,MouseDown,Cyclomatic complexity of the method is 8
Long Statement,Endava.DependencyGraph.ScreenSystem,GameScreen,C:\repos\andreipopescu_DependencyGraph\Physics Components\ScreenSystem\GameScreen.cs,Initialize,The length of the statement  "		Transform.Children.Add (new ScaleTransform (DebugCanvas.ActualWidth / ScreenManager.ScreenWidth' -DebugCanvas.ActualHeight / ScreenManager.ScreenHeight)); " is 154.
Magic Number,Endava.DependencyGraph.Components,Border,C:\repos\andreipopescu_DependencyGraph\Physics Components\Components\Border.cs,Border,The following statement contains a magic number: borders.Add (PolygonTools.CreateRectangle (width' borderWidth' new Vector2 (0' (height / 2))' 0));  
Magic Number,Endava.DependencyGraph.Components,Border,C:\repos\andreipopescu_DependencyGraph\Physics Components\Components\Border.cs,Border,The following statement contains a magic number: borders.Add (PolygonTools.CreateRectangle (borderWidth' height' new Vector2 (-(width / 2)' 0)' 0));  
Magic Number,Endava.DependencyGraph.Components,Border,C:\repos\andreipopescu_DependencyGraph\Physics Components\Components\Border.cs,Border,The following statement contains a magic number: borders.Add (PolygonTools.CreateRectangle (width' borderWidth' new Vector2 (0' -height / 2)' 0));  
Magic Number,Endava.DependencyGraph.Components,Border,C:\repos\andreipopescu_DependencyGraph\Physics Components\Components\Border.cs,Border,The following statement contains a magic number: borders.Add (PolygonTools.CreateRectangle (borderWidth' height' new Vector2 ((width / 2)' 0)' 0));  
Magic Number,Endava.DependencyGraph,Game,C:\repos\andreipopescu_DependencyGraph\Physics Components\Game.cs,Game,The following statement contains a magic number: TargetElapsedTime = new TimeSpan (0' 0' 0' 0' 16);  
Magic Number,Endava.DependencyGraph,Game,C:\repos\andreipopescu_DependencyGraph\Physics Components\Game.cs,Game,The following statement contains a magic number: _timer.Interval = new TimeSpan (0' 0' 0' 0' 16);  
Magic Number,Endava.DependencyGraph.ScreenSystem,GameScreen,C:\repos\andreipopescu_DependencyGraph\Physics Components\ScreenSystem\GameScreen.cs,Initialize,The following statement contains a magic number: if (DebugCanvas != null) {  	Transform.Children.Add (new ScaleTransform (DebugCanvas.ActualWidth / ScreenManager.ScreenWidth' -DebugCanvas.ActualHeight / ScreenManager.ScreenHeight));  	Transform.Children.Add (new TranslateTransform (DebugCanvas.ActualWidth / 2' DebugCanvas.ActualHeight / 2));  	//DebugView  	DebugView = new DebugViewGraph (DebugCanvas' TxtDebug' World);  	DebugView.DefaultShapeColor = Colors.White;  	DebugView.SleepingShapeColor = Colors.LightGray;  	DebugView.Transform = Transform;  }  
Magic Number,Endava.DependencyGraph.ScreenSystem,GameScreen,C:\repos\andreipopescu_DependencyGraph\Physics Components\ScreenSystem\GameScreen.cs,Initialize,The following statement contains a magic number: if (DebugCanvas != null) {  	Transform.Children.Add (new ScaleTransform (DebugCanvas.ActualWidth / ScreenManager.ScreenWidth' -DebugCanvas.ActualHeight / ScreenManager.ScreenHeight));  	Transform.Children.Add (new TranslateTransform (DebugCanvas.ActualWidth / 2' DebugCanvas.ActualHeight / 2));  	//DebugView  	DebugView = new DebugViewGraph (DebugCanvas' TxtDebug' World);  	DebugView.DefaultShapeColor = Colors.White;  	DebugView.SleepingShapeColor = Colors.LightGray;  	DebugView.Transform = Transform;  }  
Magic Number,Endava.DependencyGraph.ScreenSystem,GameScreen,C:\repos\andreipopescu_DependencyGraph\Physics Components\ScreenSystem\GameScreen.cs,Initialize,The following statement contains a magic number: Transform.Children.Add (new TranslateTransform (DebugCanvas.ActualWidth / 2' DebugCanvas.ActualHeight / 2));  
Magic Number,Endava.DependencyGraph.ScreenSystem,GameScreen,C:\repos\andreipopescu_DependencyGraph\Physics Components\ScreenSystem\GameScreen.cs,Initialize,The following statement contains a magic number: Transform.Children.Add (new TranslateTransform (DebugCanvas.ActualWidth / 2' DebugCanvas.ActualHeight / 2));  
Magic Number,Endava.DependencyGraph.ScreenSystem,GameScreen,C:\repos\andreipopescu_DependencyGraph\Physics Components\ScreenSystem\GameScreen.cs,LoadContent,The following statement contains a magic number: if (World != null) {  	new Border (World' ScreenManager.ScreenWidth' ScreenManager.ScreenHeight' 2);  }  
Magic Number,Endava.DependencyGraph.ScreenSystem,GameScreen,C:\repos\andreipopescu_DependencyGraph\Physics Components\ScreenSystem\GameScreen.cs,LoadContent,The following statement contains a magic number: new Border (World' ScreenManager.ScreenWidth' ScreenManager.ScreenHeight' 2);  
Magic Number,Endava.DependencyGraph.ScreenSystem,GameScreen,C:\repos\andreipopescu_DependencyGraph\Physics Components\ScreenSystem\GameScreen.cs,Update,The following statement contains a magic number: if (!coveredByOtherScreen && !otherScreenHasFocus) {  	if (World != null) {  		// variable time step but never less then 30 Hz  		World.Step (Math.Min ((float)gameTime.ElapsedGameTime.TotalMilliseconds * 0.001f' (1f / 30f)));  		Settings.VelocityIterations = 5;  		Settings.PositionIterations = 3;  	}  }  
Magic Number,Endava.DependencyGraph.ScreenSystem,GameScreen,C:\repos\andreipopescu_DependencyGraph\Physics Components\ScreenSystem\GameScreen.cs,Update,The following statement contains a magic number: if (!coveredByOtherScreen && !otherScreenHasFocus) {  	if (World != null) {  		// variable time step but never less then 30 Hz  		World.Step (Math.Min ((float)gameTime.ElapsedGameTime.TotalMilliseconds * 0.001f' (1f / 30f)));  		Settings.VelocityIterations = 5;  		Settings.PositionIterations = 3;  	}  }  
Magic Number,Endava.DependencyGraph.ScreenSystem,GameScreen,C:\repos\andreipopescu_DependencyGraph\Physics Components\ScreenSystem\GameScreen.cs,Update,The following statement contains a magic number: if (World != null) {  	// variable time step but never less then 30 Hz  	World.Step (Math.Min ((float)gameTime.ElapsedGameTime.TotalMilliseconds * 0.001f' (1f / 30f)));  	Settings.VelocityIterations = 5;  	Settings.PositionIterations = 3;  }  
Magic Number,Endava.DependencyGraph.ScreenSystem,GameScreen,C:\repos\andreipopescu_DependencyGraph\Physics Components\ScreenSystem\GameScreen.cs,Update,The following statement contains a magic number: if (World != null) {  	// variable time step but never less then 30 Hz  	World.Step (Math.Min ((float)gameTime.ElapsedGameTime.TotalMilliseconds * 0.001f' (1f / 30f)));  	Settings.VelocityIterations = 5;  	Settings.PositionIterations = 3;  }  
Magic Number,Endava.DependencyGraph.ScreenSystem,GameScreen,C:\repos\andreipopescu_DependencyGraph\Physics Components\ScreenSystem\GameScreen.cs,Update,The following statement contains a magic number: Settings.VelocityIterations = 5;  
Magic Number,Endava.DependencyGraph.ScreenSystem,GameScreen,C:\repos\andreipopescu_DependencyGraph\Physics Components\ScreenSystem\GameScreen.cs,Update,The following statement contains a magic number: Settings.PositionIterations = 3;  
Magic Number,Endava.DependencyGraph.ScreenSystem,GameScreen,C:\repos\andreipopescu_DependencyGraph\Physics Components\ScreenSystem\GameScreen.cs,IsMouseOnConnector,The following statement contains a magic number: if ((Math.Abs (deltaX) <= tolerance / 7) || (Math.Abs (deltaY) <= tolerance / 10)) {  	return true;  }  
Magic Number,Endava.DependencyGraph.ScreenSystem,GameScreen,C:\repos\andreipopescu_DependencyGraph\Physics Components\ScreenSystem\GameScreen.cs,IsMouseOnConnector,The following statement contains a magic number: if ((Math.Abs (deltaX) <= tolerance / 7) || (Math.Abs (deltaY) <= tolerance / 10)) {  	return true;  }  
Magic Number,Endava.DependencyGraph.ScreenSystem,KeyboardState,C:\repos\andreipopescu_DependencyGraph\Physics Components\ScreenSystem\KeyboardState.cs,IsKeyDown,The following statement contains a magic number: if (v < 0 || v > 82)  	return false;  
Magic Number,Endava.DependencyGraph.ScreenSystem,KeyboardState,C:\repos\andreipopescu_DependencyGraph\Physics Components\ScreenSystem\KeyboardState.cs,ClearKeyPresses,The following statement contains a magic number: for (int i = 0; i < 255; i++) {  	isPressed [i] = false;  }  
Magic Number,Endava.DependencyGraph.ScreenSystem,MainMenuScreen,C:\repos\andreipopescu_DependencyGraph\Physics Components\ScreenSystem\MainMenuScreen.cs,MainMenuScreen,The following statement contains a magic number: LeftBorder = 100;  
Magic Number,Endava.DependencyGraph.ScreenSystem,MenuScreen,C:\repos\andreipopescu_DependencyGraph\Physics Components\ScreenSystem\MenuScreen.cs,MenuScreen,The following statement contains a magic number: _position.X = 50;  
Magic Number,Endava.DependencyGraph.ScreenSystem,MenuScreen,C:\repos\andreipopescu_DependencyGraph\Physics Components\ScreenSystem\MenuScreen.cs,MenuScreen,The following statement contains a magic number: _position.Y = 100;  
Magic Number,Endava.DependencyGraph.ScreenSystem,MenuScreen,C:\repos\andreipopescu_DependencyGraph\Physics Components\ScreenSystem\MenuScreen.cs,Draw,The following statement contains a magic number: for (int i = 0; i < _menuEntries.Count; i++) {  	Color color;  	float scale;  	if (IsActive && (i == _selectedEntry)) {  		//// The selected entry is yellow' and has an animating size.  		double time = gameTime.TotalGameTime.TotalSeconds;  		float pulsate = (float)Math.Sin (time * 3) + 1;  		scale = 1 + pulsate * 0.05f;  		color = Colors.White;  	}  	else {  		// Other entries are white.  		color = Colors.Black;  		scale = 1;  	}  	// Modify the alpha to fade text out during transitions.  	color = Color.FromArgb (TransitionAlpha' color.R' color.G' color.B);  	// Draw text  	TextBlock txt = new TextBlock ();  	txt.Text = _menuEntries [i];  	txt.Foreground = new SolidColorBrush (color);  	txt.FontSize = 16;  	Canvas.SetLeft (txt' itemPosition.X);  	Canvas.SetTop (txt' itemPosition.Y);  	if (DebugCanvas != null)  		DebugCanvas.Children.Add (txt);  	itemPosition.Y += 20;  	base.Draw (gameTime);  }  
Magic Number,Endava.DependencyGraph.ScreenSystem,MenuScreen,C:\repos\andreipopescu_DependencyGraph\Physics Components\ScreenSystem\MenuScreen.cs,Draw,The following statement contains a magic number: for (int i = 0; i < _menuEntries.Count; i++) {  	Color color;  	float scale;  	if (IsActive && (i == _selectedEntry)) {  		//// The selected entry is yellow' and has an animating size.  		double time = gameTime.TotalGameTime.TotalSeconds;  		float pulsate = (float)Math.Sin (time * 3) + 1;  		scale = 1 + pulsate * 0.05f;  		color = Colors.White;  	}  	else {  		// Other entries are white.  		color = Colors.Black;  		scale = 1;  	}  	// Modify the alpha to fade text out during transitions.  	color = Color.FromArgb (TransitionAlpha' color.R' color.G' color.B);  	// Draw text  	TextBlock txt = new TextBlock ();  	txt.Text = _menuEntries [i];  	txt.Foreground = new SolidColorBrush (color);  	txt.FontSize = 16;  	Canvas.SetLeft (txt' itemPosition.X);  	Canvas.SetTop (txt' itemPosition.Y);  	if (DebugCanvas != null)  		DebugCanvas.Children.Add (txt);  	itemPosition.Y += 20;  	base.Draw (gameTime);  }  
Magic Number,Endava.DependencyGraph.ScreenSystem,MenuScreen,C:\repos\andreipopescu_DependencyGraph\Physics Components\ScreenSystem\MenuScreen.cs,Draw,The following statement contains a magic number: for (int i = 0; i < _menuEntries.Count; i++) {  	Color color;  	float scale;  	if (IsActive && (i == _selectedEntry)) {  		//// The selected entry is yellow' and has an animating size.  		double time = gameTime.TotalGameTime.TotalSeconds;  		float pulsate = (float)Math.Sin (time * 3) + 1;  		scale = 1 + pulsate * 0.05f;  		color = Colors.White;  	}  	else {  		// Other entries are white.  		color = Colors.Black;  		scale = 1;  	}  	// Modify the alpha to fade text out during transitions.  	color = Color.FromArgb (TransitionAlpha' color.R' color.G' color.B);  	// Draw text  	TextBlock txt = new TextBlock ();  	txt.Text = _menuEntries [i];  	txt.Foreground = new SolidColorBrush (color);  	txt.FontSize = 16;  	Canvas.SetLeft (txt' itemPosition.X);  	Canvas.SetTop (txt' itemPosition.Y);  	if (DebugCanvas != null)  		DebugCanvas.Children.Add (txt);  	itemPosition.Y += 20;  	base.Draw (gameTime);  }  
Magic Number,Endava.DependencyGraph.ScreenSystem,MenuScreen,C:\repos\andreipopescu_DependencyGraph\Physics Components\ScreenSystem\MenuScreen.cs,Draw,The following statement contains a magic number: if (IsActive && (i == _selectedEntry)) {  	//// The selected entry is yellow' and has an animating size.  	double time = gameTime.TotalGameTime.TotalSeconds;  	float pulsate = (float)Math.Sin (time * 3) + 1;  	scale = 1 + pulsate * 0.05f;  	color = Colors.White;  }  else {  	// Other entries are white.  	color = Colors.Black;  	scale = 1;  }  
Magic Number,Endava.DependencyGraph.ScreenSystem,MenuScreen,C:\repos\andreipopescu_DependencyGraph\Physics Components\ScreenSystem\MenuScreen.cs,Draw,The following statement contains a magic number: txt.FontSize = 16;  
Magic Number,Endava.DependencyGraph.ScreenSystem,MenuScreen,C:\repos\andreipopescu_DependencyGraph\Physics Components\ScreenSystem\MenuScreen.cs,Draw,The following statement contains a magic number: itemPosition.Y += 20;  
