Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Arma2NETMySQLPlugin,MySQL,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\MySQL.cs,OpenConnection,Cyclomatic complexity of the method is 7
Complex Method,Arma2NETMySQLPlugin,MySQL,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\MySQL.cs,RunOnDatabase,Cyclomatic complexity of the method is 10
Complex Method,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,Cyclomatic complexity of the method is 8
Long Statement,Arma2NETMySQLPlugin,Arma2NETMySQLPlugin,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Arma2NETMySQLPlugin.cs,Invoke,The length of the statement  "	if (Format.TrySqfAsCollection (args' out arguments) && arguments.Count >= 2 && arguments [0] != null && arguments [1] != null) { " is 128.
Long Statement,Arma2NETMySQLPlugin,Arma2NETMySQLPlugin,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Arma2NETMySQLPlugin.cs,Invoke,The length of the statement  "		Logger.addMessage (Logger.LogType.Info' "Received - Database: " + database + " Procedure: " + procedure + " Parameters: " + parameters.ToString ()); " is 148.
Long Statement,Arma2NETMySQLPlugin,Arma2NETMySQLPlugin,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Arma2NETMySQLPlugin.cs,Invoke,The length of the statement  "			IEnumerable<string[][]> returned = SQL.dbs.getSQLProvider (database).RunProcedure (procedure' split.ToArray ()' maxResultSize); " is 127.
Long Statement,Arma2NETMySQLPlugin,Arma2NETMySQLPlugin,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Arma2NETMySQLPlugin.cs,Invoke,The length of the statement  "			Logger.addMessage (Logger.LogType.Warning' "The database: " + database + " is not loaded in through the Databases.txt file."); " is 126.
Long Statement,Arma2NETMySQLPlugin,Arma2NETMySQLPluginCommand,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Arma2NETMySQLPlugin.cs,Invoke,The length of the statement  "	if (Format.TrySqfAsCollection (args' out arguments) && arguments.Count == 2 && arguments [0] != null && arguments [1] != null) { " is 128.
Long Statement,Arma2NETMySQLPlugin,Arma2NETMySQLPluginCommand,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Arma2NETMySQLPlugin.cs,Invoke,The length of the statement  "		Logger.addMessage (Logger.LogType.Info' "Received - Database: " + database + " SQL Query: " + mysql_command.ToString ()); " is 121.
Long Statement,Arma2NETMySQLPlugin,Arma2NETMySQLPluginCommand,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Arma2NETMySQLPlugin.cs,Invoke,The length of the statement  "			Logger.addMessage (Logger.LogType.Warning' "The database: " + database + " is not loaded in through the Databases.txt file."); " is 126.
Long Statement,Arma2NETMySQLPlugin,Arma2NETMySQLPluginCommandAsync,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Arma2NETMySQLPlugin.cs,InvokeAsync,The length of the statement  "	if (Format.TrySqfAsCollection (args' out arguments) && arguments.Count == 2 && arguments [0] != null && arguments [1] != null) { " is 128.
Long Statement,Arma2NETMySQLPlugin,Arma2NETMySQLPluginCommandAsync,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Arma2NETMySQLPlugin.cs,InvokeAsync,The length of the statement  "		Logger.addMessage (Logger.LogType.Info' "Received - Database: " + database + " SQL Query: " + mysql_command.ToString ()); " is 121.
Long Statement,Arma2NETMySQLPlugin,Arma2NETMySQLPluginCommandAsync,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Arma2NETMySQLPlugin.cs,InvokeAsync,The length of the statement  "			//however' because on the SQF side' we check for this in a while loop so we know the database process has completed' we can " is 123.
Long Statement,Arma2NETMySQLPlugin,Arma2NETMySQLPluginCommandAsync,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Arma2NETMySQLPlugin.cs,InvokeAsync,The length of the statement  "			Logger.addMessage (Logger.LogType.Warning' "The database: " + database + " is not loaded in through the Databases.txt file."); " is 126.
Long Statement,Arma2NETMySQLPlugin,MySQL,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\MySQL.cs,OpenConnection,The length of the statement  "		staleConnectionThread = new System.Threading.Thread (new System.Threading.ParameterizedThreadStart (checkConnectionThread)); " is 124.
Long Statement,Arma2NETMySQLPlugin,MySQL,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\MySQL.cs,OpenConnection,The length of the statement  "			Logger.addMessage (Logger.LogType.Info' "Unable to open connection to MySQL database' trying again in 10 seconds." + ex.ToString ()); " is 133.
Long Statement,Arma2NETMySQLPlugin,MySQL,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\MySQL.cs,CloseConnection,The length of the statement  "		while (connection.State == System.Data.ConnectionState.Executing || connection.State == System.Data.ConnectionState.Fetching) " is 125.
Long Statement,Arma2NETMySQLPlugin,MySQL,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\MySQL.cs,RunProcedure,The length of the statement  "				//Logger.addMessage(Logger.LogType.Info' "Adding parameter key:value " + split[0].ToString() + ":" + split[1].ToString()); " is 122.
Long Statement,Arma2NETMySQLPlugin,Startup,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Startup.cs,StartupConnection,The length of the statement  "		var appDataLocation = Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.LocalApplicationData)' "Arma2NETMySQL"); " is 129.
Long Statement,Arma2NETMySQLPlugin,Startup,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Startup.cs,StartupConnection,The length of the statement  "		//http://stackoverflow.com/questions/64602/what-are-differences-between-assemblyversion-assemblyfileversion-and-assemblyin " is 122.
Long Statement,Arma2NETMySQLPlugin,Startup,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Startup.cs,StartupConnection,The length of the statement  "		Logger.addMessage (Logger.LogType.Info' "Version number: " + System.Reflection.Assembly.GetExecutingAssembly ().GetName ().Version.ToString ()); " is 144.
Long Statement,Arma2NETMySQLPlugin,DatabaseObject,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\DatabaseObject.cs,getMySQLFormattedConnectionString,The length of the statement  "	//Unable to retrieve stored procedure metadata for routine.  Either grant  SELECT privilege to mysql.proc for this user or use "check parameters=false" with  your connection string. " is 181.
Long Statement,Arma2NETMySQLPlugin,DatabaseObject,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\DatabaseObject.cs,getMySQLFormattedConnectionString,The length of the statement  "	/*  "We have made the Use Procedure Bodies flag obsolete and introduced the Check Parameters option.  They server mainly the" is 124.
Long Statement,Arma2NETMySQLPlugin,DatabaseObject,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\DatabaseObject.cs,getMySQLFormattedConnectionString,The length of the statement  "                Connector/Net to not fetch any routine or parameter metadata and to simply trust what the user has specified.  This can greatly" is 127.
Long Statement,Arma2NETMySQLPlugin,DatabaseObject,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\DatabaseObject.cs,getMySQLFormattedConnectionString,The length of the statement  "                increase performance but it also puts significant pressure on the application developer to give the parameters in the right" is 123.
Long Statement,Arma2NETMySQLPlugin,DatabaseObject,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\DatabaseObject.cs,getMySQLFormattedConnectionString,The length of the statement  "             */return "Server = " + ipaddress + "; Port = " + port + "; Database = " + databasename + "; Uid = " + username + "; Pwd = " + password + ";CheckParameters=false"; " is 162.
Complex Conditional,Arma2NETMySQLPlugin,Arma2NETMySQLPlugin,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Arma2NETMySQLPlugin.cs,Invoke,The conditional expression  "Format.TrySqfAsCollection (args' out arguments) && arguments.Count >= 2 && arguments [0] != null && arguments [1] != null"  is complex.
Complex Conditional,Arma2NETMySQLPlugin,Arma2NETMySQLPluginCommand,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Arma2NETMySQLPlugin.cs,Invoke,The conditional expression  "Format.TrySqfAsCollection (args' out arguments) && arguments.Count == 2 && arguments [0] != null && arguments [1] != null"  is complex.
Complex Conditional,Arma2NETMySQLPlugin,Arma2NETMySQLPluginCommandAsync,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Arma2NETMySQLPlugin.cs,InvokeAsync,The conditional expression  "Format.TrySqfAsCollection (args' out arguments) && arguments.Count == 2 && arguments [0] != null && arguments [1] != null"  is complex.
Virtual Method Call from Constructor,Arma2NETMySQLPlugin,DatabaseObject,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\DatabaseObject.cs,DatabaseObject,The constructor "DatabaseObject" calls a virtual method "OpenConnection".
Virtual Method Call from Constructor,Arma2NETMySQLPlugin,DatabaseObject,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\DatabaseObject.cs,DatabaseObject,The constructor "DatabaseObject" calls a virtual method "OpenConnection".
Magic Number,Arma2NETMySQLPlugin,Arma2NETMySQLPlugin,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Arma2NETMySQLPlugin.cs,Invoke,The following statement contains a magic number: if (Format.TrySqfAsCollection (args' out arguments) && arguments.Count >= 2 && arguments [0] != null && arguments [1] != null) {  	string database = arguments [0] as string;  	string procedure = arguments [1] as string;  	string parameters = arguments [2] as string;  	//strip out [] characters at the beginning and end  	if (parameters [0].ToString () == "[" && parameters [parameters.Length - 1].ToString () == "]") {  		parameters = parameters.Substring (1' parameters.Length - 2);  	}  	List<string> split = new List<string> ();  	if (parameters != null) {  		split = parameters.Split (''').ToList<string> ();  	}  	Logger.addMessage (Logger.LogType.Info' "Received - Database: " + database + " Procedure: " + procedure + " Parameters: " + parameters.ToString ());  	if (SQL.dbs.SQLProviderExists (database)) {  		IEnumerable<string[][]> returned = SQL.dbs.getSQLProvider (database).RunProcedure (procedure' split.ToArray ()' maxResultSize);  		return Format.ObjectAsSqf (returned);  	} else {  		Logger.addMessage (Logger.LogType.Warning' "The database: " + database + " is not loaded in through the Databases.txt file.");  	}  	//Logger.addMessage(Logger.LogType.Info' "Returning false object");  	return Format.ObjectAsSqf (false);  } else {  	Logger.addMessage (Logger.LogType.Error' "The number and/or format of the arguments passed in doesn't match.");  	throw new ArgumentException ();  }  
Magic Number,Arma2NETMySQLPlugin,Arma2NETMySQLPlugin,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Arma2NETMySQLPlugin.cs,Invoke,The following statement contains a magic number: if (Format.TrySqfAsCollection (args' out arguments) && arguments.Count >= 2 && arguments [0] != null && arguments [1] != null) {  	string database = arguments [0] as string;  	string procedure = arguments [1] as string;  	string parameters = arguments [2] as string;  	//strip out [] characters at the beginning and end  	if (parameters [0].ToString () == "[" && parameters [parameters.Length - 1].ToString () == "]") {  		parameters = parameters.Substring (1' parameters.Length - 2);  	}  	List<string> split = new List<string> ();  	if (parameters != null) {  		split = parameters.Split (''').ToList<string> ();  	}  	Logger.addMessage (Logger.LogType.Info' "Received - Database: " + database + " Procedure: " + procedure + " Parameters: " + parameters.ToString ());  	if (SQL.dbs.SQLProviderExists (database)) {  		IEnumerable<string[][]> returned = SQL.dbs.getSQLProvider (database).RunProcedure (procedure' split.ToArray ()' maxResultSize);  		return Format.ObjectAsSqf (returned);  	} else {  		Logger.addMessage (Logger.LogType.Warning' "The database: " + database + " is not loaded in through the Databases.txt file.");  	}  	//Logger.addMessage(Logger.LogType.Info' "Returning false object");  	return Format.ObjectAsSqf (false);  } else {  	Logger.addMessage (Logger.LogType.Error' "The number and/or format of the arguments passed in doesn't match.");  	throw new ArgumentException ();  }  
Magic Number,Arma2NETMySQLPlugin,Arma2NETMySQLPlugin,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Arma2NETMySQLPlugin.cs,Invoke,The following statement contains a magic number: if (Format.TrySqfAsCollection (args' out arguments) && arguments.Count >= 2 && arguments [0] != null && arguments [1] != null) {  	string database = arguments [0] as string;  	string procedure = arguments [1] as string;  	string parameters = arguments [2] as string;  	//strip out [] characters at the beginning and end  	if (parameters [0].ToString () == "[" && parameters [parameters.Length - 1].ToString () == "]") {  		parameters = parameters.Substring (1' parameters.Length - 2);  	}  	List<string> split = new List<string> ();  	if (parameters != null) {  		split = parameters.Split (''').ToList<string> ();  	}  	Logger.addMessage (Logger.LogType.Info' "Received - Database: " + database + " Procedure: " + procedure + " Parameters: " + parameters.ToString ());  	if (SQL.dbs.SQLProviderExists (database)) {  		IEnumerable<string[][]> returned = SQL.dbs.getSQLProvider (database).RunProcedure (procedure' split.ToArray ()' maxResultSize);  		return Format.ObjectAsSqf (returned);  	} else {  		Logger.addMessage (Logger.LogType.Warning' "The database: " + database + " is not loaded in through the Databases.txt file.");  	}  	//Logger.addMessage(Logger.LogType.Info' "Returning false object");  	return Format.ObjectAsSqf (false);  } else {  	Logger.addMessage (Logger.LogType.Error' "The number and/or format of the arguments passed in doesn't match.");  	throw new ArgumentException ();  }  
Magic Number,Arma2NETMySQLPlugin,Arma2NETMySQLPlugin,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Arma2NETMySQLPlugin.cs,Invoke,The following statement contains a magic number: if (parameters [0].ToString () == "[" && parameters [parameters.Length - 1].ToString () == "]") {  	parameters = parameters.Substring (1' parameters.Length - 2);  }  
Magic Number,Arma2NETMySQLPlugin,Arma2NETMySQLPlugin,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Arma2NETMySQLPlugin.cs,Invoke,The following statement contains a magic number: parameters = parameters.Substring (1' parameters.Length - 2);  
Magic Number,Arma2NETMySQLPlugin,Arma2NETMySQLPluginCommand,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Arma2NETMySQLPlugin.cs,Invoke,The following statement contains a magic number: if (Format.TrySqfAsCollection (args' out arguments) && arguments.Count == 2 && arguments [0] != null && arguments [1] != null) {  	string database = arguments [0] as string;  	string mysql_command = arguments [1] as string;  	Logger.addMessage (Logger.LogType.Info' "Received - Database: " + database + " SQL Query: " + mysql_command.ToString ());  	if (SQL.dbs.SQLProviderExists (database)) {  		IEnumerable<string[][]> returned = SQL.dbs.getSQLProvider (database).RunCommand (mysql_command' maxResultSize);  		return Format.ObjectAsSqf (returned);  	} else {  		Logger.addMessage (Logger.LogType.Warning' "The database: " + database + " is not loaded in through the Databases.txt file.");  	}  	//Logger.addMessage(Logger.LogType.Info' "Returning false object");  	return Format.ObjectAsSqf (false);  } else {  	Logger.addMessage (Logger.LogType.Error' "The number and/or format of the arguments passed in doesn't match.");  	throw new ArgumentException ();  }  
Magic Number,Arma2NETMySQLPlugin,Arma2NETMySQLPluginCommandAsync,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Arma2NETMySQLPlugin.cs,InvokeAsync,The following statement contains a magic number: if (Format.TrySqfAsCollection (args' out arguments) && arguments.Count == 2 && arguments [0] != null && arguments [1] != null) {  	string database = arguments [0] as string;  	string mysql_command = arguments [1] as string;  	Logger.addMessage (Logger.LogType.Info' "Received - Database: " + database + " SQL Query: " + mysql_command.ToString ());  	if (SQL.dbs.SQLProviderExists (database)) {  		IEnumerable<string[][]> returned = SQL.dbs.getSQLProvider (database).RunCommand (mysql_command' maxResultSize);  		//the following is needed because we need to return something even if there is nothing to return  		//for example' an SQL DELETE call will go off and return ""  		//however' because on the SQF side' we check for this in a while loop so we know the database process has completed' we can  		//just return an empty array  		if (returned.ToString () == "")  			return Format.ObjectAsSqf ("[]");  		return Format.ObjectAsSqf (returned);  	} else {  		Logger.addMessage (Logger.LogType.Warning' "The database: " + database + " is not loaded in through the Databases.txt file.");  	}  	//Logger.addMessage(Logger.LogType.Info' "Returning false object");  	return Format.ObjectAsSqf (false);  } else {  	Logger.addMessage (Logger.LogType.Error' "The number and/or format of the arguments passed in doesn't match.");  	throw new ArgumentException ();  }  
Magic Number,Arma2NETMySQLPlugin,MySQL,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\MySQL.cs,OpenConnection,The following statement contains a magic number: while (connection.State != System.Data.ConnectionState.Open) {  	try {  		//Logger.addMessage(Logger.LogType.Info' "Opening MySQL connection.");  		connection.Open ();  	} catch (Exception ex) {  		Logger.addMessage (Logger.LogType.Info' "Unable to open connection to MySQL database' trying again in 10 seconds." + ex.ToString ());  		Thread.Sleep (10000);  	}  }  
Magic Number,Arma2NETMySQLPlugin,MySQL,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\MySQL.cs,OpenConnection,The following statement contains a magic number: try {  	//Logger.addMessage(Logger.LogType.Info' "Opening MySQL connection.");  	connection.Open ();  } catch (Exception ex) {  	Logger.addMessage (Logger.LogType.Info' "Unable to open connection to MySQL database' trying again in 10 seconds." + ex.ToString ());  	Thread.Sleep (10000);  }  
Magic Number,Arma2NETMySQLPlugin,MySQL,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\MySQL.cs,OpenConnection,The following statement contains a magic number: Thread.Sleep (10000);  
Magic Number,Arma2NETMySQLPlugin,MySQL,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\MySQL.cs,checkConnectionThread,The following statement contains a magic number: while (true) {  	if (connection != null && connection.State == System.Data.ConnectionState.Open) {  		TimeSpan ts = DateTime.Now - lastQuery;  		if (ts.Minutes > 30) {  			//over 30 minutes' close it down  			Logger.addMessage (Logger.LogType.Info' "30 minutes of inactivity have passed.  Closing down MySQL connection.");  			CloseConnection ();  			break;  		}  	}  	//http://www.dotnetperls.com/sleep  	//TODO: according to the above link' sleep does not use CPU cycles  	//we need to make sure this is not significantly eating into CPU resources!  	Thread.Sleep ((60 * 5) * 1000);  }  
Magic Number,Arma2NETMySQLPlugin,MySQL,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\MySQL.cs,checkConnectionThread,The following statement contains a magic number: while (true) {  	if (connection != null && connection.State == System.Data.ConnectionState.Open) {  		TimeSpan ts = DateTime.Now - lastQuery;  		if (ts.Minutes > 30) {  			//over 30 minutes' close it down  			Logger.addMessage (Logger.LogType.Info' "30 minutes of inactivity have passed.  Closing down MySQL connection.");  			CloseConnection ();  			break;  		}  	}  	//http://www.dotnetperls.com/sleep  	//TODO: according to the above link' sleep does not use CPU cycles  	//we need to make sure this is not significantly eating into CPU resources!  	Thread.Sleep ((60 * 5) * 1000);  }  
Magic Number,Arma2NETMySQLPlugin,MySQL,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\MySQL.cs,checkConnectionThread,The following statement contains a magic number: while (true) {  	if (connection != null && connection.State == System.Data.ConnectionState.Open) {  		TimeSpan ts = DateTime.Now - lastQuery;  		if (ts.Minutes > 30) {  			//over 30 minutes' close it down  			Logger.addMessage (Logger.LogType.Info' "30 minutes of inactivity have passed.  Closing down MySQL connection.");  			CloseConnection ();  			break;  		}  	}  	//http://www.dotnetperls.com/sleep  	//TODO: according to the above link' sleep does not use CPU cycles  	//we need to make sure this is not significantly eating into CPU resources!  	Thread.Sleep ((60 * 5) * 1000);  }  
Magic Number,Arma2NETMySQLPlugin,MySQL,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\MySQL.cs,checkConnectionThread,The following statement contains a magic number: while (true) {  	if (connection != null && connection.State == System.Data.ConnectionState.Open) {  		TimeSpan ts = DateTime.Now - lastQuery;  		if (ts.Minutes > 30) {  			//over 30 minutes' close it down  			Logger.addMessage (Logger.LogType.Info' "30 minutes of inactivity have passed.  Closing down MySQL connection.");  			CloseConnection ();  			break;  		}  	}  	//http://www.dotnetperls.com/sleep  	//TODO: according to the above link' sleep does not use CPU cycles  	//we need to make sure this is not significantly eating into CPU resources!  	Thread.Sleep ((60 * 5) * 1000);  }  
Magic Number,Arma2NETMySQLPlugin,MySQL,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\MySQL.cs,checkConnectionThread,The following statement contains a magic number: if (connection != null && connection.State == System.Data.ConnectionState.Open) {  	TimeSpan ts = DateTime.Now - lastQuery;  	if (ts.Minutes > 30) {  		//over 30 minutes' close it down  		Logger.addMessage (Logger.LogType.Info' "30 minutes of inactivity have passed.  Closing down MySQL connection.");  		CloseConnection ();  		break;  	}  }  
Magic Number,Arma2NETMySQLPlugin,MySQL,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\MySQL.cs,checkConnectionThread,The following statement contains a magic number: if (ts.Minutes > 30) {  	//over 30 minutes' close it down  	Logger.addMessage (Logger.LogType.Info' "30 minutes of inactivity have passed.  Closing down MySQL connection.");  	CloseConnection ();  	break;  }  
Magic Number,Arma2NETMySQLPlugin,MySQL,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\MySQL.cs,checkConnectionThread,The following statement contains a magic number: Thread.Sleep ((60 * 5) * 1000);  
Magic Number,Arma2NETMySQLPlugin,MySQL,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\MySQL.cs,checkConnectionThread,The following statement contains a magic number: Thread.Sleep ((60 * 5) * 1000);  
Magic Number,Arma2NETMySQLPlugin,MySQL,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\MySQL.cs,checkConnectionThread,The following statement contains a magic number: Thread.Sleep ((60 * 5) * 1000);  
Magic Number,Arma2NETMySQLPlugin,MySQL,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\MySQL.cs,RunProcedure,The following statement contains a magic number: if (connection != null && connection.State == System.Data.ConnectionState.Open && procedure != null) {  	MySqlCommand command = GetCommand (procedure);  	if (parameters != null)// could have a procedure with no inputs  	 {  		Logger.addMessage (Logger.LogType.Info' "Parsing parameters...");  		for (int i = 0; i < parameters.Length; i++) {  			//separate out parameter name and value  			string[] split = parameters [i].Split ('=');  			if (split.Length != 2)  				Logger.addMessage (Logger.LogType.Warning' "Couldn't parse procedure' split didn't work.");  			//Logger.addMessage(Logger.LogType.Info' "Adding parameter key:value " + split[0].ToString() + ":" + split[1].ToString());  			command.Parameters.AddWithValue (split [0]' (object)split [1]);  		}  	}  	yield return RunOnDatabase (command' maxResultSize);  }  
Magic Number,Arma2NETMySQLPlugin,MySQL,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\MySQL.cs,RunProcedure,The following statement contains a magic number: if (parameters != null)// could have a procedure with no inputs   {  	Logger.addMessage (Logger.LogType.Info' "Parsing parameters...");  	for (int i = 0; i < parameters.Length; i++) {  		//separate out parameter name and value  		string[] split = parameters [i].Split ('=');  		if (split.Length != 2)  			Logger.addMessage (Logger.LogType.Warning' "Couldn't parse procedure' split didn't work.");  		//Logger.addMessage(Logger.LogType.Info' "Adding parameter key:value " + split[0].ToString() + ":" + split[1].ToString());  		command.Parameters.AddWithValue (split [0]' (object)split [1]);  	}  }  
Magic Number,Arma2NETMySQLPlugin,MySQL,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\MySQL.cs,RunProcedure,The following statement contains a magic number: for (int i = 0; i < parameters.Length; i++) {  	//separate out parameter name and value  	string[] split = parameters [i].Split ('=');  	if (split.Length != 2)  		Logger.addMessage (Logger.LogType.Warning' "Couldn't parse procedure' split didn't work.");  	//Logger.addMessage(Logger.LogType.Info' "Adding parameter key:value " + split[0].ToString() + ":" + split[1].ToString());  	command.Parameters.AddWithValue (split [0]' (object)split [1]);  }  
Magic Number,Arma2NETMySQLPlugin,MySQL,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\MySQL.cs,RunProcedure,The following statement contains a magic number: if (split.Length != 2)  	Logger.addMessage (Logger.LogType.Warning' "Couldn't parse procedure' split didn't work.");  
Magic Number,Arma2NETMySQLPlugin,DatabaseObject,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\DatabaseObject.cs,DatabaseObject,The following statement contains a magic number: if (values.Length == 6) {  	ipaddress = values [2];  	port = values [3];  	username = values [4];  	password = values [5];  }  
Magic Number,Arma2NETMySQLPlugin,DatabaseObject,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\DatabaseObject.cs,DatabaseObject,The following statement contains a magic number: if (values.Length == 6) {  	ipaddress = values [2];  	port = values [3];  	username = values [4];  	password = values [5];  }  
Magic Number,Arma2NETMySQLPlugin,DatabaseObject,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\DatabaseObject.cs,DatabaseObject,The following statement contains a magic number: if (values.Length == 6) {  	ipaddress = values [2];  	port = values [3];  	username = values [4];  	password = values [5];  }  
Magic Number,Arma2NETMySQLPlugin,DatabaseObject,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\DatabaseObject.cs,DatabaseObject,The following statement contains a magic number: if (values.Length == 6) {  	ipaddress = values [2];  	port = values [3];  	username = values [4];  	password = values [5];  }  
Magic Number,Arma2NETMySQLPlugin,DatabaseObject,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\DatabaseObject.cs,DatabaseObject,The following statement contains a magic number: if (values.Length == 6) {  	ipaddress = values [2];  	port = values [3];  	username = values [4];  	password = values [5];  }  
Magic Number,Arma2NETMySQLPlugin,DatabaseObject,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\DatabaseObject.cs,DatabaseObject,The following statement contains a magic number: ipaddress = values [2];  
Magic Number,Arma2NETMySQLPlugin,DatabaseObject,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\DatabaseObject.cs,DatabaseObject,The following statement contains a magic number: port = values [3];  
Magic Number,Arma2NETMySQLPlugin,DatabaseObject,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\DatabaseObject.cs,DatabaseObject,The following statement contains a magic number: username = values [4];  
Magic Number,Arma2NETMySQLPlugin,DatabaseObject,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\DatabaseObject.cs,DatabaseObject,The following statement contains a magic number: password = values [5];  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: while (line != null) {  	//Make sure it's not a comment  	if (!line.StartsWith ("#")) {  		//Separate out the information  		string[] split = line.Split (''');  		if (split.Length == 6) {  			split [0] = split [0].ToLower ();  			Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  			DatabaseObject temp = new DatabaseObject (new string[6] {  				split [0]'  				split [1]'  				split [2]'  				split [3]'  				split [4]'  				split [5]  			});  			databaseList.Add (temp);  		} else if (split.Length == 2) {  			split [0] = split [0].ToLower ();  			Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  			DatabaseObject temp = new DatabaseObject (new string[2] {  				split [0]'  				split [1]  			});  			databaseList.Add (temp);  		} else if (line.Contains ("'")) {  			Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  		}  	}  	line = sr.ReadLine ();  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: while (line != null) {  	//Make sure it's not a comment  	if (!line.StartsWith ("#")) {  		//Separate out the information  		string[] split = line.Split (''');  		if (split.Length == 6) {  			split [0] = split [0].ToLower ();  			Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  			DatabaseObject temp = new DatabaseObject (new string[6] {  				split [0]'  				split [1]'  				split [2]'  				split [3]'  				split [4]'  				split [5]  			});  			databaseList.Add (temp);  		} else if (split.Length == 2) {  			split [0] = split [0].ToLower ();  			Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  			DatabaseObject temp = new DatabaseObject (new string[2] {  				split [0]'  				split [1]  			});  			databaseList.Add (temp);  		} else if (line.Contains ("'")) {  			Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  		}  	}  	line = sr.ReadLine ();  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: while (line != null) {  	//Make sure it's not a comment  	if (!line.StartsWith ("#")) {  		//Separate out the information  		string[] split = line.Split (''');  		if (split.Length == 6) {  			split [0] = split [0].ToLower ();  			Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  			DatabaseObject temp = new DatabaseObject (new string[6] {  				split [0]'  				split [1]'  				split [2]'  				split [3]'  				split [4]'  				split [5]  			});  			databaseList.Add (temp);  		} else if (split.Length == 2) {  			split [0] = split [0].ToLower ();  			Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  			DatabaseObject temp = new DatabaseObject (new string[2] {  				split [0]'  				split [1]  			});  			databaseList.Add (temp);  		} else if (line.Contains ("'")) {  			Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  		}  	}  	line = sr.ReadLine ();  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: while (line != null) {  	//Make sure it's not a comment  	if (!line.StartsWith ("#")) {  		//Separate out the information  		string[] split = line.Split (''');  		if (split.Length == 6) {  			split [0] = split [0].ToLower ();  			Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  			DatabaseObject temp = new DatabaseObject (new string[6] {  				split [0]'  				split [1]'  				split [2]'  				split [3]'  				split [4]'  				split [5]  			});  			databaseList.Add (temp);  		} else if (split.Length == 2) {  			split [0] = split [0].ToLower ();  			Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  			DatabaseObject temp = new DatabaseObject (new string[2] {  				split [0]'  				split [1]  			});  			databaseList.Add (temp);  		} else if (line.Contains ("'")) {  			Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  		}  	}  	line = sr.ReadLine ();  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: while (line != null) {  	//Make sure it's not a comment  	if (!line.StartsWith ("#")) {  		//Separate out the information  		string[] split = line.Split (''');  		if (split.Length == 6) {  			split [0] = split [0].ToLower ();  			Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  			DatabaseObject temp = new DatabaseObject (new string[6] {  				split [0]'  				split [1]'  				split [2]'  				split [3]'  				split [4]'  				split [5]  			});  			databaseList.Add (temp);  		} else if (split.Length == 2) {  			split [0] = split [0].ToLower ();  			Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  			DatabaseObject temp = new DatabaseObject (new string[2] {  				split [0]'  				split [1]  			});  			databaseList.Add (temp);  		} else if (line.Contains ("'")) {  			Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  		}  	}  	line = sr.ReadLine ();  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: while (line != null) {  	//Make sure it's not a comment  	if (!line.StartsWith ("#")) {  		//Separate out the information  		string[] split = line.Split (''');  		if (split.Length == 6) {  			split [0] = split [0].ToLower ();  			Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  			DatabaseObject temp = new DatabaseObject (new string[6] {  				split [0]'  				split [1]'  				split [2]'  				split [3]'  				split [4]'  				split [5]  			});  			databaseList.Add (temp);  		} else if (split.Length == 2) {  			split [0] = split [0].ToLower ();  			Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  			DatabaseObject temp = new DatabaseObject (new string[2] {  				split [0]'  				split [1]  			});  			databaseList.Add (temp);  		} else if (line.Contains ("'")) {  			Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  		}  	}  	line = sr.ReadLine ();  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: while (line != null) {  	//Make sure it's not a comment  	if (!line.StartsWith ("#")) {  		//Separate out the information  		string[] split = line.Split (''');  		if (split.Length == 6) {  			split [0] = split [0].ToLower ();  			Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  			DatabaseObject temp = new DatabaseObject (new string[6] {  				split [0]'  				split [1]'  				split [2]'  				split [3]'  				split [4]'  				split [5]  			});  			databaseList.Add (temp);  		} else if (split.Length == 2) {  			split [0] = split [0].ToLower ();  			Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  			DatabaseObject temp = new DatabaseObject (new string[2] {  				split [0]'  				split [1]  			});  			databaseList.Add (temp);  		} else if (line.Contains ("'")) {  			Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  		}  	}  	line = sr.ReadLine ();  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: while (line != null) {  	//Make sure it's not a comment  	if (!line.StartsWith ("#")) {  		//Separate out the information  		string[] split = line.Split (''');  		if (split.Length == 6) {  			split [0] = split [0].ToLower ();  			Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  			DatabaseObject temp = new DatabaseObject (new string[6] {  				split [0]'  				split [1]'  				split [2]'  				split [3]'  				split [4]'  				split [5]  			});  			databaseList.Add (temp);  		} else if (split.Length == 2) {  			split [0] = split [0].ToLower ();  			Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  			DatabaseObject temp = new DatabaseObject (new string[2] {  				split [0]'  				split [1]  			});  			databaseList.Add (temp);  		} else if (line.Contains ("'")) {  			Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  		}  	}  	line = sr.ReadLine ();  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: while (line != null) {  	//Make sure it's not a comment  	if (!line.StartsWith ("#")) {  		//Separate out the information  		string[] split = line.Split (''');  		if (split.Length == 6) {  			split [0] = split [0].ToLower ();  			Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  			DatabaseObject temp = new DatabaseObject (new string[6] {  				split [0]'  				split [1]'  				split [2]'  				split [3]'  				split [4]'  				split [5]  			});  			databaseList.Add (temp);  		} else if (split.Length == 2) {  			split [0] = split [0].ToLower ();  			Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  			DatabaseObject temp = new DatabaseObject (new string[2] {  				split [0]'  				split [1]  			});  			databaseList.Add (temp);  		} else if (line.Contains ("'")) {  			Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  		}  	}  	line = sr.ReadLine ();  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: while (line != null) {  	//Make sure it's not a comment  	if (!line.StartsWith ("#")) {  		//Separate out the information  		string[] split = line.Split (''');  		if (split.Length == 6) {  			split [0] = split [0].ToLower ();  			Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  			DatabaseObject temp = new DatabaseObject (new string[6] {  				split [0]'  				split [1]'  				split [2]'  				split [3]'  				split [4]'  				split [5]  			});  			databaseList.Add (temp);  		} else if (split.Length == 2) {  			split [0] = split [0].ToLower ();  			Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  			DatabaseObject temp = new DatabaseObject (new string[2] {  				split [0]'  				split [1]  			});  			databaseList.Add (temp);  		} else if (line.Contains ("'")) {  			Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  		}  	}  	line = sr.ReadLine ();  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: while (line != null) {  	//Make sure it's not a comment  	if (!line.StartsWith ("#")) {  		//Separate out the information  		string[] split = line.Split (''');  		if (split.Length == 6) {  			split [0] = split [0].ToLower ();  			Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  			DatabaseObject temp = new DatabaseObject (new string[6] {  				split [0]'  				split [1]'  				split [2]'  				split [3]'  				split [4]'  				split [5]  			});  			databaseList.Add (temp);  		} else if (split.Length == 2) {  			split [0] = split [0].ToLower ();  			Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  			DatabaseObject temp = new DatabaseObject (new string[2] {  				split [0]'  				split [1]  			});  			databaseList.Add (temp);  		} else if (line.Contains ("'")) {  			Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  		}  	}  	line = sr.ReadLine ();  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: if (!line.StartsWith ("#")) {  	//Separate out the information  	string[] split = line.Split (''');  	if (split.Length == 6) {  		split [0] = split [0].ToLower ();  		Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  		DatabaseObject temp = new DatabaseObject (new string[6] {  			split [0]'  			split [1]'  			split [2]'  			split [3]'  			split [4]'  			split [5]  		});  		databaseList.Add (temp);  	} else if (split.Length == 2) {  		split [0] = split [0].ToLower ();  		Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  		DatabaseObject temp = new DatabaseObject (new string[2] {  			split [0]'  			split [1]  		});  		databaseList.Add (temp);  	} else if (line.Contains ("'")) {  		Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  	}  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: if (!line.StartsWith ("#")) {  	//Separate out the information  	string[] split = line.Split (''');  	if (split.Length == 6) {  		split [0] = split [0].ToLower ();  		Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  		DatabaseObject temp = new DatabaseObject (new string[6] {  			split [0]'  			split [1]'  			split [2]'  			split [3]'  			split [4]'  			split [5]  		});  		databaseList.Add (temp);  	} else if (split.Length == 2) {  		split [0] = split [0].ToLower ();  		Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  		DatabaseObject temp = new DatabaseObject (new string[2] {  			split [0]'  			split [1]  		});  		databaseList.Add (temp);  	} else if (line.Contains ("'")) {  		Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  	}  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: if (!line.StartsWith ("#")) {  	//Separate out the information  	string[] split = line.Split (''');  	if (split.Length == 6) {  		split [0] = split [0].ToLower ();  		Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  		DatabaseObject temp = new DatabaseObject (new string[6] {  			split [0]'  			split [1]'  			split [2]'  			split [3]'  			split [4]'  			split [5]  		});  		databaseList.Add (temp);  	} else if (split.Length == 2) {  		split [0] = split [0].ToLower ();  		Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  		DatabaseObject temp = new DatabaseObject (new string[2] {  			split [0]'  			split [1]  		});  		databaseList.Add (temp);  	} else if (line.Contains ("'")) {  		Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  	}  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: if (!line.StartsWith ("#")) {  	//Separate out the information  	string[] split = line.Split (''');  	if (split.Length == 6) {  		split [0] = split [0].ToLower ();  		Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  		DatabaseObject temp = new DatabaseObject (new string[6] {  			split [0]'  			split [1]'  			split [2]'  			split [3]'  			split [4]'  			split [5]  		});  		databaseList.Add (temp);  	} else if (split.Length == 2) {  		split [0] = split [0].ToLower ();  		Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  		DatabaseObject temp = new DatabaseObject (new string[2] {  			split [0]'  			split [1]  		});  		databaseList.Add (temp);  	} else if (line.Contains ("'")) {  		Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  	}  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: if (!line.StartsWith ("#")) {  	//Separate out the information  	string[] split = line.Split (''');  	if (split.Length == 6) {  		split [0] = split [0].ToLower ();  		Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  		DatabaseObject temp = new DatabaseObject (new string[6] {  			split [0]'  			split [1]'  			split [2]'  			split [3]'  			split [4]'  			split [5]  		});  		databaseList.Add (temp);  	} else if (split.Length == 2) {  		split [0] = split [0].ToLower ();  		Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  		DatabaseObject temp = new DatabaseObject (new string[2] {  			split [0]'  			split [1]  		});  		databaseList.Add (temp);  	} else if (line.Contains ("'")) {  		Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  	}  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: if (!line.StartsWith ("#")) {  	//Separate out the information  	string[] split = line.Split (''');  	if (split.Length == 6) {  		split [0] = split [0].ToLower ();  		Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  		DatabaseObject temp = new DatabaseObject (new string[6] {  			split [0]'  			split [1]'  			split [2]'  			split [3]'  			split [4]'  			split [5]  		});  		databaseList.Add (temp);  	} else if (split.Length == 2) {  		split [0] = split [0].ToLower ();  		Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  		DatabaseObject temp = new DatabaseObject (new string[2] {  			split [0]'  			split [1]  		});  		databaseList.Add (temp);  	} else if (line.Contains ("'")) {  		Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  	}  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: if (!line.StartsWith ("#")) {  	//Separate out the information  	string[] split = line.Split (''');  	if (split.Length == 6) {  		split [0] = split [0].ToLower ();  		Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  		DatabaseObject temp = new DatabaseObject (new string[6] {  			split [0]'  			split [1]'  			split [2]'  			split [3]'  			split [4]'  			split [5]  		});  		databaseList.Add (temp);  	} else if (split.Length == 2) {  		split [0] = split [0].ToLower ();  		Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  		DatabaseObject temp = new DatabaseObject (new string[2] {  			split [0]'  			split [1]  		});  		databaseList.Add (temp);  	} else if (line.Contains ("'")) {  		Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  	}  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: if (!line.StartsWith ("#")) {  	//Separate out the information  	string[] split = line.Split (''');  	if (split.Length == 6) {  		split [0] = split [0].ToLower ();  		Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  		DatabaseObject temp = new DatabaseObject (new string[6] {  			split [0]'  			split [1]'  			split [2]'  			split [3]'  			split [4]'  			split [5]  		});  		databaseList.Add (temp);  	} else if (split.Length == 2) {  		split [0] = split [0].ToLower ();  		Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  		DatabaseObject temp = new DatabaseObject (new string[2] {  			split [0]'  			split [1]  		});  		databaseList.Add (temp);  	} else if (line.Contains ("'")) {  		Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  	}  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: if (!line.StartsWith ("#")) {  	//Separate out the information  	string[] split = line.Split (''');  	if (split.Length == 6) {  		split [0] = split [0].ToLower ();  		Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  		DatabaseObject temp = new DatabaseObject (new string[6] {  			split [0]'  			split [1]'  			split [2]'  			split [3]'  			split [4]'  			split [5]  		});  		databaseList.Add (temp);  	} else if (split.Length == 2) {  		split [0] = split [0].ToLower ();  		Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  		DatabaseObject temp = new DatabaseObject (new string[2] {  			split [0]'  			split [1]  		});  		databaseList.Add (temp);  	} else if (line.Contains ("'")) {  		Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  	}  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: if (!line.StartsWith ("#")) {  	//Separate out the information  	string[] split = line.Split (''');  	if (split.Length == 6) {  		split [0] = split [0].ToLower ();  		Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  		DatabaseObject temp = new DatabaseObject (new string[6] {  			split [0]'  			split [1]'  			split [2]'  			split [3]'  			split [4]'  			split [5]  		});  		databaseList.Add (temp);  	} else if (split.Length == 2) {  		split [0] = split [0].ToLower ();  		Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  		DatabaseObject temp = new DatabaseObject (new string[2] {  			split [0]'  			split [1]  		});  		databaseList.Add (temp);  	} else if (line.Contains ("'")) {  		Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  	}  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: if (!line.StartsWith ("#")) {  	//Separate out the information  	string[] split = line.Split (''');  	if (split.Length == 6) {  		split [0] = split [0].ToLower ();  		Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  		DatabaseObject temp = new DatabaseObject (new string[6] {  			split [0]'  			split [1]'  			split [2]'  			split [3]'  			split [4]'  			split [5]  		});  		databaseList.Add (temp);  	} else if (split.Length == 2) {  		split [0] = split [0].ToLower ();  		Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  		DatabaseObject temp = new DatabaseObject (new string[2] {  			split [0]'  			split [1]  		});  		databaseList.Add (temp);  	} else if (line.Contains ("'")) {  		Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  	}  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: if (split.Length == 6) {  	split [0] = split [0].ToLower ();  	Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  	DatabaseObject temp = new DatabaseObject (new string[6] {  		split [0]'  		split [1]'  		split [2]'  		split [3]'  		split [4]'  		split [5]  	});  	databaseList.Add (temp);  } else if (split.Length == 2) {  	split [0] = split [0].ToLower ();  	Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  	DatabaseObject temp = new DatabaseObject (new string[2] {  		split [0]'  		split [1]  	});  	databaseList.Add (temp);  } else if (line.Contains ("'")) {  	Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: if (split.Length == 6) {  	split [0] = split [0].ToLower ();  	Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  	DatabaseObject temp = new DatabaseObject (new string[6] {  		split [0]'  		split [1]'  		split [2]'  		split [3]'  		split [4]'  		split [5]  	});  	databaseList.Add (temp);  } else if (split.Length == 2) {  	split [0] = split [0].ToLower ();  	Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  	DatabaseObject temp = new DatabaseObject (new string[2] {  		split [0]'  		split [1]  	});  	databaseList.Add (temp);  } else if (line.Contains ("'")) {  	Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: if (split.Length == 6) {  	split [0] = split [0].ToLower ();  	Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  	DatabaseObject temp = new DatabaseObject (new string[6] {  		split [0]'  		split [1]'  		split [2]'  		split [3]'  		split [4]'  		split [5]  	});  	databaseList.Add (temp);  } else if (split.Length == 2) {  	split [0] = split [0].ToLower ();  	Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  	DatabaseObject temp = new DatabaseObject (new string[2] {  		split [0]'  		split [1]  	});  	databaseList.Add (temp);  } else if (line.Contains ("'")) {  	Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: if (split.Length == 6) {  	split [0] = split [0].ToLower ();  	Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  	DatabaseObject temp = new DatabaseObject (new string[6] {  		split [0]'  		split [1]'  		split [2]'  		split [3]'  		split [4]'  		split [5]  	});  	databaseList.Add (temp);  } else if (split.Length == 2) {  	split [0] = split [0].ToLower ();  	Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  	DatabaseObject temp = new DatabaseObject (new string[2] {  		split [0]'  		split [1]  	});  	databaseList.Add (temp);  } else if (line.Contains ("'")) {  	Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: if (split.Length == 6) {  	split [0] = split [0].ToLower ();  	Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  	DatabaseObject temp = new DatabaseObject (new string[6] {  		split [0]'  		split [1]'  		split [2]'  		split [3]'  		split [4]'  		split [5]  	});  	databaseList.Add (temp);  } else if (split.Length == 2) {  	split [0] = split [0].ToLower ();  	Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  	DatabaseObject temp = new DatabaseObject (new string[2] {  		split [0]'  		split [1]  	});  	databaseList.Add (temp);  } else if (line.Contains ("'")) {  	Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: if (split.Length == 6) {  	split [0] = split [0].ToLower ();  	Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  	DatabaseObject temp = new DatabaseObject (new string[6] {  		split [0]'  		split [1]'  		split [2]'  		split [3]'  		split [4]'  		split [5]  	});  	databaseList.Add (temp);  } else if (split.Length == 2) {  	split [0] = split [0].ToLower ();  	Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  	DatabaseObject temp = new DatabaseObject (new string[2] {  		split [0]'  		split [1]  	});  	databaseList.Add (temp);  } else if (line.Contains ("'")) {  	Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: if (split.Length == 6) {  	split [0] = split [0].ToLower ();  	Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  	DatabaseObject temp = new DatabaseObject (new string[6] {  		split [0]'  		split [1]'  		split [2]'  		split [3]'  		split [4]'  		split [5]  	});  	databaseList.Add (temp);  } else if (split.Length == 2) {  	split [0] = split [0].ToLower ();  	Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  	DatabaseObject temp = new DatabaseObject (new string[2] {  		split [0]'  		split [1]  	});  	databaseList.Add (temp);  } else if (line.Contains ("'")) {  	Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: if (split.Length == 6) {  	split [0] = split [0].ToLower ();  	Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  	DatabaseObject temp = new DatabaseObject (new string[6] {  		split [0]'  		split [1]'  		split [2]'  		split [3]'  		split [4]'  		split [5]  	});  	databaseList.Add (temp);  } else if (split.Length == 2) {  	split [0] = split [0].ToLower ();  	Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  	DatabaseObject temp = new DatabaseObject (new string[2] {  		split [0]'  		split [1]  	});  	databaseList.Add (temp);  } else if (line.Contains ("'")) {  	Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: if (split.Length == 6) {  	split [0] = split [0].ToLower ();  	Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  	DatabaseObject temp = new DatabaseObject (new string[6] {  		split [0]'  		split [1]'  		split [2]'  		split [3]'  		split [4]'  		split [5]  	});  	databaseList.Add (temp);  } else if (split.Length == 2) {  	split [0] = split [0].ToLower ();  	Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  	DatabaseObject temp = new DatabaseObject (new string[2] {  		split [0]'  		split [1]  	});  	databaseList.Add (temp);  } else if (line.Contains ("'")) {  	Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: if (split.Length == 6) {  	split [0] = split [0].ToLower ();  	Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  	DatabaseObject temp = new DatabaseObject (new string[6] {  		split [0]'  		split [1]'  		split [2]'  		split [3]'  		split [4]'  		split [5]  	});  	databaseList.Add (temp);  } else if (split.Length == 2) {  	split [0] = split [0].ToLower ();  	Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  	DatabaseObject temp = new DatabaseObject (new string[2] {  		split [0]'  		split [1]  	});  	databaseList.Add (temp);  } else if (line.Contains ("'")) {  	Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: if (split.Length == 6) {  	split [0] = split [0].ToLower ();  	Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  	DatabaseObject temp = new DatabaseObject (new string[6] {  		split [0]'  		split [1]'  		split [2]'  		split [3]'  		split [4]'  		split [5]  	});  	databaseList.Add (temp);  } else if (split.Length == 2) {  	split [0] = split [0].ToLower ();  	Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  	DatabaseObject temp = new DatabaseObject (new string[2] {  		split [0]'  		split [1]  	});  	databaseList.Add (temp);  } else if (line.Contains ("'")) {  	Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1] + " IPAddress: " + split [2] + " Port: " + split [3] + " Username: " + split [4] + " Password: NotShownForSecurityReasons");  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: if (split.Length == 2) {  	split [0] = split [0].ToLower ();  	Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  	DatabaseObject temp = new DatabaseObject (new string[2] {  		split [0]'  		split [1]  	});  	databaseList.Add (temp);  } else if (line.Contains ("'")) {  	Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  }  
Magic Number,Arma2NETMySQLPlugin,Databases,D:\newReposJune17\firefly2442_Arma2NETMySQLPlugin\Arma2NETMySQLPlugin\Databases.cs,Databases,The following statement contains a magic number: if (split.Length == 2) {  	split [0] = split [0].ToLower ();  	Logger.addMessage (Logger.LogType.Info' "Type: " + split [0] + " Database: " + split [1]);  	DatabaseObject temp = new DatabaseObject (new string[2] {  		split [0]'  		split [1]  	});  	databaseList.Add (temp);  } else if (line.Contains ("'")) {  	Logger.addMessage (Logger.LogType.Error' "Unable to parse line: " + line + " in Databases.txt file.");  }  
