Implementation smell,Namespace,Class,File,Method,Description
Long Method,BuildDependency.Artifacts,DownloadFileJob,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\Artifacts\DownloadFileJob.cs,Execute,The method has 117 lines of code.
Complex Method,BuildDependency,DependencyFile,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\DependencyFile.cs,InternalLoadFile,Cyclomatic complexity of the method is 25
Complex Method,BuildDependency.TeamCity.RestClasses,ArtifactProperties,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\TeamCity\RestClasses\ArtifactProperties.cs,ArtifactProperties,Cyclomatic complexity of the method is 16
Long Parameter List,BuildDependency.Artifacts,UnzipFilesJob,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\Artifacts\UnzipFilesJob.cs,Execute,The method has 5 parameters.
Long Statement,BuildDependency.Artifacts,ArtifactRule,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\Artifacts\ArtifactRule.cs,ParseRule,The length of the statement  "	var regex = new Regex (@"^(?<ignore>(\+|-):)?(?<source>[^!=\n]+)(?<archive>![^=]+)?(?<dest>=>.+)?$"' RegexOptions.Compiled); " is 124.
Long Statement,BuildDependency.Artifacts,DownloadFileJob,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\Artifacts\DownloadFileJob.cs,Execute,The length of the statement  "		response = (HttpWebResponse)await Task.Factory.FromAsync<WebResponse> (request.BeginGetResponse' request.EndGetResponse' null); " is 127.
Long Statement,BuildDependency.Artifacts,DownloadFileJob,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\Artifacts\DownloadFileJob.cs,Execute,The length of the statement  "			log.LogMessage ("Could not download from {0}. no server response. Exception {1}. Status {2}"' Url' wex.Message' wex.Status); " is 124.
Long Statement,BuildDependency.Artifacts,UnzipFilesJob,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\Artifacts\UnzipFilesJob.cs,Execute,The length of the statement  "	fastZip.ExtractZip (Path.Combine (workDir' ZipFile)' Path.Combine (workDir' DestinationPath)' FastZip.Overwrite.Always' fn => true' fileFilter' directoryFilter' true); " is 167.
Long Statement,BuildDependency.Tools,ConditionHelper,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\Tools\ConditionHelper.cs,AreTrue,The length of the statement  "	bool ret = Environment.OSVersion.Platform == PlatformID.Unix ? ((condition & Conditions.Linux) != 0) : ((condition & Conditions.Windows) != 0); " is 143.
Long Statement,BuildDependency.Tools,ConditionHelper,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\Tools\ConditionHelper.cs,AreTrue,The length of the statement  "	ret &= Environment.Is64BitOperatingSystem ? ((condition & Conditions.Bit64) != 0) : ((condition & Conditions.Bit32) != 0); " is 122.
Long Statement,BuildDependency.Tools,ExceptionLogging,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\Tools\ExceptionLogging.cs,OnBeforeNotify,The length of the statement  "		error.GroupingHash = string.Format ("{0} {1} {2} {3}"' error.Exception.GetType ().Name' RemoveFileNamePrefix (frame.GetFileName ())' frame.GetMethod ().Name' linenumber); " is 170.
Long Statement,BuildDependency.TeamCity,TeamCityApi,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\TeamCity\TeamCityApi.cs,Execute,The length of the statement  "		if (throwException && !(response.ErrorException is WebException) && !(response.ErrorException is NullReferenceException)) { " is 123.
Long Statement,BuildDependency.TeamCity,TeamCityApi,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\TeamCity\TeamCityApi.cs,GetArtifactsAsync,The length of the statement  "	request.Resource = string.Format ("/download/{0}/{1}/teamcity-ivy.xml"' template.Config.IdForArtifacts' template.RevisionValue); " is 128.
Long Statement,BuildDependency.TeamCity.RestClasses,BuildType,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\TeamCity\RestClasses\BuildType.cs,ToString,The length of the statement  "	//return string.Format("[BuildType: Id={0}' Name={1}' Href={2}' ProjectName={3}' ProjectId={4}' WebUrl={5}]"' Id' Name' Href' ProjectName' ProjectId' WebUrl); " is 158.
Magic Number,BuildDependency.Artifacts,ArtifactRule,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\Artifacts\ArtifactRule.cs,ParseRule,The following statement contains a magic number: if (!string.IsNullOrEmpty (dest)) {  	var index = dest.IndexOf ("=>"' StringComparison.InvariantCulture);  	if (index > -1)  		DestinationPath = dest.Substring (index + 2).Trim ();  }  
Magic Number,BuildDependency.Artifacts,ArtifactRule,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\Artifacts\ArtifactRule.cs,ParseRule,The following statement contains a magic number: if (index > -1)  	DestinationPath = dest.Substring (index + 2).Trim ();  
Magic Number,BuildDependency.Artifacts,ArtifactRule,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\Artifacts\ArtifactRule.cs,ParseRule,The following statement contains a magic number: DestinationPath = dest.Substring (index + 2).Trim ();  
Magic Number,BuildDependency.Artifacts,DownloadFileJob,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\Artifacts\DownloadFileJob.cs,DownloadFileJob,The following statement contains a magic number: if (parts.Length < 4 || parts [0] != JobTypeMarker)  	throw new SerializationException ("Unexpected line for DownloadFileJob: " + serializedJob);  
Magic Number,BuildDependency.Artifacts,DownloadFileJob,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\Artifacts\DownloadFileJob.cs,DownloadFileJob,The following statement contains a magic number: Url = parts [2];  
Magic Number,BuildDependency.Artifacts,DownloadFileJob,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\Artifacts\DownloadFileJob.cs,DownloadFileJob,The following statement contains a magic number: TargetFile = parts [3];  
Magic Number,BuildDependency.Artifacts,DownloadFileJob,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\Artifacts\DownloadFileJob.cs,Execute,The following statement contains a magic number: try {  	// Create a request for the specified remote file name  	var request = WebRequest.Create (Url) as HttpWebRequest;  	//				// If a username or password have been given' use them  	//				if (!string.IsNullOrEmpty(httpUsername) || !string.IsNullOrEmpty(httpPassword))  	//				{  	//					string username = httpUsername;  	//					string password = httpPassword;  	//					request.Credentials = new NetworkCredential(username' password);  	//				}  	bool appendFile = false;  	long tmpFileLength = 0;  	if (File.Exists (targetFile)) {  		var fi = new FileInfo (targetFile);  		request.IfModifiedSince = fi.LastWriteTimeUtc;  	}  	if (File.Exists (tmpTargetFile)) {  		// Interrupted download  		var fi = new FileInfo (tmpTargetFile);  		tmpFileLength = fi.Length;  		request.AddRange (tmpFileLength);  		appendFile = true;  	}  	// Send the request to the server and retrieve the  	// WebResponse object  	response = (HttpWebResponse)await Task.Factory.FromAsync<WebResponse> (request.BeginGetResponse' request.EndGetResponse' null);  	// Once the WebResponse object has been retrieved'  	// get the stream object associated with the response's data  	remoteStream = response.GetResponseStream ();  	// Create the local file  	Directory.CreateDirectory (Path.GetDirectoryName (targetFile));  	localStream = File.OpenWrite (tmpTargetFile);  	if (appendFile && tmpFileLength < response.ContentLength)  		localStream.Position = localStream.Length;  	// Allocate a 1k buffer  	var buffer = new byte[1024];  	int bytesRead;  	// Simple do/while loop to read from stream until  	// no bytes are returned  	do {  		// Read data (up to 1k) from the stream  		bytesRead = remoteStream.Read (buffer' 0' buffer.Length);  		// Write the data to the local file  		localStream.Write (buffer' 0' bytesRead);  	}  	while (bytesRead > 0);  	localStream.Close ();  	File.Delete (targetFile);  	File.Move (tmpTargetFile' targetFile);  }  catch (WebException wex) {  	if (wex.Status == WebExceptionStatus.ProtocolError) {  		var resp = wex.Response as HttpWebResponse;  		if (resp.StatusCode == HttpStatusCode.NotModified) {  			log.LogMessage ("File {0} not modified."' TargetFile);  			return true;  		}  	}  	else if (wex.Status == WebExceptionStatus.ConnectFailure || wex.Status == WebExceptionStatus.NameResolutionFailure) {  		// We probably don't have a network connection (despite the check in the caller).  		if (File.Exists (TargetFile)) {  			log.LogMessage ("Could not retrieve latest {0}. No network connection. Keeping existing file."' TargetFile);  		}  		else {  			log.LogError ("Could not retrieve latest {0}. No network connection."' Url);  		}  		return false;  	}  	string html = "";  	if (wex.Response != null) {  		using (var sr = new StreamReader (wex.Response.GetResponseStream ()))  			html = sr.ReadToEnd ();  		log.LogMessage ("Could not download from {0}. Server responds {1}"' Url' html);  	}  	else {  		log.LogMessage ("Could not download from {0}. no server response. Exception {1}. Status {2}"' Url' wex.Message' wex.Status);  	}  	return false;  }  catch (Exception e) {  	log.LogError (e.Message);  	log.LogMessage (e.StackTrace);  	return false;  }  finally {  	// Close the response and streams objects here  	// to make sure they're closed even if an exception  	// is thrown at some point  	if (response != null)  		response.Close ();  	if (remoteStream != null)  		remoteStream.Close ();  	if (localStream != null) {  		localStream.Close ();  		var fi = new FileInfo (targetFile);  		fi.LastWriteTime = lastModified;  	}  }  
Magic Number,BuildDependency.Artifacts,UnzipFilesJob,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\Artifacts\UnzipFilesJob.cs,UnzipFilesJob,The following statement contains a magic number: if (parts.Length < 5 || parts [0] != "U")  	throw new SerializationException ("Unexpected line for UnzipFilesJob: " + serializedJob);  
Magic Number,BuildDependency.Artifacts,UnzipFilesJob,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\Artifacts\UnzipFilesJob.cs,UnzipFilesJob,The following statement contains a magic number: ZipFile = parts [2];  
Magic Number,BuildDependency.Artifacts,UnzipFilesJob,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\Artifacts\UnzipFilesJob.cs,UnzipFilesJob,The following statement contains a magic number: SourcePath = parts [3];  
Magic Number,BuildDependency.Artifacts,UnzipFilesJob,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\Artifacts\UnzipFilesJob.cs,UnzipFilesJob,The following statement contains a magic number: DestinationPath = parts [4];  
Magic Number,BuildDependency.Tools,WildcardToRegex,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\Tools\WildcardToRegex.cs,ConvertString,The following statement contains a magic number: if (HasQuestionMarkRegEx.IsMatch (pattern)) {  	matchExact = true;  }  else if (hasExtension) {  	matchExact = CatchExtensionRegex.Match (pattern).Groups [1].Length != 3;  }  
Magic Number,BuildDependency.Tools,WildcardToRegex,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\Tools\WildcardToRegex.cs,ConvertString,The following statement contains a magic number: if (hasExtension) {  	matchExact = CatchExtensionRegex.Match (pattern).Groups [1].Length != 3;  }  
Magic Number,BuildDependency.Tools,WildcardToRegex,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\Tools\WildcardToRegex.cs,ConvertString,The following statement contains a magic number: matchExact = CatchExtensionRegex.Match (pattern).Groups [1].Length != 3;  
Magic Number,BuildDependency.Tools,Utils,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\Tools\Utils.cs,GetVersion,The following statement contains a magic number: return new Tuple<object' string> (fullSemVer.GetValue (null)' sha.GetValue (null).ToString ().Substring (0' 7));  
Magic Number,BuildDependency,DependencyFile,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\DependencyFile.cs,ReadServer,The following statement contains a magic number: while (!file.EndOfStream) {  	line = file.ReadLine ();  	lineCount++;  	if (string.IsNullOrEmpty (line.Trim ()))  		break;  	var parts = line.Split (new[] {  		'='  	}' 2);  	if (parts.Length == 2) {  		if (parts [0] == "Type") {  			ServerType type;  			if (Enum.TryParse<ServerType> (parts [1]' out type)) {  				server = Server.CreateServer (type);  				server.Name = name;  				_servers.Add (name' server);  			}  			else  				Console.WriteLine ("Can't interpret type {0}"' parts [1]);  		}  		else if (parts [0] == "Url" && server != null) {  			server.Url = parts [1];  		}  	}  }  
Magic Number,BuildDependency,DependencyFile,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\DependencyFile.cs,ReadServer,The following statement contains a magic number: while (!file.EndOfStream) {  	line = file.ReadLine ();  	lineCount++;  	if (string.IsNullOrEmpty (line.Trim ()))  		break;  	var parts = line.Split (new[] {  		'='  	}' 2);  	if (parts.Length == 2) {  		if (parts [0] == "Type") {  			ServerType type;  			if (Enum.TryParse<ServerType> (parts [1]' out type)) {  				server = Server.CreateServer (type);  				server.Name = name;  				_servers.Add (name' server);  			}  			else  				Console.WriteLine ("Can't interpret type {0}"' parts [1]);  		}  		else if (parts [0] == "Url" && server != null) {  			server.Url = parts [1];  		}  	}  }  
Magic Number,BuildDependency,DependencyFile,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\DependencyFile.cs,ReadServer,The following statement contains a magic number: if (parts.Length == 2) {  	if (parts [0] == "Type") {  		ServerType type;  		if (Enum.TryParse<ServerType> (parts [1]' out type)) {  			server = Server.CreateServer (type);  			server.Name = name;  			_servers.Add (name' server);  		}  		else  			Console.WriteLine ("Can't interpret type {0}"' parts [1]);  	}  	else if (parts [0] == "Url" && server != null) {  		server.Url = parts [1];  	}  }  
Magic Number,BuildDependency,DependencyFile,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\DependencyFile.cs,InternalLoadFile,The following statement contains a magic number: using (var file = new StreamReader (fileName)) {  	while (!file.EndOfStream) {  		var line = file.ReadLine ();  		lineNumber++;  		if (line.StartsWith ("[["' StringComparison.InvariantCulture)) {  			lineNumber += ReadServer (file' line);  		}  		else if (line.StartsWith ("["' StringComparison.InvariantCulture)) {  			var parts = line.Trim ('['' ']').Split (new[] {  				':'  			}' 3);  			if (parts.Length > 2) {  				var tc = parts [0];  				var configId = parts [2];  				if (_servers.ContainsKey (tc)) {  					var server = _servers [tc] as TeamCityApi;  					var buildTypesTask = server.GetBuildTypesTask ();  					var projectsTask = server.GetAllProjectsAsync ();  					var buildTypes = await buildTypesTask;  					var projects = await projectsTask;  					var config = buildTypes.FirstOrDefault (type => type.Id == configId);  					if (config != null) {  						var proj = projects.FirstOrDefault (project => project.Id == config.ProjectId);  						if (proj != null) {  							artifact = new ArtifactTemplate (server' proj' configId);  							artifacts.Add (artifact);  							continue;  						}  					}  				}  			}  			Console.WriteLine ("Can't interpret line {0}. Skipping {1}."' lineNumber' line);  		}  		else if (string.IsNullOrEmpty (line.Trim ()) || line.Trim ().StartsWith ("#"' StringComparison.InvariantCulture)) {  			// ignore empty lines and comments  		}  		else {  			var parts = line.Split (new[] {  				'='  			}' 2);  			if (parts.Length < 2) {  				Console.WriteLine ("Can't interpret line {0}. Skipping {1}"' lineNumber' line);  				continue;  			}  			switch (parts [0]) {  			case "RevisionName":  				artifact.RevisionName = parts [1];  				break;  			case "RevisionValue":  				artifact.RevisionValue = parts [1];  				break;  			case "Condition":  				Conditions condition;  				if (Enum.TryParse<Conditions> (parts [1]' out condition))  					artifact.Condition = condition;  				else  					Console.WriteLine ("Can't interpret condition on line {0}. Skipping {1}"' lineNumber' line);  				break;  			case "Path": {  				var bldr = new StringBuilder ();  				line = parts [1];  				while (!string.IsNullOrEmpty (line) && !file.EndOfStream) {  					bldr.AppendLine (line);  					line = file.ReadLine ();  				}  				artifact.PathRules = bldr.ToString ();  				break;  			}  			}  		}  	}  }  
Magic Number,BuildDependency,DependencyFile,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\DependencyFile.cs,InternalLoadFile,The following statement contains a magic number: using (var file = new StreamReader (fileName)) {  	while (!file.EndOfStream) {  		var line = file.ReadLine ();  		lineNumber++;  		if (line.StartsWith ("[["' StringComparison.InvariantCulture)) {  			lineNumber += ReadServer (file' line);  		}  		else if (line.StartsWith ("["' StringComparison.InvariantCulture)) {  			var parts = line.Trim ('['' ']').Split (new[] {  				':'  			}' 3);  			if (parts.Length > 2) {  				var tc = parts [0];  				var configId = parts [2];  				if (_servers.ContainsKey (tc)) {  					var server = _servers [tc] as TeamCityApi;  					var buildTypesTask = server.GetBuildTypesTask ();  					var projectsTask = server.GetAllProjectsAsync ();  					var buildTypes = await buildTypesTask;  					var projects = await projectsTask;  					var config = buildTypes.FirstOrDefault (type => type.Id == configId);  					if (config != null) {  						var proj = projects.FirstOrDefault (project => project.Id == config.ProjectId);  						if (proj != null) {  							artifact = new ArtifactTemplate (server' proj' configId);  							artifacts.Add (artifact);  							continue;  						}  					}  				}  			}  			Console.WriteLine ("Can't interpret line {0}. Skipping {1}."' lineNumber' line);  		}  		else if (string.IsNullOrEmpty (line.Trim ()) || line.Trim ().StartsWith ("#"' StringComparison.InvariantCulture)) {  			// ignore empty lines and comments  		}  		else {  			var parts = line.Split (new[] {  				'='  			}' 2);  			if (parts.Length < 2) {  				Console.WriteLine ("Can't interpret line {0}. Skipping {1}"' lineNumber' line);  				continue;  			}  			switch (parts [0]) {  			case "RevisionName":  				artifact.RevisionName = parts [1];  				break;  			case "RevisionValue":  				artifact.RevisionValue = parts [1];  				break;  			case "Condition":  				Conditions condition;  				if (Enum.TryParse<Conditions> (parts [1]' out condition))  					artifact.Condition = condition;  				else  					Console.WriteLine ("Can't interpret condition on line {0}. Skipping {1}"' lineNumber' line);  				break;  			case "Path": {  				var bldr = new StringBuilder ();  				line = parts [1];  				while (!string.IsNullOrEmpty (line) && !file.EndOfStream) {  					bldr.AppendLine (line);  					line = file.ReadLine ();  				}  				artifact.PathRules = bldr.ToString ();  				break;  			}  			}  		}  	}  }  
Magic Number,BuildDependency,DependencyFile,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\DependencyFile.cs,InternalLoadFile,The following statement contains a magic number: using (var file = new StreamReader (fileName)) {  	while (!file.EndOfStream) {  		var line = file.ReadLine ();  		lineNumber++;  		if (line.StartsWith ("[["' StringComparison.InvariantCulture)) {  			lineNumber += ReadServer (file' line);  		}  		else if (line.StartsWith ("["' StringComparison.InvariantCulture)) {  			var parts = line.Trim ('['' ']').Split (new[] {  				':'  			}' 3);  			if (parts.Length > 2) {  				var tc = parts [0];  				var configId = parts [2];  				if (_servers.ContainsKey (tc)) {  					var server = _servers [tc] as TeamCityApi;  					var buildTypesTask = server.GetBuildTypesTask ();  					var projectsTask = server.GetAllProjectsAsync ();  					var buildTypes = await buildTypesTask;  					var projects = await projectsTask;  					var config = buildTypes.FirstOrDefault (type => type.Id == configId);  					if (config != null) {  						var proj = projects.FirstOrDefault (project => project.Id == config.ProjectId);  						if (proj != null) {  							artifact = new ArtifactTemplate (server' proj' configId);  							artifacts.Add (artifact);  							continue;  						}  					}  				}  			}  			Console.WriteLine ("Can't interpret line {0}. Skipping {1}."' lineNumber' line);  		}  		else if (string.IsNullOrEmpty (line.Trim ()) || line.Trim ().StartsWith ("#"' StringComparison.InvariantCulture)) {  			// ignore empty lines and comments  		}  		else {  			var parts = line.Split (new[] {  				'='  			}' 2);  			if (parts.Length < 2) {  				Console.WriteLine ("Can't interpret line {0}. Skipping {1}"' lineNumber' line);  				continue;  			}  			switch (parts [0]) {  			case "RevisionName":  				artifact.RevisionName = parts [1];  				break;  			case "RevisionValue":  				artifact.RevisionValue = parts [1];  				break;  			case "Condition":  				Conditions condition;  				if (Enum.TryParse<Conditions> (parts [1]' out condition))  					artifact.Condition = condition;  				else  					Console.WriteLine ("Can't interpret condition on line {0}. Skipping {1}"' lineNumber' line);  				break;  			case "Path": {  				var bldr = new StringBuilder ();  				line = parts [1];  				while (!string.IsNullOrEmpty (line) && !file.EndOfStream) {  					bldr.AppendLine (line);  					line = file.ReadLine ();  				}  				artifact.PathRules = bldr.ToString ();  				break;  			}  			}  		}  	}  }  
Magic Number,BuildDependency,DependencyFile,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\DependencyFile.cs,InternalLoadFile,The following statement contains a magic number: using (var file = new StreamReader (fileName)) {  	while (!file.EndOfStream) {  		var line = file.ReadLine ();  		lineNumber++;  		if (line.StartsWith ("[["' StringComparison.InvariantCulture)) {  			lineNumber += ReadServer (file' line);  		}  		else if (line.StartsWith ("["' StringComparison.InvariantCulture)) {  			var parts = line.Trim ('['' ']').Split (new[] {  				':'  			}' 3);  			if (parts.Length > 2) {  				var tc = parts [0];  				var configId = parts [2];  				if (_servers.ContainsKey (tc)) {  					var server = _servers [tc] as TeamCityApi;  					var buildTypesTask = server.GetBuildTypesTask ();  					var projectsTask = server.GetAllProjectsAsync ();  					var buildTypes = await buildTypesTask;  					var projects = await projectsTask;  					var config = buildTypes.FirstOrDefault (type => type.Id == configId);  					if (config != null) {  						var proj = projects.FirstOrDefault (project => project.Id == config.ProjectId);  						if (proj != null) {  							artifact = new ArtifactTemplate (server' proj' configId);  							artifacts.Add (artifact);  							continue;  						}  					}  				}  			}  			Console.WriteLine ("Can't interpret line {0}. Skipping {1}."' lineNumber' line);  		}  		else if (string.IsNullOrEmpty (line.Trim ()) || line.Trim ().StartsWith ("#"' StringComparison.InvariantCulture)) {  			// ignore empty lines and comments  		}  		else {  			var parts = line.Split (new[] {  				'='  			}' 2);  			if (parts.Length < 2) {  				Console.WriteLine ("Can't interpret line {0}. Skipping {1}"' lineNumber' line);  				continue;  			}  			switch (parts [0]) {  			case "RevisionName":  				artifact.RevisionName = parts [1];  				break;  			case "RevisionValue":  				artifact.RevisionValue = parts [1];  				break;  			case "Condition":  				Conditions condition;  				if (Enum.TryParse<Conditions> (parts [1]' out condition))  					artifact.Condition = condition;  				else  					Console.WriteLine ("Can't interpret condition on line {0}. Skipping {1}"' lineNumber' line);  				break;  			case "Path": {  				var bldr = new StringBuilder ();  				line = parts [1];  				while (!string.IsNullOrEmpty (line) && !file.EndOfStream) {  					bldr.AppendLine (line);  					line = file.ReadLine ();  				}  				artifact.PathRules = bldr.ToString ();  				break;  			}  			}  		}  	}  }  
Magic Number,BuildDependency,DependencyFile,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\DependencyFile.cs,InternalLoadFile,The following statement contains a magic number: using (var file = new StreamReader (fileName)) {  	while (!file.EndOfStream) {  		var line = file.ReadLine ();  		lineNumber++;  		if (line.StartsWith ("[["' StringComparison.InvariantCulture)) {  			lineNumber += ReadServer (file' line);  		}  		else if (line.StartsWith ("["' StringComparison.InvariantCulture)) {  			var parts = line.Trim ('['' ']').Split (new[] {  				':'  			}' 3);  			if (parts.Length > 2) {  				var tc = parts [0];  				var configId = parts [2];  				if (_servers.ContainsKey (tc)) {  					var server = _servers [tc] as TeamCityApi;  					var buildTypesTask = server.GetBuildTypesTask ();  					var projectsTask = server.GetAllProjectsAsync ();  					var buildTypes = await buildTypesTask;  					var projects = await projectsTask;  					var config = buildTypes.FirstOrDefault (type => type.Id == configId);  					if (config != null) {  						var proj = projects.FirstOrDefault (project => project.Id == config.ProjectId);  						if (proj != null) {  							artifact = new ArtifactTemplate (server' proj' configId);  							artifacts.Add (artifact);  							continue;  						}  					}  				}  			}  			Console.WriteLine ("Can't interpret line {0}. Skipping {1}."' lineNumber' line);  		}  		else if (string.IsNullOrEmpty (line.Trim ()) || line.Trim ().StartsWith ("#"' StringComparison.InvariantCulture)) {  			// ignore empty lines and comments  		}  		else {  			var parts = line.Split (new[] {  				'='  			}' 2);  			if (parts.Length < 2) {  				Console.WriteLine ("Can't interpret line {0}. Skipping {1}"' lineNumber' line);  				continue;  			}  			switch (parts [0]) {  			case "RevisionName":  				artifact.RevisionName = parts [1];  				break;  			case "RevisionValue":  				artifact.RevisionValue = parts [1];  				break;  			case "Condition":  				Conditions condition;  				if (Enum.TryParse<Conditions> (parts [1]' out condition))  					artifact.Condition = condition;  				else  					Console.WriteLine ("Can't interpret condition on line {0}. Skipping {1}"' lineNumber' line);  				break;  			case "Path": {  				var bldr = new StringBuilder ();  				line = parts [1];  				while (!string.IsNullOrEmpty (line) && !file.EndOfStream) {  					bldr.AppendLine (line);  					line = file.ReadLine ();  				}  				artifact.PathRules = bldr.ToString ();  				break;  			}  			}  		}  	}  }  
Magic Number,BuildDependency,DependencyFile,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\DependencyFile.cs,InternalLoadFile,The following statement contains a magic number: while (!file.EndOfStream) {  	var line = file.ReadLine ();  	lineNumber++;  	if (line.StartsWith ("[["' StringComparison.InvariantCulture)) {  		lineNumber += ReadServer (file' line);  	}  	else if (line.StartsWith ("["' StringComparison.InvariantCulture)) {  		var parts = line.Trim ('['' ']').Split (new[] {  			':'  		}' 3);  		if (parts.Length > 2) {  			var tc = parts [0];  			var configId = parts [2];  			if (_servers.ContainsKey (tc)) {  				var server = _servers [tc] as TeamCityApi;  				var buildTypesTask = server.GetBuildTypesTask ();  				var projectsTask = server.GetAllProjectsAsync ();  				var buildTypes = await buildTypesTask;  				var projects = await projectsTask;  				var config = buildTypes.FirstOrDefault (type => type.Id == configId);  				if (config != null) {  					var proj = projects.FirstOrDefault (project => project.Id == config.ProjectId);  					if (proj != null) {  						artifact = new ArtifactTemplate (server' proj' configId);  						artifacts.Add (artifact);  						continue;  					}  				}  			}  		}  		Console.WriteLine ("Can't interpret line {0}. Skipping {1}."' lineNumber' line);  	}  	else if (string.IsNullOrEmpty (line.Trim ()) || line.Trim ().StartsWith ("#"' StringComparison.InvariantCulture)) {  		// ignore empty lines and comments  	}  	else {  		var parts = line.Split (new[] {  			'='  		}' 2);  		if (parts.Length < 2) {  			Console.WriteLine ("Can't interpret line {0}. Skipping {1}"' lineNumber' line);  			continue;  		}  		switch (parts [0]) {  		case "RevisionName":  			artifact.RevisionName = parts [1];  			break;  		case "RevisionValue":  			artifact.RevisionValue = parts [1];  			break;  		case "Condition":  			Conditions condition;  			if (Enum.TryParse<Conditions> (parts [1]' out condition))  				artifact.Condition = condition;  			else  				Console.WriteLine ("Can't interpret condition on line {0}. Skipping {1}"' lineNumber' line);  			break;  		case "Path": {  			var bldr = new StringBuilder ();  			line = parts [1];  			while (!string.IsNullOrEmpty (line) && !file.EndOfStream) {  				bldr.AppendLine (line);  				line = file.ReadLine ();  			}  			artifact.PathRules = bldr.ToString ();  			break;  		}  		}  	}  }  
Magic Number,BuildDependency,DependencyFile,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\DependencyFile.cs,InternalLoadFile,The following statement contains a magic number: while (!file.EndOfStream) {  	var line = file.ReadLine ();  	lineNumber++;  	if (line.StartsWith ("[["' StringComparison.InvariantCulture)) {  		lineNumber += ReadServer (file' line);  	}  	else if (line.StartsWith ("["' StringComparison.InvariantCulture)) {  		var parts = line.Trim ('['' ']').Split (new[] {  			':'  		}' 3);  		if (parts.Length > 2) {  			var tc = parts [0];  			var configId = parts [2];  			if (_servers.ContainsKey (tc)) {  				var server = _servers [tc] as TeamCityApi;  				var buildTypesTask = server.GetBuildTypesTask ();  				var projectsTask = server.GetAllProjectsAsync ();  				var buildTypes = await buildTypesTask;  				var projects = await projectsTask;  				var config = buildTypes.FirstOrDefault (type => type.Id == configId);  				if (config != null) {  					var proj = projects.FirstOrDefault (project => project.Id == config.ProjectId);  					if (proj != null) {  						artifact = new ArtifactTemplate (server' proj' configId);  						artifacts.Add (artifact);  						continue;  					}  				}  			}  		}  		Console.WriteLine ("Can't interpret line {0}. Skipping {1}."' lineNumber' line);  	}  	else if (string.IsNullOrEmpty (line.Trim ()) || line.Trim ().StartsWith ("#"' StringComparison.InvariantCulture)) {  		// ignore empty lines and comments  	}  	else {  		var parts = line.Split (new[] {  			'='  		}' 2);  		if (parts.Length < 2) {  			Console.WriteLine ("Can't interpret line {0}. Skipping {1}"' lineNumber' line);  			continue;  		}  		switch (parts [0]) {  		case "RevisionName":  			artifact.RevisionName = parts [1];  			break;  		case "RevisionValue":  			artifact.RevisionValue = parts [1];  			break;  		case "Condition":  			Conditions condition;  			if (Enum.TryParse<Conditions> (parts [1]' out condition))  				artifact.Condition = condition;  			else  				Console.WriteLine ("Can't interpret condition on line {0}. Skipping {1}"' lineNumber' line);  			break;  		case "Path": {  			var bldr = new StringBuilder ();  			line = parts [1];  			while (!string.IsNullOrEmpty (line) && !file.EndOfStream) {  				bldr.AppendLine (line);  				line = file.ReadLine ();  			}  			artifact.PathRules = bldr.ToString ();  			break;  		}  		}  	}  }  
Magic Number,BuildDependency,DependencyFile,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\DependencyFile.cs,InternalLoadFile,The following statement contains a magic number: while (!file.EndOfStream) {  	var line = file.ReadLine ();  	lineNumber++;  	if (line.StartsWith ("[["' StringComparison.InvariantCulture)) {  		lineNumber += ReadServer (file' line);  	}  	else if (line.StartsWith ("["' StringComparison.InvariantCulture)) {  		var parts = line.Trim ('['' ']').Split (new[] {  			':'  		}' 3);  		if (parts.Length > 2) {  			var tc = parts [0];  			var configId = parts [2];  			if (_servers.ContainsKey (tc)) {  				var server = _servers [tc] as TeamCityApi;  				var buildTypesTask = server.GetBuildTypesTask ();  				var projectsTask = server.GetAllProjectsAsync ();  				var buildTypes = await buildTypesTask;  				var projects = await projectsTask;  				var config = buildTypes.FirstOrDefault (type => type.Id == configId);  				if (config != null) {  					var proj = projects.FirstOrDefault (project => project.Id == config.ProjectId);  					if (proj != null) {  						artifact = new ArtifactTemplate (server' proj' configId);  						artifacts.Add (artifact);  						continue;  					}  				}  			}  		}  		Console.WriteLine ("Can't interpret line {0}. Skipping {1}."' lineNumber' line);  	}  	else if (string.IsNullOrEmpty (line.Trim ()) || line.Trim ().StartsWith ("#"' StringComparison.InvariantCulture)) {  		// ignore empty lines and comments  	}  	else {  		var parts = line.Split (new[] {  			'='  		}' 2);  		if (parts.Length < 2) {  			Console.WriteLine ("Can't interpret line {0}. Skipping {1}"' lineNumber' line);  			continue;  		}  		switch (parts [0]) {  		case "RevisionName":  			artifact.RevisionName = parts [1];  			break;  		case "RevisionValue":  			artifact.RevisionValue = parts [1];  			break;  		case "Condition":  			Conditions condition;  			if (Enum.TryParse<Conditions> (parts [1]' out condition))  				artifact.Condition = condition;  			else  				Console.WriteLine ("Can't interpret condition on line {0}. Skipping {1}"' lineNumber' line);  			break;  		case "Path": {  			var bldr = new StringBuilder ();  			line = parts [1];  			while (!string.IsNullOrEmpty (line) && !file.EndOfStream) {  				bldr.AppendLine (line);  				line = file.ReadLine ();  			}  			artifact.PathRules = bldr.ToString ();  			break;  		}  		}  	}  }  
Magic Number,BuildDependency,DependencyFile,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\DependencyFile.cs,InternalLoadFile,The following statement contains a magic number: while (!file.EndOfStream) {  	var line = file.ReadLine ();  	lineNumber++;  	if (line.StartsWith ("[["' StringComparison.InvariantCulture)) {  		lineNumber += ReadServer (file' line);  	}  	else if (line.StartsWith ("["' StringComparison.InvariantCulture)) {  		var parts = line.Trim ('['' ']').Split (new[] {  			':'  		}' 3);  		if (parts.Length > 2) {  			var tc = parts [0];  			var configId = parts [2];  			if (_servers.ContainsKey (tc)) {  				var server = _servers [tc] as TeamCityApi;  				var buildTypesTask = server.GetBuildTypesTask ();  				var projectsTask = server.GetAllProjectsAsync ();  				var buildTypes = await buildTypesTask;  				var projects = await projectsTask;  				var config = buildTypes.FirstOrDefault (type => type.Id == configId);  				if (config != null) {  					var proj = projects.FirstOrDefault (project => project.Id == config.ProjectId);  					if (proj != null) {  						artifact = new ArtifactTemplate (server' proj' configId);  						artifacts.Add (artifact);  						continue;  					}  				}  			}  		}  		Console.WriteLine ("Can't interpret line {0}. Skipping {1}."' lineNumber' line);  	}  	else if (string.IsNullOrEmpty (line.Trim ()) || line.Trim ().StartsWith ("#"' StringComparison.InvariantCulture)) {  		// ignore empty lines and comments  	}  	else {  		var parts = line.Split (new[] {  			'='  		}' 2);  		if (parts.Length < 2) {  			Console.WriteLine ("Can't interpret line {0}. Skipping {1}"' lineNumber' line);  			continue;  		}  		switch (parts [0]) {  		case "RevisionName":  			artifact.RevisionName = parts [1];  			break;  		case "RevisionValue":  			artifact.RevisionValue = parts [1];  			break;  		case "Condition":  			Conditions condition;  			if (Enum.TryParse<Conditions> (parts [1]' out condition))  				artifact.Condition = condition;  			else  				Console.WriteLine ("Can't interpret condition on line {0}. Skipping {1}"' lineNumber' line);  			break;  		case "Path": {  			var bldr = new StringBuilder ();  			line = parts [1];  			while (!string.IsNullOrEmpty (line) && !file.EndOfStream) {  				bldr.AppendLine (line);  				line = file.ReadLine ();  			}  			artifact.PathRules = bldr.ToString ();  			break;  		}  		}  	}  }  
Magic Number,BuildDependency,DependencyFile,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\DependencyFile.cs,InternalLoadFile,The following statement contains a magic number: while (!file.EndOfStream) {  	var line = file.ReadLine ();  	lineNumber++;  	if (line.StartsWith ("[["' StringComparison.InvariantCulture)) {  		lineNumber += ReadServer (file' line);  	}  	else if (line.StartsWith ("["' StringComparison.InvariantCulture)) {  		var parts = line.Trim ('['' ']').Split (new[] {  			':'  		}' 3);  		if (parts.Length > 2) {  			var tc = parts [0];  			var configId = parts [2];  			if (_servers.ContainsKey (tc)) {  				var server = _servers [tc] as TeamCityApi;  				var buildTypesTask = server.GetBuildTypesTask ();  				var projectsTask = server.GetAllProjectsAsync ();  				var buildTypes = await buildTypesTask;  				var projects = await projectsTask;  				var config = buildTypes.FirstOrDefault (type => type.Id == configId);  				if (config != null) {  					var proj = projects.FirstOrDefault (project => project.Id == config.ProjectId);  					if (proj != null) {  						artifact = new ArtifactTemplate (server' proj' configId);  						artifacts.Add (artifact);  						continue;  					}  				}  			}  		}  		Console.WriteLine ("Can't interpret line {0}. Skipping {1}."' lineNumber' line);  	}  	else if (string.IsNullOrEmpty (line.Trim ()) || line.Trim ().StartsWith ("#"' StringComparison.InvariantCulture)) {  		// ignore empty lines and comments  	}  	else {  		var parts = line.Split (new[] {  			'='  		}' 2);  		if (parts.Length < 2) {  			Console.WriteLine ("Can't interpret line {0}. Skipping {1}"' lineNumber' line);  			continue;  		}  		switch (parts [0]) {  		case "RevisionName":  			artifact.RevisionName = parts [1];  			break;  		case "RevisionValue":  			artifact.RevisionValue = parts [1];  			break;  		case "Condition":  			Conditions condition;  			if (Enum.TryParse<Conditions> (parts [1]' out condition))  				artifact.Condition = condition;  			else  				Console.WriteLine ("Can't interpret condition on line {0}. Skipping {1}"' lineNumber' line);  			break;  		case "Path": {  			var bldr = new StringBuilder ();  			line = parts [1];  			while (!string.IsNullOrEmpty (line) && !file.EndOfStream) {  				bldr.AppendLine (line);  				line = file.ReadLine ();  			}  			artifact.PathRules = bldr.ToString ();  			break;  		}  		}  	}  }  
Magic Number,BuildDependency,DependencyFile,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\DependencyFile.cs,InternalLoadFile,The following statement contains a magic number: if (line.StartsWith ("[["' StringComparison.InvariantCulture)) {  	lineNumber += ReadServer (file' line);  }  else if (line.StartsWith ("["' StringComparison.InvariantCulture)) {  	var parts = line.Trim ('['' ']').Split (new[] {  		':'  	}' 3);  	if (parts.Length > 2) {  		var tc = parts [0];  		var configId = parts [2];  		if (_servers.ContainsKey (tc)) {  			var server = _servers [tc] as TeamCityApi;  			var buildTypesTask = server.GetBuildTypesTask ();  			var projectsTask = server.GetAllProjectsAsync ();  			var buildTypes = await buildTypesTask;  			var projects = await projectsTask;  			var config = buildTypes.FirstOrDefault (type => type.Id == configId);  			if (config != null) {  				var proj = projects.FirstOrDefault (project => project.Id == config.ProjectId);  				if (proj != null) {  					artifact = new ArtifactTemplate (server' proj' configId);  					artifacts.Add (artifact);  					continue;  				}  			}  		}  	}  	Console.WriteLine ("Can't interpret line {0}. Skipping {1}."' lineNumber' line);  }  else if (string.IsNullOrEmpty (line.Trim ()) || line.Trim ().StartsWith ("#"' StringComparison.InvariantCulture)) {  	// ignore empty lines and comments  }  else {  	var parts = line.Split (new[] {  		'='  	}' 2);  	if (parts.Length < 2) {  		Console.WriteLine ("Can't interpret line {0}. Skipping {1}"' lineNumber' line);  		continue;  	}  	switch (parts [0]) {  	case "RevisionName":  		artifact.RevisionName = parts [1];  		break;  	case "RevisionValue":  		artifact.RevisionValue = parts [1];  		break;  	case "Condition":  		Conditions condition;  		if (Enum.TryParse<Conditions> (parts [1]' out condition))  			artifact.Condition = condition;  		else  			Console.WriteLine ("Can't interpret condition on line {0}. Skipping {1}"' lineNumber' line);  		break;  	case "Path": {  		var bldr = new StringBuilder ();  		line = parts [1];  		while (!string.IsNullOrEmpty (line) && !file.EndOfStream) {  			bldr.AppendLine (line);  			line = file.ReadLine ();  		}  		artifact.PathRules = bldr.ToString ();  		break;  	}  	}  }  
Magic Number,BuildDependency,DependencyFile,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\DependencyFile.cs,InternalLoadFile,The following statement contains a magic number: if (line.StartsWith ("[["' StringComparison.InvariantCulture)) {  	lineNumber += ReadServer (file' line);  }  else if (line.StartsWith ("["' StringComparison.InvariantCulture)) {  	var parts = line.Trim ('['' ']').Split (new[] {  		':'  	}' 3);  	if (parts.Length > 2) {  		var tc = parts [0];  		var configId = parts [2];  		if (_servers.ContainsKey (tc)) {  			var server = _servers [tc] as TeamCityApi;  			var buildTypesTask = server.GetBuildTypesTask ();  			var projectsTask = server.GetAllProjectsAsync ();  			var buildTypes = await buildTypesTask;  			var projects = await projectsTask;  			var config = buildTypes.FirstOrDefault (type => type.Id == configId);  			if (config != null) {  				var proj = projects.FirstOrDefault (project => project.Id == config.ProjectId);  				if (proj != null) {  					artifact = new ArtifactTemplate (server' proj' configId);  					artifacts.Add (artifact);  					continue;  				}  			}  		}  	}  	Console.WriteLine ("Can't interpret line {0}. Skipping {1}."' lineNumber' line);  }  else if (string.IsNullOrEmpty (line.Trim ()) || line.Trim ().StartsWith ("#"' StringComparison.InvariantCulture)) {  	// ignore empty lines and comments  }  else {  	var parts = line.Split (new[] {  		'='  	}' 2);  	if (parts.Length < 2) {  		Console.WriteLine ("Can't interpret line {0}. Skipping {1}"' lineNumber' line);  		continue;  	}  	switch (parts [0]) {  	case "RevisionName":  		artifact.RevisionName = parts [1];  		break;  	case "RevisionValue":  		artifact.RevisionValue = parts [1];  		break;  	case "Condition":  		Conditions condition;  		if (Enum.TryParse<Conditions> (parts [1]' out condition))  			artifact.Condition = condition;  		else  			Console.WriteLine ("Can't interpret condition on line {0}. Skipping {1}"' lineNumber' line);  		break;  	case "Path": {  		var bldr = new StringBuilder ();  		line = parts [1];  		while (!string.IsNullOrEmpty (line) && !file.EndOfStream) {  			bldr.AppendLine (line);  			line = file.ReadLine ();  		}  		artifact.PathRules = bldr.ToString ();  		break;  	}  	}  }  
Magic Number,BuildDependency,DependencyFile,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\DependencyFile.cs,InternalLoadFile,The following statement contains a magic number: if (line.StartsWith ("[["' StringComparison.InvariantCulture)) {  	lineNumber += ReadServer (file' line);  }  else if (line.StartsWith ("["' StringComparison.InvariantCulture)) {  	var parts = line.Trim ('['' ']').Split (new[] {  		':'  	}' 3);  	if (parts.Length > 2) {  		var tc = parts [0];  		var configId = parts [2];  		if (_servers.ContainsKey (tc)) {  			var server = _servers [tc] as TeamCityApi;  			var buildTypesTask = server.GetBuildTypesTask ();  			var projectsTask = server.GetAllProjectsAsync ();  			var buildTypes = await buildTypesTask;  			var projects = await projectsTask;  			var config = buildTypes.FirstOrDefault (type => type.Id == configId);  			if (config != null) {  				var proj = projects.FirstOrDefault (project => project.Id == config.ProjectId);  				if (proj != null) {  					artifact = new ArtifactTemplate (server' proj' configId);  					artifacts.Add (artifact);  					continue;  				}  			}  		}  	}  	Console.WriteLine ("Can't interpret line {0}. Skipping {1}."' lineNumber' line);  }  else if (string.IsNullOrEmpty (line.Trim ()) || line.Trim ().StartsWith ("#"' StringComparison.InvariantCulture)) {  	// ignore empty lines and comments  }  else {  	var parts = line.Split (new[] {  		'='  	}' 2);  	if (parts.Length < 2) {  		Console.WriteLine ("Can't interpret line {0}. Skipping {1}"' lineNumber' line);  		continue;  	}  	switch (parts [0]) {  	case "RevisionName":  		artifact.RevisionName = parts [1];  		break;  	case "RevisionValue":  		artifact.RevisionValue = parts [1];  		break;  	case "Condition":  		Conditions condition;  		if (Enum.TryParse<Conditions> (parts [1]' out condition))  			artifact.Condition = condition;  		else  			Console.WriteLine ("Can't interpret condition on line {0}. Skipping {1}"' lineNumber' line);  		break;  	case "Path": {  		var bldr = new StringBuilder ();  		line = parts [1];  		while (!string.IsNullOrEmpty (line) && !file.EndOfStream) {  			bldr.AppendLine (line);  			line = file.ReadLine ();  		}  		artifact.PathRules = bldr.ToString ();  		break;  	}  	}  }  
Magic Number,BuildDependency,DependencyFile,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\DependencyFile.cs,InternalLoadFile,The following statement contains a magic number: if (line.StartsWith ("[["' StringComparison.InvariantCulture)) {  	lineNumber += ReadServer (file' line);  }  else if (line.StartsWith ("["' StringComparison.InvariantCulture)) {  	var parts = line.Trim ('['' ']').Split (new[] {  		':'  	}' 3);  	if (parts.Length > 2) {  		var tc = parts [0];  		var configId = parts [2];  		if (_servers.ContainsKey (tc)) {  			var server = _servers [tc] as TeamCityApi;  			var buildTypesTask = server.GetBuildTypesTask ();  			var projectsTask = server.GetAllProjectsAsync ();  			var buildTypes = await buildTypesTask;  			var projects = await projectsTask;  			var config = buildTypes.FirstOrDefault (type => type.Id == configId);  			if (config != null) {  				var proj = projects.FirstOrDefault (project => project.Id == config.ProjectId);  				if (proj != null) {  					artifact = new ArtifactTemplate (server' proj' configId);  					artifacts.Add (artifact);  					continue;  				}  			}  		}  	}  	Console.WriteLine ("Can't interpret line {0}. Skipping {1}."' lineNumber' line);  }  else if (string.IsNullOrEmpty (line.Trim ()) || line.Trim ().StartsWith ("#"' StringComparison.InvariantCulture)) {  	// ignore empty lines and comments  }  else {  	var parts = line.Split (new[] {  		'='  	}' 2);  	if (parts.Length < 2) {  		Console.WriteLine ("Can't interpret line {0}. Skipping {1}"' lineNumber' line);  		continue;  	}  	switch (parts [0]) {  	case "RevisionName":  		artifact.RevisionName = parts [1];  		break;  	case "RevisionValue":  		artifact.RevisionValue = parts [1];  		break;  	case "Condition":  		Conditions condition;  		if (Enum.TryParse<Conditions> (parts [1]' out condition))  			artifact.Condition = condition;  		else  			Console.WriteLine ("Can't interpret condition on line {0}. Skipping {1}"' lineNumber' line);  		break;  	case "Path": {  		var bldr = new StringBuilder ();  		line = parts [1];  		while (!string.IsNullOrEmpty (line) && !file.EndOfStream) {  			bldr.AppendLine (line);  			line = file.ReadLine ();  		}  		artifact.PathRules = bldr.ToString ();  		break;  	}  	}  }  
Magic Number,BuildDependency,DependencyFile,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\DependencyFile.cs,InternalLoadFile,The following statement contains a magic number: if (line.StartsWith ("[["' StringComparison.InvariantCulture)) {  	lineNumber += ReadServer (file' line);  }  else if (line.StartsWith ("["' StringComparison.InvariantCulture)) {  	var parts = line.Trim ('['' ']').Split (new[] {  		':'  	}' 3);  	if (parts.Length > 2) {  		var tc = parts [0];  		var configId = parts [2];  		if (_servers.ContainsKey (tc)) {  			var server = _servers [tc] as TeamCityApi;  			var buildTypesTask = server.GetBuildTypesTask ();  			var projectsTask = server.GetAllProjectsAsync ();  			var buildTypes = await buildTypesTask;  			var projects = await projectsTask;  			var config = buildTypes.FirstOrDefault (type => type.Id == configId);  			if (config != null) {  				var proj = projects.FirstOrDefault (project => project.Id == config.ProjectId);  				if (proj != null) {  					artifact = new ArtifactTemplate (server' proj' configId);  					artifacts.Add (artifact);  					continue;  				}  			}  		}  	}  	Console.WriteLine ("Can't interpret line {0}. Skipping {1}."' lineNumber' line);  }  else if (string.IsNullOrEmpty (line.Trim ()) || line.Trim ().StartsWith ("#"' StringComparison.InvariantCulture)) {  	// ignore empty lines and comments  }  else {  	var parts = line.Split (new[] {  		'='  	}' 2);  	if (parts.Length < 2) {  		Console.WriteLine ("Can't interpret line {0}. Skipping {1}"' lineNumber' line);  		continue;  	}  	switch (parts [0]) {  	case "RevisionName":  		artifact.RevisionName = parts [1];  		break;  	case "RevisionValue":  		artifact.RevisionValue = parts [1];  		break;  	case "Condition":  		Conditions condition;  		if (Enum.TryParse<Conditions> (parts [1]' out condition))  			artifact.Condition = condition;  		else  			Console.WriteLine ("Can't interpret condition on line {0}. Skipping {1}"' lineNumber' line);  		break;  	case "Path": {  		var bldr = new StringBuilder ();  		line = parts [1];  		while (!string.IsNullOrEmpty (line) && !file.EndOfStream) {  			bldr.AppendLine (line);  			line = file.ReadLine ();  		}  		artifact.PathRules = bldr.ToString ();  		break;  	}  	}  }  
Magic Number,BuildDependency,DependencyFile,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\DependencyFile.cs,InternalLoadFile,The following statement contains a magic number: if (line.StartsWith ("["' StringComparison.InvariantCulture)) {  	var parts = line.Trim ('['' ']').Split (new[] {  		':'  	}' 3);  	if (parts.Length > 2) {  		var tc = parts [0];  		var configId = parts [2];  		if (_servers.ContainsKey (tc)) {  			var server = _servers [tc] as TeamCityApi;  			var buildTypesTask = server.GetBuildTypesTask ();  			var projectsTask = server.GetAllProjectsAsync ();  			var buildTypes = await buildTypesTask;  			var projects = await projectsTask;  			var config = buildTypes.FirstOrDefault (type => type.Id == configId);  			if (config != null) {  				var proj = projects.FirstOrDefault (project => project.Id == config.ProjectId);  				if (proj != null) {  					artifact = new ArtifactTemplate (server' proj' configId);  					artifacts.Add (artifact);  					continue;  				}  			}  		}  	}  	Console.WriteLine ("Can't interpret line {0}. Skipping {1}."' lineNumber' line);  }  else if (string.IsNullOrEmpty (line.Trim ()) || line.Trim ().StartsWith ("#"' StringComparison.InvariantCulture)) {  	// ignore empty lines and comments  }  else {  	var parts = line.Split (new[] {  		'='  	}' 2);  	if (parts.Length < 2) {  		Console.WriteLine ("Can't interpret line {0}. Skipping {1}"' lineNumber' line);  		continue;  	}  	switch (parts [0]) {  	case "RevisionName":  		artifact.RevisionName = parts [1];  		break;  	case "RevisionValue":  		artifact.RevisionValue = parts [1];  		break;  	case "Condition":  		Conditions condition;  		if (Enum.TryParse<Conditions> (parts [1]' out condition))  			artifact.Condition = condition;  		else  			Console.WriteLine ("Can't interpret condition on line {0}. Skipping {1}"' lineNumber' line);  		break;  	case "Path": {  		var bldr = new StringBuilder ();  		line = parts [1];  		while (!string.IsNullOrEmpty (line) && !file.EndOfStream) {  			bldr.AppendLine (line);  			line = file.ReadLine ();  		}  		artifact.PathRules = bldr.ToString ();  		break;  	}  	}  }  
Magic Number,BuildDependency,DependencyFile,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\DependencyFile.cs,InternalLoadFile,The following statement contains a magic number: if (line.StartsWith ("["' StringComparison.InvariantCulture)) {  	var parts = line.Trim ('['' ']').Split (new[] {  		':'  	}' 3);  	if (parts.Length > 2) {  		var tc = parts [0];  		var configId = parts [2];  		if (_servers.ContainsKey (tc)) {  			var server = _servers [tc] as TeamCityApi;  			var buildTypesTask = server.GetBuildTypesTask ();  			var projectsTask = server.GetAllProjectsAsync ();  			var buildTypes = await buildTypesTask;  			var projects = await projectsTask;  			var config = buildTypes.FirstOrDefault (type => type.Id == configId);  			if (config != null) {  				var proj = projects.FirstOrDefault (project => project.Id == config.ProjectId);  				if (proj != null) {  					artifact = new ArtifactTemplate (server' proj' configId);  					artifacts.Add (artifact);  					continue;  				}  			}  		}  	}  	Console.WriteLine ("Can't interpret line {0}. Skipping {1}."' lineNumber' line);  }  else if (string.IsNullOrEmpty (line.Trim ()) || line.Trim ().StartsWith ("#"' StringComparison.InvariantCulture)) {  	// ignore empty lines and comments  }  else {  	var parts = line.Split (new[] {  		'='  	}' 2);  	if (parts.Length < 2) {  		Console.WriteLine ("Can't interpret line {0}. Skipping {1}"' lineNumber' line);  		continue;  	}  	switch (parts [0]) {  	case "RevisionName":  		artifact.RevisionName = parts [1];  		break;  	case "RevisionValue":  		artifact.RevisionValue = parts [1];  		break;  	case "Condition":  		Conditions condition;  		if (Enum.TryParse<Conditions> (parts [1]' out condition))  			artifact.Condition = condition;  		else  			Console.WriteLine ("Can't interpret condition on line {0}. Skipping {1}"' lineNumber' line);  		break;  	case "Path": {  		var bldr = new StringBuilder ();  		line = parts [1];  		while (!string.IsNullOrEmpty (line) && !file.EndOfStream) {  			bldr.AppendLine (line);  			line = file.ReadLine ();  		}  		artifact.PathRules = bldr.ToString ();  		break;  	}  	}  }  
Magic Number,BuildDependency,DependencyFile,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\DependencyFile.cs,InternalLoadFile,The following statement contains a magic number: if (line.StartsWith ("["' StringComparison.InvariantCulture)) {  	var parts = line.Trim ('['' ']').Split (new[] {  		':'  	}' 3);  	if (parts.Length > 2) {  		var tc = parts [0];  		var configId = parts [2];  		if (_servers.ContainsKey (tc)) {  			var server = _servers [tc] as TeamCityApi;  			var buildTypesTask = server.GetBuildTypesTask ();  			var projectsTask = server.GetAllProjectsAsync ();  			var buildTypes = await buildTypesTask;  			var projects = await projectsTask;  			var config = buildTypes.FirstOrDefault (type => type.Id == configId);  			if (config != null) {  				var proj = projects.FirstOrDefault (project => project.Id == config.ProjectId);  				if (proj != null) {  					artifact = new ArtifactTemplate (server' proj' configId);  					artifacts.Add (artifact);  					continue;  				}  			}  		}  	}  	Console.WriteLine ("Can't interpret line {0}. Skipping {1}."' lineNumber' line);  }  else if (string.IsNullOrEmpty (line.Trim ()) || line.Trim ().StartsWith ("#"' StringComparison.InvariantCulture)) {  	// ignore empty lines and comments  }  else {  	var parts = line.Split (new[] {  		'='  	}' 2);  	if (parts.Length < 2) {  		Console.WriteLine ("Can't interpret line {0}. Skipping {1}"' lineNumber' line);  		continue;  	}  	switch (parts [0]) {  	case "RevisionName":  		artifact.RevisionName = parts [1];  		break;  	case "RevisionValue":  		artifact.RevisionValue = parts [1];  		break;  	case "Condition":  		Conditions condition;  		if (Enum.TryParse<Conditions> (parts [1]' out condition))  			artifact.Condition = condition;  		else  			Console.WriteLine ("Can't interpret condition on line {0}. Skipping {1}"' lineNumber' line);  		break;  	case "Path": {  		var bldr = new StringBuilder ();  		line = parts [1];  		while (!string.IsNullOrEmpty (line) && !file.EndOfStream) {  			bldr.AppendLine (line);  			line = file.ReadLine ();  		}  		artifact.PathRules = bldr.ToString ();  		break;  	}  	}  }  
Magic Number,BuildDependency,DependencyFile,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\DependencyFile.cs,InternalLoadFile,The following statement contains a magic number: if (line.StartsWith ("["' StringComparison.InvariantCulture)) {  	var parts = line.Trim ('['' ']').Split (new[] {  		':'  	}' 3);  	if (parts.Length > 2) {  		var tc = parts [0];  		var configId = parts [2];  		if (_servers.ContainsKey (tc)) {  			var server = _servers [tc] as TeamCityApi;  			var buildTypesTask = server.GetBuildTypesTask ();  			var projectsTask = server.GetAllProjectsAsync ();  			var buildTypes = await buildTypesTask;  			var projects = await projectsTask;  			var config = buildTypes.FirstOrDefault (type => type.Id == configId);  			if (config != null) {  				var proj = projects.FirstOrDefault (project => project.Id == config.ProjectId);  				if (proj != null) {  					artifact = new ArtifactTemplate (server' proj' configId);  					artifacts.Add (artifact);  					continue;  				}  			}  		}  	}  	Console.WriteLine ("Can't interpret line {0}. Skipping {1}."' lineNumber' line);  }  else if (string.IsNullOrEmpty (line.Trim ()) || line.Trim ().StartsWith ("#"' StringComparison.InvariantCulture)) {  	// ignore empty lines and comments  }  else {  	var parts = line.Split (new[] {  		'='  	}' 2);  	if (parts.Length < 2) {  		Console.WriteLine ("Can't interpret line {0}. Skipping {1}"' lineNumber' line);  		continue;  	}  	switch (parts [0]) {  	case "RevisionName":  		artifact.RevisionName = parts [1];  		break;  	case "RevisionValue":  		artifact.RevisionValue = parts [1];  		break;  	case "Condition":  		Conditions condition;  		if (Enum.TryParse<Conditions> (parts [1]' out condition))  			artifact.Condition = condition;  		else  			Console.WriteLine ("Can't interpret condition on line {0}. Skipping {1}"' lineNumber' line);  		break;  	case "Path": {  		var bldr = new StringBuilder ();  		line = parts [1];  		while (!string.IsNullOrEmpty (line) && !file.EndOfStream) {  			bldr.AppendLine (line);  			line = file.ReadLine ();  		}  		artifact.PathRules = bldr.ToString ();  		break;  	}  	}  }  
Magic Number,BuildDependency,DependencyFile,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\DependencyFile.cs,InternalLoadFile,The following statement contains a magic number: if (line.StartsWith ("["' StringComparison.InvariantCulture)) {  	var parts = line.Trim ('['' ']').Split (new[] {  		':'  	}' 3);  	if (parts.Length > 2) {  		var tc = parts [0];  		var configId = parts [2];  		if (_servers.ContainsKey (tc)) {  			var server = _servers [tc] as TeamCityApi;  			var buildTypesTask = server.GetBuildTypesTask ();  			var projectsTask = server.GetAllProjectsAsync ();  			var buildTypes = await buildTypesTask;  			var projects = await projectsTask;  			var config = buildTypes.FirstOrDefault (type => type.Id == configId);  			if (config != null) {  				var proj = projects.FirstOrDefault (project => project.Id == config.ProjectId);  				if (proj != null) {  					artifact = new ArtifactTemplate (server' proj' configId);  					artifacts.Add (artifact);  					continue;  				}  			}  		}  	}  	Console.WriteLine ("Can't interpret line {0}. Skipping {1}."' lineNumber' line);  }  else if (string.IsNullOrEmpty (line.Trim ()) || line.Trim ().StartsWith ("#"' StringComparison.InvariantCulture)) {  	// ignore empty lines and comments  }  else {  	var parts = line.Split (new[] {  		'='  	}' 2);  	if (parts.Length < 2) {  		Console.WriteLine ("Can't interpret line {0}. Skipping {1}"' lineNumber' line);  		continue;  	}  	switch (parts [0]) {  	case "RevisionName":  		artifact.RevisionName = parts [1];  		break;  	case "RevisionValue":  		artifact.RevisionValue = parts [1];  		break;  	case "Condition":  		Conditions condition;  		if (Enum.TryParse<Conditions> (parts [1]' out condition))  			artifact.Condition = condition;  		else  			Console.WriteLine ("Can't interpret condition on line {0}. Skipping {1}"' lineNumber' line);  		break;  	case "Path": {  		var bldr = new StringBuilder ();  		line = parts [1];  		while (!string.IsNullOrEmpty (line) && !file.EndOfStream) {  			bldr.AppendLine (line);  			line = file.ReadLine ();  		}  		artifact.PathRules = bldr.ToString ();  		break;  	}  	}  }  
Magic Number,BuildDependency,DependencyFile,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\DependencyFile.cs,InternalLoadFile,The following statement contains a magic number: if (parts.Length > 2) {  	var tc = parts [0];  	var configId = parts [2];  	if (_servers.ContainsKey (tc)) {  		var server = _servers [tc] as TeamCityApi;  		var buildTypesTask = server.GetBuildTypesTask ();  		var projectsTask = server.GetAllProjectsAsync ();  		var buildTypes = await buildTypesTask;  		var projects = await projectsTask;  		var config = buildTypes.FirstOrDefault (type => type.Id == configId);  		if (config != null) {  			var proj = projects.FirstOrDefault (project => project.Id == config.ProjectId);  			if (proj != null) {  				artifact = new ArtifactTemplate (server' proj' configId);  				artifacts.Add (artifact);  				continue;  			}  		}  	}  }  
Magic Number,BuildDependency,DependencyFile,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\DependencyFile.cs,InternalLoadFile,The following statement contains a magic number: if (parts.Length > 2) {  	var tc = parts [0];  	var configId = parts [2];  	if (_servers.ContainsKey (tc)) {  		var server = _servers [tc] as TeamCityApi;  		var buildTypesTask = server.GetBuildTypesTask ();  		var projectsTask = server.GetAllProjectsAsync ();  		var buildTypes = await buildTypesTask;  		var projects = await projectsTask;  		var config = buildTypes.FirstOrDefault (type => type.Id == configId);  		if (config != null) {  			var proj = projects.FirstOrDefault (project => project.Id == config.ProjectId);  			if (proj != null) {  				artifact = new ArtifactTemplate (server' proj' configId);  				artifacts.Add (artifact);  				continue;  			}  		}  	}  }  
Magic Number,BuildDependency,DependencyFile,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\DependencyFile.cs,InternalLoadFile,The following statement contains a magic number: if (string.IsNullOrEmpty (line.Trim ()) || line.Trim ().StartsWith ("#"' StringComparison.InvariantCulture)) {  	// ignore empty lines and comments  }  else {  	var parts = line.Split (new[] {  		'='  	}' 2);  	if (parts.Length < 2) {  		Console.WriteLine ("Can't interpret line {0}. Skipping {1}"' lineNumber' line);  		continue;  	}  	switch (parts [0]) {  	case "RevisionName":  		artifact.RevisionName = parts [1];  		break;  	case "RevisionValue":  		artifact.RevisionValue = parts [1];  		break;  	case "Condition":  		Conditions condition;  		if (Enum.TryParse<Conditions> (parts [1]' out condition))  			artifact.Condition = condition;  		else  			Console.WriteLine ("Can't interpret condition on line {0}. Skipping {1}"' lineNumber' line);  		break;  	case "Path": {  		var bldr = new StringBuilder ();  		line = parts [1];  		while (!string.IsNullOrEmpty (line) && !file.EndOfStream) {  			bldr.AppendLine (line);  			line = file.ReadLine ();  		}  		artifact.PathRules = bldr.ToString ();  		break;  	}  	}  }  
Magic Number,BuildDependency,DependencyFile,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\DependencyFile.cs,InternalLoadFile,The following statement contains a magic number: if (string.IsNullOrEmpty (line.Trim ()) || line.Trim ().StartsWith ("#"' StringComparison.InvariantCulture)) {  	// ignore empty lines and comments  }  else {  	var parts = line.Split (new[] {  		'='  	}' 2);  	if (parts.Length < 2) {  		Console.WriteLine ("Can't interpret line {0}. Skipping {1}"' lineNumber' line);  		continue;  	}  	switch (parts [0]) {  	case "RevisionName":  		artifact.RevisionName = parts [1];  		break;  	case "RevisionValue":  		artifact.RevisionValue = parts [1];  		break;  	case "Condition":  		Conditions condition;  		if (Enum.TryParse<Conditions> (parts [1]' out condition))  			artifact.Condition = condition;  		else  			Console.WriteLine ("Can't interpret condition on line {0}. Skipping {1}"' lineNumber' line);  		break;  	case "Path": {  		var bldr = new StringBuilder ();  		line = parts [1];  		while (!string.IsNullOrEmpty (line) && !file.EndOfStream) {  			bldr.AppendLine (line);  			line = file.ReadLine ();  		}  		artifact.PathRules = bldr.ToString ();  		break;  	}  	}  }  
Magic Number,BuildDependency,DependencyFile,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\DependencyFile.cs,InternalLoadFile,The following statement contains a magic number: if (parts.Length < 2) {  	Console.WriteLine ("Can't interpret line {0}. Skipping {1}"' lineNumber' line);  	continue;  }  
Missing Default,BuildDependency,DependencyFile,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\DependencyFile.cs,InternalLoadFile,The following switch statement is missing a default case: switch (parts [0]) {  case "RevisionName":  	artifact.RevisionName = parts [1];  	break;  case "RevisionValue":  	artifact.RevisionValue = parts [1];  	break;  case "Condition":  	Conditions condition;  	if (Enum.TryParse<Conditions> (parts [1]' out condition))  		artifact.Condition = condition;  	else  		Console.WriteLine ("Can't interpret condition on line {0}. Skipping {1}"' lineNumber' line);  	break;  case "Path": {  	var bldr = new StringBuilder ();  	line = parts [1];  	while (!string.IsNullOrEmpty (line) && !file.EndOfStream) {  		bldr.AppendLine (line);  		line = file.ReadLine ();  	}  	artifact.PathRules = bldr.ToString ();  	break;  }  }  
Missing Default,BuildDependency,JobsFile,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\JobsFile.cs,ProcessLine,The following switch statement is missing a default case: switch (line [0]) {  case 'F':  	return new DownloadFileJob (line);  case 'D':  	return new DownloadZipJob (line);  case 'U':  	return new UnzipFilesJob (line);  }  
Missing Default,BuildDependency.TeamCity.RestClasses,ArtifactProperties,C:\repos\ermshiperete_BuildDependency\BuildDependencyLib\TeamCity\RestClasses\ArtifactProperties.cs,ArtifactProperties,The following switch statement is missing a default case: switch (prop.Name) {  case "cleanDestinationDirectory":  	CleanDestinationDirectory = Convert.ToBoolean (prop.Value);  	break;  case "pathRules":  	PathRules = prop.Value;  	break;  case "revisionName":  	RevisionName = prop.Value;  	break;  case "revisionValue":  	RevisionValue = prop.Value;  	break;  case "source_buildTypeId":  	SourceBuildTypeId = prop.Value;  	break;  }  
