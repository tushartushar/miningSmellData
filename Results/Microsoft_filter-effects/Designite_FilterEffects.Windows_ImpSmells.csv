Implementation smell,Namespace,Class,File,Method,Description
Long Method,FilterEffects,ViewfinderPage,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\ViewfinderPage.xaml.cs,InitializeCameraAsync,The method has 119 lines of code.
Long Method,FilterEffects.Filters,SixthGearFilter,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\Filters\SixthGearFilter.cs,CreateControl,The method has 106 lines of code.
Long Parameter List,FilterEffects,AppUtils,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\AppUtils.cs,ScaleImageStreamAsync,The method has 6 parameters. Parameters: originalStream' originalResolutionWidth' originalResolutionHeight' scaledStream' scaleWidth' scaleHeight
Long Identifier,FilterEffects,DataContext,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\DataContext.cs,,The length of the parameter DefaultPreviewResolutionHeight is 30.
Long Identifier,FilterEffects,FileManager,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\FileManager.cs,,The length of the parameter SelectDestinationOperationName is 30.
Long Identifier,FilterEffects,FileManager,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\FileManager.cs,,The length of the parameter _supportedSaveImageFilePostfixes is 32.
Long Statement,FilterEffects,AppUtils,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\AppUtils.cs,GetBestResolution,The length of the statement  "                    //if (encodingProperties.Width * encodingProperties.Height > width * height) // Use this to get the resolution with the most pixels " is 131.
Long Statement,FilterEffects.Common,SuspensionManager,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\Common\SuspensionManager.cs,SaveAsync,The length of the statement  "                StorageFile file = await ApplicationData.Current.LocalFolder.CreateFileAsync(sessionStateFilename' CreationCollisionOption.ReplaceExisting); " is 140.
Long Statement,FilterEffects.Common,SuspensionManager,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\Common\SuspensionManager.cs,RestoreAsync,The length of the statement  "                    if (weakFrameReference.TryGetTarget(out frame) && (string)frame.GetValue(FrameSessionBaseKeyProperty) == sessionBaseKey) " is 120.
Long Statement,FilterEffects.Common,SuspensionManager,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\Common\SuspensionManager.cs,RegisterFrame,The length of the statement  "                throw new InvalidOperationException("Frames must be either be registered before accessing frame session state' or not registered at all"); " is 138.
Complex Conditional,FilterEffects.Common,NavigationHelper,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "(e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167)"  is complex.
Complex Conditional,FilterEffects.Common,NavigationHelper,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt)"  is complex.
Complex Conditional,FilterEffects.Common,NavigationHelper,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt)"  is complex.
Magic Number,FilterEffects,AppUtils,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\AppUtils.cs,ScaleImageStreamAsync,The following statement contains a magic number: encoder.SetPixelData(BitmapPixelFormat.Bgra8' BitmapAlphaMode.Ignore'                  (uint)originalResolutionWidth' (uint)originalResolutionHeight'                  96.0' 96.0' pixelArray);
Magic Number,FilterEffects,AppUtils,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\AppUtils.cs,ScaleImageStreamAsync,The following statement contains a magic number: encoder.SetPixelData(BitmapPixelFormat.Bgra8' BitmapAlphaMode.Ignore'                  (uint)originalResolutionWidth' (uint)originalResolutionHeight'                  96.0' 96.0' pixelArray);
Magic Number,FilterEffects,AppUtils,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\AppUtils.cs,FileStreamToJpegStreamAsync,The following statement contains a magic number: encoder.SetPixelData(BitmapPixelFormat.Bgra8' BitmapAlphaMode.Ignore' (uint)width' (uint)height' 96.0' 96.0' pixels);
Magic Number,FilterEffects,AppUtils,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\AppUtils.cs,FileStreamToJpegStreamAsync,The following statement contains a magic number: encoder.SetPixelData(BitmapPixelFormat.Bgra8' BitmapAlphaMode.Ignore' (uint)width' (uint)height' 96.0' 96.0' pixels);
Magic Number,FilterEffects.Common,NavigationHelper,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      e.Handled = true;                      this.GoBackCommand.Execute(null);                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      e.Handled = true;                      this.GoForwardCommand.Execute(null);                  }              }
Magic Number,FilterEffects.Common,NavigationHelper,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      e.Handled = true;                      this.GoBackCommand.Execute(null);                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      e.Handled = true;                      this.GoForwardCommand.Execute(null);                  }              }
Magic Number,FilterEffects.Common,NavigationHelper,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      e.Handled = true;                      this.GoBackCommand.Execute(null);                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      e.Handled = true;                      this.GoForwardCommand.Execute(null);                  }              }
Magic Number,FilterEffects.Common,NavigationHelper,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  var downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      e.Handled = true;                      this.GoBackCommand.Execute(null);                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      e.Handled = true;                      this.GoForwardCommand.Execute(null);                  }              }
Magic Number,FilterEffects.Filters,EightiesPopSongFilter,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\Filters\EightiesPopSongFilter.cs,CreateControl,The following statement contains a magic number: var margin = new Thickness {Top = 24};
Magic Number,FilterEffects.Filters,EightiesPopSongFilter,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\Filters\EightiesPopSongFilter.cs,CreateControl,The following statement contains a magic number: var padding = new Thickness { Left = 12' Right = 12 };
Magic Number,FilterEffects.Filters,EightiesPopSongFilter,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\Filters\EightiesPopSongFilter.cs,CreateControl,The following statement contains a magic number: var padding = new Thickness { Left = 12' Right = 12 };
Magic Number,FilterEffects.Filters,MarvelFilter,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\Filters\MarvelFilter.cs,CreateControl,The following statement contains a magic number: var margin = new Thickness {Top = 24};
Magic Number,FilterEffects.Filters,MarvelFilter,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\Filters\MarvelFilter.cs,CreateControl,The following statement contains a magic number: var padding = new Thickness {Left = 12' Right = 12};
Magic Number,FilterEffects.Filters,MarvelFilter,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\Filters\MarvelFilter.cs,CreateControl,The following statement contains a magic number: var padding = new Thickness {Left = 12' Right = 12};
Magic Number,FilterEffects.Filters,SixthGearFilter,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\Filters\SixthGearFilter.cs,CreateControl,The following statement contains a magic number: var brightnessSlider = new Slider              {                  StepFrequency = 0.01'                  Minimum = 0.0'                  Maximum = 1.0'                  Value = Filter.Brightness              };
Magic Number,FilterEffects.Filters,SixthGearFilter,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\Filters\SixthGearFilter.cs,CreateControl,The following statement contains a magic number: var saturationSlider = new Slider              {                  StepFrequency = 0.01'                  Minimum = 0.0'                  Maximum = 1.0'                  Value = Filter.Saturation              };
Magic Number,FilterEffects.Filters,SixthGearFilter,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\Filters\SixthGearFilter.cs,CreateControl,The following statement contains a magic number: var margin = new Thickness { Left = 72 };
Magic Number,FilterEffects.Filters,SixthGearFilter,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\Filters\SixthGearFilter.cs,CreateControl,The following statement contains a magic number: grid.ColumnDefinitions.Add(new ColumnDefinition { MaxWidth = 500 });
Missing Default,FilterEffects.Filters,SixthGearFilter,C:\repos\Microsoft_filter-effects\FilterEffects81\FilterEffects\FilterEffects.Shared\Filters\SixthGearFilter.cs,CreateControl,The following switch statement is missing a default case: switch (Filter.LomoVignetting)              {                  case LomoVignetting.Low: lowRadioButton.IsChecked = true; break;                  case LomoVignetting.Medium: medRadioButton.IsChecked = true; break;                  case LomoVignetting.High: highRadioButton.IsChecked = true; break;              }
