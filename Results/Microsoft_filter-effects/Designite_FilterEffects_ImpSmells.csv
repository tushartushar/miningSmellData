Implementation smell,Namespace,Class,File,Method,Description
Long Method,FilterEffects.Filters,SixthGearFilter,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\Filters\SixthGearFilter.cs,AttachControl,The method has 83 lines of code.
Complex Method,FilterEffects,PreviewPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\PreviewPage.xaml.cs,RestoreState,Cyclomatic complexity of the method is 8
Complex Method,FilterEffects,PreviewPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\PreviewPage.xaml.cs,SaveButton_Click,Cyclomatic complexity of the method is 7
Complex Method,FilterEffects,PreviewPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\PreviewPage.xaml.cs,ShowPropertiesControls,Cyclomatic complexity of the method is 9
Complex Method,FilterEffects.Filters,AbstractFilter,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\Filters\AbstractFilter.cs,Apply,Cyclomatic complexity of the method is 9
Complex Method,FilterEffects.Filters,AbstractFilter,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\Filters\AbstractFilter.cs,RenderJpegAsync,Cyclomatic complexity of the method is 7
Complex Method,FilterEffects.Filters,SixthGearFilter,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\Filters\SixthGearFilter.cs,AttachControl,Cyclomatic complexity of the method is 10
Long Parameter List,FilterEffects,AppUtils,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\AppUtils.cs,ScaleImageStreamAsync,The method has 4 parameters.
Long Parameter List,FilterEffects,AppUtils,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\AppUtils.cs,CalculatePreviewResolution,The method has 4 parameters.
Long Statement,FilterEffects,AppUtils,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\AppUtils.cs,CalculatePreviewResolution,The length of the statement  "	System.Diagnostics.Debug.WriteLine (DebugTag + "CalculatePreviewResolution(): " + originalWidth + "x" + originalHeight + " -> " + previewWidth + "x" + previewHeight); " is 166.
Long Statement,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,InitializeCamera,The length of the statement  "	Windows.Foundation.Size initialResolution = new Windows.Foundation.Size (FilterEffects.DataContext.DefaultPreviewResolutionWidth' FilterEffects.DataContext.DefaultPreviewResolutionHeight); " is 188.
Long Statement,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,InitializeCamera,The length of the statement  "	Windows.Foundation.Size previewResolution = new Windows.Foundation.Size (FilterEffects.DataContext.DefaultPreviewResolutionWidth' FilterEffects.DataContext.DefaultPreviewResolutionHeight); " is 188.
Long Statement,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,InitializeCamera,The length of the statement  "	IReadOnlyList<Windows.Foundation.Size> availableResolutions = PhotoCaptureDevice.GetAvailableCaptureResolutions (sensorLocation); " is 129.
Long Statement,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,PhotoChooserTask_Completed_Async,The length of the statement  "		dataContext.PreviewResolution = new Windows.Foundation.Size (FilterEffects.DataContext.DefaultPreviewResolutionWidth' 0); " is 121.
Long Statement,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,PhotoChooserTask_Completed_Async,The length of the statement  "		AppUtils.CalculatePreviewResolution ((int)dataContext.FullResolution.Width' (int)dataContext.FullResolution.Height' ref previewWidth' ref previewHeight); " is 153.
Long Statement,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,PhotoChooserTask_Completed_Async,The length of the statement  "		await AppUtils.ScaleImageStreamAsync (e.ChosenPhoto' dataContext.PreviewResolutionStream' dataContext.PreviewResolution); " is 121.
Magic Number,FilterEffects,AppUtils,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\AppUtils.cs,ScaleImageStreamAsync,The following statement contains a magic number: try {  	bitmap.SaveJpeg (tempStream' scaleWidth' scaleHeight' 0' 100);  } catch (Exception e) {  	System.Diagnostics.Debug.WriteLine (DebugTag + "SaveJpeg() failed: " + e.ToString ());  }  
Magic Number,FilterEffects,AppUtils,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\AppUtils.cs,ScaleImageStreamAsync,The following statement contains a magic number: bitmap.SaveJpeg (tempStream' scaleWidth' scaleHeight' 0' 100);  
Magic Number,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,SetOrientation,The following statement contains a magic number: if (orientation == PageOrientation.PortraitUp) {  	videoBrushTransformRotation = 90;  	videoCanvasWidth = 480;  	videoCanvasHeight = 640;  	videoCanvasMargin = new Thickness (0' -20' 0' 0);  } else if (orientation == PageOrientation.LandscapeRight) {  	videoBrushTransformRotation = 180;  	videoCanvasMargin = new Thickness (60' 0' 0' 0);  	titleTextMargin = new Thickness (60' 0' 0' 0);  }  
Magic Number,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,SetOrientation,The following statement contains a magic number: if (orientation == PageOrientation.PortraitUp) {  	videoBrushTransformRotation = 90;  	videoCanvasWidth = 480;  	videoCanvasHeight = 640;  	videoCanvasMargin = new Thickness (0' -20' 0' 0);  } else if (orientation == PageOrientation.LandscapeRight) {  	videoBrushTransformRotation = 180;  	videoCanvasMargin = new Thickness (60' 0' 0' 0);  	titleTextMargin = new Thickness (60' 0' 0' 0);  }  
Magic Number,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,SetOrientation,The following statement contains a magic number: if (orientation == PageOrientation.PortraitUp) {  	videoBrushTransformRotation = 90;  	videoCanvasWidth = 480;  	videoCanvasHeight = 640;  	videoCanvasMargin = new Thickness (0' -20' 0' 0);  } else if (orientation == PageOrientation.LandscapeRight) {  	videoBrushTransformRotation = 180;  	videoCanvasMargin = new Thickness (60' 0' 0' 0);  	titleTextMargin = new Thickness (60' 0' 0' 0);  }  
Magic Number,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,SetOrientation,The following statement contains a magic number: if (orientation == PageOrientation.PortraitUp) {  	videoBrushTransformRotation = 90;  	videoCanvasWidth = 480;  	videoCanvasHeight = 640;  	videoCanvasMargin = new Thickness (0' -20' 0' 0);  } else if (orientation == PageOrientation.LandscapeRight) {  	videoBrushTransformRotation = 180;  	videoCanvasMargin = new Thickness (60' 0' 0' 0);  	titleTextMargin = new Thickness (60' 0' 0' 0);  }  
Magic Number,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,SetOrientation,The following statement contains a magic number: if (orientation == PageOrientation.PortraitUp) {  	videoBrushTransformRotation = 90;  	videoCanvasWidth = 480;  	videoCanvasHeight = 640;  	videoCanvasMargin = new Thickness (0' -20' 0' 0);  } else if (orientation == PageOrientation.LandscapeRight) {  	videoBrushTransformRotation = 180;  	videoCanvasMargin = new Thickness (60' 0' 0' 0);  	titleTextMargin = new Thickness (60' 0' 0' 0);  }  
Magic Number,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,SetOrientation,The following statement contains a magic number: if (orientation == PageOrientation.PortraitUp) {  	videoBrushTransformRotation = 90;  	videoCanvasWidth = 480;  	videoCanvasHeight = 640;  	videoCanvasMargin = new Thickness (0' -20' 0' 0);  } else if (orientation == PageOrientation.LandscapeRight) {  	videoBrushTransformRotation = 180;  	videoCanvasMargin = new Thickness (60' 0' 0' 0);  	titleTextMargin = new Thickness (60' 0' 0' 0);  }  
Magic Number,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,SetOrientation,The following statement contains a magic number: if (orientation == PageOrientation.PortraitUp) {  	videoBrushTransformRotation = 90;  	videoCanvasWidth = 480;  	videoCanvasHeight = 640;  	videoCanvasMargin = new Thickness (0' -20' 0' 0);  } else if (orientation == PageOrientation.LandscapeRight) {  	videoBrushTransformRotation = 180;  	videoCanvasMargin = new Thickness (60' 0' 0' 0);  	titleTextMargin = new Thickness (60' 0' 0' 0);  }  
Magic Number,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,SetOrientation,The following statement contains a magic number: videoBrushTransformRotation = 90;  
Magic Number,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,SetOrientation,The following statement contains a magic number: videoCanvasWidth = 480;  
Magic Number,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,SetOrientation,The following statement contains a magic number: videoCanvasHeight = 640;  
Magic Number,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,SetOrientation,The following statement contains a magic number: videoCanvasMargin = new Thickness (0' -20' 0' 0);  
Magic Number,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,SetOrientation,The following statement contains a magic number: if (orientation == PageOrientation.LandscapeRight) {  	videoBrushTransformRotation = 180;  	videoCanvasMargin = new Thickness (60' 0' 0' 0);  	titleTextMargin = new Thickness (60' 0' 0' 0);  }  
Magic Number,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,SetOrientation,The following statement contains a magic number: if (orientation == PageOrientation.LandscapeRight) {  	videoBrushTransformRotation = 180;  	videoCanvasMargin = new Thickness (60' 0' 0' 0);  	titleTextMargin = new Thickness (60' 0' 0' 0);  }  
Magic Number,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,SetOrientation,The following statement contains a magic number: if (orientation == PageOrientation.LandscapeRight) {  	videoBrushTransformRotation = 180;  	videoCanvasMargin = new Thickness (60' 0' 0' 0);  	titleTextMargin = new Thickness (60' 0' 0' 0);  }  
Magic Number,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,SetOrientation,The following statement contains a magic number: videoBrushTransformRotation = 180;  
Magic Number,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,SetOrientation,The following statement contains a magic number: videoCanvasMargin = new Thickness (60' 0' 0' 0);  
Magic Number,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,SetOrientation,The following statement contains a magic number: titleTextMargin = new Thickness (60' 0' 0' 0);  
Magic Number,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,InitializeCamera,The following statement contains a magic number: for (int i = 0; i < availableResolutions.Count; i++) {  	double ratio = availableResolutions [i].Width / availableResolutions [i].Height;  	if (ratio > 1.32 && ratio < 1.34) {  		if (captureResolution.Width < availableResolutions [i].Width) {  			captureResolution = availableResolutions [i];  		}  	}  }  
Magic Number,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,InitializeCamera,The following statement contains a magic number: for (int i = 0; i < availableResolutions.Count; i++) {  	double ratio = availableResolutions [i].Width / availableResolutions [i].Height;  	if (ratio > 1.32 && ratio < 1.34) {  		if (captureResolution.Width < availableResolutions [i].Width) {  			captureResolution = availableResolutions [i];  		}  	}  }  
Magic Number,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,InitializeCamera,The following statement contains a magic number: if (ratio > 1.32 && ratio < 1.34) {  	if (captureResolution.Width < availableResolutions [i].Width) {  		captureResolution = availableResolutions [i];  	}  }  
Magic Number,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,InitializeCamera,The following statement contains a magic number: if (ratio > 1.32 && ratio < 1.34) {  	if (captureResolution.Width < availableResolutions [i].Width) {  		captureResolution = availableResolutions [i];  	}  }  
Magic Number,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,PhotoChooserTask_Completed_Async,The following statement contains a magic number: if (e.TaskResult == TaskResult.OK && e.ChosenPhoto != null) {  	DataContext dataContext = FilterEffects.DataContext.Instance;  	// Reset the streams  	dataContext.ResetStreams ();  	// Use the largest possible dimensions  	WriteableBitmap bitmap = new WriteableBitmap (3552' 2448);  	BitmapImage image = new BitmapImage ();  	image.SetSource (e.ChosenPhoto);  	try {  		// Jpeg images can be used as such  		bitmap.LoadJpeg (e.ChosenPhoto);  		e.ChosenPhoto.Position = 0;  		e.ChosenPhoto.CopyTo (dataContext.FullResolutionStream);  	} catch (Exception/*ex*/) {  		// Image format is not jpeg. Can be anything' so first   		// load it into a bitmap image and then write as jpeg  		bitmap = new WriteableBitmap (image);  		bitmap.SaveJpeg (dataContext.FullResolutionStream' image.PixelWidth' image.PixelHeight' 0' 100);  	}  	dataContext.SetFullResolution (image.PixelWidth' image.PixelHeight);  	dataContext.PreviewResolution = new Windows.Foundation.Size (FilterEffects.DataContext.DefaultPreviewResolutionWidth' 0);  	int previewWidth = (int)FilterEffects.DataContext.DefaultPreviewResolutionWidth;  	int previewHeight = 0;  	AppUtils.CalculatePreviewResolution ((int)dataContext.FullResolution.Width' (int)dataContext.FullResolution.Height' ref previewWidth' ref previewHeight);  	dataContext.SetPreviewResolution (previewWidth' previewHeight);  	await AppUtils.ScaleImageStreamAsync (e.ChosenPhoto' dataContext.PreviewResolutionStream' dataContext.PreviewResolution);  	// Get the storyboard from application resources  	Storyboard sb = (Storyboard)Resources ["CaptureAnimation"];  	sb.Begin ();  	NavigationService.Navigate (new Uri ("/PreviewPage.xaml"' UriKind.Relative));  }  
Magic Number,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,PhotoChooserTask_Completed_Async,The following statement contains a magic number: if (e.TaskResult == TaskResult.OK && e.ChosenPhoto != null) {  	DataContext dataContext = FilterEffects.DataContext.Instance;  	// Reset the streams  	dataContext.ResetStreams ();  	// Use the largest possible dimensions  	WriteableBitmap bitmap = new WriteableBitmap (3552' 2448);  	BitmapImage image = new BitmapImage ();  	image.SetSource (e.ChosenPhoto);  	try {  		// Jpeg images can be used as such  		bitmap.LoadJpeg (e.ChosenPhoto);  		e.ChosenPhoto.Position = 0;  		e.ChosenPhoto.CopyTo (dataContext.FullResolutionStream);  	} catch (Exception/*ex*/) {  		// Image format is not jpeg. Can be anything' so first   		// load it into a bitmap image and then write as jpeg  		bitmap = new WriteableBitmap (image);  		bitmap.SaveJpeg (dataContext.FullResolutionStream' image.PixelWidth' image.PixelHeight' 0' 100);  	}  	dataContext.SetFullResolution (image.PixelWidth' image.PixelHeight);  	dataContext.PreviewResolution = new Windows.Foundation.Size (FilterEffects.DataContext.DefaultPreviewResolutionWidth' 0);  	int previewWidth = (int)FilterEffects.DataContext.DefaultPreviewResolutionWidth;  	int previewHeight = 0;  	AppUtils.CalculatePreviewResolution ((int)dataContext.FullResolution.Width' (int)dataContext.FullResolution.Height' ref previewWidth' ref previewHeight);  	dataContext.SetPreviewResolution (previewWidth' previewHeight);  	await AppUtils.ScaleImageStreamAsync (e.ChosenPhoto' dataContext.PreviewResolutionStream' dataContext.PreviewResolution);  	// Get the storyboard from application resources  	Storyboard sb = (Storyboard)Resources ["CaptureAnimation"];  	sb.Begin ();  	NavigationService.Navigate (new Uri ("/PreviewPage.xaml"' UriKind.Relative));  }  
Magic Number,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,PhotoChooserTask_Completed_Async,The following statement contains a magic number: if (e.TaskResult == TaskResult.OK && e.ChosenPhoto != null) {  	DataContext dataContext = FilterEffects.DataContext.Instance;  	// Reset the streams  	dataContext.ResetStreams ();  	// Use the largest possible dimensions  	WriteableBitmap bitmap = new WriteableBitmap (3552' 2448);  	BitmapImage image = new BitmapImage ();  	image.SetSource (e.ChosenPhoto);  	try {  		// Jpeg images can be used as such  		bitmap.LoadJpeg (e.ChosenPhoto);  		e.ChosenPhoto.Position = 0;  		e.ChosenPhoto.CopyTo (dataContext.FullResolutionStream);  	} catch (Exception/*ex*/) {  		// Image format is not jpeg. Can be anything' so first   		// load it into a bitmap image and then write as jpeg  		bitmap = new WriteableBitmap (image);  		bitmap.SaveJpeg (dataContext.FullResolutionStream' image.PixelWidth' image.PixelHeight' 0' 100);  	}  	dataContext.SetFullResolution (image.PixelWidth' image.PixelHeight);  	dataContext.PreviewResolution = new Windows.Foundation.Size (FilterEffects.DataContext.DefaultPreviewResolutionWidth' 0);  	int previewWidth = (int)FilterEffects.DataContext.DefaultPreviewResolutionWidth;  	int previewHeight = 0;  	AppUtils.CalculatePreviewResolution ((int)dataContext.FullResolution.Width' (int)dataContext.FullResolution.Height' ref previewWidth' ref previewHeight);  	dataContext.SetPreviewResolution (previewWidth' previewHeight);  	await AppUtils.ScaleImageStreamAsync (e.ChosenPhoto' dataContext.PreviewResolutionStream' dataContext.PreviewResolution);  	// Get the storyboard from application resources  	Storyboard sb = (Storyboard)Resources ["CaptureAnimation"];  	sb.Begin ();  	NavigationService.Navigate (new Uri ("/PreviewPage.xaml"' UriKind.Relative));  }  
Magic Number,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,PhotoChooserTask_Completed_Async,The following statement contains a magic number: try {  	// Jpeg images can be used as such  	bitmap.LoadJpeg (e.ChosenPhoto);  	e.ChosenPhoto.Position = 0;  	e.ChosenPhoto.CopyTo (dataContext.FullResolutionStream);  } catch (Exception/*ex*/) {  	// Image format is not jpeg. Can be anything' so first   	// load it into a bitmap image and then write as jpeg  	bitmap = new WriteableBitmap (image);  	bitmap.SaveJpeg (dataContext.FullResolutionStream' image.PixelWidth' image.PixelHeight' 0' 100);  }  
Magic Number,FilterEffects,MainPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\MainPage.xaml.cs,PhotoChooserTask_Completed_Async,The following statement contains a magic number: bitmap.SaveJpeg (dataContext.FullResolutionStream' image.PixelWidth' image.PixelHeight' 0' 100);  
Missing Default,FilterEffects.Filters,SixthGearFilter,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWP\Filters\SixthGearFilter.cs,AttachControl,The following switch statement is missing a default case: switch (_lomoFilter.LomoVignetting) {  case LomoVignetting.Low:  	lowRadioButton.IsChecked = true;  	break;  case LomoVignetting.Medium:  	medRadioButton.IsChecked = true;  	break;  case LomoVignetting.High:  	highRadioButton.IsChecked = true;  	break;  }  
