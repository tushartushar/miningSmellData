Implementation smell,Namespace,Class,File,Method,Description
Long Method,FilterEffects,ViewfinderPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\ViewfinderPage.xaml.cs,InitializeCameraAsync,The method has 76 lines of code.
Long Method,FilterEffects.Filters,SixthGearFilter,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Filters\SixthGearFilter.cs,CreateControl,The method has 111 lines of code.
Long Method,FilterEffects.Filters,EightiesPopSongFilter,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Filters\EightiesPopSongFilter.cs,CreateControl,The method has 60 lines of code.
Complex Method,FilterEffects,PreviewPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\PreviewPage.xaml.cs,FilterPreviewListView_SelectionChanged,Cyclomatic complexity of the method is 7
Complex Method,FilterEffects,ViewfinderPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\ViewfinderPage.xaml.cs,InitializeCameraAsync,Cyclomatic complexity of the method is 12
Complex Method,FilterEffects.Filters,AbstractFilter,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Filters\AbstractFilter.cs,Apply,Cyclomatic complexity of the method is 9
Complex Method,FilterEffects.Filters,AbstractFilter,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Filters\AbstractFilter.cs,RenderJpegAsync,Cyclomatic complexity of the method is 7
Complex Method,FilterEffects.Filters,SixthGearFilter,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Filters\SixthGearFilter.cs,CreateControl,Cyclomatic complexity of the method is 11
Long Parameter List,FilterEffects,AppUtils,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\AppUtils.cs,ScaleImageStreamAsync,The method has 6 parameters.
Long Parameter List,FilterEffects,AppUtils,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\AppUtils.cs,ScaleImageStreamAsync,The method has 4 parameters.
Long Parameter List,FilterEffects,AppUtils,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\AppUtils.cs,CalculatePreviewResolution,The method has 4 parameters.
Long Statement,FilterEffects,AppUtils,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\AppUtils.cs,ScaleImageStreamAsync,The length of the statement  "	encoder.SetPixelData (BitmapPixelFormat.Bgra8' BitmapAlphaMode.Ignore' (uint)originalResolutionWidth' (uint)originalResolutionHeight' 96.0' 96.0' pixelArray); " is 158.
Long Statement,FilterEffects,AppUtils,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\AppUtils.cs,ScaleImageStreamAsync,The length of the statement  "	await ScaleImageStreamAsync (originalStream' (int)originalSize.Width' (int)originalSize.Height' scaledStream' (int)scaleSize.Width' (int)scaleSize.Height); " is 155.
Long Statement,FilterEffects,AppUtils,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\AppUtils.cs,CalculatePreviewResolution,The length of the statement  "	System.Diagnostics.Debug.WriteLine (DebugTag + "CalculatePreviewResolution(): " + originalWidth + "x" + originalHeight + " -> " + previewWidth + "x" + previewHeight); " is 166.
Long Statement,FilterEffects,PreviewPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\PreviewPage.xaml.cs,CreatePreviewImagesAsync,The length of the statement  "				await Windows.ApplicationModel.Core.CoreApplication.MainView.CoreWindow.Dispatcher.RunAsync (Windows.UI.Core.CoreDispatcherPriority.Normal' () => { " is 147.
Long Statement,FilterEffects,ViewfinderPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\ViewfinderPage.xaml.cs,InitializeCameraAsync,The length of the statement  "			var mediaEncodingPropertiesList = _photoCaptureManager.VideoDeviceController.GetAvailableMediaStreamProperties (MediaStreamType.Photo); " is 135.
Long Statement,FilterEffects,ViewfinderPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\ViewfinderPage.xaml.cs,InitializeCameraAsync,The length of the statement  "				//if (encodingProperties.Width * encodingProperties.Height > width * height) // Use this to get the resolution with the most pixels " is 131.
Long Statement,FilterEffects,ViewfinderPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\ViewfinderPage.xaml.cs,InitializeCameraAsync,The length of the statement  "				await _photoCaptureManager.VideoDeviceController.SetMediaStreamPropertiesAsync (MediaStreamType.Photo' propertiesToSet); " is 120.
Long Statement,FilterEffects,ViewfinderPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\ViewfinderPage.xaml.cs,InitializeCameraAsync,The length of the statement  "				var fallbackResolution = new Size (FilterEffects.DataContext.DefaultPreviewResolutionWidth' FilterEffects.DataContext.DefaultPreviewResolutionHeight); " is 150.
Long Statement,FilterEffects,ViewfinderPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\ViewfinderPage.xaml.cs,Capture,The length of the statement  "		await AppUtils.ScaleImageStreamAsync (_dataContext.FullResolutionStream' _dataContext.FullResolution' _dataContext.PreviewResolutionStream' _dataContext.PreviewResolution); " is 172.
Long Statement,FilterEffects,ViewfinderPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\ViewfinderPage.xaml.cs,SelectImageButton_Click,The length of the statement  "		await AppUtils.ScaleImageStreamAsync (_dataContext.FullResolutionStream' _dataContext.FullResolution' _dataContext.PreviewResolutionStream' _dataContext.PreviewResolution); " is 172.
Long Statement,FilterEffects.Common,NavigationHelper,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The length of the statement  "	if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown || e.EventType == CoreAcceleratorKeyEventType.KeyDown) && (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right || (int)virtualKey == 166 || (int)virtualKey == 167)) { " is 240.
Long Statement,FilterEffects.Common,ObservableDictionary,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Common\ObservableDictionary.cs,Remove,The length of the statement  "	if (this._dictionary.TryGetValue (item.Key' out currentValue) && Object.Equals (item.Value' currentValue) && this._dictionary.Remove (item.Key)) { " is 146.
Long Statement,FilterEffects.Common,SuspensionManager,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Common\SuspensionManager.cs,SaveAsync,The length of the statement  "		StorageFile file = await ApplicationData.Current.LocalFolder.CreateFileAsync (SessionStateFilename' CreationCollisionOption.ReplaceExisting); " is 141.
Long Statement,FilterEffects.Common,SuspensionManager,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Common\SuspensionManager.cs,RegisterFrame,The length of the statement  "		throw new InvalidOperationException ("Frames must be either be registered before accessing frame session state' or not registered at all"); " is 139.
Complex Conditional,FilterEffects.Common,NavigationHelper,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "(e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown || e.EventType == CoreAcceleratorKeyEventType.KeyDown) && (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right || (int)virtualKey == 166 || (int)virtualKey == 167)"  is complex.
Complex Conditional,FilterEffects.Common,NavigationHelper,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 166 && noModifiers) || (virtualKey == VirtualKey.Left && onlyAlt)"  is complex.
Complex Conditional,FilterEffects.Common,NavigationHelper,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)"  is complex.
Empty Catch Block,FilterEffects,App,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\App.xaml.cs,OnLaunched,The method has an empty catch block.
Magic Number,FilterEffects,AppUtils,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\AppUtils.cs,ScaleImageStreamAsync,The following statement contains a magic number: encoder.SetPixelData (BitmapPixelFormat.Bgra8' BitmapAlphaMode.Ignore' (uint)originalResolutionWidth' (uint)originalResolutionHeight' 96.0' 96.0' pixelArray);  
Magic Number,FilterEffects,AppUtils,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\AppUtils.cs,ScaleImageStreamAsync,The following statement contains a magic number: encoder.SetPixelData (BitmapPixelFormat.Bgra8' BitmapAlphaMode.Ignore' (uint)originalResolutionWidth' (uint)originalResolutionHeight' 96.0' 96.0' pixelArray);  
Magic Number,FilterEffects,ViewfinderPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\ViewfinderPage.xaml.cs,SelectImageButton_Click,The following statement contains a magic number: if (file != null) {  	var fileStream = await file.OpenAsync (Windows.Storage.FileAccessMode.Read);  	// Reset the streams  	_dataContext.ResetStreams ();  	var image = new BitmapImage ();  	image.SetSource (fileStream);  	int width = image.PixelWidth;  	int height = image.PixelHeight;  	var bitmap = new WriteableBitmap (width' height);  	_dataContext.SetFullResolution (width' height);  	int previewWidth = (int)FilterEffects.DataContext.DefaultPreviewResolutionWidth;  	int previewHeight = 0;  	AppUtils.CalculatePreviewResolution (width' height' ref previewWidth' ref previewHeight);  	_dataContext.SetPreviewResolution (previewWidth' previewHeight);  	bool success = false;  	try {  		// Jpeg images can be used as such.  		Stream stream = fileStream.AsStream ();  		stream.Position = 0;  		stream.CopyTo (_dataContext.FullResolutionStream);  		success = true;  	} catch (Exception ex) {  		Debug.WriteLine (DebugTag + "Cannot use stream as such (not probably jpeg): " + ex.Message);  	}  	if (!success) {  		// TODO: Test this part! It may not work.  		//  		// Image format is not jpeg. Can be anything' so first  		// load it into a bitmap image and then write as jpeg.  		bitmap.SetSource (fileStream);  		var inStream = (IRandomAccessStream)_dataContext.FullResolutionStream.AsInputStream ();  		BitmapEncoder encoder = await BitmapEncoder.CreateAsync (BitmapEncoder.JpegEncoderId' inStream);  		Stream outStream = bitmap.PixelBuffer.AsStream ();  		var pixels = new byte[outStream.Length];  		await outStream.ReadAsync (pixels' 0' pixels.Length);  		encoder.SetPixelData (BitmapPixelFormat.Bgra8' BitmapAlphaMode.Ignore' (uint)width' (uint)height' 96.0' 96.0' pixels);  		await encoder.FlushAsync ();  	}  	await AppUtils.ScaleImageStreamAsync (_dataContext.FullResolutionStream' _dataContext.FullResolution' _dataContext.PreviewResolutionStream' _dataContext.PreviewResolution);  	_dataContext.WasCaptured = false;  	Frame.Navigate (typeof(PreviewPage));  }  
Magic Number,FilterEffects,ViewfinderPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\ViewfinderPage.xaml.cs,SelectImageButton_Click,The following statement contains a magic number: if (file != null) {  	var fileStream = await file.OpenAsync (Windows.Storage.FileAccessMode.Read);  	// Reset the streams  	_dataContext.ResetStreams ();  	var image = new BitmapImage ();  	image.SetSource (fileStream);  	int width = image.PixelWidth;  	int height = image.PixelHeight;  	var bitmap = new WriteableBitmap (width' height);  	_dataContext.SetFullResolution (width' height);  	int previewWidth = (int)FilterEffects.DataContext.DefaultPreviewResolutionWidth;  	int previewHeight = 0;  	AppUtils.CalculatePreviewResolution (width' height' ref previewWidth' ref previewHeight);  	_dataContext.SetPreviewResolution (previewWidth' previewHeight);  	bool success = false;  	try {  		// Jpeg images can be used as such.  		Stream stream = fileStream.AsStream ();  		stream.Position = 0;  		stream.CopyTo (_dataContext.FullResolutionStream);  		success = true;  	} catch (Exception ex) {  		Debug.WriteLine (DebugTag + "Cannot use stream as such (not probably jpeg): " + ex.Message);  	}  	if (!success) {  		// TODO: Test this part! It may not work.  		//  		// Image format is not jpeg. Can be anything' so first  		// load it into a bitmap image and then write as jpeg.  		bitmap.SetSource (fileStream);  		var inStream = (IRandomAccessStream)_dataContext.FullResolutionStream.AsInputStream ();  		BitmapEncoder encoder = await BitmapEncoder.CreateAsync (BitmapEncoder.JpegEncoderId' inStream);  		Stream outStream = bitmap.PixelBuffer.AsStream ();  		var pixels = new byte[outStream.Length];  		await outStream.ReadAsync (pixels' 0' pixels.Length);  		encoder.SetPixelData (BitmapPixelFormat.Bgra8' BitmapAlphaMode.Ignore' (uint)width' (uint)height' 96.0' 96.0' pixels);  		await encoder.FlushAsync ();  	}  	await AppUtils.ScaleImageStreamAsync (_dataContext.FullResolutionStream' _dataContext.FullResolution' _dataContext.PreviewResolutionStream' _dataContext.PreviewResolution);  	_dataContext.WasCaptured = false;  	Frame.Navigate (typeof(PreviewPage));  }  
Magic Number,FilterEffects,ViewfinderPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\ViewfinderPage.xaml.cs,SelectImageButton_Click,The following statement contains a magic number: if (!success) {  	// TODO: Test this part! It may not work.  	//  	// Image format is not jpeg. Can be anything' so first  	// load it into a bitmap image and then write as jpeg.  	bitmap.SetSource (fileStream);  	var inStream = (IRandomAccessStream)_dataContext.FullResolutionStream.AsInputStream ();  	BitmapEncoder encoder = await BitmapEncoder.CreateAsync (BitmapEncoder.JpegEncoderId' inStream);  	Stream outStream = bitmap.PixelBuffer.AsStream ();  	var pixels = new byte[outStream.Length];  	await outStream.ReadAsync (pixels' 0' pixels.Length);  	encoder.SetPixelData (BitmapPixelFormat.Bgra8' BitmapAlphaMode.Ignore' (uint)width' (uint)height' 96.0' 96.0' pixels);  	await encoder.FlushAsync ();  }  
Magic Number,FilterEffects,ViewfinderPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\ViewfinderPage.xaml.cs,SelectImageButton_Click,The following statement contains a magic number: if (!success) {  	// TODO: Test this part! It may not work.  	//  	// Image format is not jpeg. Can be anything' so first  	// load it into a bitmap image and then write as jpeg.  	bitmap.SetSource (fileStream);  	var inStream = (IRandomAccessStream)_dataContext.FullResolutionStream.AsInputStream ();  	BitmapEncoder encoder = await BitmapEncoder.CreateAsync (BitmapEncoder.JpegEncoderId' inStream);  	Stream outStream = bitmap.PixelBuffer.AsStream ();  	var pixels = new byte[outStream.Length];  	await outStream.ReadAsync (pixels' 0' pixels.Length);  	encoder.SetPixelData (BitmapPixelFormat.Bgra8' BitmapAlphaMode.Ignore' (uint)width' (uint)height' 96.0' 96.0' pixels);  	await encoder.FlushAsync ();  }  
Magic Number,FilterEffects,ViewfinderPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\ViewfinderPage.xaml.cs,SelectImageButton_Click,The following statement contains a magic number: encoder.SetPixelData (BitmapPixelFormat.Bgra8' BitmapAlphaMode.Ignore' (uint)width' (uint)height' 96.0' 96.0' pixels);  
Magic Number,FilterEffects,ViewfinderPage,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\ViewfinderPage.xaml.cs,SelectImageButton_Click,The following statement contains a magic number: encoder.SetPixelData (BitmapPixelFormat.Bgra8' BitmapAlphaMode.Ignore' (uint)width' (uint)height' 96.0' 96.0' pixels);  
Magic Number,FilterEffects.Common,NavigationHelper,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown || e.EventType == CoreAcceleratorKeyEventType.KeyDown) && (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right || (int)virtualKey == 166 || (int)virtualKey == 167)) {  	var coreWindow = Window.Current.CoreWindow;  	const CoreVirtualKeyStates downState = CoreVirtualKeyStates.Down;  	bool menuKey = (coreWindow.GetKeyState (VirtualKey.Menu) & downState) == downState;  	bool controlKey = (coreWindow.GetKeyState (VirtualKey.Control) & downState) == downState;  	bool shiftKey = (coreWindow.GetKeyState (VirtualKey.Shift) & downState) == downState;  	bool noModifiers = !menuKey && !controlKey && !shiftKey;  	bool onlyAlt = menuKey && !controlKey && !shiftKey;  	if (((int)virtualKey == 166 && noModifiers) || (virtualKey == VirtualKey.Left && onlyAlt)) {  		// When the previous key or Alt+Left are pressed navigate back  		e.Handled = true;  		GoBackCommand.Execute (null);  	} else if (((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)) {  		// When the next key or Alt+Right are pressed navigate forward  		e.Handled = true;  		GoForwardCommand.Execute (null);  	}  }  
Magic Number,FilterEffects.Common,NavigationHelper,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown || e.EventType == CoreAcceleratorKeyEventType.KeyDown) && (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right || (int)virtualKey == 166 || (int)virtualKey == 167)) {  	var coreWindow = Window.Current.CoreWindow;  	const CoreVirtualKeyStates downState = CoreVirtualKeyStates.Down;  	bool menuKey = (coreWindow.GetKeyState (VirtualKey.Menu) & downState) == downState;  	bool controlKey = (coreWindow.GetKeyState (VirtualKey.Control) & downState) == downState;  	bool shiftKey = (coreWindow.GetKeyState (VirtualKey.Shift) & downState) == downState;  	bool noModifiers = !menuKey && !controlKey && !shiftKey;  	bool onlyAlt = menuKey && !controlKey && !shiftKey;  	if (((int)virtualKey == 166 && noModifiers) || (virtualKey == VirtualKey.Left && onlyAlt)) {  		// When the previous key or Alt+Left are pressed navigate back  		e.Handled = true;  		GoBackCommand.Execute (null);  	} else if (((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)) {  		// When the next key or Alt+Right are pressed navigate forward  		e.Handled = true;  		GoForwardCommand.Execute (null);  	}  }  
Magic Number,FilterEffects.Common,NavigationHelper,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown || e.EventType == CoreAcceleratorKeyEventType.KeyDown) && (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right || (int)virtualKey == 166 || (int)virtualKey == 167)) {  	var coreWindow = Window.Current.CoreWindow;  	const CoreVirtualKeyStates downState = CoreVirtualKeyStates.Down;  	bool menuKey = (coreWindow.GetKeyState (VirtualKey.Menu) & downState) == downState;  	bool controlKey = (coreWindow.GetKeyState (VirtualKey.Control) & downState) == downState;  	bool shiftKey = (coreWindow.GetKeyState (VirtualKey.Shift) & downState) == downState;  	bool noModifiers = !menuKey && !controlKey && !shiftKey;  	bool onlyAlt = menuKey && !controlKey && !shiftKey;  	if (((int)virtualKey == 166 && noModifiers) || (virtualKey == VirtualKey.Left && onlyAlt)) {  		// When the previous key or Alt+Left are pressed navigate back  		e.Handled = true;  		GoBackCommand.Execute (null);  	} else if (((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)) {  		// When the next key or Alt+Right are pressed navigate forward  		e.Handled = true;  		GoForwardCommand.Execute (null);  	}  }  
Magic Number,FilterEffects.Common,NavigationHelper,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown || e.EventType == CoreAcceleratorKeyEventType.KeyDown) && (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right || (int)virtualKey == 166 || (int)virtualKey == 167)) {  	var coreWindow = Window.Current.CoreWindow;  	const CoreVirtualKeyStates downState = CoreVirtualKeyStates.Down;  	bool menuKey = (coreWindow.GetKeyState (VirtualKey.Menu) & downState) == downState;  	bool controlKey = (coreWindow.GetKeyState (VirtualKey.Control) & downState) == downState;  	bool shiftKey = (coreWindow.GetKeyState (VirtualKey.Shift) & downState) == downState;  	bool noModifiers = !menuKey && !controlKey && !shiftKey;  	bool onlyAlt = menuKey && !controlKey && !shiftKey;  	if (((int)virtualKey == 166 && noModifiers) || (virtualKey == VirtualKey.Left && onlyAlt)) {  		// When the previous key or Alt+Left are pressed navigate back  		e.Handled = true;  		GoBackCommand.Execute (null);  	} else if (((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)) {  		// When the next key or Alt+Right are pressed navigate forward  		e.Handled = true;  		GoForwardCommand.Execute (null);  	}  }  
Magic Number,FilterEffects.Common,NavigationHelper,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if (((int)virtualKey == 166 && noModifiers) || (virtualKey == VirtualKey.Left && onlyAlt)) {  	// When the previous key or Alt+Left are pressed navigate back  	e.Handled = true;  	GoBackCommand.Execute (null);  } else if (((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)) {  	// When the next key or Alt+Right are pressed navigate forward  	e.Handled = true;  	GoForwardCommand.Execute (null);  }  
Magic Number,FilterEffects.Common,NavigationHelper,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if (((int)virtualKey == 166 && noModifiers) || (virtualKey == VirtualKey.Left && onlyAlt)) {  	// When the previous key or Alt+Left are pressed navigate back  	e.Handled = true;  	GoBackCommand.Execute (null);  } else if (((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)) {  	// When the next key or Alt+Right are pressed navigate forward  	e.Handled = true;  	GoForwardCommand.Execute (null);  }  
Magic Number,FilterEffects.Common,NavigationHelper,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if (((int)virtualKey == 167 && noModifiers) || (virtualKey == VirtualKey.Right && onlyAlt)) {  	// When the next key or Alt+Right are pressed navigate forward  	e.Handled = true;  	GoForwardCommand.Execute (null);  }  
Magic Number,FilterEffects.Filters,SixthGearFilter,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Filters\SixthGearFilter.cs,CreateControl,The following statement contains a magic number: grid.ColumnDefinitions.Add (new ColumnDefinition {  	MaxWidth = 500  });  
Missing Default,FilterEffects.Filters,SixthGearFilter,D:\newReposJune17\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Filters\SixthGearFilter.cs,CreateControl,The following switch statement is missing a default case: switch (Filter.LomoVignetting) {  case LomoVignetting.Low:  	lowRadioButton.IsChecked = true;  	break;  case LomoVignetting.Medium:  	medRadioButton.IsChecked = true;  	break;  case LomoVignetting.High:  	highRadioButton.IsChecked = true;  	break;  }  
