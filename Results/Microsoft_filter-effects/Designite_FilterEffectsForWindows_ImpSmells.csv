Implementation smell,Namespace,Class,File,Method,Description
Long Method,FilterEffects,ViewfinderPage,C:\repos\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\ViewfinderPage.xaml.cs,InitializeCameraAsync,The method has 103 lines of code.
Long Method,FilterEffects.Filters,SixthGearFilter,C:\repos\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Filters\SixthGearFilter.cs,CreateControl,The method has 106 lines of code.
Long Parameter List,FilterEffects,AppUtils,C:\repos\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\AppUtils.cs,ScaleImageStreamAsync,The method has 6 parameters. Parameters: originalStream' originalResolutionWidth' originalResolutionHeight' scaledStream' scaleWidth' scaleHeight
Long Identifier,FilterEffects,DataContext,C:\repos\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\DataContext.cs,,The length of the parameter DefaultPreviewResolutionHeight is 30.
Long Statement,FilterEffects,ViewfinderPage,C:\repos\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\ViewfinderPage.xaml.cs,InitializeCameraAsync,The length of the statement  "                    var mediaEncodingPropertiesList = _photoCaptureManager.VideoDeviceController.GetAvailableMediaStreamProperties(MediaStreamType.Photo); " is 134.
Long Statement,FilterEffects,ViewfinderPage,C:\repos\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\ViewfinderPage.xaml.cs,InitializeCameraAsync,The length of the statement  "                        //if (encodingProperties.Width * encodingProperties.Height > width * height) // Use this to get the resolution with the most pixels " is 131.
Long Statement,FilterEffects.Common,SuspensionManager,C:\repos\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Common\SuspensionManager.cs,SaveAsync,The length of the statement  "                StorageFile file = await ApplicationData.Current.LocalFolder.CreateFileAsync(SessionStateFilename' CreationCollisionOption.ReplaceExisting); " is 140.
Long Statement,FilterEffects.Common,SuspensionManager,C:\repos\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Common\SuspensionManager.cs,RegisterFrame,The length of the statement  "                throw new InvalidOperationException("Frames must be either be registered before accessing frame session state' or not registered at all"); " is 138.
Complex Conditional,FilterEffects.Common,NavigationHelper,C:\repos\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "(e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167)"  is complex.
Complex Conditional,FilterEffects.Common,NavigationHelper,C:\repos\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt)"  is complex.
Complex Conditional,FilterEffects.Common,NavigationHelper,C:\repos\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The conditional expression  "((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt)"  is complex.
Empty Catch Block,FilterEffects,App,C:\repos\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\App.xaml.cs,OnLaunched,The method has an empty catch block.
Magic Number,FilterEffects,AppUtils,C:\repos\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\AppUtils.cs,ScaleImageStreamAsync,The following statement contains a magic number: encoder.SetPixelData(BitmapPixelFormat.Bgra8' BitmapAlphaMode.Ignore'                  (uint)originalResolutionWidth' (uint)originalResolutionHeight'                  96.0' 96.0' pixelArray);
Magic Number,FilterEffects,AppUtils,C:\repos\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\AppUtils.cs,ScaleImageStreamAsync,The following statement contains a magic number: encoder.SetPixelData(BitmapPixelFormat.Bgra8' BitmapAlphaMode.Ignore'                  (uint)originalResolutionWidth' (uint)originalResolutionHeight'                  96.0' 96.0' pixelArray);
Magic Number,FilterEffects,ViewfinderPage,C:\repos\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\ViewfinderPage.xaml.cs,SelectImageButton_Click,The following statement contains a magic number: if (file != null)              {                  var fileStream = await file.OpenAsync(Windows.Storage.FileAccessMode.Read);                    // Reset the streams                  _dataContext.ResetStreams();                    var image = new BitmapImage();                  image.SetSource(fileStream);                  int width = image.PixelWidth;                  int height = image.PixelHeight;                  var bitmap = new WriteableBitmap(width' height);                  _dataContext.SetFullResolution(width' height);                    int previewWidth = (int)FilterEffects.DataContext.DefaultPreviewResolutionWidth;                  int previewHeight = 0;                  AppUtils.CalculatePreviewResolution(width' height' ref previewWidth' ref previewHeight);                  _dataContext.SetPreviewResolution(previewWidth' previewHeight);                    bool success = false;                    try                  {                      // Jpeg images can be used as such.                      Stream stream = fileStream.AsStream();                      stream.Position = 0;                      stream.CopyTo(_dataContext.FullResolutionStream);                      success = true;                  }                  catch (Exception ex)                  {                      Debug.WriteLine(DebugTag                          + "Cannot use stream as such (not probably jpeg): " + ex.Message);                  }                    if (!success)                  {                      // TODO: Test this part! It may not work.                      //                      // Image format is not jpeg. Can be anything' so first                      // load it into a bitmap image and then write as jpeg.                      bitmap.SetSource(fileStream);                      var inStream = (IRandomAccessStream)_dataContext.FullResolutionStream.AsInputStream();                      BitmapEncoder encoder = await BitmapEncoder.CreateAsync(BitmapEncoder.JpegEncoderId' inStream);                      Stream outStream = bitmap.PixelBuffer.AsStream();                      var pixels = new byte[outStream.Length];                      await outStream.ReadAsync(pixels' 0' pixels.Length);                      encoder.SetPixelData(BitmapPixelFormat.Bgra8' BitmapAlphaMode.Ignore' (uint)width' (uint)height' 96.0' 96.0' pixels);                      await encoder.FlushAsync();                  }                    await AppUtils.ScaleImageStreamAsync(                      _dataContext.FullResolutionStream'                      _dataContext.FullResolution'                      _dataContext.PreviewResolutionStream'                      _dataContext.PreviewResolution);                    _dataContext.WasCaptured = false;                  Frame.Navigate(typeof(PreviewPage));              }
Magic Number,FilterEffects,ViewfinderPage,C:\repos\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\ViewfinderPage.xaml.cs,SelectImageButton_Click,The following statement contains a magic number: if (file != null)              {                  var fileStream = await file.OpenAsync(Windows.Storage.FileAccessMode.Read);                    // Reset the streams                  _dataContext.ResetStreams();                    var image = new BitmapImage();                  image.SetSource(fileStream);                  int width = image.PixelWidth;                  int height = image.PixelHeight;                  var bitmap = new WriteableBitmap(width' height);                  _dataContext.SetFullResolution(width' height);                    int previewWidth = (int)FilterEffects.DataContext.DefaultPreviewResolutionWidth;                  int previewHeight = 0;                  AppUtils.CalculatePreviewResolution(width' height' ref previewWidth' ref previewHeight);                  _dataContext.SetPreviewResolution(previewWidth' previewHeight);                    bool success = false;                    try                  {                      // Jpeg images can be used as such.                      Stream stream = fileStream.AsStream();                      stream.Position = 0;                      stream.CopyTo(_dataContext.FullResolutionStream);                      success = true;                  }                  catch (Exception ex)                  {                      Debug.WriteLine(DebugTag                          + "Cannot use stream as such (not probably jpeg): " + ex.Message);                  }                    if (!success)                  {                      // TODO: Test this part! It may not work.                      //                      // Image format is not jpeg. Can be anything' so first                      // load it into a bitmap image and then write as jpeg.                      bitmap.SetSource(fileStream);                      var inStream = (IRandomAccessStream)_dataContext.FullResolutionStream.AsInputStream();                      BitmapEncoder encoder = await BitmapEncoder.CreateAsync(BitmapEncoder.JpegEncoderId' inStream);                      Stream outStream = bitmap.PixelBuffer.AsStream();                      var pixels = new byte[outStream.Length];                      await outStream.ReadAsync(pixels' 0' pixels.Length);                      encoder.SetPixelData(BitmapPixelFormat.Bgra8' BitmapAlphaMode.Ignore' (uint)width' (uint)height' 96.0' 96.0' pixels);                      await encoder.FlushAsync();                  }                    await AppUtils.ScaleImageStreamAsync(                      _dataContext.FullResolutionStream'                      _dataContext.FullResolution'                      _dataContext.PreviewResolutionStream'                      _dataContext.PreviewResolution);                    _dataContext.WasCaptured = false;                  Frame.Navigate(typeof(PreviewPage));              }
Magic Number,FilterEffects.Common,NavigationHelper,C:\repos\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  const CoreVirtualKeyStates downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      e.Handled = true;                      GoBackCommand.Execute(null);                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      e.Handled = true;                      GoForwardCommand.Execute(null);                  }              }
Magic Number,FilterEffects.Common,NavigationHelper,C:\repos\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  const CoreVirtualKeyStates downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      e.Handled = true;                      GoBackCommand.Execute(null);                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      e.Handled = true;                      GoForwardCommand.Execute(null);                  }              }
Magic Number,FilterEffects.Common,NavigationHelper,C:\repos\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  const CoreVirtualKeyStates downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      e.Handled = true;                      GoBackCommand.Execute(null);                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      e.Handled = true;                      GoForwardCommand.Execute(null);                  }              }
Magic Number,FilterEffects.Common,NavigationHelper,C:\repos\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Common\NavigationHelper.cs,CoreDispatcher_AcceleratorKeyActivated,The following statement contains a magic number: if ((e.EventType == CoreAcceleratorKeyEventType.SystemKeyDown ||                  e.EventType == CoreAcceleratorKeyEventType.KeyDown) &&                  (virtualKey == VirtualKey.Left || virtualKey == VirtualKey.Right ||                  (int)virtualKey == 166 || (int)virtualKey == 167))              {                  var coreWindow = Window.Current.CoreWindow;                  const CoreVirtualKeyStates downState = CoreVirtualKeyStates.Down;                  bool menuKey = (coreWindow.GetKeyState(VirtualKey.Menu) & downState) == downState;                  bool controlKey = (coreWindow.GetKeyState(VirtualKey.Control) & downState) == downState;                  bool shiftKey = (coreWindow.GetKeyState(VirtualKey.Shift) & downState) == downState;                  bool noModifiers = !menuKey && !controlKey && !shiftKey;                  bool onlyAlt = menuKey && !controlKey && !shiftKey;                    if (((int)virtualKey == 166 && noModifiers) ||                      (virtualKey == VirtualKey.Left && onlyAlt))                  {                      // When the previous key or Alt+Left are pressed navigate back                      e.Handled = true;                      GoBackCommand.Execute(null);                  }                  else if (((int)virtualKey == 167 && noModifiers) ||                      (virtualKey == VirtualKey.Right && onlyAlt))                  {                      // When the next key or Alt+Right are pressed navigate forward                      e.Handled = true;                      GoForwardCommand.Execute(null);                  }              }
Magic Number,FilterEffects.Filters,SixthGearFilter,C:\repos\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Filters\SixthGearFilter.cs,CreateControl,The following statement contains a magic number: var brightnessSlider = new Slider              {                  StepFrequency = 0.01'                  Minimum = 0.0'                  Maximum = 1.0'                  Value = Filter.Brightness              };
Magic Number,FilterEffects.Filters,SixthGearFilter,C:\repos\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Filters\SixthGearFilter.cs,CreateControl,The following statement contains a magic number: var saturationSlider = new Slider              {                  StepFrequency = 0.01'                  Minimum = 0.0'                  Maximum = 1.0'                  Value = Filter.Saturation              };
Magic Number,FilterEffects.Filters,SixthGearFilter,C:\repos\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Filters\SixthGearFilter.cs,CreateControl,The following statement contains a magic number: var margin = new Thickness { Left = 72 };
Magic Number,FilterEffects.Filters,SixthGearFilter,C:\repos\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Filters\SixthGearFilter.cs,CreateControl,The following statement contains a magic number: grid.ColumnDefinitions.Add(new ColumnDefinition { MaxWidth = 500 });
Magic Number,FilterEffects.Filters,MarvelFilter,C:\repos\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Filters\MarvelFilter.cs,CreateControl,The following statement contains a magic number: var margin = new Thickness {Top = 24};
Magic Number,FilterEffects.Filters,MarvelFilter,C:\repos\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Filters\MarvelFilter.cs,CreateControl,The following statement contains a magic number: var padding = new Thickness {Left = 12' Right = 12};
Magic Number,FilterEffects.Filters,MarvelFilter,C:\repos\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Filters\MarvelFilter.cs,CreateControl,The following statement contains a magic number: var padding = new Thickness {Left = 12' Right = 12};
Magic Number,FilterEffects.Filters,EightiesPopSongFilter,C:\repos\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Filters\EightiesPopSongFilter.cs,CreateControl,The following statement contains a magic number: var margin = new Thickness {Top = 24};
Magic Number,FilterEffects.Filters,EightiesPopSongFilter,C:\repos\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Filters\EightiesPopSongFilter.cs,CreateControl,The following statement contains a magic number: var padding = new Thickness {Left = 12' Right = 12};
Magic Number,FilterEffects.Filters,EightiesPopSongFilter,C:\repos\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Filters\EightiesPopSongFilter.cs,CreateControl,The following statement contains a magic number: var padding = new Thickness {Left = 12' Right = 12};
Missing Default,FilterEffects.Filters,SixthGearFilter,C:\repos\Microsoft_filter-effects\FilterEffectsWP80\FilterEffectsWindows\Filters\SixthGearFilter.cs,CreateControl,The following switch statement is missing a default case: switch (Filter.LomoVignetting)              {                  case LomoVignetting.Low: lowRadioButton.IsChecked = true; break;                  case LomoVignetting.Medium: medRadioButton.IsChecked = true; break;                  case LomoVignetting.High: highRadioButton.IsChecked = true; break;              }
