Implementation smell,Namespace,Class,File,Method,Description
Long Statement,Burrow.Net.AutoRegistration.Core,AutoRouteFinder,C:\repos\joefeser_Burrow.Net.AutoRegistration\src\Burrow.Net.AutoRegistration.Core\AutoRouteFinder.cs,FindQueueName,The length of the statement  "	return string.IsNullOrEmpty (subscriptionName) ? string.Format (Exchange + ".{0}"' typeof(T).FullName) : string.Format (Exchange + ".{0}.{1}"' typeof(T).FullName' subscriptionName); " is 181.
Long Statement,Burrow.Net.AutoRegistration.Core,RegistrationHelper,C:\repos\joefeser_Burrow.Net.AutoRegistration\src\Burrow.Net.AutoRegistration.Core\RegistrationHelper.cs,RegisterAssembly,The length of the statement  "		var interfaces = type.GetInterfaces ().Where (i => i.IsGenericType && (i.GetGenericTypeDefinition () == typeof(IHandleMessages<>))).ToList (); " is 142.
Long Statement,Burrow.Net.AutoRegistration.Core,RegistrationHelper,C:\repos\joefeser_Burrow.Net.AutoRegistration\src\Burrow.Net.AutoRegistration.Core\RegistrationHelper.cs,RegisterType,The length of the statement  "	var interfaces = type.GetInterfaces ().Where (i => i.IsGenericType && (i.GetGenericTypeDefinition () == typeof(IHandleMessages<>))).ToList (); " is 142.
Long Statement,Burrow.Net.AutoRegistration.Core,RegistrationHelper,C:\repos\joefeser_Burrow.Net.AutoRegistration\src\Burrow.Net.AutoRegistration.Core\RegistrationHelper.cs,RegisterType,The length of the statement  "			AttributeData = type.GetCustomAttributes (typeof(MessageHandlerConfigurationAttribute)' false).FirstOrDefault () as MessageHandlerConfigurationAttribute' " is 153.
Long Statement,Burrow.Net.AutoRegistration.Core,RegistrationRunner,C:\repos\joefeser_Burrow.Net.AutoRegistration\src\Burrow.Net.AutoRegistration.Core\RegistrationRunner.cs,Configure,The length of the statement  "	var subscribeMethod = tunnelType.GetMethods ().Where (item => item.Name == "SubscribeAsync").FirstOrDefault (item => item.GetParameters ().Count () == 1 && item.GetParameters ().First ().Name == "subscriptionOption"); " is 217.
Empty Catch Block,Burrow.Net.AutoRegistration.Core,RegistrationRunner,C:\repos\joefeser_Burrow.Net.AutoRegistration\src\Burrow.Net.AutoRegistration.Core\RegistrationRunner.cs,ProcessMessage,The method has an empty catch block.
Empty Catch Block,Burrow.Net.AutoRegistration.Core,RegistrationRunner,C:\repos\joefeser_Burrow.Net.AutoRegistration\src\Burrow.Net.AutoRegistration.Core\RegistrationRunner.cs,ProcessMessage,The method has an empty catch block.
Magic Number,Burrow.Net.AutoRegistration.Core,RegistrationHelper,C:\repos\joefeser_Burrow.Net.AutoRegistration\src\Burrow.Net.AutoRegistration.Core\RegistrationHelper.cs,CreateSubscription,The following statement contains a magic number: lock (lockObject) {  	var setup = new RabbitSetup (ConfigurationManager.ConnectionStrings ["RabbitMQ"].ConnectionString);  	var routeData = new RouteSetupData () {  		ExchangeSetupData = new ExchangeSetupData () {  			AutoDelete = false'  			Durable = true'  			ExchangeType = "direct"  		}'  		QueueSetupData = new QueueSetupData () {  			AutoDelete = false'  			AutoExpire = 1000 * 60 * 60 * 96'  			//96 hours  			Durable = true  		}'  		SubscriptionName = data.DeclaredType.FullName'  		RouteFinder = data.RouteFinder  	};  	var methodInfo = setup.GetType ().GetMethod ("CreateRoute");  	var genericMethodInfo = methodInfo.MakeGenericMethod (new Type[] {  		data.MessageType  	});  	genericMethodInfo.Invoke (setup' new object[] {  		routeData  	});  	var gt = typeof(RegistrationRunner<>).MakeGenericType (data.MessageType);  	var rr = Activator.CreateInstance (gt' data);  	var configMethod = rr.GetType ().GetMethod ("Configure");  	configMethod.Invoke (rr' null);  }  
Magic Number,Burrow.Net.AutoRegistration.Core,RegistrationHelper,C:\repos\joefeser_Burrow.Net.AutoRegistration\src\Burrow.Net.AutoRegistration.Core\RegistrationHelper.cs,CreateSubscription,The following statement contains a magic number: lock (lockObject) {  	var setup = new RabbitSetup (ConfigurationManager.ConnectionStrings ["RabbitMQ"].ConnectionString);  	var routeData = new RouteSetupData () {  		ExchangeSetupData = new ExchangeSetupData () {  			AutoDelete = false'  			Durable = true'  			ExchangeType = "direct"  		}'  		QueueSetupData = new QueueSetupData () {  			AutoDelete = false'  			AutoExpire = 1000 * 60 * 60 * 96'  			//96 hours  			Durable = true  		}'  		SubscriptionName = data.DeclaredType.FullName'  		RouteFinder = data.RouteFinder  	};  	var methodInfo = setup.GetType ().GetMethod ("CreateRoute");  	var genericMethodInfo = methodInfo.MakeGenericMethod (new Type[] {  		data.MessageType  	});  	genericMethodInfo.Invoke (setup' new object[] {  		routeData  	});  	var gt = typeof(RegistrationRunner<>).MakeGenericType (data.MessageType);  	var rr = Activator.CreateInstance (gt' data);  	var configMethod = rr.GetType ().GetMethod ("Configure");  	configMethod.Invoke (rr' null);  }  
Magic Number,Burrow.Net.AutoRegistration.Core,RegistrationHelper,C:\repos\joefeser_Burrow.Net.AutoRegistration\src\Burrow.Net.AutoRegistration.Core\RegistrationHelper.cs,CreateSubscription,The following statement contains a magic number: lock (lockObject) {  	var setup = new RabbitSetup (ConfigurationManager.ConnectionStrings ["RabbitMQ"].ConnectionString);  	var routeData = new RouteSetupData () {  		ExchangeSetupData = new ExchangeSetupData () {  			AutoDelete = false'  			Durable = true'  			ExchangeType = "direct"  		}'  		QueueSetupData = new QueueSetupData () {  			AutoDelete = false'  			AutoExpire = 1000 * 60 * 60 * 96'  			//96 hours  			Durable = true  		}'  		SubscriptionName = data.DeclaredType.FullName'  		RouteFinder = data.RouteFinder  	};  	var methodInfo = setup.GetType ().GetMethod ("CreateRoute");  	var genericMethodInfo = methodInfo.MakeGenericMethod (new Type[] {  		data.MessageType  	});  	genericMethodInfo.Invoke (setup' new object[] {  		routeData  	});  	var gt = typeof(RegistrationRunner<>).MakeGenericType (data.MessageType);  	var rr = Activator.CreateInstance (gt' data);  	var configMethod = rr.GetType ().GetMethod ("Configure");  	configMethod.Invoke (rr' null);  }  
Magic Number,Burrow.Net.AutoRegistration.Core,RegistrationHelper,C:\repos\joefeser_Burrow.Net.AutoRegistration\src\Burrow.Net.AutoRegistration.Core\RegistrationHelper.cs,CreateSubscription,The following statement contains a magic number: lock (lockObject) {  	var setup = new RabbitSetup (ConfigurationManager.ConnectionStrings ["RabbitMQ"].ConnectionString);  	var routeData = new RouteSetupData () {  		ExchangeSetupData = new ExchangeSetupData () {  			AutoDelete = false'  			Durable = true'  			ExchangeType = "direct"  		}'  		QueueSetupData = new QueueSetupData () {  			AutoDelete = false'  			AutoExpire = 1000 * 60 * 60 * 96'  			//96 hours  			Durable = true  		}'  		SubscriptionName = data.DeclaredType.FullName'  		RouteFinder = data.RouteFinder  	};  	var methodInfo = setup.GetType ().GetMethod ("CreateRoute");  	var genericMethodInfo = methodInfo.MakeGenericMethod (new Type[] {  		data.MessageType  	});  	genericMethodInfo.Invoke (setup' new object[] {  		routeData  	});  	var gt = typeof(RegistrationRunner<>).MakeGenericType (data.MessageType);  	var rr = Activator.CreateInstance (gt' data);  	var configMethod = rr.GetType ().GetMethod ("Configure");  	configMethod.Invoke (rr' null);  }  
Magic Number,Burrow.Net.AutoRegistration.Core,RegistrationRunner,C:\repos\joefeser_Burrow.Net.AutoRegistration\src\Burrow.Net.AutoRegistration.Core\RegistrationRunner.cs,ProcessMessage,The following statement contains a magic number: try {  	var receivedMessage = EndpointData.GetReceivedMessage (new object[] {  		message'  		args.DeliveryTag'  		new Dictionary<string' object> ()  	});  	if (SingletonInstance != null) {  		MethodInfo.Invoke (SingletonInstance' new object[] {  			receivedMessage  		});  		//new object[] { message }  	}  	else {  		var handler = Activator.CreateInstance (EndpointData.DeclaredType);  		MethodInfo.Invoke (handler' new object[] {  			receivedMessage  		});  	}  	if (Subscription != null) {  		Subscription.Ack (args.DeliveryTag);  	}  	else {  		UnAcked.Add (args.DeliveryTag);  		var t = new Task (() =>  {  			while (true) {  				try {  					lock (ackLock) {  						if (UnAcked.Count > 0 && Subscription != null) {  							foreach (var item in UnAcked.ToList ()) {  								Subscription.Ack (item);  								UnAcked.Remove (item);  							}  						}  					}  					if (UnAcked.Count == 0) {  						return;  					}  					Thread.Sleep (1000);  				}  				catch (Exception ex) {  				}  			}  		});  		t.Start ();  	}  }  catch (Exception ex) {  }  
Magic Number,Burrow.Net.AutoRegistration.Core,RegistrationRunner,C:\repos\joefeser_Burrow.Net.AutoRegistration\src\Burrow.Net.AutoRegistration.Core\RegistrationRunner.cs,ProcessMessage,The following statement contains a magic number: if (Subscription != null) {  	Subscription.Ack (args.DeliveryTag);  }  else {  	UnAcked.Add (args.DeliveryTag);  	var t = new Task (() =>  {  		while (true) {  			try {  				lock (ackLock) {  					if (UnAcked.Count > 0 && Subscription != null) {  						foreach (var item in UnAcked.ToList ()) {  							Subscription.Ack (item);  							UnAcked.Remove (item);  						}  					}  				}  				if (UnAcked.Count == 0) {  					return;  				}  				Thread.Sleep (1000);  			}  			catch (Exception ex) {  			}  		}  	});  	t.Start ();  }  
Magic Number,Burrow.Net.AutoRegistration.Core,RegistrationRunner,C:\repos\joefeser_Burrow.Net.AutoRegistration\src\Burrow.Net.AutoRegistration.Core\RegistrationRunner.cs,ProcessMessage,The following statement contains a magic number: while (true) {  	try {  		lock (ackLock) {  			if (UnAcked.Count > 0 && Subscription != null) {  				foreach (var item in UnAcked.ToList ()) {  					Subscription.Ack (item);  					UnAcked.Remove (item);  				}  			}  		}  		if (UnAcked.Count == 0) {  			return;  		}  		Thread.Sleep (1000);  	}  	catch (Exception ex) {  	}  }  
Magic Number,Burrow.Net.AutoRegistration.Core,RegistrationRunner,C:\repos\joefeser_Burrow.Net.AutoRegistration\src\Burrow.Net.AutoRegistration.Core\RegistrationRunner.cs,ProcessMessage,The following statement contains a magic number: try {  	lock (ackLock) {  		if (UnAcked.Count > 0 && Subscription != null) {  			foreach (var item in UnAcked.ToList ()) {  				Subscription.Ack (item);  				UnAcked.Remove (item);  			}  		}  	}  	if (UnAcked.Count == 0) {  		return;  	}  	Thread.Sleep (1000);  }  catch (Exception ex) {  }  
Magic Number,Burrow.Net.AutoRegistration.Core,RegistrationRunner,C:\repos\joefeser_Burrow.Net.AutoRegistration\src\Burrow.Net.AutoRegistration.Core\RegistrationRunner.cs,ProcessMessage,The following statement contains a magic number: Thread.Sleep (1000);  
