Implementation smell,Namespace,Class,File,Method,Description
Long Method,EmbedAssemblies,Program,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Program.cs,ImportMethod,The method has 112 lines of code.
Complex Method,EmbedAssemblies,EmbeddedAssemblyLoader,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\EmbeddedAssemblyLoader.cs,ResolveAssembly,Cyclomatic complexity of the method is 13
Complex Method,EmbedAssemblies,Program,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Program.cs,ImportMethod,Cyclomatic complexity of the method is 71
Complex Method,EmbedAssemblies,Program,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Program.cs,Main,Cyclomatic complexity of the method is 8
Complex Method,Mono.Options,StringCoda,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,CreateWrappedLinesIterator,Cyclomatic complexity of the method is 8
Complex Method,Mono.Options,Option,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,ParsePrototype,Cyclomatic complexity of the method is 9
Complex Method,Mono.Options,Option,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,AddSeparators,Cyclomatic complexity of the method is 17
Complex Method,Mono.Options,ArgumentSource,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,GetArguments,Cyclomatic complexity of the method is 9
Complex Method,Mono.Options,OptionSet,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,Mono.Options,OptionSet,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,Mono.Options,OptionSet,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,ParseBundledValue,Cyclomatic complexity of the method is 10
Complex Method,Mono.Options,OptionSet,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,WriteOptionDescriptions,Cyclomatic complexity of the method is 9
Complex Method,Mono.Options,OptionSet,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,GetDescription,Cyclomatic complexity of the method is 20
Long Parameter List,Mono.Options,OptionSet,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,GetOptionParts,The method has 5 parameters.
Long Parameter List,Mono.Options,OptionSet,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,WriteDescription,The method has 5 parameters.
Long Statement,EmbedAssemblies,EmbeddedAssemblyLoader,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\EmbeddedAssemblyLoader.cs,ResolveAssembly,The length of the statement  "		Console.WriteLine ("Resolving " + asmName.Name + " requested by " + (args.RequestingAssembly != null ? args.RequestingAssembly.GetName ().Name : "unknown assembly")); " is 166.
Long Statement,EmbedAssemblies,EmbeddedAssemblyLoader,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\EmbeddedAssemblyLoader.cs,Register,The length of the statement  "			Console.WriteLine ("Initializing importer for AppDomain" + ad.FriendlyName + "' current assembly: " + Assembly.GetExecutingAssembly ().GetName ().Name); " is 152.
Long Statement,EmbedAssemblies,Program,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Program.cs,Import,The length of the statement  "	var result = new MethodReference (method.Name' Import (container' method.ReturnType)' Import (container' method.DeclaringType)) { " is 129.
Long Statement,EmbedAssemblies,Program,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Program.cs,ImportMethod,The length of the statement  "		if (instr.OpCode.OperandType != OperandType.ShortInlineBrTarget && instr.OpCode.OperandType != OperandType.InlineBrTarget) " is 122.
Long Statement,EmbedAssemblies,Program,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Program.cs,InsertAssemblyLoader,The length of the statement  "		loader = new TypeDefinition (typeof(EmbeddedAssemblyLoader).Namespace' typeof(EmbeddedAssemblyLoader).Name' existingLoader.Attributes' container.TypeSystem.Object); " is 164.
Long Statement,EmbedAssemblies,Program,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Program.cs,InsertAssemblyLoader,The length of the statement  "	var moduleInitializer = new MethodDefinition (".cctor"' MethodAttributes.Static | MethodAttributes.SpecialName | MethodAttributes.RTSpecialName' container.TypeSystem.Void); " is 172.
Long Statement,EmbedAssemblies,Program,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Program.cs,InsertAssemblyLoader,The length of the statement  "	moduleInitializer.Body.Instructions.Add (Instruction.Create (OpCodes.Call' loader.Methods.Single (m => m.Name == "Register"))); " is 127.
Long Statement,Mono.Options,StringCoda,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,GetNextWidth,The length of the statement  "			throw new ArgumentOutOfRangeException ("widths"' string.Format ("Element must be >= {0}' was {1}."' minWidth.Length' curWidth)); " is 128.
Long Statement,Mono.Options,OptionValueCollection,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,AssertValid,The length of the statement  "		throw new OptionException (string.Format (c.OptionSet.MessageLocalizer ("Missing required value for option '{0}'.")' c.OptionName)' c.OptionName); " is 146.
Long Statement,Mono.Options,Option,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,Parse,The length of the statement  "	bool nullable = tt.IsValueType && tt.IsGenericType && !tt.IsGenericTypeDefinition && tt.GetGenericTypeDefinition () == typeof(Nullable<>); " is 138.
Long Statement,Mono.Options,Option,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,Parse,The length of the statement  "		throw new OptionException (string.Format (c.OptionSet.MessageLocalizer ("Could not convert string `{0}' to type {1} for option `{2}'.")' value' targetType.Name' c.OptionName)' c.OptionName' e); " is 193.
Long Statement,Mono.Options,Option,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,ParsePrototype,The length of the statement  "			throw new ArgumentException (string.Format ("Conflicting option types: '{0}' vs. '{1}'."' type' name [end])' "prototype"); " is 122.
Long Statement,Mono.Options,Option,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,ParsePrototype,The length of the statement  "		throw new ArgumentException (string.Format ("Cannot provide key/value separators for Options taking {0} value(s)."' count)' "prototype"); " is 137.
Long Statement,Mono.Options,OptionSet,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,ParseValue,The length of the statement  "		foreach (string o in c.Option.ValueSeparators != null ? option.Split (c.Option.ValueSeparators' c.Option.MaxValueCount - c.OptionValues.Count' StringSplitOptions.None) : new string[] { " is 184.
Long Statement,Mono.Options,OptionSet,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,ParseValue,The length of the statement  "		throw new OptionException (localizer (string.Format ("Error: Found {0} option values when expecting {1}."' c.OptionValues.Count' c.Option.MaxValueCount))' c.OptionName); " is 169.
Long Statement,Mono.Options,OptionSet,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,ParseBool,The length of the statement  "	if (n.Length >= 1 && (n [n.Length - 1] == '+' || n [n.Length - 1] == '-') && Contains ((rn = n.Substring (0' n.Length - 1)))) { " is 127.
Complex Conditional,Mono.Options,Option,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,Option,The conditional expression  "Array.IndexOf (names' "<>") >= 0 && ((names.Length == 1 && this.type != OptionValueType.None) || (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,Mono.Options,OptionSet,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n [n.Length - 1] == '+' || n [n.Length - 1] == '-') && Contains ((rn = n.Substring (0' n.Length - 1)))"  is complex.
Magic Number,Mono.Options,OptionSet,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  	int written = 0;  	Category c = p as Category;  	if (c != null) {  		WriteDescription (o' p.Description' ""' 80' 80);  		continue;  	}  	if (!WriteOptionPrototype (o' p' ref written))  		continue;  	if (written < OptionWidth)  		o.Write (new string (' '' OptionWidth - written));  	else {  		o.WriteLine ();  		o.Write (new string (' '' OptionWidth));  	}  	WriteDescription (o' p.Description' new string (' '' OptionWidth + 2)' Description_FirstWidth' Description_RemWidth);  }  
Magic Number,Mono.Options,OptionSet,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  	int written = 0;  	Category c = p as Category;  	if (c != null) {  		WriteDescription (o' p.Description' ""' 80' 80);  		continue;  	}  	if (!WriteOptionPrototype (o' p' ref written))  		continue;  	if (written < OptionWidth)  		o.Write (new string (' '' OptionWidth - written));  	else {  		o.WriteLine ();  		o.Write (new string (' '' OptionWidth));  	}  	WriteDescription (o' p.Description' new string (' '' OptionWidth + 2)' Description_FirstWidth' Description_RemWidth);  }  
Magic Number,Mono.Options,OptionSet,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  	int written = 0;  	Category c = p as Category;  	if (c != null) {  		WriteDescription (o' p.Description' ""' 80' 80);  		continue;  	}  	if (!WriteOptionPrototype (o' p' ref written))  		continue;  	if (written < OptionWidth)  		o.Write (new string (' '' OptionWidth - written));  	else {  		o.WriteLine ();  		o.Write (new string (' '' OptionWidth));  	}  	WriteDescription (o' p.Description' new string (' '' OptionWidth + 2)' Description_FirstWidth' Description_RemWidth);  }  
Magic Number,Mono.Options,OptionSet,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: if (c != null) {  	WriteDescription (o' p.Description' ""' 80' 80);  	continue;  }  
Magic Number,Mono.Options,OptionSet,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: if (c != null) {  	WriteDescription (o' p.Description' ""' 80' 80);  	continue;  }  
Magic Number,Mono.Options,OptionSet,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: WriteDescription (o' p.Description' ""' 80' 80);  
Magic Number,Mono.Options,OptionSet,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: WriteDescription (o' p.Description' ""' 80' 80);  
Magic Number,Mono.Options,OptionSet,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: WriteDescription (o' p.Description' new string (' '' OptionWidth + 2)' Description_FirstWidth' Description_RemWidth);  
Magic Number,Mono.Options,OptionSet,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (ArgumentSource s in sources) {  	string[] names = s.GetNames ();  	if (names == null || names.Length == 0)  		continue;  	int written = 0;  	Write (o' ref written' "  ");  	Write (o' ref written' names [0]);  	for (int i = 1; i < names.Length; ++i) {  		Write (o' ref written' "' ");  		Write (o' ref written' names [i]);  	}  	if (written < OptionWidth)  		o.Write (new string (' '' OptionWidth - written));  	else {  		o.WriteLine ();  		o.Write (new string (' '' OptionWidth));  	}  	WriteDescription (o' s.Description' new string (' '' OptionWidth + 2)' Description_FirstWidth' Description_RemWidth);  }  
Magic Number,Mono.Options,OptionSet,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: WriteDescription (o' s.Description' new string (' '' OptionWidth + 2)' Description_FirstWidth' Description_RemWidth);  
Missing Default,EmbedAssemblies,Program,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Program.cs,ImportMethod,The following switch statement is missing a default case: switch (eh.HandlerType) {  case ExceptionHandlerType.Catch:  	neh.CatchType = container.Import (eh.CatchType);  	break;  case ExceptionHandlerType.Filter:  	neh.FilterStart = GetInstruction (source.Body' target.Body' eh.FilterStart);  	break;  }  
Missing Default,Mono.Options,OptionSet,F:\newReposMay17\erik-kallen_SaltarelleCompiler\build\src\EmbedAssemblies\Mono.Options\Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType) {  case OptionValueType.None:  	c.OptionValues.Add (n);  	c.Option.Invoke (c);  	break;  case OptionValueType.Optional:  case OptionValueType.Required:  	ParseValue (v' c);  	break;  }  
