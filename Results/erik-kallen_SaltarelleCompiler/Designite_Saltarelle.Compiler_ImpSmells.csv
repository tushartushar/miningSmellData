Implementation smell,Namespace,Class,File,Method,Description
Long Method,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundAssignment,The method has 219 lines of code.
Long Method,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The method has 257 lines of code.
Complex Method,Saltarelle.Compiler,AttributeStore,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\AttributeStore.cs,AttributeStore,Cyclomatic complexity of the method is 11
Complex Method,Saltarelle.Compiler.Compiler,InlineCodeMethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\InlineCodeMethodCompiler.cs,ParsePlaceholder,Cyclomatic complexity of the method is 11
Complex Method,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileThisAndArgumentListForMethodCall,Cyclomatic complexity of the method is 15
Complex Method,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileJsonConstructorCall,Cyclomatic complexity of the method is 11
Complex Method,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,PerformMethodGroupConversionOnInlineCodeMethod,Cyclomatic complexity of the method is 8
Complex Method,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CompileConstructor,Cyclomatic complexity of the method is 10
Complex Method,Saltarelle.Compiler.Driver,CompilerDriver,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Driver\CompilerDriver.cs,MapSettings,Cyclomatic complexity of the method is 10
Complex Method,Saltarelle.Compiler.Driver,CompilerDriver,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Driver\CompilerDriver.cs,Compile,Cyclomatic complexity of the method is 11
Long Parameter List,Saltarelle.Compiler,IRuntimeLibrary,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\IRuntimeLibrary.cs,MakeEnumerator,The method has 5 parameters. Parameters: yieldType' moveNext' getCurrent' dispose' context
Long Parameter List,Saltarelle.Compiler,IRuntimeLibrary,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\IRuntimeLibrary.cs,InitializeField,The method has 5 parameters. Parameters: jsThis' scriptName' member' initialValue' context
Long Parameter List,Saltarelle.Compiler,Utils,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Utils.cs,ResolveTypeParameter,The method has 6 parameters. Parameters: tp' currentType' currentMethod' metadataImporter' errorReporter' namer
Long Parameter List,Saltarelle.Compiler,Utils,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Utils.cs,MaybeCloneValueType,The method has 7 parameters. Parameters: input' csharpInput' type' metadataImporter' runtimeLibrary' runtimeContext' forceClone
Long Parameter List,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,ExpressionTreeBuilder,The method has 9 parameters. Parameters: compilation' metadataImporter' createTemporaryVariable' compileMethodCall' instantiateType' getDefaultValue' getMember' createLocalReferenceExpression' this
Long Parameter List,Saltarelle.Compiler.Compiler,InlineCodeToken,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\InlineCodeToken.cs,InlineCodeToken,The method has 5 parameters. Parameters: type' text' index' ownerType' isExpandedParamArray
Long Parameter List,Saltarelle.Compiler.Compiler,PreparedCompilation,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\PreparedCompilation.cs,CreateCompilation,The method has 5 parameters. Parameters: assemblyName' sourceFiles' references' defineConstants' resources
Long Parameter List,Saltarelle.Compiler.Compiler,InlineCodeMethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\InlineCodeMethodCompiler.cs,PrepareInlineCodeMethodInvocation,The method has 7 parameters. Parameters: method' tokens' this' arguments' resolveType' resolveTypeArgument' errorReporter
Long Parameter List,Saltarelle.Compiler.Compiler,InlineCodeMethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\InlineCodeMethodCompiler.cs,CompileExpressionInlineCodeMethodInvocation,The method has 7 parameters. Parameters: method' tokens' this' arguments' resolveType' resolveTypeArgument' errorReporter
Long Parameter List,Saltarelle.Compiler.Compiler,InlineCodeMethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\InlineCodeMethodCompiler.cs,CompileStatementListInlineCodeMethodInvocation,The method has 7 parameters. Parameters: method' tokens' this' arguments' resolveType' resolveTypeArgument' errorReporter
Long Parameter List,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,ExpressionCompiler,The method has 15 parameters. Parameters: compilation' metadataImporter' namer' runtimeLibrary' errorReporter' variables' nestedFunctions' createTemporaryVariable' createInnerCompiler' thisAlias' nestedFunctionContext' objectBeingInitialized' methodBeingCompiled' typeBeingCompiled' returnMultidimArrayValueByReference
Long Parameter List,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileConstructorInitializer,The method has 5 parameters. Parameters: method' argumentsForCall' argumentToParameterMap' initializerStatements' currentIsStaticMethod
Long Parameter List,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundFieldAssignment,The method has 8 parameters. Parameters: jsTarget' otherOperand' targetType' fieldName' compoundFactory' valueFactory' returnValueIsImportant' returnValueBeforeChange
Long Parameter List,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundFieldAssignment,The method has 7 parameters. Parameters: target' otherOperand' fieldName' compoundFactory' valueFactory' returnValueIsImportant' returnValueBeforeChange
Long Parameter List,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileArrayAccessCompoundAssignment,The method has 8 parameters. Parameters: array' index' otherOperand' elementType' compoundFactory' valueFactory' returnValueIsImportant' returnValueBeforeChange
Long Parameter List,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundAssignment,The method has 8 parameters. Parameters: target' otherOperand' compoundFactory' valueFactory' returnValueIsImportant' isLifted' returnValueBeforeChange' oldValueIsImportant
Long Parameter List,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileBinaryNonAssigningOperator,The method has 5 parameters. Parameters: left' right' resultFactory' isLifted' liftType
Long Parameter List,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileThisAndArgumentListForMethodCall,The method has 6 parameters. Parameters: member' literalCode' target' argumentsUsedMultipleTimes' argumentsForCall' argumentToParameterMap
Long Parameter List,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileMethodInvocation,The method has 6 parameters. Parameters: sem' method' targetResult' argumentsForCall' argumentToParameterMap' isVirtualCall
Long Parameter List,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileJsonConstructorCall,The method has 5 parameters. Parameters: constructor' impl' argumentsForCall' argumentToParameterMap' initializerStatements
Long Parameter List,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileConstructorInvocation,The method has 5 parameters. Parameters: impl' method' argumentsForCall' argumentToParameterMap' initializerStatements
Long Parameter List,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,HandleInvocation,The method has 6 parameters. Parameters: member' targetResult' argumentsForCall' argumentToParameterMap' initializerStatements' isVirtualCall
Long Parameter List,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,PerformMethodGroupConversionOnNormalMethod,The method has 7 parameters. Parameters: method' delegateType' isBaseCall' isExtensionMethodGroupConversion' target' methodSemantics' delegateSemantics
Long Parameter List,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,PerformMethodGroupConversionOnInlineCodeMethod,The method has 7 parameters. Parameters: method' delegateType' isBaseCall' isExtensionMethodGroupConversion' target' methodSemantics' delegateSemantics
Long Parameter List,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,PerformMethodGroupConversionOnStaticMethodWithThisAsFirstArgument,The method has 6 parameters. Parameters: method' delegateType' isBaseCall' target' methodSemantics' delegateSemantics
Long Parameter List,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,StatementCompiler,The method has 13 parameters. Parameters: metadataImporter' namer' errorReporter' compilation' resolver' variables' nestedFunctions' runtimeLibrary' thisAlias' usedVariableNames' nestedFunctionContext' methodBeingCompiled' typeBeingCompiled
Long Parameter List,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,StatementCompiler,The method has 17 parameters. Parameters: metadataImporter' namer' errorReporter' compilation' resolver' variables' nestedFunctions' runtimeLibrary' thisAlias' usedVariableNames' nestedFunctionContext' methodBeingCompiled' typeBeingCompiled' expressionCompiler' nextLabelIndex' currentVariableForRethrow' currentGotoCaseMap
Long Parameter List,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,MakeIteratorBody,The method has 5 parameters. Parameters: sm' returnsIEnumerable' yieldType' yieldResultVariable' methodParameterNames
Long Parameter List,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,CompileMethod,The method has 7 parameters. Parameters: parameters' variables' body' staticMethodWithThisAsFirstArgument' expandParams' stateMachineType' iteratorBlockYieldTypeOrAsyncTaskGenericArgument
Long Parameter List,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,CompileMethod,The method has 8 parameters. Parameters: parameters' variables' body' returnType' staticMethodWithThisAsFirstArgument' expandParams' stateMachineType' iteratorBlockYieldTypeOrAsyncTaskGenericArgument
Long Parameter List,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,CompileMethod,The method has 7 parameters. Parameters: parameters' variables' staticMethodWithThisAsFirstArgument' expandParams' stateMachineType' iteratorBlockYieldTypeOrAsyncTaskGenericArgument' compileBody
Long Parameter List,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,CompileFieldInitializer,The method has 5 parameters. Parameters: region' jsThis' scriptName' member' value
Long Parameter List,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,MethodCompiler,The method has 6 parameters. Parameters: metadataImporter' namer' errorReporter' compilation' resolver' runtimeLibrary
Long Parameter List,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CompileFieldInitializer,The method has 5 parameters. Parameters: region' jsThis' scriptName' member' value
Long Parameter List,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,MaybeCompileAndAddMethodToType,The method has 5 parameters. Parameters: jsClass' node' body' method' options
Long Parameter List,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,CompileAndAddAutoEventMethodsToType,The method has 5 parameters. Parameters: jsClass' node' evt' options' backingFieldName
Long Parameter List,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,CompileAndAddFieldInitializerToType,The method has 5 parameters. Parameters: jsClass' fieldName' member' initializer' isStatic
Long Parameter List,Saltarelle.Compiler.Decorators,RuntimeLibraryDecoratorBase,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Decorators\RuntimeLibraryDecoratorBase.cs,MakeEnumerator,The method has 5 parameters. Parameters: yieldType' moveNext' getCurrent' dispose' context
Long Parameter List,Saltarelle.Compiler.Decorators,RuntimeLibraryDecoratorBase,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Decorators\RuntimeLibraryDecoratorBase.cs,InitializeField,The method has 5 parameters. Parameters: jsThis' scriptName' member' initialValue' context
Long Parameter List,Saltarelle.Compiler.ScriptSemantics,MethodScriptSemantics,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\ScriptSemantics\MethodScriptSemantics.cs,NormalMethod,The method has 5 parameters. Parameters: name' ignoreGenericArguments' generateCode' expandParams' enumerateAsArray
Long Parameter List,Saltarelle.Compiler.ScriptSemantics,MethodScriptSemantics,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\ScriptSemantics\MethodScriptSemantics.cs,StaticMethodWithThisAsFirstArgument,The method has 5 parameters. Parameters: name' ignoreGenericArguments' generateCode' expandParams' enumerateAsArray
Long Parameter List,Saltarelle.Compiler.ScriptSemantics,MethodScriptSemantics,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\ScriptSemantics\MethodScriptSemantics.cs,InlineCode,The method has 5 parameters. Parameters: literalCode' enumerateAsArray' generatedMethodName' nonVirtualInvocationLiteralCode' nonExpandedFormLiteralCode
Long Identifier,Saltarelle.Compiler,IRuntimeContext,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\IRuntimeContext.cs,EnsureCanBeEvaluatedMultipleTimes,The length of the parameter expressionsThatMustBeEvaluatedBefore is 36.
Long Identifier,Saltarelle.Compiler,Utils,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Utils.cs,FindTypeUsageErrors,The length of the parameter mutableValueTypesBoundToTypeArguments is 37.
Long Identifier,Saltarelle.Compiler,Utils,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Utils.cs,FindGenericInstantiationErrors,The length of the parameter mutableValueTypesBoundToTypeArguments is 37.
Long Identifier,Saltarelle.Compiler,Utils,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Utils.cs,FindTypeUsageErrors,The length of the parameter mutableValueTypesBoundToTypeArguments is 37.
Long Identifier,Saltarelle.Compiler,Utils,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Utils.cs,EnsureCanBeEvaluatedMultipleTimes,The length of the parameter expressionsThatMustBeEvaluatedBefore is 36.
Long Identifier,Saltarelle.Compiler,UnusableTypesResult,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Utils.cs,UnusableTypesResult,The length of the parameter mutableValueTypesBoundToTypeArguments is 37.
Long Identifier,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,ExpressionTreeBuilder,The length of the parameter createLocalReferenceExpression is 30.
Long Identifier,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,,The length of the parameter _createLocalReferenceExpression is 31.
Long Identifier,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,ExpressionCompiler,The length of the parameter returnMultidimArrayValueByReference is 35.
Long Identifier,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,Clone,The length of the parameter returnMultidimArrayValueByReference is 35.
Long Identifier,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CloneAndCompile,The length of the parameter returnMultidimArrayValueByReference is 35.
Long Identifier,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,EnsureCanBeEvaluatedMultipleTimes,The length of the parameter expressionsThatMustBeEvaluatedBefore is 36.
Long Identifier,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,InnerCompile,The length of the parameter expressionsThatHaveToBeEvaluatedInOrderBeforeThisExpression is 59.
Long Identifier,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,InnerCompile,The length of the parameter returnMultidimArrayValueByReference is 35.
Long Identifier,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,InnerCompile,The length of the parameter expressionThatHasToBeEvaluatedInOrderBeforeThisExpression is 57.
Long Identifier,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,InnerCompile,The length of the parameter returnMultidimArrayValueByReference is 35.
Long Identifier,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,InnerCompile,The length of the parameter returnMultidimArrayValueByReference is 35.
Long Identifier,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,GetActualInlineCode,The length of the parameter isNonVirtualInvocationOfVirtualMethod is 37.
Long Identifier,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileMethodInvocation,The length of the parameter isNonVirtualInvocationOfVirtualMethod is 37.
Long Identifier,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileMethodInvocation,The length of the parameter isNonVirtualInvocationOfVirtualMethod is 37.
Long Identifier,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,PerformMethodGroupConversionOnNormalMethod,The length of the parameter isExtensionMethodGroupConversion is 32.
Long Identifier,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,PerformMethodGroupConversionOnInlineCodeMethod,The length of the parameter isExtensionMethodGroupConversion is 32.
Long Identifier,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,,The length of the parameter _returnMultidimArrayValueByReference is 36.
Long Identifier,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,CompileMethod,The length of the parameter staticMethodWithThisAsFirstArgument is 35.
Long Identifier,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,CompileMethod,The length of the parameter iteratorBlockYieldTypeOrAsyncTaskGenericArgument is 48.
Long Identifier,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,CompileMethod,The length of the parameter staticMethodWithThisAsFirstArgument is 35.
Long Identifier,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,CompileMethod,The length of the parameter iteratorBlockYieldTypeOrAsyncTaskGenericArgument is 48.
Long Identifier,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,CompileMethod,The length of the parameter staticMethodWithThisAsFirstArgument is 35.
Long Identifier,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,CompileMethod,The length of the parameter iteratorBlockYieldTypeOrAsyncTaskGenericArgument is 48.
Long Identifier,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,EnsureCanBeEvaluatedMultipleTimes,The length of the parameter expressionsThatMustBeEvaluatedBefore is 36.
Long Identifier,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,,The length of the parameter DisableStateMachineRewriteTestingUseOnly is 40.
Long Identifier,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CompileMethod,The length of the parameter iteratorBlockYieldTypeOrAsyncTaskGenericArgument is 48.
Long Identifier,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,PrepareParameters,The length of the parameter staticMethodWithThisAsFirstArgument is 35.
Long Identifier,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,EnsureCanBeEvaluatedMultipleTimes,The length of the parameter expressionsThatMustBeEvaluatedBefore is 36.
Long Identifier,Saltarelle.Compiler.ScriptSemantics,MethodScriptSemantics,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\ScriptSemantics\MethodScriptSemantics.cs,InlineCode,The length of the parameter nonVirtualInvocationLiteralCode is 31.
Long Identifier,Saltarelle.Compiler.ScriptSemantics,MethodScriptSemantics,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\ScriptSemantics\MethodScriptSemantics.cs,,The length of the parameter _nonVirtualInvocationLiteralCode is 32.
Long Statement,Saltarelle.Compiler,AttributeStore,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\AttributeStore.cs,FindTypeName,The length of the statement  "			var attr = def.Attributes.FirstOrDefault(a => a.AttributeType.FullName == "System.Runtime.CompilerServices.PluginNameAttribute"); " is 129.
Long Statement,Saltarelle.Compiler,Utils,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Utils.cs,IsExternallyVisible,The length of the statement  "				bool isPublic = (type.Accessibility == Accessibility.Public || type.Accessibility == Accessibility.Protected || type.Accessibility == Accessibility.ProtectedOrInternal); " is 169.
Long Statement,Saltarelle.Compiler,Utils,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Utils.cs,IsExternallyVisible,The length of the statement  "			return IsExternallyVisible(member.DeclaringType.GetDefinition()) && (member.Accessibility == Accessibility.Public || member.Accessibility == Accessibility.Protected || member.Accessibility == Accessibility.ProtectedOrInternal); " is 227.
Long Statement,Saltarelle.Compiler,Utils,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Utils.cs,FindTypeUsageErrors,The length of the statement  "						if (ta.Kind == TypeKind.Struct && metadataImporter.GetTypeSemantics(ta.GetDefinition()).Type == TypeScriptSemantics.ImplType.MutableValueType) " is 142.
Long Statement,Saltarelle.Compiler,Utils,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Utils.cs,FindTypeUsageErrors,The length of the statement  "					FindTypeUsageErrors(new[] { pt.GetDefinition() }.Concat(pt.TypeArguments)' metadataImporter' usedUnusableTypes' mutableValueTypesBoundToTypeArguments); " is 151.
Long Statement,Saltarelle.Compiler,Utils,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Utils.cs,FindGenericInstantiationErrors,The length of the statement  "				if (ta.Kind == TypeKind.Struct && metadataImporter.GetTypeSemantics(ta.GetDefinition()).Type == TypeScriptSemantics.ImplType.MutableValueType) " is 142.
Long Statement,Saltarelle.Compiler,Utils,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Utils.cs,FindGenericInstantiationErrors,The length of the statement  "			return new UnusableTypesResult(usedUnusableTypes.Count > 0 ? usedUnusableTypes.ToList<IType>() : (IList<IType>)EmptyList<IType>.Instance' mutableValueTypesBoundToTypeArguments.Count > 0 ? mutableValueTypesBoundToTypeArguments.ToList<IType>() : (IList<IType>)EmptyList<IType>.Instance); " is 285.
Long Statement,Saltarelle.Compiler,Utils,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Utils.cs,FindTypeUsageErrors,The length of the statement  "			return new UnusableTypesResult(usedUnusableTypes.Count > 0 ? usedUnusableTypes.ToList<IType>() : (IList<IType>)EmptyList<IType>.Instance' mutableValueTypesBoundToTypeArguments.Count > 0 ? mutableValueTypesBoundToTypeArguments.ToList<IType>() : (IList<IType>)EmptyList<IType>.Instance); " is 285.
Long Statement,Saltarelle.Compiler,Utils,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Utils.cs,SelfParameterize,The length of the statement  "			return type.TypeParameterCount == 0 ? (IType)type : new ParameterizedType(type' type.TypeParameters.Select(tp => new DefaultTypeParameter(type' tp.Index' tp.Name))); " is 165.
Long Statement,Saltarelle.Compiler,Utils,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Utils.cs,CreateTemporariesForAllExpressionsThatHaveToBeEvaluatedBeforeNewExpression,The length of the statement  "			CreateTemporariesForAllExpressionsThatHaveToBeEvaluatedBeforeNewExpression(statementList' expressions' new ExpressionCompileResult(newExpression' new JsStatement[0])' createTemporaryVariable); " is 192.
Long Statement,Saltarelle.Compiler,Utils,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Utils.cs,EnsureCanBeEvaluatedMultipleTimes,The length of the statement  "				CreateTemporariesForAllExpressionsThatHaveToBeEvaluatedBeforeNewExpression(statementList' expressionsThatMustBeEvaluatedBefore' expression' createTemporaryVariable); " is 165.
Long Statement,Saltarelle.Compiler,Utils,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Utils.cs,ResolveTypeParameter,The length of the statement  "					unusable = sem.Type != MethodScriptSemantics.ImplType.InlineCode && metadataImporter.GetMethodSemantics(currentMethod).IgnoreGenericArguments; " is 142.
Long Statement,Saltarelle.Compiler,Utils,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Utils.cs,ResolveTypeParameter,The length of the statement  "				errorReporter.Message(Messages._7536' tp.Name' tp.OwnerType == SymbolKind.TypeDefinition ? "type" : "method"' tp.OwnerType == SymbolKind.TypeDefinition ? currentType.FullName : currentMethod.FullName); " is 201.
Long Statement,Saltarelle.Compiler,Utils,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Utils.cs,IsMutableValueType,The length of the statement  "			return type.Kind == TypeKind.Struct && metadataImporter.GetTypeSemantics(type.GetDefinition()).Type == TypeScriptSemantics.ImplType.MutableValueType; " is 149.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,TypesMatch,The length of the statement  "				if (!method.Parameters[i].Type.Equals(ReflectionHelper.ParseReflectionName(argumentTypes[i].FullName).Resolve(_compilation))) " is 125.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,CompileFactoryCall,The length of the statement  "			var method = _expression.Methods.Single(m => m.Name == factoryMethodName && m.TypeParameters.Count == 0 && TypesMatch(m' argumentTypes)); " is 137.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitLambdaResolveResult,The length of the statement  "				_additionalStatements.Add(JsStatement.Var(temp' CompileFactoryCall("Parameter"' new[] { typeof(Type)' typeof(string) }' new[] { _instantiateType(rr.Parameters[i].Type)' JsExpression.String(rr.Parameters[i].Name) }))); " is 217.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitLambdaResolveResult,The length of the statement  "			return CompileFactoryCall("Lambda"' new[] { typeof(Expression)' typeof(ParameterExpression[]) }' new[] { body' JsExpression.ArrayLiteral(parameters) }); " is 152.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitOperatorResolveResult,The length of the statement  "			bool isUserDefined = (rr.UserDefinedOperatorMethod != null && _metadataImporter.GetMethodSemantics(rr.UserDefinedOperatorMethod).Type != MethodScriptSemantics.ImplType.NativeOperator); " is 184.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitOperatorResolveResult,The length of the statement  "				return CompileFactoryCall("Condition"' new[] { typeof(Expression)' typeof(Expression)' typeof(Expression)' typeof(Type) }' arguments); " is 134.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitOperatorResolveResult,The length of the statement  "				return CompileFactoryCall(rr.OperatorType.ToString()' rr.Operands.Count == 1 ? new[] { typeof(Expression)' isUserDefined ? typeof(MethodInfo) : typeof(Type) } : new[] { typeof(Expression)' typeof(Expression)' isUserDefined ? typeof(MethodInfo) : typeof(Type) }' arguments); " is 273.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitConversionResolveResult,The length of the statement  "				return CompileFactoryCall("Constant"' new[] { typeof(object)' typeof(Type) }' new[] { input' _instantiateType(rr.Type) }); " is 122.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitConversionResolveResult,The length of the statement  "				               CompileFactoryCall("Constant"' new[] { typeof(object)' typeof(Type) }' new[] { _getMember(rr.Conversion.Method)' _instantiateType(methodInfo) })' " is 145.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitConversionResolveResult,The length of the statement  "				               _getMember(methodInfo.GetMethods().Single(m => m.Name == "CreateDelegate" && m.Parameters.Count == 2 && m.Parameters[0].Type.FullName == typeof(Type).FullName && m.Parameters[1].Type.FullName == typeof(object).FullName))' " is 221.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitConversionResolveResult,The length of the statement  "				                   rr.Conversion.Method.IsStatic ? JsExpression.Null : VisitResolveResult(((MethodGroupResolveResult)rr.Input).TargetResult' null) " is 127.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitConversionResolveResult,The length of the statement  "					return CompileFactoryCall(methodName' new[] { typeof(Expression)' typeof(Type)' typeof(MethodInfo) }' new[] { input' _instantiateType(rr.Type)' _getMember(rr.Conversion.Method) }); " is 180.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitConversionResolveResult,The length of the statement  "					return CompileFactoryCall(methodName' new[] { typeof(Expression)' typeof(Type) }' new[] { input' _instantiateType(rr.Type) }); " is 126.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitTypeIsResolveResult,The length of the statement  "			return CompileFactoryCall("TypeIs"' new[] { typeof(Expression)' typeof(Type) }' new[] { VisitResolveResult(rr.Input' null)' _instantiateType(rr.TargetType) }); " is 159.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitMemberResolveResult,The length of the statement  "				return CompileFactoryCall("Property"' new[] { typeof(Expression)' typeof(PropertyInfo) }' new[] { instance' _getMember(rr.Member) }); " is 133.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitMemberResolveResult,The length of the statement  "				return CompileFactoryCall("Field"' new[] { typeof(Expression)' typeof(FieldInfo) }' new[] { instance' _getMember(rr.Member) }); " is 127.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,BuildAssignmentMap,The length of the statement  "					result.Add(Tuple.Create(GetMemberPath(orr.Operands[0])' (IList<ResolveResult>)new[] { orr.Operands[1] }' (IMethod)null)); " is 121.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,GenerateMemberBindings,The length of the statement  "					result.Add(CompileFactoryCall("MemberBind"' new[] { typeof(MemberInfo)' typeof(MemberBinding[]) }' new[] { _getMember(currentTarget)' JsExpression.ArrayLiteral(innerBindings.Item1) })); " is 185.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,GenerateMemberBindings,The length of the statement  "						elements.Add(CompileFactoryCall("ElementInit"' new[] { typeof(MethodInfo)' typeof(Expression[]) }' new[] { _getMember(initializers.Current.Item3)' JsExpression.ArrayLiteral(initializers.Current.Item2.Select(i => VisitResolveResult(i' null))) })); " is 246.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,GenerateMemberBindings,The length of the statement  "					result.Add(CompileFactoryCall("ListBind"' new[] { typeof(MemberInfo)' typeof(ElementInit[]) }' new[] { _getMember(currentTarget)' JsExpression.ArrayLiteral(elements) })); " is 170.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,GenerateMemberBindings,The length of the statement  "					result.Add(CompileFactoryCall("Bind"' new[] { typeof(MemberInfo)' typeof(Expression) }' new[] { _getMember(currentTarget)' VisitResolveResult(initializers.Current.Item2[0]' null) })); " is 183.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitInvocationResolveResult,The length of the statement  "				return CompileFactoryCall("Invoke"' new[] { typeof(Type)' typeof(Expression)' typeof(Expression[]) }' new[] { _instantiateType(rr.Type)' VisitResolveResult(rr.TargetResult' null)' JsExpression.ArrayLiteral(rr.GetArgumentsForCall().Select(a => VisitResolveResult(a' null))) }); " is 276.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitInvocationResolveResult,The length of the statement  "						if (assign == null || assign.OperatorType != ExpressionType.Assign || !(assign.Operands[0] is MemberResolveResult) || !(((MemberResolveResult)assign.Operands[0]).Member is IProperty)) " is 183.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitInvocationResolveResult,The length of the statement  "					return CompileFactoryCall("New"' new[] { typeof(ConstructorInfo)' typeof(Expression[])' typeof(MemberInfo[]) }' new[] { _getMember(rr.Member)' JsExpression.ArrayLiteral(args)' JsExpression.ArrayLiteral(members) }); " is 214.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitInvocationResolveResult,The length of the statement  "					var result = CompileFactoryCall("New"' new[] { typeof(ConstructorInfo)' typeof(Expression[]) }' new[] { _getMember(rr.Member)' JsExpression.ArrayLiteral(rr.GetArgumentsForCall().Select(a => VisitResolveResult(a' null))) }); " is 223.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitInvocationResolveResult,The length of the statement  "						if (rr.InitializerStatements[0] is InvocationResolveResult && ((InvocationResolveResult)rr.InitializerStatements[0]).TargetResult is InitializedObjectResolveResult) { " is 166.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitInvocationResolveResult,The length of the statement  "								elements.Add(CompileFactoryCall("ElementInit"' new[] { typeof(MethodInfo)' typeof(Expression[]) }' new[] { _getMember(irr.Member)' JsExpression.ArrayLiteral(irr.Arguments.Select(i => VisitResolveResult(i' null))) })); " is 217.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitInvocationResolveResult,The length of the statement  "							result = CompileFactoryCall("ListInit"' new[] { typeof(NewExpression)' typeof(ElementInit[]) }' new[] { result' JsExpression.ArrayLiteral(elements) }); " is 151.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitInvocationResolveResult,The length of the statement  "								result = CompileFactoryCall("MemberInit"' new[] { typeof(NewExpression)' typeof(MemberBinding[]) }' new[] { result' JsExpression.ArrayLiteral(bindings.Item1) }); " is 161.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitInvocationResolveResult,The length of the statement  "				var member = rr.Member is IProperty ? ((IProperty)rr.Member).Getter : rr.Member;	// If invoking a property (indexer)' use the get method. " is 137.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitInvocationResolveResult,The length of the statement  "				return CompileFactoryCall("Call"' new[] { typeof(Expression)' typeof(MethodInfo)' typeof(Expression[]) }' new[] { member.IsStatic ? JsExpression.Null : VisitResolveResult(rr.TargetResult' null)' _getMember(member)' JsExpression.ArrayLiteral(rr.GetArgumentsForCall().Select(a => VisitResolveResult(a' null))) }); " is 311.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitTypeOfResolveResult,The length of the statement  "			return CompileFactoryCall("Constant"' new[] { typeof(object)' typeof(Type) }' new[] { _instantiateType(rr.ReferencedType)' _instantiateType(rr.Type) }); " is 152.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,MakeConstant,The length of the statement  "			return CompileFactoryCall("Constant"' new[] { typeof(object)' typeof(Type) }' new[] { value' _instantiateType(rr.Type) }); " is 122.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitSizeOfResolveResult,The length of the statement  "				// This is an internal error because AFAIK' using sizeof() with anything that doesn't return a compile-time constant (with our enum extensions) can only be done in an unsafe context. " is 182.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitArrayAccessResolveResult,The length of the statement  "				return CompileFactoryCall("ArrayIndex"' new[] { typeof(Type)' typeof(Expression)' typeof(Expression) }' new[] { _instantiateType(rr.Type)' array' VisitResolveResult(rr.Indexes[0]' null) }); " is 189.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitArrayAccessResolveResult,The length of the statement  "				return CompileFactoryCall("ArrayIndex"' new[] { typeof(Type)' typeof(Expression)' typeof(Expression[]) }' new[] { _instantiateType(rr.Type)' array' JsExpression.ArrayLiteral(rr.Indexes.Select(i => VisitResolveResult(i' null))) }); " is 230.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitArrayCreateResolveResult,The length of the statement  "				return CompileFactoryCall("NewArrayInit"' new[] { typeof(Type)' typeof(Expression[]) }' new[] { _instantiateType(rr.Type)' JsExpression.ArrayLiteral(rr.InitializerElements.Select(e => VisitResolveResult(e' null))) }); " is 217.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitArrayCreateResolveResult,The length of the statement  "				return CompileFactoryCall("NewArrayBounds"' new[] { typeof(Type)' typeof(Expression[]) }' new[] { _instantiateType(rr.Type)' JsExpression.ArrayLiteral(rr.SizeArguments.Select(a => VisitResolveResult(a' null))) }); " is 213.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitThisResolveResult,The length of the statement  "			return CompileFactoryCall("Constant"' new[] { typeof(object)' typeof(Type) }' new[] { _this' _instantiateType(rr.Type) }); " is 122.
Long Statement,Saltarelle.Compiler.Compiler,InlineCodeToken,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\InlineCodeToken.cs,Equals,The length of the statement  "			return Equals(other._text' _text) && other._index == _index && Equals(other.Type' Type) && _ownerType == other._ownerType && _isExpandedParamArray == other._isExpandedParamArray; " is 178.
Long Statement,Saltarelle.Compiler.Compiler,InlineCodeToken,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\InlineCodeToken.cs,ToString,The length of the statement  "			return string.Format("Text: {0}' Index: {1}' Type: {2}' OwnerType: {3}' IsExpandedParamArray: {4}"' _text' _index' Type' _ownerType' _isExpandedParamArray); " is 156.
Long Statement,Saltarelle.Compiler.Compiler,InlineCodeMethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\InlineCodeMethodCompiler.cs,PrepareInlineCodeMethodInvocation,The length of the statement  "								errorReporter("The parameter " + method.Parameters[token.Index].Name + " must be a param array in order to use it with the * modifier."); " is 137.
Long Statement,Saltarelle.Compiler.Compiler,InlineCodeMethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\InlineCodeMethodCompiler.cs,PrepareInlineCodeMethodInvocation,The length of the statement  "							errorReporter("The type of the parameter " + method.Parameters[token.Index].Name + " must be string in order to use it with the '@' modifier."); " is 144.
Long Statement,Saltarelle.Compiler.Compiler,InlineCodeMethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\InlineCodeMethodCompiler.cs,PrepareInlineCodeMethodInvocation,The length of the statement  "								errorReporter("The argument specified for parameter " + method.Parameters[token.Index].Name + " must be a literal string"); " is 123.
Long Statement,Saltarelle.Compiler.Compiler,InlineCodeMethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\InlineCodeMethodCompiler.cs,CompileExpressionInlineCodeMethodInvocation,The length of the statement  "			var textAndSubstitution = PrepareInlineCodeMethodInvocation(method' tokens' @this' arguments' resolveType' resolveTypeArgument' errorReporter); " is 143.
Long Statement,Saltarelle.Compiler.Compiler,InlineCodeMethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\InlineCodeMethodCompiler.cs,CompileStatementListInlineCodeMethodInvocation,The length of the statement  "			var textAndSubstitution = PrepareInlineCodeMethodInvocation(method' tokens' @this' arguments' resolveType' resolveTypeArgument' errorReporter); " is 143.
Long Statement,Saltarelle.Compiler.Compiler,InlineCodeMethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\InlineCodeMethodCompiler.cs,ValidateExpressionLiteralCode,The length of the statement  "			                                            method.Parameters.Select(p => p.IsParams ? (JsExpression)JsExpression.ArrayLiteral() : JsExpression.String("X")).ToList()' " is 122.
Long Statement,Saltarelle.Compiler.Compiler,InlineCodeMethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\InlineCodeMethodCompiler.cs,ValidateStatementListLiteralCode,The length of the statement  "			                                               method.Parameters.Select(p => p.IsParams ? (JsExpression)JsExpression.ArrayLiteral() : JsExpression.String("X")).ToList()' " is 122.
Long Statement,Saltarelle.Compiler.Compiler,Substituter,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\InlineCodeMethodCompiler.cs,VisitIdentifierExpression,The length of the statement  "						_errorReporter("Expanded parameters in inline code can only be used in array literals' function invocations' or 'new' expressions"); " is 132.
Long Statement,Saltarelle.Compiler.Compiler,Substituter,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\InlineCodeMethodCompiler.cs,VisitInvocationExpression,The length of the statement  "				return ReferenceEquals(m' expression.Method) && ReferenceEquals(a' expression.Arguments) ? expression : JsExpression.Invocation(m' a); " is 134.
Long Statement,Saltarelle.Compiler.Compiler,Substituter,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\InlineCodeMethodCompiler.cs,VisitNewExpression,The length of the statement  "				return ReferenceEquals(c' expression.Constructor) && ReferenceEquals(a' expression.Arguments) ? expression : JsExpression.New(c' a); " is 132.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileConstructorInitializer,The length of the statement  "				_additionalStatements.Add(JsStatement.Var(_thisAlias' CompileConstructorInvocation(impl' method' argumentsForCall' argumentToParameterMap' initializerStatements))); " is 164.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileConstructorInitializer,The length of the statement  "				_additionalStatements.Add(_runtimeLibrary.ShallowCopy(CompileJsonConstructorCall(method' impl' argumentsForCall' argumentToParameterMap' initializerStatements)' CompileThis()' this)); " is 183.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileConstructorInitializer,The length of the statement  "				string literalCode   = GetActualInlineCode(impl' argumentsForCall.Count > 0 && argumentsForCall[argumentsForCall.Count - 1] is ArrayCreateResolveResult); " is 153.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileConstructorInitializer,The length of the statement  "				var thisAndArguments = CompileThisAndArgumentListForMethodCall(method' literalCode' _runtimeLibrary.InstantiateType(method.DeclaringType' this)' false' argumentsForCall' argumentToParameterMap); " is 194.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileConstructorInitializer,The length of the statement  "						_additionalStatements.Add(CompileMethodInvocationWithPotentialExpandParams(thisAndArguments' jsType' impl.ExpandParams' true)); " is 127.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileConstructorInitializer,The length of the statement  "						_additionalStatements.Add(CompileMethodInvocationWithPotentialExpandParams(thisAndArguments' JsExpression.Member(jsType' impl.Name)' impl.ExpandParams' true)); " is 159.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileConstructorInitializer,The length of the statement  "						_additionalStatements.Add(_runtimeLibrary.ShallowCopy(CompileMethodInvocationWithPotentialExpandParams(thisAndArguments' JsExpression.Member(jsType' impl.Name)' impl.ExpandParams' false)' thisAndArguments[0]' this)); " is 216.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileConstructorInitializer,The length of the statement  "						_additionalStatements.Add(_runtimeLibrary.ShallowCopy(CompileInlineCodeMethodInvocation(method' literalCode' null' thisAndArguments.Skip(1).ToList())' thisAndArguments[0]' this)); " is 179.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,Clone,The length of the statement  "			return new ExpressionCompiler(_compilation' _metadataImporter' _namer' _runtimeLibrary' _errorReporter' _variables' _nestedFunctions' _createTemporaryVariable' _createInnerCompiler' _thisAlias' nestedFunctionContext ?? _nestedFunctionContext' _objectBeingInitialized' _methodBeingCompiled' _typeBeingCompiled' returnMultidimArrayValueByReference); " is 347.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CreateTemporariesForAllExpressionsThatHaveToBeEvaluatedBeforeNewExpression,The length of the statement  "			Utils.CreateTemporariesForAllExpressionsThatHaveToBeEvaluatedBeforeNewExpression(_additionalStatements' expressions' newExpressions' () => { var temp = _createTemporaryVariable(SpecialType.UnknownType); return _variables[temp].Name; }); " is 236.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CreateTemporariesForAllExpressionsThatHaveToBeEvaluatedBeforeNewExpression,The length of the statement  "			CreateTemporariesForAllExpressionsThatHaveToBeEvaluatedBeforeNewExpression(expressions' new ExpressionCompileResult(newExpression' new JsStatement[0])); " is 152.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,EnsureCanBeEvaluatedMultipleTimes,The length of the statement  "			return Utils.EnsureCanBeEvaluatedMultipleTimes(_additionalStatements' expression' expressionsThatMustBeEvaluatedBefore' () => { var temp = _createTemporaryVariable(SpecialType.UnknownType); return _variables[temp].Name; }); " is 223.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,ResolveTypeParameter,The length of the statement  "			return Utils.ResolveTypeParameter(tp' _typeBeingCompiled' _methodBeingCompiled' _metadataImporter' _errorReporter' _namer); " is 123.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,InnerCompile,The length of the statement  "			var result = CloneAndCompile(rr' returnValueIsImportant: true' returnMultidimArrayValueByReference: returnMultidimArrayValueByReference); " is 137.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,InnerCompile,The length of the statement  "			bool needsTemporary = usedMultipleTimes && IsJsExpressionComplexEnoughToGetATemporaryVariable.Analyze(result.Expression); " is 121.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,InnerCompile,The length of the statement  "				CreateTemporariesForAllExpressionsThatHaveToBeEvaluatedBeforeNewExpression(expressionsThatHaveToBeEvaluatedInOrderBeforeThisExpression' result); " is 144.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundFieldAssignment,The length of the statement  "					_additionalStatements.Add(JsExpression.Assign(access' MaybeCloneValueType(valueFactory(jsTarget' jsOtherOperand)' otherOperand' targetType))); " is 142.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundFieldAssignment,The length of the statement  "					return compoundFactory(access' jsOtherOperand != null ? MaybeCloneValueType(jsOtherOperand' otherOperand' targetType) : null); " is 126.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundFieldAssignment,The length of the statement  "					_additionalStatements.Add(JsExpression.Assign(access' MaybeCloneValueType(valueFactory(JsExpression.Identifier(_variables[temp].Name)' jsOtherOperand)' otherOperand' targetType))); " is 180.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundFieldAssignment,The length of the statement  "						_additionalStatements.Add(JsExpression.Assign(access' MaybeCloneValueType(valueFactory(access' jsOtherOperand)' otherOperand' targetType))); " is 140.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundFieldAssignment,The length of the statement  "						return JsExpression.Assign(access' MaybeCloneValueType(valueFactory(access' jsOtherOperand)' otherOperand' targetType)); " is 120.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundFieldAssignment,The length of the statement  "			var jsTarget = target.Member.IsStatic ? _runtimeLibrary.InstantiateType(target.Member.DeclaringType' this) : InnerCompile(target.TargetResult' compoundFactory == null' returnMultidimArrayValueByReference: true); " is 211.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundFieldAssignment,The length of the statement  "			return CompileCompoundFieldAssignment(jsTarget' otherOperand' target.Type' fieldName' compoundFactory' valueFactory' returnValueIsImportant' returnValueBeforeChange); " is 166.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileArrayAccessCompoundAssignment,The length of the statement  "					_additionalStatements.Add(JsExpression.Assign(access' MaybeCloneValueType(valueFactory(access' jsOtherOperand)' otherOperand' elementType))); " is 141.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileArrayAccessCompoundAssignment,The length of the statement  "					_additionalStatements.Add(JsExpression.Assign(access' MaybeCloneValueType(valueFactory(JsExpression.Identifier(_variables[temp].Name)' jsOtherOperand)' otherOperand' elementType))); " is 181.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileArrayAccessCompoundAssignment,The length of the statement  "						_additionalStatements.Add(JsExpression.Assign(access' MaybeCloneValueType(valueFactory(access' jsOtherOperand)' otherOperand' elementType))); " is 141.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileArrayAccessCompoundAssignment,The length of the statement  "						return JsExpression.Assign(access' MaybeCloneValueType(valueFactory(access' jsOtherOperand)' otherOperand' elementType)); " is 121.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundAssignment,The length of the statement  "				var jsOtherOperand = (otherOperand != null ? InnerCompile(otherOperand' false) : null);	// If the variable is a by-ref variable we will get invalid reordering if we force the target to be evaluated before the other operand. " is 223.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundAssignment,The length of the statement  "						_additionalStatements.Add(JsExpression.Assign(jsTarget' MaybeCloneValueType(valueFactory(jsTarget' jsOtherOperand)' otherOperand' target.Type))); " is 145.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundAssignment,The length of the statement  "						_additionalStatements.Add(JsExpression.Assign(jsTarget' valueFactory(JsExpression.Identifier(_variables[temp].Name)' jsOtherOperand))); " is 135.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundAssignment,The length of the statement  "							_additionalStatements.Add(JsExpression.Assign(jsTarget' MaybeCloneValueType(valueFactory(jsTarget' jsOtherOperand)' otherOperand' target.Type))); " is 145.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundAssignment,The length of the statement  "							return JsExpression.Assign(jsTarget' MaybeCloneValueType(valueFactory(jsTarget' jsOtherOperand)' otherOperand' target.Type)); " is 125.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundAssignment,The length of the statement  "				return CompileCompoundFieldAssignment(InnerCompile(mrr.Target' false)' otherOperand' SpecialType.Dynamic' mrr.Member' compoundFactory' valueFactory' returnValueIsImportant' returnValueBeforeChange); " is 198.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundAssignment,The length of the statement  "				return CompileArrayAccessCompoundAssignment(irr.Target' irr.Arguments[0]' otherOperand' SpecialType.Dynamic' compoundFactory' valueFactory' returnValueIsImportant' returnValueBeforeChange); " is 189.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundAssignment,The length of the statement  "								return CompileArrayAccessCompoundAssignment(mrr.TargetResult' ((CSharpInvocationResolveResult)mrr).Arguments[0]' otherOperand' property.ReturnType' compoundFactory' valueFactory' returnValueIsImportant' returnValueBeforeChange); " is 228.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundAssignment,The length of the statement  "									thisAndArguments = CompileThisAndArgumentListForMethodCall(property.Setter' null' InnerCompile(invocation.TargetResult' oldValueIsImportant' returnMultidimArrayValueByReference: true)' oldValueIsImportant' invocation.GetArgumentsForCall()' invocation.GetArgumentToParameterMap()); " is 280.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundAssignment,The length of the statement  "									thisAndArguments = new List<JsExpression> { mrr.Member.IsStatic ? _runtimeLibrary.InstantiateType(mrr.Member.DeclaringType' this) : InnerCompile(mrr.TargetResult' oldValueIsImportant' returnMultidimArrayValueByReference: true) }; " is 229.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundAssignment,The length of the statement  "									thisAndArguments.Add(MaybeCloneValueType(CompileMethodInvocation(impl.GetMethod' property.Getter' thisAndArguments' mrr.Member.IsOverridable && !mrr.IsVirtualCall)' otherOperand' target.Type)); " is 193.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundAssignment,The length of the statement  "									thisAndArguments.RemoveAt(thisAndArguments.Count - 1); // Remove the current value because it should not be an argument to the setter. " is 134.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundAssignment,The length of the statement  "									_additionalStatements.Add(CompileMethodInvocation(impl.SetMethod' property.Setter' thisAndArguments' mrr.Member.IsOverridable && !mrr.IsVirtualCall)); " is 150.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundAssignment,The length of the statement  "									return CompileMethodInvocation(impl.SetMethod' property.Setter' thisAndArguments' mrr.Member.IsOverridable && !mrr.IsVirtualCall); " is 130.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundAssignment,The length of the statement  "							return CompileCompoundFieldAssignment(mrr' otherOperand' impl.FieldName' compoundFactory' valueFactory' returnValueIsImportant' returnValueBeforeChange); " is 153.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundAssignment,The length of the statement  "							return CompileCompoundFieldAssignment(mrr' otherOperand' impl.Name' compoundFactory' valueFactory' returnValueIsImportant' returnValueBeforeChange); " is 148.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundAssignment,The length of the statement  "					return CompileCompoundFieldAssignment(mrr' otherOperand' evtField' compoundFactory' valueFactory' returnValueIsImportant' returnValueBeforeChange); " is 147.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundAssignment,The length of the statement  "					_errorReporter.InternalError("Target " + mrr.Member.DeclaringType.FullName + "." + mrr.Member.Name + " of compound assignment is neither a property nor a field nor an event."); " is 176.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundAssignment,The length of the statement  "					return CompileArrayAccessCompoundAssignment(arr.Array' arr.Indexes[0]' otherOperand' target.Type' compoundFactory' valueFactory' returnValueIsImportant' returnValueBeforeChange); " is 178.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundAssignment,The length of the statement  "						expressions.RemoveAt(expressions.Count - 1); // Remove the current value because it should not be an argument to the setter. " is 124.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundAssignment,The length of the statement  "						var newValue = MaybeCloneValueType(returnValueBeforeChange ? valueFactory(valueToReturn' jsOtherOperand) : valueToReturn' otherOperand' target.Type); " is 149.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundAssignment,The length of the statement  "						_additionalStatements.Add(_runtimeLibrary.SetMultiDimensionalArrayValue(expressions[0]' expressions.Skip(1)' newValue' this)); " is 126.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundAssignment,The length of the statement  "						return _runtimeLibrary.SetMultiDimensionalArrayValue(expressions[0]' expressions.Skip(1)' MaybeCloneValueType(valueFactory(oldValue' jsOtherOperand)' otherOperand' target.Type)' this); " is 184.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundAssignment,The length of the statement  "						_additionalStatements.Add(_runtimeLibrary.ShallowCopy(MaybeCloneValueType(valueFactory(jsTarget' jsOtherOperand)' otherOperand' target.Type)' jsTarget' this)); " is 159.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundAssignment,The length of the statement  "						return _runtimeLibrary.ShallowCopy(MaybeCloneValueType(valueFactory(jsTarget' jsOtherOperand)' otherOperand' target.Type)' jsTarget' this); " is 139.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundAssignment,The length of the statement  "						_additionalStatements.Add(JsStatement.Var(_variables[temp].Name' MaybeCloneValueType(jsTarget' null' target.Type' forceClone: true))); " is 134.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundAssignment,The length of the statement  "						_additionalStatements.Add(_runtimeLibrary.ShallowCopy(valueFactory(JsExpression.Identifier(_variables[temp].Name)' jsOtherOperand)' jsTarget' this)); " is 149.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundAssignment,The length of the statement  "							_additionalStatements.Add(_runtimeLibrary.ShallowCopy(MaybeCloneValueType(valueFactory(jsTarget' jsOtherOperand)' otherOperand' target.Type)' jsTarget' this)); " is 159.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCompoundAssignment,The length of the statement  "							return _runtimeLibrary.ShallowCopy(MaybeCloneValueType(valueFactory(jsTarget' jsOtherOperand)' otherOperand' target.Type)' jsTarget' this); " is 139.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileConditionalOperator,The length of the statement  "				var trueBlock  = JsStatement.Block(trueResult.AdditionalStatements.Concat(new JsStatement[] { JsExpression.Assign(JsExpression.Identifier(_variables[temp].Name)' trueResult.Expression) })); " is 189.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileConditionalOperator,The length of the statement  "				var falseBlock = JsStatement.Block(falseResult.AdditionalStatements.Concat(new JsStatement[] { JsExpression.Assign(JsExpression.Identifier(_variables[temp].Name)' falseResult.Expression) })); " is 191.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCoalesce,The length of the statement  "			else if (jsRight.AdditionalStatements.Count == 0 && (jsRight.Expression.NodeType == ExpressionNodeType.Identifier || (jsRight.Expression.NodeType >= ExpressionNodeType.ConstantFirst && jsRight.Expression.NodeType <= ExpressionNodeType.ConstantLast))) { " is 252.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCoalesce,The length of the statement  "				var nullBlock  = JsStatement.Block(jsRight.AdditionalStatements.Concat(new JsStatement[] { JsExpression.Assign(JsExpression.Identifier(_variables[temp].Name)' jsRight.Expression) })); " is 183.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCoalesce,The length of the statement  "				_additionalStatements.Add(JsStatement.If(_runtimeLibrary.ReferenceEquals(JsExpression.Identifier(_variables[temp].Name)' JsExpression.Null' this)' nullBlock' null)); " is 165.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileEventAddOrRemove,The length of the statement  "					return CompileMethodInvocation(isAdd ? impl.AddMethod : impl.RemoveMethod' accessor' target.TargetResult' new[] { value }' new[] { 0 }' target.IsVirtualCall); " is 158.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CanTypeBeFalsy,The length of the statement  "			return IsIntegerType(type) || type.IsKnownType(KnownTypeCode.Single) || type.IsKnownType(KnownTypeCode.Double) || type.IsKnownType(KnownTypeCode.Decimal) || type.IsKnownType(KnownTypeCode.Boolean) || type.IsKnownType(KnownTypeCode.String) // Numbers' boolean and string have falsy values that are not null... " is 308.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CanTypeBeFalsy,The length of the statement  "			    || type.IsKnownType(KnownTypeCode.Object) || type.IsKnownType(KnownTypeCode.ValueType) || type.IsKnownType(KnownTypeCode.Enum); // These reference types might contain types that have falsy values' so we need to be safe. " is 219.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileAndAlsoOrOrElse,The length of the statement  "				var ifBlock = JsStatement.Block(jsRight.AdditionalStatements.Concat(new JsStatement[] { JsExpression.Assign(JsExpression.Identifier(_variables[temp].Name)' jsRight.Expression) })); " is 180.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileAndAlsoOrOrElse,The length of the statement  "				return isAndAlso ? JsExpression.LogicalAnd(jsLeft' jsRight.Expression) : JsExpression.LogicalOr(jsLeft' jsRight.Expression); " is 124.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CanDoSimpleComparisonForEquals,The length of the statement  "				// in an expression such as myNullableInt == 3' an implicit nullable conversion is performed on the non-nullable value' but we can know for sure that it will never be null. " is 172.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "					// We can get away without cloning the first argument to the user-defined operator if the result is being overwritten (transfer ownership to the operator rather than cloning) " is 174.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "									Func<JsExpression' JsExpression' JsExpression> invocation = (a' b) => CompileMethodInvocation(impl' rr.UserDefinedOperatorMethod' new[] { _runtimeLibrary.InstantiateType(rr.UserDefinedOperatorMethod.DeclaringType' this)' returnValueIsImportant && returnValueBeforeChange ? MaybeCloneValueType(a' null' rr.Type) : a }' false); " is 325.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "									return CompileCompoundAssignment(rr.Operands[0]' null' null' invocation' returnValueIsImportant' rr.IsLiftedOperator' returnValueBeforeChange); " is 143.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "									return CompileUnaryOperator(rr.Operands[0]' a => CompileMethodInvocation(impl' rr.UserDefinedOperatorMethod' new[] { _runtimeLibrary.InstantiateType(rr.UserDefinedOperatorMethod.DeclaringType' this)' MaybeCloneValueType(a' rr.Operands[0]' rr.Operands[0].Type) }' false)' rr.IsLiftedOperator' LiftType.Regular); " is 310.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "							Func<JsExpression' JsExpression' JsExpression> invocation = (a' b) => CompileMethodInvocation(impl' rr.UserDefinedOperatorMethod' new[] { _runtimeLibrary.InstantiateType(rr.UserDefinedOperatorMethod.DeclaringType' this)' isAssignment ? a : MaybeCloneValueType(a' rr.Operands[0]' rr.Operands[0].Type)' MaybeCloneValueType(b' rr.Operands[1]' rr.Operands[1].Type) }' false); " is 371.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "								return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' invocation' returnValueIsImportant' rr.IsLiftedOperator); " is 128.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "								return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' invocation' rr.IsLiftedOperator' GetLiftType(rr.OperatorType)); " is 136.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "					_errorReporter.InternalError("Could not compile call to user-defined operator " + rr.UserDefinedOperatorMethod.DeclaringType.FullName + "." + rr.UserDefinedOperatorMethod.Name); " is 177.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "					return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.Assign' (a' b) => b' returnValueIsImportant' false' oldValueIsImportant: false); " is 158.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => CompileMethodInvocation(impl' combine' new[] { _runtimeLibrary.InstantiateType(del' this)' a' b }' false)' returnValueIsImportant' false); " is 219.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.AddAssign' JsExpression.Add' returnValueIsImportant' rr.IsLiftedOperator); " is 152.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseAnd(a' b)))' returnValueIsImportant' false); " is 193.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => _runtimeLibrary.LiftedBooleanAnd(a' b' this)' returnValueIsImportant' false); " is 158.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseAndAssign' JsExpression.BitwiseAnd' returnValueIsImportant' rr.IsLiftedOperator); " is 166.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => _runtimeLibrary.IntegerDivision(a' b' this)' returnValueIsImportant' rr.IsLiftedOperator); " is 171.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.DivideAssign' JsExpression.Divide' returnValueIsImportant' rr.IsLiftedOperator); " is 158.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseXor(a' b)))' returnValueIsImportant' false); " is 193.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => _runtimeLibrary.LiftedBooleanXor(a' b' this)' returnValueIsImportant' false); " is 158.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseXorAssign' JsExpression.BitwiseXor' returnValueIsImportant' rr.IsLiftedOperator); " is 166.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "					return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.LeftShiftAssign' JsExpression.LeftShift' returnValueIsImportant' rr.IsLiftedOperator); " is 164.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "					return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.ModuloAssign' JsExpression.Modulo' returnValueIsImportant' rr.IsLiftedOperator); " is 158.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "					return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.MultiplyAssign' JsExpression.Multiply' returnValueIsImportant' rr.IsLiftedOperator); " is 162.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseOr(a' b)))' returnValueIsImportant' false); " is 192.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => _runtimeLibrary.LiftedBooleanOr(a' b' this)' returnValueIsImportant' false); " is 157.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseOrAssign' JsExpression.BitwiseOr' returnValueIsImportant' rr.IsLiftedOperator); " is 164.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.RightShiftUnsignedAssign' JsExpression.RightShiftUnsigned' returnValueIsImportant' rr.IsLiftedOperator); " is 182.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.RightShiftSignedAssign' JsExpression.RightShiftSigned' returnValueIsImportant' rr.IsLiftedOperator); " is 178.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => CompileMethodInvocation(impl' remove' new[] { _runtimeLibrary.InstantiateType(del' this)' a' b }' false)' returnValueIsImportant' false); " is 218.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.SubtractAssign' JsExpression.Subtract' returnValueIsImportant' rr.IsLiftedOperator); " is 162.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "					return CompileCompoundAssignment(rr.Operands[0]' null' (a' b) => JsExpression.PrefixPlusPlus(a)' (a' b) => JsExpression.Add(a' JsExpression.Number(1))' returnValueIsImportant' rr.IsLiftedOperator); " is 197.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "					return CompileCompoundAssignment(rr.Operands[0]' null' (a' b) => JsExpression.PrefixMinusMinus(a)' (a' b) => JsExpression.Subtract(a' JsExpression.Number(1))' returnValueIsImportant' rr.IsLiftedOperator); " is 204.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "					return CompileCompoundAssignment(rr.Operands[0]' null' (a' b) => JsExpression.PostfixPlusPlus(a)' (a' b) => JsExpression.Add(a' JsExpression.Number(1))' returnValueIsImportant' rr.IsLiftedOperator' returnValueBeforeChange: true); " is 229.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "					return CompileCompoundAssignment(rr.Operands[0]' null' (a' b) => JsExpression.PostfixMinusMinus(a)' (a' b) => JsExpression.Subtract(a' JsExpression.Number(1))' returnValueIsImportant' rr.IsLiftedOperator' returnValueBeforeChange: true); " is 236.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => CompileMethodInvocation(impl' combine' new[] { _runtimeLibrary.InstantiateType(del' this)' a' b }' false)' false' LiftType.Regular); " is 215.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Add' rr.IsLiftedOperator' LiftType.Regular); " is 130.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseAnd(a' b)))' false' LiftType.Regular); " is 189.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => _runtimeLibrary.LiftedBooleanAnd(a' b' this)' false' LiftType.Regular);	// We have already lifted it' so it should not be lifted again. " is 218.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseAnd' rr.IsLiftedOperator' LiftType.Regular); " is 137.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => _runtimeLibrary.IntegerDivision(a' b' this)' rr.IsLiftedOperator' LiftType.Regular); " is 167.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Divide' rr.IsLiftedOperator' LiftType.Regular); " is 133.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseXor(a' b)))' false' LiftType.Regular); " is 189.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => _runtimeLibrary.LiftedBooleanXor(a' b' this)' false' LiftType.Regular);	// We have already lifted it' so it should not be lifted again. " is 218.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseXor' rr.IsLiftedOperator' LiftType.Regular); " is 137.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Greater' rr.IsLiftedOperator' LiftType.Comparison); " is 137.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.GreaterOrEqual' rr.IsLiftedOperator' LiftType.Comparison); " is 144.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => CanDoSimpleComparisonForEquals(rr.Operands[0]' rr.Operands[1]) ? JsExpression.Same(a' b) : _runtimeLibrary.ReferenceEquals(a' b' this)' false' LiftType.Equality); " is 245.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.LeftShift' rr.IsLiftedOperator' LiftType.Regular); " is 136.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Lesser' rr.IsLiftedOperator' LiftType.Comparison); " is 136.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.LesserOrEqual' rr.IsLiftedOperator' LiftType.Comparison); " is 143.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Modulo' rr.IsLiftedOperator' LiftType.Regular); " is 133.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Multiply' rr.IsLiftedOperator' LiftType.Regular); " is 135.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => CanDoSimpleComparisonForEquals(rr.Operands[0]' rr.Operands[1]) ? JsExpression.NotSame(a' b) : _runtimeLibrary.ReferenceNotEquals(a' b' this)' false' LiftType.Inequality); " is 253.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseOr(a' b)))' false' LiftType.Regular); " is 188.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => _runtimeLibrary.LiftedBooleanOr(a' b' this)' false' LiftType.Regular);	// We have already lifted it' so it should not be lifted again. " is 217.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseOr' rr.IsLiftedOperator' LiftType.Regular); " is 136.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "					var origType = rr.Operands[0] is ConversionResolveResult && rr.Operands[0].GetType().Name != "CastResolveResult" ? ((ConversionResolveResult)rr.Operands[0]).Input.Type : rr.Operands[0].Type; " is 190.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.RightShiftUnsigned' rr.IsLiftedOperator' LiftType.Regular); " is 145.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.RightShiftSigned' rr.IsLiftedOperator' LiftType.Regular); " is 143.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => CompileMethodInvocation(impl' remove' new[] { _runtimeLibrary.InstantiateType(del' this)' a' b }' false)' false' LiftType.Regular); " is 214.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The length of the statement  "						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Subtract' rr.IsLiftedOperator' LiftType.Regular); " is 135.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileDelegateCombineCall,The length of the statement  "			var thisAndArguments = (combine.IsStatic ? new[] { _runtimeLibrary.InstantiateType(del' this)' a' b } : new[] { a' b }); " is 120.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitMethodGroupResolveResult,The length of the statement  "			_errorReporter.InternalError("MethodGroupResolveResult should always be the target of a method group conversion' and is handled there"); " is 136.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitLambdaResolveResult,The length of the statement  "			_errorReporter.InternalError("LambdaResolveResult should always be the target of an anonymous method conversion' and is handled there"); " is 136.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitMemberResolveResult,The length of the statement  "						return CompileMethodInvocation(impl.GetMethod' getter' rr.TargetResult' new ResolveResult[0]' new int[0]' rr.IsVirtualCall);	// We know we have no arguments because indexers are treated as invocations. " is 201.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitMemberResolveResult,The length of the statement  "						return JsExpression.Member(rr.Member.IsStatic ? _runtimeLibrary.InstantiateType(rr.Member.DeclaringType' this) : InnerCompile(rr.TargetResult' false)' impl.FieldName); " is 167.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitMemberResolveResult,The length of the statement  "						return JsExpression.Member(rr.Member.IsStatic ? _runtimeLibrary.InstantiateType(rr.Member.DeclaringType' this) : InnerCompile(rr.TargetResult' false' returnMultidimArrayValueByReference: true)' impl.Name); " is 205.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitMemberResolveResult,The length of the statement  "				return JsExpression.Member(rr.Member.IsStatic ? _runtimeLibrary.InstantiateType(rr.Member.DeclaringType' this) : InnerCompile(rr.TargetResult' true' returnMultidimArrayValueByReference: true)' fname); " is 200.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CreateInlineCodeExpressionToOrderMap,The length of the statement  "			var dict = Enumerable.Range(-1' argumentCount + 1).OrderBy(x => FindIndexInTokens(tokens' x)).Select((i' n) => new { i' n }).ToDictionary(x => x.i' x => x.n); " is 158.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileThisAndArgumentListForMethodCall,The length of the statement  "					else if (tokens != null && tokens.Count( t => t.Type == InlineCodeToken.TokenType.LiteralStringParameterToUseAsIdentifier && t.Index == i) > 0) { " is 145.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileThisAndArgumentListForMethodCall,The length of the statement  "			var expressionToOrderMap = tokens == null ? new[] { 0 }.Concat(argumentToParameterMap.Select(x => x + 1)).ToList() : CreateInlineCodeExpressionToOrderMap(tokens' argumentsForCall.Count' argumentToParameterMap); " is 210.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileThisAndArgumentListForMethodCall,The length of the statement  "				var haveToBeEvaluatedBefore = Enumerable.Range(i + 1' expressions.Count - i - 1).Where(x => expressionToOrderMap[x] < expressionToOrderMap[i]); " is 143.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileThisAndArgumentListForMethodCall,The length of the statement  "			if ((argumentToParameterMap.Count != argumentsForCall.Count || argumentToParameterMap.Select((i' n) => new { i' n }).Any(t => t.i != t.n))) {	// If we have an argument to parameter map and it actually performs any reordering.			// Ensure that expressions are evaluated left-to-right in case arguments are reordered " is 314.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileThisAndArgumentListForMethodCall,The length of the statement  "					newExpressions.Add(specifiedIndex != -1 ? expressions[specifiedIndex + 1] : VisitResolveResult(argumentsForCall[i]' true));	// If the argument was not specified' use the value in argumentsForCall' which has to be constant. " is 222.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileThisAndArgumentListForMethodCall,The length of the statement  "				expressions[i] = MaybeCloneValueType(expressions[i]' argumentsForCall[i - 1]' member.Parameters[Math.Min(i - 1' member.Parameters.Count - 1)].Type);	// Math.Min() because the last parameter might be an expanded param array. " is 223.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileMethodInvocation,The length of the statement  "			bool isParamArrayExpanded = argumentsForCall.Count > 0 && argumentsForCall[argumentsForCall.Count - 1] is ArrayCreateResolveResult; " is 131.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileMethodInvocation,The length of the statement  "			bool targetUsedMultipleTimes = sem != null && ((!sem.IgnoreGenericArguments && method.TypeParameters.Count > 0) || (sem.ExpandParams && !isParamArrayExpanded)); " is 160.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileMethodInvocation,The length of the statement  "			var jsTarget = method.IsStatic ? _runtimeLibrary.InstantiateType(method.DeclaringType' this) : InnerCompile(targetResult' targetUsedMultipleTimes' returnMultidimArrayValueByReference: true); " is 190.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileMethodInvocation,The length of the statement  "			var thisAndArguments = CompileThisAndArgumentListForMethodCall(method' literalCode' jsTarget' false' argumentsForCall' argumentToParameterMap); " is 143.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileConstructorInvocationWithPotentialExpandParams,The length of the statement  "					var args = arguments.Take(arguments.Count - 1).Concat(((JsArrayLiteralExpression)arguments[arguments.Count - 1]).Elements); " is 123.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileConstructorInvocationWithPotentialExpandParams,The length of the statement  "					return _runtimeLibrary.ApplyConstructor(constructor' arguments.Count == 1 ? arguments[0] : JsExpression.Invocation(JsExpression.Member(JsExpression.ArrayLiteral(arguments.Take(arguments.Count - 1))' "concat")' arguments[arguments.Count - 1])' this); " is 249.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileMethodInvocationWithPotentialExpandParams,The length of the statement  "					var args = thisAndArguments.Take(thisAndArguments.Count - 1).Concat(((JsArrayLiteralExpression)thisAndArguments[thisAndArguments.Count - 1]).Elements); " is 151.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileMethodInvocationWithPotentialExpandParams,The length of the statement  "					return needCall ? JsExpression.Invocation(JsExpression.Member(method' "call")' args) : JsExpression.Invocation(method' args.Skip(1)); " is 133.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileMethodInvocationWithPotentialExpandParams,The length of the statement  "					return JsExpression.Invocation(JsExpression.Member(method' "apply")' thisAndArguments[0]' thisAndArguments.Count == 2 ? thisAndArguments[1] : JsExpression.Invocation(JsExpression.Member(JsExpression.ArrayLiteral(thisAndArguments.Skip(1).Take(thisAndArguments.Count - 2))' "concat")' thisAndArguments[thisAndArguments.Count - 1])); " is 330.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileMethodInvocationWithPotentialExpandParams,The length of the statement  "				return needCall ? JsExpression.Invocation(JsExpression.Member(method' "call")' thisAndArguments) : JsExpression.Invocation(method' thisAndArguments.Skip(1)); " is 157.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileMethodInvocation,The length of the statement  "			var typeArguments = (method is SpecializedMethod ? ((SpecializedMethod)method).TypeArguments : EmptyList<IType>.Instance); " is 122.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileMethodInvocation,The length of the statement  "							return CompileMethodInvocationWithPotentialExpandParams(thisAndArguments' _runtimeLibrary.InstantiateGenericMethod(jsMethod' typeArguments' this)' impl.ExpandParams' true); " is 172.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileMethodInvocation,The length of the statement  "						return CompileMethodInvocationWithPotentialExpandParams(thisAndArguments' _runtimeLibrary.InstantiateGenericMethod(jsMethod' typeArguments' this)' impl.ExpandParams' true); " is 172.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileMethodInvocation,The length of the statement  "					return CompileInlineCodeMethodInvocation(method' GetActualInlineCode(impl' isNonVirtualInvocationOfVirtualMethod' thisAndArguments[thisAndArguments.Count - 1] is JsArrayLiteralExpression)' method.IsStatic ? null : thisAndArguments[0]' thisAndArguments.Skip(1).ToList()); " is 270.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileInlineCodeMethodInvocation,The length of the statement  "			if (tokens.Any(t => t.Type == InlineCodeToken.TokenType.Parameter && t.IsExpandedParamArray) && !(arguments[arguments.Count - 1] is JsArrayLiteralExpression)) { " is 160.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileInlineCodeMethodInvocation,The length of the statement  "				_errorReporter.Message(Messages._7525' string.Format("The {0} can only be invoked with its params parameter expanded"' method.IsConstructor ? "constructor " + method.DeclaringType.FullName : ("method " + method.FullName))); " is 223.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileInlineCodeMethodInvocation,The length of the statement  "				_additionalStatements.AddRange(InlineCodeMethodCompiler.CompileStatementListInlineCodeMethodInvocation(method' tokens' @this' arguments' ResolveTypeForInlineCode' t => _runtimeLibrary.InstantiateTypeForUseAsTypeArgumentInInlineCode(t' this)' s => _errorReporter.Message(Messages._7525' s))); " is 291.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileInlineCodeMethodInvocation,The length of the statement  "				return InlineCodeMethodCompiler.CompileExpressionInlineCodeMethodInvocation(method' tokens' @this' arguments' ResolveTypeForInlineCode' t => _runtimeLibrary.InstantiateTypeForUseAsTypeArgumentInInlineCode(t' this)' s => _errorReporter.Message(Messages._7525' s)); " is 263.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileJsonConstructorCall,The length of the statement  "				if (orr != null && orr.OperatorType == ExpressionType.Assign && orr.Operands[0] is MemberResolveResult && ((MemberResolveResult)orr.Operands[0]).TargetResult is InitializedObjectResolveResult) { " is 194.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileConstructorInvocation,The length of the statement  "			if (typeToConstructDef != null && _metadataImporter.GetTypeSemantics(typeToConstructDef).Type == TypeScriptSemantics.ImplType.NotUsableFromScript) { " is 148.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileConstructorInvocation,The length of the statement  "				var errors = Utils.FindGenericInstantiationErrors(((ParameterizedType)typeToConstruct).TypeArguments' _metadataImporter); " is 121.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileConstructorInvocation,The length of the statement  "				string literalCode = GetActualInlineCode(impl' argumentsForCall.Count > 0 && argumentsForCall[argumentsForCall.Count - 1] is ArrayCreateResolveResult); " is 151.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileConstructorInvocation,The length of the statement  "				var thisAndArguments = CompileThisAndArgumentListForMethodCall(method' literalCode' _runtimeLibrary.InstantiateType(method.DeclaringType' this)' false' argumentsForCall' argumentToParameterMap); " is 194.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileConstructorInvocation,The length of the statement  "						constructorCall = CompileConstructorInvocationWithPotentialExpandParams(thisAndArguments.Skip(1).ToList()' thisAndArguments[0]' impl.ExpandParams); " is 147.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileConstructorInvocation,The length of the statement  "						constructorCall = CompileConstructorInvocationWithPotentialExpandParams(thisAndArguments.Skip(1).ToList()' JsExpression.Member(thisAndArguments[0]' impl.Name)' impl.ExpandParams); " is 179.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileConstructorInvocation,The length of the statement  "						constructorCall = CompileMethodInvocationWithPotentialExpandParams(new[] { JsExpression.Null }.Concat(thisAndArguments.Skip(1)).ToList()' JsExpression.Member(thisAndArguments[0]' impl.Name)' impl.ExpandParams' false); " is 217.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,HandleInvocation,The length of the statement  "					var thisAndArguments = CompileThisAndArgumentListForMethodCall(member' null' InnerCompile(targetResult' usedMultipleTimes: false' returnMultidimArrayValueByReference: true)' false' argumentsForCall' argumentToParameterMap); " is 223.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,HandleInvocation,The length of the statement  "							var createInstance = activator.GetMethods(m => m.Name == "CreateInstance" && m.IsStatic && m.TypeParameters.Count == 1 && m.Parameters.Count == 0).Single(); " is 156.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,HandleInvocation,The length of the statement  "							var createInstanceSpec = new SpecializedMethod(createInstance' new TypeParameterSubstitution(EmptyList<IType>.Instance' new[] { method.DeclaringType })); " is 153.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,HandleInvocation,The length of the statement  "							var createdObject = CompileMethodInvocation(_metadataImporter.GetMethodSemantics(createInstanceSpec)' createInstanceSpec' new[] { _runtimeLibrary.InstantiateType(activator' this) }' false); " is 189.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,HandleInvocation,The length of the statement  "							return CompileConstructorInvocation(_metadataImporter.GetConstructorSemantics(method)' method' argumentsForCall' argumentToParameterMap' initializerStatements); " is 160.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,HandleInvocation,The length of the statement  "						return CompileMethodInvocation(_metadataImporter.GetMethodSemantics(method)' method' targetResult' argumentsForCall' argumentToParameterMap' isVirtualCall); " is 156.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,HandleInvocation,The length of the statement  "				return CompileMethodInvocation(impl.GetMethod' property.Getter' targetResult' argumentsForCall' argumentToParameterMap' isVirtualCall); " is 135.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitCSharpInvocationResolveResult,The length of the statement  "			return HandleInvocation(rr.Member' rr.TargetResult' rr.GetArgumentsForCall()' rr.GetArgumentToParameterMap()' rr.InitializerStatements' rr.IsVirtualCall); " is 154.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileLambda,The length of the statement  "				capturedByRefVariables.RemoveAll(v => !allParents.Any(p => p.DirectlyDeclaredVariables.Contains(v)));	// Remove used byref variables that were declared in this method or any nested method. " is 188.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileLambda,The length of the statement  "				def = _createInnerCompiler(newContext).CompileMethod(rr.Parameters' _variables' (BlockStatement)f.BodyNode' false' semantics.ExpandParams' smt' taskGenericArgument); " is 165.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileLambda,The length of the statement  "				def = _createInnerCompiler(newContext).CompileMethod(rr.Parameters' _variables' (ICSharpCode.NRefactory.CSharp.Expression)f.BodyNode' lambdaReturnType' false' semantics.ExpandParams' smt' taskGenericArgument); " is 209.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileLambda,The length of the statement  "				var toCapture = newContext.CapturedByRefVariables.Select(v => new JsObjectLiteralProperty(_variables[v].Name' CompileLocal(v' true))).ToList(); " is 143.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileLocal,The length of the statement  "				           ? (JsExpression)JsExpression.Member(JsExpression.This' data.Name)	// If using a captured by-ref variable' we access it using this.name.$ " is 136.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitArrayCreateResolveResult,The length of the statement  "						_additionalStatements.Add(_runtimeLibrary.SetMultiDimensionalArrayValue(result' indices' MaybeCloneValueType(expressions[i]' rr.InitializerElements[i]' at.ElementType)' this)); " is 176.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,PerformConversion,The length of the statement  "				else if (toType.Kind == TypeKind.Delegate && fromType.Kind == TypeKind.Delegate && !toType.Equals(_compilation.FindType(KnownTypeCode.MulticastDelegate)) && !fromType.Equals(_compilation.FindType(KnownTypeCode.MulticastDelegate))) " is 230.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,PerformConversion,The length of the statement  "				// Conversion between type parameters are classified as boxing conversions' so it's sometimes an upcast' sometimes a downcast. " is 126.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,PerformConversion,The length of the statement  "						result = _runtimeLibrary.FromNullable(result' this);	// hidden gem in the C# spec: conversions involving type parameter which are not known to not be unboxing are considered unboxing conversions. " is 195.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,PerformConversion,The length of the statement  "				var result = CompileMethodInvocation(impl' c.Method' new[] { _runtimeLibrary.InstantiateType(c.Method.DeclaringType' this)' input }' false); " is 140.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,PerformMethodGroupConversionOnNormalMethod,The length of the statement  "			var typeArguments = (method is SpecializedMethod && !methodSemantics.IgnoreGenericArguments) ? ((SpecializedMethod)method).TypeArguments : new List<IType>(); " is 157.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,PerformMethodGroupConversionOnNormalMethod,The length of the statement  "					body = JsExpression.Invocation(JsExpression.Member(JsExpression.Member(_runtimeLibrary.InstantiateType(method.DeclaringType' this)' methodSemantics.Name)' "apply")' JsExpression.Null' JsExpression.Invocation(JsExpression.Member(JsExpression.ArrayLiteral(jsTarget)' "concat")' JsExpression.Invocation(JsExpression.Member(JsExpression.Member(JsExpression.Member(JsExpression.Identifier("Array")' "prototype")' "slice")' "call")' JsExpression.Identifier("arguments")))); " is 467.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,PerformMethodGroupConversionOnNormalMethod,The length of the statement  "					body = CompileMethodInvocation(methodSemantics' method' new[] { _runtimeLibrary.InstantiateType(method.DeclaringType' this)' jsTarget }.Concat(parameters.Select(JsExpression.Identifier)).ToList()' false); " is 204.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,PerformMethodGroupConversionOnNormalMethod,The length of the statement  "				result = JsExpression.FunctionDefinition(parameters' method.ReturnType.IsKnownType(KnownTypeCode.Void) ? (JsStatement)body : JsStatement.Return(body)); " is 151.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,PerformMethodGroupConversionOnInlineCodeMethod,The length of the statement  "			string code = isBaseCall ? methodSemantics.NonVirtualInvocationLiteralCode : methodSemantics.NonExpandedFormLiteralCode; " is 120.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,PerformMethodGroupConversionOnInlineCodeMethod,The length of the statement  "			var parameters = new string[method.Parameters.Count - (delegateSemantics.ExpandParams ? 1 : 0) - (isExtensionMethodGroupConversion ? 1 : 0)]; " is 141.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,PerformMethodGroupConversionOnInlineCodeMethod,The length of the statement  "			var jsTarget = method.IsStatic && !isExtensionMethodGroupConversion ? JsExpression.Null : InnerCompile(target' tokens.Count(t => t.Type == InlineCodeToken.TokenType.This) > 1); " is 176.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,PerformMethodGroupConversionOnInlineCodeMethod,The length of the statement  "				arguments.Add(JsExpression.Invocation(JsExpression.Member(JsExpression.Member(JsExpression.Member(JsExpression.Identifier("Array")' "prototype")' "slice")' "call")' JsExpression.Identifier("arguments")' JsExpression.Number(parameters.Length))); " is 244.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,PerformMethodGroupConversionOnStaticMethodWithThisAsFirstArgument,The length of the statement  "				var body = JsExpression.Invocation(JsExpression.Member(JsExpression.Member(_runtimeLibrary.InstantiateType(method.DeclaringType' this)' methodSemantics.Name)' "apply")' JsExpression.Null' JsExpression.Invocation(JsExpression.Member(JsExpression.ArrayLiteral(JsExpression.This)' "concat")' JsExpression.Invocation(JsExpression.Member(JsExpression.Member(JsExpression.Member(JsExpression.Identifier("Array")' "prototype")' "slice")' "call")' JsExpression.Identifier("arguments")))); " is 480.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,PerformMethodGroupConversionOnStaticMethodWithThisAsFirstArgument,The length of the statement  "				result = JsExpression.FunctionDefinition(new string[0]' method.ReturnType.IsKnownType(KnownTypeCode.Void) ? (JsStatement)body : JsStatement.Return(body)); " is 154.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,PerformMethodGroupConversionOnStaticMethodWithThisAsFirstArgument,The length of the statement  "				var body = JsExpression.Invocation(JsExpression.Member(_runtimeLibrary.InstantiateType(method.DeclaringType' this)' methodSemantics.Name)' new[] { JsExpression.This }.Concat(parameters.Select(p => (JsExpression)JsExpression.Identifier(p)))); " is 241.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,PerformMethodGroupConversionOnStaticMethodWithThisAsFirstArgument,The length of the statement  "				result = JsExpression.FunctionDefinition(parameters' method.ReturnType.IsKnownType(KnownTypeCode.Void) ? (JsStatement)body : JsStatement.Return(body)); " is 151.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitConversionResolveResult,The length of the statement  "					                                         var e = c.CompileMethodInvocation(_metadataImporter.GetMethodSemantics(m)' m' new[] { m.IsStatic ? _runtimeLibrary.InstantiateType(m.DeclaringType' this) : t }.Concat(a).ToList()' false); " is 187.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitConversionResolveResult,The length of the statement  "					return CompileLambda((LambdaResolveResult)rr.Input' retType' _metadataImporter.GetDelegateSemantics(rr.Type.GetDefinition())); " is 126.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitConversionResolveResult,The length of the statement  "				if (mgrr.TargetResult.Type.Kind == TypeKind.Delegate && Equals(rr.Conversion.Method' mgrr.TargetResult.Type.GetDelegateInvokeMethod())) { " is 137.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitConversionResolveResult,The length of the statement  "					return _runtimeLibrary.CloneDelegate(InnerCompile(mgrr.TargetResult' false)' rr.Conversion.Method.DeclaringType' rr.Type' this);	// new D2(d1) " is 142.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitConversionResolveResult,The length of the statement  "						return PerformMethodGroupConversionOnNormalMethod(rr.Conversion.Method' rr.Type' rr.Conversion.Method.IsOverridable && !rr.Conversion.IsVirtualMethodLookup' rr.Conversion.Method.IsStatic && rr.Conversion.DelegateCapturesFirstArgument' mgrr.TargetResult' methodSemantics' delegateSemantics); " is 290.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitConversionResolveResult,The length of the statement  "						return PerformMethodGroupConversionOnInlineCodeMethod(rr.Conversion.Method' rr.Type' rr.Conversion.Method.IsOverridable && !rr.Conversion.IsVirtualMethodLookup' rr.Conversion.Method.IsStatic && rr.Conversion.DelegateCapturesFirstArgument' mgrr.TargetResult' methodSemantics' delegateSemantics); " is 294.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitConversionResolveResult,The length of the statement  "						return PerformMethodGroupConversionOnStaticMethodWithThisAsFirstArgument(rr.Conversion.Method' rr.Type' rr.Conversion.Method.IsOverridable && !rr.Conversion.IsVirtualMethodLookup' mgrr.TargetResult' methodSemantics' delegateSemantics); " is 235.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitDynamicInvocationResolveResult,The length of the statement  "					var target = mgrr.TargetResult is TypeResolveResult ? _runtimeLibrary.InstantiateType(mgrr.TargetResult.Type' this) : InnerCompile(mgrr.TargetResult' false); " is 157.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitAwaitResolveResult,The length of the statement  "			if (rr.GetAwaiterInvocation is DynamicInvocationResolveResult && ((DynamicInvocationResolveResult)rr.GetAwaiterInvocation).Target is DynamicMemberResolveResult) { " is 162.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitSizeOfResolveResult,The length of the statement  "				// This is an internal error because AFAIK' using sizeof() with anything that doesn't return a compile-time constant (with our enum extensions) can only be done in an unsafe context. " is 182.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionOrderer,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionOrderer.cs,DoesOrderMatter,The length of the statement  "			// The algorithm is rather simple and conservative: For the both expression (sequences)' determine a) which locals are read' b) which locals are written' and c) whether can possibly read or write any external state. " is 215.
Long Statement,Saltarelle.Compiler.Compiler,ExpressionOrderer,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionOrderer.cs,DoesOrderMatter,The length of the statement  "			if (v1.Result.LocalReadSet.Overlaps(v2.Result.LocalWriteSet) || v1.Result.LocalWriteSet.Overlaps(v2.Result.LocalReadSet)) " is 121.
Long Statement,Saltarelle.Compiler.Compiler,FindObservableStateVisitor,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionOrderer.cs,VisitIdentifierExpression,The length of the statement  "				Result.LocalReadSet.Add(expression.Name);	// It has to be a read since we don't call Visit() for the target of an assignment. " is 125.
Long Statement,Saltarelle.Compiler.Compiler,FindObservableStateVisitor,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionOrderer.cs,VisitMemberAccessExpression,The length of the statement  "				Result.UsesExternalState = true;	// Member access has to count as external state. Otherwise' what if someone does "var a = this" and then tries to order "a.i" and "this.i" (aliasing) " is 182.
Long Statement,Saltarelle.Compiler.Compiler,FindObservableStateVisitor,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionOrderer.cs,VisitUnaryExpression,The length of the statement  "							return base.VisitExpression(expression.Operand' data);	// Increments/decrements something that is not a local. This is external state. " is 134.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,StateMachineRewriteNormalMethod,The length of the statement  "			                                                    () => { var result = _namer.GetVariableName(null' _usedVariableNames); _usedVariableNames.Add(result); return result; }' " is 120.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,StateMachineRewriteNormalMethod,The length of the statement  "			                                                    () => { var result = _namer.GetVariableName(_namer.StateVariableDesiredName' _usedVariableNames); _usedVariableNames.Add(result); return result; }' " is 147.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,StateMachineRewriteNormalMethod,The length of the statement  "			return ReferenceEquals(body' function.Body) ? function : JsExpression.FunctionDefinition(function.ParameterNames' body' function.Name); " is 135.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,StateMachineRewriteIteratorBlock,The length of the statement  "			                                                     () => { var result = _namer.GetVariableName(null' _usedVariableNames); _usedVariableNames.Add(result); return result; }' " is 120.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,StateMachineRewriteIteratorBlock,The length of the statement  "			                                                     () => { var result = _namer.GetVariableName(_namer.StateVariableDesiredName' _usedVariableNames); _usedVariableNames.Add(result); return result; }' " is 147.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,StateMachineRewriteIteratorBlock,The length of the statement  "			                                                     () => { var result = _namer.GetVariableName(_namer.FinallyHandlerDesiredName' _usedVariableNames); _usedVariableNames.Add(result); return result; }' " is 148.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,StateMachineRewriteAsyncMethod,The length of the statement  "			string doFinallyBlocksVariable = _namer.GetVariableName(_namer.AsyncDoFinallyBlocksVariableDesiredName' _usedVariableNames); " is 124.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,StateMachineRewriteAsyncMethod,The length of the statement  "				taskCompletionSourceVariable = _namer.GetVariableName(_namer.AsyncTaskCompletionSourceVariableDesiredName' _usedVariableNames); " is 127.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,StateMachineRewriteAsyncMethod,The length of the statement  "			                                                   () => { var result = _namer.GetVariableName(null' _usedVariableNames); _usedVariableNames.Add(result); return result; }' " is 120.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,StateMachineRewriteAsyncMethod,The length of the statement  "			                                                   () => { var result = _namer.GetVariableName(_namer.StateVariableDesiredName' _usedVariableNames); _usedVariableNames.Add(result); return result; }' " is 147.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,StateMachineRewriteAsyncMethod,The length of the statement  "			                                                   taskCompletionSourceVariable != null ? JsStatement.Declaration(taskCompletionSourceVariable' _runtimeLibrary.CreateTaskCompletionSource(taskGenericArgument' this)) : null' " is 171.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,StateMachineRewriteAsyncMethod,The length of the statement  "			                                                   taskCompletionSourceVariable != null ? expr => _runtimeLibrary.SetAsyncResult(JsExpression.Identifier(taskCompletionSourceVariable)' expr' this) : (Func<JsExpression' JsExpression>)null' " is 186.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,StateMachineRewriteAsyncMethod,The length of the statement  "			                                                   taskCompletionSourceVariable != null ? expr => _runtimeLibrary.SetAsyncException(JsExpression.Identifier(taskCompletionSourceVariable)' expr' this) : (Func<JsExpression' JsExpression>)null' " is 189.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,StateMachineRewriteAsyncMethod,The length of the statement  "			                                                   taskCompletionSourceVariable != null ? () => _runtimeLibrary.GetTaskFromTaskCompletionSource(JsExpression.Identifier(taskCompletionSourceVariable)' this) : (Func<JsExpression>)null' " is 181.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,StateMachineRewriteAsyncMethod,The length of the statement  "			return ReferenceEquals(body' function.Body) ? function : JsExpression.FunctionDefinition(function.ParameterNames' body' function.Name); " is 135.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,CompileMethod,The length of the statement  "			return CompileMethod(parameters' variables' staticMethodWithThisAsFirstArgument' expandParams' stateMachineType' iteratorBlockYieldTypeOrAsyncTaskGenericArgument' () => VisitChildren(body)); " is 190.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,CompileMethod,The length of the statement  "			return CompileMethod(parameters' variables' staticMethodWithThisAsFirstArgument' expandParams' stateMachineType' iteratorBlockYieldTypeOrAsyncTaskGenericArgument' () => { " is 170.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,CompileMethod,The length of the statement  "					else if (compiled.Expression.NodeType != ExpressionNodeType.Null)	// The statement "null;" is illegal in C#' so it must have appeared because there was no suitable expression to return. " is 185.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,CompileMethod,The length of the statement  "				_result = MethodCompiler.PrepareParameters(parameters' variables' expandParams: expandParams' staticMethodWithThisAsFirstArgument: staticMethodWithThisAsFirstArgument); " is 168.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,CompileMethod,The length of the statement  "				var result = JsExpression.FunctionDefinition((staticMethodWithThisAsFirstArgument ? new[] { _namer.ThisAlias } : new string[0]).Concat(parameters.Where((p' i) => i != parameters.Count - 1 || !expandParams).Select(p => variables[p].Name))' jsbody); " is 247.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,CompileMethod,The length of the statement  "						result = StateMachineRewriteIteratorBlock(result' stateMachineType == StateMachineType.IteratorBlockReturningIEnumerable' iteratorBlockYieldTypeOrAsyncTaskGenericArgument); " is 172.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,CompileMethod,The length of the statement  "						result = StateMachineRewriteAsyncMethod(result' stateMachineType == StateMachineType.AsyncTask' iteratorBlockYieldTypeOrAsyncTaskGenericArgument); " is 146.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,CompileConstructorInitializer,The length of the statement  "					_errorReporter.Message(Messages._7998' initializer.ConstructorInitializerType == ConstructorInitializerType.Base ? "dynamic invocation of base constructor" : "dynamic constructor chaining"); " is 190.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,CompileConstructorInitializer,The length of the statement  "					return _expressionCompiler.CompileConstructorInitializer((IMethod)csirr.Member' csirr.GetArgumentsForCall()' csirr.GetArgumentToParameterMap()' csirr.InitializerStatements' currentIsStaticMethod); " is 196.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,CompileImplicitBaseConstructorCall,The length of the statement  "				return _expressionCompiler.CompileConstructorInitializer(ctor' arguments' null' new ResolveResult[0]' currentIsStaticMethod); " is 125.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,CompileDefaultFieldInitializer,The length of the statement  "				var expr = _runtimeLibrary.InitializeField(jsThis' scriptName' member' _runtimeLibrary.Default(member.ReturnType' this)' this); " is 127.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,CreateInnerCompiler,The length of the statement  "			return new StatementCompiler(_metadataImporter' _namer' _errorReporter' _compilation' _resolver' _variables' _nestedFunctions' _runtimeLibrary' _thisAlias' _usedVariableNames' _nestedFunctionContext' _methodBeingCompiled' _typeBeingCompiled' _expressionCompiler' _nextLabelIndex' _currentVariableForRethrow' _currentGotoCaseMap); " is 329.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,ResolveTypeParameter,The length of the statement  "			return Utils.ResolveTypeParameter(tp' _typeBeingCompiled' _methodBeingCompiled' _metadataImporter' _errorReporter' _namer); " is 123.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,EnsureCanBeEvaluatedMultipleTimes,The length of the statement  "			return Utils.EnsureCanBeEvaluatedMultipleTimes(_result' expression' expressionsThatMustBeEvaluatedBefore' () => { var temp = CreateTemporaryVariable(SpecialType.UnknownType' DomRegion.Empty); return _variables[temp].Name; }); " is 225.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitComment,The length of the statement  "					List<string> commentLines = comment.Content.Replace("\r"' "").Split('\n').Select(item => item.Trim()).SkipWhile(l => l == "").ToList(); " is 135.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitComment,The length of the statement  "						_result.Add(JsStatement.Comment(string.Join(Environment.NewLine' commentLines.Select(item => prefix + item))));	// Replace the space at the start of each line with the same as the space in the first line. " is 204.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitVariableDeclarationStatement,The length of the statement  "					var exprCompileResult = CompileExpression(d.Initializer' CompileExpressionFlags.ReturnValueIsImportant | CompileExpressionFlags.IsAssignmentSource); " is 148.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitVariableDeclarationStatement,The length of the statement  "					jsInitializer = (data.UseByRefSemantics ? JsExpression.ObjectLiteral(new[] { new JsObjectLiteralProperty("$"' exprCompileResult.Expression) }) : exprCompileResult.Expression); " is 175.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,IsInvocationOfRemovedMethod,The length of the statement  "				if (irr.IsConditionallyRemoved || (irr.Member is IMethod && IsPartialMethodDeclaration((IMethod)irr.Member))) {	// This test is OK according to https://github.com/icsharpcode/NRefactory/issues/12 " is 195.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,IsInvocationOfRemovedMethod,The length of the statement  "					// Invocation of a partial method without definition - remove (yes' I too feel the arguments should be evaluated but the spec says no. " is 134.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitExpressionStatement,The length of the statement  "			if (compiled.Expression.NodeType != ExpressionNodeType.Null)	// The statement "null;" is illegal in C#' so it must have appeared because there was no suitable expression to return. " is 180.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitForStatement,The length of the statement  "					// The condition requires additional statements. Transform "for (int i = 0; i < (SomeProperty = 1); i++) { ... }" to "for (var i = 0;; i++) { this.set_SomeProperty(1); if (!(i < 1)) { break; } ... } " is 198.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitForStatement,The length of the statement  "				var compiledIterators = forStatement.Iterators.Select(i => CompileExpression(((ExpressionStatement)i).Expression' CompileExpressionFlags.None)).ToList(); " is 153.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitForStatement,The length of the statement  "					iterator = compiledIterators.Aggregate(iterator' (current' i) => (current != null ? JsExpression.Comma(current' i.Expression) : i.Expression)); " is 143.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitForStatement,The length of the statement  "					// At least one of the compiled iterators need additional statements. We could add the last expressions that don't need extra statements to the iterators section of the for loop' but for simplicity we'll just add everything to the end of the loop. " is 247.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitForStatement,The length of the statement  "				body = JsStatement.Block(((IEnumerable<JsStatement>)preBody ?? new JsStatement[0]).Concat(body.Statements).Concat((IEnumerable<JsStatement>)postBody ?? new JsStatement[0])); " is 173.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitIfElseStatement,The length of the statement  "			_result.Add(JsStatement.If(compiledCond.Expression' CreateInnerCompiler().Compile(ifElseStatement.TrueStatement)' !ifElseStatement.FalseStatement.IsNull ? CreateInnerCompiler().Compile(ifElseStatement.FalseStatement) : null)); " is 226.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitWhileStatement,The length of the statement  "				// The condition requires additional statements. Transform "while ((SomeProperty = 1) < 0) { ... }" to "while (true) { this.set_SomeProperty(1); if (!(i < 1)) { break; } ... } " is 175.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitReturnStatement,The length of the statement  "				var expr = CompileExpression(returnStatement.Expression' CompileExpressionFlags.ReturnValueIsImportant | CompileExpressionFlags.IsAssignmentSource); " is 148.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitForeachStatement,The length of the statement  "			var getEnumeratorMethod = (ferr.GetEnumeratorCall is InvocationResolveResult ? ((InvocationResolveResult)ferr.GetEnumeratorCall).Member as IMethod : null); " is 155.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitForeachStatement,The length of the statement  "			if (Equals(inExpression.Type' systemArray) || inExpression.Type.DirectBaseTypes.Contains(systemArray) || (getEnumeratorMethod != null && _metadataImporter.GetMethodSemantics(getEnumeratorMethod).EnumerateAsArray)) { " is 215.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitForeachStatement,The length of the statement  "				var moveNextInvocation = _expressionCompiler.Compile(new CSharpInvocationResolveResult(new LocalResolveResult(enumerator)' ferr.MoveNextMethod' new ResolveResult[0])' true); " is 173.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitForeachStatement,The length of the statement  "				var getCurrent = _expressionCompiler.Compile(new MemberResolveResult(new LocalResolveResult(enumerator)' ferr.CurrentProperty)' true); " is 134.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitForeachStatement,The length of the statement  "				var preBody = getCurrent.AdditionalStatements.Concat(new[] { JsStatement.Var(_variables[iterator.Variable].Name' getCurrentValue) }).ToList(); " is 142.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitForeachStatement,The length of the statement  "					var compileResult = _expressionCompiler.Compile(new CSharpInvocationResolveResult(new ConversionResolveResult(systemIDisposable' new LocalResolveResult(enumerator)' disposableConversion)' disposeMethod' new ResolveResult[0])' false); " is 233.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitForeachStatement,The length of the statement  "					var test = _expressionCompiler.Compile(new TypeIsResolveResult(new LocalResolveResult(enumerator)' systemIDisposable' _compilation.FindType(KnownTypeCode.Boolean))' true); " is 171.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitForeachStatement,The length of the statement  "					var innerStatements = _expressionCompiler.Compile(new CSharpInvocationResolveResult(new ConversionResolveResult(systemIDisposable' new LocalResolveResult(enumerator)' conversions.ExplicitConversion(enumerator.Type' systemIDisposable))' disposeMethod' new ResolveResult[0])' false); " is 281.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitForeachStatement,The length of the statement  "					disposer = JsStatement.If(test.Expression' JsStatement.Block(innerStatements.AdditionalStatements.Concat(new JsStatement[] { innerStatements.Expression }))' null); " is 163.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,GenerateUsingBlock,The length of the statement  "			stmts.Add(JsStatement.Var(_variables[resource.Variable].Name' MaybeCloneValueType(compiledAquisition.Expression' aquisitionResolveResult' resource.Type))); " is 155.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,GenerateUsingBlock,The length of the statement  "				var castExpr = _expressionCompiler.Compile(new ConversionResolveResult(systemIDisposable' resource' conversions.ExplicitConversion(resource' systemIDisposable))' true); " is 168.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,GenerateUsingBlock,The length of the statement  "				var compiledTest = _expressionCompiler.Compile(new OperatorResolveResult(boolType' ExpressionType.NotEqual' resource' new ConstantResolveResult(resource.Type' null))' true); " is 173.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,GenerateUsingBlock,The length of the statement  "				releaseStmt = resource.Type.IsReferenceType == false && !resource.Type.IsKnownType(KnownTypeCode.NullableOfT) ? (JsStatement)compiledDisposeCall.Expression : JsStatement.If(compiledTest.Expression' compiledDisposeCall.Expression' null); " is 236.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitUsingStatement,The length of the statement  "					stmt = GenerateUsingBlock(((LocalResolveResult)_resolver.Resolve(resource))' resource.Initializer' usingStatement.GetRegion()' stmt); " is 133.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitUsingStatement,The length of the statement  "				var resource = CreateTemporaryVariable(_resolver.Resolve((Expression)usingStatement.ResourceAcquisition).Type' usingStatement.GetRegion()); " is 139.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitUsingStatement,The length of the statement  "				stmt = GenerateUsingBlock(new LocalResolveResult(resource)' (Expression)usingStatement.ResourceAcquisition' usingStatement.GetRegion()' stmt); " is 142.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,CompileCatchClause,The length of the statement  "					compiledAssignment = isOnly ? _runtimeLibrary.MakeException(JsExpression.Identifier(_variables[catchVariable.Variable].Name)' this) : JsExpression.Identifier(_variables[catchVariable.Variable].Name); " is 199.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,CompileCatchClause,The length of the statement  "					compiledAssignment = _runtimeLibrary.Downcast(JsExpression.Identifier(_variables[catchVariable.Variable].Name)' _compilation.FindType(KnownTypeCode.Exception)' _resolver.Resolve(catchClause.Type).Type' this); " is 208.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitTryCatchStatement,The length of the statement  "				_currentVariableForRethrow = CreateTemporaryVariable(_compilation.FindType(KnownTypeCode.Object)' tryCatchStatement.CatchClauses.First().GetRegion()); " is 150.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitTryCatchStatement,The length of the statement  "				bool lastIsCatchall = (catchClauses[catchClauses.Count - 1].Type.IsNull || _resolver.Resolve(catchClauses[catchClauses.Count - 1].Type).Type.Equals(systemException)); " is 166.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitTryCatchStatement,The length of the statement  "				                    ? CompileCatchClause(new LocalResolveResult(_currentVariableForRethrow)' catchClauses[catchClauses.Count - 1]' true' catchClauses.Count == 1) " is 141.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitTryCatchStatement,The length of the statement  "					var test = _runtimeLibrary.TypeIs(JsExpression.Identifier(catchVariableName)' _currentVariableForRethrow.Type' _resolver.Resolve(catchClauses[i].Type).Type' this); " is 163.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitTryCatchStatement,The length of the statement  "					current = JsStatement.If(test' CompileCatchClause(new LocalResolveResult(_currentVariableForRethrow)' catchClauses[i]' false' catchClauses.Count == 1)' current); " is 161.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitTryCatchStatement,The length of the statement  "					current = JsStatement.Block(JsExpression.Assign(JsExpression.Identifier(catchVariableName)' _runtimeLibrary.MakeException(JsExpression.Identifier(catchVariableName)' this))' current); " is 183.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitTryCatchStatement,The length of the statement  "			var finallyBlock = (!tryCatchStatement.FinallyBlock.IsNull ? CreateInnerCompiler().Compile(tryCatchStatement.FinallyBlock) : null); " is 131.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitYieldReturnStatement,The length of the statement  "			var compiledExpr = CompileExpression(yieldReturnStatement.Expression' CompileExpressionFlags.ReturnValueIsImportant | CompileExpressionFlags.IsAssignmentSource); " is 161.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitLabelStatement,The length of the statement  "			throw new InvalidOperationException("Visited a LabelStatement in the statement compiler' this should have been taken care of in parent."); " is 138.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitFixedStatement,The length of the statement  "			throw new InvalidOperationException("fixed statement is not supported");	// Should be caught during the compilation step. " is 121.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitUnsafeStatement,The length of the statement  "			throw new InvalidOperationException("unsafe statement is not supported");	// Should be caught during the compilation step. " is 122.
Long Statement,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitSwitchStatement,The length of the statement  "					statements = new[] { JsStatement.Label(gotoCaseData.Item1[section]' statements[0]) }.Concat(statements.Skip(1)).ToList(); " is 121.
Long Statement,Saltarelle.Compiler.Compiler,GatherGotoCaseAndDefaultDataVisitor,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,Process,The length of the statement  "				                 ).ToDictionary(x => x.rr != null ? NormalizeSwitchLabelValue(x.rr.ConstantValue) : _gotoCaseMapDefaultKey' x => x.section); " is 123.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CreateCompilationContext,The length of the statement  "			_usedNames = method != null ? new HashSet<string>(method.DeclaringTypeDefinition.TypeParameters.Concat(method.TypeParameters).Select(p => _namer.GetTypeParameterName(p))) : new HashSet<string>(); " is 195.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CreateCompilationContext,The length of the statement  "			nestedFunctionsRoot     = entity != null ? new NestedFunctionGatherer(_resolver).GatherNestedFunctions(entity' variables) : new NestedFunctionData(null); " is 153.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CreateCompilationContext,The length of the statement  "			var nestedFunctionsDict = new[] { nestedFunctionsRoot }.Concat(nestedFunctionsRoot.DirectlyOrIndirectlyNestedFunctions).Where(f => f.ResolveResult != null).ToDictionary(f => f.ResolveResult); " is 191.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CreateCompilationContext,The length of the statement  "			_statementCompiler = new StatementCompiler(_metadataImporter' _namer' _errorReporter' _compilation' _resolver' variables' nestedFunctionsDict' _runtimeLibrary' thisAlias' _usedNames' null' method' type); " is 203.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CompileMethod,The length of the statement  "			bool isIEnumerable = method.ReturnType.IsKnownType(KnownTypeCode.IEnumerable) || method.ReturnType.IsKnownType(KnownTypeCode.IEnumerableOfT); " is 141.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CompileMethod,The length of the statement  "			bool isIEnumerator = method.ReturnType.IsKnownType(KnownTypeCode.IEnumerator) || method.ReturnType.IsKnownType(KnownTypeCode.IEnumeratorOfT); " is 141.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CompileMethod,The length of the statement  "				smt = isIEnumerable ? StateMachineType.IteratorBlockReturningIEnumerable : StateMachineType.IteratorBlockReturningIEnumerator; " is 126.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CompileMethod,The length of the statement  "				iteratorBlockYieldTypeOrAsyncTaskGenericArgument = method.ReturnType is ParameterizedType ? ((ParameterizedType)method.ReturnType).TypeArguments[0] : _compilation.FindType(KnownTypeCode.Object); " is 194.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CompileMethod,The length of the statement  "				iteratorBlockYieldTypeOrAsyncTaskGenericArgument = method.ReturnType is ParameterizedType ? ((ParameterizedType)method.ReturnType).TypeArguments[0] : null; " is 155.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CompileMethod,The length of the statement  "			CreateCompilationContext(entity' method' method.DeclaringTypeDefinition' (impl.Type == MethodScriptSemantics.ImplType.StaticMethodWithThisAsFirstArgument ? _namer.ThisAlias : null)); " is 182.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CompileMethod,The length of the statement  "			return _statementCompiler.CompileMethod(method.Parameters' variables' body' impl.Type == MethodScriptSemantics.ImplType.StaticMethodWithThisAsFirstArgument' impl.ExpandParams' smt' iteratorBlockYieldTypeOrAsyncTaskGenericArgument); " is 231.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CompileConstructor,The length of the statement  "				CreateCompilationContext(ctor' constructor' constructor.DeclaringTypeDefinition' (impl.Type == ConstructorScriptSemantics.ImplType.StaticMethod ? _namer.ThisAlias : null)); " is 172.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CompileConstructor,The length of the statement  "				body.AddRange(PrepareParameters(constructor.Parameters' variables' expandParams: impl.ExpandParams' staticMethodWithThisAsFirstArgument: false)); " is 145.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CompileConstructor,The length of the statement  "				if (ctor == null || ctor.Initializer.IsNull || ctor.Initializer.ConstructorInitializerType != ConstructorInitializerType.This) { " is 128.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CompileConstructor,The length of the statement  "						// The compiler one step up has created the statements as "this.a = b;"' but we need to replace that with "$this.a = b;" (or whatever name the this alias has). " is 159.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CompileConstructor,The length of the statement  "					body.AddRange(instanceInitStatements);	// Don't initialize fields when we are chaining' but do it when we 1) compile the default constructor' 2) don't have an initializer' or 3) when the initializer is not this(...). " is 216.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CompileConstructor,The length of the statement  "				var compiled = JsExpression.FunctionDefinition(constructor.Parameters.Where((p' i) => i != constructor.Parameters.Count - 1 || !impl.ExpandParams).Select(p => variables[p].Name)' JsStatement.Block(body)); " is 204.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CompileAutoPropertyGetter,The length of the statement  "					var jsType = _runtimeLibrary.InstantiateType(Utils.SelfParameterize(property.DeclaringTypeDefinition)' _statementCompiler); " is 123.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CompileAutoPropertyGetter,The length of the statement  "					return JsExpression.FunctionDefinition(new string[0]' JsStatement.Return(JsExpression.Member(jsType' backingFieldName))); " is 121.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CompileAutoPropertyGetter,The length of the statement  "					return JsExpression.FunctionDefinition(new[] { _namer.ThisAlias }' JsStatement.Return(JsExpression.Member(JsExpression.Identifier(_namer.ThisAlias)' backingFieldName))); " is 169.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CompileAutoPropertyGetter,The length of the statement  "					return JsExpression.FunctionDefinition(new string[0]' JsStatement.Return(JsExpression.Member(JsExpression.This' backingFieldName))); " is 132.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CompileAutoPropertySetter,The length of the statement  "				string valueName = _namer.GetVariableName(property.Setter.Parameters[0].Name' new HashSet<string>(property.DeclaringTypeDefinition.TypeParameters.Select(p => _namer.GetTypeParameterName(p)))); " is 192.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CompileAutoPropertySetter,The length of the statement  "					var jsType = _runtimeLibrary.InstantiateType(Utils.SelfParameterize(property.DeclaringTypeDefinition)' _statementCompiler); " is 123.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CompileAutoPropertySetter,The length of the statement  "					return JsExpression.FunctionDefinition(new[] { valueName }' JsExpression.Assign(JsExpression.Member(jsType' backingFieldName)' JsExpression.Identifier(valueName))); " is 164.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CompileAutoPropertySetter,The length of the statement  "					return JsExpression.FunctionDefinition(new[] { _namer.ThisAlias' valueName }' JsExpression.Assign(JsExpression.Member(JsExpression.Identifier(_namer.ThisAlias)' backingFieldName)' JsExpression.Identifier(valueName))); " is 217.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CompileAutoPropertySetter,The length of the statement  "					return JsExpression.FunctionDefinition(new[] { valueName }' JsExpression.Assign(JsExpression.Member(JsExpression.This' backingFieldName)' JsExpression.Identifier(valueName))); " is 175.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CompileAutoEventAdder,The length of the statement  "				string valueName = _namer.GetVariableName(@event.AddAccessor.Parameters[0].Name' new HashSet<string>(@event.DeclaringTypeDefinition.TypeParameters.Select(p => _namer.GetTypeParameterName(p)))); " is 193.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CompileAutoEventAdder,The length of the statement  "				var combineCall = _statementCompiler.CompileDelegateCombineCall(@event.AddAccessor.Region' bfAccessor' JsExpression.Identifier(valueName)); " is 139.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CompileAutoEventRemover,The length of the statement  "				string valueName = _namer.GetVariableName(@event.RemoveAccessor.Parameters[0].Name' new HashSet<string>(@event.DeclaringTypeDefinition.TypeParameters.Select(p => _namer.GetTypeParameterName(p)))); " is 196.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,CompileAutoEventRemover,The length of the statement  "				var combineCall = _statementCompiler.CompileDelegateRemoveCall(@event.RemoveAccessor.Region' bfAccessor' JsExpression.Identifier(valueName)); " is 141.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,PrepareParameters,The length of the statement  "				result.Add(JsStatement.Var(variables[parameters[parameters.Count - 1]].Name' JsExpression.Invocation(JsExpression.Member(JsExpression.Member(JsExpression.Member(JsExpression.Identifier("Array")' "prototype")' "slice")' "call")' JsExpression.Identifier("arguments")' JsExpression.Number(parameters.Count - 1 + (staticMethodWithThisAsFirstArgument ? 1 : 0))))); " is 359.
Long Statement,Saltarelle.Compiler.Compiler,MethodCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\MethodCompiler.cs,PrepareParameters,The length of the statement  "					result.Add(JsExpression.Assign(JsExpression.Identifier(variables[p].Name)' JsExpression.ObjectLiteral(new JsObjectLiteralProperty("$"' JsExpression.Identifier(variables[p].Name))))); " is 182.
Long Statement,Saltarelle.Compiler.Compiler,NestedFunctionGatherer,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\NestedFunctionGatherer.cs,GatherNestedFunctions,The length of the statement  "			var allNestedFunctions = new[] { result }.Concat(result.DirectlyOrIndirectlyNestedFunctions).ToDictionary(f => f.DefinitionNode); " is 129.
Long Statement,Saltarelle.Compiler.Compiler,StructureGatherer,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\NestedFunctionGatherer.cs,GatherNestedFunctions,The length of the statement  "				currentFunction = new NestedFunctionData(null) { DefinitionNode = node' BodyNode = GetBodyNode(node)' ResolveResult = _resolver.Resolve(node) as LambdaResolveResult }; " is 167.
Long Statement,Saltarelle.Compiler.Compiler,StructureGatherer,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\NestedFunctionGatherer.cs,VisitNestedFunction,The length of the statement  "				currentFunction = new NestedFunctionData(parentFunction) { DefinitionNode = node' BodyNode = body' ResolveResult = (LambdaResolveResult)_resolver.Resolve(node) }; " is 162.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,SelfAndNested,The length of the statement  "			foreach (var x in type.GetNestedTypes(options: GetMemberOptions.IgnoreInheritedMembers).SelectMany(c => SelfAndNested(c))) { " is 124.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,Compile,The length of the statement  "			// Handle constructors. We must do this after we have visited all the compilation units because field initializer (which change the InstanceInitStatements and StaticInitStatements) might appear anywhere. " is 203.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,Compile,The length of the statement  "			foreach (var toAdd in _types.Where(t => t.Value != null).SelectMany(kvp => kvp.Key.GetConstructors().Where(c => c.IsSynthetic).Select(c => new { jsClass = kvp.Value' c }))) { " is 174.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,Compile,The length of the statement  "			foreach (var e in _compilation.MainAssembly.TopLevelTypeDefinitions.SelectMany(SelfAndNested).Where(t => t.Kind == TypeKind.Enum)) { " is 132.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,AddCompiledMethodToType,The length of the statement  "			if ((options.Type == MethodScriptSemantics.ImplType.NormalMethod && method.IsStatic) || options.Type == MethodScriptSemantics.ImplType.StaticMethodWithThisAsFirstArgument) { " is 173.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,MaybeCompileAndAddMethodToType,The length of the statement  "				var typeParamNames = options.IgnoreGenericArguments ? (IEnumerable<string>)new string[0] : method.TypeParameters.Select(tp => _namer.GetTypeParameterName(tp)).ToList(); " is 168.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,CompileAndAddAutoPropertyMethodsToType,The length of the statement  "				AddCompiledMethodToType(jsClass' property.Getter' options.GetMethod' new JsMethod(property.Getter' options.GetMethod.GeneratedMethodName' new string[0]' compiled)); " is 164.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,CompileAndAddAutoPropertyMethodsToType,The length of the statement  "				AddCompiledMethodToType(jsClass' property.Setter' options.SetMethod' new JsMethod(property.Setter' options.SetMethod.GeneratedMethodName' new string[0]' compiled)); " is 164.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,CompileAndAddAutoEventMethodsToType,The length of the statement  "				AddCompiledMethodToType(jsClass' evt.AddAccessor' options.AddMethod' new JsMethod(evt.AddAccessor' options.AddMethod.GeneratedMethodName' new string[0]' compiled)); " is 164.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,CompileAndAddAutoEventMethodsToType,The length of the statement  "				AddCompiledMethodToType(jsClass' evt.RemoveAccessor' options.RemoveMethod' new JsMethod(evt.RemoveAccessor' options.RemoveMethod.GeneratedMethodName' new string[0]' compiled)); " is 176.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,AddDefaultFieldInitializerToType,The length of the statement  "				jsClass.StaticInitStatements.AddRange(CreateMethodCompiler().CompileDefaultFieldInitializer(member.Region' _runtimeLibrary.InstantiateType(Utils.SelfParameterize(member.DeclaringTypeDefinition)' this)' fieldName' member)); " is 222.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,AddDefaultFieldInitializerToType,The length of the statement  "				AddInstanceInitStatements(jsClass' CreateMethodCompiler().CompileDefaultFieldInitializer(member.Region' JsExpression.This' fieldName' member)); " is 143.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,CompileAndAddFieldInitializerToType,The length of the statement  "				jsClass.StaticInitStatements.AddRange(CreateMethodCompiler().CompileFieldInitializer(initializer.GetRegion()' _runtimeLibrary.InstantiateType(Utils.SelfParameterize(member.DeclaringTypeDefinition)' this)' fieldName' member' initializer)); " is 238.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,CompileAndAddFieldInitializerToType,The length of the statement  "				AddInstanceInitStatements(jsClass' CreateMethodCompiler().CompileFieldInitializer(initializer.GetRegion()' JsExpression.This' fieldName' member' initializer)); " is 159.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,VisitTypeDeclaration,The length of the statement  "			if (typeDeclaration.ClassType == ClassType.Class || typeDeclaration.ClassType == ClassType.Interface || typeDeclaration.ClassType == ClassType.Struct) { " is 152.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,VisitMethodDeclaration,The length of the statement  "				_errorReporter.InternalError("Method declaration " + methodDeclaration.Name + " does not resolve to a method (resolves to " + resolveResult.ToString() + ")"); " is 158.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,VisitMethodDeclaration,The length of the statement  "			if (method.IsAbstract || !methodDeclaration.Body.IsNull) {	// The second condition is used to ignore partial method parts without definitions. " is 142.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,VisitMethodDeclaration,The length of the statement  "				MaybeCompileAndAddMethodToType(jsClass' methodDeclaration' methodDeclaration.Body' method' _metadataImporter.GetMethodSemantics(method)); " is 137.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,VisitOperatorDeclaration,The length of the statement  "				_errorReporter.InternalError("Operator declaration " + OperatorDeclaration.GetName(operatorDeclaration.OperatorType) + " does not resolve to a member."); " is 153.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,VisitOperatorDeclaration,The length of the statement  "				_errorReporter.InternalError("Operator declaration " + OperatorDeclaration.GetName(operatorDeclaration.OperatorType) + " does not resolve to a method (resolves to " + resolveResult.ToString() + ")"); " is 199.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,VisitOperatorDeclaration,The length of the statement  "			MaybeCompileAndAddMethodToType(jsClass' operatorDeclaration' operatorDeclaration.Body' method' _metadataImporter.GetMethodSemantics(method)); " is 141.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,HandleConstructorDeclaration,The length of the statement  "				_errorReporter.InternalError("Method declaration " + constructorDeclaration.Name + " does not resolve to a method (resolves to " + resolveResult.ToString() + ")"); " is 163.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,HandleConstructorDeclaration,The length of the statement  "				jsClass.StaticInitStatements.AddRange(CompileMethod(constructorDeclaration' constructorDeclaration.Body' method' MethodScriptSemantics.NormalMethod("X")).Body.Statements); " is 171.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,HandleConstructorDeclaration,The length of the statement  "				MaybeCompileAndAddConstructorToType(jsClass' constructorDeclaration' method' _metadataImporter.GetConstructorSemantics(method)); " is 128.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,VisitPropertyDeclaration,The length of the statement  "				_errorReporter.InternalError("Property declaration " + propertyDeclaration.Name + " does not resolve to a property (resolves to " + resolveResult.ToString() + ")"); " is 164.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,VisitPropertyDeclaration,The length of the statement  "							MaybeCompileAndAddMethodToType(jsClass' propertyDeclaration.Getter' propertyDeclaration.Getter.Body' property.Getter' impl.GetMethod); " is 134.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,VisitPropertyDeclaration,The length of the statement  "							MaybeCompileAndAddMethodToType(jsClass' propertyDeclaration.Setter' propertyDeclaration.Setter.Body' property.Setter' impl.SetMethod); " is 134.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,VisitEventDeclaration,The length of the statement  "					_errorReporter.InternalError("Event declaration " + singleEvt.Name + " does not resolve to an event (resolves to " + resolveResult.ToString() + ")"); " is 149.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,VisitEventDeclaration,The length of the statement  "								AddCompiledMethodToType(jsClass' evt.AddAccessor' impl.AddMethod' new JsMethod(evt.AddAccessor' impl.AddMethod.GeneratedMethodName' null' null)); " is 145.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,VisitEventDeclaration,The length of the statement  "								AddCompiledMethodToType(jsClass' evt.RemoveAccessor' impl.RemoveMethod' new JsMethod(evt.RemoveAccessor' impl.RemoveMethod.GeneratedMethodName' null' null)); " is 157.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,VisitCustomEventDeclaration,The length of the statement  "				_errorReporter.InternalError("Event declaration " + eventDeclaration.Name + " does not resolve to an event (resolves to " + resolveResult.ToString() + ")"); " is 156.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,VisitCustomEventDeclaration,The length of the statement  "						MaybeCompileAndAddMethodToType(jsClass' eventDeclaration.AddAccessor' eventDeclaration.AddAccessor.Body' evt.AddAccessor' impl.AddMethod); " is 138.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,VisitCustomEventDeclaration,The length of the statement  "						MaybeCompileAndAddMethodToType(jsClass' eventDeclaration.RemoveAccessor' eventDeclaration.RemoveAccessor.Body' evt.RemoveAccessor' impl.RemoveMethod); " is 150.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,VisitFieldDeclaration,The length of the statement  "					_errorReporter.InternalError("Field declaration " + v.Name + " does not resolve to a field (resolves to " + resolveResult.ToString() + ")"); " is 140.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,VisitIndexerDeclaration,The length of the statement  "				_errorReporter.InternalError("Event declaration " + indexerDeclaration.Name + " does not resolve to a property (resolves to " + resolveResult.ToString() + ")"); " is 160.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,VisitIndexerDeclaration,The length of the statement  "						MaybeCompileAndAddMethodToType(jsClass' indexerDeclaration.Getter' indexerDeclaration.Getter.Body' prop.Getter' impl.GetMethod); " is 128.
Long Statement,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,VisitIndexerDeclaration,The length of the statement  "						MaybeCompileAndAddMethodToType(jsClass' indexerDeclaration.Setter' indexerDeclaration.Setter.Body' prop.Setter' impl.SetMethod); " is 128.
Long Statement,Saltarelle.Compiler.Compiler,VariableGatherer,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\VariableGatherer.cs,AddVariable,The length of the statement  "				_errorReporter.InternalError("Variable " + variableName + " does not resolve to a local (resolves to " + (resolveResult != null ? resolveResult.ToString() : "null") + ")"); " is 172.
Long Statement,Saltarelle.Compiler.Compiler,VariableGatherer,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\VariableGatherer.cs,VisitIdentifierExpression,The length of the statement  "			if (rr != null && _variablesDeclaredInsideLoop.Contains(rr.Variable) && _currentMethod != _result[rr.Variable].DeclaringMethod) { " is 129.
Long Statement,Saltarelle.Compiler.Driver,CompilerDriver,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Driver\CompilerDriver.cs,ResolveReference,The length of the statement  "						hasExtension = filename.EndsWith(".dll"' StringComparison.Ordinal) || filename.EndsWith(".exe"' StringComparison.Ordinal); " is 122.
Long Statement,Saltarelle.Compiler.Driver,CompilerDriver,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Driver\CompilerDriver.cs,MapSettings,The length of the statement  "				result.Resources = options.EmbeddedResources.Select(r => new AssemblyResource(r.Filename' r.ResourceName' isPrivate: !r.IsPublic) { IsEmbeded = true }).ToList(); " is 161.
Long Statement,Saltarelle.Compiler.Driver,CompilerDriver,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Driver\CompilerDriver.cs,MapSettings,The length of the statement  "			if (result.AssemblyReferencesAliases.Count > 0) {	// NRefactory does currently not support reference aliases' this check will hopefully go away in the future. " is 158.
Long Statement,Saltarelle.Compiler.Driver,CompilerDriver,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Driver\CompilerDriver.cs,IsEntryPointCandidate,The length of the statement  "			if (m.Name != "Main" || !m.IsStatic || m.DeclaringTypeDefinition.TypeParameterCount > 0 || m.TypeParameters.Count > 0)	// Must be a static' non-generic Main " is 156.
Long Statement,Saltarelle.Compiler.Driver,CompilerDriver,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Driver\CompilerDriver.cs,IsEntryPointCandidate,The length of the statement  "			if (!m.ReturnType.IsKnownType(KnownTypeCode.Void) && !m.ReturnType.IsKnownType(KnownTypeCode.Int32))	// Must return void or int. " is 128.
Long Statement,Saltarelle.Compiler.Driver,CompilerDriver,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Driver\CompilerDriver.cs,IsEntryPointCandidate,The length of the statement  "			return at != null && at.Dimensions == 1 && at.ElementType.IsKnownType(KnownTypeCode.String);	// The single parameter must be a one-dimensional array of strings. " is 160.
Long Statement,Saltarelle.Compiler.Driver,CompilerDriver,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Driver\CompilerDriver.cs,TopologicalSortPlugins,The length of the statement  "			return TopologicalSorter.TopologicalSort(references' r => r.Item1.AssemblyName' references.SelectMany(a => a.Item2' (a' r) => Edge.Create(a.Item1.AssemblyName' r))) " is 164.
Long Statement,Saltarelle.Compiler.Driver,CompilerDriver,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Driver\CompilerDriver.cs,RegisterPlugin,The length of the statement  "			container.Register(AllTypes.FromAssembly(plugin).Where(t => _pluginTypes.Any(pt => pt.IsAssignableFrom(t))).WithServiceSelect((t' _) => t.GetInterfaces().Intersect(_pluginTypes))); " is 180.
Long Statement,Saltarelle.Compiler.Driver,CompilerDriver,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Driver\CompilerDriver.cs,Compile,The length of the statement  "				Console.SetOut(new StringWriter());	// I don't trust the third-party libs to not generate spurious random messages' so make sure that any of those messages are suppressed. " is 171.
Long Statement,Saltarelle.Compiler.Driver,CompilerDriver,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Driver\CompilerDriver.cs,Compile,The length of the statement  "				PreparedCompilation compilation = PreparedCompilation.CreateCompilation(settings.AssemblyName' options.SourceFiles.Select(f => new SimpleSourceFile(f' settings.Encoding))' references.Select(r => r.Item1)' options.DefineConstants' LoadResources(options.EmbeddedResources)); " is 272.
Long Statement,Saltarelle.Compiler.Driver,CompilerDriver,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Driver\CompilerDriver.cs,Compile,The length of the statement  "				var invoker = new OOPEmulatorInvoker(container.Resolve<IOOPEmulator>()' container.Resolve<IMetadataImporter>()' container.Resolve<IErrorReporter>()); " is 149.
Long Statement,Saltarelle.Compiler.Driver,CompilerDriver,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Driver\CompilerDriver.cs,Compile,The length of the statement  "				string outputAssemblyPath = !string.IsNullOrEmpty(options.OutputAssemblyPath) ? options.OutputAssemblyPath : Path.ChangeExtension(options.SourceFiles[0]' ".dll"); " is 162.
Long Statement,Saltarelle.Compiler.Driver,CompilerDriver,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Driver\CompilerDriver.cs,Compile,The length of the statement  "				string outputScriptPath   = !string.IsNullOrEmpty(options.OutputScriptPath)   ? options.OutputScriptPath   : Path.ChangeExtension(options.SourceFiles[0]' ".js"); " is 161.
Long Statement,Saltarelle.Compiler.Driver,CompilerDriver,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Driver\CompilerDriver.cs,LoadReferences,The length of the statement  "			using (var universe = new IKVM.Reflection.Universe(IKVM.Reflection.UniverseOptions.DisablePseudoCustomAttributeRetrieval | IKVM.Reflection.UniverseOptions.SupressReferenceTypeIdentityConversion)) { " is 197.
Long Statement,Saltarelle.Compiler.Driver,CompilerDriver,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Driver\CompilerDriver.cs,LoadReferences,The length of the statement  "				return assemblies.Select(asm => Tuple.Create(new IkvmLoader { IncludeInternalMembers = true }.LoadAssembly(asm)' (IList<string>)GetReferencedAssemblyNames(asm).ToList()' LoadPlugin(asm))).ToList(); " is 197.
Long Statement,Saltarelle.Compiler.Driver,ConvertingReportPrinter,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Driver\CompilerDriver.cs,Print,The length of the statement  "				_errorReporter.Region = new DomRegion(msg.Location.NameFullPath' msg.Location.Row' msg.Location.Column' msg.Location.Row' msg.Location.Column); " is 143.
Long Statement,Saltarelle.Compiler.Driver,ConvertingReportPrinter,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Driver\CompilerDriver.cs,Print,The length of the statement  "				_errorReporter.Message(msg.IsWarning ? MessageSeverity.Warning : MessageSeverity.Error' msg.Code' msg.Text.Replace("{"' "{{").Replace("}"' "}}")); " is 146.
Long Statement,Saltarelle.Compiler.OOPEmulation,OOPEmulatorInvoker,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\OOPEmulation\OOPEmulatorInvoker.cs,Process,The length of the statement  "					var currentPhase = Order(processed.Select(x => Tuple.Create(x.Item1' (x.Item2.Phases.Count > i ? x.Item2.Phases[i] : null) ?? new TypeOOPEmulationPhase(null' null))).ToList()); " is 176.
Long Statement,Saltarelle.Compiler.OOPEmulation,OOPEmulatorInvoker,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\OOPEmulation\OOPEmulatorInvoker.cs,InvokeEntryPoint,The length of the statement  "					return JsExpression.Invocation(JsExpression.Member(new JsTypeReferenceExpression(entryPoint.DeclaringTypeDefinition)' sem.Name)); " is 129.
Long Statement,Saltarelle.Compiler.OOPEmulation,OOPEmulatorInvoker,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\OOPEmulation\OOPEmulatorInvoker.cs,GetStaticInitCode,The length of the statement  "			return GetStaticInitializationOrder(OrderByNamespace(types.OfType<JsClass>()' c => _metadataImporter.GetTypeSemantics(c.CSharpTypeDefinition).Name)' 1) " is 151.
Long Statement,Saltarelle.Compiler.OOPEmulation,OOPEmulatorInvoker,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\OOPEmulation\OOPEmulatorInvoker.cs,GetStaticInitializationOrder,The length of the statement  "			var dict = types.ToDictionary(t => t.CSharpTypeDefinition' t => new { deps = GetStaticInitializationDependencies(t' pass)' backref = t }); " is 138.
Long Statement,Saltarelle.Compiler.OOPEmulation,OOPEmulatorInvoker,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\OOPEmulation\OOPEmulatorInvoker.cs,GetStaticInitializationOrder,The length of the statement  "			foreach (var group in TopologicalSorter.FindAndTopologicallySortStronglyConnectedComponents(dict.Keys.ToList()' edges)) { " is 121.
Long Statement,Saltarelle.Compiler.OOPEmulation,OOPEmulatorInvoker,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\OOPEmulation\OOPEmulatorInvoker.cs,GetStaticInitializationDependencies,The length of the statement  "					foreach (var r in c.InstanceMethods.Where(m => m.Definition != null).SelectMany(m => TypeReferenceFinder.Analyze(m.Definition))) " is 128.
Long Statement,Saltarelle.Compiler.OOPEmulation,OOPEmulatorInvoker,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\OOPEmulation\OOPEmulatorInvoker.cs,GetStaticInitializationDependencies,The length of the statement  "					foreach (var r in c.NamedConstructors.Where(m => m.Definition != null).SelectMany(m => TypeReferenceFinder.Analyze(m.Definition))) " is 130.
Long Statement,Saltarelle.Compiler.OOPEmulation,OOPEmulatorInvoker,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\OOPEmulation\OOPEmulatorInvoker.cs,GetStaticInitializationDependencies,The length of the statement  "					foreach (var r in c.StaticMethods.Where(m => m.Definition != null).SelectMany(m => TypeReferenceFinder.Analyze(m.Definition))) " is 126.
Long Statement,Saltarelle.Compiler.OOPEmulation,OOPEmulatorInvoker,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\OOPEmulation\OOPEmulatorInvoker.cs,Order,The length of the statement  "			var edges = from s in source from t in s.Item2.DependentOnTypes.Intersect(backref.Keys) select Edge.Create(s.Item1.CSharpTypeDefinition' t); " is 140.
Long Statement,Saltarelle.Compiler.OOPEmulation,OOPEmulatorInvoker,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\OOPEmulation\OOPEmulatorInvoker.cs,Order,The length of the statement  "			var components = TopologicalSorter.FindAndTopologicallySortStronglyConnectedComponents(OrderByNamespace(backref.Keys' x => _metadataImporter.GetTypeSemantics(x).Name)' edges); " is 175.
Long Statement,Saltarelle.Compiler.ScriptSemantics,ConstructorScriptSemantics,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\ScriptSemantics\ConstructorScriptSemantics.cs,Unnamed,The length of the statement  "			return new ConstructorScriptSemantics { Type = ImplType.UnnamedConstructor' GenerateCode = generateCode' ExpandParams = expandParams' SkipInInitializer = skipInInitializer }; " is 174.
Long Statement,Saltarelle.Compiler.ScriptSemantics,ConstructorScriptSemantics,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\ScriptSemantics\ConstructorScriptSemantics.cs,Named,The length of the statement  "			return new ConstructorScriptSemantics { Type = ImplType.NamedConstructor' _text = name' GenerateCode = generateCode' ExpandParams = expandParams' SkipInInitializer = skipInInitializer }; " is 186.
Long Statement,Saltarelle.Compiler.ScriptSemantics,ConstructorScriptSemantics,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\ScriptSemantics\ConstructorScriptSemantics.cs,StaticMethod,The length of the statement  "			return new ConstructorScriptSemantics { Type = ImplType.StaticMethod' _text = name' GenerateCode = generateCode' ExpandParams = expandParams' SkipInInitializer = skipInInitializer }; " is 182.
Long Statement,Saltarelle.Compiler.ScriptSemantics,ConstructorScriptSemantics,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\ScriptSemantics\ConstructorScriptSemantics.cs,InlineCode,The length of the statement  "			return new ConstructorScriptSemantics { Type = ImplType.InlineCode' _text = literalCode' GenerateCode = false' SkipInInitializer = skipInInitializer' _nonExpandedFormLiteralCode = nonExpandedFormLiteralCode ?? literalCode }; " is 224.
Long Statement,Saltarelle.Compiler.ScriptSemantics,ConstructorScriptSemantics,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\ScriptSemantics\ConstructorScriptSemantics.cs,Json,The length of the statement  "			return new ConstructorScriptSemantics { Type = ImplType.Json' _parameterToMemberMap = parameterToMemberMap.AsReadOnly()' GenerateCode = false' SkipInInitializer = skipInInitializer }; " is 183.
Long Statement,Saltarelle.Compiler.ScriptSemantics,EventScriptSemantics,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\ScriptSemantics\EventScriptSemantics.cs,AddAndRemoveMethods,The length of the statement  "			return new EventScriptSemantics { Type = ImplType.AddAndRemoveMethods' _addMethod = addMethod' _removeMethod = removeMethod }; " is 126.
Long Statement,Saltarelle.Compiler.ScriptSemantics,MethodScriptSemantics,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\ScriptSemantics\MethodScriptSemantics.cs,NormalMethod,The length of the statement  "			return new MethodScriptSemantics { Type = ImplType.NormalMethod' _text = name' IgnoreGenericArguments = ignoreGenericArguments' GeneratedMethodName = generateCode ? name : null' ExpandParams = expandParams' EnumerateAsArray = enumerateAsArray }; " is 245.
Long Statement,Saltarelle.Compiler.ScriptSemantics,MethodScriptSemantics,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\ScriptSemantics\MethodScriptSemantics.cs,StaticMethodWithThisAsFirstArgument,The length of the statement  "			return new MethodScriptSemantics { Type = ImplType.StaticMethodWithThisAsFirstArgument' _text = name' IgnoreGenericArguments = ignoreGenericArguments' GeneratedMethodName = generateCode ? name : null' ExpandParams = expandParams' EnumerateAsArray = enumerateAsArray }; " is 268.
Long Statement,Saltarelle.Compiler.ScriptSemantics,MethodScriptSemantics,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\ScriptSemantics\MethodScriptSemantics.cs,InlineCode,The length of the statement  "			return new MethodScriptSemantics { Type = ImplType.InlineCode' _text = literalCode' IgnoreGenericArguments = true' GeneratedMethodName = generatedMethodName' EnumerateAsArray = enumerateAsArray' _nonVirtualInvocationLiteralCode = nonVirtualInvocationLiteralCode ?? literalCode' _nonExpandedFormLiteralCode = nonExpandedFormLiteralCode ?? literalCode }; " is 352.
Long Statement,Saltarelle.Compiler.ScriptSemantics,MethodScriptSemantics,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\ScriptSemantics\MethodScriptSemantics.cs,WithEnumerateAsArray,The length of the statement  "			return new MethodScriptSemantics { Type = this.Type' _text = this._text' IgnoreGenericArguments = this.IgnoreGenericArguments' GeneratedMethodName = this.GeneratedMethodName' ExpandParams = this.ExpandParams' EnumerateAsArray = true }; " is 235.
Long Statement,Saltarelle.Compiler.ScriptSemantics,PropertyScriptSemantics,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\ScriptSemantics\PropertyScriptSemantics.cs,GetAndSetMethods,The length of the statement  "			return new PropertyScriptSemantics { Type = ImplType.GetAndSetMethods' _getMethod = getMethod' _setMethod = setMethod }; " is 120.
Long Statement,Saltarelle.Compiler.ScriptSemantics,PropertyScriptSemantics,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\ScriptSemantics\PropertyScriptSemantics.cs,NativeIndexer,The length of the statement  "			return new PropertyScriptSemantics { Type = ImplType.GetAndSetMethods' _getMethod = MethodScriptSemantics.NativeIndexer()' _setMethod = MethodScriptSemantics.NativeIndexer() }; " is 176.
Long Statement,Saltarelle.Compiler.ScriptSemantics,TypeScriptSemantics,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\ScriptSemantics\TypeScriptSemantics.cs,NormalType,The length of the statement  "			return new TypeScriptSemantics { Type = ImplType.NormalType' _name = name' _ignoreGenericArguments = ignoreGenericArguments' GenerateCode = generateCode }; " is 155.
Long Statement,Saltarelle.Compiler.ScriptSemantics,TypeScriptSemantics,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\ScriptSemantics\TypeScriptSemantics.cs,MutableValueType,The length of the statement  "			return new TypeScriptSemantics { Type = ImplType.MutableValueType' _name = name' _ignoreGenericArguments = ignoreGenericArguments' GenerateCode = generateCode }; " is 161.
Complex Conditional,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitInvocationResolveResult,The conditional expression  "assign == null || assign.OperatorType != ExpressionType.Assign || !(assign.Operands[0] is MemberResolveResult) || !(((MemberResolveResult)assign.Operands[0]).Member is IProperty)"  is complex.
Complex Conditional,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileCoalesce,The conditional expression  "jsRight.AdditionalStatements.Count == 0 && (jsRight.Expression.NodeType == ExpressionNodeType.Identifier || (jsRight.Expression.NodeType >= ExpressionNodeType.ConstantFirst && jsRight.Expression.NodeType <= ExpressionNodeType.ConstantLast))"  is complex.
Complex Conditional,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileThisAndArgumentListForMethodCall,The conditional expression  "tokens != null && target != null && !member.IsStatic && member.SymbolKind != SymbolKind.Constructor"  is complex.
Complex Conditional,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileJsonConstructorCall,The conditional expression  "orr != null && orr.OperatorType == ExpressionType.Assign && orr.Operands[0] is MemberResolveResult && ((MemberResolveResult)orr.Operands[0]).TargetResult is InitializedObjectResolveResult"  is complex.
Complex Conditional,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,PerformConversion,The conditional expression  "toType.Kind == TypeKind.Delegate && fromType.Kind == TypeKind.Delegate && !toType.Equals(_compilation.FindType(KnownTypeCode.MulticastDelegate)) && !fromType.Equals(_compilation.FindType(KnownTypeCode.MulticastDelegate))"  is complex.
Complex Conditional,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitForeachStatement,The conditional expression  "Equals(inExpression.Type' systemArray) || inExpression.Type.DirectBaseTypes.Contains(systemArray) || (getEnumeratorMethod != null && _metadataImporter.GetMethodSemantics(getEnumeratorMethod).EnumerateAsArray)"  is complex.
Complex Conditional,Saltarelle.Compiler.Driver,CompilerDriver,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Driver\CompilerDriver.cs,IsEntryPointCandidate,The conditional expression  "m.Name != "Main" || !m.IsStatic || m.DeclaringTypeDefinition.TypeParameterCount > 0 || m.TypeParameters.Count > 0"  is complex.
Empty Catch Block,Saltarelle.Compiler.Driver,CompilerDriver,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Driver\CompilerDriver.cs,Compile,The method has an empty catch block.
Empty Catch Block,Saltarelle.Compiler.Driver,CompilerDriver,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Driver\CompilerDriver.cs,Compile,The method has an empty catch block.
Magic Number,Saltarelle.Compiler,CompilerOptions,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\CompilerOptions.cs,CompilerOptions,The following statement contains a magic number: WarningLevel = 4;
Magic Number,Saltarelle.Compiler.Compiler,ExpressionTreeBuilder,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionTreeBuilder.cs,VisitConversionResolveResult,The following statement contains a magic number: if (rr.Conversion.IsIdentityConversion) {  				return input;  			}  			else if (rr.Conversion.IsAnonymousFunctionConversion) {  				var result = input;  				if (rr.Type.Name == "Expression")  					result = CompileFactoryCall("Quote"' new[] { typeof(Expression) }' new[] { result });  				return result;  			}  			else if (rr.Conversion.IsNullLiteralConversion) {  				return CompileFactoryCall("Constant"' new[] { typeof(object)' typeof(Type) }' new[] { input' _instantiateType(rr.Type) });  			}  			else if (rr.Conversion.IsMethodGroupConversion) {  				var methodInfo = _compilation.FindType(typeof(MethodInfo));  				return CompileFactoryCall("Convert"' new[] { typeof(Expression)' typeof(Type) }' new[] {  				           CompileFactoryCall("Call"' new[] { typeof(Expression)' typeof(MethodInfo)' typeof(Expression[]) }' new[] {   				               CompileFactoryCall("Constant"' new[] { typeof(object)' typeof(Type) }' new[] { _getMember(rr.Conversion.Method)' _instantiateType(methodInfo) })'  				               _getMember(methodInfo.GetMethods().Single(m => m.Name == "CreateDelegate" && m.Parameters.Count == 2 && m.Parameters[0].Type.FullName == typeof(Type).FullName && m.Parameters[1].Type.FullName == typeof(object).FullName))'  				               JsExpression.ArrayLiteral(  				                   _instantiateType(rr.Type)'  				                   rr.Conversion.Method.IsStatic ? JsExpression.Null : VisitResolveResult(((MethodGroupResolveResult)rr.Input).TargetResult' null)  				               )  				           })'  				           _instantiateType(rr.Type)  				       });  			}  			else {  				string methodName;  				if (rr.Conversion.IsTryCast)  					methodName = "TypeAs";  				else if (rr.CheckForOverflow)  					methodName = "ConvertChecked";  				else  					methodName = "Convert";  				if (rr.Conversion.IsUserDefined)  					return CompileFactoryCall(methodName' new[] { typeof(Expression)' typeof(Type)' typeof(MethodInfo) }' new[] { input' _instantiateType(rr.Type)' _getMember(rr.Conversion.Method) });  				else  					return CompileFactoryCall(methodName' new[] { typeof(Expression)' typeof(Type) }' new[] { input' _instantiateType(rr.Type) });  			}
Magic Number,Saltarelle.Compiler.Compiler,InlineCodeToken,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\InlineCodeToken.cs,GetHashCode,The following statement contains a magic number: unchecked {  				int result = (_text != null ? _text.GetHashCode() : 0);  				result = (result*397) ^ _index;  				result = (result*397) ^ Type.GetHashCode();  				result = (result*397) ^ _ownerType.GetHashCode();  				result = (result*397) ^ _isExpandedParamArray.GetHashCode();  				return result;  			}
Magic Number,Saltarelle.Compiler.Compiler,InlineCodeToken,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\InlineCodeToken.cs,GetHashCode,The following statement contains a magic number: unchecked {  				int result = (_text != null ? _text.GetHashCode() : 0);  				result = (result*397) ^ _index;  				result = (result*397) ^ Type.GetHashCode();  				result = (result*397) ^ _ownerType.GetHashCode();  				result = (result*397) ^ _isExpandedParamArray.GetHashCode();  				return result;  			}
Magic Number,Saltarelle.Compiler.Compiler,InlineCodeToken,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\InlineCodeToken.cs,GetHashCode,The following statement contains a magic number: unchecked {  				int result = (_text != null ? _text.GetHashCode() : 0);  				result = (result*397) ^ _index;  				result = (result*397) ^ Type.GetHashCode();  				result = (result*397) ^ _ownerType.GetHashCode();  				result = (result*397) ^ _isExpandedParamArray.GetHashCode();  				return result;  			}
Magic Number,Saltarelle.Compiler.Compiler,InlineCodeToken,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\InlineCodeToken.cs,GetHashCode,The following statement contains a magic number: unchecked {  				int result = (_text != null ? _text.GetHashCode() : 0);  				result = (result*397) ^ _index;  				result = (result*397) ^ Type.GetHashCode();  				result = (result*397) ^ _ownerType.GetHashCode();  				result = (result*397) ^ _isExpandedParamArray.GetHashCode();  				return result;  			}
Magic Number,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The following statement contains a magic number: if (rr.UserDefinedOperatorMethod != null) {  				var impl = _metadataImporter.GetMethodSemantics(rr.UserDefinedOperatorMethod);  				if (impl.Type != MethodScriptSemantics.ImplType.NativeOperator) {  					// We can get away without cloning the first argument to the user-defined operator if the result is being overwritten (transfer ownership to the operator rather than cloning)  					switch (rr.Operands.Count) {  						case 1: {  							bool returnValueBeforeChange = true;  							switch (rr.OperatorType) {  								case ExpressionType.PreIncrementAssign:  								case ExpressionType.PreDecrementAssign:  									returnValueBeforeChange = false;  									goto case ExpressionType.PostIncrementAssign;  								case ExpressionType.PostIncrementAssign:  								case ExpressionType.PostDecrementAssign: {  									Func<JsExpression' JsExpression' JsExpression> invocation = (a' b) => CompileMethodInvocation(impl' rr.UserDefinedOperatorMethod' new[] { _runtimeLibrary.InstantiateType(rr.UserDefinedOperatorMethod.DeclaringType' this)' returnValueIsImportant && returnValueBeforeChange ? MaybeCloneValueType(a' null' rr.Type) : a }' false);  									return CompileCompoundAssignment(rr.Operands[0]' null' null' invocation' returnValueIsImportant' rr.IsLiftedOperator' returnValueBeforeChange);  								}  								default:  									return CompileUnaryOperator(rr.Operands[0]' a => CompileMethodInvocation(impl' rr.UserDefinedOperatorMethod' new[] { _runtimeLibrary.InstantiateType(rr.UserDefinedOperatorMethod.DeclaringType' this)' MaybeCloneValueType(a' rr.Operands[0]' rr.Operands[0].Type) }' false)' rr.IsLiftedOperator' LiftType.Regular);  							}  						}    						case 2: {  							bool isAssignment = IsAssignmentOperator(rr.OperatorType);  							Func<JsExpression' JsExpression' JsExpression> invocation = (a' b) => CompileMethodInvocation(impl' rr.UserDefinedOperatorMethod' new[] { _runtimeLibrary.InstantiateType(rr.UserDefinedOperatorMethod.DeclaringType' this)' isAssignment ? a : MaybeCloneValueType(a' rr.Operands[0]' rr.Operands[0].Type)' MaybeCloneValueType(b' rr.Operands[1]' rr.Operands[1].Type) }' false);  							if (isAssignment)  								return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' invocation' returnValueIsImportant' rr.IsLiftedOperator);  							else  								return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' invocation' rr.IsLiftedOperator' GetLiftType(rr.OperatorType));  						}  					}  					_errorReporter.InternalError("Could not compile call to user-defined operator " + rr.UserDefinedOperatorMethod.DeclaringType.FullName + "." + rr.UserDefinedOperatorMethod.Name);  					return JsExpression.Null;  				}  			}
Magic Number,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The following statement contains a magic number: switch (rr.OperatorType) {  				case ExpressionType.Assign:  					return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.Assign' (a' b) => b' returnValueIsImportant' false' oldValueIsImportant: false);    				// Compound assignment operators    				case ExpressionType.AddAssign:  				case ExpressionType.AddAssignChecked:  					if (rr.Operands[0] is MemberResolveResult && ((MemberResolveResult)rr.Operands[0]).Member is IEvent) {  						return CompileEventAddOrRemove((MemberResolveResult)rr.Operands[0]' rr.Operands[1]' true);  					}  					else if (rr.Operands[0].Type.Kind == TypeKind.Delegate) {  						var del = (ITypeDefinition)_compilation.FindType(KnownTypeCode.Delegate);  						var combine = del.GetMethods().Single(m => m.Name == "Combine" && m.Parameters.Count == 2);  						var impl = _metadataImporter.GetMethodSemantics(combine);  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => CompileMethodInvocation(impl' combine' new[] { _runtimeLibrary.InstantiateType(del' this)' a' b }' false)' returnValueIsImportant' false);  					}  					else {  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.AddAssign' JsExpression.Add' returnValueIsImportant' rr.IsLiftedOperator);  					}    				case ExpressionType.AndAssign:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (rr.Operands[0].Type.IsKnownType(KnownTypeCode.Boolean))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseAnd(a' b)))' returnValueIsImportant' false);  					if (IsNullableBooleanType(rr.Operands[0].Type))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => _runtimeLibrary.LiftedBooleanAnd(a' b' this)' returnValueIsImportant' false);  					else  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseAndAssign' JsExpression.BitwiseAnd' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.DivideAssign:  					if (IsIntegerType(rr.Type))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => _runtimeLibrary.IntegerDivision(a' b' this)' returnValueIsImportant' rr.IsLiftedOperator);  					else  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.DivideAssign' JsExpression.Divide' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.ExclusiveOrAssign:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (rr.Operands[0].Type.IsKnownType(KnownTypeCode.Boolean))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseXor(a' b)))' returnValueIsImportant' false);  					if (IsNullableBooleanType(rr.Operands[0].Type))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => _runtimeLibrary.LiftedBooleanXor(a' b' this)' returnValueIsImportant' false);  					else  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseXorAssign' JsExpression.BitwiseXor' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.LeftShiftAssign:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}  					return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.LeftShiftAssign' JsExpression.LeftShift' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.ModuloAssign:  					return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.ModuloAssign' JsExpression.Modulo' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.MultiplyAssign:  				case ExpressionType.MultiplyAssignChecked:  					return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.MultiplyAssign' JsExpression.Multiply' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.OrAssign:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (rr.Operands[0].Type.IsKnownType(KnownTypeCode.Boolean))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseOr(a' b)))' returnValueIsImportant' false);  					if (IsNullableBooleanType(rr.Operands[0].Type))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => _runtimeLibrary.LiftedBooleanOr(a' b' this)' returnValueIsImportant' false);  					else  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseOrAssign' JsExpression.BitwiseOr' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.RightShiftAssign:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (IsUnsignedType(rr.Type))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.RightShiftUnsignedAssign' JsExpression.RightShiftUnsigned' returnValueIsImportant' rr.IsLiftedOperator);  					else  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.RightShiftSignedAssign' JsExpression.RightShiftSigned' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.SubtractAssign:  				case ExpressionType.SubtractAssignChecked:  					if (rr.Operands[0] is MemberResolveResult && ((MemberResolveResult)rr.Operands[0]).Member is IEvent) {  						return CompileEventAddOrRemove((MemberResolveResult)rr.Operands[0]' rr.Operands[1]' false);  					}  					else if (rr.Operands[0].Type.Kind == TypeKind.Delegate) {  						var del = (ITypeDefinition)_compilation.FindType(KnownTypeCode.Delegate);  						var remove = del.GetMethods().Single(m => m.Name == "Remove" && m.Parameters.Count == 2);  						var impl = _metadataImporter.GetMethodSemantics(remove);  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => CompileMethodInvocation(impl' remove' new[] { _runtimeLibrary.InstantiateType(del' this)' a' b }' false)' returnValueIsImportant' false);  					}  					else {  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.SubtractAssign' JsExpression.Subtract' returnValueIsImportant' rr.IsLiftedOperator);  					}    				case ExpressionType.PreIncrementAssign:  					return CompileCompoundAssignment(rr.Operands[0]' null' (a' b) => JsExpression.PrefixPlusPlus(a)' (a' b) => JsExpression.Add(a' JsExpression.Number(1))' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.PreDecrementAssign:  					return CompileCompoundAssignment(rr.Operands[0]' null' (a' b) => JsExpression.PrefixMinusMinus(a)' (a' b) => JsExpression.Subtract(a' JsExpression.Number(1))' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.PostIncrementAssign:  					return CompileCompoundAssignment(rr.Operands[0]' null' (a' b) => JsExpression.PostfixPlusPlus(a)' (a' b) => JsExpression.Add(a' JsExpression.Number(1))' returnValueIsImportant' rr.IsLiftedOperator' returnValueBeforeChange: true);    				case ExpressionType.PostDecrementAssign:  					return CompileCompoundAssignment(rr.Operands[0]' null' (a' b) => JsExpression.PostfixMinusMinus(a)' (a' b) => JsExpression.Subtract(a' JsExpression.Number(1))' returnValueIsImportant' rr.IsLiftedOperator' returnValueBeforeChange: true);    				// Binary non-assigning operators    				case ExpressionType.Add:  				case ExpressionType.AddChecked:  					if (rr.Operands[0].Type.Kind == TypeKind.Delegate) {  						var del = (ITypeDefinition)_compilation.FindType(KnownTypeCode.Delegate);  						var combine = del.GetMethods().Single(m => m.Name == "Combine" && m.Parameters.Count == 2);  						var impl = _metadataImporter.GetMethodSemantics(combine);  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => CompileMethodInvocation(impl' combine' new[] { _runtimeLibrary.InstantiateType(del' this)' a' b }' false)' false' LiftType.Regular);  					}  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Add' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.And:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (rr.Operands[0].Type.IsKnownType(KnownTypeCode.Boolean))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseAnd(a' b)))' false' LiftType.Regular);  					if (IsNullableBooleanType(rr.Operands[0].Type))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => _runtimeLibrary.LiftedBooleanAnd(a' b' this)' false' LiftType.Regular);	// We have already lifted it' so it should not be lifted again.  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseAnd' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.AndAlso:  					return CompileAndAlsoOrOrElse(rr.Operands[0]' rr.Operands[1]' true);    				case ExpressionType.Coalesce:  					return CompileCoalesce(rr.Type' rr.Operands[0]' rr.Operands[1]);    				case ExpressionType.Divide:  					if (IsIntegerType(rr.Type))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => _runtimeLibrary.IntegerDivision(a' b' this)' rr.IsLiftedOperator' LiftType.Regular);  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Divide' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.ExclusiveOr:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (rr.Operands[0].Type.IsKnownType(KnownTypeCode.Boolean))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseXor(a' b)))' false' LiftType.Regular);  					if (IsNullableBooleanType(rr.Operands[0].Type))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => _runtimeLibrary.LiftedBooleanXor(a' b' this)' false' LiftType.Regular);	// We have already lifted it' so it should not be lifted again.  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseXor' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.GreaterThan:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Greater' rr.IsLiftedOperator' LiftType.Comparison);    				case ExpressionType.GreaterThanOrEqual:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.GreaterOrEqual' rr.IsLiftedOperator' LiftType.Comparison);    				case ExpressionType.Equal:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => CanDoSimpleComparisonForEquals(rr.Operands[0]' rr.Operands[1]) ? JsExpression.Same(a' b) : _runtimeLibrary.ReferenceEquals(a' b' this)' false' LiftType.Equality);    				case ExpressionType.LeftShift:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.LeftShift' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.LessThan:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Lesser' rr.IsLiftedOperator' LiftType.Comparison);    				case ExpressionType.LessThanOrEqual:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.LesserOrEqual' rr.IsLiftedOperator' LiftType.Comparison);    				case ExpressionType.Modulo:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Modulo' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.Multiply:  				case ExpressionType.MultiplyChecked:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Multiply' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.NotEqual:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => CanDoSimpleComparisonForEquals(rr.Operands[0]' rr.Operands[1]) ? JsExpression.NotSame(a' b) : _runtimeLibrary.ReferenceNotEquals(a' b' this)' false' LiftType.Inequality);    				case ExpressionType.Or:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (rr.Operands[0].Type.IsKnownType(KnownTypeCode.Boolean))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseOr(a' b)))' false' LiftType.Regular);  					if (IsNullableBooleanType(rr.Operands[0].Type))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => _runtimeLibrary.LiftedBooleanOr(a' b' this)' false' LiftType.Regular);	// We have already lifted it' so it should not be lifted again.  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseOr' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.OrElse:  					return CompileAndAlsoOrOrElse(rr.Operands[0]' rr.Operands[1]' false);    				case ExpressionType.RightShift:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					var origType = rr.Operands[0] is ConversionResolveResult && rr.Operands[0].GetType().Name != "CastResolveResult" ? ((ConversionResolveResult)rr.Operands[0]).Input.Type : rr.Operands[0].Type;    					if (IsUnsignedType(origType))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.RightShiftUnsigned' rr.IsLiftedOperator' LiftType.Regular);  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.RightShiftSigned' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.Subtract:  				case ExpressionType.SubtractChecked:  					if (rr.Operands[0].Type.Kind == TypeKind.Delegate) {  						var del = (ITypeDefinition)_compilation.FindType(KnownTypeCode.Delegate);  						var remove = del.GetMethods().Single(m => m.Name == "Remove" && m.Parameters.Count == 2);  						var impl = _metadataImporter.GetMethodSemantics(remove);  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => CompileMethodInvocation(impl' remove' new[] { _runtimeLibrary.InstantiateType(del' this)' a' b }' false)' false' LiftType.Regular);  					}  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Subtract' rr.IsLiftedOperator' LiftType.Regular);    				// Unary operators    				case ExpressionType.Negate:  				case ExpressionType.NegateChecked:  					return CompileUnaryOperator(rr.Operands[0]' JsExpression.Negate' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.UnaryPlus:  					return CompileUnaryOperator(rr.Operands[0]' JsExpression.Positive' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.Not:  					return CompileUnaryOperator(rr.Operands[0]' JsExpression.LogicalNot' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.OnesComplement:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					return CompileUnaryOperator(rr.Operands[0]' JsExpression.BitwiseNot' rr.IsLiftedOperator' LiftType.Regular);    				// Conditional operator    				case ExpressionType.Conditional:  					return CompileConditionalOperator(rr.Operands[0]' rr.Operands[1]' rr.Operands[2]);    				case ExpressionType.Power:  				case ExpressionType.PowerAssign:  				case ExpressionType.Increment:  				case ExpressionType.Decrement:  				default:  					_errorReporter.InternalError("Unsupported operator " + rr.OperatorType);  					return JsExpression.Null;  			}
Magic Number,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The following statement contains a magic number: switch (rr.OperatorType) {  				case ExpressionType.Assign:  					return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.Assign' (a' b) => b' returnValueIsImportant' false' oldValueIsImportant: false);    				// Compound assignment operators    				case ExpressionType.AddAssign:  				case ExpressionType.AddAssignChecked:  					if (rr.Operands[0] is MemberResolveResult && ((MemberResolveResult)rr.Operands[0]).Member is IEvent) {  						return CompileEventAddOrRemove((MemberResolveResult)rr.Operands[0]' rr.Operands[1]' true);  					}  					else if (rr.Operands[0].Type.Kind == TypeKind.Delegate) {  						var del = (ITypeDefinition)_compilation.FindType(KnownTypeCode.Delegate);  						var combine = del.GetMethods().Single(m => m.Name == "Combine" && m.Parameters.Count == 2);  						var impl = _metadataImporter.GetMethodSemantics(combine);  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => CompileMethodInvocation(impl' combine' new[] { _runtimeLibrary.InstantiateType(del' this)' a' b }' false)' returnValueIsImportant' false);  					}  					else {  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.AddAssign' JsExpression.Add' returnValueIsImportant' rr.IsLiftedOperator);  					}    				case ExpressionType.AndAssign:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (rr.Operands[0].Type.IsKnownType(KnownTypeCode.Boolean))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseAnd(a' b)))' returnValueIsImportant' false);  					if (IsNullableBooleanType(rr.Operands[0].Type))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => _runtimeLibrary.LiftedBooleanAnd(a' b' this)' returnValueIsImportant' false);  					else  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseAndAssign' JsExpression.BitwiseAnd' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.DivideAssign:  					if (IsIntegerType(rr.Type))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => _runtimeLibrary.IntegerDivision(a' b' this)' returnValueIsImportant' rr.IsLiftedOperator);  					else  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.DivideAssign' JsExpression.Divide' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.ExclusiveOrAssign:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (rr.Operands[0].Type.IsKnownType(KnownTypeCode.Boolean))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseXor(a' b)))' returnValueIsImportant' false);  					if (IsNullableBooleanType(rr.Operands[0].Type))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => _runtimeLibrary.LiftedBooleanXor(a' b' this)' returnValueIsImportant' false);  					else  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseXorAssign' JsExpression.BitwiseXor' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.LeftShiftAssign:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}  					return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.LeftShiftAssign' JsExpression.LeftShift' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.ModuloAssign:  					return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.ModuloAssign' JsExpression.Modulo' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.MultiplyAssign:  				case ExpressionType.MultiplyAssignChecked:  					return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.MultiplyAssign' JsExpression.Multiply' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.OrAssign:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (rr.Operands[0].Type.IsKnownType(KnownTypeCode.Boolean))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseOr(a' b)))' returnValueIsImportant' false);  					if (IsNullableBooleanType(rr.Operands[0].Type))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => _runtimeLibrary.LiftedBooleanOr(a' b' this)' returnValueIsImportant' false);  					else  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseOrAssign' JsExpression.BitwiseOr' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.RightShiftAssign:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (IsUnsignedType(rr.Type))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.RightShiftUnsignedAssign' JsExpression.RightShiftUnsigned' returnValueIsImportant' rr.IsLiftedOperator);  					else  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.RightShiftSignedAssign' JsExpression.RightShiftSigned' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.SubtractAssign:  				case ExpressionType.SubtractAssignChecked:  					if (rr.Operands[0] is MemberResolveResult && ((MemberResolveResult)rr.Operands[0]).Member is IEvent) {  						return CompileEventAddOrRemove((MemberResolveResult)rr.Operands[0]' rr.Operands[1]' false);  					}  					else if (rr.Operands[0].Type.Kind == TypeKind.Delegate) {  						var del = (ITypeDefinition)_compilation.FindType(KnownTypeCode.Delegate);  						var remove = del.GetMethods().Single(m => m.Name == "Remove" && m.Parameters.Count == 2);  						var impl = _metadataImporter.GetMethodSemantics(remove);  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => CompileMethodInvocation(impl' remove' new[] { _runtimeLibrary.InstantiateType(del' this)' a' b }' false)' returnValueIsImportant' false);  					}  					else {  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.SubtractAssign' JsExpression.Subtract' returnValueIsImportant' rr.IsLiftedOperator);  					}    				case ExpressionType.PreIncrementAssign:  					return CompileCompoundAssignment(rr.Operands[0]' null' (a' b) => JsExpression.PrefixPlusPlus(a)' (a' b) => JsExpression.Add(a' JsExpression.Number(1))' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.PreDecrementAssign:  					return CompileCompoundAssignment(rr.Operands[0]' null' (a' b) => JsExpression.PrefixMinusMinus(a)' (a' b) => JsExpression.Subtract(a' JsExpression.Number(1))' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.PostIncrementAssign:  					return CompileCompoundAssignment(rr.Operands[0]' null' (a' b) => JsExpression.PostfixPlusPlus(a)' (a' b) => JsExpression.Add(a' JsExpression.Number(1))' returnValueIsImportant' rr.IsLiftedOperator' returnValueBeforeChange: true);    				case ExpressionType.PostDecrementAssign:  					return CompileCompoundAssignment(rr.Operands[0]' null' (a' b) => JsExpression.PostfixMinusMinus(a)' (a' b) => JsExpression.Subtract(a' JsExpression.Number(1))' returnValueIsImportant' rr.IsLiftedOperator' returnValueBeforeChange: true);    				// Binary non-assigning operators    				case ExpressionType.Add:  				case ExpressionType.AddChecked:  					if (rr.Operands[0].Type.Kind == TypeKind.Delegate) {  						var del = (ITypeDefinition)_compilation.FindType(KnownTypeCode.Delegate);  						var combine = del.GetMethods().Single(m => m.Name == "Combine" && m.Parameters.Count == 2);  						var impl = _metadataImporter.GetMethodSemantics(combine);  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => CompileMethodInvocation(impl' combine' new[] { _runtimeLibrary.InstantiateType(del' this)' a' b }' false)' false' LiftType.Regular);  					}  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Add' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.And:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (rr.Operands[0].Type.IsKnownType(KnownTypeCode.Boolean))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseAnd(a' b)))' false' LiftType.Regular);  					if (IsNullableBooleanType(rr.Operands[0].Type))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => _runtimeLibrary.LiftedBooleanAnd(a' b' this)' false' LiftType.Regular);	// We have already lifted it' so it should not be lifted again.  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseAnd' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.AndAlso:  					return CompileAndAlsoOrOrElse(rr.Operands[0]' rr.Operands[1]' true);    				case ExpressionType.Coalesce:  					return CompileCoalesce(rr.Type' rr.Operands[0]' rr.Operands[1]);    				case ExpressionType.Divide:  					if (IsIntegerType(rr.Type))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => _runtimeLibrary.IntegerDivision(a' b' this)' rr.IsLiftedOperator' LiftType.Regular);  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Divide' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.ExclusiveOr:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (rr.Operands[0].Type.IsKnownType(KnownTypeCode.Boolean))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseXor(a' b)))' false' LiftType.Regular);  					if (IsNullableBooleanType(rr.Operands[0].Type))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => _runtimeLibrary.LiftedBooleanXor(a' b' this)' false' LiftType.Regular);	// We have already lifted it' so it should not be lifted again.  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseXor' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.GreaterThan:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Greater' rr.IsLiftedOperator' LiftType.Comparison);    				case ExpressionType.GreaterThanOrEqual:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.GreaterOrEqual' rr.IsLiftedOperator' LiftType.Comparison);    				case ExpressionType.Equal:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => CanDoSimpleComparisonForEquals(rr.Operands[0]' rr.Operands[1]) ? JsExpression.Same(a' b) : _runtimeLibrary.ReferenceEquals(a' b' this)' false' LiftType.Equality);    				case ExpressionType.LeftShift:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.LeftShift' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.LessThan:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Lesser' rr.IsLiftedOperator' LiftType.Comparison);    				case ExpressionType.LessThanOrEqual:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.LesserOrEqual' rr.IsLiftedOperator' LiftType.Comparison);    				case ExpressionType.Modulo:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Modulo' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.Multiply:  				case ExpressionType.MultiplyChecked:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Multiply' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.NotEqual:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => CanDoSimpleComparisonForEquals(rr.Operands[0]' rr.Operands[1]) ? JsExpression.NotSame(a' b) : _runtimeLibrary.ReferenceNotEquals(a' b' this)' false' LiftType.Inequality);    				case ExpressionType.Or:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (rr.Operands[0].Type.IsKnownType(KnownTypeCode.Boolean))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseOr(a' b)))' false' LiftType.Regular);  					if (IsNullableBooleanType(rr.Operands[0].Type))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => _runtimeLibrary.LiftedBooleanOr(a' b' this)' false' LiftType.Regular);	// We have already lifted it' so it should not be lifted again.  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseOr' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.OrElse:  					return CompileAndAlsoOrOrElse(rr.Operands[0]' rr.Operands[1]' false);    				case ExpressionType.RightShift:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					var origType = rr.Operands[0] is ConversionResolveResult && rr.Operands[0].GetType().Name != "CastResolveResult" ? ((ConversionResolveResult)rr.Operands[0]).Input.Type : rr.Operands[0].Type;    					if (IsUnsignedType(origType))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.RightShiftUnsigned' rr.IsLiftedOperator' LiftType.Regular);  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.RightShiftSigned' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.Subtract:  				case ExpressionType.SubtractChecked:  					if (rr.Operands[0].Type.Kind == TypeKind.Delegate) {  						var del = (ITypeDefinition)_compilation.FindType(KnownTypeCode.Delegate);  						var remove = del.GetMethods().Single(m => m.Name == "Remove" && m.Parameters.Count == 2);  						var impl = _metadataImporter.GetMethodSemantics(remove);  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => CompileMethodInvocation(impl' remove' new[] { _runtimeLibrary.InstantiateType(del' this)' a' b }' false)' false' LiftType.Regular);  					}  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Subtract' rr.IsLiftedOperator' LiftType.Regular);    				// Unary operators    				case ExpressionType.Negate:  				case ExpressionType.NegateChecked:  					return CompileUnaryOperator(rr.Operands[0]' JsExpression.Negate' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.UnaryPlus:  					return CompileUnaryOperator(rr.Operands[0]' JsExpression.Positive' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.Not:  					return CompileUnaryOperator(rr.Operands[0]' JsExpression.LogicalNot' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.OnesComplement:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					return CompileUnaryOperator(rr.Operands[0]' JsExpression.BitwiseNot' rr.IsLiftedOperator' LiftType.Regular);    				// Conditional operator    				case ExpressionType.Conditional:  					return CompileConditionalOperator(rr.Operands[0]' rr.Operands[1]' rr.Operands[2]);    				case ExpressionType.Power:  				case ExpressionType.PowerAssign:  				case ExpressionType.Increment:  				case ExpressionType.Decrement:  				default:  					_errorReporter.InternalError("Unsupported operator " + rr.OperatorType);  					return JsExpression.Null;  			}
Magic Number,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The following statement contains a magic number: switch (rr.OperatorType) {  				case ExpressionType.Assign:  					return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.Assign' (a' b) => b' returnValueIsImportant' false' oldValueIsImportant: false);    				// Compound assignment operators    				case ExpressionType.AddAssign:  				case ExpressionType.AddAssignChecked:  					if (rr.Operands[0] is MemberResolveResult && ((MemberResolveResult)rr.Operands[0]).Member is IEvent) {  						return CompileEventAddOrRemove((MemberResolveResult)rr.Operands[0]' rr.Operands[1]' true);  					}  					else if (rr.Operands[0].Type.Kind == TypeKind.Delegate) {  						var del = (ITypeDefinition)_compilation.FindType(KnownTypeCode.Delegate);  						var combine = del.GetMethods().Single(m => m.Name == "Combine" && m.Parameters.Count == 2);  						var impl = _metadataImporter.GetMethodSemantics(combine);  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => CompileMethodInvocation(impl' combine' new[] { _runtimeLibrary.InstantiateType(del' this)' a' b }' false)' returnValueIsImportant' false);  					}  					else {  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.AddAssign' JsExpression.Add' returnValueIsImportant' rr.IsLiftedOperator);  					}    				case ExpressionType.AndAssign:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (rr.Operands[0].Type.IsKnownType(KnownTypeCode.Boolean))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseAnd(a' b)))' returnValueIsImportant' false);  					if (IsNullableBooleanType(rr.Operands[0].Type))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => _runtimeLibrary.LiftedBooleanAnd(a' b' this)' returnValueIsImportant' false);  					else  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseAndAssign' JsExpression.BitwiseAnd' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.DivideAssign:  					if (IsIntegerType(rr.Type))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => _runtimeLibrary.IntegerDivision(a' b' this)' returnValueIsImportant' rr.IsLiftedOperator);  					else  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.DivideAssign' JsExpression.Divide' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.ExclusiveOrAssign:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (rr.Operands[0].Type.IsKnownType(KnownTypeCode.Boolean))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseXor(a' b)))' returnValueIsImportant' false);  					if (IsNullableBooleanType(rr.Operands[0].Type))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => _runtimeLibrary.LiftedBooleanXor(a' b' this)' returnValueIsImportant' false);  					else  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseXorAssign' JsExpression.BitwiseXor' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.LeftShiftAssign:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}  					return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.LeftShiftAssign' JsExpression.LeftShift' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.ModuloAssign:  					return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.ModuloAssign' JsExpression.Modulo' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.MultiplyAssign:  				case ExpressionType.MultiplyAssignChecked:  					return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.MultiplyAssign' JsExpression.Multiply' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.OrAssign:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (rr.Operands[0].Type.IsKnownType(KnownTypeCode.Boolean))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseOr(a' b)))' returnValueIsImportant' false);  					if (IsNullableBooleanType(rr.Operands[0].Type))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => _runtimeLibrary.LiftedBooleanOr(a' b' this)' returnValueIsImportant' false);  					else  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseOrAssign' JsExpression.BitwiseOr' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.RightShiftAssign:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (IsUnsignedType(rr.Type))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.RightShiftUnsignedAssign' JsExpression.RightShiftUnsigned' returnValueIsImportant' rr.IsLiftedOperator);  					else  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.RightShiftSignedAssign' JsExpression.RightShiftSigned' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.SubtractAssign:  				case ExpressionType.SubtractAssignChecked:  					if (rr.Operands[0] is MemberResolveResult && ((MemberResolveResult)rr.Operands[0]).Member is IEvent) {  						return CompileEventAddOrRemove((MemberResolveResult)rr.Operands[0]' rr.Operands[1]' false);  					}  					else if (rr.Operands[0].Type.Kind == TypeKind.Delegate) {  						var del = (ITypeDefinition)_compilation.FindType(KnownTypeCode.Delegate);  						var remove = del.GetMethods().Single(m => m.Name == "Remove" && m.Parameters.Count == 2);  						var impl = _metadataImporter.GetMethodSemantics(remove);  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => CompileMethodInvocation(impl' remove' new[] { _runtimeLibrary.InstantiateType(del' this)' a' b }' false)' returnValueIsImportant' false);  					}  					else {  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.SubtractAssign' JsExpression.Subtract' returnValueIsImportant' rr.IsLiftedOperator);  					}    				case ExpressionType.PreIncrementAssign:  					return CompileCompoundAssignment(rr.Operands[0]' null' (a' b) => JsExpression.PrefixPlusPlus(a)' (a' b) => JsExpression.Add(a' JsExpression.Number(1))' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.PreDecrementAssign:  					return CompileCompoundAssignment(rr.Operands[0]' null' (a' b) => JsExpression.PrefixMinusMinus(a)' (a' b) => JsExpression.Subtract(a' JsExpression.Number(1))' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.PostIncrementAssign:  					return CompileCompoundAssignment(rr.Operands[0]' null' (a' b) => JsExpression.PostfixPlusPlus(a)' (a' b) => JsExpression.Add(a' JsExpression.Number(1))' returnValueIsImportant' rr.IsLiftedOperator' returnValueBeforeChange: true);    				case ExpressionType.PostDecrementAssign:  					return CompileCompoundAssignment(rr.Operands[0]' null' (a' b) => JsExpression.PostfixMinusMinus(a)' (a' b) => JsExpression.Subtract(a' JsExpression.Number(1))' returnValueIsImportant' rr.IsLiftedOperator' returnValueBeforeChange: true);    				// Binary non-assigning operators    				case ExpressionType.Add:  				case ExpressionType.AddChecked:  					if (rr.Operands[0].Type.Kind == TypeKind.Delegate) {  						var del = (ITypeDefinition)_compilation.FindType(KnownTypeCode.Delegate);  						var combine = del.GetMethods().Single(m => m.Name == "Combine" && m.Parameters.Count == 2);  						var impl = _metadataImporter.GetMethodSemantics(combine);  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => CompileMethodInvocation(impl' combine' new[] { _runtimeLibrary.InstantiateType(del' this)' a' b }' false)' false' LiftType.Regular);  					}  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Add' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.And:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (rr.Operands[0].Type.IsKnownType(KnownTypeCode.Boolean))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseAnd(a' b)))' false' LiftType.Regular);  					if (IsNullableBooleanType(rr.Operands[0].Type))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => _runtimeLibrary.LiftedBooleanAnd(a' b' this)' false' LiftType.Regular);	// We have already lifted it' so it should not be lifted again.  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseAnd' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.AndAlso:  					return CompileAndAlsoOrOrElse(rr.Operands[0]' rr.Operands[1]' true);    				case ExpressionType.Coalesce:  					return CompileCoalesce(rr.Type' rr.Operands[0]' rr.Operands[1]);    				case ExpressionType.Divide:  					if (IsIntegerType(rr.Type))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => _runtimeLibrary.IntegerDivision(a' b' this)' rr.IsLiftedOperator' LiftType.Regular);  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Divide' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.ExclusiveOr:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (rr.Operands[0].Type.IsKnownType(KnownTypeCode.Boolean))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseXor(a' b)))' false' LiftType.Regular);  					if (IsNullableBooleanType(rr.Operands[0].Type))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => _runtimeLibrary.LiftedBooleanXor(a' b' this)' false' LiftType.Regular);	// We have already lifted it' so it should not be lifted again.  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseXor' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.GreaterThan:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Greater' rr.IsLiftedOperator' LiftType.Comparison);    				case ExpressionType.GreaterThanOrEqual:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.GreaterOrEqual' rr.IsLiftedOperator' LiftType.Comparison);    				case ExpressionType.Equal:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => CanDoSimpleComparisonForEquals(rr.Operands[0]' rr.Operands[1]) ? JsExpression.Same(a' b) : _runtimeLibrary.ReferenceEquals(a' b' this)' false' LiftType.Equality);    				case ExpressionType.LeftShift:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.LeftShift' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.LessThan:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Lesser' rr.IsLiftedOperator' LiftType.Comparison);    				case ExpressionType.LessThanOrEqual:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.LesserOrEqual' rr.IsLiftedOperator' LiftType.Comparison);    				case ExpressionType.Modulo:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Modulo' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.Multiply:  				case ExpressionType.MultiplyChecked:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Multiply' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.NotEqual:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => CanDoSimpleComparisonForEquals(rr.Operands[0]' rr.Operands[1]) ? JsExpression.NotSame(a' b) : _runtimeLibrary.ReferenceNotEquals(a' b' this)' false' LiftType.Inequality);    				case ExpressionType.Or:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (rr.Operands[0].Type.IsKnownType(KnownTypeCode.Boolean))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseOr(a' b)))' false' LiftType.Regular);  					if (IsNullableBooleanType(rr.Operands[0].Type))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => _runtimeLibrary.LiftedBooleanOr(a' b' this)' false' LiftType.Regular);	// We have already lifted it' so it should not be lifted again.  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseOr' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.OrElse:  					return CompileAndAlsoOrOrElse(rr.Operands[0]' rr.Operands[1]' false);    				case ExpressionType.RightShift:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					var origType = rr.Operands[0] is ConversionResolveResult && rr.Operands[0].GetType().Name != "CastResolveResult" ? ((ConversionResolveResult)rr.Operands[0]).Input.Type : rr.Operands[0].Type;    					if (IsUnsignedType(origType))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.RightShiftUnsigned' rr.IsLiftedOperator' LiftType.Regular);  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.RightShiftSigned' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.Subtract:  				case ExpressionType.SubtractChecked:  					if (rr.Operands[0].Type.Kind == TypeKind.Delegate) {  						var del = (ITypeDefinition)_compilation.FindType(KnownTypeCode.Delegate);  						var remove = del.GetMethods().Single(m => m.Name == "Remove" && m.Parameters.Count == 2);  						var impl = _metadataImporter.GetMethodSemantics(remove);  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => CompileMethodInvocation(impl' remove' new[] { _runtimeLibrary.InstantiateType(del' this)' a' b }' false)' false' LiftType.Regular);  					}  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Subtract' rr.IsLiftedOperator' LiftType.Regular);    				// Unary operators    				case ExpressionType.Negate:  				case ExpressionType.NegateChecked:  					return CompileUnaryOperator(rr.Operands[0]' JsExpression.Negate' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.UnaryPlus:  					return CompileUnaryOperator(rr.Operands[0]' JsExpression.Positive' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.Not:  					return CompileUnaryOperator(rr.Operands[0]' JsExpression.LogicalNot' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.OnesComplement:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					return CompileUnaryOperator(rr.Operands[0]' JsExpression.BitwiseNot' rr.IsLiftedOperator' LiftType.Regular);    				// Conditional operator    				case ExpressionType.Conditional:  					return CompileConditionalOperator(rr.Operands[0]' rr.Operands[1]' rr.Operands[2]);    				case ExpressionType.Power:  				case ExpressionType.PowerAssign:  				case ExpressionType.Increment:  				case ExpressionType.Decrement:  				default:  					_errorReporter.InternalError("Unsupported operator " + rr.OperatorType);  					return JsExpression.Null;  			}
Magic Number,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The following statement contains a magic number: switch (rr.OperatorType) {  				case ExpressionType.Assign:  					return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.Assign' (a' b) => b' returnValueIsImportant' false' oldValueIsImportant: false);    				// Compound assignment operators    				case ExpressionType.AddAssign:  				case ExpressionType.AddAssignChecked:  					if (rr.Operands[0] is MemberResolveResult && ((MemberResolveResult)rr.Operands[0]).Member is IEvent) {  						return CompileEventAddOrRemove((MemberResolveResult)rr.Operands[0]' rr.Operands[1]' true);  					}  					else if (rr.Operands[0].Type.Kind == TypeKind.Delegate) {  						var del = (ITypeDefinition)_compilation.FindType(KnownTypeCode.Delegate);  						var combine = del.GetMethods().Single(m => m.Name == "Combine" && m.Parameters.Count == 2);  						var impl = _metadataImporter.GetMethodSemantics(combine);  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => CompileMethodInvocation(impl' combine' new[] { _runtimeLibrary.InstantiateType(del' this)' a' b }' false)' returnValueIsImportant' false);  					}  					else {  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.AddAssign' JsExpression.Add' returnValueIsImportant' rr.IsLiftedOperator);  					}    				case ExpressionType.AndAssign:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (rr.Operands[0].Type.IsKnownType(KnownTypeCode.Boolean))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseAnd(a' b)))' returnValueIsImportant' false);  					if (IsNullableBooleanType(rr.Operands[0].Type))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => _runtimeLibrary.LiftedBooleanAnd(a' b' this)' returnValueIsImportant' false);  					else  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseAndAssign' JsExpression.BitwiseAnd' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.DivideAssign:  					if (IsIntegerType(rr.Type))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => _runtimeLibrary.IntegerDivision(a' b' this)' returnValueIsImportant' rr.IsLiftedOperator);  					else  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.DivideAssign' JsExpression.Divide' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.ExclusiveOrAssign:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (rr.Operands[0].Type.IsKnownType(KnownTypeCode.Boolean))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseXor(a' b)))' returnValueIsImportant' false);  					if (IsNullableBooleanType(rr.Operands[0].Type))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => _runtimeLibrary.LiftedBooleanXor(a' b' this)' returnValueIsImportant' false);  					else  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseXorAssign' JsExpression.BitwiseXor' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.LeftShiftAssign:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}  					return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.LeftShiftAssign' JsExpression.LeftShift' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.ModuloAssign:  					return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.ModuloAssign' JsExpression.Modulo' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.MultiplyAssign:  				case ExpressionType.MultiplyAssignChecked:  					return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.MultiplyAssign' JsExpression.Multiply' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.OrAssign:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (rr.Operands[0].Type.IsKnownType(KnownTypeCode.Boolean))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseOr(a' b)))' returnValueIsImportant' false);  					if (IsNullableBooleanType(rr.Operands[0].Type))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => _runtimeLibrary.LiftedBooleanOr(a' b' this)' returnValueIsImportant' false);  					else  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseOrAssign' JsExpression.BitwiseOr' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.RightShiftAssign:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (IsUnsignedType(rr.Type))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.RightShiftUnsignedAssign' JsExpression.RightShiftUnsigned' returnValueIsImportant' rr.IsLiftedOperator);  					else  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.RightShiftSignedAssign' JsExpression.RightShiftSigned' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.SubtractAssign:  				case ExpressionType.SubtractAssignChecked:  					if (rr.Operands[0] is MemberResolveResult && ((MemberResolveResult)rr.Operands[0]).Member is IEvent) {  						return CompileEventAddOrRemove((MemberResolveResult)rr.Operands[0]' rr.Operands[1]' false);  					}  					else if (rr.Operands[0].Type.Kind == TypeKind.Delegate) {  						var del = (ITypeDefinition)_compilation.FindType(KnownTypeCode.Delegate);  						var remove = del.GetMethods().Single(m => m.Name == "Remove" && m.Parameters.Count == 2);  						var impl = _metadataImporter.GetMethodSemantics(remove);  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => CompileMethodInvocation(impl' remove' new[] { _runtimeLibrary.InstantiateType(del' this)' a' b }' false)' returnValueIsImportant' false);  					}  					else {  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.SubtractAssign' JsExpression.Subtract' returnValueIsImportant' rr.IsLiftedOperator);  					}    				case ExpressionType.PreIncrementAssign:  					return CompileCompoundAssignment(rr.Operands[0]' null' (a' b) => JsExpression.PrefixPlusPlus(a)' (a' b) => JsExpression.Add(a' JsExpression.Number(1))' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.PreDecrementAssign:  					return CompileCompoundAssignment(rr.Operands[0]' null' (a' b) => JsExpression.PrefixMinusMinus(a)' (a' b) => JsExpression.Subtract(a' JsExpression.Number(1))' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.PostIncrementAssign:  					return CompileCompoundAssignment(rr.Operands[0]' null' (a' b) => JsExpression.PostfixPlusPlus(a)' (a' b) => JsExpression.Add(a' JsExpression.Number(1))' returnValueIsImportant' rr.IsLiftedOperator' returnValueBeforeChange: true);    				case ExpressionType.PostDecrementAssign:  					return CompileCompoundAssignment(rr.Operands[0]' null' (a' b) => JsExpression.PostfixMinusMinus(a)' (a' b) => JsExpression.Subtract(a' JsExpression.Number(1))' returnValueIsImportant' rr.IsLiftedOperator' returnValueBeforeChange: true);    				// Binary non-assigning operators    				case ExpressionType.Add:  				case ExpressionType.AddChecked:  					if (rr.Operands[0].Type.Kind == TypeKind.Delegate) {  						var del = (ITypeDefinition)_compilation.FindType(KnownTypeCode.Delegate);  						var combine = del.GetMethods().Single(m => m.Name == "Combine" && m.Parameters.Count == 2);  						var impl = _metadataImporter.GetMethodSemantics(combine);  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => CompileMethodInvocation(impl' combine' new[] { _runtimeLibrary.InstantiateType(del' this)' a' b }' false)' false' LiftType.Regular);  					}  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Add' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.And:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (rr.Operands[0].Type.IsKnownType(KnownTypeCode.Boolean))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseAnd(a' b)))' false' LiftType.Regular);  					if (IsNullableBooleanType(rr.Operands[0].Type))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => _runtimeLibrary.LiftedBooleanAnd(a' b' this)' false' LiftType.Regular);	// We have already lifted it' so it should not be lifted again.  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseAnd' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.AndAlso:  					return CompileAndAlsoOrOrElse(rr.Operands[0]' rr.Operands[1]' true);    				case ExpressionType.Coalesce:  					return CompileCoalesce(rr.Type' rr.Operands[0]' rr.Operands[1]);    				case ExpressionType.Divide:  					if (IsIntegerType(rr.Type))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => _runtimeLibrary.IntegerDivision(a' b' this)' rr.IsLiftedOperator' LiftType.Regular);  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Divide' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.ExclusiveOr:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (rr.Operands[0].Type.IsKnownType(KnownTypeCode.Boolean))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseXor(a' b)))' false' LiftType.Regular);  					if (IsNullableBooleanType(rr.Operands[0].Type))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => _runtimeLibrary.LiftedBooleanXor(a' b' this)' false' LiftType.Regular);	// We have already lifted it' so it should not be lifted again.  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseXor' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.GreaterThan:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Greater' rr.IsLiftedOperator' LiftType.Comparison);    				case ExpressionType.GreaterThanOrEqual:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.GreaterOrEqual' rr.IsLiftedOperator' LiftType.Comparison);    				case ExpressionType.Equal:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => CanDoSimpleComparisonForEquals(rr.Operands[0]' rr.Operands[1]) ? JsExpression.Same(a' b) : _runtimeLibrary.ReferenceEquals(a' b' this)' false' LiftType.Equality);    				case ExpressionType.LeftShift:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.LeftShift' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.LessThan:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Lesser' rr.IsLiftedOperator' LiftType.Comparison);    				case ExpressionType.LessThanOrEqual:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.LesserOrEqual' rr.IsLiftedOperator' LiftType.Comparison);    				case ExpressionType.Modulo:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Modulo' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.Multiply:  				case ExpressionType.MultiplyChecked:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Multiply' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.NotEqual:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => CanDoSimpleComparisonForEquals(rr.Operands[0]' rr.Operands[1]) ? JsExpression.NotSame(a' b) : _runtimeLibrary.ReferenceNotEquals(a' b' this)' false' LiftType.Inequality);    				case ExpressionType.Or:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (rr.Operands[0].Type.IsKnownType(KnownTypeCode.Boolean))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseOr(a' b)))' false' LiftType.Regular);  					if (IsNullableBooleanType(rr.Operands[0].Type))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => _runtimeLibrary.LiftedBooleanOr(a' b' this)' false' LiftType.Regular);	// We have already lifted it' so it should not be lifted again.  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseOr' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.OrElse:  					return CompileAndAlsoOrOrElse(rr.Operands[0]' rr.Operands[1]' false);    				case ExpressionType.RightShift:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					var origType = rr.Operands[0] is ConversionResolveResult && rr.Operands[0].GetType().Name != "CastResolveResult" ? ((ConversionResolveResult)rr.Operands[0]).Input.Type : rr.Operands[0].Type;    					if (IsUnsignedType(origType))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.RightShiftUnsigned' rr.IsLiftedOperator' LiftType.Regular);  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.RightShiftSigned' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.Subtract:  				case ExpressionType.SubtractChecked:  					if (rr.Operands[0].Type.Kind == TypeKind.Delegate) {  						var del = (ITypeDefinition)_compilation.FindType(KnownTypeCode.Delegate);  						var remove = del.GetMethods().Single(m => m.Name == "Remove" && m.Parameters.Count == 2);  						var impl = _metadataImporter.GetMethodSemantics(remove);  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => CompileMethodInvocation(impl' remove' new[] { _runtimeLibrary.InstantiateType(del' this)' a' b }' false)' false' LiftType.Regular);  					}  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Subtract' rr.IsLiftedOperator' LiftType.Regular);    				// Unary operators    				case ExpressionType.Negate:  				case ExpressionType.NegateChecked:  					return CompileUnaryOperator(rr.Operands[0]' JsExpression.Negate' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.UnaryPlus:  					return CompileUnaryOperator(rr.Operands[0]' JsExpression.Positive' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.Not:  					return CompileUnaryOperator(rr.Operands[0]' JsExpression.LogicalNot' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.OnesComplement:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					return CompileUnaryOperator(rr.Operands[0]' JsExpression.BitwiseNot' rr.IsLiftedOperator' LiftType.Regular);    				// Conditional operator    				case ExpressionType.Conditional:  					return CompileConditionalOperator(rr.Operands[0]' rr.Operands[1]' rr.Operands[2]);    				case ExpressionType.Power:  				case ExpressionType.PowerAssign:  				case ExpressionType.Increment:  				case ExpressionType.Decrement:  				default:  					_errorReporter.InternalError("Unsupported operator " + rr.OperatorType);  					return JsExpression.Null;  			}
Magic Number,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,VisitOperatorResolveResult,The following statement contains a magic number: switch (rr.OperatorType) {  				case ExpressionType.Assign:  					return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.Assign' (a' b) => b' returnValueIsImportant' false' oldValueIsImportant: false);    				// Compound assignment operators    				case ExpressionType.AddAssign:  				case ExpressionType.AddAssignChecked:  					if (rr.Operands[0] is MemberResolveResult && ((MemberResolveResult)rr.Operands[0]).Member is IEvent) {  						return CompileEventAddOrRemove((MemberResolveResult)rr.Operands[0]' rr.Operands[1]' true);  					}  					else if (rr.Operands[0].Type.Kind == TypeKind.Delegate) {  						var del = (ITypeDefinition)_compilation.FindType(KnownTypeCode.Delegate);  						var combine = del.GetMethods().Single(m => m.Name == "Combine" && m.Parameters.Count == 2);  						var impl = _metadataImporter.GetMethodSemantics(combine);  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => CompileMethodInvocation(impl' combine' new[] { _runtimeLibrary.InstantiateType(del' this)' a' b }' false)' returnValueIsImportant' false);  					}  					else {  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.AddAssign' JsExpression.Add' returnValueIsImportant' rr.IsLiftedOperator);  					}    				case ExpressionType.AndAssign:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (rr.Operands[0].Type.IsKnownType(KnownTypeCode.Boolean))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseAnd(a' b)))' returnValueIsImportant' false);  					if (IsNullableBooleanType(rr.Operands[0].Type))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => _runtimeLibrary.LiftedBooleanAnd(a' b' this)' returnValueIsImportant' false);  					else  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseAndAssign' JsExpression.BitwiseAnd' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.DivideAssign:  					if (IsIntegerType(rr.Type))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => _runtimeLibrary.IntegerDivision(a' b' this)' returnValueIsImportant' rr.IsLiftedOperator);  					else  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.DivideAssign' JsExpression.Divide' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.ExclusiveOrAssign:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (rr.Operands[0].Type.IsKnownType(KnownTypeCode.Boolean))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseXor(a' b)))' returnValueIsImportant' false);  					if (IsNullableBooleanType(rr.Operands[0].Type))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => _runtimeLibrary.LiftedBooleanXor(a' b' this)' returnValueIsImportant' false);  					else  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseXorAssign' JsExpression.BitwiseXor' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.LeftShiftAssign:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}  					return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.LeftShiftAssign' JsExpression.LeftShift' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.ModuloAssign:  					return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.ModuloAssign' JsExpression.Modulo' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.MultiplyAssign:  				case ExpressionType.MultiplyAssignChecked:  					return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.MultiplyAssign' JsExpression.Multiply' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.OrAssign:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (rr.Operands[0].Type.IsKnownType(KnownTypeCode.Boolean))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseOr(a' b)))' returnValueIsImportant' false);  					if (IsNullableBooleanType(rr.Operands[0].Type))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => _runtimeLibrary.LiftedBooleanOr(a' b' this)' returnValueIsImportant' false);  					else  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseOrAssign' JsExpression.BitwiseOr' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.RightShiftAssign:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (IsUnsignedType(rr.Type))  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.RightShiftUnsignedAssign' JsExpression.RightShiftUnsigned' returnValueIsImportant' rr.IsLiftedOperator);  					else  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.RightShiftSignedAssign' JsExpression.RightShiftSigned' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.SubtractAssign:  				case ExpressionType.SubtractAssignChecked:  					if (rr.Operands[0] is MemberResolveResult && ((MemberResolveResult)rr.Operands[0]).Member is IEvent) {  						return CompileEventAddOrRemove((MemberResolveResult)rr.Operands[0]' rr.Operands[1]' false);  					}  					else if (rr.Operands[0].Type.Kind == TypeKind.Delegate) {  						var del = (ITypeDefinition)_compilation.FindType(KnownTypeCode.Delegate);  						var remove = del.GetMethods().Single(m => m.Name == "Remove" && m.Parameters.Count == 2);  						var impl = _metadataImporter.GetMethodSemantics(remove);  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' null' (a' b) => CompileMethodInvocation(impl' remove' new[] { _runtimeLibrary.InstantiateType(del' this)' a' b }' false)' returnValueIsImportant' false);  					}  					else {  						return CompileCompoundAssignment(rr.Operands[0]' rr.Operands[1]' JsExpression.SubtractAssign' JsExpression.Subtract' returnValueIsImportant' rr.IsLiftedOperator);  					}    				case ExpressionType.PreIncrementAssign:  					return CompileCompoundAssignment(rr.Operands[0]' null' (a' b) => JsExpression.PrefixPlusPlus(a)' (a' b) => JsExpression.Add(a' JsExpression.Number(1))' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.PreDecrementAssign:  					return CompileCompoundAssignment(rr.Operands[0]' null' (a' b) => JsExpression.PrefixMinusMinus(a)' (a' b) => JsExpression.Subtract(a' JsExpression.Number(1))' returnValueIsImportant' rr.IsLiftedOperator);    				case ExpressionType.PostIncrementAssign:  					return CompileCompoundAssignment(rr.Operands[0]' null' (a' b) => JsExpression.PostfixPlusPlus(a)' (a' b) => JsExpression.Add(a' JsExpression.Number(1))' returnValueIsImportant' rr.IsLiftedOperator' returnValueBeforeChange: true);    				case ExpressionType.PostDecrementAssign:  					return CompileCompoundAssignment(rr.Operands[0]' null' (a' b) => JsExpression.PostfixMinusMinus(a)' (a' b) => JsExpression.Subtract(a' JsExpression.Number(1))' returnValueIsImportant' rr.IsLiftedOperator' returnValueBeforeChange: true);    				// Binary non-assigning operators    				case ExpressionType.Add:  				case ExpressionType.AddChecked:  					if (rr.Operands[0].Type.Kind == TypeKind.Delegate) {  						var del = (ITypeDefinition)_compilation.FindType(KnownTypeCode.Delegate);  						var combine = del.GetMethods().Single(m => m.Name == "Combine" && m.Parameters.Count == 2);  						var impl = _metadataImporter.GetMethodSemantics(combine);  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => CompileMethodInvocation(impl' combine' new[] { _runtimeLibrary.InstantiateType(del' this)' a' b }' false)' false' LiftType.Regular);  					}  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Add' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.And:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (rr.Operands[0].Type.IsKnownType(KnownTypeCode.Boolean))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseAnd(a' b)))' false' LiftType.Regular);  					if (IsNullableBooleanType(rr.Operands[0].Type))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => _runtimeLibrary.LiftedBooleanAnd(a' b' this)' false' LiftType.Regular);	// We have already lifted it' so it should not be lifted again.  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseAnd' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.AndAlso:  					return CompileAndAlsoOrOrElse(rr.Operands[0]' rr.Operands[1]' true);    				case ExpressionType.Coalesce:  					return CompileCoalesce(rr.Type' rr.Operands[0]' rr.Operands[1]);    				case ExpressionType.Divide:  					if (IsIntegerType(rr.Type))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => _runtimeLibrary.IntegerDivision(a' b' this)' rr.IsLiftedOperator' LiftType.Regular);  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Divide' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.ExclusiveOr:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (rr.Operands[0].Type.IsKnownType(KnownTypeCode.Boolean))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseXor(a' b)))' false' LiftType.Regular);  					if (IsNullableBooleanType(rr.Operands[0].Type))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => _runtimeLibrary.LiftedBooleanXor(a' b' this)' false' LiftType.Regular);	// We have already lifted it' so it should not be lifted again.  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseXor' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.GreaterThan:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Greater' rr.IsLiftedOperator' LiftType.Comparison);    				case ExpressionType.GreaterThanOrEqual:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.GreaterOrEqual' rr.IsLiftedOperator' LiftType.Comparison);    				case ExpressionType.Equal:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => CanDoSimpleComparisonForEquals(rr.Operands[0]' rr.Operands[1]) ? JsExpression.Same(a' b) : _runtimeLibrary.ReferenceEquals(a' b' this)' false' LiftType.Equality);    				case ExpressionType.LeftShift:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.LeftShift' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.LessThan:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Lesser' rr.IsLiftedOperator' LiftType.Comparison);    				case ExpressionType.LessThanOrEqual:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.LesserOrEqual' rr.IsLiftedOperator' LiftType.Comparison);    				case ExpressionType.Modulo:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Modulo' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.Multiply:  				case ExpressionType.MultiplyChecked:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Multiply' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.NotEqual:  					return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => CanDoSimpleComparisonForEquals(rr.Operands[0]' rr.Operands[1]) ? JsExpression.NotSame(a' b) : _runtimeLibrary.ReferenceNotEquals(a' b' this)' false' LiftType.Inequality);    				case ExpressionType.Or:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					if (rr.Operands[0].Type.IsKnownType(KnownTypeCode.Boolean))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => JsExpression.LogicalNot(JsExpression.LogicalNot(JsExpression.BitwiseOr(a' b)))' false' LiftType.Regular);  					if (IsNullableBooleanType(rr.Operands[0].Type))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => _runtimeLibrary.LiftedBooleanOr(a' b' this)' false' LiftType.Regular);	// We have already lifted it' so it should not be lifted again.  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.BitwiseOr' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.OrElse:  					return CompileAndAlsoOrOrElse(rr.Operands[0]' rr.Operands[1]' false);    				case ExpressionType.RightShift:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					var origType = rr.Operands[0] is ConversionResolveResult && rr.Operands[0].GetType().Name != "CastResolveResult" ? ((ConversionResolveResult)rr.Operands[0]).Input.Type : rr.Operands[0].Type;    					if (IsUnsignedType(origType))  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.RightShiftUnsigned' rr.IsLiftedOperator' LiftType.Regular);  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.RightShiftSigned' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.Subtract:  				case ExpressionType.SubtractChecked:  					if (rr.Operands[0].Type.Kind == TypeKind.Delegate) {  						var del = (ITypeDefinition)_compilation.FindType(KnownTypeCode.Delegate);  						var remove = del.GetMethods().Single(m => m.Name == "Remove" && m.Parameters.Count == 2);  						var impl = _metadataImporter.GetMethodSemantics(remove);  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' (a' b) => CompileMethodInvocation(impl' remove' new[] { _runtimeLibrary.InstantiateType(del' this)' a' b }' false)' false' LiftType.Regular);  					}  					else  						return CompileBinaryNonAssigningOperator(rr.Operands[0]' rr.Operands[1]' JsExpression.Subtract' rr.IsLiftedOperator' LiftType.Regular);    				// Unary operators    				case ExpressionType.Negate:  				case ExpressionType.NegateChecked:  					return CompileUnaryOperator(rr.Operands[0]' JsExpression.Negate' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.UnaryPlus:  					return CompileUnaryOperator(rr.Operands[0]' JsExpression.Positive' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.Not:  					return CompileUnaryOperator(rr.Operands[0]' JsExpression.LogicalNot' rr.IsLiftedOperator' LiftType.Regular);    				case ExpressionType.OnesComplement:  					if (Is64BitType(rr.Operands[0].Type)) {  						_errorReporter.Message(Messages._7540);  						return JsExpression.Null;  					}    					return CompileUnaryOperator(rr.Operands[0]' JsExpression.BitwiseNot' rr.IsLiftedOperator' LiftType.Regular);    				// Conditional operator    				case ExpressionType.Conditional:  					return CompileConditionalOperator(rr.Operands[0]' rr.Operands[1]' rr.Operands[2]);    				case ExpressionType.Power:  				case ExpressionType.PowerAssign:  				case ExpressionType.Increment:  				case ExpressionType.Decrement:  				default:  					_errorReporter.InternalError("Unsupported operator " + rr.OperatorType);  					return JsExpression.Null;  			}
Magic Number,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileDelegateCombineCall,The following statement contains a magic number: var combine = del.GetMethods().Single(m => m.Name == "Combine" && m.Parameters.Count == 2);
Magic Number,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileDelegateRemoveCall,The following statement contains a magic number: var remove = del.GetMethods().Single(m => m.Name == "Remove" && m.Parameters.Count == 2);
Magic Number,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileMethodInvocationWithPotentialExpandParams,The following statement contains a magic number: if (expandParams) {  				if (thisAndArguments[thisAndArguments.Count - 1] is JsArrayLiteralExpression) {  					var args = thisAndArguments.Take(thisAndArguments.Count - 1).Concat(((JsArrayLiteralExpression)thisAndArguments[thisAndArguments.Count - 1]).Elements);  					return needCall ? JsExpression.Invocation(JsExpression.Member(method' "call")' args) : JsExpression.Invocation(method' args.Skip(1));  				}  				else {  					return JsExpression.Invocation(JsExpression.Member(method' "apply")' thisAndArguments[0]' thisAndArguments.Count == 2 ? thisAndArguments[1] : JsExpression.Invocation(JsExpression.Member(JsExpression.ArrayLiteral(thisAndArguments.Skip(1).Take(thisAndArguments.Count - 2))' "concat")' thisAndArguments[thisAndArguments.Count - 1]));  				}  			}  			else {  				return needCall ? JsExpression.Invocation(JsExpression.Member(method' "call")' thisAndArguments) : JsExpression.Invocation(method' thisAndArguments.Skip(1));  			}
Magic Number,Saltarelle.Compiler.Compiler,ExpressionCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\ExpressionCompiler.cs,CompileMethodInvocationWithPotentialExpandParams,The following statement contains a magic number: if (expandParams) {  				if (thisAndArguments[thisAndArguments.Count - 1] is JsArrayLiteralExpression) {  					var args = thisAndArguments.Take(thisAndArguments.Count - 1).Concat(((JsArrayLiteralExpression)thisAndArguments[thisAndArguments.Count - 1]).Elements);  					return needCall ? JsExpression.Invocation(JsExpression.Member(method' "call")' args) : JsExpression.Invocation(method' args.Skip(1));  				}  				else {  					return JsExpression.Invocation(JsExpression.Member(method' "apply")' thisAndArguments[0]' thisAndArguments.Count == 2 ? thisAndArguments[1] : JsExpression.Invocation(JsExpression.Member(JsExpression.ArrayLiteral(thisAndArguments.Skip(1).Take(thisAndArguments.Count - 2))' "concat")' thisAndArguments[thisAndArguments.Count - 1]));  				}  			}  			else {  				return needCall ? JsExpression.Invocation(JsExpression.Member(method' "call")' thisAndArguments) : JsExpression.Invocation(method' thisAndArguments.Skip(1));  			}
Magic Number,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitTryCatchStatement,The following statement contains a magic number: if (tryCatchStatement.CatchClauses.Count > 0) {  				var oldVariableForRethrow = _currentVariableForRethrow;    				_currentVariableForRethrow = CreateTemporaryVariable(_compilation.FindType(KnownTypeCode.Object)' tryCatchStatement.CatchClauses.First().GetRegion());  				string catchVariableName = _variables[_currentVariableForRethrow].Name;    				var catchClauses = tryCatchStatement.CatchClauses.ToList();  				var systemException = _compilation.FindType(KnownTypeCode.Exception);  				RemoveCatchClausesAfterExceptionType(catchClauses' systemException);    				bool lastIsCatchall = (catchClauses[catchClauses.Count - 1].Type.IsNull || _resolver.Resolve(catchClauses[catchClauses.Count - 1].Type).Type.Equals(systemException));  				JsStatement current = lastIsCatchall  				                    ? CompileCatchClause(new LocalResolveResult(_currentVariableForRethrow)' catchClauses[catchClauses.Count - 1]' true' catchClauses.Count == 1)  				                    : JsStatement.Block(JsStatement.Throw(JsExpression.Identifier(catchVariableName)));    				for (int i = catchClauses.Count - (lastIsCatchall ? 2 : 1); i >= 0; i--) {  					var test = _runtimeLibrary.TypeIs(JsExpression.Identifier(catchVariableName)' _currentVariableForRethrow.Type' _resolver.Resolve(catchClauses[i].Type).Type' this);  					current = JsStatement.If(test' CompileCatchClause(new LocalResolveResult(_currentVariableForRethrow)' catchClauses[i]' false' catchClauses.Count == 1)' current);  				}    				if (!lastIsCatchall || catchClauses.Count > 1) {  					// We need to wrap the exception.  					current = JsStatement.Block(JsExpression.Assign(JsExpression.Identifier(catchVariableName)' _runtimeLibrary.MakeException(JsExpression.Identifier(catchVariableName)' this))' current);  				}    				catchClause = JsStatement.Catch(catchVariableName' current);  				_currentVariableForRethrow = oldVariableForRethrow;  			}
Magic Number,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,NormalizeSwitchLabelValue,The following statement contains a magic number: if (value is string)  				return value;  			else if (value is ulong && ((ulong)value > (1UL << 63)))  				return (ulong)value;  			else  				return Convert.ChangeType(value' typeof(long));
Magic Number,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitSwitchStatement,The following statement contains a magic number: foreach (var section in switchStatement.SwitchSections) {  				SetRegion(section.GetRegion());  				var values = new List<JsExpression>();  				foreach (var v in section.CaseLabels) {  					if (v.Expression.IsNull) {  						values.Add(null);	// Default  					}  					else {  						var rr = _resolver.Resolve(v.Expression);  						object value = rr.ConstantValue;  						if (rr is MemberResolveResult && ((MemberResolveResult)rr).Member is IField) {  							var sem = _metadataImporter.GetFieldSemantics((IField)((MemberResolveResult)rr).Member);  							if (sem.Type == FieldScriptSemantics.ImplType.Constant)  								value = sem.Value;  						}    						if (value == null) {  							values.Add(JsExpression.Null);  						}  						else if (value is string) {  							values.Add(JsExpression.String((string)value));  						}  						else if (value is char)  						{  							values.Add(JsExpression.Number((char)value));  						}  						else {  							if (value is long) {  								if (Math.Abs((long)value) > (1L << 53)) {  									_errorReporter.Message(Messages._7543);  								}  							}  							else if (value is ulong) {  								if ((ulong)value > (1L << 53)) {  									_errorReporter.Message(Messages._7543);  								}  							}  							values.Add(JsExpression.Number((double)Convert.ChangeType(value' typeof(double))));  						}  					}  				}    				var ic = CreateInnerCompiler();  				IList<JsStatement> statements;  				if (section.Statements.Count == 1 && section.Statements.First() is BlockStatement) {  					statements = ic.Compile(section.Statements.First()).Statements;  				}  				else {  					ic.VisitChildren(section);  					statements = ic._result;  				}    				if (gotoCaseData.Item1.ContainsKey(section))  					statements = new[] { JsStatement.Label(gotoCaseData.Item1[section]' statements[0]) }.Concat(statements.Skip(1)).ToList();    				caseClauses.Add(JsStatement.SwitchSection(values' JsStatement.Block(statements)));  			}
Magic Number,Saltarelle.Compiler.Compiler,StatementCompiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\StatementCompiler.cs,VisitSwitchStatement,The following statement contains a magic number: foreach (var section in switchStatement.SwitchSections) {  				SetRegion(section.GetRegion());  				var values = new List<JsExpression>();  				foreach (var v in section.CaseLabels) {  					if (v.Expression.IsNull) {  						values.Add(null);	// Default  					}  					else {  						var rr = _resolver.Resolve(v.Expression);  						object value = rr.ConstantValue;  						if (rr is MemberResolveResult && ((MemberResolveResult)rr).Member is IField) {  							var sem = _metadataImporter.GetFieldSemantics((IField)((MemberResolveResult)rr).Member);  							if (sem.Type == FieldScriptSemantics.ImplType.Constant)  								value = sem.Value;  						}    						if (value == null) {  							values.Add(JsExpression.Null);  						}  						else if (value is string) {  							values.Add(JsExpression.String((string)value));  						}  						else if (value is char)  						{  							values.Add(JsExpression.Number((char)value));  						}  						else {  							if (value is long) {  								if (Math.Abs((long)value) > (1L << 53)) {  									_errorReporter.Message(Messages._7543);  								}  							}  							else if (value is ulong) {  								if ((ulong)value > (1L << 53)) {  									_errorReporter.Message(Messages._7543);  								}  							}  							values.Add(JsExpression.Number((double)Convert.ChangeType(value' typeof(double))));  						}  					}  				}    				var ic = CreateInnerCompiler();  				IList<JsStatement> statements;  				if (section.Statements.Count == 1 && section.Statements.First() is BlockStatement) {  					statements = ic.Compile(section.Statements.First()).Statements;  				}  				else {  					ic.VisitChildren(section);  					statements = ic._result;  				}    				if (gotoCaseData.Item1.ContainsKey(section))  					statements = new[] { JsStatement.Label(gotoCaseData.Item1[section]' statements[0]) }.Concat(statements.Skip(1)).ToList();    				caseClauses.Add(JsStatement.SwitchSection(values' JsStatement.Block(statements)));  			}
Magic Number,Saltarelle.Compiler.Driver,CompilerDriver,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Driver\CompilerDriver.cs,MapSettings,The following statement contains a magic number: var result = new CompilerSettings {  				Target                    = (options.HasEntryPoint ? Target.Exe : Target.Library)'  				Platform                  = Platform.AnyCPU'  				TargetExt                 = (options.HasEntryPoint ? ".exe" : ".dll")'  				MainClass                 = options.EntryPointClass'  				VerifyClsCompliance       = false'  				Optimize                  = false'  				Version                   = LanguageVersion.V_5'  				EnhancedWarnings          = false'  				LoadDefaultReferences     = false'  				TabSize                   = 1'  				WarningsAreErrors         = options.TreatWarningsAsErrors'  				FatalCounter              = 100'  				WarningLevel              = options.WarningLevel'  				Encoding                  = Encoding.UTF8'  				DocumentationFile         = !string.IsNullOrEmpty(options.DocumentationFile) ? outputDocFilePath : null'  				OutputFile                = outputAssemblyPath'  				AssemblyName              = GetAssemblyName(options)'  				StdLib                    = false'  				StdLibRuntimeVersion      = RuntimeVersion.v4'  				StrongNameKeyContainer    = options.KeyContainer'  				StrongNameKeyFile         = options.KeyFile'  			};
Magic Number,Saltarelle.Compiler.OOPEmulation,OOPEmulatorInvoker,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\OOPEmulation\OOPEmulatorInvoker.cs,GetStaticInitializationOrder,The following statement contains a magic number: if (pass > 3)  				return types;
Magic Number,Saltarelle.Compiler.OOPEmulation,OOPEmulatorInvoker,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\OOPEmulation\OOPEmulatorInvoker.cs,GetStaticInitializationDependencies,The following statement contains a magic number: switch (pass) {  				case 1:  					foreach (var r in c.InstanceMethods.Where(m => m.Definition != null).SelectMany(m => TypeReferenceFinder.Analyze(m.Definition)))  						result.Add(r);  					foreach (var r in c.NamedConstructors.Where(m => m.Definition != null).SelectMany(m => TypeReferenceFinder.Analyze(m.Definition)))  						result.Add(r);  					if (c.UnnamedConstructor != null) {  						foreach (var r in TypeReferenceFinder.Analyze(c.UnnamedConstructor))  							result.Add(r);  					}  					goto case 2;    				case 2:  					foreach (var r in c.StaticMethods.Where(m => m.Definition != null).SelectMany(m => TypeReferenceFinder.Analyze(m.Definition)))  						result.Add(r);  					goto case 3;    				case 3:  					foreach (var r in TypeReferenceFinder.Analyze(c.StaticInitStatements))  						result.Add(r);  					break;    				default:  					throw new ArgumentException("pass");  			}
Magic Number,Saltarelle.Compiler.OOPEmulation,OOPEmulatorInvoker,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\OOPEmulation\OOPEmulatorInvoker.cs,GetStaticInitializationDependencies,The following statement contains a magic number: switch (pass) {  				case 1:  					foreach (var r in c.InstanceMethods.Where(m => m.Definition != null).SelectMany(m => TypeReferenceFinder.Analyze(m.Definition)))  						result.Add(r);  					foreach (var r in c.NamedConstructors.Where(m => m.Definition != null).SelectMany(m => TypeReferenceFinder.Analyze(m.Definition)))  						result.Add(r);  					if (c.UnnamedConstructor != null) {  						foreach (var r in TypeReferenceFinder.Analyze(c.UnnamedConstructor))  							result.Add(r);  					}  					goto case 2;    				case 2:  					foreach (var r in c.StaticMethods.Where(m => m.Definition != null).SelectMany(m => TypeReferenceFinder.Analyze(m.Definition)))  						result.Add(r);  					goto case 3;    				case 3:  					foreach (var r in TypeReferenceFinder.Analyze(c.StaticInitStatements))  						result.Add(r);  					break;    				default:  					throw new ArgumentException("pass");  			}
Magic Number,Saltarelle.Compiler.OOPEmulation,OOPEmulatorInvoker,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\OOPEmulation\OOPEmulatorInvoker.cs,GetStaticInitializationDependencies,The following statement contains a magic number: switch (pass) {  				case 1:  					foreach (var r in c.InstanceMethods.Where(m => m.Definition != null).SelectMany(m => TypeReferenceFinder.Analyze(m.Definition)))  						result.Add(r);  					foreach (var r in c.NamedConstructors.Where(m => m.Definition != null).SelectMany(m => TypeReferenceFinder.Analyze(m.Definition)))  						result.Add(r);  					if (c.UnnamedConstructor != null) {  						foreach (var r in TypeReferenceFinder.Analyze(c.UnnamedConstructor))  							result.Add(r);  					}  					goto case 2;    				case 2:  					foreach (var r in c.StaticMethods.Where(m => m.Definition != null).SelectMany(m => TypeReferenceFinder.Analyze(m.Definition)))  						result.Add(r);  					goto case 3;    				case 3:  					foreach (var r in TypeReferenceFinder.Analyze(c.StaticInitStatements))  						result.Add(r);  					break;    				default:  					throw new ArgumentException("pass");  			}
Magic Number,Saltarelle.Compiler.OOPEmulation,OOPEmulatorInvoker,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\OOPEmulation\OOPEmulatorInvoker.cs,GetStaticInitializationDependencies,The following statement contains a magic number: switch (pass) {  				case 1:  					foreach (var r in c.InstanceMethods.Where(m => m.Definition != null).SelectMany(m => TypeReferenceFinder.Analyze(m.Definition)))  						result.Add(r);  					foreach (var r in c.NamedConstructors.Where(m => m.Definition != null).SelectMany(m => TypeReferenceFinder.Analyze(m.Definition)))  						result.Add(r);  					if (c.UnnamedConstructor != null) {  						foreach (var r in TypeReferenceFinder.Analyze(c.UnnamedConstructor))  							result.Add(r);  					}  					goto case 2;    				case 2:  					foreach (var r in c.StaticMethods.Where(m => m.Definition != null).SelectMany(m => TypeReferenceFinder.Analyze(m.Definition)))  						result.Add(r);  					goto case 3;    				case 3:  					foreach (var r in TypeReferenceFinder.Analyze(c.StaticInitStatements))  						result.Add(r);  					break;    				default:  					throw new ArgumentException("pass");  			}
Missing Default,Saltarelle.Compiler.Compiler,Compiler,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\Saltarelle.Compiler\Compiler\Compiler.cs,AddCompiledConstructorToType,The following switch statement is missing a default case: switch (options.Type) {  				case ConstructorScriptSemantics.ImplType.UnnamedConstructor:  					if (jsClass.UnnamedConstructor != null) {  						_errorReporter.Region = constructor.Region;  						_errorReporter.Message(Messages._7501' constructor.DeclaringType.FullName);  					}  					else {  						jsClass.UnnamedConstructor = jsConstructor;  					}  					break;  				case ConstructorScriptSemantics.ImplType.NamedConstructor:  					jsClass.NamedConstructors.Add(new JsNamedConstructor(options.Name' jsConstructor));  					break;    				case ConstructorScriptSemantics.ImplType.StaticMethod:  					jsClass.StaticMethods.Add(new JsMethod(constructor' options.Name' new string[0]' jsConstructor));  					break;  			}
