Implementation smell,Namespace,Class,File,Method,Description
Long Method,CoreLib.Tests.MetadataImporterTests,MinimizedNamesTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MinimizedNamesTests.cs,MinimizationOfClassesGeneratesMembersThatAreUniqueInTheHierarchyButDoesNotTouchPublicSymbols,The method has 135 lines of code.
Long Parameter List,CoreLib.Tests,Common,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\Common.cs,CreateMockTypeDefinition,The method has 5 parameters. Parameters: name' assembly' accessibility' declaringType' attributes
Long Parameter List,CoreLib.Tests.OOPEmulatorTests,Resource,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\OverallStructureTests.cs,Resource,The method has 5 parameters. Parameters: type' name' isPublic' linkedFileName' data
Long Statement,CoreLib.Tests,Common,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\Common.cs,CreateMockTypeDefinition,The length of the statement  "			typeDef.Setup(_ => _.GetConstructors(It.IsAny<Predicate<IUnresolvedMethod>>()' It.IsAny<GetMemberOptions>())).Returns(new IMethod[0]); " is 134.
Long Statement,CoreLib.Tests,SourceVerifier,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\SourceVerifier.cs,Compile,The length of the statement  "			var js = new OOPEmulatorInvoker(new OOPEmulator(compilation.Compilation' md' rtl' n' l' s' er)' md' er).Process(compiledTypes' null); " is 133.
Long Statement,CoreLib.Tests,SourceVerifier,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\SourceVerifier.cs,AssertSourceCorrect,The length of the statement  "			Assert.That(actual.Replace("\r\n"' "\n")' Is.EqualTo(expectedJs.Replace("\r\n"' "\n"))' "Expected:" + Environment.NewLine + expectedJs + Environment.NewLine + Environment.NewLine + "Actual:" + Environment.NewLine + actual); " is 223.
Long Statement,CoreLib.Tests,CoreLibTestBase,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\CoreLibTestBase.cs,WriteThePage,The length of the statement  "		<script type=""text/javascript"" src=""file://" + Path.GetFullPath("qunit-1.9.0.js").Replace("\\"' "/") + @"""></script> " is 120.
Long Statement,CoreLib.Tests,CoreLibTestBase,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\CoreLibTestBase.cs,WriteThePage,The length of the statement  "		<script type=""text/javascript"" src=""file://" + Path.GetFullPath("SimplePromise.js").Replace("\\"' "/") + @"""></script> " is 122.
Long Statement,CoreLib.Tests,CoreLibTestBase,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\CoreLibTestBase.cs,WriteThePage,The length of the statement  "		<script type=""text/javascript"" src=""file://" + Path.GetFullPath("CoreLib.TestScript.js").Replace("\\"' "/") + @"""></script> " is 127.
Long Statement,CoreLib.Tests,CoreLibTestBase,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\CoreLibTestBase.cs,PerformTest,The length of the statement  "				var p = Process.Start(new ProcessStartInfo { FileName = Path.GetFullPath("runner/node.exe")' Arguments = "run-tests.js \"" + filename + "\""' WorkingDirectory = Path.GetFullPath("runner")' RedirectStandardOutput = true' UseShellExecute = false' CreateNoWindow = true }); " is 270.
Long Statement,CoreLib.Tests,CoreLibTestBase,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\CoreLibTestBase.cs,PerformTest,The length of the statement  "						string errorMessage = string.Join("\n"' failures.Select(f => f.message + (f.expected != null ? "' expected: " + f.expected.ToString() : "") + (f.actual != null ? "' actual: " + f.actual.ToString() : ""))); " is 205.
Long Statement,CoreLib.Tests.Core.Reflection,TypeSystemLanguageSupportTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\Core\Reflection\TypeSystemLanguageSupportTests.cs,CannotUseTheIsOperatorWithSerializableTypeWithoutTypeCheckCode,The length of the statement  "			Assert.That(actual.Item2.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7701 && m.FormattedMessage.Contains("'is' operator") && m.FormattedMessage.Contains("C1"))); " is 187.
Long Statement,CoreLib.Tests.Core.Reflection,TypeSystemLanguageSupportTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\Core\Reflection\TypeSystemLanguageSupportTests.cs,CannotUseTheIsOperatorWithImportedTypeThatDoesNotObeyTheTypeSystemOrHaveTypeCheckCode,The length of the statement  "			Assert.That(actual.Item2.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7701 && m.FormattedMessage.Contains("'is' operator") && m.FormattedMessage.Contains("C1"))); " is 187.
Long Statement,CoreLib.Tests.Core.Reflection,TypeSystemLanguageSupportTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\Core\Reflection\TypeSystemLanguageSupportTests.cs,CannotUseTheAsOperatorWithSerializableTypeWithoutTypeCheckCode,The length of the statement  "			Assert.That(actual.Item2.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7702 && m.FormattedMessage.Contains("'as' operator") && m.FormattedMessage.Contains("C1"))); " is 187.
Long Statement,CoreLib.Tests.Core.Reflection,TypeSystemLanguageSupportTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\Core\Reflection\TypeSystemLanguageSupportTests.cs,CannotUseTheAsOperatorWithImportedTypeThatDoesNotObeyTheTypeSystemOrHaveTypeCheckCode,The length of the statement  "			Assert.That(actual.Item2.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7702 && m.FormattedMessage.Contains("'as' operator") && m.FormattedMessage.Contains("C1"))); " is 187.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,AssertCorrect,The length of the statement  "			Assert.That(actual.Replace("\r\n"' "\n")' Is.EqualTo(expected.Replace("\r\n"' "\n"))' "Expected:\n" + expected + "\n\nActual:\n" + actual); " is 139.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ImportingTypesFromGlobalNamespaceWorks,The length of the statement  "				JsStatement.Return(JsExpression.Binary(ExpressionNodeType.Add' JsExpression.Member(new JsTypeReferenceExpression(Common.CreateMockTypeDefinition("Global.NestedNamespace.InnerNamespace.Type"' otherAsm))' "x")' JsExpression.Number(1))) " is 233.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ImportingTypesFromGlobalNamespaceWorks,The length of the statement  "			}' new[] { Common.CreateMockAssembly()' otherAsm }' new MockMetadataImporter { GetTypeSemantics = t => TypeScriptSemantics.NormalType(string.Join("."' t.FullName.Split('.').Select(x => "$" + x))) }); " is 199.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ImportingTypeFromOwnAssemblyUsesTheTypeVariable,The length of the statement  "				JsStatement.Return(JsExpression.Binary(ExpressionNodeType.Add' JsExpression.Member(new JsTypeReferenceExpression(Common.CreateMockTypeDefinition("Global.NestedNamespace.InnerNamespace.Type"' asm))' "x")' JsExpression.Number(1))) " is 228.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ImportingTypeFromOwnAssemblyUsesTheTypeVariable,The length of the statement  "			}' new[] { asm }' new MockMetadataImporter { GetTypeSemantics = t => TypeScriptSemantics.NormalType(string.Join("."' t.FullName.Split('.').Select(x => "$" + x))) }); " is 165.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ImportingImportedTypeFromOwnAssemblyWorks,The length of the statement  "			var type = Common.CreateMockTypeDefinition("MyImportedType"' asm' attributes: new Expression<Func<Attribute>>[] { () => new ImportedAttribute() }); " is 147.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ImportingImportedTypeFromOwnAssemblyWorks,The length of the statement  "				JsStatement.Return(JsExpression.Binary(ExpressionNodeType.Add' JsExpression.Member(new JsTypeReferenceExpression(type)' "x")' JsExpression.Number(1))) " is 150.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ImportingImportedTypeFromOwnAssemblyWorks,The length of the statement  "			}' new[] { asm }' metadata: new MockMetadataImporter { GetTypeSemantics = t => TypeScriptSemantics.NormalType("$" + t.FullName) }); " is 131.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ImportingTypeFromOwnAssemblyButOtherModuleNameResultsInARequire,The length of the statement  "			var asm = Common.CreateMockAssembly(attributes: new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("main-module") }); " is 132.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ImportingTypeFromOwnAssemblyButOtherModuleNameResultsInARequire,The length of the statement  "			var type = Common.CreateMockTypeDefinition("GlobalType"' asm' attributes: new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("some-module") }); " is 158.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ImportingTypeFromOwnAssemblyButOtherModuleNameResultsInARequire,The length of the statement  "				JsStatement.Return(JsExpression.Binary(ExpressionNodeType.Add' JsExpression.Member(new JsTypeReferenceExpression(Common.CreateMockTypeDefinition("Global.NestedNamespace.InnerNamespace.Type"' asm' attributes: new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("some-module") }))' "x")' JsExpression.Number(1))) " is 324.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ImportingTypeFromOwnAssemblyButOtherModuleNameResultsInARequire,The length of the statement  "			}' new[] { asm }' metadata: new MockMetadataImporter { GetTypeSemantics = t => TypeScriptSemantics.NormalType(string.Join("."' t.FullName.Split('.').Select(x => "$" + x))) }); " is 175.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,AccessingMemberOnTypeWithEmptyScriptNameInOwnAssemblyWithModuleNameUsesExports,The length of the statement  "			var asm = Common.CreateMockAssembly(new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("main-module") }); " is 120.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,UsingTypeWithNoScriptNameInModuleReturnsTheModuleVariable,The length of the statement  "			var asm = Common.CreateMockAssembly(attributes: new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("main-module") }); " is 132.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,UsingTypeWithNoScriptNameInModuleReturnsTheModuleVariable,The length of the statement  "			var type = Common.CreateMockTypeDefinition("GlobalType"' asm' attributes: new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("some-module") }); " is 158.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,AccessingMemberOnTypeWithEmptyScriptNameInOwnAssemblyButWithDifferentModuleNameResultsInARequire,The length of the statement  "			var asm = Common.CreateMockAssembly(new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("main-module") }); " is 120.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,AccessingMemberOnTypeWithEmptyScriptNameInOwnAssemblyButWithDifferentModuleNameResultsInARequire,The length of the statement  "				JsExpression.MemberAccess(new JsTypeReferenceExpression(Common.CreateMockTypeDefinition("GlobalType"' asm' attributes: new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("my-module") }))' "x")' " is 208.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,AccessingMemberOnTypeWithEmptyScriptNameResultsInGlobalAccess,The length of the statement  "			}' new[] { Common.CreateMockAssembly()' otherAsm }' new MockMetadataImporter { GetTypeSemantics = t => TypeScriptSemantics.NormalType("") }); " is 141.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ImportingTypesFromModulesWorks,The length of the statement  "			var t1 = Common.CreateMockTypeDefinition("SomeNamespace.InnerNamespace.Type1"' Common.CreateMockAssembly(new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("module1") })); " is 186.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ImportingTypesFromModulesWorks,The length of the statement  "			var t2 = Common.CreateMockTypeDefinition("SomeNamespace.InnerNamespace.Type2"' Common.CreateMockAssembly(new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("module2") })); " is 186.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ImportingTypesFromModulesWorks,The length of the statement  "			var t3 = Common.CreateMockTypeDefinition("SomeNamespace.Type3"' Common.CreateMockAssembly(new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("module1") })); " is 171.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ImportingTypesFromModulesWorks,The length of the statement  "			var t4 = Common.CreateMockTypeDefinition("Type4"' Common.CreateMockAssembly(new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("module3") })); " is 157.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ImportingTypesFromModulesWorks,The length of the statement  "				JsExpression.Add(JsExpression.Member(new JsTypeReferenceExpression(t1)' "a")' JsExpression.Member(new JsTypeReferenceExpression(t2)' "b"))' " is 139.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ImportingTypesFromModulesWorks,The length of the statement  "				JsExpression.Add(JsExpression.Member(new JsTypeReferenceExpression(t3)' "c")' JsExpression.Member(new JsTypeReferenceExpression(t4)' "d"))' " is 139.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ImportingTypesFromModulesWorks,The length of the statement  "				JsExpression.Add(JsExpression.Member(new JsTypeReferenceExpression(t1)' "e")' JsExpression.Member(new JsTypeReferenceExpression(t4)' "f"))' " is 139.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ImportingGlobalMethodsFromModulesWorks,The length of the statement  "			var t1 = Common.CreateMockTypeDefinition("Type1"' Common.CreateMockAssembly(new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("mymodule") })); " is 158.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,AsyncModuleWithoutReferencesWorks,The length of the statement  "				JsExpression.Binary(ExpressionNodeType.Add' JsExpression.Member(new JsTypeReferenceExpression(Common.CreateMockTypeDefinition("Global.NestedNamespace.InnerNamespace.Type"' asm))' "x")' JsExpression.Number(1))' " is 209.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,AsyncModuleWithoutReferencesWorks,The length of the statement  "			}' new[] { asm }' metadata: new MockMetadataImporter { GetTypeSemantics = t => TypeScriptSemantics.NormalType(string.Join("."' t.FullName.Split('.').Select(x => "$" + x))) }); " is 175.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,AsyncModuleWithReferencesWorks,The length of the statement  "			var t1 = Common.CreateMockTypeDefinition("SomeNamespace.InnerNamespace.Type1"' Common.CreateMockAssembly(new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("module1") })); " is 186.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,AsyncModuleWithReferencesWorks,The length of the statement  "			var t2 = Common.CreateMockTypeDefinition("SomeNamespace.InnerNamespace.Type2"' Common.CreateMockAssembly(new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("module2") })); " is 186.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,AsyncModuleWithReferencesWorks,The length of the statement  "			var t3 = Common.CreateMockTypeDefinition("SomeNamespace.Type3"' Common.CreateMockAssembly(new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("module1") })); " is 171.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,AsyncModuleWithReferencesWorks,The length of the statement  "			var t4 = Common.CreateMockTypeDefinition("Type4"' Common.CreateMockAssembly(new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("module3") })); " is 157.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,AsyncModuleWithReferencesWorks,The length of the statement  "				JsExpression.Add(JsExpression.Member(new JsTypeReferenceExpression(t1)' "a")' JsExpression.Member(new JsTypeReferenceExpression(t2)' "b"))' " is 139.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,AsyncModuleWithReferencesWorks,The length of the statement  "				JsExpression.Add(JsExpression.Member(new JsTypeReferenceExpression(t3)' "c")' JsExpression.Member(new JsTypeReferenceExpression(t4)' "d"))' " is 139.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,AsyncModuleWithReferencesWorks,The length of the statement  "				JsExpression.Add(JsExpression.Member(new JsTypeReferenceExpression(t1)' "e")' JsExpression.Member(new JsTypeReferenceExpression(t4)' "f"))' " is 139.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,GeneratedModuleAliasesAreValidAndDoNotClashWithEachOtherOrUsedSymbols,The length of the statement  "			var t1 = Common.CreateMockTypeDefinition("Type1"' Common.CreateMockAssembly(new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("mymodule") })); " is 158.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,GeneratedModuleAliasesAreValidAndDoNotClashWithEachOtherOrUsedSymbols,The length of the statement  "			var t2 = Common.CreateMockTypeDefinition("Type2"' Common.CreateMockAssembly(new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("mymodule+") })); " is 159.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,GeneratedModuleAliasesAreValidAndDoNotClashWithEachOtherOrUsedSymbols,The length of the statement  "			var t3 = Common.CreateMockTypeDefinition("Type3"' Common.CreateMockAssembly(new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("mymodule-") })); " is 159.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,GeneratedModuleAliasesAreValidAndDoNotClashWithEachOtherOrUsedSymbols,The length of the statement  "			var t4 = Common.CreateMockTypeDefinition("Type4"' Common.CreateMockAssembly(new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("+") })); " is 151.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,GeneratedModuleAliasesAreValidAndDoNotClashWithEachOtherOrUsedSymbols,The length of the statement  "			var t5 = Common.CreateMockTypeDefinition("Type5"' Common.CreateMockAssembly(new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("-") })); " is 151.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,GeneratedModuleAliasesAreValidAndDoNotClashWithEachOtherOrUsedSymbols,The length of the statement  "			}' new[] { Common.CreateMockAssembly()' t1.ParentAssembly' t2.ParentAssembly' t3.ParentAssembly' t4.ParentAssembly' t5.ParentAssembly }' namer: new MockNamer(prefixWithDollar: false)); " is 184.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ModuleNameAttributeCanBeSpecifiedOnType,The length of the statement  "			var c2 = Common.CreateMockTypeDefinition("C2"' Common.CreateMockAssembly()' attributes: new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("my-module") }); " is 170.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ModuleNameAttributeCanBeSpecifiedOnType,The length of the statement  "			var c3 = Common.CreateMockTypeDefinition("C3"' Common.CreateMockAssembly()' attributes: new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("") }); " is 161.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ModuleNameAttributeCanBeSpecifiedOnType,The length of the statement  "			var c4 = Common.CreateMockTypeDefinition("C4"' Common.CreateMockAssembly()' attributes: new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute(null) }); " is 163.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ModuleNameAttributeIsInheritedToInnerTypesButCanBeOverridden,The length of the statement  "			var c1 = Common.CreateMockTypeDefinition("C1"' asm' attributes: new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("my-module") }); " is 146.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ModuleNameAttributeIsInheritedToInnerTypesButCanBeOverridden,The length of the statement  "			var c1d2 = Common.CreateMockTypeDefinition("C1+D2"' asm' declaringType: c1' attributes: new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("other-module") }); " is 173.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ModuleNameAttributeIsInheritedToInnerTypesButCanBeOverridden,The length of the statement  "			var c1d3 = Common.CreateMockTypeDefinition("C1+D3"' asm' declaringType: c1' attributes: new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute(null) }); " is 163.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ModuleNameAttributeIsInheritedToInnerTypesButCanBeOverridden,The length of the statement  "			var c1d4 = Common.CreateMockTypeDefinition("C1+D4"' asm' declaringType: c1' attributes: new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("") }); " is 161.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ModuleNameAttributeIsInheritedToInnerTypesButCanBeOverridden,The length of the statement  "			var c2d2 = Common.CreateMockTypeDefinition("C2+D2"' asm' declaringType: c2' attributes: new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("third-module") }); " is 173.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ModuleNameAttributeIsInheritedToInnerTypesButCanBeOverridden,The length of the statement  "			var c2d3 = Common.CreateMockTypeDefinition("C2+D3"' asm' declaringType: c2' attributes: new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute(null) }); " is 163.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ModuleNameAttributeIsInheritedToInnerTypesButCanBeOverridden,The length of the statement  "			var c2d4 = Common.CreateMockTypeDefinition("C2+D4"' asm' declaringType: c2' attributes: new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("") }); " is 161.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ModuleNameAttributeIsInheritedToInnerTypesButCanBeOverridden,The length of the statement  "			}' new[] { Common.CreateMockAssembly()' asm }' metadata: new MockMetadataImporter { GetTypeSemantics = t => TypeScriptSemantics.NormalType(t.Name.Replace("+"' "_")) }); " is 168.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ModuleNameOnAssemblyWorks,The length of the statement  "			}' new[] { Common.CreateMockAssembly()' asm }' metadata: new MockMetadataImporter { GetTypeSemantics = t => TypeScriptSemantics.NormalType(t.Name.Replace("+"' "_")) }); " is 168.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ModuleNameOnAssemblyCanBeOverriddenOnType,The length of the statement  "			var c1 = Common.CreateMockTypeDefinition("C1"' asm' attributes: new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("other-module") }); " is 149.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ModuleNameOnAssemblyCanBeOverriddenOnType,The length of the statement  "			var c2 = Common.CreateMockTypeDefinition("C2"' asm' attributes: new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("") }); " is 137.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ModuleNameOnAssemblyCanBeOverriddenOnType,The length of the statement  "			var c3 = Common.CreateMockTypeDefinition("C3"' asm' attributes: new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute(null) }); " is 139.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ModuleNameOnAssemblyCanBeOverriddenOnType,The length of the statement  "			}' new[] { Common.CreateMockAssembly()' asm }' metadata: new MockMetadataImporter { GetTypeSemantics = t => TypeScriptSemantics.NormalType(t.Name.Replace("+"' "_")) }); " is 168.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ClassWithSameNameAsVariable1,The length of the statement  "					JsExpression.Binary(ExpressionNodeType.Add' JsExpression.Member(new JsTypeReferenceExpression(Common.CreateMockTypeDefinition("x"' someAsm))' "a")' JsExpression.Identifier("x"))' " is 178.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ClassWithSameNameAsVariable1,The length of the statement  "					JsExpression.Binary(ExpressionNodeType.Add' JsExpression.Member(new JsTypeReferenceExpression(Common.CreateMockTypeDefinition("y"' someAsm))' "a")' JsExpression.Identifier("y")) " is 177.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ClassWithSameNameAsVariable1,The length of the statement  "					JsExpression.Binary(ExpressionNodeType.Add' JsExpression.Member(new JsTypeReferenceExpression(Common.CreateMockTypeDefinition("x"' someAsm))' "a")' JsExpression.Identifier("x"))' " is 178.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ClassWithSameNameAsVariable1,The length of the statement  "					JsExpression.Binary(ExpressionNodeType.Add' JsExpression.Member(new JsTypeReferenceExpression(Common.CreateMockTypeDefinition("y"' someAsm))' "a")' JsExpression.Identifier("y")) " is 177.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ClassWithSameNameAsVariable1,The length of the statement  "			}' new[] { Common.CreateMockAssembly()' someAsm }' new MockMetadataImporter { GetTypeSemantics = t => TypeScriptSemantics.NormalType(t.Name) }' namer: new Namer()); " is 164.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ClassWithSameNameAsVariable2,The length of the statement  "						JsExpression.Binary(ExpressionNodeType.Add' JsExpression.Member(new JsTypeReferenceExpression(Common.CreateMockTypeDefinition("x"' someAsm))' "a")' JsExpression.Member(new JsTypeReferenceExpression(Common.CreateMockTypeDefinition("y"' someAsm))' "a")) " is 251.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ClassWithSameNameAsVariable2,The length of the statement  "						JsStatement.Var("z"' JsExpression.Binary(ExpressionNodeType.Add' JsExpression.Identifier("x")' JsExpression.Identifier("y"))) " is 125.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,ClassWithSameNameAsVariable2,The length of the statement  "			}' new[] { Common.CreateMockAssembly()' someAsm }' new MockMetadataImporter { GetTypeSemantics = t => TypeScriptSemantics.NormalType(t.Name) }' namer: new Namer()); " is 164.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,RenamedVariableClashWithOtherVariable,The length of the statement  "			}' new[] { Common.CreateMockAssembly()' someAsm }' new MockMetadataImporter { GetTypeSemantics = t => TypeScriptSemantics.NormalType(t.Name) }' namer: new Namer()); " is 164.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,RenamedVariableClashWithImplicitGlobal,The length of the statement  "			}' new[] { Common.CreateMockAssembly()' someAsm }' new MockMetadataImporter { GetTypeSemantics = t => TypeScriptSemantics.NormalType(t.Name) }' namer: new Namer()); " is 164.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,CurrentAssemblyReferenceWorksInNonModule,The length of the statement  "			}' new[] { Common.CreateMockAssembly() }' new MockMetadataImporter { GetTypeSemantics = t => TypeScriptSemantics.NormalType(t.Name) }' namer: new Namer()); " is 155.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,CurrentAssemblyReferenceWorksInModule,The length of the statement  "			}' new[] { Common.CreateMockAssembly(new Expression<Func<Attribute>>[] { () => new ModuleNameAttribute("my-module") }) }' new MockMetadataImporter { GetTypeSemantics = t => TypeScriptSemantics.NormalType(t.Name) }' namer: new Namer()); " is 235.
Long Statement,CoreLib.Tests.LinkerTests,LinkerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\LinkerTests\LinkerTests.cs,CurrentAssemblyReferenceWorksInAsyncModule,The length of the statement  "			}' new[] { Common.CreateMockAssembly(new Expression<Func<Attribute>>[] { () => new AsyncModuleAttribute() }) }' new MockMetadataImporter { GetTypeSemantics = t => TypeScriptSemantics.NormalType(t.Name) }' namer: new Namer()); " is 225.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,PropertyBackingFieldIsNamedFromHierarchyDepthAndPropertyNameWhenNotMinimizing,The length of the statement  "			Assert.That(Metadata.GetAutoPropertyBackingFieldName(AllTypes["C"].Properties.Single(p => p.Name == "Prop1"))' Is.EqualTo(f1)); " is 127.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,PropertyBackingFieldIsNamedFromHierarchyDepthAndPropertyNameWhenNotMinimizing,The length of the statement  "			Assert.That(Metadata.GetAutoPropertyBackingFieldName(AllTypes["C"].Properties.Single(p => p.Name == "Prop2"))' Is.EqualTo(f2)); " is 127.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,PropertyBackingFieldIsNamedFromHierarchyDepthAndPropertyNameWhenNotMinimizing,The length of the statement  "			Prepare("class B {} interface I {} class D : B' I { int Prop1 { get; set; } int Prop2 { get; set; } }"' minimizeNames: false); " is 126.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,PropertyBackingFieldIsNamedFromHierarchyDepthAndPropertyNameWhenNotMinimizing,The length of the statement  "			Prepare("class A {} class B : A {} interface I1 {} interface I2 {} class C : B { int Prop1 { get; set; } int Prop2 { get; set; } }"' minimizeNames: false); " is 155.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,PropertyBackingFieldGetsAUniqueNameBasedOnTheHierarchyDepthWhenMinimizing,The length of the statement  "			Assert.That(Metadata.GetAutoPropertyBackingFieldName(AllTypes["C"].Properties.Single(p => p.Name == "Prop1"))' Is.EqualTo(f1)); " is 127.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,PropertyBackingFieldGetsAUniqueNameBasedOnTheHierarchyDepthWhenMinimizing,The length of the statement  "			Assert.That(Metadata.GetAutoPropertyBackingFieldName(AllTypes["C"].Properties.Single(p => p.Name == "Prop2"))' Is.EqualTo(f2)); " is 127.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,PropertyBackingFieldGetsAUniqueNameBasedOnTheHierarchyDepthWhenMinimizing,The length of the statement  "			Prepare("class B {} interface I {} class D : B' I { int Prop1 { get; set; } int Prop2 { get; set; } }"' minimizeNames: true); " is 125.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,PropertyBackingFieldGetsAUniqueNameBasedOnTheHierarchyDepthWhenMinimizing,The length of the statement  "			Prepare("class A {} class B : A {} interface I1 {} interface I2 {} class C : B { int Prop1 { get; set; } int Prop2 { get; set; } }"' minimizeNames: true); " is 154.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,BackingFieldNameAttributeOnPropertySetsTheNameOfTheBackingField,The length of the statement  "			Prepare("public class C { [System.Runtime.CompilerServices.BackingFieldName(\"newName\")] public int P { get; set; } }"); " is 121.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,ArgumentToBackingFieldNameMustBeAValidIdentifierForProperty,The length of the statement  "			Prepare(@"public class C1 { [System.Runtime.CompilerServices.BackingFieldName(null)] public int P1 { get; set; } }"' expectErrors: true); " is 137.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,ArgumentToBackingFieldNameMustBeAValidIdentifierForProperty,The length of the statement  "			Assert.That(AllErrors[0].Code == 7168 && AllErrors[0].FormattedMessage.Contains("BackingFieldName") && AllErrors[0].FormattedMessage.Contains("C1.P1") && AllErrors[0].FormattedMessage.Contains("valid JavaScript identifier")); " is 225.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,ArgumentToBackingFieldNameMustBeAValidIdentifierForProperty,The length of the statement  "			Prepare(@"public class C1 { [System.Runtime.CompilerServices.BackingFieldName("""")] public int P1 { get; set; } }"' expectErrors: true); " is 137.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,ArgumentToBackingFieldNameMustBeAValidIdentifierForProperty,The length of the statement  "			Assert.That(AllErrors[0].Code == 7168 && AllErrors[0].FormattedMessage.Contains("BackingFieldName") && AllErrors[0].FormattedMessage.Contains("C1.P1") && AllErrors[0].FormattedMessage.Contains("valid JavaScript identifier")); " is 225.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,ArgumentToBackingFieldNameMustBeAValidIdentifierForProperty,The length of the statement  "			Prepare(@"public class C1 { [System.Runtime.CompilerServices.BackingFieldName(""a b"")] public int P1 { get; set; } }"' expectErrors: true); " is 140.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,ArgumentToBackingFieldNameMustBeAValidIdentifierForProperty,The length of the statement  "			Assert.That(AllErrors[0].Code == 7168 && AllErrors[0].FormattedMessage.Contains("BackingFieldName") && AllErrors[0].FormattedMessage.Contains("C1.P1") && AllErrors[0].FormattedMessage.Contains("valid JavaScript identifier")); " is 225.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,ShouldGenerateBackingFieldReturnsFalseForPropertyWhenCodeIsNotGeneratedForEitherAccessor,The length of the statement  "			Prepare("public class C { public int P { [System.Runtime.CompilerServices.DontGenerate] get; [System.Runtime.CompilerServices.DontGenerate] set; } }"); " is 151.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,ShouldGenerateBackingFieldReturnsTrueForPropertyWithBackingFieldNameAttributeEvenWhenNoCodeIsGenerated,The length of the statement  "			Prepare("public class C { [System.Runtime.CompilerServices.BackingFieldName(\"newName\")] public int P { [System.Runtime.CompilerServices.DontGenerate] get; [System.Runtime.CompilerServices.DontGenerate] set; } }"); " is 215.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,BackingFieldNameAttributeCannotBeSpecifiedOnManualProperty,The length of the statement  "			Prepare("public class C1 { [System.Runtime.CompilerServices.BackingFieldName(\"newName\")] public int P1 { get { return 0; } set {} }"' expectErrors: true); " is 156.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,BackingFieldNameAttributeCannotBeSpecifiedOnManualProperty,The length of the statement  "			Assert.That(AllErrors[0].Code == 7167 && AllErrors[0].FormattedMessage.Contains("BackingFieldName") && AllErrors[0].FormattedMessage.Contains("C1.P1")); " is 152.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,EventBackingFieldIsNamedFromHierarchyDepthAndPropertyNameWhenNotMinimizing,The length of the statement  "			Prepare("class A {} class B : A {} interface I1 {} interface I2 {} class C : B { event System.EventHandler Evt1' Evt2; }"' minimizeNames: false); " is 145.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,EventBackingFieldGetsAUniqueNameBasedOnTheHierarchyDepthWhenMinimizing,The length of the statement  "			Prepare("class A {} class B : A {} interface I1 {} interface I2 {} class C : B { event System.EventHandler Evt1' Evt2; }"' minimizeNames: true); " is 144.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,BackingFieldNameAttributeOnEventSetsTheNameOfTheBackingField,The length of the statement  "			Prepare("public class C { [System.Runtime.CompilerServices.BackingFieldName(\"newName\")] public event System.Action P; }"); " is 124.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,BackingFieldNameAttributeCanUseTheOwnerPlaceholderForEvent,The length of the statement  "public class C : B { [System.Runtime.CompilerServices.BackingFieldName(""{owner}field"")] public event System.Action P; } " is 121.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,ArgumentToBackingFieldNameMustBeAValidIdentifierForEvent,The length of the statement  "			Prepare(@"public class C1 { [System.Runtime.CompilerServices.BackingFieldName(null)] public event System.Action P1; }"' expectErrors: true); " is 140.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,ArgumentToBackingFieldNameMustBeAValidIdentifierForEvent,The length of the statement  "			Assert.That(AllErrors[0].Code == 7170 && AllErrors[0].FormattedMessage.Contains("BackingFieldName") && AllErrors[0].FormattedMessage.Contains("C1.P1") && AllErrors[0].FormattedMessage.Contains("valid JavaScript identifier")); " is 225.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,ArgumentToBackingFieldNameMustBeAValidIdentifierForEvent,The length of the statement  "			Prepare(@"public class C1 { [System.Runtime.CompilerServices.BackingFieldName("""")] public event System.Action P1; }"' expectErrors: true); " is 140.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,ArgumentToBackingFieldNameMustBeAValidIdentifierForEvent,The length of the statement  "			Assert.That(AllErrors[0].Code == 7170 && AllErrors[0].FormattedMessage.Contains("BackingFieldName") && AllErrors[0].FormattedMessage.Contains("C1.P1") && AllErrors[0].FormattedMessage.Contains("valid JavaScript identifier")); " is 225.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,ArgumentToBackingFieldNameMustBeAValidIdentifierForEvent,The length of the statement  "			Prepare(@"public class C1 { [System.Runtime.CompilerServices.BackingFieldName(""a b"")] public event System.Action P1; }"' expectErrors: true); " is 143.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,ArgumentToBackingFieldNameMustBeAValidIdentifierForEvent,The length of the statement  "			Assert.That(AllErrors[0].Code == 7170 && AllErrors[0].FormattedMessage.Contains("BackingFieldName") && AllErrors[0].FormattedMessage.Contains("C1.P1") && AllErrors[0].FormattedMessage.Contains("valid JavaScript identifier")); " is 225.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,BackingFieldNameAttributeCannotBeSpecifiedOnManualEvent,The length of the statement  "			Prepare("public class C1 { [System.Runtime.CompilerServices.BackingFieldName(\"newName\")] public event System.Action P1 { add {} remove {} }"' expectErrors: true); " is 164.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,BackingFieldNameAttributeCannotBeSpecifiedOnManualEvent,The length of the statement  "			Assert.That(AllErrors[0].Code == 7169 && AllErrors[0].FormattedMessage.Contains("BackingFieldName") && AllErrors[0].FormattedMessage.Contains("C1.P1")); " is 152.
Long Statement,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,PropertyAndEventBackingFieldsDoNotCollideWhenMinimizing,The length of the statement  "			Prepare("class C { int Prop1 { get; set; } int Prop2 { get; set; } event System.EventHandler Evt1' Evt2; }"' minimizeNames: true); " is 130.
Long Statement,CoreLib.Tests.MetadataImporterTests,ChainingTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ChainingTests.cs,Prepare,The length of the statement  "			AllTypes = compilation.MainAssembly.TopLevelTypeDefinitions.SelectMany(SelfAndNested).ToDictionary(t => t.ReflectionName); " is 122.
Long Statement,CoreLib.Tests.MetadataImporterTests,ChainingTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ChainingTests.cs,SetConstructorSemanticsWorks,The length of the statement  "			Assert.AreEqual(Metadata.GetConstructorSemantics(FindConstructor("C"' 0)).Type' ConstructorScriptSemantics.ImplType.NamedConstructor); " is 134.
Long Statement,CoreLib.Tests.MetadataImporterTests,ChainingTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ChainingTests.cs,SetConstructorSemanticsWorks,The length of the statement  "			Assert.AreEqual(Metadata.GetConstructorSemantics(FindConstructor("C"' 1)).Type' ConstructorScriptSemantics.ImplType.UnnamedConstructor); " is 136.
Long Statement,CoreLib.Tests.MetadataImporterTests,ChainingTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ChainingTests.cs,SetPropertySemanticsWorks,The length of the statement  "			Prepare(@"public class C { public int TheProperty { get; set; } } public class D : C { public new int TheProperty { get; set; } }"' () => { " is 139.
Long Statement,CoreLib.Tests.MetadataImporterTests,ChainingTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ChainingTests.cs,SetPropertySemanticsWorks,The length of the statement  "			Assert.AreEqual(Metadata.GetPropertySemantics(FindProperty("C.TheProperty")).Type' PropertyScriptSemantics.ImplType.Field); " is 123.
Long Statement,CoreLib.Tests.MetadataImporterTests,ChainingTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ChainingTests.cs,SetPropertySemanticsWorks,The length of the statement  "			Assert.AreEqual(Metadata.GetPropertySemantics(FindProperty("D.TheProperty")).Type' PropertyScriptSemantics.ImplType.GetAndSetMethods); " is 134.
Long Statement,CoreLib.Tests.MetadataImporterTests,ChainingTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ChainingTests.cs,SetEventSemanticsWorks,The length of the statement  "			Prepare(@"public class C { public event System.EventHandler TheEvent; } public class D : C { public new event System.EventHandler TheEvent; }"' () => { " is 151.
Long Statement,CoreLib.Tests.MetadataImporterTests,ChainingTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ChainingTests.cs,SetEventSemanticsWorks,The length of the statement  "				Metadata.SetEventSemantics(FindEvent("C.TheEvent")' EventScriptSemantics.AddAndRemoveMethods(MethodScriptSemantics.NormalMethod("addIt")' MethodScriptSemantics.NormalMethod("removeIt"))); " is 187.
Long Statement,CoreLib.Tests.MetadataImporterTests,ChainingTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ChainingTests.cs,SetEventSemanticsWorks,The length of the statement  "			Assert.AreEqual(Metadata.GetEventSemantics(FindEvent("C.TheEvent")).Type' EventScriptSemantics.ImplType.AddAndRemoveMethods); " is 125.
Long Statement,CoreLib.Tests.MetadataImporterTests,ChainingTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ChainingTests.cs,SetEventSemanticsWorks,The length of the statement  "			Assert.AreEqual(Metadata.GetEventSemantics(FindEvent("D.TheEvent")).Type' EventScriptSemantics.ImplType.AddAndRemoveMethods); " is 125.
Long Statement,CoreLib.Tests.MetadataImporterTests,ConstructorTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ConstructorTests.cs,ScriptNameAttributeCanSpecifyTheNameOfAConstructor,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; public class C { [ScriptName(""Renamed"")] public C() {} public C(int i) {} }"); " is 129.
Long Statement,CoreLib.Tests.MetadataImporterTests,ConstructorTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ConstructorTests.cs,BlankScriptNameAttributeForAConstructorDesignatesTheDefaultConstructor,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; public class C { public C() {} [ScriptName("""")] public C(int i) {} }"); " is 122.
Long Statement,CoreLib.Tests.MetadataImporterTests,ConstructorTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ConstructorTests.cs,AlternateSignatureWorksWhenTheMainMemberIsAnUnnamedConstructor,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; public class C { [AlternateSignature] public C() {} [AlternateSignature] public C(int i) {} public C(int i' int j) {} }"); " is 171.
Long Statement,CoreLib.Tests.MetadataImporterTests,ConstructorTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ConstructorTests.cs,AlternateSignatureWorksWhenTheMainMemberIsANamedConstructor,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; public class C { [AlternateSignature] public C() {} [AlternateSignature] public C(int i) {} [ScriptName(""Renamed"")] public C(int i' int j) {} }"); " is 197.
Long Statement,CoreLib.Tests.MetadataImporterTests,ConstructorTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ConstructorTests.cs,InlineCodeAttributeCanBeSpecifiedForConstructor,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; public class C { [InlineCode(""$X$"")] public C() {} public C(int i) {} }"); " is 125.
Long Statement,CoreLib.Tests.MetadataImporterTests,ConstructorTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ConstructorTests.cs,InlineCodeAttributeWithUnknownArgumentsIsAnError,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; class C1 { [InlineCode(""{this}"")] public C1() {} }"' expectErrors: true); " is 124.
Long Statement,CoreLib.Tests.MetadataImporterTests,ConstructorTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ConstructorTests.cs,InlineCodeAttributeWithUnknownArgumentsIsAnError,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("constructor") && AllErrorTexts[0].Contains("C1") && AllErrorTexts[0].Contains("inline code") && AllErrorTexts[0].Contains("{this}")); " is 172.
Long Statement,CoreLib.Tests.MetadataImporterTests,ConstructorTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ConstructorTests.cs,InlineCodeAttributeWithUnknownArgumentsIsAnError,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; class C1 { [InlineCode(""{x}"")] public C1() {} }"' expectErrors: true); " is 121.
Long Statement,CoreLib.Tests.MetadataImporterTests,ConstructorTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ConstructorTests.cs,InlineCodeAttributeWithUnknownArgumentsIsAnError,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("constructor") && AllErrorTexts[0].Contains("C1") && AllErrorTexts[0].Contains("inline code") && AllErrorTexts[0].Contains("{x}")); " is 169.
Long Statement,CoreLib.Tests.MetadataImporterTests,ConstructorTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ConstructorTests.cs,ErrorInNonExpandedFormCodeInInlineCodeAttributeIsAnError,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; class C1 { [InlineCode(""X""' NonExpandedFormCode = ""Y"")] public C1(int a' int[] b) {} }"' expectErrors: true); " is 162.
Long Statement,CoreLib.Tests.MetadataImporterTests,ConstructorTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ConstructorTests.cs,ErrorInNonExpandedFormCodeInInlineCodeAttributeIsAnError,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("constructor") && AllErrorTexts[0].Contains("C1") && AllErrorTexts[0].Contains("NonExpandedFormCode") && AllErrorTexts[0].Contains("params")); " is 180.
Long Statement,CoreLib.Tests.MetadataImporterTests,ConstructorTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ConstructorTests.cs,InlineCodeAttributeCannotSpecifyNonExpandedFormCodeIfTheConstructorDoesNotHaveAParamsParameter,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; class C1 { [InlineCode(""X""' NonExpandedFormCode = ""{x}"")] public C1(int a' params int[] b) {} }"' expectErrors: true); " is 171.
Long Statement,CoreLib.Tests.MetadataImporterTests,ConstructorTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ConstructorTests.cs,InlineCodeAttributeCannotSpecifyNonExpandedFormCodeIfTheConstructorDoesNotHaveAParamsParameter,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("constructor") && AllErrorTexts[0].Contains("C1") && AllErrorTexts[0].Contains("inline code") && AllErrorTexts[0].Contains("{x}")); " is 169.
Long Statement,CoreLib.Tests.MetadataImporterTests,ConstructorTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ConstructorTests.cs,DelegateTypeConstructorCannotBeUsed,The length of the statement  "			Assert.That(del.GetConstructors().Select(c => Metadata.GetConstructorSemantics(c).Type)' Has.All.EqualTo(ConstructorScriptSemantics.ImplType.NotUsableFromScript)); " is 163.
Long Statement,CoreLib.Tests.MetadataImporterTests,ConstructorTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ConstructorTests.cs,ExpandParamsAttributeCanOnlyBeAppliedToConstructorWithParamArray,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("C1") && m.Contains("constructor") && m.Contains("params") && m.Contains("ExpandParamsAttribute"))); " is 146.
Long Statement,CoreLib.Tests.MetadataImporterTests,ConstructorTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ConstructorTests.cs,ObjectLiteralAttributeCannotBeUsedOnConstructorForNonSerializableType,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("C1") && m.Contains("serializable type") && m.Contains("ObjectLiteralAttribute"))); " is 129.
Long Statement,CoreLib.Tests.MetadataImporterTests,DelegateTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\DelegateTests.cs,BindThisToFirstParameterCannotBeUsedOnDelegateWithoutParameters,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("D1") && m.Contains("BindThisToFirstParameterAttribute") && m.Contains("does not have any parameters"))); " is 151.
Long Statement,CoreLib.Tests.MetadataImporterTests,EventTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\EventTests.cs,SpecifyingInlineCodeForEventAddAndRemoveAccessorsWorks,The length of the statement  "	public event System.EventHandler Evt { [InlineCode(""add_({this})._({value})"")] add {} [InlineCode(""remove_({this})._({value})"")] remove {} } " is 144.
Long Statement,CoreLib.Tests.MetadataImporterTests,EventTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\EventTests.cs,CannotSpecifyInlineCodeOnEventAccessorsThatOverrideBaseMembers,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("D.add_Evt") && m.Contains("InlineCodeAttribute") && m.Contains("overrides"))); " is 125.
Long Statement,CoreLib.Tests.MetadataImporterTests,EventTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\EventTests.cs,CannotSpecifyInlineCodeOnEventAccessorsThatOverrideBaseMembers,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("D.remove_Evt") && m.Contains("InlineCodeAttribute") && m.Contains("overrides"))); " is 128.
Long Statement,CoreLib.Tests.MetadataImporterTests,EventTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\EventTests.cs,CannotSpecifyInlineCodeOnOverridableEventAccessors,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("C.add_Evt") && m.Contains("InlineCodeAttribute") && m.Contains("overridable"))); " is 127.
Long Statement,CoreLib.Tests.MetadataImporterTests,EventTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\EventTests.cs,CannotSpecifyInlineCodeOnOverridableEventAccessors,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("C.remove_Evt") && m.Contains("InlineCodeAttribute") && m.Contains("overridable"))); " is 130.
Long Statement,CoreLib.Tests.MetadataImporterTests,EventTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\EventTests.cs,OverridingEventAccessorsGetTheirNameFromTheDefiningMember,The length of the statement  "	public virtual event System.EventHandler Evt { [ScriptName(""RenamedMethod1"")] add {} [ScriptName(""RenamedMethod2"")] remove {} } " is 131.
Long Statement,CoreLib.Tests.MetadataImporterTests,EventTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\EventTests.cs,ScriptNameCannotBeBlank,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("C.Evt") && m.Contains("ScriptNameAttribute") && m.Contains("event") && m.Contains("cannot be empty"))); " is 150.
Long Statement,CoreLib.Tests.MetadataImporterTests,EventTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\EventTests.cs,CustomInitializationAttributeOnAutoEventIsNotAnError,The length of the statement  "			Prepare("public class C1<T> { [System.Runtime.CompilerServices.CustomInitialization(\"{$System.DateTime} + {value} + {T} + {this}\")] public event System.Action<T> e; }"); " is 171.
Long Statement,CoreLib.Tests.MetadataImporterTests,EventTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\EventTests.cs,CustomInitializationAttributeOnAutoEventIsNotAnError,The length of the statement  "			Prepare("public class C1<T> { [System.Runtime.CompilerServices.CustomInitialization(\"\")] public event System.Action<T> e; }"); " is 128.
Long Statement,CoreLib.Tests.MetadataImporterTests,EventTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\EventTests.cs,CustomInitializationAttributeOnAutoEventIsNotAnError,The length of the statement  "			Prepare("public class C1<T> { [System.Runtime.CompilerServices.CustomInitialization(null)] public event System.Action<T> e; }"); " is 128.
Long Statement,CoreLib.Tests.MetadataImporterTests,EventTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\EventTests.cs,CustomInitializationAttributeOnManualEventIsAnError,The length of the statement  "			Prepare("public class C1<T> { [System.Runtime.CompilerServices.CustomInitialization(\"null\")] public event System.Action<T> e1 { add {} remove {} } }"' expectErrors: true); " is 173.
Long Statement,CoreLib.Tests.MetadataImporterTests,EventTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\EventTests.cs,CustomInitializationAttributeOnManualEventIsAnError,The length of the statement  "			Assert.That(AllErrors[0].Code == 7165 && AllErrors[0].FormattedMessage.Contains("C1.e1") && AllErrors[0].FormattedMessage.Contains("manual")); " is 142.
Long Statement,CoreLib.Tests.MetadataImporterTests,EventTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\EventTests.cs,ErrorInCustomInitializationAttributeCodeIsAnError,The length of the statement  "			Prepare("public class C1<T> { [System.Runtime.CompilerServices.CustomInitialization(\"{x}\")] public event System.Action<T> e1; }"' expectErrors: true); " is 152.
Long Statement,CoreLib.Tests.MetadataImporterTests,EventTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\EventTests.cs,ErrorInCustomInitializationAttributeCodeIsAnError,The length of the statement  "			Prepare("public class C1<T> { [System.Runtime.CompilerServices.CustomInitialization(\"{this}\")] public static event System.Action<T> e1; }"' expectErrors: true); " is 162.
Long Statement,CoreLib.Tests.MetadataImporterTests,EventTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\EventTests.cs,ErrorInCustomInitializationAttributeCodeIsAnError,The length of the statement  "			Prepare("public class C1<T> { [System.Runtime.CompilerServices.CustomInitialization(\"a b\")] public event System.Action<T> e1; }"' expectErrors: true); " is 152.
Long Statement,CoreLib.Tests.MetadataImporterTests,FieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\FieldTests.cs,ScriptNameCannotBeBlank,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("C.Field") && m.Contains("ScriptNameAttribute") && m.Contains("field") && m.Contains("cannot be empty"))); " is 152.
Long Statement,CoreLib.Tests.MetadataImporterTests,FieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\FieldTests.cs,InlineConstantAttributeCannotBeAppliedToNonConstField,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; public class C1 { [InlineConstant] public static int Value = 42; }"' expectErrors: true); " is 138.
Long Statement,CoreLib.Tests.MetadataImporterTests,FieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\FieldTests.cs,NoInlineAttributeCannotBeAppliedToNonConstField,The length of the statement  "			Prepare("public class C1 { [System.Runtime.CompilerServices.NoInline] public static int X1 = 0; }"' expectErrors: true); " is 120.
Long Statement,CoreLib.Tests.MetadataImporterTests,FieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\FieldTests.cs,NoInlineAttributeCannotBeAppliedToNonConstField,The length of the statement  "			Assert.That(AllErrors.Any(m => m.Code == 7160 && m.FormattedMessage.Contains("C1.X1") && m.FormattedMessage.Contains("NoInlineAttribute"))); " is 140.
Long Statement,CoreLib.Tests.MetadataImporterTests,FieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\FieldTests.cs,CustomInitializationAttributeOnNonConstFieldIsNotAnError,The length of the statement  "			Prepare("public class C1<T> { [System.Runtime.CompilerServices.CustomInitialization(\"{$System.DateTime} + {value} + {T} + {this}\")] public T f; }"); " is 150.
Long Statement,CoreLib.Tests.MetadataImporterTests,FieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\FieldTests.cs,CustomInitializationAttributeOnConstFieldIsAnError,The length of the statement  "			Prepare("public class C1<T> { [System.Runtime.CompilerServices.CustomInitialization(\"null\")] public const T f1; }"' expectErrors: true); " is 138.
Long Statement,CoreLib.Tests.MetadataImporterTests,FieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\FieldTests.cs,CustomInitializationAttributeOnConstFieldIsAnError,The length of the statement  "			Assert.That(AllErrors[0].Code == 7164 && AllErrors[0].FormattedMessage.Contains("C1.f1") && AllErrors[0].FormattedMessage.Contains("const")); " is 141.
Long Statement,CoreLib.Tests.MetadataImporterTests,FieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\FieldTests.cs,ErrorInCustomInitializationAttributeCodeIsAnError,The length of the statement  "			Prepare("public class C1<T> { [System.Runtime.CompilerServices.CustomInitialization(\"{x}\")] public T f1; }"' expectErrors: true); " is 131.
Long Statement,CoreLib.Tests.MetadataImporterTests,FieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\FieldTests.cs,ErrorInCustomInitializationAttributeCodeIsAnError,The length of the statement  "			Prepare("public class C1<T> { [System.Runtime.CompilerServices.CustomInitialization(\"{this}\")] public static T f1; }"' expectErrors: true); " is 141.
Long Statement,CoreLib.Tests.MetadataImporterTests,FieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\FieldTests.cs,ErrorInCustomInitializationAttributeCodeIsAnError,The length of the statement  "			Prepare("public class C1<T> { [System.Runtime.CompilerServices.CustomInitialization(\"a b\")] public T f1; }"' expectErrors: true); " is 131.
Long Statement,CoreLib.Tests.MetadataImporterTests,IndexerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\IndexerTests.cs,SpecifyingInlineCodeForIndexerGettersAndSettersWorks,The length of the statement  "	public int this[int x] { [InlineCode(""get_({this})"")] get { return 0; } [InlineCode(""set_({this})._({value})"")] set {} } " is 124.
Long Statement,CoreLib.Tests.MetadataImporterTests,IndexerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\IndexerTests.cs,CannotSpecifyInlineCodeOnIndexerAccessorsThatOverrideBaseMembers,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("D.get_Item") && m.Contains("InlineCodeAttribute") && m.Contains("overrides"))); " is 126.
Long Statement,CoreLib.Tests.MetadataImporterTests,IndexerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\IndexerTests.cs,CannotSpecifyInlineCodeOnIndexerAccessorsThatOverrideBaseMembers,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("D.set_Item") && m.Contains("InlineCodeAttribute") && m.Contains("overrides"))); " is 126.
Long Statement,CoreLib.Tests.MetadataImporterTests,IndexerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\IndexerTests.cs,ImplicitInterfaceImplementationIndexerAccessorsGetTheirNameFromTheInterface,The length of the statement  "	T this[int x' int y] { [ScriptName(""RenamedMethod3"")] get { return default(T); } [ScriptName(""RenamedMethod4"")] set {} } " is 124.
Long Statement,CoreLib.Tests.MetadataImporterTests,IndexerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\IndexerTests.cs,ExplicitInterfaceImplementationIndexerAccessorsGetTheirNameFromTheInterface,The length of the statement  "			var p1 = Metadata.GetPropertySemantics(AllTypes["C"].Members.OfType<IProperty>().Single(i => !(i.ImplementedInterfaceMembers[0].DeclaringType is ParameterizedType))); " is 166.
Long Statement,CoreLib.Tests.MetadataImporterTests,IndexerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\IndexerTests.cs,ExplicitInterfaceImplementationIndexerAccessorsGetTheirNameFromTheInterface,The length of the statement  "			var p2 = Metadata.GetPropertySemantics(AllTypes["C"].Members.OfType<IProperty>().Single(i => i.ImplementedInterfaceMembers[0].DeclaringType is ParameterizedType)); " is 163.
Long Statement,CoreLib.Tests.MetadataImporterTests,IndexerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\IndexerTests.cs,IndexerWithIntrinsicPropertyAttributeMustHaveExactlyOneArgument,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("IntrinsicPropertyAttribute") && AllErrorTexts[0].Contains("indexer") && AllErrorTexts[0].Contains("exactly one parameter")); " is 163.
Long Statement,CoreLib.Tests.MetadataImporterTests,IndexerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\IndexerTests.cs,CannotSpecifyIntrinsicPropertyAttributeOnPropertiesImplementingInterfaceMembers,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("indexer") && m.Contains("IntrinsicPropertyAttribute") && m.Contains("interface member"))); " is 137.
Long Statement,CoreLib.Tests.MetadataImporterTests,IndexerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\IndexerTests.cs,CannotSpecifyIntrinsicPropertyAttributeOnPropertiesThatOverrideBaseMembers,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("indexer") && m.Contains("IntrinsicPropertyAttribute") && m.Contains("overrides"))); " is 130.
Long Statement,CoreLib.Tests.MetadataImporterTests,IndexerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\IndexerTests.cs,CannotSpecifyIntrinsicPropertyAttributeOnInterfaceProperties,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("indexer") && m.Contains("IntrinsicPropertyAttribute") && m.Contains("interface member"))); " is 137.
Long Statement,CoreLib.Tests.MetadataImporterTests,IndexerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\IndexerTests.cs,CannotSpecifyIntrinsicPropertyAttributeOnOverridableProperties,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("indexer") && m.Contains("IntrinsicPropertyAttribute") && m.Contains("overridable"))); " is 132.
Long Statement,CoreLib.Tests.MetadataImporterTests,IndexerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\IndexerTests.cs,ScriptNameCannotBeBlank,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("C") && m.Contains("ScriptNameAttribute") && m.Contains("indexer") && m.Contains("cannot be empty"))); " is 148.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,OverloadedMethodsGetDifferentNames,The length of the statement  "			var m2 = methods.Single(x => x.Item1.Parameters.Count == 1 && x.Item1.Parameters[0].Type.GetDefinition().KnownTypeCode == KnownTypeCode.Int32).Item2; " is 149.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,OverloadedMethodsGetDifferentNames,The length of the statement  "			var m3 = methods.Single(x => x.Item1.Parameters.Count == 1 && x.Item1.Parameters[0].Type.GetDefinition().KnownTypeCode == KnownTypeCode.String).Item2; " is 150.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,SameScriptNameCanBeSpecifiedOnManyOverloads,The length of the statement  "			var m2 = methods.Single(x => x.Item1.Parameters.Count == 1 && x.Item1.Parameters[0].Type.GetDefinition().KnownTypeCode == KnownTypeCode.Int32).Item2; " is 149.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,SameScriptNameCanBeSpecifiedOnManyOverloads,The length of the statement  "			var m3 = methods.Single(x => x.Item1.Parameters.Count == 1 && x.Item1.Parameters[0].Type.GetDefinition().KnownTypeCode == KnownTypeCode.String).Item2; " is 150.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,MethodCannotImplementTwoInterfaceMethodsIfTheNamesAreDifferent,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("implement") && AllErrorTexts[0].Contains("differing script names") && AllErrorTexts[0].Contains("C.SomeMethod")); " is 152.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,OverridingMethodCannotImplementInterfaceMethodIfTheNamesDiffer,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("implement") && AllErrorTexts[0].Contains("different script name") && AllErrorTexts[0].Contains("D.SomeMethod") && AllErrorTexts[0].Contains("I.SomeMethod")); " is 196.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,CannotSpecifyScriptNameAttributeOnMethodImplementingInterfaceMember,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("ScriptName") && AllErrorTexts[0].Contains("C.SomeMethod") && AllErrorTexts[0].Contains("interface member")); " is 147.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,CannotSpecifyPreserveNameAttributeOnMethodImplementingInterfaceMember,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("PreserveName") && AllErrorTexts[0].Contains("C.SomeMethod") && AllErrorTexts[0].Contains("interface member")); " is 149.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,CannotSpecifyPreserveCaseAttributeOnMethodImplementingInterfaceMember,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("PreserveCase") && AllErrorTexts[0].Contains("C.SomeMethod") && AllErrorTexts[0].Contains("interface member")); " is 149.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,CannotSpecifyScriptNameAttributeOnOverridingMethod,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("ScriptName") && AllErrorTexts[0].Contains("D.SomeMethod") && AllErrorTexts[0].Contains("overrides")); " is 140.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,CannotSpecifyPreserveNameAttributeOnOverridingMethod,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("ScriptName") && AllErrorTexts[0].Contains("D.SomeMethod") && AllErrorTexts[0].Contains("overrides")); " is 140.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,CannotSpecifyPreserveCaseAttributeOnOverridingMethod,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("PreserveCase") && AllErrorTexts[0].Contains("D.SomeMethod") && AllErrorTexts[0].Contains("overrides")); " is 142.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,EmptyScriptNameCannotBeSpecifiedOnInterfaceMethod,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; public interface I1 { [ScriptName("""")] void M(); }"' expectErrors: true); " is 124.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,EmptyScriptNameCannotBeSpecifiedOnInterfaceMethod,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("I1.M") && AllErrorTexts[0].Contains("ScriptName") && AllErrorTexts[0].Contains("interface method") && AllErrorTexts[0].Contains("empty name")); " is 182.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,EmptyScriptNameCannotBeSpecifiedOnVirtualOrAbstractMethod,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; public class C1 { [ScriptName("""")] public virtual void M() {} }"' expectErrors: true); " is 137.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,EmptyScriptNameCannotBeSpecifiedOnVirtualOrAbstractMethod,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("C1.M") && AllErrorTexts[0].Contains("ScriptName") && AllErrorTexts[0].Contains("overridable") && AllErrorTexts[0].Contains("empty name")); " is 177.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,EmptyScriptNameCannotBeSpecifiedOnVirtualOrAbstractMethod,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; public class C1 { [ScriptName("""")] public abstract void M() {} }"' expectErrors: true); " is 138.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,EmptyScriptNameCannotBeSpecifiedOnVirtualOrAbstractMethod,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("C1.M") && AllErrorTexts[0].Contains("ScriptName") && AllErrorTexts[0].Contains("overridable") && AllErrorTexts[0].Contains("empty name")); " is 177.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,EmptyScriptNameOnStaticMethodProducesAnInvocationOfTheType,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; namespace N1 { public class C1 { [ScriptName("""")] public static void M(int p1' string p2) {} } }"); " is 150.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,EmptyScriptNameOnStaticMethodProducesAnInvocationOfTheType,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; namespace N1 { [ScriptName("""")' ModuleName(""m"")] public class C1 { [ScriptName("""")] public static void M(int p1' string p2) {} } }"); " is 188.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,ScriptSkipAttributeCannotBeSpecifiedOnInterfaceMethod,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("I1.M") && AllErrorTexts[0].Contains("ScriptSkipAttribute") && AllErrorTexts[0].Contains("interface method")); " is 148.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,ScriptSkipAttributeCannotBeSpecifiedOnVirtualOrAbstractMethod,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; public class C1 { [ScriptSkip] public virtual void M() {} }"' expectErrors: true); " is 131.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,ScriptSkipAttributeCannotBeSpecifiedOnVirtualOrAbstractMethod,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("C1.M") && AllErrorTexts[0].Contains("ScriptSkipAttribute") && AllErrorTexts[0].Contains("overridable")); " is 143.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,ScriptSkipAttributeCannotBeSpecifiedOnVirtualOrAbstractMethod,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; public class C1 { [ScriptSkip] public abstract void M() {} }"' expectErrors: true); " is 132.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,ScriptSkipAttributeCannotBeSpecifiedOnVirtualOrAbstractMethod,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("C1.M") && AllErrorTexts[0].Contains("ScriptSkipAttribute") && AllErrorTexts[0].Contains("overridable")); " is 143.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,ScriptSkipAttributeCannotBeSpecifiedOnMethodImplementingInterfaceMember,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; public interface I { void M(); } public class C : I { [ScriptSkip] public void M() {} }"' expectErrors: true); " is 159.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,ScriptSkipAttributeCannotBeSpecifiedOnMethodImplementingInterfaceMember,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("C.M") && AllErrorTexts[0].Contains("ScriptSkipAttribute") && AllErrorTexts[0].Contains("implements")); " is 141.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,ScriptSkipAttributeCannotBeSpecifiedOnMethodThatOverridesABaseMember,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; public class B { public virtual void M() {} } public class D : B { [ScriptSkip] public sealed override void M() {} }"' expectErrors: true); " is 188.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,ScriptSkipAttributeCannotBeSpecifiedOnMethodThatOverridesABaseMember,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("D.M") && AllErrorTexts[0].Contains("ScriptSkipAttribute") && AllErrorTexts[0].Contains("overrides")); " is 140.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,StaticMethodWithScriptSkipAttributeMustHaveExactlyOneParameter,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; public class C1 { [ScriptSkip] static void M(); }"' expectErrors: true); " is 121.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,StaticMethodWithScriptSkipAttributeMustHaveExactlyOneParameter,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("C1.M") && AllErrorTexts[0].Contains("ScriptSkipAttribute") && AllErrorTexts[0].Contains("one parameter")); " is 145.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,StaticMethodWithScriptSkipAttributeMustHaveExactlyOneParameter,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; public class C1 { [ScriptSkip] static void M(int i' int j); }"' expectErrors: true); " is 133.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,StaticMethodWithScriptSkipAttributeMustHaveExactlyOneParameter,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("C1.M") && AllErrorTexts[0].Contains("ScriptSkipAttribute") && AllErrorTexts[0].Contains("one parameter")); " is 145.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InstanceMethodWithScriptSkipAttributeCannotHaveParameters,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("C1.M") && AllErrorTexts[0].Contains("ScriptSkipAttribute") && AllErrorTexts[0].Contains("no parameters")); " is 145.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InstanceMethodWithScriptSkipAttributeCannotHaveParameters,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; public class C1 { [ScriptSkip] void M(int i' int j); }"' expectErrors: true); " is 126.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InstanceMethodWithScriptSkipAttributeCannotHaveParameters,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("C1.M") && AllErrorTexts[0].Contains("ScriptSkipAttribute") && AllErrorTexts[0].Contains("no parameters")); " is 145.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,AlternateSignatureAttributeDoesNotConsiderNonScriptableOrInlineCodeMethods,The length of the statement  "			Assert.That(methods.Where(m => m.Item1.Parameters.Count < 3).All(m => m.Item2.GeneratedMethodName == (m.Item1.Parameters.Count == 2 ? m.Item2.Name : null))); " is 157.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,IfAnyMethodInAMethodGroupHasAnAlternateSignatureAttributeThenExactlyOneMethodMustNotHaveIt,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("C1.SomeMethod") && AllErrorTexts[0].Contains("AlternateSignatureAttribute") && AllErrorTexts[0].Contains("same name")); " is 158.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,IfAnyMethodInAMethodGroupHasAnAlternateSignatureAttributeThenExactlyOneMethodMustNotHaveIt,The length of the statement  "			Assert.That(AllErrorTexts.All(m => m.Contains("C1.SomeMethod") && m.Contains("AlternateSignatureAttribute") && m.Contains("same name"))); " is 137.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,ScriptAliasAttributeCanOnlyBeSpecifiedOnStaticMethods,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("C1.SomeMethod") && AllErrorTexts[0].Contains("ScriptAliasAttribute") && AllErrorTexts[0].Contains("must be static")); " is 156.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InlineCodeAttributeWorks,The length of the statement  "			Assert.That(impl.NonVirtualInvocationLiteralCode' Is.EqualTo("_({T1})._({T2})._({T3})._({T4})._({x})._({y})._({this})")); " is 121.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InlineCodeForVoidMethodCanContainMultipleStatements,The length of the statement  "			Assert.That(impl.NonVirtualInvocationLiteralCode' Is.EqualTo("if ({T1}) {T2}; else {T3}; var $$ = {T4} + {x} + {y} + {this};")); " is 128.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InlineCodeAttributeCannotSpecifyNonExpandedFormCodeIfTheMethodDoesNotHaveAParamsParameter,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; class C1 { [InlineCode(""X""' NonExpandedFormCode = ""Y"")] public void M1(int a' int[] b) {} }"' expectErrors: true); " is 167.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InlineCodeAttributeCannotSpecifyNonExpandedFormCodeIfTheMethodDoesNotHaveAParamsParameter,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("method") && AllErrorTexts[0].Contains("C1.M1") && AllErrorTexts[0].Contains("NonExpandedFormCode") && AllErrorTexts[0].Contains("params")); " is 178.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InlineCodeAttributeWithUnknownArgumentsIsAnError,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; class C1 { [InlineCode(""{this}"")] public static void SomeMethod() {} }"' expectErrors: true); " is 144.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InlineCodeAttributeWithUnknownArgumentsIsAnError,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("C1.SomeMethod") && AllErrorTexts[0].Contains("inline code") && AllErrorTexts[0].Contains("{this}")); " is 139.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InlineCodeAttributeWithUnknownArgumentsIsAnError,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; class C1 { [InlineCode(""{x}"")] public void SomeMethod() {} }"' expectErrors: true); " is 134.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InlineCodeAttributeWithUnknownArgumentsIsAnError,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("C1.SomeMethod") && AllErrorTexts[0].Contains("inline code") && AllErrorTexts[0].Contains("{x}")); " is 136.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InlineCodeAttributeWithUnknownArgumentsIsAnError,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; class C1 { [InlineCode(""X""' NonVirtualCode = ""{x}"")] public void SomeMethod() {} }"' expectErrors: true); " is 158.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InlineCodeAttributeWithUnknownArgumentsIsAnError,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("C1.SomeMethod") && AllErrorTexts[0].Contains("inline code") && AllErrorTexts[0].Contains("{x}")); " is 136.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InlineCodeAttributeWithUnknownArgumentsIsAnError,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; class C1 { [InlineCode(""X""' NonExpandedFormCode = ""{x}"")] public void SomeMethod(params int[] a) {} }"' expectErrors: true); " is 177.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InlineCodeAttributeWithUnknownArgumentsIsAnError,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("C1.SomeMethod") && AllErrorTexts[0].Contains("inline code") && AllErrorTexts[0].Contains("{x}")); " is 136.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InlineCodeAttributeReferencingUnknownTypeIsAnError,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; class C1 { [InlineCode(""{$Some.Nonexistent.Type}"")] public static void SomeMethod() {} }"' expectErrors: true); " is 162.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InlineCodeAttributeReferencingUnknownTypeIsAnError,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("C1.SomeMethod") && AllErrorTexts[0].Contains("inline code") && AllErrorTexts[0].Contains("Some.Nonexistent.Type")); " is 154.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InlineCodeAttributeCannotBeSpecifiedOnInterfaceMethod,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; public interface I1 { [InlineCode(""X"")] void M(); }"' expectErrors: true); " is 125.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InlineCodeAttributeCannotBeSpecifiedOnInterfaceMethod,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("I1.M") && AllErrorTexts[0].Contains("InlineCodeAttribute") && AllErrorTexts[0].Contains("interface method")); " is 148.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InlineCodeAttributeCannotBeSpecifiedOnOverridableMethod,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; public class C1 { [InlineCode(""X"")] public virtual void M() {} }"' expectErrors: true); " is 138.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InlineCodeAttributeCannotBeSpecifiedOnOverridableMethod,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("C1.M") && AllErrorTexts[0].Contains("InlineCodeAttribute") && AllErrorTexts[0].Contains("overridable")); " is 143.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InlineCodeAttributeCannotBeSpecifiedOnOverridableMethod,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; public class C1 { [InlineCode(""X"")] public abstract void M() {} }"' expectErrors: true); " is 139.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InlineCodeAttributeCannotBeSpecifiedOnOverridableMethod,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("C1.M") && AllErrorTexts[0].Contains("InlineCodeAttribute") && AllErrorTexts[0].Contains("overridable")); " is 143.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InlineCodeAttributeCannotBeSpecifiedOnMethodThatOverridesABaseMember,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; public class B { public virtual void M() {} } public class D : B { [InlineCode(""X"")] public sealed override void M() {} }"' expectErrors: true); " is 195.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InlineCodeAttributeCannotBeSpecifiedOnMethodThatOverridesABaseMember,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("D.M") && AllErrorTexts[0].Contains("InlineCodeAttribute") && AllErrorTexts[0].Contains("overrides")); " is 140.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InstanceMethodOnFirstArgumentAttributeCannotBeSpecifiedOnInstanceMember,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; public class C1 { [InstanceMethodOnFirstArgument] public void M() {} }"' expectErrors: true); " is 142.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InstanceMethodOnFirstArgumentAttributeCannotBeSpecifiedOnInstanceMember,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("C1.M") && AllErrorTexts[0].Contains("InstanceMethodOnFirstArgumentAttribute") && AllErrorTexts[0].Contains("static")); " is 157.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InstanceMethodOnFirstArgumentAttributeCannotBeSpecifiedOnMethodWithoutParameters,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; public class C1 { [InstanceMethodOnFirstArgument] public static void M() {} }"' expectErrors: true); " is 149.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InstanceMethodOnFirstArgumentAttributeCannotBeSpecifiedOnMethodWithoutParameters,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("C1.M") && AllErrorTexts[0].Contains("InstanceMethodOnFirstArgumentAttribute") && AllErrorTexts[0].Contains("parameters")); " is 161.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InstanceMethodOnFirstArgumentAttributeCannotBeSpecifiedOnMethodWithASingleParamsParameter,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; public class C1 { [InstanceMethodOnFirstArgument] public static void M(params int[] args) {} }"' expectErrors: true); " is 166.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InstanceMethodOnFirstArgumentAttributeCannotBeSpecifiedOnMethodWithASingleParamsParameter,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("C1.M") && AllErrorTexts[0].Contains("InstanceMethodOnFirstArgumentAttribute") && AllErrorTexts[0].Contains("params")); " is 157.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,ExpandParamsAttributeCanOnlyBeAppliedToMethodWithParamArrayIfInstanceMethodOnFirstArgument,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("C1.M2") && m.Contains("params") && m.Contains("ExpandParamsAttribute"))); " is 120.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,GenericArgumentDefaultRequireExplicitSpecificationCausesAnErrorIfIncludeGenericArgumentsIsNotSpecifiedForNonImportedTypes,The length of the statement  "			Assert.IsTrue(AllErrors.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7027 && m.FormattedMessage.Contains("IncludeGenericArgumentsAttribute") && m.FormattedMessage.Contains("C1.M1"))); " is 196.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,IncludeGenericArgumentsCannotBeSpecifiedOnOverridingMethod,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("IncludeGenericArguments") && AllErrorTexts[0].Contains("D.SomeMethod") && AllErrorTexts[0].Contains("overrides")); " is 153.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,MethodsOnDelegateCannotBeUsed,The length of the statement  "			Assert.That(del.Methods.Where(m => !m.IsConstructor).Select(m => new { m.Name' Impl = Metadata.GetMethodSemantics(m) }).All(m => m.Impl.Type == MethodScriptSemantics.ImplType.NotUsableFromScript)); " is 197.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,IntrinsicOperatorAttributeCannotBeAppliedToNonOperatorMethod,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("C1.M") && AllErrorTexts[0].Contains("IntrinsicOperatorAttribute") && AllErrorTexts[0].Contains("operator method")); " is 154.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,IntrinsicOperatorAttributeCannotBeAppliedToConversionOperator,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("C1") && m.Contains("IntrinsicOperatorAttribute") && m.Contains("conversion operator"))); " is 135.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,IntrinsicOperatorAttributeCannotBeAppliedToConversionOperator,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("C1") && m.Contains("IntrinsicOperatorAttribute") && m.Contains("conversion operator"))); " is 135.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,ExpandParamsAttributeCanOnlyBeAppliedToMethodWithParamArray,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("C1.M2") && m.Contains("params") && m.Contains("ExpandParamsAttribute"))); " is 120.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,SpecifyingEnumerateAsArrayOnMethodThatIsNotAGetEnumeratorMethodIsAnError,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("C1") && m.Contains("EnumerateAsArrayAttribute") && m.Contains("GetEnumerator"))); " is 128.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,SpecifyingEnumerateAsArrayOnMethodThatIsNotAGetEnumeratorMethodIsAnError,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("C1") && m.Contains("EnumerateAsArrayAttribute") && m.Contains("GetEnumerator"))); " is 128.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,SpecifyingEnumerateAsArrayOnMethodThatIsNotAGetEnumeratorMethodIsAnError,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("C1") && m.Contains("EnumerateAsArrayAttribute") && m.Contains("GetEnumerator"))); " is 128.
Long Statement,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,SpecifyingEnumerateAsArrayOnMethodThatIsNotAGetEnumeratorMethodIsAnError,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("C1") && m.Contains("EnumerateAsArrayAttribute") && m.Contains("GetEnumerator"))); " is 128.
Long Statement,CoreLib.Tests.MetadataImporterTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MiscTests.cs,EncodeNumberWorksWhenAllowingDigitFirst,The length of the statement  "				"0"' "1"' "2"' "3"' "4"' "5"' "6"' "7"' "8"' "9"' "a"' "b"' "c"' "d"' "e"' "f"' "g"' "h"' "i"' "j"' "k"' "l"' "m"' "n"' "o"' "p"' "q"' "r"' "s"' "t"' "u"' "v"' "w"' "x"' "y"' "z"' "A"' "B"' "C"' "D"' "E"' "F"' "G"' "H"' "I"' "J"' "K"' "L"' "M"' "N"' "O"' "P"' "Q"' "R"' "S"' "T"' "U"' "V"' "W"' "X"' "Y"' "Z"' " is 309.
Long Statement,CoreLib.Tests.MetadataImporterTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MiscTests.cs,EncodeNumberWorksWhenAllowingDigitFirst,The length of the statement  "				"10"' "11"' "12"' "13"' "14"' "15"' "16"' "17"' "18"' "19"' "1a"' "1b"' "1c"' "1d"' "1e"' "1f"' "1g"' "1h"' "1i"' "1j"' "1k"' "1l"' "1m"' "1n"' "1o"' "1p"' "1q"' "1r"' "1s"' "1t"' "1u"' "1v"' "1w"' "1x"' "1y"' "1z"' "1A"' "1B"' "1C"' "1D"' "1E"' "1F"' "1G"' "1H"' "1I"' "1J"' "1K"' "1L"' "1M"' "1N"' "1O"' "1P"' "1Q"' "1R"' "1S"' "1T"' "1U"' "1V"' "1W"' "1X"' "1Y"' "1Z"' " is 371.
Long Statement,CoreLib.Tests.MetadataImporterTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MiscTests.cs,EncodeNumberWorksWhenAllowingDigitFirst,The length of the statement  "				"20"' "21"' "22"' "23"' "24"' "25"' "26"' "27"' "28"' "29"' "2a"' "2b"' "2c"' "2d"' "2e"' "2f"' "2g"' "2h"' "2i"' "2j"' "2k"' "2l"' "2m"' "2n"' "2o"' "2p"' "2q"' "2r"' "2s"' "2t"' "2u"' "2v"' "2w"' "2x"' "2y"' "2z"' "2A"' "2B"' "2C"' "2D"' "2E"' "2F"' "2G"' "2H"' "2I"' "2J"' "2K"' "2L"' "2M"' "2N"' "2O"' "2P"' "2Q"' "2R"' "2S"' "2T"' "2U"' "2V"' "2W"' "2X"' "2Y"' "2Z"' " is 371.
Long Statement,CoreLib.Tests.MetadataImporterTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MiscTests.cs,EncodeNumberWorksWhenAllowingDigitFirst,The length of the statement  "				"100"' "101"' "102"' "103"' "104"' "105"' "106"' "107"' "108"' "109"' "10a"' "10b"' "10c"' "10d"' "10e"' "10f"' "10g"' "10h"' "10i"' "10j"' "10k"' "10l"' "10m"' "10n"' "10o"' "10p"' "10q"' "10r"' "10s"' "10t"' "10u"' "10v"' "10w"' "10x"' "10y"' "10z"' "10A"' "10B"' "10C"' "10D"' "10E"' "10F"' "10G"' "10H"' "10I"' "10J"' "10K"' "10L"' "10M"' "10N"' "10O"' "10P"' "10Q"' "10R"' "10S"' "10T"' "10U"' "10V"' "10W"' "10X"' "10Y"' "10Z"' " is 433.
Long Statement,CoreLib.Tests.MetadataImporterTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MiscTests.cs,EncodeNumberWorksWhenAllowingDigitFirst,The length of the statement  "				"110"' "111"' "112"' "113"' "114"' "115"' "116"' "117"' "118"' "119"' "11a"' "11b"' "11c"' "11d"' "11e"' "11f"' "11g"' "11h"' "11i"' "11j"' "11k"' "11l"' "11m"' "11n"' "11o"' "11p"' "11q"' "11r"' "11s"' "11t"' "11u"' "11v"' "11w"' "11x"' "11y"' "11z"' "11A"' "11B"' "11C"' "11D"' "11E"' "11F"' "11G"' "11H"' "11I"' "11J"' "11K"' "11L"' "11M"' "11N"' "11O"' "11P"' "11Q"' "11R"' "11S"' "11T"' "11U"' "11V"' "11W"' "11X"' "11Y"' "11Z"' " is 433.
Long Statement,CoreLib.Tests.MetadataImporterTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MiscTests.cs,EncodeNumberWorksWhenAllowingDigitFirst,The length of the statement  "				"120"' "121"' "122"' "123"' "124"' "125"' "126"' "127"' "128"' "129"' "12a"' "12b"' "12c"' "12d"' "12e"' "12f"' "12g"' "12h"' "12i"' "12j"' "12k"' "12l"' "12m"' "12n"' "12o"' "12p"' "12q"' "12r"' "12s"' "12t"' "12u"' "12v"' "12w"' "12x"' "12y"' "12z"' "12A"' "12B"' "12C"' "12D"' "12E"' "12F"' "12G"' "12H"' "12I"' "12J"' "12K"' "12L"' "12M"' "12N"' "12O"' "12P"' "12Q"' "12R"' "12S"' "12T"' "12U"' "12V"' "12W"' "12X"' "12Y"' "12Z"' " is 433.
Long Statement,CoreLib.Tests.MetadataImporterTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MiscTests.cs,EncodeNumberWorksWhenAllowingDigitFirst,The length of the statement  "				"200"' "201"' "202"' "203"' "204"' "205"' "206"' "207"' "208"' "209"' "20a"' "20b"' "20c"' "20d"' "20e"' "20f"' "20g"' "20h"' "20i"' "20j"' "20k"' "20l"' "20m"' "20n"' "20o"' "20p"' "20q"' "20r"' "20s"' "20t"' "20u"' "20v"' "20w"' "20x"' "20y"' "20z"' "20A"' "20B"' "20C"' "20D"' "20E"' "20F"' "20G"' "20H"' "20I"' "20J"' "20K"' "20L"' "20M"' "20N"' "20O"' "20P"' "20Q"' "20R"' "20S"' "20T"' "20U"' "20V"' "20W"' "20X"' "20Y"' "20Z"' " is 433.
Long Statement,CoreLib.Tests.MetadataImporterTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MiscTests.cs,EncodeNumberWorksWhenAllowingDigitFirst,The length of the statement  "				"210"' "211"' "212"' "213"' "214"' "215"' "216"' "217"' "218"' "219"' "21a"' "21b"' "21c"' "21d"' "21e"' "21f"' "21g"' "21h"' "21i"' "21j"' "21k"' "21l"' "21m"' "21n"' "21o"' "21p"' "21q"' "21r"' "21s"' "21t"' "21u"' "21v"' "21w"' "21x"' "21y"' "21z"' "21A"' "21B"' "21C"' "21D"' "21E"' "21F"' "21G"' "21H"' "21I"' "21J"' "21K"' "21L"' "21M"' "21N"' "21O"' "21P"' "21Q"' "21R"' "21S"' "21T"' "21U"' "21V"' "21W"' "21X"' "21Y"' "21Z"' " is 433.
Long Statement,CoreLib.Tests.MetadataImporterTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MiscTests.cs,EncodeNumberWorksWhenAllowingDigitFirst,The length of the statement  "				"220"' "221"' "222"' "223"' "224"' "225"' "226"' "227"' "228"' "229"' "22a"' "22b"' "22c"' "22d"' "22e"' "22f"' "22g"' "22h"' "22i"' "22j"' "22k"' "22l"' "22m"' "22n"' "22o"' "22p"' "22q"' "22r"' "22s"' "22t"' "22u"' "22v"' "22w"' "22x"' "22y"' "22z"' "22A"' "22B"' "22C"' "22D"' "22E"' "22F"' "22G"' "22H"' "22I"' "22J"' "22K"' "22L"' "22M"' "22N"' "22O"' "22P"' "22Q"' "22R"' "22S"' "22T"' "22U"' "22V"' "22W"' "22X"' "22Y"' "22Z"' " is 433.
Long Statement,CoreLib.Tests.MetadataImporterTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MiscTests.cs,EncodeNumberWorksWhenAllowingDigitFirst,The length of the statement  "			Assert.That(Enumerable.Range(238328' 190).Select(i => MetadataUtils.EncodeNumber(i' false)).ToList()' Is.EqualTo(new[] { " is 120.
Long Statement,CoreLib.Tests.MetadataImporterTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MiscTests.cs,EncodeNumberWorksWhenAllowingDigitFirst,The length of the statement  "				"1000"' "1001"' "1002"' "1003"' "1004"' "1005"' "1006"' "1007"' "1008"' "1009"' "100a"' "100b"' "100c"' "100d"' "100e"' "100f"' "100g"' "100h"' "100i"' "100j"' "100k"' "100l"' "100m"' "100n"' "100o"' "100p"' "100q"' "100r"' "100s"' "100t"' "100u"' "100v"' "100w"' "100x"' "100y"' "100z"' "100A"' "100B"' "100C"' "100D"' "100E"' "100F"' "100G"' "100H"' "100I"' "100J"' "100K"' "100L"' "100M"' "100N"' "100O"' "100P"' "100Q"' "100R"' "100S"' "100T"' "100U"' "100V"' "100W"' "100X"' "100Y"' "100Z"' " is 495.
Long Statement,CoreLib.Tests.MetadataImporterTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MiscTests.cs,EncodeNumberWorksWhenAllowingDigitFirst,The length of the statement  "				"1010"' "1011"' "1012"' "1013"' "1014"' "1015"' "1016"' "1017"' "1018"' "1019"' "101a"' "101b"' "101c"' "101d"' "101e"' "101f"' "101g"' "101h"' "101i"' "101j"' "101k"' "101l"' "101m"' "101n"' "101o"' "101p"' "101q"' "101r"' "101s"' "101t"' "101u"' "101v"' "101w"' "101x"' "101y"' "101z"' "101A"' "101B"' "101C"' "101D"' "101E"' "101F"' "101G"' "101H"' "101I"' "101J"' "101K"' "101L"' "101M"' "101N"' "101O"' "101P"' "101Q"' "101R"' "101S"' "101T"' "101U"' "101V"' "101W"' "101X"' "101Y"' "101Z"' " is 495.
Long Statement,CoreLib.Tests.MetadataImporterTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MiscTests.cs,EncodeNumberWorksWhenAllowingDigitFirst,The length of the statement  "				"1020"' "1021"' "1022"' "1023"' "1024"' "1025"' "1026"' "1027"' "1028"' "1029"' "102a"' "102b"' "102c"' "102d"' "102e"' "102f"' "102g"' "102h"' "102i"' "102j"' "102k"' "102l"' "102m"' "102n"' "102o"' "102p"' "102q"' "102r"' "102s"' "102t"' "102u"' "102v"' "102w"' "102x"' "102y"' "102z"' "102A"' "102B"' "102C"' "102D"' "102E"' "102F"' "102G"' "102H"' "102I"' "102J"' "102K"' "102L"' "102M"' "102N"' "102O"' "102P"' "102Q"' "102R"' "102S"' "102T"' "102U"' "102V"' "102W"' "102X"' "102Y"' "102Z"' " is 495.
Long Statement,CoreLib.Tests.MetadataImporterTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MiscTests.cs,EncodeNumberWorksWhenAllowingDigitFirst,The length of the statement  "			Assert.That(Enumerable.Range(0' 1000000).Select(i => MetadataUtils.EncodeNumber(i' false)).Distinct().Count()' Is.EqualTo(1000000)); " is 132.
Long Statement,CoreLib.Tests.MetadataImporterTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MiscTests.cs,EncodeNumberWorksWhenNotAllowingDigitFirst,The length of the statement  "				"a"' "b"' "c"' "d"' "e"' "f"' "g"' "h"' "i"' "j"' "k"' "l"' "m"' "n"' "o"' "p"' "q"' "r"' "s"' "t"' "u"' "v"' "w"' "x"' "y"' "z"' "A"' "B"' "C"' "D"' "E"' "F"' "G"' "H"' "I"' "J"' "K"' "L"' "M"' "N"' "O"' "P"' "Q"' "R"' "S"' "T"' "U"' "V"' "W"' "X"' "Y"' "Z"' " is 259.
Long Statement,CoreLib.Tests.MetadataImporterTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MiscTests.cs,EncodeNumberWorksWhenNotAllowingDigitFirst,The length of the statement  "				"ba"' "bb"' "bc"' "bd"' "be"' "bf"' "bg"' "bh"' "bi"' "bj"' "bk"' "bl"' "bm"' "bn"' "bo"' "bp"' "bq"' "br"' "bs"' "bt"' "bu"' "bv"' "bw"' "bx"' "by"' "bz"' "bA"' "bB"' "bC"' "bD"' "bE"' "bF"' "bG"' "bH"' "bI"' "bJ"' "bK"' "bL"' "bM"' "bN"' "bO"' "bP"' "bQ"' "bR"' "bS"' "bT"' "bU"' "bV"' "bW"' "bX"' "bY"' "bZ"' " is 311.
Long Statement,CoreLib.Tests.MetadataImporterTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MiscTests.cs,EncodeNumberWorksWhenNotAllowingDigitFirst,The length of the statement  "				"ca"' "cb"' "cc"' "cd"' "ce"' "cf"' "cg"' "ch"' "ci"' "cj"' "ck"' "cl"' "cm"' "cn"' "co"' "cp"' "cq"' "cr"' "cs"' "ct"' "cu"' "cv"' "cw"' "cx"' "cy"' "cz"' "cA"' "cB"' "cC"' "cD"' "cE"' "cF"' "cG"' "cH"' "cI"' "cJ"' "cK"' "cL"' "cM"' "cN"' "cO"' "cP"' "cQ"' "cR"' "cS"' "cT"' "cU"' "cV"' "cW"' "cX"' "cY"' "cZ"' " is 311.
Long Statement,CoreLib.Tests.MetadataImporterTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MiscTests.cs,EncodeNumberWorksWhenNotAllowingDigitFirst,The length of the statement  "			Assert.That(Enumerable.Range(0' 1000000).Select(i => MetadataUtils.EncodeNumber(i' true)).Distinct().Count()' Is.EqualTo(1000000)); " is 131.
Long Statement,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,CannotSpecifyScriptSkipOnPropertyAccessorsImplementingInterfaceMembers,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("C.get_Prop") && m.Contains("ScriptSkipAttribute") && m.Contains("interface member"))); " is 133.
Long Statement,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,CannotSpecifyScriptSkipOnPropertyAccessorsImplementingInterfaceMembers,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("C.set_Prop") && m.Contains("ScriptSkipAttribute") && m.Contains("interface member"))); " is 133.
Long Statement,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,CannotSpecifyInlineCodeOnPropertyAccessorsThatOverrideBaseMembers,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("D.get_Prop") && m.Contains("InlineCodeAttribute") && m.Contains("overrides"))); " is 126.
Long Statement,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,CannotSpecifyInlineCodeOnPropertyAccessorsThatOverrideBaseMembers,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("D.set_Prop") && m.Contains("InlineCodeAttribute") && m.Contains("overrides"))); " is 126.
Long Statement,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,CannotSpecifyScriptSkipOnPropertyAccessorsThatOverrideBaseMembers,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("D.get_Prop") && m.Contains("ScriptSkipAttribute") && m.Contains("overrides"))); " is 126.
Long Statement,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,CannotSpecifyScriptSkipOnPropertyAccessorsThatOverrideBaseMembers,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("D.set_Prop") && m.Contains("ScriptSkipAttribute") && m.Contains("overrides"))); " is 126.
Long Statement,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,CannotSpecifyInlineCodeOnOverridablePropertyAccessors,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("C.get_Prop") && m.Contains("InlineCodeAttribute") && m.Contains("overridable"))); " is 128.
Long Statement,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,CannotSpecifyInlineCodeOnOverridablePropertyAccessors,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("C.set_Prop") && m.Contains("InlineCodeAttribute") && m.Contains("overridable"))); " is 128.
Long Statement,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,CannotSpecifyScriptSkipOnOverridablePropertyAccessors,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("C.get_Prop") && m.Contains("ScriptSkipAttribute") && m.Contains("overridable"))); " is 128.
Long Statement,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,CannotSpecifyScriptSkipOnOverridablePropertyAccessors,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("C.set_Prop") && m.Contains("ScriptSkipAttribute") && m.Contains("overridable"))); " is 128.
Long Statement,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,CannotSpecifyIntrinsicPropertyAttributeOnPropertiesImplementingInterfaceMembers,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("C.Prop") && m.Contains("IntrinsicPropertyAttribute") && m.Contains("interface member"))); " is 136.
Long Statement,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,CannotSpecifyIntrinsicPropertyAttributeOnPropertiesThatOverrideBaseMembers,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("D.Prop") && m.Contains("IntrinsicPropertyAttribute") && m.Contains("overrides"))); " is 129.
Long Statement,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,CannotSpecifyIntrinsicPropertyAttributeOnInterfaceProperties,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("I.Prop") && m.Contains("IntrinsicPropertyAttribute") && m.Contains("interface member"))); " is 136.
Long Statement,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,CannotSpecifyIntrinsicPropertyAttributeOnOverridableProperties,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("C.Prop") && m.Contains("IntrinsicPropertyAttribute") && m.Contains("overridable"))); " is 131.
Long Statement,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,ScriptAliasAttributeCannotBeSpecifiedOnInstanceProperty,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("C1.Prop") && AllErrorTexts[0].Contains("instance member") && AllErrorTexts[0].Contains("ScriptAliasAttribute")); " is 151.
Long Statement,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,ScriptNameCannotBeBlank,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("C.Prop") && m.Contains("ScriptNameAttribute") && m.Contains("property") && m.Contains("cannot be empty"))); " is 154.
Long Statement,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,CustomInitializationAttributeOnAutoPropertyIsNotAnError,The length of the statement  "			Prepare("public class C1<T> { [System.Runtime.CompilerServices.CustomInitialization(\"{$System.DateTime} + {value} + {T} + {this}\")] public T p { get; set; } }"); " is 163.
Long Statement,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,CustomInitializationAttributeOnAutoPropertyIsNotAnError,The length of the statement  "			Prepare("public class C1<T> { [System.Runtime.CompilerServices.CustomInitialization(\"\")] public T p { get; set; } }"); " is 120.
Long Statement,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,CustomInitializationAttributeOnAutoPropertyIsNotAnError,The length of the statement  "			Prepare("public class C1<T> { [System.Runtime.CompilerServices.CustomInitialization(null)] public T p { get; set; } }"); " is 120.
Long Statement,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,CustomInitializationAttributeOnManualPropertyIsAnError,The length of the statement  "			Prepare("public class C1<T> { [System.Runtime.CompilerServices.CustomInitialization(\"null\")] public T p1 { get { return default(T); } set {} } }"' expectErrors: true); " is 169.
Long Statement,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,CustomInitializationAttributeOnManualPropertyIsAnError,The length of the statement  "			Assert.That(AllErrors[0].Code == 7166 && AllErrors[0].FormattedMessage.Contains("C1.p1") && AllErrors[0].FormattedMessage.Contains("manual")); " is 142.
Long Statement,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,ErrorInCustomInitializationAttributeCodeIsAnError,The length of the statement  "			Prepare("public class C1<T> { [System.Runtime.CompilerServices.CustomInitialization(\"{x}\")] public T p1 { get; set; } }"' expectErrors: true); " is 144.
Long Statement,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,ErrorInCustomInitializationAttributeCodeIsAnError,The length of the statement  "			Prepare("public class C1<T> { [System.Runtime.CompilerServices.CustomInitialization(\"{this}\")] public static T p1 { get; set; } }"' expectErrors: true); " is 154.
Long Statement,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,ErrorInCustomInitializationAttributeCodeIsAnError,The length of the statement  "			Prepare("public class C1<T> { [System.Runtime.CompilerServices.CustomInitialization(\"a b\")] public T p1 { get; set; } }"' expectErrors: true); " is 144.
Long Statement,CoreLib.Tests.MetadataImporterTests,MetadataImporterTestBase,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MetadataImporterTestBase.cs,RunAutomaticMetadataAttributeAppliers,The length of the statement  "			var processors = new IAutomaticMetadataAttributeApplier[] { new MakeMembersWithScriptableAttributesReflectable(store) }; " is 120.
Long Statement,CoreLib.Tests.MetadataImporterTests,MetadataImporterTestBase,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MetadataImporterTestBase.cs,Prepare,The length of the statement  "			Metadata = new MetadataImporter(_errorReporter' compilation' s' new CompilerOptions { MinimizeScript = minimizeNames }); " is 120.
Long Statement,CoreLib.Tests.MetadataImporterTests,MetadataImporterTestBase,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MetadataImporterTestBase.cs,Prepare,The length of the statement  "			AllTypes = compilation.MainAssembly.TopLevelTypeDefinitions.SelectMany(SelfAndNested).ToDictionary(t => t.ReflectionName); " is 122.
Long Statement,CoreLib.Tests.MetadataImporterTests,MetadataImporterTestBase,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MetadataImporterTestBase.cs,FindProperty,The length of the statement  "			return FindMembers(name).Cast<IProperty>().Where(p => !p.IsIndexer).Select(p => Metadata.GetPropertySemantics(p)).Single(); " is 123.
Long Statement,CoreLib.Tests.MetadataImporterTests,MetadataImporterTestBase,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MetadataImporterTestBase.cs,FindIndexer,The length of the statement  "			return AllTypes[typeName].Members.OfType<IProperty>().Where(p => p.Parameters.Count == parameterCount).Select(p => Metadata.GetPropertySemantics(p)).Single(); " is 158.
Long Statement,CoreLib.Tests.MetadataImporterTests,MetadataImporterTestBase,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MetadataImporterTestBase.cs,FindConstructor,The length of the statement  "			return Metadata.GetConstructorSemantics(AllTypes[typeName].Methods.Single(m => m.IsConstructor && !m.IsStatic && m.Parameters.Count == parameterCount)); " is 152.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,TestBothKinds,The length of the statement  "			Prepare(@"using System; using System.Runtime.CompilerServices; [Serializable] public sealed class C1 { " + content + " }"' expectErrors: expectErrors); " is 151.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,TestBothKinds,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; public sealed class C1 : System.Record { " + content + " }"' expectErrors: expectErrors); " is 138.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,TypeWithSerializableAttributeCanInheritFromObjectOrRecordOrAnotherSerializableTypeButNotFromNonSerializableType,The length of the statement  "			Prepare(@"using System; using System.Runtime.CompilerServices; class B {} [Serializable] class C1 : Object {}"' expectErrors: false); " is 133.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,TypeWithSerializableAttributeCanInheritFromObjectOrRecordOrAnotherSerializableTypeButNotFromNonSerializableType,The length of the statement  "			Prepare(@"using System; using System.Runtime.CompilerServices; class B {} [Serializable] class C1 : Record {}"' expectErrors: false); " is 133.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,TypeWithSerializableAttributeCanInheritFromObjectOrRecordOrAnotherSerializableTypeButNotFromNonSerializableType,The length of the statement  "			Prepare(@"using System; using System.Runtime.CompilerServices; [Serializable] class B {} [Serializable] class C1 : B {}"' expectErrors: false); " is 143.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,TypeWithSerializableAttributeCanInheritFromObjectOrRecordOrAnotherSerializableTypeButNotFromNonSerializableType,The length of the statement  "			Prepare(@"using System; using System.Runtime.CompilerServices; class B {} [Serializable] class C1 : B {}"' expectErrors: true); " is 127.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,TypeWithSerializableAttributeCanInheritFromObjectOrRecordOrAnotherSerializableTypeButNotFromNonSerializableType,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("C1") && m.Contains("must inherit from another serializable type' System.Object or System.Record"))); " is 147.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,TypeWithoutSerializableAttributeCanInheritRecordAndSerializableType,The length of the statement  "			Prepare(@"using System; using System.Runtime.CompilerServices; [Serializable] class B {} class C1 : B {}"' expectErrors: false); " is 128.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,SerializableTypesCannotDeclareVirtualMembers,The length of the statement  "				Assert.That(AllErrorTexts.Any(m => m.Contains("C1") && m.Contains("M1") && m.Contains("cannot declare") && m.Contains("virtual"))); " is 131.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,SerializableTypesCannotDeclareVirtualMembers,The length of the statement  "				Assert.That(AllErrorTexts.Any(m => m.Contains("C1") && m.Contains("P1") && m.Contains("cannot declare") && m.Contains("virtual"))); " is 131.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,SerializableTypesCannotImplementNonSerializableInterfaces,The length of the statement  "			Prepare(@"using System; using System.Runtime.CompilerServices; interface I1 {} [Serializable] sealed class C1 : I1 {}"' expectErrors: true); " is 140.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,SerializableTypesCannotImplementNonSerializableInterfaces,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("C1") && m.Contains("serializable type") && m.Contains("cannot implement") && m.Contains("I1"))); " is 143.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,SerializableTypesCannotImplementNonSerializableInterfaces,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("C1") && m.Contains("serializable type") && m.Contains("cannot implement") && m.Contains("I1"))); " is 143.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,SerializableTypesCanImplementSerializableInterfaces,The length of the statement  "			Prepare(@"using System; using System.Runtime.CompilerServices; [Serializable] interface I { int Prop1 { get; set; } } [Serializable] sealed class C1 : I { public int Prop1 { get; set; } }"' expectErrors: false); " is 211.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,SerializableTypesCanImplementSerializableInterfaces,The length of the statement  "			Prepare(@"using System; [Serializable] interface I { int Prop1 { get; set; } } sealed class C1 : Record' I { public int Prop1 { get; set; } }"' expectErrors: false); " is 165.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,NonSerializableTypesCanImplementSerializableInterfaces,The length of the statement  "			Prepare(@"using System; [Serializable] interface I { int Prop1 { get; set; } } class C1 : I { public int Prop1 { get; set; } }"' expectErrors: false); " is 150.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,SerializableClassPropertyCanImplementTwoDistinctSerializableInterfacePropertiesIfAndOnlyIfTheyHaveTheSameName,The length of the statement  "			Prepare(@"using System; [Serializable] public interface I1 { int Prop1 { get; set; } } [Serializable] public interface I2 { int Prop1 { get; set; } } [Serializable] class C1 : I1' I2 { public int Prop1 { get; set; } }"' expectErrors: false); " is 241.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,SerializableClassPropertyCanImplementTwoDistinctSerializableInterfacePropertiesIfAndOnlyIfTheyHaveTheSameName,The length of the statement  "			Prepare(@"using System; using System.Runtime.CompilerServices; [Serializable] public interface I1 { int Prop1 { get; set; } } [Serializable] public interface I2 { [ScriptName(""renamed"")] int Prop1 { get; set; } } [Serializable] class C1 : I1' I2 { public int Prop1 { get; set; } }"' expectErrors: true); " is 305.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,NonSerializableClassPropertyCanImplementTwoDistinctSerializableInterfacePropertiesIfAndOnlyIfTheyHaveTheSameName,The length of the statement  "			Prepare(@"using System; [Serializable] public interface I1 { int Prop1 { get; set; } } [Serializable] public interface I2 { int Prop1 { get; set; } } class C1 : I1' I2 { public int Prop1 { get; set; } }"' expectErrors: false); " is 226.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,NonSerializableClassPropertyCanImplementTwoDistinctSerializableInterfacePropertiesIfAndOnlyIfTheyHaveTheSameName,The length of the statement  "			Prepare(@"using System; using System.Runtime.CompilerServices; [Serializable] public interface I1 { int Prop1 { get; set; } } [Serializable] public interface I2 { [ScriptName(""renamed"")] int Prop1 { get; set; } } class C1 : I1' I2 { public int Prop1 { get; set; } }"' expectErrors: true); " is 290.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,NonSerializableClassPropertyCannotImplementPropertyFromBothSerializableAndNonSerializableInterface,The length of the statement  "			Prepare(@"using System; [Serializable] public interface I1 { int Prop1 { get; set; } } public interface I2 { int Prop1 { get; set; } } class C1 : I1' I2 { public int Prop1 { get; set; } }"' expectErrors: true); " is 210.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,VirtualPropertyCannotImplementSerializableInterfaceProperty,The length of the statement  "			Prepare(@"using System; [Serializable] public interface I1 { int Prop1 { get; set; } } class C1 : I1 { public virtual int Prop1 { get; set; } }"' expectErrors: true); " is 166.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,VirtualPropertyCannotImplementSerializableInterfaceProperty,The length of the statement  "			Assert.That(AllErrors.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7153 && m.FormattedMessage.Contains("C1.Prop1") && m.FormattedMessage.Contains("I1.Prop1") && m.FormattedMessage.Contains("virtual"))); " is 215.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,OverridingPropertyCannotImplementSerializableInterfaceProperty,The length of the statement  "			Prepare(@"using System; [Serializable] public interface I1 { int Prop1 { get; set; } } class B { public virtual int Prop1 { get; set; } } class C1 : B' I1 { public sealed override int Prop1 { get; set; } }"' expectErrors: true); " is 228.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,OverridingPropertyCannotImplementSerializableInterfaceProperty,The length of the statement  "			Assert.That(AllErrors.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7154 && m.FormattedMessage.Contains("C1.Prop1") && m.FormattedMessage.Contains("I1.Prop1") && m.FormattedMessage.Contains("overrides"))); " is 217.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,PropertyOfNonSerializableClassThatImplementsSerializedInterfaceMemberMustBeImplementedAsAutoProperty,The length of the statement  "			Prepare(@"using System; [Serializable] public interface I1 { int Prop1 { get; set; } } class C1 : I1 { public int Prop1 { get { return 0; } set {} } }"' expectErrors: true); " is 173.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,PropertyOfNonSerializableClassThatImplementsSerializedInterfaceMemberMustBeImplementedAsAutoProperty,The length of the statement  "			Assert.That(AllErrors.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7156 && m.FormattedMessage.Contains("C1.Prop1") && m.FormattedMessage.Contains("I1.Prop1") && m.FormattedMessage.Contains("auto-property"))); " is 221.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,PropertyOfNonSerializableClassThatImplementsSerializedInterfaceMemberMustBeImplementedAsAutoProperty,The length of the statement  "			Prepare(@"using System; [Serializable] public interface I1 { int Prop1 { get; } } class C1 : I1 { public int Prop1 { get { return 0; } } }"' expectErrors: true); " is 161.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,PropertyOfNonSerializableClassThatImplementsSerializedInterfaceMemberMustBeImplementedAsAutoProperty,The length of the statement  "			Assert.That(AllErrors.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7156 && m.FormattedMessage.Contains("C1.Prop1") && m.FormattedMessage.Contains("I1.Prop1") && m.FormattedMessage.Contains("auto-property"))); " is 221.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,PropertyOfNonSerializableClassThatImplementsSerializedInterfaceMemberMustBeImplementedAsAutoProperty,The length of the statement  "			Prepare(@"using System; [Serializable] public interface I1 { int Prop1 { set; } } class C1 : I1 { public int Prop1 { set {} } }"' expectErrors: true); " is 150.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,PropertyOfNonSerializableClassThatImplementsSerializedInterfaceMemberMustBeImplementedAsAutoProperty,The length of the statement  "			Assert.That(AllErrors.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7156 && m.FormattedMessage.Contains("C1.Prop1") && m.FormattedMessage.Contains("I1.Prop1") && m.FormattedMessage.Contains("auto-property"))); " is 221.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,SerializableInterfaceCannotDeclareMethods,The length of the statement  "			Assert.That(AllErrors.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7155 && m.FormattedMessage.Contains("I1") && m.FormattedMessage.Contains("cannot declare methods"))); " is 181.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,SerializableTypesCannotDeclareInstanceEvents,The length of the statement  "			Prepare(@"using System; using System.Runtime.CompilerServices; [Serializable] sealed class C1 { event System.EventHandler Evt; }"' expectErrors: true); " is 151.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,SerializableTypesCannotDeclareInstanceEvents,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("C1") && m.Contains("serializable type") && m.Contains("cannot declare instance event"))); " is 136.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,SerializableTypesCannotDeclareInstanceEvents,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; sealed class C1 : System.Record { event System.EventHandler Evt; }"' expectErrors: true); " is 138.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,SerializableTypesCannotDeclareInstanceEvents,The length of the statement  "			Assert.That(AllErrorTexts.Any(m => m.Contains("C1") && m.Contains("serializable type") && m.Contains("cannot declare instance event"))); " is 136.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,SerializableTypesCannotDeclareInstanceEvents,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; [Record] sealed class C1 { static event System.EventHandler Evt; }"' expectErrors: false); " is 139.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,SerializableTypesCannotDeclareInstanceEvents,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; sealed class C1 : System.Record { static event System.EventHandler Evt; }"' expectErrors: false); " is 146.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,InstanceFieldsOnSerializableTypesCanBeRenamedButUsesPreserveNameIfNoOtherAttributeWasSpecified,The length of the statement  "			TestBothKinds(@"[PreserveName] int Field1; [PreserveCase] int Field2; [ScriptName(""Renamed"")] int Field3; int Field4;"' () => { " is 129.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,InstancePropertiesOnSerializableTypesUseFieldSemanticsAndCanBeRenamedButUsesPreserveNameIfNoOtherAttributeWasSpecified,The length of the statement  "			TestBothKinds(@"[PreserveName] int Prop1 { get; set; } [PreserveCase] int Prop2 { get; set; } [ScriptName(""Renamed"")] int Prop3 { get; set; } int Prop4 { get; set; }"' () => { " is 177.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,InstancePropertiesOnSerializableTypesUseFieldSemanticsAndCanBeRenamedButUsesPreserveNameIfNoOtherAttributeWasSpecified,The length of the statement  "			Prepare(@"using System; using System.Runtime.CompilerServices; [Serializable] interface I1 { [PreserveName] int Prop1 { get; set; } [PreserveCase] int Prop2 { get; set; } [ScriptName(""Renamed"")] int Prop3 { get; set; } int Prop4 { get; set; } }"); " is 249.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,IndexerOnSerializableTypeMustHaveExactlyOneArgument,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("Serializable") && AllErrorTexts[0].Contains("indexer") && AllErrorTexts[0].Contains("exactly one parameter")); " is 149.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,SerializableInterfaceCannotDeclareIndexer,The length of the statement  "			Assert.That(AllErrors[0].Code == 7161 && AllErrorTexts[0].Contains("serializable") && AllErrorTexts[0].Contains("indexer")); " is 124.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,InstancePropertiesOnSerializableTypesCanHaveInlineCode,The length of the statement  "			TestBothKinds(@"int Prop1 { [InlineCode(""_({this}).X"")] get; [InlineCode(""_({this})._({value})"")] set; } int Prop2 { [InlineCode(""_({this}).X2"")] get { return 0; } } int Prop3 { [InlineCode(""_({this})._({value}).X2"")] set {} }"' () => { " is 244.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,IndexersOnSerializableTypesCanHaveInlineCode,The length of the statement  "			TestBothKinds(@"int this[int a] { [InlineCode(""_({this}).X"")] get; [InlineCode(""_({this})._({value})"")] set; } int this[int a' int b] { [InlineCode(""_({this}).X2"")] get { return 0; } } int this[int a' int b' int c] { [InlineCode(""_({this})._({value}).X2"")] set {} }"' () => { " is 283.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,InstanceMethodsAreConvertedToStaticMethodsWithThisAsFirstArgumentButStaticMethodsAreNormal,The length of the statement  "			TestBothKinds("public void SomeMethod() {} public static void SomeMethod(int x) {} public void SomeMethod(string s) {} public void SomeMethod(int a' int b) {}"' () => { " is 168.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,InstanceMethodsAreConvertedToStaticMethodsWithThisAsFirstArgumentButStaticMethodsAreNormal,The length of the statement  "				var m2 = methods.Single(x => x.Item1.Parameters.Count == 1 && x.Item1.Parameters[0].Type.GetDefinition().KnownTypeCode == KnownTypeCode.Int32).Item2; " is 149.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,InstanceMethodsAreConvertedToStaticMethodsWithThisAsFirstArgumentButStaticMethodsAreNormal,The length of the statement  "				var m3 = methods.Single(x => x.Item1.Parameters.Count == 1 && x.Item1.Parameters[0].Type.GetDefinition().KnownTypeCode == KnownTypeCode.String).Item2; " is 150.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,NonPublicMethodNamesAreMinimized,The length of the statement  "			TestBothKinds("void SomeMethod() {} static void SomeMethod(int x) {} void SomeMethod(string s) {} void SomeMethod(int a' int b) {}"' () => { " is 140.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,NonPublicMethodNamesAreMinimized,The length of the statement  "				var m2 = methods.Single(x => x.Item1.Parameters.Count == 1 && x.Item1.Parameters[0].Type.GetDefinition().KnownTypeCode == KnownTypeCode.Int32).Item2; " is 149.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,NonPublicMethodNamesAreMinimized,The length of the statement  "				var m3 = methods.Single(x => x.Item1.Parameters.Count == 1 && x.Item1.Parameters[0].Type.GetDefinition().KnownTypeCode == KnownTypeCode.String).Item2; " is 150.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,ObjectLiteralAttributeMakesTheConstructorAJsonConstructor,The length of the statement  "			TestBothKinds(@"public int MyProperty { get; set; } public int MyField; [ObjectLiteral] public C1(int myProperty' int myField) {} }"' () => { " is 141.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,ConstructorForImportedSerializableTypeBecomesJsonConstructor,The length of the statement  "			Prepare(@"using System; using System.Runtime.CompilerServices; [Serializable' Imported] public sealed class C1 { public int MyProperty { get; set; } public int MyField; public C1(int myProperty' int myField) {} }"); " is 215.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,ConstructorForImportedSerializableTypeBecomesJsonConstructor,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; [Imported] public sealed class C1 : System.Record { public int MyProperty { get; set; } public int MyField; public C1(int myProperty' int myField) {} }"); " is 203.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,JsonConstructorMustHaveAllParametersMatchingMemberNamesCaseInsensitive,The length of the statement  "				Assert.That(AllErrorTexts.Any(m => m.Contains("C1") && m.Contains("parameter") && m.Contains("matching") && m.Contains("someParameter"))); " is 138.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,ArgumentTypesForJsonConstructorMustMatchMemberTypes,The length of the statement  "				Assert.That(AllErrorTexts.Any(m => m.Contains("someParameter") && m.Contains("System.String") && m.Contains("System.Int32"))); " is 126.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,ArgumentTypesForJsonConstructorMustMatchMemberTypes,The length of the statement  "				Assert.That(AllErrorTexts.Any(m => m.Contains("someParameter") && m.Contains("System.Nullable") && m.Contains("System.Int32"))); " is 128.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,SerializableInterfaceCanInheritFromOtherSerializableInterfaces,The length of the statement  "			Prepare("using System; [Serializable] public interface I1 {} [Serializable] public interface I2 : I1 {}"' expectErrors: false); " is 127.
Long Statement,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,SerializableInterfaceCannotInheritFromNonSerializableInterfaces,The length of the statement  "			Assert.IsTrue(AllErrors.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7010 && m.FormattedMessage.Contains("I1") && m.FormattedMessage.Contains("I2"))); " is 163.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,MinimizedTypeNamesAreUniquePerNamespace,The length of the statement  "			Assert.That(new[] { "C1"' "C2"' "C2+C3" }.Select(s => FindType(s).Name).ToList()' Is.EquivalentTo(new[] { "$0"' "$1"' "$2" })); " is 127.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,MinimizedTypeNamesAreUniquePerNamespace,The length of the statement  "			Assert.That(new[] { "X.C4"' "X.C5"' "X.C5+C6" }.Select(s => FindType(s).Name).ToList()' Is.EquivalentTo(new[] { "X.$0"' "X.$1"' "X.$2" })); " is 139.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,MinimizedTypeNamesAreUniquePerNamespace,The length of the statement  "			Assert.That(new[] { "X.Y.C7"' "X.Y.C8"' "X.Y.C8+C9" }.Select(s => FindType(s).Name).ToList()' Is.EquivalentTo(new[] { "X.Y.$0"' "X.Y.$1"' "X.Y.$2" })); " is 151.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,InvalidIdentifierInAssemblyScriptNamespaceAttributeIsAnError,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; [assembly: ScriptNamespace(""invalid-identifier"")] public class Class1 {}"' expectErrors: true); " is 146.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,ScriptNamespaceAttributeCannotBeAppliedToNestedTypes,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("nested type") && AllErrorTexts[0].Contains("X.C1.C2") && AllErrorTexts[0].Contains("ScriptNamespace")); " is 142.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,IgnoreNamespaceAttributeCannotBeAppliedToNestedTypes,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("nested type") && AllErrorTexts[0].Contains("X.C1.C2") && AllErrorTexts[0].Contains("IgnoreNamespace")); " is 142.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,CannotApplyBothIgnoreNamespaceAndScriptNamespaceToTheSameClass,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("X.C1") && AllErrorTexts[0].Contains("IgnoreNamespace") && AllErrorTexts[0].Contains("ScriptNamespace")); " is 143.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,ScriptNameAttributeOnTypeMustBeAValidJSIdentifier,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("C1") && AllErrorTexts[0].Contains("ScriptName") && AllErrorTexts[0].Contains("must be a valid JavaScript identifier")); " is 158.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,ScriptNameAttributeOnTypeMustBeAValidJSIdentifier,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("C1") && AllErrorTexts[0].Contains("ScriptName") && AllErrorTexts[0].Contains("must be a valid JavaScript identifier")); " is 158.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,ScriptNameAttributeOnTypeMustBeAValidJSIdentifier,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("C1") && AllErrorTexts[0].Contains("ScriptName") && AllErrorTexts[0].Contains("must be a valid JavaScript identifier")); " is 158.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,ScriptNamespaceAttributeArgumentMustBeAValidJSQualifiedIdentifierOrBeEmpty,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("C1") && AllErrorTexts[0].Contains("ScriptNamespace") && AllErrorTexts[0].Contains("must be a valid JavaScript qualified identifier")); " is 173.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,ScriptNamespaceAttributeArgumentMustBeAValidJSQualifiedIdentifierOrBeEmpty,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("C1") && AllErrorTexts[0].Contains("ScriptNamespace") && AllErrorTexts[0].Contains("must be a valid JavaScript qualified identifier")); " is 173.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,ScriptNamespaceAndIgnoreNamespaceAttributesAreConsideredWhenMinimizingNames,The length of the statement  "			Assert.That(new[] { "C1"' "X.C4"' "X.Y.C7" }.Select(s => FindType(s).Name).ToList()' Is.EquivalentTo(new[] { "$0"' "$1"' "$2" })); " is 130.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,ScriptNamespaceAndIgnoreNamespaceAttributesAreConsideredWhenMinimizingNames,The length of the statement  "			Assert.That(new[] { "C2"' "X.C5"' "X.Y.C9" }.Select(s => FindType(s).Name).ToList()' Is.EquivalentTo(new[] { "X.$0"' "X.$1"' "X.$2" })); " is 136.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,ScriptNamespaceAndIgnoreNamespaceAttributesAreConsideredWhenMinimizingNames,The length of the statement  "			Assert.That(new[] { "C3"' "X.C6"' "X.Y.C8" }.Select(s => FindType(s).Name).ToList()' Is.EquivalentTo(new[] { "X.Y.$0"' "X.Y.$1"' "X.Y.$2" })); " is 142.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,PreserveNameAttributePreventsMinimization,The length of the statement  "[PreserveName] public class C10 { [PreserveName] private class C11 {} [PreserveName] protected class C12 {} [PreserveName] protected internal class C13 {} } " is 156.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,GlobalMethodsAttributeCannotBeAppliedToNonStaticClass,The length of the statement  "			Assert.That(AllErrorTexts[0].Contains("C1") && AllErrorTexts[0].Contains("GlobalMethodsAttribute") && AllErrorTexts[0].Contains("must be static")); " is 147.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,GenericArgumentDefaultRequireExplicitSpecificationCausesAnErrorIfIncludeGenericArgumentsIsNotSpecifiedForNonImportedTypes,The length of the statement  "			Assert.IsTrue(AllErrors.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7026 && m.FormattedMessage.Contains("IncludeGenericArgumentsAttribute") && m.FormattedMessage.Contains("C1"))); " is 193.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,MixinAttributeArgumentCannotBeNullOrBlank,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; [Mixin(""$.fn"")] public static class C1 { static void Method1(int i) {} }"); " is 126.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,MixinAttributeArgumentCannotBeNullOrBlank,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; [Mixin(""$"")] public static class C1 { static void Method1(int i) {} }"); " is 123.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,MixinAttributeArgumentCannotBeNullOrBlank,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; [Mixin(null)] public static class C1 { static void Method1(int i) {} }"' expectErrors: true); " is 142.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,MixinAttributeArgumentCannotBeNullOrBlank,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; [Mixin("""")] public static class C1 { static void Method1(int i) {} }"' expectErrors: true); " is 142.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,ValidTypeCheckCodeForImportedTypeIsNotAnError,The length of the statement  "			Prepare(@"[System.Runtime.CompilerServices.Imported(TypeCheckCode = ""{this} == 0"")] public class C1 {}"' expectErrors: false); " is 128.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,ValidTypeCheckCodeForImportedTypeIsNotAnError,The length of the statement  "			Prepare(@"[System.Runtime.CompilerServices.Imported(TypeCheckCode = ""{this} == {T}"")' System.Runtime.CompilerServices.IncludeGenericArguments(true)] public class C1<T> {}"' expectErrors: false); " is 196.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,ValidTypeCheckCodeForImportedTypeIsNotAnError,The length of the statement  "			Prepare(@"[System.Runtime.CompilerServices.Imported(TypeCheckCode = ""{this} == {T}"")' System.Runtime.CompilerServices.IncludeGenericArguments(false)] public class C1<T> {}"' expectErrors: false); " is 197.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,TypeCheckCodeInSerializableAttributeForImportedSerializableTypeIsAnError,The length of the statement  "			Prepare(@"[System.Serializable(TypeCheckCode = ""{this} == 0"")' System.Runtime.CompilerServices.Imported] public class C1 {}"' expectErrors: true); " is 148.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,TypeCheckCodeInSerializableAttributeForImportedSerializableTypeIsAnError,The length of the statement  "			Assert.That(AllErrors.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7159 && m.FormattedMessage.Contains("C1") && m.FormattedMessage.Contains("TypeCheckCode") && m.FormattedMessage.Contains("SerializableAttribute"))); " is 228.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,TypeCheckCodeAndObeysTypeSystemOnSameImportedTypeIsAnError,The length of the statement  "			Prepare(@"using System.Runtime.CompilerServices; [Imported(TypeCheckCode = ""{this} == 0""' ObeysTypeSystem = true)] public class C1 {}"' expectErrors: true); " is 158.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,TypeCheckCodeAndObeysTypeSystemOnSameImportedTypeIsAnError,The length of the statement  "			Assert.That(AllErrors.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7158 && m.FormattedMessage.Contains("C1") && m.FormattedMessage.Contains("TypeCheckCode") && m.FormattedMessage.Contains("ObeysTypeSystem"))); " is 222.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,ReferencingNonExistentTypeInImportedTypeCheckCodeIsAnError,The length of the statement  "			Prepare(@"[System.Runtime.CompilerServices.Imported(TypeCheckCode = ""{this} == {$Some.Nonexistent.Type}"")] public class C1<T> {}"' expectErrors: true); " is 153.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,ReferencingNonExistentTypeInImportedTypeCheckCodeIsAnError,The length of the statement  "			Assert.That(AllErrors.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7157 && m.FormattedMessage.Contains("C1") && m.FormattedMessage.Contains("Some.Nonexistent.Type"))); " is 180.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,SyntaxErrorInImportedTypeCheckCodeIsAnError,The length of the statement  "			Prepare(@"[System.Runtime.CompilerServices.Imported(TypeCheckCode = ""{{this} == 1"")] public class C1<T> {}"' expectErrors: true); " is 131.
Long Statement,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,SyntaxErrorInImportedTypeCheckCodeIsAnError,The length of the statement  "			Assert.That(AllErrors.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7157 && m.FormattedMessage.Contains("C1") && m.FormattedMessage.Contains("syntax error"))); " is 171.
Long Statement,CoreLib.Tests.NamerTests,GetVariableNameTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\NamerTests\GetVariableNameTests.cs,ReturnsTheVariableNameSuffixedWithAnIncrementingDigitWhenTheNameIsAlreadyUsed,The length of the statement  "			Assert.That(n.GetVariableName("variable"' new HashSet<string> { "variable"' "variable1"' "variable2" })' Is.EqualTo("variable3")); " is 130.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,ImportedTypeThatDoesNotObeyTheTypeSystemIsReplacedWithObjectForGenericArgumentsInInheritanceListOfClasses,The length of the statement  "{Script}.initClass($D' $asm' {}' {Script}.makeGenericType({B}' [{Object}' {Int32}])' [{Script}.makeGenericType({I}' [{String}' {Object}])]); " is 140.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,ImportedTypeThatDoesObeyTheTypeSystemIsUsedInInheritanceListOfClass,The length of the statement  "{Script}.initClass($D' $asm' {}' {Script}.makeGenericType({B}' [{C}' {Int32}])' [{Script}.makeGenericType({I}' [{String}' {C}])]); " is 130.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,UsingUnavailableTypeArgumentInInheritanceListIsAnError,The length of the statement  "			Assert.That(er.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7536 && m.FormattedMessage.Contains("IncludeGenericArguments") && m.FormattedMessage.Contains("type D1"))); " is 192.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,UsingUnavailableTypeParameterInSerializableTypeCheckCodeIsAnError,The length of the statement  "[System.Serializable(TypeCheckCode = ""{this} == {T}"")' System.Runtime.CompilerServices.IncludeGenericArguments(false)] public class C1<T> {} " is 142.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,UsingUnavailableTypeParameterInSerializableTypeCheckCodeIsAnError,The length of the statement  "			Assert.That(er.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7536 && m.FormattedMessage.Contains("IncludeGenericArguments") && m.FormattedMessage.Contains("type C1"))); " is 192.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,ReferencingNonExistentTypeInSerializableTypeCheckCodeIsAnError,The length of the statement  "[System.Serializable(TypeCheckCode = ""{this} == {$Some.Nonexistent.Type}"")' System.Runtime.CompilerServices.IncludeGenericArguments(false)] public class C1<T> {} " is 163.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,ReferencingNonExistentTypeInSerializableTypeCheckCodeIsAnError,The length of the statement  "			Assert.That(er.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7157 && m.FormattedMessage.Contains("C1") && m.FormattedMessage.Contains("Some.Nonexistent.Type"))); " is 185.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,SyntaxErrorInSerializableTypeCheckCodeIsAnError,The length of the statement  "[System.Serializable(TypeCheckCode = ""{{this} == 1"")' System.Runtime.CompilerServices.IncludeGenericArguments(false)] public class C1<T> {} " is 141.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,SyntaxErrorInSerializableTypeCheckCodeIsAnError,The length of the statement  "			Assert.That(er.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7157 && m.FormattedMessage.Contains("C1") && m.FormattedMessage.Contains("syntax error"))); " is 176.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,TheSecondPhaseHasAllBaseTypesAsDependencies,The length of the statement  "			Assert.That(actual.Phases[1].DependentOnTypes.Select(t => t.Name)' Is.EquivalentTo(new[] { "B1"' "B2"' "I1"' "I2"' "Object" })); " is 128.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,NothingIsReturnedAsTheStaticInitStatementsForResourceTypes,The length of the statement  "			var compilation = Compile(@"[System.Runtime.CompilerServices.Resources] static class C { const int x = 0; const int y = 0; }"); " is 127.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,GeneratedGetHashCodeGeneratesHashCodeBasedOnAllInstanceFields,The length of the statement  "			var initClass = compilation.Item2.EmulateType((JsClass)compilation.Item3.Single(t => t.CSharpTypeDefinition.Name == "S")).Phases[1].Statements[0]; " is 146.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,GeneratedGetHashCodeGeneratesHashCodeBasedOnAllInstanceFields,The length of the statement  "			var getHashCode = ((JsObjectLiteralExpression)((JsInvocationExpression)((JsExpressionStatement)initClass).Expression).Arguments[2]).Values.Single(v => v.Name == "getHashCode"); " is 176.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,GeneratedGetHashCodeWithOneField,The length of the statement  "			var initClass = compilation.Item2.EmulateType((JsClass)compilation.Item3.Single(t => t.CSharpTypeDefinition.Name == "S")).Phases[1].Statements[0]; " is 146.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,GeneratedGetHashCodeWithOneField,The length of the statement  "			var getHashCode = ((JsObjectLiteralExpression)((JsInvocationExpression)((JsExpressionStatement)initClass).Expression).Arguments[2]).Values.Single(v => v.Name == "getHashCode"); " is 176.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,GeneratedGetHashCodeWithNoFields,The length of the statement  "			var initClass = compilation.Item2.EmulateType((JsClass)compilation.Item3.Single(t => t.CSharpTypeDefinition.Name == "S")).Phases[1].Statements[0]; " is 146.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,GeneratedGetHashCodeWithNoFields,The length of the statement  "			var getHashCode = ((JsObjectLiteralExpression)((JsInvocationExpression)((JsExpressionStatement)initClass).Expression).Arguments[2]).Values.Single(v => v.Name == "getHashCode"); " is 176.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,GeneratedEqualsCalculatesEqualityBasedOnAllInstanceFields,The length of the statement  "			var initClass = compilation.Item2.EmulateType((JsClass)compilation.Item3.Single(t => t.CSharpTypeDefinition.Name == "S")).Phases[1].Statements[0]; " is 146.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,GeneratedEqualsCalculatesEqualityBasedOnAllInstanceFields,The length of the statement  "			var equals = ((JsObjectLiteralExpression)((JsInvocationExpression)((JsExpressionStatement)initClass).Expression).Arguments[2]).Values.Single(v => v.Name == "equals"); " is 166.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,GeneratedEqualsCalculatesEqualityBasedOnAllInstanceFields,The length of the statement  "	return this.f1 === o.f1 && {Script}.equals(this.f2' o.f2) && this.f3 === o.f3 && {Script}.equals(this.f4' o.f4) && this.f5 === o.f5 && {Script}.equals(this.f6' o.f6) && {Script}.equals(this.f7' o.f7) && {Script}.equals(this.f8' o.f8) && {Script}.equals(this.f9' o.f9) && {Script}.equals(this.f10' o.f10) && {Script}.equals(this.f11' o.f11); " is 340.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,GeneratedEqualsWithOneField,The length of the statement  "			var initClass = compilation.Item2.EmulateType((JsClass)compilation.Item3.Single(t => t.CSharpTypeDefinition.Name == "S")).Phases[1].Statements[0]; " is 146.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,GeneratedEqualsWithOneField,The length of the statement  "			var equals = ((JsObjectLiteralExpression)((JsInvocationExpression)((JsExpressionStatement)initClass).Expression).Arguments[2]).Values.Single(v => v.Name == "equals"); " is 166.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,GeneratedEqualsWithNoFields,The length of the statement  "			var initClass = compilation.Item2.EmulateType((JsClass)compilation.Item3.Single(t => t.CSharpTypeDefinition.Name == "S")).Phases[1].Statements[0]; " is 146.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,GeneratedEqualsWithNoFields,The length of the statement  "			var equals = ((JsObjectLiteralExpression)((JsInvocationExpression)((JsExpressionStatement)initClass).Expression).Arguments[2]).Values.Single(v => v.Name == "equals"); " is 166.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,ReflectionOnUnusableConstructorIsAnError,The length of the statement  "			Assert.That(er.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7200 && m.FormattedMessage.Contains("C1") && m.FormattedMessage.Contains("reflection"))); " is 174.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,ReflectionOnNativeOperatorMethodIsAnError,The length of the statement  "			Assert.That(er.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7201 && m.FormattedMessage.Contains("C1.op_Multiply") && m.FormattedMessage.Contains("method") && m.FormattedMessage.Contains("reflection"))); " is 227.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,ReflectionOnUnusableMethodIsAnError,The length of the statement  "			Assert.That(er.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7201 && m.FormattedMessage.Contains("C1.M") && m.FormattedMessage.Contains("method") && m.FormattedMessage.Contains("reflection"))); " is 217.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,ReflectionOnInlineConstantFieldIsAnError,The length of the statement  "			Assert.That(er.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7201 && m.FormattedMessage.Contains("C1.F") && m.FormattedMessage.Contains("field") && m.FormattedMessage.Contains("reflection"))); " is 216.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,ReflectionOnUnusableFieldIsAnError,The length of the statement  "			Assert.That(er.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7201 && m.FormattedMessage.Contains("C1.F") && m.FormattedMessage.Contains("field") && m.FormattedMessage.Contains("reflection"))); " is 216.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,ReflectionOnUnusablePropertyIsAnError,The length of the statement  "			Assert.That(er.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7201 && m.FormattedMessage.Contains("C1.P") && m.FormattedMessage.Contains("property") && m.FormattedMessage.Contains("reflection"))); " is 219.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,ReflectionOnPropertyWithUnusableGetterIsAnError,The length of the statement  "			Assert.That(er.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7202 && m.FormattedMessage.Contains("C1.P") && m.FormattedMessage.Contains("property") && m.FormattedMessage.Contains("getter") && m.FormattedMessage.Contains("reflection"))); " is 260.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,ReflectionOnPropertyWithUnusableSetterIsAnError,The length of the statement  "			Assert.That(er.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7202 && m.FormattedMessage.Contains("C1.P") && m.FormattedMessage.Contains("property") && m.FormattedMessage.Contains("setter") && m.FormattedMessage.Contains("reflection"))); " is 260.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,ReflectionOnUnusableEventIsAnError,The length of the statement  "			Assert.That(er.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7201 && m.FormattedMessage.Contains("C1.E") && m.FormattedMessage.Contains("event") && m.FormattedMessage.Contains("reflection"))); " is 216.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,ReflectionOnEventWithUnusableAdderIsAnError,The length of the statement  "			Assert.That(er.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7202 && m.FormattedMessage.Contains("C1.E") && m.FormattedMessage.Contains("event") && m.FormattedMessage.Contains("add accessor") && m.FormattedMessage.Contains("reflection"))); " is 263.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,ReflectionOnEventWithUnusableRemoverIsAnError,The length of the statement  "			Assert.That(er.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7202 && m.FormattedMessage.Contains("C1.E") && m.FormattedMessage.Contains("event") && m.FormattedMessage.Contains("remove accessor") && m.FormattedMessage.Contains("reflection"))); " is 266.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,DefaultMemberReflectabilityAttributeCanBeSpecifiedOnAssemblyButCanBeOverriddenOnTypes,The length of the statement  "			var c1 = (JsObjectLiteralExpression)((JsInvocationExpression)((JsExpressionStatement)emulation.Phases[2].Statements[0]).Expression).Arguments[1]; " is 145.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,DefaultMemberReflectabilityAttributeCanBeSpecifiedOnAssemblyButCanBeOverriddenOnTypes,The length of the statement  "			var c1Members = ((JsArrayLiteralExpression)c1.Values.Single(p => p.Name == "members").Value).Elements.Cast<JsObjectLiteralExpression>().ToList(); " is 145.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,DefaultMemberReflectabilityAttributeCanBeSpecifiedOnAssemblyButCanBeOverriddenOnTypes,The length of the statement  "			Assert.That( c1Members.Any(m => m.Values.Any(v => v.Name == "name" && ((JsConstantExpression)v.Value).StringValue == "P1"))); " is 125.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,DefaultMemberReflectabilityAttributeCanBeSpecifiedOnAssemblyButCanBeOverriddenOnTypes,The length of the statement  "			Assert.That( c1Members.Any(m => m.Values.Any(v => v.Name == "name" && ((JsConstantExpression)v.Value).StringValue == "P2"))); " is 125.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,DefaultMemberReflectabilityAttributeCanBeSpecifiedOnAssemblyButCanBeOverriddenOnTypes,The length of the statement  "			Assert.That(!c1Members.Any(m => m.Values.Any(v => v.Name == "name" && ((JsConstantExpression)v.Value).StringValue == "P3"))); " is 125.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,DefaultMemberReflectabilityAttributeCanBeSpecifiedOnAssemblyButCanBeOverriddenOnTypes,The length of the statement  "			Assert.That(!c1Members.Any(m => m.Values.Any(v => v.Name == "name" && ((JsConstantExpression)v.Value).StringValue == "P4"))); " is 125.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,DefaultMemberReflectabilityAttributeCanBeSpecifiedOnAssemblyButCanBeOverriddenOnTypes,The length of the statement  "			var c2 = (JsObjectLiteralExpression)((JsInvocationExpression)((JsExpressionStatement)emulation.Phases[2].Statements[0]).Expression).Arguments[1]; " is 145.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,DefaultMemberReflectabilityAttributeCanBeSpecifiedOnAssemblyButCanBeOverriddenOnTypes,The length of the statement  "			var c2Members = ((JsArrayLiteralExpression)c2.Values.Single(p => p.Name == "members").Value).Elements.Cast<JsObjectLiteralExpression>().ToList(); " is 145.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,DefaultMemberReflectabilityAttributeCanBeSpecifiedOnAssemblyButCanBeOverriddenOnTypes,The length of the statement  "			Assert.That(!c2Members.Any(m => m.Values.Any(v => v.Name == "name" && ((JsConstantExpression)v.Value).StringValue == "P1"))); " is 125.
Long Statement,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,DefaultMemberReflectabilityAttributeCanBeSpecifiedOnAssemblyButCanBeOverriddenOnTypes,The length of the statement  "			Assert.That( c2Members.Any(m => m.Values.Any(v => v.Name == "name" && ((JsConstantExpression)v.Value).StringValue == "P2"))); " is 125.
Long Statement,CoreLib.Tests.OOPEmulatorTests,OverallStructureTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\OverallStructureTests.cs,AssemblyAttributesAreAssignedInTheCodeAfterLastType,The length of the statement  "			Assert.That(OutputFormatter.Format(actual' allowIntermediates: true).Replace("\r\n"' "\n")' Is.EqualTo("$asm.attr = [new {MyAttribute}(42)];\n")); " is 146.
Long Statement,CoreLib.Tests.OOPEmulatorTests,OverallStructureTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\OverallStructureTests.cs,BothPublicAndPrivateEmbeddedResourcesAreIncludedInTheInitAssemblyCallButThisExcludesPluginDllsAndLinkedResources,The length of the statement  "			var compilation = Compile(@""' resources: new[] { new Resource(AssemblyResourceType.Embedded' "Resource.Name"' true' data: new byte[] { 45' 6' 7' 4 })' " is 151.
Long Statement,CoreLib.Tests.OOPEmulatorTests,OverallStructureTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\OverallStructureTests.cs,BothPublicAndPrivateEmbeddedResourcesAreIncludedInTheInitAssemblyCallButThisExcludesPluginDllsAndLinkedResources,The length of the statement  "			var actual = compilation.Item2.GetCodeBeforeFirstType(compilation.Item3).Select(s => OutputFormatter.Format(s' allowIntermediates: true)).Single(s => s.StartsWith("{Script}.initAssembly")); " is 189.
Long Statement,CoreLib.Tests.OOPEmulatorTests,OverallStructureTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\OverallStructureTests.cs,BothPublicAndPrivateEmbeddedResourcesAreIncludedInTheInitAssemblyCallButThisExcludesPluginDllsAndLinkedResources,The length of the statement  "			Assert.That(actual.Replace("\r\n"' "\n")' Is.EqualTo("{Script}.initAssembly($asm' 'x'' { 'Resource.Name': 'LQYHBA=='' 'Some.Private.Resource': 'BQMH' });\n")); " is 159.
Long Statement,CoreLib.Tests.OOPEmulatorTests,OOPEmulatorTestBase,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\OOPEmulatorTestBase.cs,RunAutomaticMetadataAttributeAppliers,The length of the statement  "			var processors = new IAutomaticMetadataAttributeApplier[] { new MakeMembersWithScriptableAttributesReflectable(store) }; " is 120.
Long Statement,CoreLib.Tests.OOPEmulatorTests,OOPEmulatorTestBase,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\OOPEmulatorTestBase.cs,Compile,The length of the statement  "			return Tuple.Create(compilation.Compilation' (IOOPEmulator)new OOPEmulator(compilation.Compilation' md' rtl' n' new MockLinker()' s' errorReporter)' compiledTypes); " is 164.
Long Statement,CoreLib.Tests.OOPEmulatorTests,OOPEmulatorTestBase,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\OOPEmulatorTestBase.cs,AssertCorrectEmulation,The length of the statement  "			var actual = string.Join("-\n"' emulated.Phases.Where(p => p != null).Select(p => string.Join(""' OutputFormatter.Format(p.Statements' allowIntermediates: true)))); " is 164.
Long Statement,CoreLib.Tests.RuntimeLibraryTests,ScriptTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\RuntimeLibraryTests\ScriptTypeTests.cs,CanUseStaticMemberOfSerializableParameterizedTypeWithIgnoreGenericArguments,The length of the statement  "[System.Serializable' System.Runtime.CompilerServices.IncludeGenericArguments(false)] public class G<T1' T2> { public static void M() {} } " is 138.
Long Statement,CoreLib.Tests.RuntimeLibraryTests,ScriptTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\RuntimeLibraryTests\ScriptTypeTests.cs,CastingToSerializableParameterizedTypeWithIgnoreGenericArgumentsIsANoOp,The length of the statement  "[System.Serializable' System.Runtime.CompilerServices.IncludeGenericArguments(false)] public class G<T1' T2> { public void M() {} } " is 131.
Empty Catch Block,CoreLib.Tests,CoreLibTestBase,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\CoreLibTestBase.cs,PerformTest,The method has an empty catch block.
Magic Number,CoreLib.Tests.Core.Reflection,TypeSystemLanguageSupportTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\Core\Reflection\TypeSystemLanguageSupportTests.cs,CannotUseTheIsOperatorWithSerializableTypeWithoutTypeCheckCode,The following statement contains a magic number: Assert.That(actual.Item2.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7701 && m.FormattedMessage.Contains("'is' operator") && m.FormattedMessage.Contains("C1")));
Magic Number,CoreLib.Tests.Core.Reflection,TypeSystemLanguageSupportTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\Core\Reflection\TypeSystemLanguageSupportTests.cs,CannotUseTheIsOperatorWithImportedTypeThatDoesNotObeyTheTypeSystemOrHaveTypeCheckCode,The following statement contains a magic number: Assert.That(actual.Item2.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7701 && m.FormattedMessage.Contains("'is' operator") && m.FormattedMessage.Contains("C1")));
Magic Number,CoreLib.Tests.Core.Reflection,TypeSystemLanguageSupportTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\Core\Reflection\TypeSystemLanguageSupportTests.cs,CannotUseTheAsOperatorWithSerializableTypeWithoutTypeCheckCode,The following statement contains a magic number: Assert.That(actual.Item2.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7702 && m.FormattedMessage.Contains("'as' operator") && m.FormattedMessage.Contains("C1")));
Magic Number,CoreLib.Tests.Core.Reflection,TypeSystemLanguageSupportTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\Core\Reflection\TypeSystemLanguageSupportTests.cs,CannotUseTheAsOperatorWithImportedTypeThatDoesNotObeyTheTypeSystemOrHaveTypeCheckCode,The following statement contains a magic number: Assert.That(actual.Item2.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7702 && m.FormattedMessage.Contains("'as' operator") && m.FormattedMessage.Contains("C1")));
Magic Number,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,ArgumentToBackingFieldNameMustBeAValidIdentifierForProperty,The following statement contains a magic number: Assert.That(AllErrors[0].Code == 7168 && AllErrors[0].FormattedMessage.Contains("BackingFieldName") && AllErrors[0].FormattedMessage.Contains("C1.P1") && AllErrors[0].FormattedMessage.Contains("valid JavaScript identifier"));
Magic Number,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,ArgumentToBackingFieldNameMustBeAValidIdentifierForProperty,The following statement contains a magic number: Assert.That(AllErrors[0].Code == 7168 && AllErrors[0].FormattedMessage.Contains("BackingFieldName") && AllErrors[0].FormattedMessage.Contains("C1.P1") && AllErrors[0].FormattedMessage.Contains("valid JavaScript identifier"));
Magic Number,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,ArgumentToBackingFieldNameMustBeAValidIdentifierForProperty,The following statement contains a magic number: Assert.That(AllErrors[0].Code == 7168 && AllErrors[0].FormattedMessage.Contains("BackingFieldName") && AllErrors[0].FormattedMessage.Contains("C1.P1") && AllErrors[0].FormattedMessage.Contains("valid JavaScript identifier"));
Magic Number,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,BackingFieldNameAttributeCannotBeSpecifiedOnManualProperty,The following statement contains a magic number: Assert.That(AllErrors[0].Code == 7167 && AllErrors[0].FormattedMessage.Contains("BackingFieldName") && AllErrors[0].FormattedMessage.Contains("C1.P1"));
Magic Number,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,ArgumentToBackingFieldNameMustBeAValidIdentifierForEvent,The following statement contains a magic number: Assert.That(AllErrors[0].Code == 7170 && AllErrors[0].FormattedMessage.Contains("BackingFieldName") && AllErrors[0].FormattedMessage.Contains("C1.P1") && AllErrors[0].FormattedMessage.Contains("valid JavaScript identifier"));
Magic Number,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,ArgumentToBackingFieldNameMustBeAValidIdentifierForEvent,The following statement contains a magic number: Assert.That(AllErrors[0].Code == 7170 && AllErrors[0].FormattedMessage.Contains("BackingFieldName") && AllErrors[0].FormattedMessage.Contains("C1.P1") && AllErrors[0].FormattedMessage.Contains("valid JavaScript identifier"));
Magic Number,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,ArgumentToBackingFieldNameMustBeAValidIdentifierForEvent,The following statement contains a magic number: Assert.That(AllErrors[0].Code == 7170 && AllErrors[0].FormattedMessage.Contains("BackingFieldName") && AllErrors[0].FormattedMessage.Contains("C1.P1") && AllErrors[0].FormattedMessage.Contains("valid JavaScript identifier"));
Magic Number,CoreLib.Tests.MetadataImporterTests,BackingFieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\BackingFieldTests.cs,BackingFieldNameAttributeCannotBeSpecifiedOnManualEvent,The following statement contains a magic number: Assert.That(AllErrors[0].Code == 7169 && AllErrors[0].FormattedMessage.Contains("BackingFieldName") && AllErrors[0].FormattedMessage.Contains("C1.P1"));
Magic Number,CoreLib.Tests.MetadataImporterTests,ChainingTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ChainingTests.cs,SetMethodSemanticsWorks,The following statement contains a magic number: Assert.AreEqual(Metadata.GetMethodSemantics(FindMethod("C.TheMethod"' 2)).Name' "theMethod");
Magic Number,CoreLib.Tests.MetadataImporterTests,ConstructorTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ConstructorTests.cs,AdditionalConstructorsAreNamed,The following statement contains a magic number: var c3 = FindConstructor("C"' 2);
Magic Number,CoreLib.Tests.MetadataImporterTests,ConstructorTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ConstructorTests.cs,AlternateSignatureWorksWhenTheMainMemberIsAnUnnamedConstructor,The following statement contains a magic number: var c3 = FindConstructor("C"' 2);
Magic Number,CoreLib.Tests.MetadataImporterTests,ConstructorTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ConstructorTests.cs,AlternateSignatureWorksWhenTheMainMemberIsANamedConstructor,The following statement contains a magic number: var c3 = FindConstructor("C"' 2);
Magic Number,CoreLib.Tests.MetadataImporterTests,ConstructorTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ConstructorTests.cs,AlternateSignatureAttributeDoesNotConsiderNonScriptableOrInlineCodeConstructors,The following statement contains a magic number: var c3 = FindConstructor("C"' 2);
Magic Number,CoreLib.Tests.MetadataImporterTests,ConstructorTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ConstructorTests.cs,AlternateSignatureAttributeDoesNotConsiderNonScriptableOrInlineCodeConstructors,The following statement contains a magic number: var c4 = FindConstructor("C"' 3);
Magic Number,CoreLib.Tests.MetadataImporterTests,ConstructorTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ConstructorTests.cs,AlternateSignatureAttributeDoesNotConsiderNonScriptableOrInlineCodeConstructors,The following statement contains a magic number: var c5 = FindConstructor("C"' 4);
Magic Number,CoreLib.Tests.MetadataImporterTests,ConstructorTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ConstructorTests.cs,InlineCodeCanUseArgumentsAndTypeArguments,The following statement contains a magic number: var c = FindConstructor("C1`1+C2`1"' 2);
Magic Number,CoreLib.Tests.MetadataImporterTests,ConstructorTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ConstructorTests.cs,InlineCodeAttributeWithNonExpandedFormCodeWorks,The following statement contains a magic number: var impl = FindConstructor("C"' 2);
Magic Number,CoreLib.Tests.MetadataImporterTests,ConstructorTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ConstructorTests.cs,NonPublicNamedConstructorNamessAreMinimized,The following statement contains a magic number: var c3 = FindConstructor("C"' 2);
Magic Number,CoreLib.Tests.MetadataImporterTests,ConstructorTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ConstructorTests.cs,ExpandParamsAttributeCausesConstructorToUseExpandParamsOption,The following statement contains a magic number: Assert.That(FindConstructor("C1"' 3).ExpandParams' Is.False);
Magic Number,CoreLib.Tests.MetadataImporterTests,ConstructorTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ConstructorTests.cs,ExpandParamsAttributeCausesConstructorToUseExpandParamsOption,The following statement contains a magic number: Assert.That(FindConstructor("C1"' 2).ExpandParams' Is.True);
Magic Number,CoreLib.Tests.MetadataImporterTests,ConstructorTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ConstructorTests.cs,ScriptSkipAttributeWorksOnConstructors,The following statement contains a magic number: var c12 = FindConstructor("C1"' 2);
Magic Number,CoreLib.Tests.MetadataImporterTests,ConstructorTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ConstructorTests.cs,ScriptSkipAttributeWorksOnConstructors,The following statement contains a magic number: var c32 = FindConstructor("C3"' 2);
Magic Number,CoreLib.Tests.MetadataImporterTests,ConstructorTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\ConstructorTests.cs,AllConstructorsOfImportedTypesAreUnnamedUnlessAScriptNameIsSpecified,The following statement contains a magic number: var c3 = FindConstructor("C"' 2);
Magic Number,CoreLib.Tests.MetadataImporterTests,EventTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\EventTests.cs,CannotSpecifyInlineCodeOnEventAccessorsThatOverrideBaseMembers,The following statement contains a magic number: Assert.That(AllErrorTexts' Has.Count.EqualTo(2));
Magic Number,CoreLib.Tests.MetadataImporterTests,EventTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\EventTests.cs,CannotSpecifyInlineCodeOnOverridableEventAccessors,The following statement contains a magic number: Assert.That(AllErrorTexts' Has.Count.EqualTo(2));
Magic Number,CoreLib.Tests.MetadataImporterTests,EventTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\EventTests.cs,CustomInitializationAttributeOnManualEventIsAnError,The following statement contains a magic number: Assert.That(AllErrors[0].Code == 7165 && AllErrors[0].FormattedMessage.Contains("C1.e1") && AllErrors[0].FormattedMessage.Contains("manual"));
Magic Number,CoreLib.Tests.MetadataImporterTests,EventTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\EventTests.cs,ErrorInCustomInitializationAttributeCodeIsAnError,The following statement contains a magic number: Assert.That(AllErrors[0].Code == 7163 && AllErrors[0].FormattedMessage.Contains("C1.e1"));
Magic Number,CoreLib.Tests.MetadataImporterTests,EventTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\EventTests.cs,ErrorInCustomInitializationAttributeCodeIsAnError,The following statement contains a magic number: Assert.That(AllErrors[0].Code == 7163 && AllErrors[0].FormattedMessage.Contains("C1.e1"));
Magic Number,CoreLib.Tests.MetadataImporterTests,EventTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\EventTests.cs,ErrorInCustomInitializationAttributeCodeIsAnError,The following statement contains a magic number: Assert.That(AllErrors[0].Code == 7163 && AllErrors[0].FormattedMessage.Contains("C1.e1"));
Magic Number,CoreLib.Tests.MetadataImporterTests,FieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\FieldTests.cs,ConstantFieldIsImplementedAsConstantButInTheOutputWhenMinimizingCode,The following statement contains a magic number: Assert.That(f.Value' Is.EqualTo(123.0));
Magic Number,CoreLib.Tests.MetadataImporterTests,FieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\FieldTests.cs,ConstantFieldIsImplementedAsConstantButInTheOutputWhenMinimizingCode,The following statement contains a magic number: Assert.That(FindField("C.MyField2").Value' Is.EqualTo(123.5));
Magic Number,CoreLib.Tests.MetadataImporterTests,FieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\FieldTests.cs,ConstantFieldIsImplementedAsConstantButInTheOutputWhenMinimizingCode,The following statement contains a magic number: Assert.That(FindField("C.MyField4").Value' Is.EqualTo(65.0));
Magic Number,CoreLib.Tests.MetadataImporterTests,FieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\FieldTests.cs,ConstantFieldIsImplementedAsConstantButInTheOutputWhenMinimizingCode,The following statement contains a magic number: Assert.That(FindField("C.MyField6").Value' Is.EqualTo(13.0));
Magic Number,CoreLib.Tests.MetadataImporterTests,FieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\FieldTests.cs,NumericValuesEnumFieldsAreTreatedAsConstants,The following statement contains a magic number: Assert.That(FindField("MyEnum.MyValue3").Value' Is.EqualTo(15.0));
Magic Number,CoreLib.Tests.MetadataImporterTests,FieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\FieldTests.cs,NumericValuesEnumFieldsAreTreatedAsConstants,The following statement contains a magic number: Assert.That(FindField("MyEnum.MyValue4").Value' Is.EqualTo(16.0));
Magic Number,CoreLib.Tests.MetadataImporterTests,FieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\FieldTests.cs,InlineConstantAttributeCausesAConstantImplementation,The following statement contains a magic number: Assert.That(f.Value' Is.EqualTo(42));
Magic Number,CoreLib.Tests.MetadataImporterTests,FieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\FieldTests.cs,NoInlineAttributeCannotBeAppliedToNonConstField,The following statement contains a magic number: Assert.That(AllErrors.Any(m => m.Code == 7160 && m.FormattedMessage.Contains("C1.X1") && m.FormattedMessage.Contains("NoInlineAttribute")));
Magic Number,CoreLib.Tests.MetadataImporterTests,FieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\FieldTests.cs,CustomInitializationAttributeOnConstFieldIsAnError,The following statement contains a magic number: Assert.That(AllErrors[0].Code == 7164 && AllErrors[0].FormattedMessage.Contains("C1.f1") && AllErrors[0].FormattedMessage.Contains("const"));
Magic Number,CoreLib.Tests.MetadataImporterTests,FieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\FieldTests.cs,ErrorInCustomInitializationAttributeCodeIsAnError,The following statement contains a magic number: Assert.That(AllErrors[0].Code == 7163 && AllErrors[0].FormattedMessage.Contains("C1.f1"));
Magic Number,CoreLib.Tests.MetadataImporterTests,FieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\FieldTests.cs,ErrorInCustomInitializationAttributeCodeIsAnError,The following statement contains a magic number: Assert.That(AllErrors[0].Code == 7163 && AllErrors[0].FormattedMessage.Contains("C1.f1"));
Magic Number,CoreLib.Tests.MetadataImporterTests,FieldTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\FieldTests.cs,ErrorInCustomInitializationAttributeCodeIsAnError,The following statement contains a magic number: Assert.That(AllErrors[0].Code == 7163 && AllErrors[0].FormattedMessage.Contains("C1.f1"));
Magic Number,CoreLib.Tests.MetadataImporterTests,IndexerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\IndexerTests.cs,IndexersImplementedAsGetAndSetMethodsWork,The following statement contains a magic number: var p2 = FindIndexer("C1"' 2);
Magic Number,CoreLib.Tests.MetadataImporterTests,IndexerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\IndexerTests.cs,IndexersImplementedAsGetAndSetMethodsWork,The following statement contains a magic number: var p3 = FindIndexer("C1"' 3);
Magic Number,CoreLib.Tests.MetadataImporterTests,IndexerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\IndexerTests.cs,RenamingIndexersWithGetAndSetMethodsWorks,The following statement contains a magic number: var p2 = FindIndexer("C1"' 2);
Magic Number,CoreLib.Tests.MetadataImporterTests,IndexerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\IndexerTests.cs,RenamingIndexersWithGetAndSetMethodsWorks,The following statement contains a magic number: var p3 = FindIndexer("C1"' 3);
Magic Number,CoreLib.Tests.MetadataImporterTests,IndexerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\IndexerTests.cs,CannotSpecifyInlineCodeOnIndexerAccessorsThatOverrideBaseMembers,The following statement contains a magic number: Assert.That(AllErrorTexts' Has.Count.EqualTo(2));
Magic Number,CoreLib.Tests.MetadataImporterTests,IndexerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\IndexerTests.cs,ImplicitInterfaceImplementationIndexerAccessorsGetTheirNameFromTheInterface,The following statement contains a magic number: var p2 = FindIndexer("C"' 2);
Magic Number,CoreLib.Tests.MetadataImporterTests,IndexerTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\IndexerTests.cs,NonPublicIndexersArePrefixedWithADollarIfSymbolsAreNotMinimized,The following statement contains a magic number: var p3 = FindIndexer("C2"' 2);
Magic Number,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,OverloadedMethodsGetDifferentNames,The following statement contains a magic number: var m4 = methods.Single(x => x.Item1.Parameters.Count == 2).Item2;
Magic Number,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,NameIsPreservedForImportedTypes,The following statement contains a magic number: var m3 = methods.Single(x => x.Item1.Parameters.Count == 2).Item2;
Magic Number,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,NameIsPreservedForImportedTypes,The following statement contains a magic number: var m4 = methods.Single(x => x.Item1.Parameters.Count == 3).Item2;
Magic Number,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,SameScriptNameCanBeSpecifiedOnManyOverloads,The following statement contains a magic number: var m4 = methods.Single(x => x.Item1.Parameters.Count == 2).Item2;
Magic Number,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,PreserveNameWorksOnMethods,The following statement contains a magic number: var m3 = methods.Single(x => x.Item1.Parameters.Count == 2).Item2;
Magic Number,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,PreserveCaseWorksOnMethods,The following statement contains a magic number: var m3 = methods.Single(x => x.Item1.Parameters.Count == 2).Item2;
Magic Number,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,AlternateSignatureAttributeWorksOnMethods,The following statement contains a magic number: Assert.That(methods.All(m => m.Item2.GeneratedMethodName == (m.Item1.Parameters.Count == 2 ? m.Item2.Name : null)));
Magic Number,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,AlternateSignatureAttributeWorksWhenTheMainMethodIsRenamed,The following statement contains a magic number: Assert.That(methods.All(m => m.Item2.GeneratedMethodName == (m.Item1.Parameters.Count == 2 ? m.Item2.Name : null)));
Magic Number,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,AlternateSignatureAttributeDoesNotConsiderNonScriptableOrInlineCodeMethods,The following statement contains a magic number: Assert.That(methods.Where(m => m.Item1.Parameters.Count < 3).All(m => m.Item2.Name == "RenamedMethod"));
Magic Number,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,AlternateSignatureAttributeDoesNotConsiderNonScriptableOrInlineCodeMethods,The following statement contains a magic number: Assert.That(methods.Where(m => m.Item1.Parameters.Count < 3).All(m => m.Item2.GeneratedMethodName == (m.Item1.Parameters.Count == 2 ? m.Item2.Name : null)));
Magic Number,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,AlternateSignatureAttributeDoesNotConsiderNonScriptableOrInlineCodeMethods,The following statement contains a magic number: Assert.That(methods.Where(m => m.Item1.Parameters.Count < 3).All(m => m.Item2.GeneratedMethodName == (m.Item1.Parameters.Count == 2 ? m.Item2.Name : null)));
Magic Number,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,AlternateSignatureAttributeDoesNotConsiderNonScriptableOrInlineCodeMethods,The following statement contains a magic number: Assert.That(FindMethod("C1.SomeMethod"' 3).Type' Is.EqualTo(MethodScriptSemantics.ImplType.InlineCode));
Magic Number,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,AlternateSignatureAttributeDoesNotConsiderNonScriptableOrInlineCodeMethods,The following statement contains a magic number: Assert.That(FindMethod("C1.SomeMethod"' 4).Type' Is.EqualTo(MethodScriptSemantics.ImplType.NotUsableFromScript));
Magic Number,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,IfAnyMethodInAMethodGroupHasAnAlternateSignatureAttributeThenExactlyOneMethodMustNotHaveIt,The following statement contains a magic number: Assert.That(AllErrorTexts' Has.Count.EqualTo(3));
Magic Number,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,InlineCodeAttributeWithNonExpandedFormCodeWorks,The following statement contains a magic number: var impl = FindMethod("C.SomeMethod"' 2);
Magic Number,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,GenericArgumentDefaultRequireExplicitSpecificationCausesAnErrorIfIncludeGenericArgumentsIsNotSpecifiedForNonImportedTypes,The following statement contains a magic number: Assert.IsTrue(AllErrors.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7027 && m.FormattedMessage.Contains("IncludeGenericArgumentsAttribute") && m.FormattedMessage.Contains("C1.M1")));
Magic Number,CoreLib.Tests.MetadataImporterTests,MethodTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MethodTests.cs,IntrinsicOperatorAttributeCannotBeAppliedToConversionOperator,The following statement contains a magic number: Assert.That(AllErrorTexts.Count' Is.EqualTo(2));
Magic Number,CoreLib.Tests.MetadataImporterTests,MinimizedNamesTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MinimizedNamesTests.cs,MinimizationOfClassesGeneratesMembersThatAreUniqueInTheHierarchyButDoesNotTouchPublicSymbols,The following statement contains a magic number: Assert.That(FindConstructor("A"' 2).Name' Is.EqualTo("$2"));
Magic Number,CoreLib.Tests.MetadataImporterTests,MinimizedNamesTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MinimizedNamesTests.cs,MinimizationOfClassesGeneratesMembersThatAreUniqueInTheHierarchyButDoesNotTouchPublicSymbols,The following statement contains a magic number: Assert.That(FindConstructor("B"' 2).Name' Is.EqualTo("$3"));
Magic Number,CoreLib.Tests.MetadataImporterTests,MinimizedNamesTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MinimizedNamesTests.cs,MinimizationOfClassesGeneratesMembersThatAreUniqueInTheHierarchyButDoesNotTouchPublicSymbols,The following statement contains a magic number: Assert.That(FindConstructor("C"' 2).Name' Is.EqualTo("$2"));
Magic Number,CoreLib.Tests.MetadataImporterTests,MinimizedNamesTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MinimizedNamesTests.cs,MinimizationOfClassesGeneratesMembersThatAreUniqueInTheHierarchyButDoesNotTouchPublicSymbols,The following statement contains a magic number: Assert.That(FindConstructor("D"' 2).Name' Is.EqualTo("$1"));
Magic Number,CoreLib.Tests.MetadataImporterTests,MinimizedNamesTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MinimizedNamesTests.cs,MinimizationOfClassesGeneratesMembersThatAreUniqueInTheHierarchyButDoesNotTouchPublicSymbols,The following statement contains a magic number: Assert.That(FindConstructor("D"' 3).Name' Is.EqualTo("$ctor1"));
Magic Number,CoreLib.Tests.MetadataImporterTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MiscTests.cs,EncodeNumberWorksWhenAllowingDigitFirst,The following statement contains a magic number: Assert.That(Enumerable.Range(0' 190).Select(i => MetadataUtils.EncodeNumber(i' false)).ToList()' Is.EqualTo(new[] {  				"0"' "1"' "2"' "3"' "4"' "5"' "6"' "7"' "8"' "9"' "a"' "b"' "c"' "d"' "e"' "f"' "g"' "h"' "i"' "j"' "k"' "l"' "m"' "n"' "o"' "p"' "q"' "r"' "s"' "t"' "u"' "v"' "w"' "x"' "y"' "z"' "A"' "B"' "C"' "D"' "E"' "F"' "G"' "H"' "I"' "J"' "K"' "L"' "M"' "N"' "O"' "P"' "Q"' "R"' "S"' "T"' "U"' "V"' "W"' "X"' "Y"' "Z"'  				"10"' "11"' "12"' "13"' "14"' "15"' "16"' "17"' "18"' "19"' "1a"' "1b"' "1c"' "1d"' "1e"' "1f"' "1g"' "1h"' "1i"' "1j"' "1k"' "1l"' "1m"' "1n"' "1o"' "1p"' "1q"' "1r"' "1s"' "1t"' "1u"' "1v"' "1w"' "1x"' "1y"' "1z"' "1A"' "1B"' "1C"' "1D"' "1E"' "1F"' "1G"' "1H"' "1I"' "1J"' "1K"' "1L"' "1M"' "1N"' "1O"' "1P"' "1Q"' "1R"' "1S"' "1T"' "1U"' "1V"' "1W"' "1X"' "1Y"' "1Z"'  				"20"' "21"' "22"' "23"' "24"' "25"' "26"' "27"' "28"' "29"' "2a"' "2b"' "2c"' "2d"' "2e"' "2f"' "2g"' "2h"' "2i"' "2j"' "2k"' "2l"' "2m"' "2n"' "2o"' "2p"' "2q"' "2r"' "2s"' "2t"' "2u"' "2v"' "2w"' "2x"' "2y"' "2z"' "2A"' "2B"' "2C"' "2D"' "2E"' "2F"' "2G"' "2H"' "2I"' "2J"' "2K"' "2L"' "2M"' "2N"' "2O"' "2P"' "2Q"' "2R"' "2S"' "2T"' "2U"' "2V"' "2W"' "2X"' "2Y"' "2Z"'  				"30"' "31"' "32"' "33"  			}));
Magic Number,CoreLib.Tests.MetadataImporterTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MiscTests.cs,EncodeNumberWorksWhenAllowingDigitFirst,The following statement contains a magic number: Assert.That(Enumerable.Range(3844' 190).Select(i => MetadataUtils.EncodeNumber(i' false)).ToList()' Is.EqualTo(new[] {  				"100"' "101"' "102"' "103"' "104"' "105"' "106"' "107"' "108"' "109"' "10a"' "10b"' "10c"' "10d"' "10e"' "10f"' "10g"' "10h"' "10i"' "10j"' "10k"' "10l"' "10m"' "10n"' "10o"' "10p"' "10q"' "10r"' "10s"' "10t"' "10u"' "10v"' "10w"' "10x"' "10y"' "10z"' "10A"' "10B"' "10C"' "10D"' "10E"' "10F"' "10G"' "10H"' "10I"' "10J"' "10K"' "10L"' "10M"' "10N"' "10O"' "10P"' "10Q"' "10R"' "10S"' "10T"' "10U"' "10V"' "10W"' "10X"' "10Y"' "10Z"'  				"110"' "111"' "112"' "113"' "114"' "115"' "116"' "117"' "118"' "119"' "11a"' "11b"' "11c"' "11d"' "11e"' "11f"' "11g"' "11h"' "11i"' "11j"' "11k"' "11l"' "11m"' "11n"' "11o"' "11p"' "11q"' "11r"' "11s"' "11t"' "11u"' "11v"' "11w"' "11x"' "11y"' "11z"' "11A"' "11B"' "11C"' "11D"' "11E"' "11F"' "11G"' "11H"' "11I"' "11J"' "11K"' "11L"' "11M"' "11N"' "11O"' "11P"' "11Q"' "11R"' "11S"' "11T"' "11U"' "11V"' "11W"' "11X"' "11Y"' "11Z"'  				"120"' "121"' "122"' "123"' "124"' "125"' "126"' "127"' "128"' "129"' "12a"' "12b"' "12c"' "12d"' "12e"' "12f"' "12g"' "12h"' "12i"' "12j"' "12k"' "12l"' "12m"' "12n"' "12o"' "12p"' "12q"' "12r"' "12s"' "12t"' "12u"' "12v"' "12w"' "12x"' "12y"' "12z"' "12A"' "12B"' "12C"' "12D"' "12E"' "12F"' "12G"' "12H"' "12I"' "12J"' "12K"' "12L"' "12M"' "12N"' "12O"' "12P"' "12Q"' "12R"' "12S"' "12T"' "12U"' "12V"' "12W"' "12X"' "12Y"' "12Z"'  				"130"' "131"' "132"' "133"  			}));
Magic Number,CoreLib.Tests.MetadataImporterTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MiscTests.cs,EncodeNumberWorksWhenAllowingDigitFirst,The following statement contains a magic number: Assert.That(Enumerable.Range(3844' 190).Select(i => MetadataUtils.EncodeNumber(i' false)).ToList()' Is.EqualTo(new[] {  				"100"' "101"' "102"' "103"' "104"' "105"' "106"' "107"' "108"' "109"' "10a"' "10b"' "10c"' "10d"' "10e"' "10f"' "10g"' "10h"' "10i"' "10j"' "10k"' "10l"' "10m"' "10n"' "10o"' "10p"' "10q"' "10r"' "10s"' "10t"' "10u"' "10v"' "10w"' "10x"' "10y"' "10z"' "10A"' "10B"' "10C"' "10D"' "10E"' "10F"' "10G"' "10H"' "10I"' "10J"' "10K"' "10L"' "10M"' "10N"' "10O"' "10P"' "10Q"' "10R"' "10S"' "10T"' "10U"' "10V"' "10W"' "10X"' "10Y"' "10Z"'  				"110"' "111"' "112"' "113"' "114"' "115"' "116"' "117"' "118"' "119"' "11a"' "11b"' "11c"' "11d"' "11e"' "11f"' "11g"' "11h"' "11i"' "11j"' "11k"' "11l"' "11m"' "11n"' "11o"' "11p"' "11q"' "11r"' "11s"' "11t"' "11u"' "11v"' "11w"' "11x"' "11y"' "11z"' "11A"' "11B"' "11C"' "11D"' "11E"' "11F"' "11G"' "11H"' "11I"' "11J"' "11K"' "11L"' "11M"' "11N"' "11O"' "11P"' "11Q"' "11R"' "11S"' "11T"' "11U"' "11V"' "11W"' "11X"' "11Y"' "11Z"'  				"120"' "121"' "122"' "123"' "124"' "125"' "126"' "127"' "128"' "129"' "12a"' "12b"' "12c"' "12d"' "12e"' "12f"' "12g"' "12h"' "12i"' "12j"' "12k"' "12l"' "12m"' "12n"' "12o"' "12p"' "12q"' "12r"' "12s"' "12t"' "12u"' "12v"' "12w"' "12x"' "12y"' "12z"' "12A"' "12B"' "12C"' "12D"' "12E"' "12F"' "12G"' "12H"' "12I"' "12J"' "12K"' "12L"' "12M"' "12N"' "12O"' "12P"' "12Q"' "12R"' "12S"' "12T"' "12U"' "12V"' "12W"' "12X"' "12Y"' "12Z"'  				"130"' "131"' "132"' "133"  			}));
Magic Number,CoreLib.Tests.MetadataImporterTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MiscTests.cs,EncodeNumberWorksWhenAllowingDigitFirst,The following statement contains a magic number: Assert.That(Enumerable.Range(7688' 190).Select(i => MetadataUtils.EncodeNumber(i' false)).ToList()' Is.EqualTo(new[] {  				"200"' "201"' "202"' "203"' "204"' "205"' "206"' "207"' "208"' "209"' "20a"' "20b"' "20c"' "20d"' "20e"' "20f"' "20g"' "20h"' "20i"' "20j"' "20k"' "20l"' "20m"' "20n"' "20o"' "20p"' "20q"' "20r"' "20s"' "20t"' "20u"' "20v"' "20w"' "20x"' "20y"' "20z"' "20A"' "20B"' "20C"' "20D"' "20E"' "20F"' "20G"' "20H"' "20I"' "20J"' "20K"' "20L"' "20M"' "20N"' "20O"' "20P"' "20Q"' "20R"' "20S"' "20T"' "20U"' "20V"' "20W"' "20X"' "20Y"' "20Z"'  				"210"' "211"' "212"' "213"' "214"' "215"' "216"' "217"' "218"' "219"' "21a"' "21b"' "21c"' "21d"' "21e"' "21f"' "21g"' "21h"' "21i"' "21j"' "21k"' "21l"' "21m"' "21n"' "21o"' "21p"' "21q"' "21r"' "21s"' "21t"' "21u"' "21v"' "21w"' "21x"' "21y"' "21z"' "21A"' "21B"' "21C"' "21D"' "21E"' "21F"' "21G"' "21H"' "21I"' "21J"' "21K"' "21L"' "21M"' "21N"' "21O"' "21P"' "21Q"' "21R"' "21S"' "21T"' "21U"' "21V"' "21W"' "21X"' "21Y"' "21Z"'  				"220"' "221"' "222"' "223"' "224"' "225"' "226"' "227"' "228"' "229"' "22a"' "22b"' "22c"' "22d"' "22e"' "22f"' "22g"' "22h"' "22i"' "22j"' "22k"' "22l"' "22m"' "22n"' "22o"' "22p"' "22q"' "22r"' "22s"' "22t"' "22u"' "22v"' "22w"' "22x"' "22y"' "22z"' "22A"' "22B"' "22C"' "22D"' "22E"' "22F"' "22G"' "22H"' "22I"' "22J"' "22K"' "22L"' "22M"' "22N"' "22O"' "22P"' "22Q"' "22R"' "22S"' "22T"' "22U"' "22V"' "22W"' "22X"' "22Y"' "22Z"'  				"230"' "231"' "232"' "233"  			}));
Magic Number,CoreLib.Tests.MetadataImporterTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MiscTests.cs,EncodeNumberWorksWhenAllowingDigitFirst,The following statement contains a magic number: Assert.That(Enumerable.Range(7688' 190).Select(i => MetadataUtils.EncodeNumber(i' false)).ToList()' Is.EqualTo(new[] {  				"200"' "201"' "202"' "203"' "204"' "205"' "206"' "207"' "208"' "209"' "20a"' "20b"' "20c"' "20d"' "20e"' "20f"' "20g"' "20h"' "20i"' "20j"' "20k"' "20l"' "20m"' "20n"' "20o"' "20p"' "20q"' "20r"' "20s"' "20t"' "20u"' "20v"' "20w"' "20x"' "20y"' "20z"' "20A"' "20B"' "20C"' "20D"' "20E"' "20F"' "20G"' "20H"' "20I"' "20J"' "20K"' "20L"' "20M"' "20N"' "20O"' "20P"' "20Q"' "20R"' "20S"' "20T"' "20U"' "20V"' "20W"' "20X"' "20Y"' "20Z"'  				"210"' "211"' "212"' "213"' "214"' "215"' "216"' "217"' "218"' "219"' "21a"' "21b"' "21c"' "21d"' "21e"' "21f"' "21g"' "21h"' "21i"' "21j"' "21k"' "21l"' "21m"' "21n"' "21o"' "21p"' "21q"' "21r"' "21s"' "21t"' "21u"' "21v"' "21w"' "21x"' "21y"' "21z"' "21A"' "21B"' "21C"' "21D"' "21E"' "21F"' "21G"' "21H"' "21I"' "21J"' "21K"' "21L"' "21M"' "21N"' "21O"' "21P"' "21Q"' "21R"' "21S"' "21T"' "21U"' "21V"' "21W"' "21X"' "21Y"' "21Z"'  				"220"' "221"' "222"' "223"' "224"' "225"' "226"' "227"' "228"' "229"' "22a"' "22b"' "22c"' "22d"' "22e"' "22f"' "22g"' "22h"' "22i"' "22j"' "22k"' "22l"' "22m"' "22n"' "22o"' "22p"' "22q"' "22r"' "22s"' "22t"' "22u"' "22v"' "22w"' "22x"' "22y"' "22z"' "22A"' "22B"' "22C"' "22D"' "22E"' "22F"' "22G"' "22H"' "22I"' "22J"' "22K"' "22L"' "22M"' "22N"' "22O"' "22P"' "22Q"' "22R"' "22S"' "22T"' "22U"' "22V"' "22W"' "22X"' "22Y"' "22Z"'  				"230"' "231"' "232"' "233"  			}));
Magic Number,CoreLib.Tests.MetadataImporterTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MiscTests.cs,EncodeNumberWorksWhenAllowingDigitFirst,The following statement contains a magic number: Assert.That(Enumerable.Range(238328' 190).Select(i => MetadataUtils.EncodeNumber(i' false)).ToList()' Is.EqualTo(new[] {  				"1000"' "1001"' "1002"' "1003"' "1004"' "1005"' "1006"' "1007"' "1008"' "1009"' "100a"' "100b"' "100c"' "100d"' "100e"' "100f"' "100g"' "100h"' "100i"' "100j"' "100k"' "100l"' "100m"' "100n"' "100o"' "100p"' "100q"' "100r"' "100s"' "100t"' "100u"' "100v"' "100w"' "100x"' "100y"' "100z"' "100A"' "100B"' "100C"' "100D"' "100E"' "100F"' "100G"' "100H"' "100I"' "100J"' "100K"' "100L"' "100M"' "100N"' "100O"' "100P"' "100Q"' "100R"' "100S"' "100T"' "100U"' "100V"' "100W"' "100X"' "100Y"' "100Z"'  				"1010"' "1011"' "1012"' "1013"' "1014"' "1015"' "1016"' "1017"' "1018"' "1019"' "101a"' "101b"' "101c"' "101d"' "101e"' "101f"' "101g"' "101h"' "101i"' "101j"' "101k"' "101l"' "101m"' "101n"' "101o"' "101p"' "101q"' "101r"' "101s"' "101t"' "101u"' "101v"' "101w"' "101x"' "101y"' "101z"' "101A"' "101B"' "101C"' "101D"' "101E"' "101F"' "101G"' "101H"' "101I"' "101J"' "101K"' "101L"' "101M"' "101N"' "101O"' "101P"' "101Q"' "101R"' "101S"' "101T"' "101U"' "101V"' "101W"' "101X"' "101Y"' "101Z"'  				"1020"' "1021"' "1022"' "1023"' "1024"' "1025"' "1026"' "1027"' "1028"' "1029"' "102a"' "102b"' "102c"' "102d"' "102e"' "102f"' "102g"' "102h"' "102i"' "102j"' "102k"' "102l"' "102m"' "102n"' "102o"' "102p"' "102q"' "102r"' "102s"' "102t"' "102u"' "102v"' "102w"' "102x"' "102y"' "102z"' "102A"' "102B"' "102C"' "102D"' "102E"' "102F"' "102G"' "102H"' "102I"' "102J"' "102K"' "102L"' "102M"' "102N"' "102O"' "102P"' "102Q"' "102R"' "102S"' "102T"' "102U"' "102V"' "102W"' "102X"' "102Y"' "102Z"'  				"1030"' "1031"' "1032"' "1033"  			}));
Magic Number,CoreLib.Tests.MetadataImporterTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MiscTests.cs,EncodeNumberWorksWhenAllowingDigitFirst,The following statement contains a magic number: Assert.That(Enumerable.Range(238328' 190).Select(i => MetadataUtils.EncodeNumber(i' false)).ToList()' Is.EqualTo(new[] {  				"1000"' "1001"' "1002"' "1003"' "1004"' "1005"' "1006"' "1007"' "1008"' "1009"' "100a"' "100b"' "100c"' "100d"' "100e"' "100f"' "100g"' "100h"' "100i"' "100j"' "100k"' "100l"' "100m"' "100n"' "100o"' "100p"' "100q"' "100r"' "100s"' "100t"' "100u"' "100v"' "100w"' "100x"' "100y"' "100z"' "100A"' "100B"' "100C"' "100D"' "100E"' "100F"' "100G"' "100H"' "100I"' "100J"' "100K"' "100L"' "100M"' "100N"' "100O"' "100P"' "100Q"' "100R"' "100S"' "100T"' "100U"' "100V"' "100W"' "100X"' "100Y"' "100Z"'  				"1010"' "1011"' "1012"' "1013"' "1014"' "1015"' "1016"' "1017"' "1018"' "1019"' "101a"' "101b"' "101c"' "101d"' "101e"' "101f"' "101g"' "101h"' "101i"' "101j"' "101k"' "101l"' "101m"' "101n"' "101o"' "101p"' "101q"' "101r"' "101s"' "101t"' "101u"' "101v"' "101w"' "101x"' "101y"' "101z"' "101A"' "101B"' "101C"' "101D"' "101E"' "101F"' "101G"' "101H"' "101I"' "101J"' "101K"' "101L"' "101M"' "101N"' "101O"' "101P"' "101Q"' "101R"' "101S"' "101T"' "101U"' "101V"' "101W"' "101X"' "101Y"' "101Z"'  				"1020"' "1021"' "1022"' "1023"' "1024"' "1025"' "1026"' "1027"' "1028"' "1029"' "102a"' "102b"' "102c"' "102d"' "102e"' "102f"' "102g"' "102h"' "102i"' "102j"' "102k"' "102l"' "102m"' "102n"' "102o"' "102p"' "102q"' "102r"' "102s"' "102t"' "102u"' "102v"' "102w"' "102x"' "102y"' "102z"' "102A"' "102B"' "102C"' "102D"' "102E"' "102F"' "102G"' "102H"' "102I"' "102J"' "102K"' "102L"' "102M"' "102N"' "102O"' "102P"' "102Q"' "102R"' "102S"' "102T"' "102U"' "102V"' "102W"' "102X"' "102Y"' "102Z"'  				"1030"' "1031"' "1032"' "1033"  			}));
Magic Number,CoreLib.Tests.MetadataImporterTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MiscTests.cs,EncodeNumberWorksWhenAllowingDigitFirst,The following statement contains a magic number: Assert.That(Enumerable.Range(0' 1000000).Select(i => MetadataUtils.EncodeNumber(i' false)).Distinct().Count()' Is.EqualTo(1000000));
Magic Number,CoreLib.Tests.MetadataImporterTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MiscTests.cs,EncodeNumberWorksWhenAllowingDigitFirst,The following statement contains a magic number: Assert.That(Enumerable.Range(0' 1000000).Select(i => MetadataUtils.EncodeNumber(i' false)).Distinct().Count()' Is.EqualTo(1000000));
Magic Number,CoreLib.Tests.MetadataImporterTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MiscTests.cs,EncodeNumberWorksWhenNotAllowingDigitFirst,The following statement contains a magic number: Assert.That(Enumerable.Range(0' 160).Select(i => MetadataUtils.EncodeNumber(i' true)).ToList()' Is.EqualTo(new[] {  				"a"' "b"' "c"' "d"' "e"' "f"' "g"' "h"' "i"' "j"' "k"' "l"' "m"' "n"' "o"' "p"' "q"' "r"' "s"' "t"' "u"' "v"' "w"' "x"' "y"' "z"' "A"' "B"' "C"' "D"' "E"' "F"' "G"' "H"' "I"' "J"' "K"' "L"' "M"' "N"' "O"' "P"' "Q"' "R"' "S"' "T"' "U"' "V"' "W"' "X"' "Y"' "Z"'  				"ba"' "bb"' "bc"' "bd"' "be"' "bf"' "bg"' "bh"' "bi"' "bj"' "bk"' "bl"' "bm"' "bn"' "bo"' "bp"' "bq"' "br"' "bs"' "bt"' "bu"' "bv"' "bw"' "bx"' "by"' "bz"' "bA"' "bB"' "bC"' "bD"' "bE"' "bF"' "bG"' "bH"' "bI"' "bJ"' "bK"' "bL"' "bM"' "bN"' "bO"' "bP"' "bQ"' "bR"' "bS"' "bT"' "bU"' "bV"' "bW"' "bX"' "bY"' "bZ"'  				"ca"' "cb"' "cc"' "cd"' "ce"' "cf"' "cg"' "ch"' "ci"' "cj"' "ck"' "cl"' "cm"' "cn"' "co"' "cp"' "cq"' "cr"' "cs"' "ct"' "cu"' "cv"' "cw"' "cx"' "cy"' "cz"' "cA"' "cB"' "cC"' "cD"' "cE"' "cF"' "cG"' "cH"' "cI"' "cJ"' "cK"' "cL"' "cM"' "cN"' "cO"' "cP"' "cQ"' "cR"' "cS"' "cT"' "cU"' "cV"' "cW"' "cX"' "cY"' "cZ"'  				"da"' "db"' "dc"' "dd"  			}));
Magic Number,CoreLib.Tests.MetadataImporterTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MiscTests.cs,EncodeNumberWorksWhenNotAllowingDigitFirst,The following statement contains a magic number: Assert.That(Enumerable.Range(0' 1000000).Select(i => MetadataUtils.EncodeNumber(i' true)).Distinct().Count()' Is.EqualTo(1000000));
Magic Number,CoreLib.Tests.MetadataImporterTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MiscTests.cs,EncodeNumberWorksWhenNotAllowingDigitFirst,The following statement contains a magic number: Assert.That(Enumerable.Range(0' 1000000).Select(i => MetadataUtils.EncodeNumber(i' true)).Distinct().Count()' Is.EqualTo(1000000));
Magic Number,CoreLib.Tests.MetadataImporterTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\MiscTests.cs,EncodeNumberWorksWhenNotAllowingDigitFirst,The following statement contains a magic number: Enumerable.Range(0' 1000000).Select(i => MetadataUtils.EncodeNumber(i' true))
Magic Number,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,CannotSpecifyScriptSkipOnPropertyAccessorsImplementingInterfaceMembers,The following statement contains a magic number: Assert.That(AllErrorTexts' Has.Count.EqualTo(2));
Magic Number,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,CannotSpecifyInlineCodeOnPropertyAccessorsThatOverrideBaseMembers,The following statement contains a magic number: Assert.That(AllErrorTexts' Has.Count.EqualTo(2));
Magic Number,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,CannotSpecifyScriptSkipOnPropertyAccessorsThatOverrideBaseMembers,The following statement contains a magic number: Assert.That(AllErrorTexts' Has.Count.EqualTo(2));
Magic Number,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,CannotSpecifyInlineCodeOnOverridablePropertyAccessors,The following statement contains a magic number: Assert.That(AllErrorTexts' Has.Count.EqualTo(2));
Magic Number,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,CannotSpecifyScriptSkipOnOverridablePropertyAccessors,The following statement contains a magic number: Assert.That(AllErrorTexts' Has.Count.EqualTo(2));
Magic Number,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,CustomInitializationAttributeOnManualPropertyIsAnError,The following statement contains a magic number: Assert.That(AllErrors[0].Code == 7166 && AllErrors[0].FormattedMessage.Contains("C1.p1") && AllErrors[0].FormattedMessage.Contains("manual"));
Magic Number,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,ErrorInCustomInitializationAttributeCodeIsAnError,The following statement contains a magic number: Assert.That(AllErrors[0].Code == 7163 && AllErrors[0].FormattedMessage.Contains("C1.p1"));
Magic Number,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,ErrorInCustomInitializationAttributeCodeIsAnError,The following statement contains a magic number: Assert.That(AllErrors[0].Code == 7163 && AllErrors[0].FormattedMessage.Contains("C1.p1"));
Magic Number,CoreLib.Tests.MetadataImporterTests,PropertyTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\PropertyTests.cs,ErrorInCustomInitializationAttributeCodeIsAnError,The following statement contains a magic number: Assert.That(AllErrors[0].Code == 7163 && AllErrors[0].FormattedMessage.Contains("C1.p1"));
Magic Number,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,VirtualPropertyCannotImplementSerializableInterfaceProperty,The following statement contains a magic number: Assert.That(AllErrors.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7153 && m.FormattedMessage.Contains("C1.Prop1") && m.FormattedMessage.Contains("I1.Prop1") && m.FormattedMessage.Contains("virtual")));
Magic Number,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,OverridingPropertyCannotImplementSerializableInterfaceProperty,The following statement contains a magic number: Assert.That(AllErrors.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7154 && m.FormattedMessage.Contains("C1.Prop1") && m.FormattedMessage.Contains("I1.Prop1") && m.FormattedMessage.Contains("overrides")));
Magic Number,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,PropertyOfNonSerializableClassThatImplementsSerializedInterfaceMemberMustBeImplementedAsAutoProperty,The following statement contains a magic number: Assert.That(AllErrors.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7156 && m.FormattedMessage.Contains("C1.Prop1") && m.FormattedMessage.Contains("I1.Prop1") && m.FormattedMessage.Contains("auto-property")));
Magic Number,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,PropertyOfNonSerializableClassThatImplementsSerializedInterfaceMemberMustBeImplementedAsAutoProperty,The following statement contains a magic number: Assert.That(AllErrors.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7156 && m.FormattedMessage.Contains("C1.Prop1") && m.FormattedMessage.Contains("I1.Prop1") && m.FormattedMessage.Contains("auto-property")));
Magic Number,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,PropertyOfNonSerializableClassThatImplementsSerializedInterfaceMemberMustBeImplementedAsAutoProperty,The following statement contains a magic number: Assert.That(AllErrors.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7156 && m.FormattedMessage.Contains("C1.Prop1") && m.FormattedMessage.Contains("I1.Prop1") && m.FormattedMessage.Contains("auto-property")));
Magic Number,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,SerializableInterfaceCannotDeclareMethods,The following statement contains a magic number: Assert.That(AllErrors.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7155 && m.FormattedMessage.Contains("I1") && m.FormattedMessage.Contains("cannot declare methods")));
Magic Number,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,SerializableInterfaceCannotDeclareIndexer,The following statement contains a magic number: Assert.That(AllErrors[0].Code == 7161 && AllErrorTexts[0].Contains("serializable") && AllErrorTexts[0].Contains("indexer"));
Magic Number,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,IndexersOnSerializableTypesCanHaveInlineCode,The following statement contains a magic number: TestBothKinds(@"int this[int a] { [InlineCode(""_({this}).X"")] get; [InlineCode(""_({this})._({value})"")] set; } int this[int a' int b] { [InlineCode(""_({this}).X2"")] get { return 0; } } int this[int a' int b' int c] { [InlineCode(""_({this})._({value}).X2"")] set {} }"' () => {  				var prop1 = FindIndexer("C1"' 1);  				Assert.That(prop1.Type' Is.EqualTo(PropertyScriptSemantics.ImplType.GetAndSetMethods));  				Assert.That(prop1.GetMethod.Type' Is.EqualTo(MethodScriptSemantics.ImplType.InlineCode));  				Assert.That(prop1.GetMethod.LiteralCode' Is.EqualTo("_({this}).X"));  				Assert.That(prop1.SetMethod.Type' Is.EqualTo(MethodScriptSemantics.ImplType.InlineCode));  				Assert.That(prop1.SetMethod.LiteralCode' Is.EqualTo("_({this})._({value})"));    				var prop2 = FindIndexer("C1"' 2);  				Assert.That(prop2.Type' Is.EqualTo(PropertyScriptSemantics.ImplType.GetAndSetMethods));  				Assert.That(prop2.GetMethod.Type' Is.EqualTo(MethodScriptSemantics.ImplType.InlineCode));  				Assert.That(prop2.GetMethod.LiteralCode' Is.EqualTo("_({this}).X2"));  				Assert.That(prop2.SetMethod' Is.Null);    				var prop3 = FindIndexer("C1"' 3);  				Assert.That(prop3.Type' Is.EqualTo(PropertyScriptSemantics.ImplType.GetAndSetMethods));  				Assert.That(prop3.GetMethod' Is.Null);  				Assert.That(prop3.SetMethod.Type' Is.EqualTo(MethodScriptSemantics.ImplType.InlineCode));  				Assert.That(prop3.SetMethod.LiteralCode' Is.EqualTo("_({this})._({value}).X2"));  			});
Magic Number,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,IndexersOnSerializableTypesCanHaveInlineCode,The following statement contains a magic number: TestBothKinds(@"int this[int a] { [InlineCode(""_({this}).X"")] get; [InlineCode(""_({this})._({value})"")] set; } int this[int a' int b] { [InlineCode(""_({this}).X2"")] get { return 0; } } int this[int a' int b' int c] { [InlineCode(""_({this})._({value}).X2"")] set {} }"' () => {  				var prop1 = FindIndexer("C1"' 1);  				Assert.That(prop1.Type' Is.EqualTo(PropertyScriptSemantics.ImplType.GetAndSetMethods));  				Assert.That(prop1.GetMethod.Type' Is.EqualTo(MethodScriptSemantics.ImplType.InlineCode));  				Assert.That(prop1.GetMethod.LiteralCode' Is.EqualTo("_({this}).X"));  				Assert.That(prop1.SetMethod.Type' Is.EqualTo(MethodScriptSemantics.ImplType.InlineCode));  				Assert.That(prop1.SetMethod.LiteralCode' Is.EqualTo("_({this})._({value})"));    				var prop2 = FindIndexer("C1"' 2);  				Assert.That(prop2.Type' Is.EqualTo(PropertyScriptSemantics.ImplType.GetAndSetMethods));  				Assert.That(prop2.GetMethod.Type' Is.EqualTo(MethodScriptSemantics.ImplType.InlineCode));  				Assert.That(prop2.GetMethod.LiteralCode' Is.EqualTo("_({this}).X2"));  				Assert.That(prop2.SetMethod' Is.Null);    				var prop3 = FindIndexer("C1"' 3);  				Assert.That(prop3.Type' Is.EqualTo(PropertyScriptSemantics.ImplType.GetAndSetMethods));  				Assert.That(prop3.GetMethod' Is.Null);  				Assert.That(prop3.SetMethod.Type' Is.EqualTo(MethodScriptSemantics.ImplType.InlineCode));  				Assert.That(prop3.SetMethod.LiteralCode' Is.EqualTo("_({this})._({value}).X2"));  			});
Magic Number,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,InstanceMethodsAreConvertedToStaticMethodsWithThisAsFirstArgumentButStaticMethodsAreNormal,The following statement contains a magic number: TestBothKinds("public void SomeMethod() {} public static void SomeMethod(int x) {} public void SomeMethod(string s) {} public void SomeMethod(int a' int b) {}"' () => {  				var methods = FindMethods("C1.SomeMethod");  				var m1 = methods.Single(x => x.Item1.Parameters.Count == 0).Item2;  				Assert.That(m1.Type' Is.EqualTo(MethodScriptSemantics.ImplType.StaticMethodWithThisAsFirstArgument));  				Assert.That(m1.Name' Is.EqualTo("someMethod"));  				Assert.That(m1.GeneratedMethodName' Is.EqualTo(m1.Name));    				var m2 = methods.Single(x => x.Item1.Parameters.Count == 1 && x.Item1.Parameters[0].Type.GetDefinition().KnownTypeCode == KnownTypeCode.Int32).Item2;  				Assert.That(m2.Type' Is.EqualTo(MethodScriptSemantics.ImplType.NormalMethod));  				Assert.That(m2.Name' Is.EqualTo("someMethod$1"));  				Assert.That(m2.GeneratedMethodName' Is.EqualTo(m2.Name));    				var m3 = methods.Single(x => x.Item1.Parameters.Count == 1 && x.Item1.Parameters[0].Type.GetDefinition().KnownTypeCode == KnownTypeCode.String).Item2;  				Assert.That(m3.Type' Is.EqualTo(MethodScriptSemantics.ImplType.StaticMethodWithThisAsFirstArgument));  				Assert.That(m3.Name' Is.EqualTo("someMethod$2"));  				Assert.That(m3.GeneratedMethodName' Is.EqualTo(m3.Name));    				var m4 = methods.Single(x => x.Item1.Parameters.Count == 2).Item2;  				Assert.That(m4.Type' Is.EqualTo(MethodScriptSemantics.ImplType.StaticMethodWithThisAsFirstArgument));  				Assert.That(m4.Name' Is.EqualTo("someMethod$3"));  				Assert.That(m4.GeneratedMethodName' Is.EqualTo(m4.Name));  			});
Magic Number,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,NonPublicMethodNamesAreMinimized,The following statement contains a magic number: TestBothKinds("void SomeMethod() {} static void SomeMethod(int x) {} void SomeMethod(string s) {} void SomeMethod(int a' int b) {}"' () => {  				var methods = FindMethods("C1.SomeMethod");  				var m1 = methods.Single(x => x.Item1.Parameters.Count == 0).Item2;  				Assert.That(m1.Type' Is.EqualTo(MethodScriptSemantics.ImplType.StaticMethodWithThisAsFirstArgument));  				Assert.That(m1.Name' Is.EqualTo("$0"));    				var m2 = methods.Single(x => x.Item1.Parameters.Count == 1 && x.Item1.Parameters[0].Type.GetDefinition().KnownTypeCode == KnownTypeCode.Int32).Item2;  				Assert.That(m2.Type' Is.EqualTo(MethodScriptSemantics.ImplType.NormalMethod));  				Assert.That(m2.Name' Is.EqualTo("$1"));    				var m3 = methods.Single(x => x.Item1.Parameters.Count == 1 && x.Item1.Parameters[0].Type.GetDefinition().KnownTypeCode == KnownTypeCode.String).Item2;  				Assert.That(m3.Type' Is.EqualTo(MethodScriptSemantics.ImplType.StaticMethodWithThisAsFirstArgument));  				Assert.That(m3.Name' Is.EqualTo("$2"));    				var m4 = methods.Single(x => x.Item1.Parameters.Count == 2).Item2;  				Assert.That(m4.Type' Is.EqualTo(MethodScriptSemantics.ImplType.StaticMethodWithThisAsFirstArgument));  				Assert.That(m4.Name' Is.EqualTo("$3"));  			});
Magic Number,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,ConstructorsAreStaticMethodsAndCanBeNamed,The following statement contains a magic number: TestBothKinds(@"public C1() {} [ScriptName(""Renamed"")] public C1(int i) {} public C1(int i' int j) {}"' () => {  				var c1 = FindConstructor("C1"' 0);  				Assert.That(c1.Type' Is.EqualTo(ConstructorScriptSemantics.ImplType.StaticMethod));  				Assert.That(c1.Name' Is.EqualTo("$ctor"));  				Assert.That(c1.GenerateCode' Is.True);    				var c2 = FindConstructor("C1"' 1);  				Assert.That(c2.Type' Is.EqualTo(ConstructorScriptSemantics.ImplType.StaticMethod));  				Assert.That(c2.Name' Is.EqualTo("Renamed"));  				Assert.That(c2.GenerateCode' Is.True);    				var c3 = FindConstructor("C1"' 2);  				Assert.That(c3.Type' Is.EqualTo(ConstructorScriptSemantics.ImplType.StaticMethod));  				Assert.That(c3.Name' Is.EqualTo("$ctor1"));  				Assert.That(c3.GenerateCode' Is.True);  			});
Magic Number,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,NonPublicConstructorNamesAreMinimized,The following statement contains a magic number: TestBothKinds(@"C1() {} C1(int i) {} [ScriptName(""Renamed"")] C1(int i' int j) {}"' () => {  				var c1 = FindConstructor("C1"' 0);  				Assert.That(c1.Type' Is.EqualTo(ConstructorScriptSemantics.ImplType.StaticMethod));  				Assert.That(c1.Name' Is.EqualTo("$0"));  				Assert.That(c1.GenerateCode' Is.True);    				var c2 = FindConstructor("C1"' 1);  				Assert.That(c2.Type' Is.EqualTo(ConstructorScriptSemantics.ImplType.StaticMethod));  				Assert.That(c2.Name' Is.EqualTo("$1"));  				Assert.That(c2.GenerateCode' Is.True);    				var c3 = FindConstructor("C1"' 2);  				Assert.That(c3.Type' Is.EqualTo(ConstructorScriptSemantics.ImplType.StaticMethod));  				Assert.That(c3.Name' Is.EqualTo("Renamed"));  				Assert.That(c3.GenerateCode' Is.True);  			});
Magic Number,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,SpecityingAnEmptyScriptNameForAConstructorMakesTheDefault,The following statement contains a magic number: TestBothKinds(@"public C1() {} public C1(int i) {} [ScriptName("""")] public C1(int i' int j) {}"' () => {  				var c1 = FindConstructor("C1"' 0);  				Assert.That(c1.Type' Is.EqualTo(ConstructorScriptSemantics.ImplType.StaticMethod));  				Assert.That(c1.Name' Is.EqualTo("$ctor1"));  				Assert.That(c1.GenerateCode' Is.True);    				var c2 = FindConstructor("C1"' 1);  				Assert.That(c2.Type' Is.EqualTo(ConstructorScriptSemantics.ImplType.StaticMethod));  				Assert.That(c2.Name' Is.EqualTo("$ctor2"));  				Assert.That(c2.GenerateCode' Is.True);    				var c3 = FindConstructor("C1"' 2);  				Assert.That(c3.Type' Is.EqualTo(ConstructorScriptSemantics.ImplType.StaticMethod));  				Assert.That(c3.Name' Is.EqualTo("$ctor"));  				Assert.That(c3.GenerateCode' Is.True);  			});
Magic Number,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,ObjectLiteralAttributeMakesTheConstructorAJsonConstructor,The following statement contains a magic number: TestBothKinds(@"public int MyProperty { get; set; } public int MyField; [ObjectLiteral] public C1(int myProperty' int myField) {} }"' () => {  				var ctor = FindConstructor("C1"' 2);  				Assert.That(ctor.Type' Is.EqualTo(ConstructorScriptSemantics.ImplType.Json));  				Assert.That(ctor.ParameterToMemberMap.Select(m => m.Name)' Is.EqualTo(new[] { "MyProperty"' "MyField" }));  			});
Magic Number,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,ConstructorForImportedSerializableTypeBecomesJsonConstructor,The following statement contains a magic number: var ctor = FindConstructor("C1"' 2);
Magic Number,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,ConstructorForImportedSerializableTypeBecomesJsonConstructor,The following statement contains a magic number: ctor = FindConstructor("C1"' 2);
Magic Number,CoreLib.Tests.MetadataImporterTests,SerializableTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\SerializableTypeTests.cs,SerializableInterfaceCannotInheritFromNonSerializableInterfaces,The following statement contains a magic number: Assert.IsTrue(AllErrors.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7010 && m.FormattedMessage.Contains("I1") && m.FormattedMessage.Contains("I2")));
Magic Number,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,InvalidIdentifierInAssemblyScriptNamespaceAttributeIsAnError,The following statement contains a magic number: Assert.That(AllErrors[0].Code' Is.EqualTo(7002));
Magic Number,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,GenericArgumentDefaultRequireExplicitSpecificationCausesAnErrorIfIncludeGenericArgumentsIsNotSpecifiedForNonImportedTypes,The following statement contains a magic number: Assert.IsTrue(AllErrors.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7026 && m.FormattedMessage.Contains("IncludeGenericArgumentsAttribute") && m.FormattedMessage.Contains("C1")));
Magic Number,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,CannotImplementTwoInterfacesWithTheSameMethodName,The following statement contains a magic number: Assert.That(AllErrors[0].Code' Is.EqualTo(7018));
Magic Number,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,CannotImplementTwoInterfacesWithTheSameMethodName,The following statement contains a magic number: Assert.That(new[] { AllErrors[0].Args[1]' AllErrors[0].Args[2] }' Is.EquivalentTo(new[] { "I1"' "I2" }));
Magic Number,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,CannotImplementTwoInterfacesWithTheSameMethodName,The following statement contains a magic number: Assert.That(AllErrors[0].Args[3]' Is.EqualTo("someMethod"));
Magic Number,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,CannotDeriveFromBaseClassAndImplementInterfaceWithTheSameMethodName,The following statement contains a magic number: Assert.That(AllErrors[0].Code' Is.EqualTo(7018));
Magic Number,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,CannotDeriveFromBaseClassAndImplementInterfaceWithTheSameMethodName,The following statement contains a magic number: Assert.That(new[] { AllErrors[0].Args[1]' AllErrors[0].Args[2] }' Is.EquivalentTo(new[] { "B1"' "I1" }));
Magic Number,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,CannotDeriveFromBaseClassAndImplementInterfaceWithTheSameMethodName,The following statement contains a magic number: Assert.That(AllErrors[0].Args[3]' Is.EqualTo("someMethod"));
Magic Number,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,TypeCheckCodeInSerializableAttributeForImportedSerializableTypeIsAnError,The following statement contains a magic number: Assert.That(AllErrors.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7159 && m.FormattedMessage.Contains("C1") && m.FormattedMessage.Contains("TypeCheckCode") && m.FormattedMessage.Contains("SerializableAttribute")));
Magic Number,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,TypeCheckCodeAndObeysTypeSystemOnSameImportedTypeIsAnError,The following statement contains a magic number: Assert.That(AllErrors.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7158 && m.FormattedMessage.Contains("C1") && m.FormattedMessage.Contains("TypeCheckCode") && m.FormattedMessage.Contains("ObeysTypeSystem")));
Magic Number,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,ReferencingNonExistentTypeInImportedTypeCheckCodeIsAnError,The following statement contains a magic number: Assert.That(AllErrors.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7157 && m.FormattedMessage.Contains("C1") && m.FormattedMessage.Contains("Some.Nonexistent.Type")));
Magic Number,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,SyntaxErrorInImportedTypeCheckCodeIsAnError,The following statement contains a magic number: Assert.That(AllErrors.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7157 && m.FormattedMessage.Contains("C1") && m.FormattedMessage.Contains("syntax error")));
Magic Number,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,StructCannotHaveInstanceAutoProperties,The following statement contains a magic number: Assert.That(AllErrors.Any(m => m.Code == 7162 && m.Args[0].Equals("MyStruct")));
Magic Number,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,StructCannotHaveInstanceAutoEvents,The following statement contains a magic number: Assert.That(AllErrors.Any(m => m.Code == 7162 && m.Args[0].Equals("MyStruct")));
Magic Number,CoreLib.Tests.MetadataImporterTests,TypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\MetadataImporterTests\TypeTests.cs,StructCannotHaveNonReadonlyInstanceFields,The following statement contains a magic number: Assert.That(AllErrors.Any(m => m.Code == 7162 && m.Args[0].Equals("MyStruct")));
Magic Number,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,UsingUnavailableTypeArgumentInInheritanceListIsAnError,The following statement contains a magic number: Assert.That(er.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7536 && m.FormattedMessage.Contains("IncludeGenericArguments") && m.FormattedMessage.Contains("type D1")));
Magic Number,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,UsingUnavailableTypeParameterInSerializableTypeCheckCodeIsAnError,The following statement contains a magic number: Assert.That(er.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7536 && m.FormattedMessage.Contains("IncludeGenericArguments") && m.FormattedMessage.Contains("type C1")));
Magic Number,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,ReferencingNonExistentTypeInSerializableTypeCheckCodeIsAnError,The following statement contains a magic number: Assert.That(er.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7157 && m.FormattedMessage.Contains("C1") && m.FormattedMessage.Contains("Some.Nonexistent.Type")));
Magic Number,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,SyntaxErrorInSerializableTypeCheckCodeIsAnError,The following statement contains a magic number: Assert.That(er.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7157 && m.FormattedMessage.Contains("C1") && m.FormattedMessage.Contains("syntax error")));
Magic Number,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,TheThirdPhaseDoesNotHaveAnyDependencies,The following statement contains a magic number: Assert.That(actual.Phases[2].DependentOnTypes' Is.Empty);
Magic Number,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,GeneratedGetHashCodeGeneratesHashCodeBasedOnAllInstanceFields,The following statement contains a magic number: var getHashCode = ((JsObjectLiteralExpression)((JsInvocationExpression)((JsExpressionStatement)initClass).Expression).Arguments[2]).Values.Single(v => v.Name == "getHashCode");
Magic Number,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,GeneratedGetHashCodeWithOneField,The following statement contains a magic number: var getHashCode = ((JsObjectLiteralExpression)((JsInvocationExpression)((JsExpressionStatement)initClass).Expression).Arguments[2]).Values.Single(v => v.Name == "getHashCode");
Magic Number,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,GeneratedGetHashCodeWithNoFields,The following statement contains a magic number: var getHashCode = ((JsObjectLiteralExpression)((JsInvocationExpression)((JsExpressionStatement)initClass).Expression).Arguments[2]).Values.Single(v => v.Name == "getHashCode");
Magic Number,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,GeneratedEqualsCalculatesEqualityBasedOnAllInstanceFields,The following statement contains a magic number: var equals = ((JsObjectLiteralExpression)((JsInvocationExpression)((JsExpressionStatement)initClass).Expression).Arguments[2]).Values.Single(v => v.Name == "equals");
Magic Number,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,GeneratedEqualsWithOneField,The following statement contains a magic number: var equals = ((JsObjectLiteralExpression)((JsInvocationExpression)((JsExpressionStatement)initClass).Expression).Arguments[2]).Values.Single(v => v.Name == "equals");
Magic Number,CoreLib.Tests.OOPEmulatorTests,ClassTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ClassTests.cs,GeneratedEqualsWithNoFields,The following statement contains a magic number: var equals = ((JsObjectLiteralExpression)((JsInvocationExpression)((JsExpressionStatement)initClass).Expression).Arguments[2]).Values.Single(v => v.Name == "equals");
Magic Number,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,ReflectionOnUnusableConstructorIsAnError,The following statement contains a magic number: Assert.That(er.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7200 && m.FormattedMessage.Contains("C1") && m.FormattedMessage.Contains("reflection")));
Magic Number,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,ReflectionOnNativeOperatorMethodIsAnError,The following statement contains a magic number: Assert.That(er.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7201 && m.FormattedMessage.Contains("C1.op_Multiply") && m.FormattedMessage.Contains("method") && m.FormattedMessage.Contains("reflection")));
Magic Number,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,ReflectionOnUnusableMethodIsAnError,The following statement contains a magic number: Assert.That(er.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7201 && m.FormattedMessage.Contains("C1.M") && m.FormattedMessage.Contains("method") && m.FormattedMessage.Contains("reflection")));
Magic Number,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,ReflectionOnInlineConstantFieldIsAnError,The following statement contains a magic number: Assert.That(er.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7201 && m.FormattedMessage.Contains("C1.F") && m.FormattedMessage.Contains("field") && m.FormattedMessage.Contains("reflection")));
Magic Number,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,ReflectionOnUnusableFieldIsAnError,The following statement contains a magic number: Assert.That(er.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7201 && m.FormattedMessage.Contains("C1.F") && m.FormattedMessage.Contains("field") && m.FormattedMessage.Contains("reflection")));
Magic Number,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,ReflectionOnUnusablePropertyIsAnError,The following statement contains a magic number: Assert.That(er.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7201 && m.FormattedMessage.Contains("C1.P") && m.FormattedMessage.Contains("property") && m.FormattedMessage.Contains("reflection")));
Magic Number,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,ReflectionOnPropertyWithUnusableGetterIsAnError,The following statement contains a magic number: Assert.That(er.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7202 && m.FormattedMessage.Contains("C1.P") && m.FormattedMessage.Contains("property") && m.FormattedMessage.Contains("getter") && m.FormattedMessage.Contains("reflection")));
Magic Number,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,ReflectionOnPropertyWithUnusableSetterIsAnError,The following statement contains a magic number: Assert.That(er.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7202 && m.FormattedMessage.Contains("C1.P") && m.FormattedMessage.Contains("property") && m.FormattedMessage.Contains("setter") && m.FormattedMessage.Contains("reflection")));
Magic Number,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,ReflectionOnUnusableEventIsAnError,The following statement contains a magic number: Assert.That(er.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7201 && m.FormattedMessage.Contains("C1.E") && m.FormattedMessage.Contains("event") && m.FormattedMessage.Contains("reflection")));
Magic Number,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,ReflectionOnEventWithUnusableAdderIsAnError,The following statement contains a magic number: Assert.That(er.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7202 && m.FormattedMessage.Contains("C1.E") && m.FormattedMessage.Contains("event") && m.FormattedMessage.Contains("add accessor") && m.FormattedMessage.Contains("reflection")));
Magic Number,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,ReflectionOnEventWithUnusableRemoverIsAnError,The following statement contains a magic number: Assert.That(er.AllMessages.Any(m => m.Severity == MessageSeverity.Error && m.Code == 7202 && m.FormattedMessage.Contains("C1.E") && m.FormattedMessage.Contains("event") && m.FormattedMessage.Contains("remove accessor") && m.FormattedMessage.Contains("reflection")));
Magic Number,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,DefaultMemberReflectabilityAttributeCanBeSpecifiedOnAssemblyButCanBeOverriddenOnTypes,The following statement contains a magic number: var c1 = (JsObjectLiteralExpression)((JsInvocationExpression)((JsExpressionStatement)emulation.Phases[2].Statements[0]).Expression).Arguments[1];
Magic Number,CoreLib.Tests.OOPEmulatorTests,ReflectionTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\ReflectionTests.cs,DefaultMemberReflectabilityAttributeCanBeSpecifiedOnAssemblyButCanBeOverriddenOnTypes,The following statement contains a magic number: var c2 = (JsObjectLiteralExpression)((JsInvocationExpression)((JsExpressionStatement)emulation.Phases[2].Statements[0]).Expression).Arguments[1];
Magic Number,CoreLib.Tests.OOPEmulatorTests,OverallStructureTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\OverallStructureTests.cs,BothPublicAndPrivateEmbeddedResourcesAreIncludedInTheInitAssemblyCallButThisExcludesPluginDllsAndLinkedResources,The following statement contains a magic number: var compilation = Compile(@""' resources: new[] { new Resource(AssemblyResourceType.Embedded' "Resource.Name"' true' data: new byte[] { 45' 6' 7' 4 })'  			                                                  new Resource(AssemblyResourceType.Linked' "Other.Resource"' true' linkedFileName: "some-file.txt")'  			                                                  new Resource(AssemblyResourceType.Embedded' "Some.Private.Resource"' false' data: new byte[] { 5' 3' 7 })'  			                                                  new Resource(AssemblyResourceType.Embedded' "Namespace.Plugin.dll"' true' data: new byte[] { 5' 3' 7 })'  			                                                  new Resource(AssemblyResourceType.Embedded' "Plugin.dll"' true' data: new byte[] { 5' 3' 7 }) });
Magic Number,CoreLib.Tests.OOPEmulatorTests,OverallStructureTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\OverallStructureTests.cs,BothPublicAndPrivateEmbeddedResourcesAreIncludedInTheInitAssemblyCallButThisExcludesPluginDllsAndLinkedResources,The following statement contains a magic number: var compilation = Compile(@""' resources: new[] { new Resource(AssemblyResourceType.Embedded' "Resource.Name"' true' data: new byte[] { 45' 6' 7' 4 })'  			                                                  new Resource(AssemblyResourceType.Linked' "Other.Resource"' true' linkedFileName: "some-file.txt")'  			                                                  new Resource(AssemblyResourceType.Embedded' "Some.Private.Resource"' false' data: new byte[] { 5' 3' 7 })'  			                                                  new Resource(AssemblyResourceType.Embedded' "Namespace.Plugin.dll"' true' data: new byte[] { 5' 3' 7 })'  			                                                  new Resource(AssemblyResourceType.Embedded' "Plugin.dll"' true' data: new byte[] { 5' 3' 7 }) });
Magic Number,CoreLib.Tests.OOPEmulatorTests,OverallStructureTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\OverallStructureTests.cs,BothPublicAndPrivateEmbeddedResourcesAreIncludedInTheInitAssemblyCallButThisExcludesPluginDllsAndLinkedResources,The following statement contains a magic number: var compilation = Compile(@""' resources: new[] { new Resource(AssemblyResourceType.Embedded' "Resource.Name"' true' data: new byte[] { 45' 6' 7' 4 })'  			                                                  new Resource(AssemblyResourceType.Linked' "Other.Resource"' true' linkedFileName: "some-file.txt")'  			                                                  new Resource(AssemblyResourceType.Embedded' "Some.Private.Resource"' false' data: new byte[] { 5' 3' 7 })'  			                                                  new Resource(AssemblyResourceType.Embedded' "Namespace.Plugin.dll"' true' data: new byte[] { 5' 3' 7 })'  			                                                  new Resource(AssemblyResourceType.Embedded' "Plugin.dll"' true' data: new byte[] { 5' 3' 7 }) });
Magic Number,CoreLib.Tests.OOPEmulatorTests,OverallStructureTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\OverallStructureTests.cs,BothPublicAndPrivateEmbeddedResourcesAreIncludedInTheInitAssemblyCallButThisExcludesPluginDllsAndLinkedResources,The following statement contains a magic number: var compilation = Compile(@""' resources: new[] { new Resource(AssemblyResourceType.Embedded' "Resource.Name"' true' data: new byte[] { 45' 6' 7' 4 })'  			                                                  new Resource(AssemblyResourceType.Linked' "Other.Resource"' true' linkedFileName: "some-file.txt")'  			                                                  new Resource(AssemblyResourceType.Embedded' "Some.Private.Resource"' false' data: new byte[] { 5' 3' 7 })'  			                                                  new Resource(AssemblyResourceType.Embedded' "Namespace.Plugin.dll"' true' data: new byte[] { 5' 3' 7 })'  			                                                  new Resource(AssemblyResourceType.Embedded' "Plugin.dll"' true' data: new byte[] { 5' 3' 7 }) });
Magic Number,CoreLib.Tests.OOPEmulatorTests,OverallStructureTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\OverallStructureTests.cs,BothPublicAndPrivateEmbeddedResourcesAreIncludedInTheInitAssemblyCallButThisExcludesPluginDllsAndLinkedResources,The following statement contains a magic number: var compilation = Compile(@""' resources: new[] { new Resource(AssemblyResourceType.Embedded' "Resource.Name"' true' data: new byte[] { 45' 6' 7' 4 })'  			                                                  new Resource(AssemblyResourceType.Linked' "Other.Resource"' true' linkedFileName: "some-file.txt")'  			                                                  new Resource(AssemblyResourceType.Embedded' "Some.Private.Resource"' false' data: new byte[] { 5' 3' 7 })'  			                                                  new Resource(AssemblyResourceType.Embedded' "Namespace.Plugin.dll"' true' data: new byte[] { 5' 3' 7 })'  			                                                  new Resource(AssemblyResourceType.Embedded' "Plugin.dll"' true' data: new byte[] { 5' 3' 7 }) });
Magic Number,CoreLib.Tests.OOPEmulatorTests,OverallStructureTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\OverallStructureTests.cs,BothPublicAndPrivateEmbeddedResourcesAreIncludedInTheInitAssemblyCallButThisExcludesPluginDllsAndLinkedResources,The following statement contains a magic number: var compilation = Compile(@""' resources: new[] { new Resource(AssemblyResourceType.Embedded' "Resource.Name"' true' data: new byte[] { 45' 6' 7' 4 })'  			                                                  new Resource(AssemblyResourceType.Linked' "Other.Resource"' true' linkedFileName: "some-file.txt")'  			                                                  new Resource(AssemblyResourceType.Embedded' "Some.Private.Resource"' false' data: new byte[] { 5' 3' 7 })'  			                                                  new Resource(AssemblyResourceType.Embedded' "Namespace.Plugin.dll"' true' data: new byte[] { 5' 3' 7 })'  			                                                  new Resource(AssemblyResourceType.Embedded' "Plugin.dll"' true' data: new byte[] { 5' 3' 7 }) });
Magic Number,CoreLib.Tests.OOPEmulatorTests,OverallStructureTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\OverallStructureTests.cs,BothPublicAndPrivateEmbeddedResourcesAreIncludedInTheInitAssemblyCallButThisExcludesPluginDllsAndLinkedResources,The following statement contains a magic number: var compilation = Compile(@""' resources: new[] { new Resource(AssemblyResourceType.Embedded' "Resource.Name"' true' data: new byte[] { 45' 6' 7' 4 })'  			                                                  new Resource(AssemblyResourceType.Linked' "Other.Resource"' true' linkedFileName: "some-file.txt")'  			                                                  new Resource(AssemblyResourceType.Embedded' "Some.Private.Resource"' false' data: new byte[] { 5' 3' 7 })'  			                                                  new Resource(AssemblyResourceType.Embedded' "Namespace.Plugin.dll"' true' data: new byte[] { 5' 3' 7 })'  			                                                  new Resource(AssemblyResourceType.Embedded' "Plugin.dll"' true' data: new byte[] { 5' 3' 7 }) });
Magic Number,CoreLib.Tests.OOPEmulatorTests,OverallStructureTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\OverallStructureTests.cs,BothPublicAndPrivateEmbeddedResourcesAreIncludedInTheInitAssemblyCallButThisExcludesPluginDllsAndLinkedResources,The following statement contains a magic number: var compilation = Compile(@""' resources: new[] { new Resource(AssemblyResourceType.Embedded' "Resource.Name"' true' data: new byte[] { 45' 6' 7' 4 })'  			                                                  new Resource(AssemblyResourceType.Linked' "Other.Resource"' true' linkedFileName: "some-file.txt")'  			                                                  new Resource(AssemblyResourceType.Embedded' "Some.Private.Resource"' false' data: new byte[] { 5' 3' 7 })'  			                                                  new Resource(AssemblyResourceType.Embedded' "Namespace.Plugin.dll"' true' data: new byte[] { 5' 3' 7 })'  			                                                  new Resource(AssemblyResourceType.Embedded' "Plugin.dll"' true' data: new byte[] { 5' 3' 7 }) });
Magic Number,CoreLib.Tests.OOPEmulatorTests,OverallStructureTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\OverallStructureTests.cs,BothPublicAndPrivateEmbeddedResourcesAreIncludedInTheInitAssemblyCallButThisExcludesPluginDllsAndLinkedResources,The following statement contains a magic number: var compilation = Compile(@""' resources: new[] { new Resource(AssemblyResourceType.Embedded' "Resource.Name"' true' data: new byte[] { 45' 6' 7' 4 })'  			                                                  new Resource(AssemblyResourceType.Linked' "Other.Resource"' true' linkedFileName: "some-file.txt")'  			                                                  new Resource(AssemblyResourceType.Embedded' "Some.Private.Resource"' false' data: new byte[] { 5' 3' 7 })'  			                                                  new Resource(AssemblyResourceType.Embedded' "Namespace.Plugin.dll"' true' data: new byte[] { 5' 3' 7 })'  			                                                  new Resource(AssemblyResourceType.Embedded' "Plugin.dll"' true' data: new byte[] { 5' 3' 7 }) });
Magic Number,CoreLib.Tests.OOPEmulatorTests,OverallStructureTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\OverallStructureTests.cs,BothPublicAndPrivateEmbeddedResourcesAreIncludedInTheInitAssemblyCallButThisExcludesPluginDllsAndLinkedResources,The following statement contains a magic number: var compilation = Compile(@""' resources: new[] { new Resource(AssemblyResourceType.Embedded' "Resource.Name"' true' data: new byte[] { 45' 6' 7' 4 })'  			                                                  new Resource(AssemblyResourceType.Linked' "Other.Resource"' true' linkedFileName: "some-file.txt")'  			                                                  new Resource(AssemblyResourceType.Embedded' "Some.Private.Resource"' false' data: new byte[] { 5' 3' 7 })'  			                                                  new Resource(AssemblyResourceType.Embedded' "Namespace.Plugin.dll"' true' data: new byte[] { 5' 3' 7 })'  			                                                  new Resource(AssemblyResourceType.Embedded' "Plugin.dll"' true' data: new byte[] { 5' 3' 7 }) });
Magic Number,CoreLib.Tests.OOPEmulatorTests,OverallStructureTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\OverallStructureTests.cs,BothPublicAndPrivateEmbeddedResourcesAreIncludedInTheInitAssemblyCallButThisExcludesPluginDllsAndLinkedResources,The following statement contains a magic number: var compilation = Compile(@""' resources: new[] { new Resource(AssemblyResourceType.Embedded' "Resource.Name"' true' data: new byte[] { 45' 6' 7' 4 })'  			                                                  new Resource(AssemblyResourceType.Linked' "Other.Resource"' true' linkedFileName: "some-file.txt")'  			                                                  new Resource(AssemblyResourceType.Embedded' "Some.Private.Resource"' false' data: new byte[] { 5' 3' 7 })'  			                                                  new Resource(AssemblyResourceType.Embedded' "Namespace.Plugin.dll"' true' data: new byte[] { 5' 3' 7 })'  			                                                  new Resource(AssemblyResourceType.Embedded' "Plugin.dll"' true' data: new byte[] { 5' 3' 7 }) });
Magic Number,CoreLib.Tests.OOPEmulatorTests,OverallStructureTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\OverallStructureTests.cs,BothPublicAndPrivateEmbeddedResourcesAreIncludedInTheInitAssemblyCallButThisExcludesPluginDllsAndLinkedResources,The following statement contains a magic number: var compilation = Compile(@""' resources: new[] { new Resource(AssemblyResourceType.Embedded' "Resource.Name"' true' data: new byte[] { 45' 6' 7' 4 })'  			                                                  new Resource(AssemblyResourceType.Linked' "Other.Resource"' true' linkedFileName: "some-file.txt")'  			                                                  new Resource(AssemblyResourceType.Embedded' "Some.Private.Resource"' false' data: new byte[] { 5' 3' 7 })'  			                                                  new Resource(AssemblyResourceType.Embedded' "Namespace.Plugin.dll"' true' data: new byte[] { 5' 3' 7 })'  			                                                  new Resource(AssemblyResourceType.Embedded' "Plugin.dll"' true' data: new byte[] { 5' 3' 7 }) });
Magic Number,CoreLib.Tests.OOPEmulatorTests,OverallStructureTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\OOPEmulatorTests\OverallStructureTests.cs,BothPublicAndPrivateEmbeddedResourcesAreIncludedInTheInitAssemblyCallButThisExcludesPluginDllsAndLinkedResources,The following statement contains a magic number: var compilation = Compile(@""' resources: new[] { new Resource(AssemblyResourceType.Embedded' "Resource.Name"' true' data: new byte[] { 45' 6' 7' 4 })'  			                                                  new Resource(AssemblyResourceType.Linked' "Other.Resource"' true' linkedFileName: "some-file.txt")'  			                                                  new Resource(AssemblyResourceType.Embedded' "Some.Private.Resource"' false' data: new byte[] { 5' 3' 7 })'  			                                                  new Resource(AssemblyResourceType.Embedded' "Namespace.Plugin.dll"' true' data: new byte[] { 5' 3' 7 })'  			                                                  new Resource(AssemblyResourceType.Embedded' "Plugin.dll"' true' data: new byte[] { 5' 3' 7 }) });
Magic Number,CoreLib.Tests.RuntimeLibraryTests,MiscTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\RuntimeLibraryTests\MiscTests.cs,UpcastCharToObjectIsAnError,The following statement contains a magic number: Assert.That(result.Item2.AllMessages.Select(m => m.Code)' Is.EqualTo(new[] { 7700 }));
Magic Number,CoreLib.Tests.RuntimeLibraryTests,ScriptTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\RuntimeLibraryTests\ScriptTypeTests.cs,UseOfTypeIsWithNonScriptableTypeIsAnError,The following statement contains a magic number: Assert.That(result.Item2.AllMessages.Any(m => m.Code == 7522 && m.FormattedMessage.Contains("X1")));
Magic Number,CoreLib.Tests.RuntimeLibraryTests,ScriptTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\RuntimeLibraryTests\ScriptTypeTests.cs,UseOfTypeIsWithNonScriptableTypeIsAnError,The following statement contains a magic number: Assert.That(result.Item2.AllMessages.Any(m => m.Code == 7522 && m.FormattedMessage.Contains("X1")));
Magic Number,CoreLib.Tests.RuntimeLibraryTests,ScriptTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\RuntimeLibraryTests\ScriptTypeTests.cs,UseOfTypeAsWithNonScriptableTypeIsAnError,The following statement contains a magic number: Assert.That(result.Item2.AllMessages.Any(m => m.Code == 7522 && m.FormattedMessage.Contains("X1")));
Magic Number,CoreLib.Tests.RuntimeLibraryTests,ScriptTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\RuntimeLibraryTests\ScriptTypeTests.cs,UseOfTypeAsWithNonScriptableTypeIsAnError,The following statement contains a magic number: Assert.That(result.Item2.AllMessages.Any(m => m.Code == 7522 && m.FormattedMessage.Contains("X1")));
Magic Number,CoreLib.Tests.RuntimeLibraryTests,ScriptTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\RuntimeLibraryTests\ScriptTypeTests.cs,UseOfCastWithNonScriptableTypeIsAnError,The following statement contains a magic number: Assert.That(result.Item2.AllMessages.Any(m => m.Code == 7522 && m.FormattedMessage.Contains("X1")));
Magic Number,CoreLib.Tests.RuntimeLibraryTests,ScriptTypeTests,D:\research\architectureSmells\repos\erik-kallen_SaltarelleCompiler\Runtime\CoreLib.Tests\RuntimeLibraryTests\ScriptTypeTests.cs,UseOfCastWithNonScriptableTypeIsAnError,The following statement contains a magic number: Assert.That(result.Item2.AllMessages.Any(m => m.Code == 7522 && m.FormattedMessage.Contains("X1")));
