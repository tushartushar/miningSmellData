Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Mono.Options,Option,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\SCExeWorker\Mono.Options\Options.cs,Option,Cyclomatic complexity of the method is 8
Complex Method,Mono.Options,Option,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\SCExeWorker\Mono.Options\Options.cs,ParsePrototype,Cyclomatic complexity of the method is 9
Complex Method,Mono.Options,OptionSet,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\SCExeWorker\Mono.Options\Options.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,Mono.Options,OptionSet,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\SCExeWorker\Mono.Options\Options.cs,WriteOptionDescriptions,Cyclomatic complexity of the method is 9
Complex Method,Mono.Options,OptionSet,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\SCExeWorker\Mono.Options\Options.cs,WriteOptionPrototype,Cyclomatic complexity of the method is 8
Long Parameter List,Mono.Options,OptionSet,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\SCExeWorker\Mono.Options\Options.cs,GetOptionParts,The method has 5 parameters. Parameters: argument' flag' name' sep' value
Long Parameter List,Mono.Options,OptionSet,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\SCExeWorker\Mono.Options\Options.cs,WriteDescription,The method has 5 parameters. Parameters: o' value' prefix' firstWidth' remWidth
Long Statement,Saltarelle.Compiler.SCExe,ExecutableErrorReporter,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\SCExeWorker\ExecutableErrorReporter.cs,Message,The length of the statement  "			_writer.WriteLine(string.Format(CultureInfo.InvariantCulture' "{0}({1}'{2}): {3} CS{4:0000}: {5}"' Region.FileName' Region.BeginLine' Region.BeginColumn' GetSeverityText(severity)' code' string.Format(message' args))); " is 218.
Long Statement,Saltarelle.Compiler.SCExe,Worker,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\SCExeWorker\Worker.cs,HandleIntegerList,The length of the statement  "					throw new OptionException("Could not convert string `" + s + "' to an integer for option `/" + optionName + "'."' "/" + optionName); " is 132.
Long Statement,Saltarelle.Compiler.SCExe,Worker,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\SCExeWorker\Worker.cs,ParseTargetForHasEntryPoint,The length of the statement  "					throw new OptionException(string.Format("Target kind {0} is invalid (should be either exe or library)."' target)' "target"); " is 124.
Long Statement,Saltarelle.Compiler.SCExe,Worker,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\SCExeWorker\Worker.cs,ParseOptions,The length of the statement  "					{ "d|define="'     v => result.DefineConstants.AddRange(v.Split(new[] { ';' }).Select(s => s.Trim()).Where(s => s != "" && !result.DefineConstants.Contains(s))) }' " is 163.
Long Statement,Saltarelle.Compiler.SCExe,Worker,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\SCExeWorker\Worker.cs,ParseOptions,The length of the statement  "					{ "lib="'          v => result.AdditionalLibPaths.AddRange(v.Split(new[] { ''' }).Select(s => s.Trim()).Where(s => s != "" && !result.AdditionalLibPaths.Contains(s))) }' " is 169.
Long Statement,Saltarelle.Compiler.SCExe,Worker,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\SCExeWorker\Worker.cs,ParseOptions,The length of the statement  "					{ "w|warn="'       (int v) => { if (v < 0 || v > 4) throw new OptionException("Warning level must be between 0 and 4"' "/warn"); result.WarningLevel = v; } }' " is 158.
Complex Conditional,Mono.Options,Option,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\SCExeWorker\Mono.Options\Options.cs,Option,The conditional expression  "Array.IndexOf (names' "<>") >= 0 &&   					((names.Length == 1 && this.type != OptionValueType.None) ||  					 (names.Length > 1 && this.MaxValueCount > 1))"  is complex.
Complex Conditional,Mono.Options,OptionSet,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\SCExeWorker\Mono.Options\Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n [n.Length-1] == '+' || n [n.Length-1] == '-') &&  					Contains ((rn = n.Substring (0' n.Length-1)))"  is complex.
Virtual Method Call from Constructor,Mono.Options,Option,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\SCExeWorker\Mono.Options\Options.cs,Option,The constructor "Option" calls a virtual method "GetHashCode".
Magic Number,Saltarelle.Compiler.SCExe,Worker,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\SCExeWorker\Worker.cs,ParseResource,The following statement contains a magic number: string name = arr.Length < 2 || string.IsNullOrEmpty(arr[1]) ? Path.GetFileName(file) : arr[1];
Magic Number,Saltarelle.Compiler.SCExe,Worker,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\SCExeWorker\Worker.cs,ParseResource,The following statement contains a magic number: bool isPublic = arr.Length < 3 || !string.Equals(arr[2]' "private"' StringComparison.OrdinalIgnoreCase);
Magic Number,Saltarelle.Compiler.SCExe,Worker,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\SCExeWorker\Worker.cs,ParseResource,The following statement contains a magic number: bool isPublic = arr.Length < 3 || !string.Equals(arr[2]' "private"' StringComparison.OrdinalIgnoreCase);
Magic Number,Saltarelle.Compiler.SCExe,Worker,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\SCExeWorker\Worker.cs,ParseOptions,The following statement contains a magic number: try {  				bool showHelp = false;  				var result = new CompilerOptions() { MinimizeScript = true };  				var opts = new OptionSet {  					{ "outasm="'       v => result.OutputAssemblyPath = v }'  					{ "outscript="'    v => result.OutputScriptPath = v }'  					{ "doc="'          v => result.DocumentationFile = v }'  					{ "d|define="'     v => result.DefineConstants.AddRange(v.Split(new[] { ';' }).Select(s => s.Trim()).Where(s => s != "" && !result.DefineConstants.Contains(s))) }'  					{ "lib="'          v => result.AdditionalLibPaths.AddRange(v.Split(new[] { ''' }).Select(s => s.Trim()).Where(s => s != "" && !result.AdditionalLibPaths.Contains(s))) }'  					{ "m|main="'       v => result.EntryPointClass = v }'  					{ "r|reference="'  v => HandleReferences(result' v) }'  					{ "debug"'         f => result.MinimizeScript = f == null || f.EndsWith("-") }'  					{ "res|resource="' v => result.EmbeddedResources.Add(ParseResource(v)) }'  					{ "w|warn="'       (int v) => { if (v < 0 || v > 4) throw new OptionException("Warning level must be between 0 and 4"' "/warn"); result.WarningLevel = v; } }'  					{ "nowarn="'       v => DisableWarnings(result' v) }'  					{ "warnaserror:"'  v => HandleWarningsAsErrors(result' v) }'  					{ "warnaserror-:"' v => HandleWarningsNotAsErrors(result' v) }'  					{ "keyfile="'      v => result.KeyFile = v }'  					{ "keycontainer="' v => result.KeyContainer = v }'  					{ "t|target="'     v => result.HasEntryPoint = ParseTargetForHasEntryPoint(v) }'  					{ "?|help"'        v => showHelp = true }'  				};    				var extra = opts.Parse(args);  				foreach (var file in extra)  					result.SourceFiles.Add(file);    				if (showHelp) {  					ShowHelp(infoWriter);  					return null;  				}    				return result;  			}  			catch (OptionException ex) {  				errorWriter.WriteLine(ex.Message);  				return null;  			}
Magic Number,Mono.Options,OptionSet,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\SCExeWorker\Mono.Options\Options.cs,Add,The following statement contains a magic number: Option p = new ActionOption (prototype' description' 2'   					delegate (OptionValueCollection v) {action (v [0]' v [1]);});
Magic Number,Mono.Options,OptionSet,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\SCExeWorker\Mono.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  				int written = 0;    				Category c = p as Category;  				if (c != null) {  					WriteDescription (o' p.Description' ""' 80' 80);  					continue;  				}    				if (!WriteOptionPrototype (o' p' ref written))  					continue;    				if (written < OptionWidth)  					o.Write (new string (' '' OptionWidth - written));  				else {  					o.WriteLine ();  					o.Write (new string (' '' OptionWidth));  				}    				WriteDescription (o' p.Description' new string (' '' OptionWidth+2)'  						Description_FirstWidth' Description_RemWidth);  			}
Magic Number,Mono.Options,OptionSet,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\SCExeWorker\Mono.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  				int written = 0;    				Category c = p as Category;  				if (c != null) {  					WriteDescription (o' p.Description' ""' 80' 80);  					continue;  				}    				if (!WriteOptionPrototype (o' p' ref written))  					continue;    				if (written < OptionWidth)  					o.Write (new string (' '' OptionWidth - written));  				else {  					o.WriteLine ();  					o.Write (new string (' '' OptionWidth));  				}    				WriteDescription (o' p.Description' new string (' '' OptionWidth+2)'  						Description_FirstWidth' Description_RemWidth);  			}
Magic Number,Mono.Options,OptionSet,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\SCExeWorker\Mono.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (Option p in this) {  				int written = 0;    				Category c = p as Category;  				if (c != null) {  					WriteDescription (o' p.Description' ""' 80' 80);  					continue;  				}    				if (!WriteOptionPrototype (o' p' ref written))  					continue;    				if (written < OptionWidth)  					o.Write (new string (' '' OptionWidth - written));  				else {  					o.WriteLine ();  					o.Write (new string (' '' OptionWidth));  				}    				WriteDescription (o' p.Description' new string (' '' OptionWidth+2)'  						Description_FirstWidth' Description_RemWidth);  			}
Magic Number,Mono.Options,OptionSet,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\SCExeWorker\Mono.Options\Options.cs,WriteOptionDescriptions,The following statement contains a magic number: foreach (ArgumentSource s in sources) {  				string[] names = s.GetNames ();  				if (names == null || names.Length == 0)  					continue;    				int written = 0;    				Write (o' ref written' "  ");  				Write (o' ref written' names [0]);  				for (int i = 1; i < names.Length; ++i) {  					Write (o' ref written' "' ");  					Write (o' ref written' names [i]);  				}    				if (written < OptionWidth)  					o.Write (new string (' '' OptionWidth - written));  				else {  					o.WriteLine ();  					o.Write (new string (' '' OptionWidth));  				}    				WriteDescription (o' s.Description' new string (' '' OptionWidth+2)'  						Description_FirstWidth' Description_RemWidth);  			}
Missing Default,Mono.Options,OptionSet,C:\repos\erik-kallen_SaltarelleCompiler\Compiler\SCExeWorker\Mono.Options\Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType) {  					case OptionValueType.None:  						c.OptionValues.Add (n);  						c.Option.Invoke (c);  						break;  					case OptionValueType.Optional:  					case OptionValueType.Required:   						ParseValue (v' c);  						break;  				}
