Implementation smell,Namespace,Class,File,Method,Description
Long Method,CRFSharpWrapper,Encoder,C:\repos\zhongkaifu_CRFSharp\Core\CRFSharpWrapper\Encoder.cs,runCRF,The method has 151 lines of code.
Complex Method,CRFSharpWrapper,Encoder,C:\repos\zhongkaifu_CRFSharp\Core\CRFSharpWrapper\Encoder.cs,Learn,Cyclomatic complexity of the method is 11
Complex Method,CRFSharpWrapper,Encoder,C:\repos\zhongkaifu_CRFSharp\Core\CRFSharpWrapper\Encoder.cs,runCRF,Cyclomatic complexity of the method is 14
Complex Method,CRFSharpWrapper,Encoder,C:\repos\zhongkaifu_CRFSharp\Core\CRFSharpWrapper\Encoder.cs,ShowEvaluation,Cyclomatic complexity of the method is 10
Long Parameter List,CRFSharpWrapper,Encoder,C:\repos\zhongkaifu_CRFSharp\Core\CRFSharpWrapper\Encoder.cs,ShowEvaluation,The method has 11 parameters. Parameters: recordNum' feature_index' lbfgs' termNum' itr' merr' yfreq' diff' startDT' nonzero_feature_num' args
Long Statement,CRFSharpWrapper,Encoder,C:\repos\zhongkaifu_CRFSharp\Core\CRFSharpWrapper\Encoder.cs,Learn,The length of the statement  "            if (!modelWriter.BuildFeatureSetIntoIndex(args.strEncodedModelFileName' args.slot_usage_rate_threshold' args.debugLevel)) " is 121.
Long Statement,CRFSharpWrapper,Encoder,C:\repos\zhongkaifu_CRFSharp\Core\CRFSharpWrapper\Encoder.cs,ShowEvaluation,The length of the statement  "            Logger.WriteLine("iter={0} terr={1:0.00000} serr={2:0.00000} diff={3:0.000000} fsize={4}({5:0.00}% act)"' itr' 1.0 * lbfgs.err / termNum' 1.0 * lbfgs.zeroone / recordNum' diff' feature_index.feature_size()' act_feature_rate); " is 225.
Long Statement,CRFSharpWrapper,Encoder,C:\repos\zhongkaifu_CRFSharp\Core\CRFSharpWrapper\Encoder.cs,ShowEvaluation,The length of the statement  "            Logger.WriteLine("Time span: {0}' Aver. time span per iter: {1}"' ts' new TimeSpan(0' 0' (int)(ts.TotalSeconds / (itr + 1)))); " is 126.
Magic Number,CRFSharpWrapper,DecoderArgs,C:\repos\zhongkaifu_CRFSharp\Core\CRFSharpWrapper\Args.cs,DecoderArgs,The following statement contains a magic number: maxword = 100;
Magic Number,CRFSharpWrapper,Encoder,C:\repos\zhongkaifu_CRFSharp\Core\CRFSharpWrapper\Encoder.cs,runCRF,The following statement contains a magic number: for (var itr = 0; itr < args.max_iter; ++itr)              {                  //Clear result container                  lbfgs.obj = 0.0f;                  lbfgs.err = 0;                  lbfgs.zeroone = 0;                    Array.Clear(lbfgs.expected' 0' lbfgs.expected.Length);                    var threadList = new List<Thread>();                  for (var i = 0; i < args.threads_num; i++)                  {                      var thread = new Thread(processList[i].Run);                      thread.Start();                      threadList.Add(thread);                  }                    int['] merr;                  merr = new int[modelWriter.y_.Count' modelWriter.y_.Count];                  for (var i = 0; i < args.threads_num; ++i)                  {                      threadList[i].Join();                      lbfgs.obj += processList[i].obj;                      lbfgs.err += processList[i].err;                      lbfgs.zeroone += processList[i].zeroone;                        //Calculate error                      for (var j = 0; j < modelWriter.y_.Count; j++)                      {                          for (var k = 0; k < modelWriter.y_.Count; k++)                          {                              merr[j' k] += processList[i].merr[j' k];                          }                      }                  }                    long num_nonzero = 0;                  var fsize = modelWriter.feature_size();                  var alpha = modelWriter.alpha_;                  if (orthant == true)                  {                      //L1 regularization                      Parallel.For<double>(1' fsize + 1' parallelOption' () => 0' (k' loop' subtotal) =>                      {                          subtotal += Math.Abs(alpha[k] / modelWriter.cost_factor_);                          if (alpha[k] != 0.0)                          {                              Interlocked.Increment(ref num_nonzero);                          }                          return subtotal;                      }'                     (subtotal) => // lock free accumulator                     {                         double initialValue;                         double newValue;                         do                         {                             initialValue = lbfgs.obj; // read current value                             newValue = initialValue + subtotal;  //calculate new value                         }                         while (initialValue != Interlocked.CompareExchange(ref lbfgs.obj' newValue' initialValue));                     });                  }                  else                  {                      //L2 regularization                      num_nonzero = fsize;                      Parallel.For<double>(1' fsize + 1' parallelOption' () => 0' (k' loop' subtotal) =>                     {                         subtotal += (alpha[k] * alpha[k] / (2.0 * modelWriter.cost_factor_));                         lbfgs.expected[k] += (alpha[k] / modelWriter.cost_factor_);                         return subtotal;                     }'                     (subtotal) => // lock free accumulator                     {                         double initialValue;                         double newValue;                         do                         {                             initialValue = lbfgs.obj; // read current value                             newValue = initialValue + subtotal;  //calculate new value                         }                         while (initialValue != Interlocked.CompareExchange(ref lbfgs.obj' newValue' initialValue));                     });                  }                    //Show each iteration result                  var diff = (itr == 0 ? 1.0f : Math.Abs(old_obj - lbfgs.obj) / old_obj);                  old_obj = lbfgs.obj;                    ShowEvaluation(x.Length' modelWriter' lbfgs' termNum' itr' merr' yfreq' diff' startDT' num_nonzero' args);                  if (diff < args.min_diff)                  {                      converge++;                  }                  else                  {                      converge = 0;                  }                  if (itr > args.max_iter || converge == 3)                  {                      break;  // 3 is ad-hoc                  }                    if (args.debugLevel > 0 && (double)lbfgs.zeroone / (double)x.Length < dMinErrRecord)                  {                      var cc = Console.ForegroundColor;                      Console.ForegroundColor = ConsoleColor.Red;                      Console.Write("[Debug Mode] ");                      Console.ForegroundColor = cc;                      Logger.WriteLine("Save intermediate feature weights at current directory");                        //Save current best feature weight into file                      dMinErrRecord = (double)lbfgs.zeroone / (double)x.Length;                      modelWriter.SaveFeatureWeight("feature_weight_tmp"' false);                  }                    int iret;                  iret = lbfgs.optimize(alpha' modelWriter.cost_factor_' orthant);                  if (iret <= 0)                  {                      return false;                  }              }
Magic Number,CRFSharpWrapper,Encoder,C:\repos\zhongkaifu_CRFSharp\Core\CRFSharpWrapper\Encoder.cs,runCRF,The following statement contains a magic number: for (var itr = 0; itr < args.max_iter; ++itr)              {                  //Clear result container                  lbfgs.obj = 0.0f;                  lbfgs.err = 0;                  lbfgs.zeroone = 0;                    Array.Clear(lbfgs.expected' 0' lbfgs.expected.Length);                    var threadList = new List<Thread>();                  for (var i = 0; i < args.threads_num; i++)                  {                      var thread = new Thread(processList[i].Run);                      thread.Start();                      threadList.Add(thread);                  }                    int['] merr;                  merr = new int[modelWriter.y_.Count' modelWriter.y_.Count];                  for (var i = 0; i < args.threads_num; ++i)                  {                      threadList[i].Join();                      lbfgs.obj += processList[i].obj;                      lbfgs.err += processList[i].err;                      lbfgs.zeroone += processList[i].zeroone;                        //Calculate error                      for (var j = 0; j < modelWriter.y_.Count; j++)                      {                          for (var k = 0; k < modelWriter.y_.Count; k++)                          {                              merr[j' k] += processList[i].merr[j' k];                          }                      }                  }                    long num_nonzero = 0;                  var fsize = modelWriter.feature_size();                  var alpha = modelWriter.alpha_;                  if (orthant == true)                  {                      //L1 regularization                      Parallel.For<double>(1' fsize + 1' parallelOption' () => 0' (k' loop' subtotal) =>                      {                          subtotal += Math.Abs(alpha[k] / modelWriter.cost_factor_);                          if (alpha[k] != 0.0)                          {                              Interlocked.Increment(ref num_nonzero);                          }                          return subtotal;                      }'                     (subtotal) => // lock free accumulator                     {                         double initialValue;                         double newValue;                         do                         {                             initialValue = lbfgs.obj; // read current value                             newValue = initialValue + subtotal;  //calculate new value                         }                         while (initialValue != Interlocked.CompareExchange(ref lbfgs.obj' newValue' initialValue));                     });                  }                  else                  {                      //L2 regularization                      num_nonzero = fsize;                      Parallel.For<double>(1' fsize + 1' parallelOption' () => 0' (k' loop' subtotal) =>                     {                         subtotal += (alpha[k] * alpha[k] / (2.0 * modelWriter.cost_factor_));                         lbfgs.expected[k] += (alpha[k] / modelWriter.cost_factor_);                         return subtotal;                     }'                     (subtotal) => // lock free accumulator                     {                         double initialValue;                         double newValue;                         do                         {                             initialValue = lbfgs.obj; // read current value                             newValue = initialValue + subtotal;  //calculate new value                         }                         while (initialValue != Interlocked.CompareExchange(ref lbfgs.obj' newValue' initialValue));                     });                  }                    //Show each iteration result                  var diff = (itr == 0 ? 1.0f : Math.Abs(old_obj - lbfgs.obj) / old_obj);                  old_obj = lbfgs.obj;                    ShowEvaluation(x.Length' modelWriter' lbfgs' termNum' itr' merr' yfreq' diff' startDT' num_nonzero' args);                  if (diff < args.min_diff)                  {                      converge++;                  }                  else                  {                      converge = 0;                  }                  if (itr > args.max_iter || converge == 3)                  {                      break;  // 3 is ad-hoc                  }                    if (args.debugLevel > 0 && (double)lbfgs.zeroone / (double)x.Length < dMinErrRecord)                  {                      var cc = Console.ForegroundColor;                      Console.ForegroundColor = ConsoleColor.Red;                      Console.Write("[Debug Mode] ");                      Console.ForegroundColor = cc;                      Logger.WriteLine("Save intermediate feature weights at current directory");                        //Save current best feature weight into file                      dMinErrRecord = (double)lbfgs.zeroone / (double)x.Length;                      modelWriter.SaveFeatureWeight("feature_weight_tmp"' false);                  }                    int iret;                  iret = lbfgs.optimize(alpha' modelWriter.cost_factor_' orthant);                  if (iret <= 0)                  {                      return false;                  }              }
Magic Number,CRFSharpWrapper,Encoder,C:\repos\zhongkaifu_CRFSharp\Core\CRFSharpWrapper\Encoder.cs,ShowEvaluation,The following statement contains a magic number: if (args.debugLevel > 1)              {                  for (var i = 0; i < feature_index.y_.Count; i++)                  {                      var total_merr = 0;                      var sdict = new SortedDictionary<double' List<string>>();                      for (var j = 0; j < feature_index.y_.Count; j++)                      {                          total_merr += merr[i' j];                          var v = (double)merr[i' j] / (double)yfreq[i];                          if (v > 0.0001)                          {                              if (sdict.ContainsKey(v) == false)                              {                                  sdict.Add(v' new List<string>());                              }                              sdict[v].Add(feature_index.y_[j]);                          }                      }                      var vet = (double)total_merr / (double)yfreq[i];                      vet = vet * 100.0F;                        Console.ForegroundColor = ConsoleColor.Green;                      Console.Write("{0} "' feature_index.y_[i]);                      Console.ResetColor();                      Console.Write("[FR={0}' TE="' yfreq[i]);                      Console.ForegroundColor = ConsoleColor.Yellow;                      Console.Write("{0:0.00}%"' vet);                      Console.ResetColor();                      Console.WriteLine("]");                        var n = 0;                      foreach (var pair in sdict.Reverse())                      {                          for (int index = 0; index < pair.Value.Count; index++)                          {                              var item = pair.Value[index];                              n += item.Length + 1 + 7;                              if (n > 80)                              {                                  //only show data in one line' more data in tail will not be show.                                  break;                              }                              Console.Write("{0}:"' item);                              Console.ForegroundColor = ConsoleColor.Red;                              Console.Write("{0:0.00}% "' pair.Key * 100);                              Console.ResetColor();                          }                          if (n > 80)                          {                              break;                          }                      }                      Console.WriteLine();                  }              }
Magic Number,CRFSharpWrapper,Encoder,C:\repos\zhongkaifu_CRFSharp\Core\CRFSharpWrapper\Encoder.cs,ShowEvaluation,The following statement contains a magic number: if (args.debugLevel > 1)              {                  for (var i = 0; i < feature_index.y_.Count; i++)                  {                      var total_merr = 0;                      var sdict = new SortedDictionary<double' List<string>>();                      for (var j = 0; j < feature_index.y_.Count; j++)                      {                          total_merr += merr[i' j];                          var v = (double)merr[i' j] / (double)yfreq[i];                          if (v > 0.0001)                          {                              if (sdict.ContainsKey(v) == false)                              {                                  sdict.Add(v' new List<string>());                              }                              sdict[v].Add(feature_index.y_[j]);                          }                      }                      var vet = (double)total_merr / (double)yfreq[i];                      vet = vet * 100.0F;                        Console.ForegroundColor = ConsoleColor.Green;                      Console.Write("{0} "' feature_index.y_[i]);                      Console.ResetColor();                      Console.Write("[FR={0}' TE="' yfreq[i]);                      Console.ForegroundColor = ConsoleColor.Yellow;                      Console.Write("{0:0.00}%"' vet);                      Console.ResetColor();                      Console.WriteLine("]");                        var n = 0;                      foreach (var pair in sdict.Reverse())                      {                          for (int index = 0; index < pair.Value.Count; index++)                          {                              var item = pair.Value[index];                              n += item.Length + 1 + 7;                              if (n > 80)                              {                                  //only show data in one line' more data in tail will not be show.                                  break;                              }                              Console.Write("{0}:"' item);                              Console.ForegroundColor = ConsoleColor.Red;                              Console.Write("{0:0.00}% "' pair.Key * 100);                              Console.ResetColor();                          }                          if (n > 80)                          {                              break;                          }                      }                      Console.WriteLine();                  }              }
Magic Number,CRFSharpWrapper,Encoder,C:\repos\zhongkaifu_CRFSharp\Core\CRFSharpWrapper\Encoder.cs,ShowEvaluation,The following statement contains a magic number: if (args.debugLevel > 1)              {                  for (var i = 0; i < feature_index.y_.Count; i++)                  {                      var total_merr = 0;                      var sdict = new SortedDictionary<double' List<string>>();                      for (var j = 0; j < feature_index.y_.Count; j++)                      {                          total_merr += merr[i' j];                          var v = (double)merr[i' j] / (double)yfreq[i];                          if (v > 0.0001)                          {                              if (sdict.ContainsKey(v) == false)                              {                                  sdict.Add(v' new List<string>());                              }                              sdict[v].Add(feature_index.y_[j]);                          }                      }                      var vet = (double)total_merr / (double)yfreq[i];                      vet = vet * 100.0F;                        Console.ForegroundColor = ConsoleColor.Green;                      Console.Write("{0} "' feature_index.y_[i]);                      Console.ResetColor();                      Console.Write("[FR={0}' TE="' yfreq[i]);                      Console.ForegroundColor = ConsoleColor.Yellow;                      Console.Write("{0:0.00}%"' vet);                      Console.ResetColor();                      Console.WriteLine("]");                        var n = 0;                      foreach (var pair in sdict.Reverse())                      {                          for (int index = 0; index < pair.Value.Count; index++)                          {                              var item = pair.Value[index];                              n += item.Length + 1 + 7;                              if (n > 80)                              {                                  //only show data in one line' more data in tail will not be show.                                  break;                              }                              Console.Write("{0}:"' item);                              Console.ForegroundColor = ConsoleColor.Red;                              Console.Write("{0:0.00}% "' pair.Key * 100);                              Console.ResetColor();                          }                          if (n > 80)                          {                              break;                          }                      }                      Console.WriteLine();                  }              }
Magic Number,CRFSharpWrapper,Encoder,C:\repos\zhongkaifu_CRFSharp\Core\CRFSharpWrapper\Encoder.cs,ShowEvaluation,The following statement contains a magic number: if (args.debugLevel > 1)              {                  for (var i = 0; i < feature_index.y_.Count; i++)                  {                      var total_merr = 0;                      var sdict = new SortedDictionary<double' List<string>>();                      for (var j = 0; j < feature_index.y_.Count; j++)                      {                          total_merr += merr[i' j];                          var v = (double)merr[i' j] / (double)yfreq[i];                          if (v > 0.0001)                          {                              if (sdict.ContainsKey(v) == false)                              {                                  sdict.Add(v' new List<string>());                              }                              sdict[v].Add(feature_index.y_[j]);                          }                      }                      var vet = (double)total_merr / (double)yfreq[i];                      vet = vet * 100.0F;                        Console.ForegroundColor = ConsoleColor.Green;                      Console.Write("{0} "' feature_index.y_[i]);                      Console.ResetColor();                      Console.Write("[FR={0}' TE="' yfreq[i]);                      Console.ForegroundColor = ConsoleColor.Yellow;                      Console.Write("{0:0.00}%"' vet);                      Console.ResetColor();                      Console.WriteLine("]");                        var n = 0;                      foreach (var pair in sdict.Reverse())                      {                          for (int index = 0; index < pair.Value.Count; index++)                          {                              var item = pair.Value[index];                              n += item.Length + 1 + 7;                              if (n > 80)                              {                                  //only show data in one line' more data in tail will not be show.                                  break;                              }                              Console.Write("{0}:"' item);                              Console.ForegroundColor = ConsoleColor.Red;                              Console.Write("{0:0.00}% "' pair.Key * 100);                              Console.ResetColor();                          }                          if (n > 80)                          {                              break;                          }                      }                      Console.WriteLine();                  }              }
Magic Number,CRFSharpWrapper,Encoder,C:\repos\zhongkaifu_CRFSharp\Core\CRFSharpWrapper\Encoder.cs,ShowEvaluation,The following statement contains a magic number: if (args.debugLevel > 1)              {                  for (var i = 0; i < feature_index.y_.Count; i++)                  {                      var total_merr = 0;                      var sdict = new SortedDictionary<double' List<string>>();                      for (var j = 0; j < feature_index.y_.Count; j++)                      {                          total_merr += merr[i' j];                          var v = (double)merr[i' j] / (double)yfreq[i];                          if (v > 0.0001)                          {                              if (sdict.ContainsKey(v) == false)                              {                                  sdict.Add(v' new List<string>());                              }                              sdict[v].Add(feature_index.y_[j]);                          }                      }                      var vet = (double)total_merr / (double)yfreq[i];                      vet = vet * 100.0F;                        Console.ForegroundColor = ConsoleColor.Green;                      Console.Write("{0} "' feature_index.y_[i]);                      Console.ResetColor();                      Console.Write("[FR={0}' TE="' yfreq[i]);                      Console.ForegroundColor = ConsoleColor.Yellow;                      Console.Write("{0:0.00}%"' vet);                      Console.ResetColor();                      Console.WriteLine("]");                        var n = 0;                      foreach (var pair in sdict.Reverse())                      {                          for (int index = 0; index < pair.Value.Count; index++)                          {                              var item = pair.Value[index];                              n += item.Length + 1 + 7;                              if (n > 80)                              {                                  //only show data in one line' more data in tail will not be show.                                  break;                              }                              Console.Write("{0}:"' item);                              Console.ForegroundColor = ConsoleColor.Red;                              Console.Write("{0:0.00}% "' pair.Key * 100);                              Console.ResetColor();                          }                          if (n > 80)                          {                              break;                          }                      }                      Console.WriteLine();                  }              }
Magic Number,CRFSharpWrapper,Encoder,C:\repos\zhongkaifu_CRFSharp\Core\CRFSharpWrapper\Encoder.cs,ShowEvaluation,The following statement contains a magic number: var act_feature_rate = (double)(nonzero_feature_num) / (double)(feature_index.feature_size()) * 100.0;
Magic Number,CRFSharpWrapper,SegDecoderTagger,C:\repos\zhongkaifu_CRFSharp\Core\CRFSharpWrapper\SegDecoderTagger.cs,seg_termbuf_build,The following statement contains a magic number: for (var i = 0; i < x_.Count; i++)              {                  //Adding the length of current token                  var strTag = term_buf.result_[i];                  term_len += x_[i][0].Length;                  weight += term_buf.weight_[i];                  num++;                    //Check if current term is the end of a token                  if ((strTag.StartsWith("B_") == false &&                      strTag.StartsWith("M_") == false) ||                      i == x_.Count - 1)                  {                      var tkn = new SegToken();                      tkn.length = term_len;                      tkn.offset = term_buf.termTotalLength;                        var spos = strTag.IndexOf('_');                      if (spos < 0)                      {                          if (strTag == "NOR")                          {                              tkn.strTag = "";                          }                          else                          {                              tkn.strTag = strTag;                          }                      }                      else                      {                          tkn.strTag = strTag.Substring(spos + 1);                      }                        term_buf.termTotalLength += term_len;                      //Calculate each token's weight                      switch (vlevel_)                      {                          case 0:                              tkn.fWeight = 0.0;                              break;                          case 2:                              tkn.fWeight = weight / num;                              weight = 0.0;                              num = 0;                              break;                      }                        term_buf.tokenList.Add(tkn);                      term_len = 0;                  }              }
Missing Default,CRFSharpWrapper,SegDecoderTagger,C:\repos\zhongkaifu_CRFSharp\Core\CRFSharpWrapper\SegDecoderTagger.cs,seg_termbuf_build,The following switch statement is missing a default case: switch (vlevel_)                      {                          case 0:                              tkn.fWeight = 0.0;                              break;                          case 2:                              tkn.fWeight = weight / num;                              weight = 0.0;                              num = 0;                              break;                      }
