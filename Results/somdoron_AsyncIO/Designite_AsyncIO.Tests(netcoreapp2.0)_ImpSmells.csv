Implementation smell,Namespace,Class,File,Method,Description
Magic Number,AsyncIO.Tests,AsyncSocketTests,D:\research\architectureSmells\repos1\somdoron_AsyncIO\Source\AsyncIO.Tests\AsyncSocketTests.cs,KeepAlive,The following statement contains a magic number: tcpKeepalive.keepaliveinterval = 1000;
Magic Number,AsyncIO.Tests,AsyncSocketTests,D:\research\architectureSmells\repos1\somdoron_AsyncIO\Source\AsyncIO.Tests\AsyncSocketTests.cs,KeepAlive,The following statement contains a magic number: tcpKeepalive.keepalivetime = 1000;
Magic Number,AsyncIO.Tests,AsyncSocketTests,D:\research\architectureSmells\repos1\somdoron_AsyncIO\Source\AsyncIO.Tests\AsyncSocketTests.cs,SendReceive,The following statement contains a magic number: var task = Task.Factory.StartNew(() =>              {                  bool cancel = false;                    while (!cancel)                  {                      CompletionStatus [] completionStatuses = new CompletionStatus[10];                        int removed;                        completionPort.GetMultipleQueuedCompletionStatus(-1' completionStatuses' out removed);                        for (int i = 0; i < removed; i++)                      {                          if (completionStatuses[i].OperationType == OperationType.Signal)                          {                              cancel = true;                          }                          else if (completionStatuses[i].SocketError == SocketError.Success)                          {                              EventWaitHandle manualResetEvent = (EventWaitHandle)completionStatuses[i].State;                              manualResetEvent.Set();                          }                          else                          {                              exception = true;                          }                      }                  }              });
