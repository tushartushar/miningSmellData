Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Vim.UI.Wpf,NativeMethods,C:\repos\jaredpar_VsVim\Src\VimWpf\NativeMethods.cs,ToUnicodeEx,The method has 7 parameters. Parameters: virtualKey' scanCode' keyState' buffer' bufferSize' flags' keyboardLayout
Long Parameter List,Vim.UI.Wpf.Implementation.CommandMargin,CommandMarginController,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CommandMargin\CommandMarginController.cs,CommandMarginController,The method has 5 parameters. Parameters: buffer' parentVisualElement' control' editorFormatMap' classificationFormatMap
Long Parameter List,Vim.UI.Wpf.Implementation.Misc,DisplayWindowBroker,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\Misc\DisplayWindowBroker.cs,DisplayWindowBroker,The method has 5 parameters. Parameters: textView' completionBroker' signatureHelpBroker' smartTagBroker' quickInfoBroker
Long Parameter List,Vim.UI.Wpf.Implementation.BlockCaret,BlockCaret,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\BlockCaret\BlockCaret.cs,BlockCaret,The method has 6 parameters. Parameters: textView' classificationFormatMap' formatMap' layer' controlCharUtil' protectedOperations
Long Parameter List,Vim.UI.Wpf.Implementation.BlockCaret,BlockCaret,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\BlockCaret\BlockCaret.cs,BlockCaret,The method has 6 parameters. Parameters: textView' adornmentLayerName' classificationFormatMap' formatMap' controlCharUtil' protectedOperations
Long Parameter List,Vim.UI.Wpf.Implementation.BlockCaret,CaretData,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\BlockCaret\BlockCaret.cs,CaretData,The method has 6 parameters. Parameters: caretDisplay' caretOpacity' image' color' size' displayOffset
Long Identifier,Vim.UI.Wpf,VimWpfConstants,C:\repos\jaredpar_VsVim\Src\VimWpf\Constants.cs,,The length of the parameter BlockCaretFormatDefinitionName is 30.
Long Identifier,Vim.UI.Wpf,VimWpfConstants,C:\repos\jaredpar_VsVim\Src\VimWpf\Constants.cs,,The length of the parameter ControlCharactersFormatDefinitionName is 37.
Long Identifier,Vim.UI.Wpf,VimWpfConstants,C:\repos\jaredpar_VsVim\Src\VimWpf\Constants.cs,,The length of the parameter CommandMarginFormatDefinitionName is 33.
Long Identifier,Vim.UI.Wpf,VimHost,C:\repos\jaredpar_VsVim\Src\VimWpf\VimHost.cs,VimHost,The length of the parameter editorOperationsFactoryService is 30.
Long Identifier,Vim.UI.Wpf,VimHost,C:\repos\jaredpar_VsVim\Src\VimWpf\VimHost.cs,,The length of the parameter _editorOperationsFactoryService is 31.
Long Identifier,Vim.UI.Wpf.Implementation.CommandMargin,CommandMarginProvider,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CommandMargin\CommandMarginProvider.cs,CommandMarginProvider,The length of the parameter classificationFormatMapService is 30.
Long Identifier,Vim.UI.Wpf.Implementation.CommandMargin,CommandMarginProvider,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CommandMargin\CommandMarginProvider.cs,,The length of the parameter _classificationFormatMapService is 31.
Long Identifier,Vim.UI.Wpf.Implementation.Directory,DirectoryContentType,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\Directory\DirectoryContentType.cs,,The length of the parameter DirectoryContentTypeDefinition is 30.
Long Identifier,Vim.UI.Wpf.Implementation.Directory,DirectoryTaggerSourceFactory,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\Directory\DirectoryTaggerSourceFactory.cs,DirectoryTaggerSourceFactory,The length of the parameter classificationTypeRegistryService is 33.
Long Identifier,Vim.UI.Wpf.Implementation.Directory,DirectoryTaggerSourceFactory,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\Directory\DirectoryTaggerSourceFactory.cs,,The length of the parameter _classificationTypeRegistryService is 34.
Long Identifier,Vim.UI.Wpf.Implementation.BlockCaret,BlockCaretFactoryService,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\BlockCaret\BlockCaretFactoryService.cs,BlockCaretFactoryService,The length of the parameter classificationFormatMapService is 30.
Long Identifier,Vim.UI.Wpf.Implementation.BlockCaret,BlockCaretFactoryService,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\BlockCaret\BlockCaretFactoryService.cs,,The length of the parameter _classificationFormatMapService is 31.
Long Identifier,Vim.UI.Wpf.Implementation.BlockCaret,BlockCaretFactoryService,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\BlockCaret\BlockCaretFactoryService.cs,,The length of the parameter _blockCaretAdornmentLayerDefinition is 35.
Long Identifier,Vim.UI.Wpf.Implementation.Paste,PasteFactoryService,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\Paste\PasteFactoryService.cs,,The length of the parameter _pasteAdornmentLayerDefinition is 30.
Long Identifier,Vim.UI.Wpf.Implementation.WordCompletion,WordCompletionSessionFactoryService,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\WordCompletion\WordCompletionSessionFactoryService.cs,WordCompletionSessionFactoryService,The length of the parameter intellisenseSessionStackMapService is 34.
Long Identifier,Vim.UI.Wpf.Implementation.WordCompletion,WordCompletionSessionFactoryService,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\WordCompletion\WordCompletionSessionFactoryService.cs,,The length of the parameter _intellisenseSessionStackMapService is 35.
Long Statement,Vim.UI.Wpf,Extensions,C:\repos\jaredpar_VsVim\Src\VimWpf\Extensions.cs,GetForegroundBrush,The length of the statement  "            return GetBrush(dictionary' EditorFormatDefinition.ForegroundBrushId' EditorFormatDefinition.ForegroundColorId' defaultBrush); " is 126.
Long Statement,Vim.UI.Wpf,Extensions,C:\repos\jaredpar_VsVim\Src\VimWpf\Extensions.cs,GetBackgroundBrush,The length of the statement  "            return GetBrush(dictionary' EditorFormatDefinition.BackgroundBrushId' EditorFormatDefinition.BackgroundColorId' defaultBrush); " is 126.
Long Statement,Vim.UI.Wpf,VimKeyProcessor,C:\repos\jaredpar_VsVim\Src\VimWpf\VimKeyProcessor.cs,TextInput,The length of the statement  "            VimTrace.TraceInfo("VimKeyProcessor::TextInput Text={0} ControlText={1} SystemText={2}"' args.Text' args.ControlText' args.SystemText); " is 135.
Long Statement,Vim.UI.Wpf,VimHost,C:\repos\jaredpar_VsVim\Src\VimWpf\VimHost.cs,EnsureLineVisible,The length of the statement  "                        var pos = textViewLine.Start < textView.TextViewLines.FormattedSpan.Start && textViewLine.Height <= textView.ViewportHeight + roundOff " is 134.
Long Statement,Vim.UI.Wpf.Implementation.CommandMargin,CommandMarginControl,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CommandMargin\CommandMarginControl.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/Vim.UI.Wpf;component/implementation/commandmargin/commandmargincontrol.xaml"' System.UriKind.Relative); " is 149.
Long Statement,Vim.UI.Wpf.Implementation.BlockCaret,BlockCaret,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\BlockCaret\BlockCaret.cs,CreateFormattedText,The length of the statement  "            return new FormattedText("^"' CultureInfo.CurrentUICulture' FlowDirection.RightToLeft' textRunProperties.Typeface' textRunProperties.FontRenderingEmSize' Brushes.Black); " is 169.
Long Statement,Vim.UI.Wpf.Implementation.BlockCaret,BlockCaretFactoryService,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\BlockCaret\BlockCaretFactoryService.cs,CreateBlockCaret,The length of the statement  "            return new BlockCaret(textView' BlockCaretAdornmentLayerName' classificationFormaptMap' formatMap' _controlCharUtil' _protectedOperations); " is 139.
Long Statement,Vim.UI.Wpf.Implementation.WordCompletion,CompletionSource,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\WordCompletion\WordCompletionSessionFactoryService.cs,AugmentCompletionSession,The length of the statement  "                if (!textView.Properties.TryGetPropertySafe(_completionDataKey' out CompletionData completionData) || completionData.WordCollection == null) " is 140.
Empty Catch Block,Vim.UI.Wpf,VimHost,C:\repos\jaredpar_VsVim\Src\VimWpf\VimHost.cs,EnsureVisible,The method has an empty catch block.
Empty Catch Block,Vim.UI.Wpf.Implementation.WordCompletion,WordCompletionPresenterProvider,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\WordCompletion\WordCompletionPresenterProvider.cs,TryCreateIntellisensePresenter,The method has an empty catch block.
Magic Number,Vim.UI.Wpf,NativeMethods,C:\repos\jaredpar_VsVim\Src\VimWpf\NativeMethods.cs,HiWord,The following statement contains a magic number: return (number >> 16) & 0xffff;
Magic Number,Vim.UI.Wpf,VimHost,C:\repos\jaredpar_VsVim\Src\VimWpf\VimHost.cs,EnsureLineVisible,The following statement contains a magic number: const double roundOff = 0.01;
Magic Number,Vim.UI.Wpf,VimHost,C:\repos\jaredpar_VsVim\Src\VimWpf\VimHost.cs,EnsureLinePointVisible,The following statement contains a magic number: const double horizontalPadding = 2.0;
Magic Number,Vim.UI.Wpf,VimHost,C:\repos\jaredpar_VsVim\Src\VimWpf\VimHost.cs,EnsureLinePointVisible,The following statement contains a magic number: const double scrollbarPadding = 200.0;
Magic Number,Vim.UI.Wpf,VimHost,C:\repos\jaredpar_VsVim\Src\VimWpf\VimHost.cs,EnsureLinePointVisible,The following statement contains a magic number: var scroll = Math.Max(                  horizontalPadding'                  Math.Min(scrollbarPadding' textView.ViewportWidth / 4));
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,CharDisplayTaggerSource,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\CharDisplayTaggerSource.cs,TryFindIndex,The following statement contains a magic number: do              {                  mid = (min + max) / 2;                  current = _adornmentCache[mid].Position;                    if (current == position)                  {                      index = mid;                      return true;                  }                    if (position < current)                  {                      max = mid - 1;                  }                  else                  {                      min = mid + 1;                  }              } while (min <= max);
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,IsRelevant,The following statement contains a magic number: return i <= 31;
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: if (i >= 9 && i <= 13)              {                  text = null;                  return false;              }
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: if (i >= 9 && i <= 13)              {                  text = null;                  return false;              }
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: switch (i)              {                  case 0: text = "^@"; break;                  case 1: text = "^A"; break;                  case 2: text = "^B"; break;                  case 3: text = "^C"; break;                  case 4: text = "^D"; break;                  case 5: text = "^E"; break;                  case 6: text = "^F"; break;                  case 7: text = "^G"; break;                  case 8: text = "^H"; break;                  case 9: text = "^I"; break;                  case 10: text = "^J"; break;                  case 11: text = "^K"; break;                  case 12: text = "^L"; break;                  case 13: text = "^M"; break;                  case 14: text = "^N"; break;                  case 15: text = "^O"; break;                  case 16: text = "^P"; break;                  case 17: text = "^Q"; break;                  case 18: text = "^R"; break;                  case 19: text = "^S"; break;                  case 20: text = "^T"; break;                  case 21: text = "^U"; break;                  case 22: text = "^V"; break;                  case 23: text = "^W"; break;                  case 24: text = "^X"; break;                  case 25: text = "^Y"; break;                  case 26: text = "^Z"; break;                  case 27: text = "^["; break;                  case 28: text = "^\\"; break;                  case 29: text = "^]"; break;                  case 30: text = "^^"; break;                  case 31: text = "^_"; break;              }
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: switch (i)              {                  case 0: text = "^@"; break;                  case 1: text = "^A"; break;                  case 2: text = "^B"; break;                  case 3: text = "^C"; break;                  case 4: text = "^D"; break;                  case 5: text = "^E"; break;                  case 6: text = "^F"; break;                  case 7: text = "^G"; break;                  case 8: text = "^H"; break;                  case 9: text = "^I"; break;                  case 10: text = "^J"; break;                  case 11: text = "^K"; break;                  case 12: text = "^L"; break;                  case 13: text = "^M"; break;                  case 14: text = "^N"; break;                  case 15: text = "^O"; break;                  case 16: text = "^P"; break;                  case 17: text = "^Q"; break;                  case 18: text = "^R"; break;                  case 19: text = "^S"; break;                  case 20: text = "^T"; break;                  case 21: text = "^U"; break;                  case 22: text = "^V"; break;                  case 23: text = "^W"; break;                  case 24: text = "^X"; break;                  case 25: text = "^Y"; break;                  case 26: text = "^Z"; break;                  case 27: text = "^["; break;                  case 28: text = "^\\"; break;                  case 29: text = "^]"; break;                  case 30: text = "^^"; break;                  case 31: text = "^_"; break;              }
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: switch (i)              {                  case 0: text = "^@"; break;                  case 1: text = "^A"; break;                  case 2: text = "^B"; break;                  case 3: text = "^C"; break;                  case 4: text = "^D"; break;                  case 5: text = "^E"; break;                  case 6: text = "^F"; break;                  case 7: text = "^G"; break;                  case 8: text = "^H"; break;                  case 9: text = "^I"; break;                  case 10: text = "^J"; break;                  case 11: text = "^K"; break;                  case 12: text = "^L"; break;                  case 13: text = "^M"; break;                  case 14: text = "^N"; break;                  case 15: text = "^O"; break;                  case 16: text = "^P"; break;                  case 17: text = "^Q"; break;                  case 18: text = "^R"; break;                  case 19: text = "^S"; break;                  case 20: text = "^T"; break;                  case 21: text = "^U"; break;                  case 22: text = "^V"; break;                  case 23: text = "^W"; break;                  case 24: text = "^X"; break;                  case 25: text = "^Y"; break;                  case 26: text = "^Z"; break;                  case 27: text = "^["; break;                  case 28: text = "^\\"; break;                  case 29: text = "^]"; break;                  case 30: text = "^^"; break;                  case 31: text = "^_"; break;              }
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: switch (i)              {                  case 0: text = "^@"; break;                  case 1: text = "^A"; break;                  case 2: text = "^B"; break;                  case 3: text = "^C"; break;                  case 4: text = "^D"; break;                  case 5: text = "^E"; break;                  case 6: text = "^F"; break;                  case 7: text = "^G"; break;                  case 8: text = "^H"; break;                  case 9: text = "^I"; break;                  case 10: text = "^J"; break;                  case 11: text = "^K"; break;                  case 12: text = "^L"; break;                  case 13: text = "^M"; break;                  case 14: text = "^N"; break;                  case 15: text = "^O"; break;                  case 16: text = "^P"; break;                  case 17: text = "^Q"; break;                  case 18: text = "^R"; break;                  case 19: text = "^S"; break;                  case 20: text = "^T"; break;                  case 21: text = "^U"; break;                  case 22: text = "^V"; break;                  case 23: text = "^W"; break;                  case 24: text = "^X"; break;                  case 25: text = "^Y"; break;                  case 26: text = "^Z"; break;                  case 27: text = "^["; break;                  case 28: text = "^\\"; break;                  case 29: text = "^]"; break;                  case 30: text = "^^"; break;                  case 31: text = "^_"; break;              }
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: switch (i)              {                  case 0: text = "^@"; break;                  case 1: text = "^A"; break;                  case 2: text = "^B"; break;                  case 3: text = "^C"; break;                  case 4: text = "^D"; break;                  case 5: text = "^E"; break;                  case 6: text = "^F"; break;                  case 7: text = "^G"; break;                  case 8: text = "^H"; break;                  case 9: text = "^I"; break;                  case 10: text = "^J"; break;                  case 11: text = "^K"; break;                  case 12: text = "^L"; break;                  case 13: text = "^M"; break;                  case 14: text = "^N"; break;                  case 15: text = "^O"; break;                  case 16: text = "^P"; break;                  case 17: text = "^Q"; break;                  case 18: text = "^R"; break;                  case 19: text = "^S"; break;                  case 20: text = "^T"; break;                  case 21: text = "^U"; break;                  case 22: text = "^V"; break;                  case 23: text = "^W"; break;                  case 24: text = "^X"; break;                  case 25: text = "^Y"; break;                  case 26: text = "^Z"; break;                  case 27: text = "^["; break;                  case 28: text = "^\\"; break;                  case 29: text = "^]"; break;                  case 30: text = "^^"; break;                  case 31: text = "^_"; break;              }
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: switch (i)              {                  case 0: text = "^@"; break;                  case 1: text = "^A"; break;                  case 2: text = "^B"; break;                  case 3: text = "^C"; break;                  case 4: text = "^D"; break;                  case 5: text = "^E"; break;                  case 6: text = "^F"; break;                  case 7: text = "^G"; break;                  case 8: text = "^H"; break;                  case 9: text = "^I"; break;                  case 10: text = "^J"; break;                  case 11: text = "^K"; break;                  case 12: text = "^L"; break;                  case 13: text = "^M"; break;                  case 14: text = "^N"; break;                  case 15: text = "^O"; break;                  case 16: text = "^P"; break;                  case 17: text = "^Q"; break;                  case 18: text = "^R"; break;                  case 19: text = "^S"; break;                  case 20: text = "^T"; break;                  case 21: text = "^U"; break;                  case 22: text = "^V"; break;                  case 23: text = "^W"; break;                  case 24: text = "^X"; break;                  case 25: text = "^Y"; break;                  case 26: text = "^Z"; break;                  case 27: text = "^["; break;                  case 28: text = "^\\"; break;                  case 29: text = "^]"; break;                  case 30: text = "^^"; break;                  case 31: text = "^_"; break;              }
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: switch (i)              {                  case 0: text = "^@"; break;                  case 1: text = "^A"; break;                  case 2: text = "^B"; break;                  case 3: text = "^C"; break;                  case 4: text = "^D"; break;                  case 5: text = "^E"; break;                  case 6: text = "^F"; break;                  case 7: text = "^G"; break;                  case 8: text = "^H"; break;                  case 9: text = "^I"; break;                  case 10: text = "^J"; break;                  case 11: text = "^K"; break;                  case 12: text = "^L"; break;                  case 13: text = "^M"; break;                  case 14: text = "^N"; break;                  case 15: text = "^O"; break;                  case 16: text = "^P"; break;                  case 17: text = "^Q"; break;                  case 18: text = "^R"; break;                  case 19: text = "^S"; break;                  case 20: text = "^T"; break;                  case 21: text = "^U"; break;                  case 22: text = "^V"; break;                  case 23: text = "^W"; break;                  case 24: text = "^X"; break;                  case 25: text = "^Y"; break;                  case 26: text = "^Z"; break;                  case 27: text = "^["; break;                  case 28: text = "^\\"; break;                  case 29: text = "^]"; break;                  case 30: text = "^^"; break;                  case 31: text = "^_"; break;              }
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: switch (i)              {                  case 0: text = "^@"; break;                  case 1: text = "^A"; break;                  case 2: text = "^B"; break;                  case 3: text = "^C"; break;                  case 4: text = "^D"; break;                  case 5: text = "^E"; break;                  case 6: text = "^F"; break;                  case 7: text = "^G"; break;                  case 8: text = "^H"; break;                  case 9: text = "^I"; break;                  case 10: text = "^J"; break;                  case 11: text = "^K"; break;                  case 12: text = "^L"; break;                  case 13: text = "^M"; break;                  case 14: text = "^N"; break;                  case 15: text = "^O"; break;                  case 16: text = "^P"; break;                  case 17: text = "^Q"; break;                  case 18: text = "^R"; break;                  case 19: text = "^S"; break;                  case 20: text = "^T"; break;                  case 21: text = "^U"; break;                  case 22: text = "^V"; break;                  case 23: text = "^W"; break;                  case 24: text = "^X"; break;                  case 25: text = "^Y"; break;                  case 26: text = "^Z"; break;                  case 27: text = "^["; break;                  case 28: text = "^\\"; break;                  case 29: text = "^]"; break;                  case 30: text = "^^"; break;                  case 31: text = "^_"; break;              }
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: switch (i)              {                  case 0: text = "^@"; break;                  case 1: text = "^A"; break;                  case 2: text = "^B"; break;                  case 3: text = "^C"; break;                  case 4: text = "^D"; break;                  case 5: text = "^E"; break;                  case 6: text = "^F"; break;                  case 7: text = "^G"; break;                  case 8: text = "^H"; break;                  case 9: text = "^I"; break;                  case 10: text = "^J"; break;                  case 11: text = "^K"; break;                  case 12: text = "^L"; break;                  case 13: text = "^M"; break;                  case 14: text = "^N"; break;                  case 15: text = "^O"; break;                  case 16: text = "^P"; break;                  case 17: text = "^Q"; break;                  case 18: text = "^R"; break;                  case 19: text = "^S"; break;                  case 20: text = "^T"; break;                  case 21: text = "^U"; break;                  case 22: text = "^V"; break;                  case 23: text = "^W"; break;                  case 24: text = "^X"; break;                  case 25: text = "^Y"; break;                  case 26: text = "^Z"; break;                  case 27: text = "^["; break;                  case 28: text = "^\\"; break;                  case 29: text = "^]"; break;                  case 30: text = "^^"; break;                  case 31: text = "^_"; break;              }
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: switch (i)              {                  case 0: text = "^@"; break;                  case 1: text = "^A"; break;                  case 2: text = "^B"; break;                  case 3: text = "^C"; break;                  case 4: text = "^D"; break;                  case 5: text = "^E"; break;                  case 6: text = "^F"; break;                  case 7: text = "^G"; break;                  case 8: text = "^H"; break;                  case 9: text = "^I"; break;                  case 10: text = "^J"; break;                  case 11: text = "^K"; break;                  case 12: text = "^L"; break;                  case 13: text = "^M"; break;                  case 14: text = "^N"; break;                  case 15: text = "^O"; break;                  case 16: text = "^P"; break;                  case 17: text = "^Q"; break;                  case 18: text = "^R"; break;                  case 19: text = "^S"; break;                  case 20: text = "^T"; break;                  case 21: text = "^U"; break;                  case 22: text = "^V"; break;                  case 23: text = "^W"; break;                  case 24: text = "^X"; break;                  case 25: text = "^Y"; break;                  case 26: text = "^Z"; break;                  case 27: text = "^["; break;                  case 28: text = "^\\"; break;                  case 29: text = "^]"; break;                  case 30: text = "^^"; break;                  case 31: text = "^_"; break;              }
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: switch (i)              {                  case 0: text = "^@"; break;                  case 1: text = "^A"; break;                  case 2: text = "^B"; break;                  case 3: text = "^C"; break;                  case 4: text = "^D"; break;                  case 5: text = "^E"; break;                  case 6: text = "^F"; break;                  case 7: text = "^G"; break;                  case 8: text = "^H"; break;                  case 9: text = "^I"; break;                  case 10: text = "^J"; break;                  case 11: text = "^K"; break;                  case 12: text = "^L"; break;                  case 13: text = "^M"; break;                  case 14: text = "^N"; break;                  case 15: text = "^O"; break;                  case 16: text = "^P"; break;                  case 17: text = "^Q"; break;                  case 18: text = "^R"; break;                  case 19: text = "^S"; break;                  case 20: text = "^T"; break;                  case 21: text = "^U"; break;                  case 22: text = "^V"; break;                  case 23: text = "^W"; break;                  case 24: text = "^X"; break;                  case 25: text = "^Y"; break;                  case 26: text = "^Z"; break;                  case 27: text = "^["; break;                  case 28: text = "^\\"; break;                  case 29: text = "^]"; break;                  case 30: text = "^^"; break;                  case 31: text = "^_"; break;              }
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: switch (i)              {                  case 0: text = "^@"; break;                  case 1: text = "^A"; break;                  case 2: text = "^B"; break;                  case 3: text = "^C"; break;                  case 4: text = "^D"; break;                  case 5: text = "^E"; break;                  case 6: text = "^F"; break;                  case 7: text = "^G"; break;                  case 8: text = "^H"; break;                  case 9: text = "^I"; break;                  case 10: text = "^J"; break;                  case 11: text = "^K"; break;                  case 12: text = "^L"; break;                  case 13: text = "^M"; break;                  case 14: text = "^N"; break;                  case 15: text = "^O"; break;                  case 16: text = "^P"; break;                  case 17: text = "^Q"; break;                  case 18: text = "^R"; break;                  case 19: text = "^S"; break;                  case 20: text = "^T"; break;                  case 21: text = "^U"; break;                  case 22: text = "^V"; break;                  case 23: text = "^W"; break;                  case 24: text = "^X"; break;                  case 25: text = "^Y"; break;                  case 26: text = "^Z"; break;                  case 27: text = "^["; break;                  case 28: text = "^\\"; break;                  case 29: text = "^]"; break;                  case 30: text = "^^"; break;                  case 31: text = "^_"; break;              }
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: switch (i)              {                  case 0: text = "^@"; break;                  case 1: text = "^A"; break;                  case 2: text = "^B"; break;                  case 3: text = "^C"; break;                  case 4: text = "^D"; break;                  case 5: text = "^E"; break;                  case 6: text = "^F"; break;                  case 7: text = "^G"; break;                  case 8: text = "^H"; break;                  case 9: text = "^I"; break;                  case 10: text = "^J"; break;                  case 11: text = "^K"; break;                  case 12: text = "^L"; break;                  case 13: text = "^M"; break;                  case 14: text = "^N"; break;                  case 15: text = "^O"; break;                  case 16: text = "^P"; break;                  case 17: text = "^Q"; break;                  case 18: text = "^R"; break;                  case 19: text = "^S"; break;                  case 20: text = "^T"; break;                  case 21: text = "^U"; break;                  case 22: text = "^V"; break;                  case 23: text = "^W"; break;                  case 24: text = "^X"; break;                  case 25: text = "^Y"; break;                  case 26: text = "^Z"; break;                  case 27: text = "^["; break;                  case 28: text = "^\\"; break;                  case 29: text = "^]"; break;                  case 30: text = "^^"; break;                  case 31: text = "^_"; break;              }
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: switch (i)              {                  case 0: text = "^@"; break;                  case 1: text = "^A"; break;                  case 2: text = "^B"; break;                  case 3: text = "^C"; break;                  case 4: text = "^D"; break;                  case 5: text = "^E"; break;                  case 6: text = "^F"; break;                  case 7: text = "^G"; break;                  case 8: text = "^H"; break;                  case 9: text = "^I"; break;                  case 10: text = "^J"; break;                  case 11: text = "^K"; break;                  case 12: text = "^L"; break;                  case 13: text = "^M"; break;                  case 14: text = "^N"; break;                  case 15: text = "^O"; break;                  case 16: text = "^P"; break;                  case 17: text = "^Q"; break;                  case 18: text = "^R"; break;                  case 19: text = "^S"; break;                  case 20: text = "^T"; break;                  case 21: text = "^U"; break;                  case 22: text = "^V"; break;                  case 23: text = "^W"; break;                  case 24: text = "^X"; break;                  case 25: text = "^Y"; break;                  case 26: text = "^Z"; break;                  case 27: text = "^["; break;                  case 28: text = "^\\"; break;                  case 29: text = "^]"; break;                  case 30: text = "^^"; break;                  case 31: text = "^_"; break;              }
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: switch (i)              {                  case 0: text = "^@"; break;                  case 1: text = "^A"; break;                  case 2: text = "^B"; break;                  case 3: text = "^C"; break;                  case 4: text = "^D"; break;                  case 5: text = "^E"; break;                  case 6: text = "^F"; break;                  case 7: text = "^G"; break;                  case 8: text = "^H"; break;                  case 9: text = "^I"; break;                  case 10: text = "^J"; break;                  case 11: text = "^K"; break;                  case 12: text = "^L"; break;                  case 13: text = "^M"; break;                  case 14: text = "^N"; break;                  case 15: text = "^O"; break;                  case 16: text = "^P"; break;                  case 17: text = "^Q"; break;                  case 18: text = "^R"; break;                  case 19: text = "^S"; break;                  case 20: text = "^T"; break;                  case 21: text = "^U"; break;                  case 22: text = "^V"; break;                  case 23: text = "^W"; break;                  case 24: text = "^X"; break;                  case 25: text = "^Y"; break;                  case 26: text = "^Z"; break;                  case 27: text = "^["; break;                  case 28: text = "^\\"; break;                  case 29: text = "^]"; break;                  case 30: text = "^^"; break;                  case 31: text = "^_"; break;              }
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: switch (i)              {                  case 0: text = "^@"; break;                  case 1: text = "^A"; break;                  case 2: text = "^B"; break;                  case 3: text = "^C"; break;                  case 4: text = "^D"; break;                  case 5: text = "^E"; break;                  case 6: text = "^F"; break;                  case 7: text = "^G"; break;                  case 8: text = "^H"; break;                  case 9: text = "^I"; break;                  case 10: text = "^J"; break;                  case 11: text = "^K"; break;                  case 12: text = "^L"; break;                  case 13: text = "^M"; break;                  case 14: text = "^N"; break;                  case 15: text = "^O"; break;                  case 16: text = "^P"; break;                  case 17: text = "^Q"; break;                  case 18: text = "^R"; break;                  case 19: text = "^S"; break;                  case 20: text = "^T"; break;                  case 21: text = "^U"; break;                  case 22: text = "^V"; break;                  case 23: text = "^W"; break;                  case 24: text = "^X"; break;                  case 25: text = "^Y"; break;                  case 26: text = "^Z"; break;                  case 27: text = "^["; break;                  case 28: text = "^\\"; break;                  case 29: text = "^]"; break;                  case 30: text = "^^"; break;                  case 31: text = "^_"; break;              }
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: switch (i)              {                  case 0: text = "^@"; break;                  case 1: text = "^A"; break;                  case 2: text = "^B"; break;                  case 3: text = "^C"; break;                  case 4: text = "^D"; break;                  case 5: text = "^E"; break;                  case 6: text = "^F"; break;                  case 7: text = "^G"; break;                  case 8: text = "^H"; break;                  case 9: text = "^I"; break;                  case 10: text = "^J"; break;                  case 11: text = "^K"; break;                  case 12: text = "^L"; break;                  case 13: text = "^M"; break;                  case 14: text = "^N"; break;                  case 15: text = "^O"; break;                  case 16: text = "^P"; break;                  case 17: text = "^Q"; break;                  case 18: text = "^R"; break;                  case 19: text = "^S"; break;                  case 20: text = "^T"; break;                  case 21: text = "^U"; break;                  case 22: text = "^V"; break;                  case 23: text = "^W"; break;                  case 24: text = "^X"; break;                  case 25: text = "^Y"; break;                  case 26: text = "^Z"; break;                  case 27: text = "^["; break;                  case 28: text = "^\\"; break;                  case 29: text = "^]"; break;                  case 30: text = "^^"; break;                  case 31: text = "^_"; break;              }
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: switch (i)              {                  case 0: text = "^@"; break;                  case 1: text = "^A"; break;                  case 2: text = "^B"; break;                  case 3: text = "^C"; break;                  case 4: text = "^D"; break;                  case 5: text = "^E"; break;                  case 6: text = "^F"; break;                  case 7: text = "^G"; break;                  case 8: text = "^H"; break;                  case 9: text = "^I"; break;                  case 10: text = "^J"; break;                  case 11: text = "^K"; break;                  case 12: text = "^L"; break;                  case 13: text = "^M"; break;                  case 14: text = "^N"; break;                  case 15: text = "^O"; break;                  case 16: text = "^P"; break;                  case 17: text = "^Q"; break;                  case 18: text = "^R"; break;                  case 19: text = "^S"; break;                  case 20: text = "^T"; break;                  case 21: text = "^U"; break;                  case 22: text = "^V"; break;                  case 23: text = "^W"; break;                  case 24: text = "^X"; break;                  case 25: text = "^Y"; break;                  case 26: text = "^Z"; break;                  case 27: text = "^["; break;                  case 28: text = "^\\"; break;                  case 29: text = "^]"; break;                  case 30: text = "^^"; break;                  case 31: text = "^_"; break;              }
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: switch (i)              {                  case 0: text = "^@"; break;                  case 1: text = "^A"; break;                  case 2: text = "^B"; break;                  case 3: text = "^C"; break;                  case 4: text = "^D"; break;                  case 5: text = "^E"; break;                  case 6: text = "^F"; break;                  case 7: text = "^G"; break;                  case 8: text = "^H"; break;                  case 9: text = "^I"; break;                  case 10: text = "^J"; break;                  case 11: text = "^K"; break;                  case 12: text = "^L"; break;                  case 13: text = "^M"; break;                  case 14: text = "^N"; break;                  case 15: text = "^O"; break;                  case 16: text = "^P"; break;                  case 17: text = "^Q"; break;                  case 18: text = "^R"; break;                  case 19: text = "^S"; break;                  case 20: text = "^T"; break;                  case 21: text = "^U"; break;                  case 22: text = "^V"; break;                  case 23: text = "^W"; break;                  case 24: text = "^X"; break;                  case 25: text = "^Y"; break;                  case 26: text = "^Z"; break;                  case 27: text = "^["; break;                  case 28: text = "^\\"; break;                  case 29: text = "^]"; break;                  case 30: text = "^^"; break;                  case 31: text = "^_"; break;              }
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: switch (i)              {                  case 0: text = "^@"; break;                  case 1: text = "^A"; break;                  case 2: text = "^B"; break;                  case 3: text = "^C"; break;                  case 4: text = "^D"; break;                  case 5: text = "^E"; break;                  case 6: text = "^F"; break;                  case 7: text = "^G"; break;                  case 8: text = "^H"; break;                  case 9: text = "^I"; break;                  case 10: text = "^J"; break;                  case 11: text = "^K"; break;                  case 12: text = "^L"; break;                  case 13: text = "^M"; break;                  case 14: text = "^N"; break;                  case 15: text = "^O"; break;                  case 16: text = "^P"; break;                  case 17: text = "^Q"; break;                  case 18: text = "^R"; break;                  case 19: text = "^S"; break;                  case 20: text = "^T"; break;                  case 21: text = "^U"; break;                  case 22: text = "^V"; break;                  case 23: text = "^W"; break;                  case 24: text = "^X"; break;                  case 25: text = "^Y"; break;                  case 26: text = "^Z"; break;                  case 27: text = "^["; break;                  case 28: text = "^\\"; break;                  case 29: text = "^]"; break;                  case 30: text = "^^"; break;                  case 31: text = "^_"; break;              }
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: switch (i)              {                  case 0: text = "^@"; break;                  case 1: text = "^A"; break;                  case 2: text = "^B"; break;                  case 3: text = "^C"; break;                  case 4: text = "^D"; break;                  case 5: text = "^E"; break;                  case 6: text = "^F"; break;                  case 7: text = "^G"; break;                  case 8: text = "^H"; break;                  case 9: text = "^I"; break;                  case 10: text = "^J"; break;                  case 11: text = "^K"; break;                  case 12: text = "^L"; break;                  case 13: text = "^M"; break;                  case 14: text = "^N"; break;                  case 15: text = "^O"; break;                  case 16: text = "^P"; break;                  case 17: text = "^Q"; break;                  case 18: text = "^R"; break;                  case 19: text = "^S"; break;                  case 20: text = "^T"; break;                  case 21: text = "^U"; break;                  case 22: text = "^V"; break;                  case 23: text = "^W"; break;                  case 24: text = "^X"; break;                  case 25: text = "^Y"; break;                  case 26: text = "^Z"; break;                  case 27: text = "^["; break;                  case 28: text = "^\\"; break;                  case 29: text = "^]"; break;                  case 30: text = "^^"; break;                  case 31: text = "^_"; break;              }
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: switch (i)              {                  case 0: text = "^@"; break;                  case 1: text = "^A"; break;                  case 2: text = "^B"; break;                  case 3: text = "^C"; break;                  case 4: text = "^D"; break;                  case 5: text = "^E"; break;                  case 6: text = "^F"; break;                  case 7: text = "^G"; break;                  case 8: text = "^H"; break;                  case 9: text = "^I"; break;                  case 10: text = "^J"; break;                  case 11: text = "^K"; break;                  case 12: text = "^L"; break;                  case 13: text = "^M"; break;                  case 14: text = "^N"; break;                  case 15: text = "^O"; break;                  case 16: text = "^P"; break;                  case 17: text = "^Q"; break;                  case 18: text = "^R"; break;                  case 19: text = "^S"; break;                  case 20: text = "^T"; break;                  case 21: text = "^U"; break;                  case 22: text = "^V"; break;                  case 23: text = "^W"; break;                  case 24: text = "^X"; break;                  case 25: text = "^Y"; break;                  case 26: text = "^Z"; break;                  case 27: text = "^["; break;                  case 28: text = "^\\"; break;                  case 29: text = "^]"; break;                  case 30: text = "^^"; break;                  case 31: text = "^_"; break;              }
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: switch (i)              {                  case 0: text = "^@"; break;                  case 1: text = "^A"; break;                  case 2: text = "^B"; break;                  case 3: text = "^C"; break;                  case 4: text = "^D"; break;                  case 5: text = "^E"; break;                  case 6: text = "^F"; break;                  case 7: text = "^G"; break;                  case 8: text = "^H"; break;                  case 9: text = "^I"; break;                  case 10: text = "^J"; break;                  case 11: text = "^K"; break;                  case 12: text = "^L"; break;                  case 13: text = "^M"; break;                  case 14: text = "^N"; break;                  case 15: text = "^O"; break;                  case 16: text = "^P"; break;                  case 17: text = "^Q"; break;                  case 18: text = "^R"; break;                  case 19: text = "^S"; break;                  case 20: text = "^T"; break;                  case 21: text = "^U"; break;                  case 22: text = "^V"; break;                  case 23: text = "^W"; break;                  case 24: text = "^X"; break;                  case 25: text = "^Y"; break;                  case 26: text = "^Z"; break;                  case 27: text = "^["; break;                  case 28: text = "^\\"; break;                  case 29: text = "^]"; break;                  case 30: text = "^^"; break;                  case 31: text = "^_"; break;              }
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: switch (i)              {                  case 0: text = "^@"; break;                  case 1: text = "^A"; break;                  case 2: text = "^B"; break;                  case 3: text = "^C"; break;                  case 4: text = "^D"; break;                  case 5: text = "^E"; break;                  case 6: text = "^F"; break;                  case 7: text = "^G"; break;                  case 8: text = "^H"; break;                  case 9: text = "^I"; break;                  case 10: text = "^J"; break;                  case 11: text = "^K"; break;                  case 12: text = "^L"; break;                  case 13: text = "^M"; break;                  case 14: text = "^N"; break;                  case 15: text = "^O"; break;                  case 16: text = "^P"; break;                  case 17: text = "^Q"; break;                  case 18: text = "^R"; break;                  case 19: text = "^S"; break;                  case 20: text = "^T"; break;                  case 21: text = "^U"; break;                  case 22: text = "^V"; break;                  case 23: text = "^W"; break;                  case 24: text = "^X"; break;                  case 25: text = "^Y"; break;                  case 26: text = "^Z"; break;                  case 27: text = "^["; break;                  case 28: text = "^\\"; break;                  case 29: text = "^]"; break;                  case 30: text = "^^"; break;                  case 31: text = "^_"; break;              }
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: switch (i)              {                  case 0: text = "^@"; break;                  case 1: text = "^A"; break;                  case 2: text = "^B"; break;                  case 3: text = "^C"; break;                  case 4: text = "^D"; break;                  case 5: text = "^E"; break;                  case 6: text = "^F"; break;                  case 7: text = "^G"; break;                  case 8: text = "^H"; break;                  case 9: text = "^I"; break;                  case 10: text = "^J"; break;                  case 11: text = "^K"; break;                  case 12: text = "^L"; break;                  case 13: text = "^M"; break;                  case 14: text = "^N"; break;                  case 15: text = "^O"; break;                  case 16: text = "^P"; break;                  case 17: text = "^Q"; break;                  case 18: text = "^R"; break;                  case 19: text = "^S"; break;                  case 20: text = "^T"; break;                  case 21: text = "^U"; break;                  case 22: text = "^V"; break;                  case 23: text = "^W"; break;                  case 24: text = "^X"; break;                  case 25: text = "^Y"; break;                  case 26: text = "^Z"; break;                  case 27: text = "^["; break;                  case 28: text = "^\\"; break;                  case 29: text = "^]"; break;                  case 30: text = "^^"; break;                  case 31: text = "^_"; break;              }
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: switch (i)              {                  case 0: text = "^@"; break;                  case 1: text = "^A"; break;                  case 2: text = "^B"; break;                  case 3: text = "^C"; break;                  case 4: text = "^D"; break;                  case 5: text = "^E"; break;                  case 6: text = "^F"; break;                  case 7: text = "^G"; break;                  case 8: text = "^H"; break;                  case 9: text = "^I"; break;                  case 10: text = "^J"; break;                  case 11: text = "^K"; break;                  case 12: text = "^L"; break;                  case 13: text = "^M"; break;                  case 14: text = "^N"; break;                  case 15: text = "^O"; break;                  case 16: text = "^P"; break;                  case 17: text = "^Q"; break;                  case 18: text = "^R"; break;                  case 19: text = "^S"; break;                  case 20: text = "^T"; break;                  case 21: text = "^U"; break;                  case 22: text = "^V"; break;                  case 23: text = "^W"; break;                  case 24: text = "^X"; break;                  case 25: text = "^Y"; break;                  case 26: text = "^Z"; break;                  case 27: text = "^["; break;                  case 28: text = "^\\"; break;                  case 29: text = "^]"; break;                  case 30: text = "^^"; break;                  case 31: text = "^_"; break;              }
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: switch (i)              {                  case 0: text = "^@"; break;                  case 1: text = "^A"; break;                  case 2: text = "^B"; break;                  case 3: text = "^C"; break;                  case 4: text = "^D"; break;                  case 5: text = "^E"; break;                  case 6: text = "^F"; break;                  case 7: text = "^G"; break;                  case 8: text = "^H"; break;                  case 9: text = "^I"; break;                  case 10: text = "^J"; break;                  case 11: text = "^K"; break;                  case 12: text = "^L"; break;                  case 13: text = "^M"; break;                  case 14: text = "^N"; break;                  case 15: text = "^O"; break;                  case 16: text = "^P"; break;                  case 17: text = "^Q"; break;                  case 18: text = "^R"; break;                  case 19: text = "^S"; break;                  case 20: text = "^T"; break;                  case 21: text = "^U"; break;                  case 22: text = "^V"; break;                  case 23: text = "^W"; break;                  case 24: text = "^X"; break;                  case 25: text = "^Y"; break;                  case 26: text = "^Z"; break;                  case 27: text = "^["; break;                  case 28: text = "^\\"; break;                  case 29: text = "^]"; break;                  case 30: text = "^^"; break;                  case 31: text = "^_"; break;              }
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: switch (i)              {                  case 0: text = "^@"; break;                  case 1: text = "^A"; break;                  case 2: text = "^B"; break;                  case 3: text = "^C"; break;                  case 4: text = "^D"; break;                  case 5: text = "^E"; break;                  case 6: text = "^F"; break;                  case 7: text = "^G"; break;                  case 8: text = "^H"; break;                  case 9: text = "^I"; break;                  case 10: text = "^J"; break;                  case 11: text = "^K"; break;                  case 12: text = "^L"; break;                  case 13: text = "^M"; break;                  case 14: text = "^N"; break;                  case 15: text = "^O"; break;                  case 16: text = "^P"; break;                  case 17: text = "^Q"; break;                  case 18: text = "^R"; break;                  case 19: text = "^S"; break;                  case 20: text = "^T"; break;                  case 21: text = "^U"; break;                  case 22: text = "^V"; break;                  case 23: text = "^W"; break;                  case 24: text = "^X"; break;                  case 25: text = "^Y"; break;                  case 26: text = "^Z"; break;                  case 27: text = "^["; break;                  case 28: text = "^\\"; break;                  case 29: text = "^]"; break;                  case 30: text = "^^"; break;                  case 31: text = "^_"; break;              }
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: switch (i)              {                  case 0: text = "^@"; break;                  case 1: text = "^A"; break;                  case 2: text = "^B"; break;                  case 3: text = "^C"; break;                  case 4: text = "^D"; break;                  case 5: text = "^E"; break;                  case 6: text = "^F"; break;                  case 7: text = "^G"; break;                  case 8: text = "^H"; break;                  case 9: text = "^I"; break;                  case 10: text = "^J"; break;                  case 11: text = "^K"; break;                  case 12: text = "^L"; break;                  case 13: text = "^M"; break;                  case 14: text = "^N"; break;                  case 15: text = "^O"; break;                  case 16: text = "^P"; break;                  case 17: text = "^Q"; break;                  case 18: text = "^R"; break;                  case 19: text = "^S"; break;                  case 20: text = "^T"; break;                  case 21: text = "^U"; break;                  case 22: text = "^V"; break;                  case 23: text = "^W"; break;                  case 24: text = "^X"; break;                  case 25: text = "^Y"; break;                  case 26: text = "^Z"; break;                  case 27: text = "^["; break;                  case 28: text = "^\\"; break;                  case 29: text = "^]"; break;                  case 30: text = "^^"; break;                  case 31: text = "^_"; break;              }
Magic Number,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following statement contains a magic number: switch (i)              {                  case 0: text = "^@"; break;                  case 1: text = "^A"; break;                  case 2: text = "^B"; break;                  case 3: text = "^C"; break;                  case 4: text = "^D"; break;                  case 5: text = "^E"; break;                  case 6: text = "^F"; break;                  case 7: text = "^G"; break;                  case 8: text = "^H"; break;                  case 9: text = "^I"; break;                  case 10: text = "^J"; break;                  case 11: text = "^K"; break;                  case 12: text = "^L"; break;                  case 13: text = "^M"; break;                  case 14: text = "^N"; break;                  case 15: text = "^O"; break;                  case 16: text = "^P"; break;                  case 17: text = "^Q"; break;                  case 18: text = "^R"; break;                  case 19: text = "^S"; break;                  case 20: text = "^T"; break;                  case 21: text = "^U"; break;                  case 22: text = "^V"; break;                  case 23: text = "^W"; break;                  case 24: text = "^X"; break;                  case 25: text = "^Y"; break;                  case 26: text = "^Z"; break;                  case 27: text = "^["; break;                  case 28: text = "^\\"; break;                  case 29: text = "^]"; break;                  case 30: text = "^^"; break;                  case 31: text = "^_"; break;              }
Magic Number,Vim.UI.Wpf.Implementation.CommandMargin,CommandMarginController,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CommandMargin\CommandMarginController.cs,UpdateForPasteWait,The following statement contains a magic number: if (e.Changes.Count == 1 && command.Length > 0)              {                  var change = e.Changes.First();                  if (change.AddedLength == 1)                  {                      // If we are in a paste wait context then attempt to complete it by passing on the                       // typed char to _vimBuffer.  This will process it as the register                      var c = command[change.Offset];                      var keyInput = KeyInputUtil.CharToKeyInput(c);                      _vimBuffer.Process(keyInput);                        // Now we need to update the command line.  During edits the controller is responsible                      // for manually updating the command line state.  Also we have to keep the caret postion                      // correct                      var name = RegisterName.OfChar('c');                      if (name.IsSome())                      {                          var toPaste = _vimBuffer.GetRegister(name.Value).StringValue;                          var builder = new StringBuilder();                          builder.Append(command' 0' change.Offset);                          builder.Append(toPaste);                          builder.Append(command' change.Offset + 2' command.Length - (change.Offset + 2));                          _margin.CommandLineTextBox.Text = builder.ToString();                          _margin.CommandLineTextBox.Select(change.Offset + toPaste.Length' 0);                      }                        return;                  }              }
Magic Number,Vim.UI.Wpf.Implementation.CommandMargin,CommandMarginController,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CommandMargin\CommandMarginController.cs,UpdateForPasteWait,The following statement contains a magic number: if (e.Changes.Count == 1 && command.Length > 0)              {                  var change = e.Changes.First();                  if (change.AddedLength == 1)                  {                      // If we are in a paste wait context then attempt to complete it by passing on the                       // typed char to _vimBuffer.  This will process it as the register                      var c = command[change.Offset];                      var keyInput = KeyInputUtil.CharToKeyInput(c);                      _vimBuffer.Process(keyInput);                        // Now we need to update the command line.  During edits the controller is responsible                      // for manually updating the command line state.  Also we have to keep the caret postion                      // correct                      var name = RegisterName.OfChar('c');                      if (name.IsSome())                      {                          var toPaste = _vimBuffer.GetRegister(name.Value).StringValue;                          var builder = new StringBuilder();                          builder.Append(command' 0' change.Offset);                          builder.Append(toPaste);                          builder.Append(command' change.Offset + 2' command.Length - (change.Offset + 2));                          _margin.CommandLineTextBox.Text = builder.ToString();                          _margin.CommandLineTextBox.Select(change.Offset + toPaste.Length' 0);                      }                        return;                  }              }
Magic Number,Vim.UI.Wpf.Implementation.CommandMargin,CommandMarginControl,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CommandMargin\CommandMarginControl.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.commandMarginControl = ((Vim.UI.Wpf.Implementation.CommandMargin.CommandMarginControl)(target));              return;              case 2:              this._commandLineInput = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,Vim.UI.Wpf.Implementation.BlockCaret,BlockCaretController,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\BlockCaret\BlockCaretController.cs,UpdateCaretOpacity,The following statement contains a magic number: if (value >= 0 && value <= 100)              {                  var opacity = ((double)value / 100);                  _blockCaret.CaretOpacity = opacity;              }
Magic Number,Vim.UI.Wpf.Implementation.BlockCaret,BlockCaretController,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\BlockCaret\BlockCaretController.cs,UpdateCaretOpacity,The following statement contains a magic number: if (value >= 0 && value <= 100)              {                  var opacity = ((double)value / 100);                  _blockCaret.CaretOpacity = opacity;              }
Magic Number,Vim.UI.Wpf.Implementation.BlockCaret,BlockCaret,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\BlockCaret\BlockCaret.cs,CreateBlinkTimer,The following statement contains a magic number: try              {                  var blinkTimer = new DispatcherTimer(                      caretBlinkTimeSpan'                      DispatcherPriority.Normal'                      protectedOperations.GetProtectedEventHandler(onCaretBlinkTimer)'                      Dispatcher.CurrentDispatcher)                  {                      IsEnabled = caretBlinkTime != null                  };                  return blinkTimer;              }              catch (ArgumentOutOfRangeException)              {                  // Hit the bug ... just create a simple timer with a default interval.                  VimTrace.TraceError("Error creating BlockCaret DispatcherTimer");                  var blinkTimer = new DispatcherTimer(                      TimeSpan.FromSeconds(2)'                      DispatcherPriority.Normal'                      protectedOperations.GetProtectedEventHandler(onCaretBlinkTimer)'                      Dispatcher.CurrentDispatcher)                  {                      IsEnabled = true                  };                  return blinkTimer;              }
Magic Number,Vim.UI.Wpf.Implementation.BlockCaret,BlockCaret,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\BlockCaret\BlockCaret.cs,CalculateCaretRectAndDisplayOffset,The following statement contains a magic number: switch (_caretDisplay)              {                  case CaretDisplay.Block:                      return Tuple.Create(new Rect(GetRealCaretVisualPoint()' CalculateCaretSize())' 0d);                  case CaretDisplay.HalfBlock:                      {                          var size = CalculateCaretSize();                          size = new Size(size.Width' size.Height / 2);                            var point = GetRealCaretVisualPoint();                          point = new Point(point.X' point.Y + size.Height);                          return Tuple.Create(new Rect(point' size)' size.Height);                      }                  case CaretDisplay.QuarterBlock:                      {                          var size = CalculateCaretSize();                          var quarter = size.Height / 4;                          size = new Size(size.Width' quarter);                            var point = GetRealCaretVisualPoint();                          var offset = quarter * 3;                          point = new Point(point.X' point.Y + offset);                          return Tuple.Create(new Rect(point' size)' offset);                      }                  case CaretDisplay.Select:                      {                          var size = new Size(_textView.Caret.Width' _textView.Caret.Height);                          var point = GetRealCaretVisualPoint();                          return Tuple.Create(new Rect(point' size)' 0d);                      }                  case CaretDisplay.Invisible:                  case CaretDisplay.NormalCaret:                      return Tuple.Create(new Rect(GetRealCaretVisualPoint()' new Size(0' 0))' 0d);                    default:                      throw new InvalidOperationException("Invalid enum value");              }
Magic Number,Vim.UI.Wpf.Implementation.BlockCaret,BlockCaret,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\BlockCaret\BlockCaret.cs,CalculateCaretRectAndDisplayOffset,The following statement contains a magic number: switch (_caretDisplay)              {                  case CaretDisplay.Block:                      return Tuple.Create(new Rect(GetRealCaretVisualPoint()' CalculateCaretSize())' 0d);                  case CaretDisplay.HalfBlock:                      {                          var size = CalculateCaretSize();                          size = new Size(size.Width' size.Height / 2);                            var point = GetRealCaretVisualPoint();                          point = new Point(point.X' point.Y + size.Height);                          return Tuple.Create(new Rect(point' size)' size.Height);                      }                  case CaretDisplay.QuarterBlock:                      {                          var size = CalculateCaretSize();                          var quarter = size.Height / 4;                          size = new Size(size.Width' quarter);                            var point = GetRealCaretVisualPoint();                          var offset = quarter * 3;                          point = new Point(point.X' point.Y + offset);                          return Tuple.Create(new Rect(point' size)' offset);                      }                  case CaretDisplay.Select:                      {                          var size = new Size(_textView.Caret.Width' _textView.Caret.Height);                          var point = GetRealCaretVisualPoint();                          return Tuple.Create(new Rect(point' size)' 0d);                      }                  case CaretDisplay.Invisible:                  case CaretDisplay.NormalCaret:                      return Tuple.Create(new Rect(GetRealCaretVisualPoint()' new Size(0' 0))' 0d);                    default:                      throw new InvalidOperationException("Invalid enum value");              }
Magic Number,Vim.UI.Wpf.Implementation.BlockCaret,BlockCaret,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\BlockCaret\BlockCaret.cs,CalculateCaretRectAndDisplayOffset,The following statement contains a magic number: switch (_caretDisplay)              {                  case CaretDisplay.Block:                      return Tuple.Create(new Rect(GetRealCaretVisualPoint()' CalculateCaretSize())' 0d);                  case CaretDisplay.HalfBlock:                      {                          var size = CalculateCaretSize();                          size = new Size(size.Width' size.Height / 2);                            var point = GetRealCaretVisualPoint();                          point = new Point(point.X' point.Y + size.Height);                          return Tuple.Create(new Rect(point' size)' size.Height);                      }                  case CaretDisplay.QuarterBlock:                      {                          var size = CalculateCaretSize();                          var quarter = size.Height / 4;                          size = new Size(size.Width' quarter);                            var point = GetRealCaretVisualPoint();                          var offset = quarter * 3;                          point = new Point(point.X' point.Y + offset);                          return Tuple.Create(new Rect(point' size)' offset);                      }                  case CaretDisplay.Select:                      {                          var size = new Size(_textView.Caret.Width' _textView.Caret.Height);                          var point = GetRealCaretVisualPoint();                          return Tuple.Create(new Rect(point' size)' 0d);                      }                  case CaretDisplay.Invisible:                  case CaretDisplay.NormalCaret:                      return Tuple.Create(new Rect(GetRealCaretVisualPoint()' new Size(0' 0))' 0d);                    default:                      throw new InvalidOperationException("Invalid enum value");              }
Magic Number,Vim.UI.Wpf.Implementation.BlockCaret,BlockCaret,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\BlockCaret\BlockCaret.cs,IsAdornmentStale,The following statement contains a magic number: var epsilon = 0.001;
Magic Number,Vim.UI.Wpf.Implementation.Paste,PasteAdornment,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\Paste\PasteAdornment.cs,CreateControl,The following statement contains a magic number: var border = new Border              {                  Opacity = 100'                  Background = Brushes.White'                  Child = textBlock              };
Missing Default,Vim.UI.Wpf,VimHost,C:\repos\jaredpar_VsVim\Src\VimWpf\VimHost.cs,EnsureLineVisible,The following switch statement is missing a default case: switch (textViewLine.VisibilityState)              {                  case VisibilityState.FullyVisible:                      // If the line is fully visible then no scrolling needs to occur                      break;                    case VisibilityState.Hidden:                  case VisibilityState.PartiallyVisible:                      {                          ViewRelativePosition? pos = null;                          if (textViewLine.Height <= textView.ViewportHeight + roundOff)                          {                              // The line fits into the view.  Figure out if it needs to be at the top                               // or the bottom                              pos = textViewLine.Top < textView.ViewportTop                                  ? ViewRelativePosition.Top                                  : ViewRelativePosition.Bottom;                          }                          else if (textViewLine.Bottom < textView.ViewportBottom)                          {                              // Line does not fit into view but we can use more space at the bottom                               // of the view                              pos = ViewRelativePosition.Bottom;                          }                          else if (textViewLine.Top > textView.ViewportTop)                          {                              pos = ViewRelativePosition.Top;                          }                            if (pos.HasValue)                          {                              textView.DisplayTextLineContainingBufferPosition(point' 0.0' pos.Value);                          }                      }                      break;                  case VisibilityState.Unattached:                      {                          var pos = textViewLine.Start < textView.TextViewLines.FormattedSpan.Start && textViewLine.Height <= textView.ViewportHeight + roundOff                                        ? ViewRelativePosition.Top                                        : ViewRelativePosition.Bottom;                          textView.DisplayTextLineContainingBufferPosition(point' 0.0' pos);                      }                      break;              }
Missing Default,Vim.UI.Wpf.Implementation.CharDisplay,ControlCharUtil,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CharDisplay\ControlCharUtil.cs,TryGetDisplayText,The following switch statement is missing a default case: switch (i)              {                  case 0: text = "^@"; break;                  case 1: text = "^A"; break;                  case 2: text = "^B"; break;                  case 3: text = "^C"; break;                  case 4: text = "^D"; break;                  case 5: text = "^E"; break;                  case 6: text = "^F"; break;                  case 7: text = "^G"; break;                  case 8: text = "^H"; break;                  case 9: text = "^I"; break;                  case 10: text = "^J"; break;                  case 11: text = "^K"; break;                  case 12: text = "^L"; break;                  case 13: text = "^M"; break;                  case 14: text = "^N"; break;                  case 15: text = "^O"; break;                  case 16: text = "^P"; break;                  case 17: text = "^Q"; break;                  case 18: text = "^R"; break;                  case 19: text = "^S"; break;                  case 20: text = "^T"; break;                  case 21: text = "^U"; break;                  case 22: text = "^V"; break;                  case 23: text = "^W"; break;                  case 24: text = "^X"; break;                  case 25: text = "^Y"; break;                  case 26: text = "^Z"; break;                  case 27: text = "^["; break;                  case 28: text = "^\\"; break;                  case 29: text = "^]"; break;                  case 30: text = "^^"; break;                  case 31: text = "^_"; break;              }
Missing Default,Vim.UI.Wpf.Implementation.CommandMargin,CommandMarginController,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CommandMargin\CommandMarginController.cs,HandleHistoryNavigation,The following switch statement is missing a default case: switch (_editKind)                  {                      case EditKind.Command:                          UpdateCommandLine(prefixChar.ToString() + _vimBuffer.CommandMode.Command);                          break;                        case EditKind.SearchForward:                      case EditKind.SearchBackward:                          UpdateCommandLine(prefixChar.ToString() + _vimBuffer.IncrementalSearch.CurrentSearchText);                          break;                  }
Missing Default,Vim.UI.Wpf.Implementation.CommandMargin,CommandMarginController,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CommandMargin\CommandMarginController.cs,HandleKeyEvent,The following switch statement is missing a default case: switch (e.Key)              {                  case Key.Escape:                      _vimBuffer.Process(KeyInputUtil.EscapeKey);                      ChangeEditKind(EditKind.None);                      e.Handled = true;                      break;                  case Key.Return:                      ExecuteCommand(_margin.CommandLineTextBox.Text);                      e.Handled = true;                      break;                  case Key.Up:                      e.Handled = HandleHistoryNavigation(KeyInputUtil.VimKeyToKeyInput(VimKey.Up));                      break;                  case Key.Down:                      e.Handled = HandleHistoryNavigation(KeyInputUtil.VimKeyToKeyInput(VimKey.Up));                      break;                  case Key.Home:                      if ((e.KeyboardDevice.Modifiers & ModifierKeys.Shift) == 0)                      {                          _margin.UpdateCaretPosition(EditPosition.Start);                          e.Handled = true;                      }                      break;                  case Key.End:                      if ((e.KeyboardDevice.Modifiers & ModifierKeys.Shift) == 0)                      {                          _margin.UpdateCaretPosition(EditPosition.End);                          e.Handled = true;                      }                      break;                  case Key.Left:                  case Key.Back:                      // Ignore backspace if at start position                      e.Handled = _margin.IsCaretAtStart();                      break;                  case Key.R:                      if (e.KeyboardDevice.Modifiers == ModifierKeys.Control)                      {                          // During edits we are responsible for handling the command line.  Need to                           // put a " into the box at the edit position                          var textBox = _margin.CommandLineTextBox;                          var text = textBox.Text;                          var builder = new StringBuilder();                          var offset = textBox.SelectionStart;                          builder.Append(text' 0' offset);                          builder.Append('"');                          builder.Append(text' offset' text.Length - offset);                          UpdateCommandLine(builder.ToString());                          textBox.Select(offset' 0);                            // Now move the buffer into paste wait                           _vimBuffer.Process(KeyInputUtil.ApplyKeyModifiersToChar('r'' VimKeyModifiers.Control));                      }                      break;                  case Key.U:                      if (e.KeyboardDevice.Modifiers == ModifierKeys.Control)                      {                          var textBox = _margin.CommandLineTextBox;                          var text = textBox.Text.Substring(textBox.SelectionStart);                          textBox.Text = text;                            UpdateVimBufferStateWithCommandText(text);                      }                      break;              }
Missing Default,Vim.UI.Wpf.Implementation.CommandMargin,CommandMarginController,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CommandMargin\CommandMarginController.cs,CheckEnableCommandLineEdit,The following switch statement is missing a default case: switch (args.KeyInput.Key)              {                  case VimKey.Home:                      // Enable command line edition                      ChangeEditKind(commandLineEditKind);                      _margin.UpdateCaretPosition(EditPosition.Start);                      args.Handled = true;                      break;                  case VimKey.Left:                      ChangeEditKind(commandLineEditKind);                      _margin.UpdateCaretPosition(EditPosition.BeforeLastCharacter);                      args.Handled = true;                      break;                  case VimKey.Up:                  case VimKey.Down:                      // User is navigation through history' move caret to the end of the entry                      _margin.UpdateCaretPosition(EditPosition.End);                      break;              }
Missing Default,Vim.UI.Wpf.Implementation.CommandMargin,CommandMarginControl,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\CommandMargin\CommandMarginControl.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.commandMarginControl = ((Vim.UI.Wpf.Implementation.CommandMargin.CommandMarginControl)(target));              return;              case 2:              this._commandLineInput = ((System.Windows.Controls.TextBox)(target));              return;              }
Missing Default,Vim.UI.Wpf.Implementation.BlockCaret,BlockCaretController,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\BlockCaret\BlockCaretController.cs,UpdateCaretDisplay,The following switch statement is missing a default case: switch (_vimBuffer.ModeKind)              {                  case ModeKind.Normal:                      {                          var mode = _vimBuffer.NormalMode;                          if (mode.InReplace)                          {                              kind = CaretDisplay.QuarterBlock;                          }                          else if (mode.KeyRemapMode.IsOperatorPending)                          {                              kind = CaretDisplay.HalfBlock;                          }                          else                          {                              kind = CaretDisplay.Block;                          }                      }                      break;                  case ModeKind.VisualBlock:                  case ModeKind.VisualCharacter:                  case ModeKind.VisualLine:                  case ModeKind.SelectBlock:                  case ModeKind.SelectCharacter:                  case ModeKind.SelectLine:                        // In visual mode we change the caret based on what the selection mode                      // is                      kind = _globalSettings.IsSelectionInclusive                         ? CaretDisplay.Block                         : CaretDisplay.Select;                      break;                  case ModeKind.Command:                  case ModeKind.SubstituteConfirm:                      kind = CaretDisplay.Invisible;                      break;                  case ModeKind.Insert:                  case ModeKind.ExternalEdit:                      kind = CaretDisplay.NormalCaret;                      break;                  case ModeKind.Disabled:                      kind = CaretDisplay.NormalCaret;                      break;                  case ModeKind.Replace:                      kind = CaretDisplay.QuarterBlock;                      break;              }
Missing Default,Vim.UI.Wpf.Implementation.Mouse,VimMouseProcessor,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\Mouse\VimMouseProcessor.cs,PreprocessMouseDown,The following switch statement is missing a default case: switch (e.ChangedButton)              {                  case MouseButton.Left:                      e.Handled = TryProcess(VimKey.LeftMouse);                      break;                  case MouseButton.Middle:                      e.Handled = TryProcess(VimKey.MiddleMouse);                      break;                  case MouseButton.Right:                      e.Handled = TryProcess(VimKey.RightMouse);                      break;                  case MouseButton.XButton1:                      e.Handled = TryProcess(VimKey.X1Mouse);                      break;                  case MouseButton.XButton2:                      e.Handled = TryProcess(VimKey.X2Mouse);                      break;              }
Missing Default,Vim.UI.Wpf.Implementation.Mouse,VimMouseProcessor,C:\repos\jaredpar_VsVim\Src\VimWpf\Implementation\Mouse\VimMouseProcessor.cs,PreprocessMouseUp,The following switch statement is missing a default case: switch (e.ChangedButton)              {                  case MouseButton.Left:                      e.Handled = TryProcess(VimKey.LeftRelease);                      break;                  case MouseButton.Middle:                      e.Handled = TryProcess(VimKey.MiddleRelease);                      break;                  case MouseButton.Right:                      e.Handled = TryProcess(VimKey.RightRelease);                      break;                  case MouseButton.XButton1:                      e.Handled = TryProcess(VimKey.X1Release);                      break;                  case MouseButton.XButton2:                      e.Handled = TryProcess(VimKey.X2Release);                      break;              }
