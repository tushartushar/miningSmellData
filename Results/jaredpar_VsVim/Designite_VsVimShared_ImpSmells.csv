Implementation smell,Namespace,Class,File,Method,Description
Long Method,Vim.VisualStudio,OleCommandUtil,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\OleCommandUtil.cs,TryConvert,The method has 155 lines of code.
Complex Method,Vim.VisualStudio,KeyBinding,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\KeyBinding.cs,TryConvertVsSpecificKey,Cyclomatic complexity of the method is 14
Complex Method,Vim.VisualStudio,OleCommandUtil,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\OleCommandUtil.cs,TryConvert,Cyclomatic complexity of the method is 132
Complex Method,Vim.VisualStudio,OleCommandUtil,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\OleCommandUtil.cs,TryConvert,Cyclomatic complexity of the method is 44
Complex Method,Vim.VisualStudio,OleCommandUtil,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\OleCommandUtil.cs,TryConvert,Cyclomatic complexity of the method is 38
Complex Method,Vim.VisualStudio,OleCommandUtil,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\OleCommandUtil.cs,TryConvert,Cyclomatic complexity of the method is 16
Complex Method,Vim.VisualStudio,VsVimHost,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\VsVimHost.cs,MoveFocus,Cyclomatic complexity of the method is 15
Complex Method,Vim.VisualStudio,VsVimHost,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\VsVimHost.cs,GetWordWrapStyle,Cyclomatic complexity of the method is 12
Complex Method,Vim.VisualStudio.Implementation.Misc,ScopeData,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\ScopeData.cs,TryGetMainScopeNames,Cyclomatic complexity of the method is 9
Complex Method,Vim.VisualStudio.Implementation.Misc,ScopeData,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\ScopeData.cs,TryGetKeyBindingScopeName,Cyclomatic complexity of the method is 8
Complex Method,Vim.VisualStudio.Implementation.Misc,StandardCommandTarget,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\StandardCommandTarget.cs,TryProcessWithBuffer,Cyclomatic complexity of the method is 8
Complex Method,Vim.VisualStudio.Implementation.Misc,StandardCommandTarget,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\StandardCommandTarget.cs,Exec,Cyclomatic complexity of the method is 20
Complex Method,Vim.VisualStudio.Implementation.Misc,StandardCommandTarget,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\StandardCommandTarget.cs,QueryStatus,Cyclomatic complexity of the method is 11
Complex Method,Vim.VisualStudio.Implementation.Misc,KeyBindingService,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\KeyBindingService.cs,FixKeyMappingIssue,Cyclomatic complexity of the method is 12
Complex Method,Vim.VisualStudio.Implementation.OptionPages,DefaultOptionPage,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\OptionPages\DefaultOptionPage.cs,FromColorRef,Cyclomatic complexity of the method is 13
Complex Method,Vim.VisualStudio.Implementation.OptionPages,KeyBindingHandledByOption,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\OptionPages\KeyBindingHandledByOption.cs,KeyBindingHandledByOption,Cyclomatic complexity of the method is 18
Complex Method,Vim.VisualStudio.Implementation.ReSharper,ReSharperExternalEditAdapter,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ReSharper\ReSharperExternalEditAdapter.cs,GetEditTagDetector,Cyclomatic complexity of the method is 11
Complex Method,Vim.VisualStudio.Implementation.ReSharper,ReSharperV8EditTagDetector,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ReSharper\ReSharperTagDetector.cs,IsEditTag,Cyclomatic complexity of the method is 8
Complex Method,Vim.VisualStudio.Implementation.ReSharper,ResharperVersionUtility,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ReSharper\ResharperVersionutility.cs,DetectFromAssembly,Cyclomatic complexity of the method is 12
Complex Method,Vim.VisualStudio.Implementation.ConflictingKey,ConflictingKeyBindingMargin,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ConflictingKey\ConflictingKeyBindingMargin.cs,OnStateChanged,Cyclomatic complexity of the method is 11
Complex Method,Vim.VisualStudio.Implementation.Settings,SettingSerializer,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Settings\SettingSerializer.cs,ConvertToList,Cyclomatic complexity of the method is 13
Complex Method,Vim.VisualStudio.Implementation.Settings,SettingSerializer,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Settings\SettingSerializer.cs,ConvertToEscapedString,Cyclomatic complexity of the method is 12
Complex Method,Vim.VisualStudio.Implementation.VisualAssist,VisualAssistUtil,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\VisualAssist\VisualAssistUtil.cs,GetRegistryKeyName,Cyclomatic complexity of the method is 12
Long Parameter List,Vim.VisualStudio,HostFactory,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\HostFactory.cs,HostFactory,The method has 11 parameters.
Long Parameter List,Vim.VisualStudio,NativeMethods,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\NativeMethods.cs,CallWindowProc,The method has 5 parameters.
Long Parameter List,Vim.VisualStudio,OleCommandData,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\OleCommandData.cs,OleCommandData,The method has 5 parameters.
Long Parameter List,Vim.VisualStudio,OleCommandUtil,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\OleCommandUtil.cs,TryConvert,The method has 5 parameters.
Long Parameter List,Vim.VisualStudio,OleCommandUtil,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\OleCommandUtil.cs,TryConvert,The method has 5 parameters.
Long Parameter List,Vim.VisualStudio,OleCommandUtil,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\OleCommandUtil.cs,TryConvert,The method has 6 parameters.
Long Parameter List,Vim.VisualStudio,OleCommandUtil,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\OleCommandUtil.cs,TryConvert,The method has 5 parameters.
Long Parameter List,Vim.VisualStudio,OleCommandUtil,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\OleCommandUtil.cs,TryConvert,The method has 5 parameters.
Long Parameter List,Vim.VisualStudio,VsCommandTarget,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\VsCommandTarget.cs,VsCommandTarget,The method has 6 parameters.
Long Parameter List,Vim.VisualStudio,VsCommandTarget,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\VsCommandTarget.cs,VsCommandTarget,The method has 8 parameters.
Long Parameter List,Vim.VisualStudio,VsCommandTarget,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\VsCommandTarget.cs,Create,The method has 8 parameters.
Long Parameter List,Vim.VisualStudio,VsCommandTarget,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\VsCommandTarget.cs,Exec,The method has 5 parameters.
Long Parameter List,Vim.VisualStudio,VsVimHost,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\VsVimHost.cs,VsVimHost,The method has 14 parameters.
Long Parameter List,Vim.VisualStudio,VsVimHost,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\VsVimHost.cs,OnSelectionChanged,The method has 8 parameters.
Long Parameter List,Vim.VisualStudio.Implementation.ExternalEdit,ExternalEditMonitor,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ExternalEdit\ExternalEditMonitor.cs,ExternalEditMonitor,The method has 6 parameters.
Long Parameter List,Vim.VisualStudio.Implementation.Misc,FallbackKeyProcessorProvider,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\FallbackKeyProcessorProvider.cs,FallbackKeyProcessorProvider,The method has 5 parameters.
Long Parameter List,Vim.VisualStudio.Implementation.Misc,FallbackKeyProcessor,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\FallbackKeyProcessor.cs,FallbackKeyProcessor,The method has 7 parameters.
Long Parameter List,Vim.VisualStudio.Implementation.Misc,ScopeData,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\ScopeData.cs,TryGetKeyBindingScopeName,The method has 5 parameters.
Long Parameter List,Vim.VisualStudio.Implementation.Misc,StatusBarAdapter,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\StatusBarAdapter.cs,StatusBarAdapter,The method has 5 parameters.
Long Parameter List,Vim.VisualStudio.Implementation.Misc,KeyBindingService,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\KeyBindingService.cs,KeyBindingService,The method has 5 parameters.
Long Parameter List,Vim.VisualStudio.Implementation.Misc,TextManager,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\TextManager.cs,TextManager,The method has 5 parameters.
Long Parameter List,Vim.VisualStudio.Implementation.Misc,TextManager,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\TextManager.cs,TextManager,The method has 5 parameters.
Long Parameter List,Vim.VisualStudio.Implementation.Misc,VsAdapter,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\VsAdapter.cs,VsAdapter,The method has 5 parameters.
Long Parameter List,Vim.VisualStudio.Implementation.Misc,VsVimKeyProcessorProvider,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\VsVimKeyProcessorProvider.cs,VsVimKeyProcessorProvider,The method has 5 parameters.
Long Identifier,Vim.VisualStudio,HostFactory,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\HostFactory.cs,HostFactory,The length of the parameter displayWindowBrokerFactoryService is 33.
Long Identifier,Vim.VisualStudio,VsVimHost,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\VsVimHost.cs,VsVimHost,The length of the parameter editorOperationsFactoryService is 30.
Long Identifier,Vim.VisualStudio.Implementation.Misc,ReportDesignerUtil,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\ReportDesignerUtil.cs,ReportDesignerUtil,The length of the parameter vsEditorAdaptersFactoryService is 30.
Long Identifier,Vim.VisualStudio.Implementation.Misc,VsAdapter,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\VsAdapter.cs,VsAdapter,The length of the parameter incrementalSearchFactoryService is 31.
Long Identifier,Vim.VisualStudio.Implementation.ConflictingKey,ConflictingKeyBindingMarginProvider,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ConflictingKey\ConflictingKeyBindingMarginProvider.cs,ConflictingKeyBindingMarginProvider,The length of the parameter toastNotificationServiceProvider is 32.
Long Identifier,Vim.VisualStudio.Implementation.UpgradeNotification,VimRcLoadNotificationMarginProvider,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\UpgradeNotification\VimRcLoadNotificationMarginProvider.cs,VimRcLoadNotificationMarginProvider,The length of the parameter toastNotificationServiceProvider is 32.
Long Identifier,Vim.VisualStudio.Implementation.VisualAssist,VisualAssistUtil,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\VisualAssist\VisualAssistUtil.cs,VisualAssistUtil,The length of the parameter toastNotificationServiceProvider is 32.
Long Statement,Vim.VisualStudio,Extensions,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Extensions.cs,GetLineMarkersEnum,The length of the statement  "	var hresult = lines.EnumMarkers (span.iStartLine' span.iStartIndex' span.iEndLine' span.iEndIndex' 0' (uint)ENUMMARKERFLAGS.EM_ALLTYPES' out markers); " is 150.
Long Statement,Vim.VisualStudio,Extensions,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Extensions.cs,IsAnyDisplayActive,The length of the statement  "	return displayWindowBroker.IsCompletionActive || displayWindowBroker.IsQuickInfoActive || displayWindowBroker.IsSignatureHelpActive || displayWindowBroker.IsSmartTagSessionActive; " is 179.
Long Statement,Vim.VisualStudio,Extensions,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Extensions.cs,Exec,The length of the statement  "	return oleCommandTarget.Exec (ref commandGroup' oleCommandData.Id' oleCommandData.CommandExecOpt' oleCommandData.VariantIn' oleCommandData.VariantOut); " is 151.
Long Statement,Vim.VisualStudio,HostFactory,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\HostFactory.cs,ConnectToOleCommandTarget,The length of the statement  "	var result = VsCommandTarget.Create (vimBufferCoordinator' vsTextView' _textManager' _adapter' broker' _keyUtil' _vimApplicationSettings' _commandTargetFactoryList); " is 165.
Long Statement,Vim.VisualStudio,HostFactory,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\HostFactory.cs,ConnectToOleCommandTargetDelayed,The length of the statement  "	Action connectInBackground = () => _protectedOperations.BeginInvoke (() => ConnectToOleCommandTarget (vimBuffer' textView' vsTextView)' DispatcherPriority.Background); " is 167.
Long Statement,Vim.VisualStudio,OleCommandUtil,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\OleCommandUtil.cs,TryConvert,The length of the statement  "	return TryConvert (oleCommandData.Group' oleCommandData.Id' oleCommandData.VariantIn' out keyInput' out editCommandKind); " is 121.
Long Statement,Vim.VisualStudio,OleCommandUtil,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\OleCommandUtil.cs,TryConvert,The length of the statement  "		cmdId = simulateStandardKeyBindings && hasShift ? VSConstants.VSStd2KCmdID.PAGEUP_EXT : VSConstants.VSStd2KCmdID.PAGEUP; " is 120.
Long Statement,Vim.VisualStudio,OleCommandUtil,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\OleCommandUtil.cs,TryConvert,The length of the statement  "		cmdId = simulateStandardKeyBindings && hasShift ? VSConstants.VSStd2KCmdID.PAGEDN_EXT : VSConstants.VSStd2KCmdID.PAGEDN; " is 120.
Long Statement,Vim.VisualStudio,VsCommandTarget,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\VsCommandTarget.cs,Create,The length of the statement  "	var vsCommandTarget = new VsCommandTarget (vimBufferCoordinator' textManager' adapter' broker' keyUtil' vimApplicationSettings); " is 128.
Long Statement,Vim.VisualStudio,VsCommandTarget,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\VsCommandTarget.cs,Create,The length of the statement  "	var commandTargets = commandTargetFactoryList.Select (x => x.CreateCommandTarget (nextCommandTarget' vimBufferCoordinator)).Where (x => x != null).ToReadOnlyCollection (); " is 171.
Long Statement,Vim.VisualStudio,VsFilterKeysAdapter,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\VsFilterKeysAdapter.cs,IsEditCommand,The length of the statement  "	return OleCommandUtil.TryConvert (commandGroup' commandId' IntPtr.Zero' VimKeyModifiers.None' out command) && command.HasKeyInput; " is 130.
Long Statement,Vim.VisualStudio,VsVimHost,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\VsVimHost.cs,GoToDefinition,The length of the statement  "	var selected = _textManager.GetDocumentTextViews (DocumentLoad.RespectLazy).Where (x => !x.Selection.IsEmpty).ToList (); " is 120.
Long Statement,Vim.VisualStudio,VsVimHost,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\VsVimHost.cs,GoToDefinition,The length of the statement  "	_textManager.GetDocumentTextViews (DocumentLoad.RespectLazy).Where (x => !x.Selection.IsEmpty && !selected.Contains (x)).ForEach (x => x.Selection.Clear ()); " is 157.
Long Statement,Vim.VisualStudio,VsVimHost,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\VsVimHost.cs,MoveFocusHorizontally,The length of the statement  "	var topLevelWindows = _dte.Windows.Cast<Window> ().Where (window => window.Kind == "Document" && (window.Left > 0)).ToList (); " is 126.
Long Statement,Vim.VisualStudio,VsVimHost,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\VsVimHost.cs,OnElementValueChanged,The length of the statement  "		if (ErrorHandler.Succeeded (_vsMonitorSelection.GetCurrentElementValue ((uint)VSConstants.VSSELELEMID.SEID_WindowFrame' out value))) { " is 134.
Long Statement,Vim.VisualStudio,VsVimHost,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\VsVimHost.cs,OnElementValueChanged,The length of the statement  "		RaiseActiveTextViewChanged (oldView == null ? FSharpOption<ITextView>.None : FSharpOption.Create<ITextView> (oldView)' newView == null ? FSharpOption<ITextView>.None : FSharpOption.Create<ITextView> (newView)); " is 210.
Long Statement,Vim.VisualStudio.Implementation.ExternalEdit,ExternalEditMonitor,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ExternalEdit\ExternalEditMonitor.cs,SetIgnoredExternalEditSpans,The length of the statement  "	_ignoredExternalEditSpans.AddRange (spans.Select (x => x.Snapshot.CreateTrackingSpan (x.Span' SpanTrackingMode.EdgeInclusive))); " is 128.
Long Statement,Vim.VisualStudio.Implementation.ExternalEdit,ExternalEditorManager,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ExternalEdit\ExternalEditorManager.cs,VimBufferCreated,The length of the statement  "		var externalEditMonitor = new ExternalEditMonitor (_vimApplicationSettings' vimBuffer' _protectedOperations' _vsAdapter.GetTextLines (vimBuffer.TextBuffer)' taggerList.ToReadOnlyCollectionShallow ()' bufferAdapterList.ToReadOnlyCollectionShallow ()); " is 250.
Long Statement,Vim.VisualStudio.Implementation.Misc,FallbackKeyProcessorProvider,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\FallbackKeyProcessorProvider.cs,GetAssociatedProcessor,The length of the statement  "	return new FallbackKeyProcessor (_vsShell' _dte' _keyUtil' _vimApplicationSettings' wpfTextView' vimBuffer' _scopeData); " is 120.
Long Statement,Vim.VisualStudio.Implementation.Misc,FallbackKeyProcessor,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\FallbackKeyProcessor.cs,GetKeyBindings,The length of the statement  "	_fallbackCommandList = _vimApplicationSettings.RemovedBindings.Where (binding => IsTextViewBinding (binding)).Select (binding => new FallbackCommand (_scopeData.GetScopeKind (binding.KeyBinding.Scope)' KeyBinding.Parse (binding.KeyBinding.CommandString)' binding.Id)).ToLookup (fallbackCommand => fallbackCommand.KeyBindings [0].Char); " is 335.
Long Statement,Vim.VisualStudio.Implementation.Misc,FallbackKeyProcessor,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\FallbackKeyProcessor.cs,TryProcess,The length of the statement  "	var cmds = _fallbackCommandList [findFirstChar].Where (fallbackCommand => fallbackCommand.KeyBindings [0].KeyModifiers == findFirstModifiers).OrderBy (fallbackCommand => GetScopeOrder (fallbackCommand.ScopeKind)).ToList (); " is 223.
Long Statement,Vim.VisualStudio.Implementation.Misc,FallbackKeyProcessor,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\FallbackKeyProcessor.cs,TryProcess,The length of the statement  "		var secondChord = cmds.Where (fallbackCommand => fallbackCommand.KeyBindings [1].KeyModifiers == keyInput.KeyModifiers && fallbackCommand.KeyBindings [1].Char == keyInput.Char).OrderBy (fallbackCommand => GetScopeOrder (fallbackCommand.ScopeKind)).ToList (); " is 258.
Long Statement,Vim.VisualStudio.Implementation.Misc,ScopeData,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\ScopeData.cs,TryGetMainScopeNames,The length of the statement  "				if (!TryGetKeyBindingScopeName (vsShell' keyBindingsKey' "{5efc7975-14bc-11cf-9b2b-00aa00573819}"' 13018' out globalScopeName)) { " is 129.
Long Statement,Vim.VisualStudio.Implementation.Misc,ScopeData,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\ScopeData.cs,TryGetMainScopeNames,The length of the statement  "				if (!TryGetKeyBindingScopeName (vsShell' keyBindingsKey' "{8B382828-6202-11D1-8870-0000F87579D2}"' null' out textEditorScopeName)) { " is 132.
Long Statement,Vim.VisualStudio.Implementation.Misc,ScopeData,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\ScopeData.cs,TryGetMainScopeNames,The length of the statement  "				if (!TryGetKeyBindingScopeName (vsShell' keyBindingsKey' "{3AE79031-E1BC-11D0-8F78-00A0C9110057}"' null' out solutionExplorerScopeName)) { " is 138.
Long Statement,Vim.VisualStudio.Implementation.Misc,ScopeData,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\ScopeData.cs,TryGetKeyBindingScopeName,The length of the statement  "			return ErrorHandler.Succeeded (vsShell.LoadPackageString (ref package' id.Value' out localizedScopeName)) && !string.IsNullOrEmpty (localizedScopeName); " is 152.
Long Statement,Vim.VisualStudio.Implementation.Misc,StandardCommandTarget,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\StandardCommandTarget.cs,IsDisplayWindowKey,The length of the statement  "		return keyInput.IsArrowKey || keyInput == KeyInputUtil.EnterKey || keyInput == KeyInputUtil.TabKey || keyInput.Key == VimKey.Back; " is 130.
Long Statement,Vim.VisualStudio.Implementation.Misc,StandardCommandTarget,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\StandardCommandTarget.cs,TryProcessWithBuffer,The length of the statement  "	if (_vimBuffer.ModeKind == ModeKind.Normal && _textView.Roles.Contains (Constants.TextViewRoleEmbeddedPeekTextView) && keyInput == KeyInputUtil.EscapeKey) { " is 156.
Long Statement,Vim.VisualStudio.Implementation.Misc,StandardCommandTarget,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\StandardCommandTarget.cs,Exec,The length of the statement  "			_textManager.GetDocumentTextViews (DocumentLoad.RespectLazy).Where (x => !x.Selection.IsEmpty).ForEach (x => x.Selection.Clear ()); " is 131.
Long Statement,Vim.VisualStudio.Implementation.Misc,StatusBarAdapter,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\StatusBarAdapter.cs,VimBufferCreated,The length of the statement  "	_vimProtectedOperations.BeginInvoke (() => _commandMarginUtil.SetMarginVisibility (vimBuffer' _vimApplicationSettings.UseEditorCommandMargin)' DispatcherPriority.ApplicationIdle); " is 179.
Long Statement,Vim.VisualStudio.Implementation.Misc,KeyBindingService,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\KeyBindingService.cs,RunConflictingKeyBindingStateCheck,The length of the statement  "	ConflictingKeyBindingState = snapshot.Conflicting.Any () ? ConflictingKeyBindingState.FoundConflicts : ConflictingKeyBindingState.ConflictsIgnoredOrResolved; " is 157.
Long Statement,Vim.VisualStudio.Implementation.Misc,KeyBindingService,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\KeyBindingService.cs,CreateVimFirstKeyInputSet,The length of the statement  "	var hashSet = new HashSet<KeyInput> (buffer.AllModes.Select (x => x.CommandNames).SelectMany (x => x).Where (x => x.KeyInputs.Length > 0).Select (x => x.KeyInputs.First ())); " is 174.
Long Statement,Vim.VisualStudio.Implementation.Misc,TextManager,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\TextManager.cs,SaveCore,The length of the statement  "		ErrorHandler.ThrowOnFailure (runningDocumentTable.SaveDocuments ((uint)__VSRDTSAVEOPTIONS.RDTSAVEOPT_ForceSave' null' 0' docCookie)); " is 133.
Long Statement,Vim.VisualStudio.Implementation.Misc,TextManager,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\TextManager.cs,SendSplit,The length of the statement  "		var result = target.Exec (ref group' (uint)cmdId' (uint)OLECMDEXECOPT.OLECMDEXECOPT_DODEFAULT' IntPtr.Zero' IntPtr.Zero); " is 121.
Long Statement,Vim.VisualStudio.Implementation.Misc,TextManager,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\TextManager.cs,GetTextViews,The length of the statement  "	return _vsAdapter.GetTextViews (textBuffer).Select (x => _vsAdapter.EditorAdapter.GetWpfTextView (x)).Where (x => x != null); " is 125.
Long Statement,Vim.VisualStudio.Implementation.Misc,VsAdapter,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\VsAdapter.cs,GetTextBufferForDocCookie,The length of the statement  "	} else if (vsTextBufferProvider != null && ErrorHandler.Succeeded (vsTextBufferProvider.GetTextBuffer (out vsTextLines)) && vsTextLines != null) { " is 146.
Long Statement,Vim.VisualStudio.Implementation.Misc,VsAdapter,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\VsAdapter.cs,IsVenusView,The length of the statement  "	return ErrorHandler.Succeeded (vsTextLines.GetLanguageServiceID (out id)) && id == VSConstants.CLSID_HtmlLanguageService; " is 121.
Long Statement,Vim.VisualStudio.Implementation.Misc,VsAdapter,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\VsAdapter.cs,IsReadOnly,The length of the statement  "	if (editorOptions != null && EditorOptionsUtil.GetOptionValueOrDefault (editorOptions' DefaultTextViewOptions.ViewProhibitUserInputId' false)) { " is 144.
Long Statement,Vim.VisualStudio.Implementation.Misc,VsAdapter,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\VsAdapter.cs,IsReadOnly,The length of the statement  "	if (ErrorHandler.Succeeded (textLines.GetStateFlags (out flags)) && 0 != (flags & (uint)BUFFERSTATEFLAGS.BSF_USER_READONLY)) { " is 126.
Long Statement,Vim.VisualStudio.Implementation.Misc,VsAdapter,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\VsAdapter.cs,IsFindManagerIncrementalSearchActive,The length of the statement  "		if (ErrorHandler.Failed (dataSource.GetValue ("IsIncrementalSearchActive"' out uiObj)) || ErrorHandler.Failed (uiObj.get_Data (out obj)) || !(obj is bool)) { " is 157.
Long Statement,Vim.VisualStudio.Implementation.Misc,VsAdapter,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\VsAdapter.cs,TryGetActiveTextView,The length of the statement  "	var hr = textManager.GetActiveView2 (fMustHaveFocus: 0' pBuffer: null' grfIncludeViewFrameType: (uint)_VIEWFRAMETYPE.vftCodeWindow' ppView: out vsTextView); " is 156.
Long Statement,Vim.VisualStudio.Implementation.OptionPages,KeyboardOptionPage,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\OptionPages\KeyboardOptionPage.cs,CreateKeyboardSettingsControl,The length of the statement  "	return new KeyboardSettingsControl (vim' keyBindingService' exportProvider.GetExportedValue<IVimApplicationSettings> ()' exportProvider.GetExportedValue<IVimProtectedOperations> ()); " is 182.
Long Statement,Vim.VisualStudio.Implementation.OptionPages,KeyboardSettingsControl,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\OptionPages\KeyboardSettingsControl.xaml.cs,UpdateKeyBindings,The length of the statement  "	var vsVimSet = new HashSet<string> (_keyBindingList.Where (x => x.HandledByVsVim).SelectMany (x => x.Bindings).Select (x => x.KeyBinding.CommandString).Distinct (comparer)' comparer); " is 183.
Long Statement,Vim.VisualStudio.Implementation.OptionPages,KeyboardSettingsControl,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\OptionPages\KeyboardSettingsControl.xaml.cs,UpdateKeyBindings,The length of the statement  "		var vsBindingList = _keyBindingList.Where (x => !x.HandledByVsVim).SelectMany (x => x.Bindings).Where (x => x.Id == commandId).Select (x => x.KeyBinding.CommandString).ToList (); " is 178.
Long Statement,Vim.VisualStudio.Implementation.OptionPages,KeyboardSettingsControl,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\OptionPages\KeyboardSettingsControl.xaml.cs,UpdateKeyBindings,The length of the statement  "	_vimApplicationSettings.RemovedBindings = _keyBindingList.Where (binding => binding.HandledByVsVim).SelectMany (data => data.Bindings).ToReadOnlyCollection (); " is 159.
Long Statement,Vim.VisualStudio.Implementation.ReSharper,ReSharperExternalEditAdapter,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ReSharper\ReSharperExternalEditAdapter.cs,IsInterested,The length of the statement  "	tagger = versionInfo.TaggerProvider != null ? versionInfo.TaggerProvider.SafeCreateTagger<ITag> (textBuffer).GetValueOrDefault () : null; " is 137.
Long Statement,Vim.VisualStudio.Implementation.ReSharper,ReSharperExtensionAdapter,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ReSharper\ReSharperExtensionAdapter.cs,ShouldCreateVimBuffer,The length of the statement  "	if (textDocument.FilePath.StartsWith (FilePathPrefixRegexEditor' StringComparison.OrdinalIgnoreCase) || textDocument.FilePath.StartsWith (FilePathPrefixUnitTestSessionOutput' StringComparison.OrdinalIgnoreCase)) { " is 213.
Long Statement,Vim.VisualStudio.Implementation.ReSharper,ReSharperExtensionAdapter,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ReSharper\ReSharperExtensionAdapter.cs,ShouldKeepSelectionAfterHostCommand,The length of the statement  "	if (comparer.Equals (command' "ReSharper.ReSharper_ExtendSelection") || comparer.Equals (command' "ReSharper.ReSharper_SurroundWith")) { " is 136.
Long Statement,Vim.VisualStudio.Implementation.ReSharper,ReSharperKeyUtil,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ReSharper\ReSharperKeyUtil.cs,GetOrCreate,The length of the statement  "	return vimBufferCoordinator.VimBuffer.Properties.GetOrCreateSingletonProperty (s_propertyBagKey' () => new ReSharperKeyUtil (vimBufferCoordinator)); " is 148.
Long Statement,Vim.VisualStudio.Implementation.ReSharper,ReSharperKeyUtil,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ReSharper\ReSharperKeyUtil.cs,QueryStatusCore,The length of the statement  "	} else if ((keyInput.Key == VimKey.Back || keyInput == KeyInputUtil.EnterKey) && _vimBuffer.ModeKind != ModeKind.Insert) { " is 122.
Long Statement,Vim.VisualStudio.Implementation.ReSharper,ReSharperV8EditTagDetector,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ReSharper\ReSharperTagDetector.cs,IsEditTag,The length of the statement  "			AttributeIdPropertyInfo = highlighterInstance.GetType ().GetProperty ("AttributeId"' BindingFlags.Instance | BindingFlags.Public); " is 130.
Long Statement,Vim.VisualStudio.Implementation.ReSharper,ResharperVersionUtility,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ReSharper\ResharperVersionutility.cs,DetectFromAssembly,The length of the statement  "	if (assembly.FullName.StartsWith (ResharperAssemblyName2010) || assembly.FullName.StartsWith (ResharperAssemblyName2012)) { " is 123.
Long Statement,Vim.VisualStudio.Implementation.NavigateTo,NavigateToItemProviderFactory,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\NavigateTo\NavigateToItemProviderFactory.cs,OnSearchStopped,The length of the statement  "		_textManager.GetDocumentTextViews (DocumentLoad.RespectLazy).Where (x => !x.Selection.IsEmpty).ForEach (x => x.Selection.Clear ()); " is 131.
Long Statement,Vim.VisualStudio.Implementation.Roslyn,RoslynRenameUtil,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Roslyn\RoslynRenameUtil.cs,Cancel,The length of the statement  "		var activeSessionPropertyInfo = _inlineRenameService.GetType ().GetProperty ("ActiveSession"' BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance); " is 164.
Long Statement,Vim.VisualStudio.Implementation.Roslyn,RoslynRenameUtil,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Roslyn\RoslynRenameUtil.cs,Cancel,The length of the statement  "		var cancelMethodInfo = activeSession.GetType ().GetMethod ("Cancel"' BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance); " is 139.
Long Statement,Vim.VisualStudio.Implementation.Roslyn,RoslynRenameUtil,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Roslyn\RoslynRenameUtil.cs,TryCreateCore,The length of the statement  "		var inlineRenameService = exportProvider.GetExportedValue<object> ("Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameService"); " is 148.
Long Statement,Vim.VisualStudio.Implementation.Roslyn,RoslynRenameUtil,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Roslyn\RoslynRenameUtil.cs,TryCreateCore,The length of the statement  "		var activeSessionPropertyInfo = inlineRenameServiceType.GetProperty ("ActiveSession"' BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public); " is 156.
Long Statement,Vim.VisualStudio.Implementation.Roslyn,RoslynRenameUtil,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Roslyn\RoslynRenameUtil.cs,TryCreateCore,The length of the statement  "		var activeSessionChangedEventInfo = inlineRenameServiceType.GetEvent ("ActiveSessionChanged"' BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public); " is 164.
Long Statement,Vim.VisualStudio.Implementation.Roslyn,RoslynRenameUtil,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Roslyn\RoslynRenameUtil.cs,TryCreateCore,The length of the statement  "		var eventArgsTypeArgument = Type.GetType (string.Format ("Microsoft.CodeAnalysis.Editor.Implementation.InlineRename.InlineRenameService+ActiveSessionChangedEventArgs' Microsoft.CodeAnalysis.EditorFeatures' Version={0}' Culture=neutral' PublicKeyToken=31bf3856ad364e35"' version)); " is 280.
Long Statement,Vim.VisualStudio.Implementation.Roslyn,RoslynRenameUtil,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Roslyn\RoslynRenameUtil.cs,TryCreateCore,The length of the statement  "		var methodInfo = roslynRenameUtil.GetType ().GetMethod ("OnActiveSessionChanged"' BindingFlags.Instance | BindingFlags.NonPublic); " is 130.
Long Statement,Vim.VisualStudio.Implementation.Settings,SettingSerializer,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Settings\SettingSerializer.cs,TryConvertToCommandKeyBindings,The length of the statement  "		if (!Guid.TryParse (items [i]' out group) || !UInt32.TryParse (items [i + 1]' out id) || !KeyBinding.TryParse (items [i + 3]' out keyBinding)) { " is 144.
Long Statement,Vim.VisualStudio.Implementation.ToastNotification,ToastNotificationService,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ToastNotification\ToastNotificationService.cs,UpdateTheme,The length of the statement  "	_toastControl.Background = _editorFormatMap.GetBackgroundBrush (EditorFormatDefinitionNames.Margin' MarginFormatDefinition.DefaultColor); " is 137.
Long Statement,Vim.VisualStudio.Implementation.ToastNotification,ToastNotificationService,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ToastNotification\ToastNotificationService.cs,OnToastControlItemsChanged,The length of the statement  "	_toastControl.Visibility = _toastControl.ToastNotificationCollection.Count > 0 ? Visibility.Visible : Visibility.Collapsed; " is 123.
Long Statement,Vim.VisualStudio.Implementation.ToastNotification,ToastNotificationService,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ToastNotification\ToastNotificationService.cs,OnToastControlItemsChanged,The length of the statement  "	var removedList = _toastDataMap.Where (pair => !_toastControl.ToastNotificationCollection.Contains (pair.Value.ToastNotification)).ToList (); " is 141.
Long Statement,Vim.VisualStudio.Implementation.UpgradeNotification,VimRcLoadNotificationMarginProvider,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\UpgradeNotification\VimRcLoadNotificationMarginProvider.cs,RemoveToastWithKey,The length of the statement  "	_vim.VimBuffers.Select (x => x.TextView).OfType<IWpfTextView> ().ForEach (x => _toastNotificationServiceProvider.GetToastNoficationService (x).Remove (key)); " is 157.
Long Statement,Vim.VisualStudio.Implementation.UpgradeNotification,VimRcLoadNotificationMarginProvider,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\UpgradeNotification\VimRcLoadNotificationMarginProvider.cs,VimBufferCreated,The length of the statement  "		_toastNotificationServiceProvider.GetToastNoficationService (wpfTextView).Display (_notifyToastKey' linkBanner' OnNotifyClosed); " is 128.
Long Statement,Vim.VisualStudio.Implementation.UpgradeNotification,VimRcLoadNotificationMarginProvider,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\UpgradeNotification\VimRcLoadNotificationMarginProvider.cs,VimBufferCreated,The length of the statement  "		_toastNotificationServiceProvider.GetToastNoficationService (wpfTextView).Display (_errorToastKey' errorBanner' OnErrorClosed); " is 127.
Long Statement,Vim.VisualStudio.Implementation.VisualAssist,VisualAssistKeyProcessor,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\VisualAssist\VisualAssistKeyProcessor.cs,PreviewKeyDown,The length of the statement  "	if (_vimBuffer.ModeKind == ModeKind.Normal && args.Key == Key.OemPeriod && args.KeyboardDevice.Modifiers == ModifierKeys.None) { " is 128.
Long Statement,Vim.VisualStudio.Implementation.VisualAssist,VisualAssistKeyProcessor,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\VisualAssist\VisualAssistKeyProcessor.cs,PreviewKeyUp,The length of the statement  "	if (args.Key == Key.Escape || (args.Key == Key.OemOpenBrackets && args.KeyboardDevice.Modifiers == ModifierKeys.Control)) { " is 123.
Long Statement,Vim.VisualStudio.Implementation.VisualAssist,VisualAssistUtil,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\VisualAssist\VisualAssistUtil.cs,OnToastNotificationClosed,The length of the statement  "	_vim.VimBuffers.Select (x => x.TextView).OfType<IWpfTextView> ().ForEach (x => _toastNotificationServiceProvider.GetToastNoficationService (x).Remove (_toastKey)); " is 163.
Complex Conditional,Vim.VisualStudio.Implementation.OptionPages,KeyBindingHandledByOption,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\OptionPages\KeyBindingHandledByOption.cs,KeyBindingHandledByOption,The conditional expression  "(group.Key == "Test" || group.Key == "Refactor" || group.Key == "TestResults" || group.Key == "Debug") && group.Count () >= 3"  is complex.
Empty Catch Block,Vim.VisualStudio,Extensions,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Extensions.cs,SafeResetBindings,The method has an empty catch block.
Empty Catch Block,Vim.VisualStudio,Extensions,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Extensions.cs,SafeSetBindings,The method has an empty catch block.
Empty Catch Block,Vim.VisualStudio,VsVimHost,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\VsVimHost.cs,BeginBulkOperation,The method has an empty catch block.
Empty Catch Block,Vim.VisualStudio,VsVimHost,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\VsVimHost.cs,EndBulkOperation,The method has an empty catch block.
Empty Catch Block,Vim.VisualStudio.Implementation.ReSharper,ReSharperExternalEditAdapter,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ReSharper\ReSharperExternalEditAdapter.cs,GetTaggerProvidersSafe,The method has an empty catch block.
Empty Catch Block,Vim.VisualStudio.Implementation.NavigateTo,NavigateToItemProviderFactory,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\NavigateTo\NavigateToItemProviderFactory.cs,CallOnMainThread,The method has an empty catch block.
Empty Catch Block,Vim.VisualStudio.Implementation.Roslyn,RoslynRenameUtil,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Roslyn\RoslynRenameUtil.cs,Cancel,The method has an empty catch block.
Magic Number,Vim.VisualStudio,Extensions,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Extensions.cs,GetLikelyVisibleSnapshotSpans,The following statement contains a magic number: if (formattedLength / 2 <= textView.VisualSnapshot.Length) {  	return new NormalizedSnapshotSpanCollection (formattedSpan);  }  
Magic Number,Vim.VisualStudio.Implementation.ExternalEdit,SnippetExternalEditAdapter,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ExternalEdit\SnippetExternalEditAdapter.cs,IsExternalEditMarker,The following statement contains a magic number: switch ((int)result.Value) {  case 15:  case 16:  case 26:  	// Details  	//  15: Snippet marker for inactive span  	//  16: Snippet marker for active span  	//  26: Tracks comment insertion for a snippet don' for cursor placement  	return true;  case 25:  	// Kind currently unknown.    	// Used at least for brace matching  	return false;  default:  	return false;  }  
Magic Number,Vim.VisualStudio.Implementation.ExternalEdit,SnippetExternalEditAdapter,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ExternalEdit\SnippetExternalEditAdapter.cs,IsExternalEditMarker,The following statement contains a magic number: switch ((int)result.Value) {  case 15:  case 16:  case 26:  	// Details  	//  15: Snippet marker for inactive span  	//  16: Snippet marker for active span  	//  26: Tracks comment insertion for a snippet don' for cursor placement  	return true;  case 25:  	// Kind currently unknown.    	// Used at least for brace matching  	return false;  default:  	return false;  }  
Magic Number,Vim.VisualStudio.Implementation.ExternalEdit,SnippetExternalEditAdapter,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ExternalEdit\SnippetExternalEditAdapter.cs,IsExternalEditMarker,The following statement contains a magic number: switch ((int)result.Value) {  case 15:  case 16:  case 26:  	// Details  	//  15: Snippet marker for inactive span  	//  16: Snippet marker for active span  	//  26: Tracks comment insertion for a snippet don' for cursor placement  	return true;  case 25:  	// Kind currently unknown.    	// Used at least for brace matching  	return false;  default:  	return false;  }  
Magic Number,Vim.VisualStudio.Implementation.ExternalEdit,SnippetExternalEditAdapter,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ExternalEdit\SnippetExternalEditAdapter.cs,IsExternalEditMarker,The following statement contains a magic number: switch ((int)result.Value) {  case 15:  case 16:  case 26:  	// Details  	//  15: Snippet marker for inactive span  	//  16: Snippet marker for active span  	//  26: Tracks comment insertion for a snippet don' for cursor placement  	return true;  case 25:  	// Kind currently unknown.    	// Used at least for brace matching  	return false;  default:  	return false;  }  
Magic Number,Vim.VisualStudio.Implementation.Misc,FallbackKeyProcessor,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\FallbackKeyProcessor.cs,GetScopeOrder,The following statement contains a magic number: switch (scope) {  case ScopeKind.TextEditor:  	return 1;  case ScopeKind.Global:  	return 2;  default:  	throw new InvalidOperationException ("Unexpected ScopeKind");  }  
Magic Number,Vim.VisualStudio.Implementation.Misc,FallbackKeyProcessor,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\FallbackKeyProcessor.cs,GetScopeOrder,The following statement contains a magic number: return 2;  
Magic Number,Vim.VisualStudio.Implementation.Misc,ScopeData,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\ScopeData.cs,TryGetMainScopeNames,The following statement contains a magic number: try {  	using (var rootKey = VSRegistry.RegistryRoot (__VsLocalRegistryType.RegType_Configuration' writable: false)) {  		using (var keyBindingsKey = rootKey.OpenSubKey ("KeyBindingTables")) {  			// For "Global".  The id in the registry here is incorrect for Vs 2010  			// so hard code the known value  			if (!TryGetKeyBindingScopeName (vsShell' keyBindingsKey' "{5efc7975-14bc-11cf-9b2b-00aa00573819}"' 13018' out globalScopeName)) {  				return false;  			}  			// For "Text Editor".  Many locals don't define this key so it's still considered a success   			// if we get only the global name.  Just fill in the default here  			if (!TryGetKeyBindingScopeName (vsShell' keyBindingsKey' "{8B382828-6202-11D1-8870-0000F87579D2}"' null' out textEditorScopeName)) {  				textEditorScopeName = DefaultTextEditorScopeName;  			}  			// The "Solution Explorer" scope is only relevant starting in VS2013.  By default it contains a lot of   			// key bindings for '['.  If we can't find the real name just use the default.  We don't want its abscence  			// to screw up other scopes  			if (!TryGetKeyBindingScopeName (vsShell' keyBindingsKey' "{3AE79031-E1BC-11D0-8F78-00A0C9110057}"' null' out solutionExplorerScopeName)) {  				solutionExplorerScopeName = DefaultSolutionExplorerScopeName;  			}  		}  	}  	return true;  } catch (Exception) {  	return false;  }  
Magic Number,Vim.VisualStudio.Implementation.Misc,ScopeData,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\ScopeData.cs,TryGetMainScopeNames,The following statement contains a magic number: using (var rootKey = VSRegistry.RegistryRoot (__VsLocalRegistryType.RegType_Configuration' writable: false)) {  	using (var keyBindingsKey = rootKey.OpenSubKey ("KeyBindingTables")) {  		// For "Global".  The id in the registry here is incorrect for Vs 2010  		// so hard code the known value  		if (!TryGetKeyBindingScopeName (vsShell' keyBindingsKey' "{5efc7975-14bc-11cf-9b2b-00aa00573819}"' 13018' out globalScopeName)) {  			return false;  		}  		// For "Text Editor".  Many locals don't define this key so it's still considered a success   		// if we get only the global name.  Just fill in the default here  		if (!TryGetKeyBindingScopeName (vsShell' keyBindingsKey' "{8B382828-6202-11D1-8870-0000F87579D2}"' null' out textEditorScopeName)) {  			textEditorScopeName = DefaultTextEditorScopeName;  		}  		// The "Solution Explorer" scope is only relevant starting in VS2013.  By default it contains a lot of   		// key bindings for '['.  If we can't find the real name just use the default.  We don't want its abscence  		// to screw up other scopes  		if (!TryGetKeyBindingScopeName (vsShell' keyBindingsKey' "{3AE79031-E1BC-11D0-8F78-00A0C9110057}"' null' out solutionExplorerScopeName)) {  			solutionExplorerScopeName = DefaultSolutionExplorerScopeName;  		}  	}  }  
Magic Number,Vim.VisualStudio.Implementation.Misc,ScopeData,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\ScopeData.cs,TryGetMainScopeNames,The following statement contains a magic number: using (var keyBindingsKey = rootKey.OpenSubKey ("KeyBindingTables")) {  	// For "Global".  The id in the registry here is incorrect for Vs 2010  	// so hard code the known value  	if (!TryGetKeyBindingScopeName (vsShell' keyBindingsKey' "{5efc7975-14bc-11cf-9b2b-00aa00573819}"' 13018' out globalScopeName)) {  		return false;  	}  	// For "Text Editor".  Many locals don't define this key so it's still considered a success   	// if we get only the global name.  Just fill in the default here  	if (!TryGetKeyBindingScopeName (vsShell' keyBindingsKey' "{8B382828-6202-11D1-8870-0000F87579D2}"' null' out textEditorScopeName)) {  		textEditorScopeName = DefaultTextEditorScopeName;  	}  	// The "Solution Explorer" scope is only relevant starting in VS2013.  By default it contains a lot of   	// key bindings for '['.  If we can't find the real name just use the default.  We don't want its abscence  	// to screw up other scopes  	if (!TryGetKeyBindingScopeName (vsShell' keyBindingsKey' "{3AE79031-E1BC-11D0-8F78-00A0C9110057}"' null' out solutionExplorerScopeName)) {  		solutionExplorerScopeName = DefaultSolutionExplorerScopeName;  	}  }  
Magic Number,Vim.VisualStudio.Implementation.Misc,ScopeData,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\ScopeData.cs,TryGetMainScopeNames,The following statement contains a magic number: if (!TryGetKeyBindingScopeName (vsShell' keyBindingsKey' "{5efc7975-14bc-11cf-9b2b-00aa00573819}"' 13018' out globalScopeName)) {  	return false;  }  
Magic Number,Vim.VisualStudio.Implementation.Misc,StatusBarAdapter,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\StatusBarAdapter.cs,StatusBarAdapter,The following statement contains a magic number: _timer = new DispatcherTimer (TimeSpan.FromSeconds (.1)' DispatcherPriority.Normal' OnTimer' Dispatcher.CurrentDispatcher);  
Magic Number,Vim.VisualStudio.Implementation.OptionPages,KeyBindingHandledByOption,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\OptionPages\KeyBindingHandledByOption.cs,KeyBindingHandledByOption,The following statement contains a magic number: foreach (var group in commandsByFirstDottedName) {  	if ((group.Key == "Test" || group.Key == "Refactor" || group.Key == "TestResults" || group.Key == "Debug") && group.Count () >= 3) {  		// Let's remove those  		cleanedUpCommands.RemoveAll (command => group.Contains (command));  		// In it's place' we'll insert a nice shortcut  		switch (group.Key) {  		case "Debug":  			cleanedUpCommands.Add ("Debugging");  			break;  		case "Refactor":  			cleanedUpCommands.Add ("Refactoring");  			break;  		case "Test":  			cleanedUpCommands.Add ("Testing");  			break;  		case "TestResults":  			cleanedUpCommands.Add ("Test Results");  			break;  		}  	} else if (group.Key == "Edit") {  		// Do we have a bunch of outlining commands here?  		var outliningCommands = group.Where (command => command.Contains ("Outlining") || command.Contains ("Region") || command.Contains ("Collapse")).ToList ();  		if (outliningCommands.Count >= 3) {  			cleanedUpCommands.RemoveAll (command => outliningCommands.Contains (command));  			cleanedUpCommands.Add ("Outlining");  		}  		// And a bunch of bookmark commands?  		var bookmarkCommands = group.Where (command => command.Contains ("Bookmark")).ToList ();  		if (bookmarkCommands.Count >= 3) {  			cleanedUpCommands.RemoveAll (command => bookmarkCommands.Contains (command));  			cleanedUpCommands.Add ("Bookmarks");  		}  	}  }  
Magic Number,Vim.VisualStudio.Implementation.OptionPages,KeyBindingHandledByOption,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\OptionPages\KeyBindingHandledByOption.cs,KeyBindingHandledByOption,The following statement contains a magic number: foreach (var group in commandsByFirstDottedName) {  	if ((group.Key == "Test" || group.Key == "Refactor" || group.Key == "TestResults" || group.Key == "Debug") && group.Count () >= 3) {  		// Let's remove those  		cleanedUpCommands.RemoveAll (command => group.Contains (command));  		// In it's place' we'll insert a nice shortcut  		switch (group.Key) {  		case "Debug":  			cleanedUpCommands.Add ("Debugging");  			break;  		case "Refactor":  			cleanedUpCommands.Add ("Refactoring");  			break;  		case "Test":  			cleanedUpCommands.Add ("Testing");  			break;  		case "TestResults":  			cleanedUpCommands.Add ("Test Results");  			break;  		}  	} else if (group.Key == "Edit") {  		// Do we have a bunch of outlining commands here?  		var outliningCommands = group.Where (command => command.Contains ("Outlining") || command.Contains ("Region") || command.Contains ("Collapse")).ToList ();  		if (outliningCommands.Count >= 3) {  			cleanedUpCommands.RemoveAll (command => outliningCommands.Contains (command));  			cleanedUpCommands.Add ("Outlining");  		}  		// And a bunch of bookmark commands?  		var bookmarkCommands = group.Where (command => command.Contains ("Bookmark")).ToList ();  		if (bookmarkCommands.Count >= 3) {  			cleanedUpCommands.RemoveAll (command => bookmarkCommands.Contains (command));  			cleanedUpCommands.Add ("Bookmarks");  		}  	}  }  
Magic Number,Vim.VisualStudio.Implementation.OptionPages,KeyBindingHandledByOption,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\OptionPages\KeyBindingHandledByOption.cs,KeyBindingHandledByOption,The following statement contains a magic number: foreach (var group in commandsByFirstDottedName) {  	if ((group.Key == "Test" || group.Key == "Refactor" || group.Key == "TestResults" || group.Key == "Debug") && group.Count () >= 3) {  		// Let's remove those  		cleanedUpCommands.RemoveAll (command => group.Contains (command));  		// In it's place' we'll insert a nice shortcut  		switch (group.Key) {  		case "Debug":  			cleanedUpCommands.Add ("Debugging");  			break;  		case "Refactor":  			cleanedUpCommands.Add ("Refactoring");  			break;  		case "Test":  			cleanedUpCommands.Add ("Testing");  			break;  		case "TestResults":  			cleanedUpCommands.Add ("Test Results");  			break;  		}  	} else if (group.Key == "Edit") {  		// Do we have a bunch of outlining commands here?  		var outliningCommands = group.Where (command => command.Contains ("Outlining") || command.Contains ("Region") || command.Contains ("Collapse")).ToList ();  		if (outliningCommands.Count >= 3) {  			cleanedUpCommands.RemoveAll (command => outliningCommands.Contains (command));  			cleanedUpCommands.Add ("Outlining");  		}  		// And a bunch of bookmark commands?  		var bookmarkCommands = group.Where (command => command.Contains ("Bookmark")).ToList ();  		if (bookmarkCommands.Count >= 3) {  			cleanedUpCommands.RemoveAll (command => bookmarkCommands.Contains (command));  			cleanedUpCommands.Add ("Bookmarks");  		}  	}  }  
Magic Number,Vim.VisualStudio.Implementation.OptionPages,KeyBindingHandledByOption,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\OptionPages\KeyBindingHandledByOption.cs,KeyBindingHandledByOption,The following statement contains a magic number: if ((group.Key == "Test" || group.Key == "Refactor" || group.Key == "TestResults" || group.Key == "Debug") && group.Count () >= 3) {  	// Let's remove those  	cleanedUpCommands.RemoveAll (command => group.Contains (command));  	// In it's place' we'll insert a nice shortcut  	switch (group.Key) {  	case "Debug":  		cleanedUpCommands.Add ("Debugging");  		break;  	case "Refactor":  		cleanedUpCommands.Add ("Refactoring");  		break;  	case "Test":  		cleanedUpCommands.Add ("Testing");  		break;  	case "TestResults":  		cleanedUpCommands.Add ("Test Results");  		break;  	}  } else if (group.Key == "Edit") {  	// Do we have a bunch of outlining commands here?  	var outliningCommands = group.Where (command => command.Contains ("Outlining") || command.Contains ("Region") || command.Contains ("Collapse")).ToList ();  	if (outliningCommands.Count >= 3) {  		cleanedUpCommands.RemoveAll (command => outliningCommands.Contains (command));  		cleanedUpCommands.Add ("Outlining");  	}  	// And a bunch of bookmark commands?  	var bookmarkCommands = group.Where (command => command.Contains ("Bookmark")).ToList ();  	if (bookmarkCommands.Count >= 3) {  		cleanedUpCommands.RemoveAll (command => bookmarkCommands.Contains (command));  		cleanedUpCommands.Add ("Bookmarks");  	}  }  
Magic Number,Vim.VisualStudio.Implementation.OptionPages,KeyBindingHandledByOption,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\OptionPages\KeyBindingHandledByOption.cs,KeyBindingHandledByOption,The following statement contains a magic number: if ((group.Key == "Test" || group.Key == "Refactor" || group.Key == "TestResults" || group.Key == "Debug") && group.Count () >= 3) {  	// Let's remove those  	cleanedUpCommands.RemoveAll (command => group.Contains (command));  	// In it's place' we'll insert a nice shortcut  	switch (group.Key) {  	case "Debug":  		cleanedUpCommands.Add ("Debugging");  		break;  	case "Refactor":  		cleanedUpCommands.Add ("Refactoring");  		break;  	case "Test":  		cleanedUpCommands.Add ("Testing");  		break;  	case "TestResults":  		cleanedUpCommands.Add ("Test Results");  		break;  	}  } else if (group.Key == "Edit") {  	// Do we have a bunch of outlining commands here?  	var outliningCommands = group.Where (command => command.Contains ("Outlining") || command.Contains ("Region") || command.Contains ("Collapse")).ToList ();  	if (outliningCommands.Count >= 3) {  		cleanedUpCommands.RemoveAll (command => outliningCommands.Contains (command));  		cleanedUpCommands.Add ("Outlining");  	}  	// And a bunch of bookmark commands?  	var bookmarkCommands = group.Where (command => command.Contains ("Bookmark")).ToList ();  	if (bookmarkCommands.Count >= 3) {  		cleanedUpCommands.RemoveAll (command => bookmarkCommands.Contains (command));  		cleanedUpCommands.Add ("Bookmarks");  	}  }  
Magic Number,Vim.VisualStudio.Implementation.OptionPages,KeyBindingHandledByOption,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\OptionPages\KeyBindingHandledByOption.cs,KeyBindingHandledByOption,The following statement contains a magic number: if ((group.Key == "Test" || group.Key == "Refactor" || group.Key == "TestResults" || group.Key == "Debug") && group.Count () >= 3) {  	// Let's remove those  	cleanedUpCommands.RemoveAll (command => group.Contains (command));  	// In it's place' we'll insert a nice shortcut  	switch (group.Key) {  	case "Debug":  		cleanedUpCommands.Add ("Debugging");  		break;  	case "Refactor":  		cleanedUpCommands.Add ("Refactoring");  		break;  	case "Test":  		cleanedUpCommands.Add ("Testing");  		break;  	case "TestResults":  		cleanedUpCommands.Add ("Test Results");  		break;  	}  } else if (group.Key == "Edit") {  	// Do we have a bunch of outlining commands here?  	var outliningCommands = group.Where (command => command.Contains ("Outlining") || command.Contains ("Region") || command.Contains ("Collapse")).ToList ();  	if (outliningCommands.Count >= 3) {  		cleanedUpCommands.RemoveAll (command => outliningCommands.Contains (command));  		cleanedUpCommands.Add ("Outlining");  	}  	// And a bunch of bookmark commands?  	var bookmarkCommands = group.Where (command => command.Contains ("Bookmark")).ToList ();  	if (bookmarkCommands.Count >= 3) {  		cleanedUpCommands.RemoveAll (command => bookmarkCommands.Contains (command));  		cleanedUpCommands.Add ("Bookmarks");  	}  }  
Magic Number,Vim.VisualStudio.Implementation.OptionPages,KeyBindingHandledByOption,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\OptionPages\KeyBindingHandledByOption.cs,KeyBindingHandledByOption,The following statement contains a magic number: if (group.Key == "Edit") {  	// Do we have a bunch of outlining commands here?  	var outliningCommands = group.Where (command => command.Contains ("Outlining") || command.Contains ("Region") || command.Contains ("Collapse")).ToList ();  	if (outliningCommands.Count >= 3) {  		cleanedUpCommands.RemoveAll (command => outliningCommands.Contains (command));  		cleanedUpCommands.Add ("Outlining");  	}  	// And a bunch of bookmark commands?  	var bookmarkCommands = group.Where (command => command.Contains ("Bookmark")).ToList ();  	if (bookmarkCommands.Count >= 3) {  		cleanedUpCommands.RemoveAll (command => bookmarkCommands.Contains (command));  		cleanedUpCommands.Add ("Bookmarks");  	}  }  
Magic Number,Vim.VisualStudio.Implementation.OptionPages,KeyBindingHandledByOption,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\OptionPages\KeyBindingHandledByOption.cs,KeyBindingHandledByOption,The following statement contains a magic number: if (group.Key == "Edit") {  	// Do we have a bunch of outlining commands here?  	var outliningCommands = group.Where (command => command.Contains ("Outlining") || command.Contains ("Region") || command.Contains ("Collapse")).ToList ();  	if (outliningCommands.Count >= 3) {  		cleanedUpCommands.RemoveAll (command => outliningCommands.Contains (command));  		cleanedUpCommands.Add ("Outlining");  	}  	// And a bunch of bookmark commands?  	var bookmarkCommands = group.Where (command => command.Contains ("Bookmark")).ToList ();  	if (bookmarkCommands.Count >= 3) {  		cleanedUpCommands.RemoveAll (command => bookmarkCommands.Contains (command));  		cleanedUpCommands.Add ("Bookmarks");  	}  }  
Magic Number,Vim.VisualStudio.Implementation.OptionPages,KeyBindingHandledByOption,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\OptionPages\KeyBindingHandledByOption.cs,KeyBindingHandledByOption,The following statement contains a magic number: if (outliningCommands.Count >= 3) {  	cleanedUpCommands.RemoveAll (command => outliningCommands.Contains (command));  	cleanedUpCommands.Add ("Outlining");  }  
Magic Number,Vim.VisualStudio.Implementation.OptionPages,KeyBindingHandledByOption,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\OptionPages\KeyBindingHandledByOption.cs,KeyBindingHandledByOption,The following statement contains a magic number: if (bookmarkCommands.Count >= 3) {  	cleanedUpCommands.RemoveAll (command => bookmarkCommands.Contains (command));  	cleanedUpCommands.Add ("Bookmarks");  }  
Magic Number,Vim.VisualStudio.Implementation.ReSharper,ResharperVersionUtility,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ReSharper\ResharperVersionutility.cs,DetectFromAssembly,The following statement contains a magic number: if (assembly.FullName.StartsWith (ResharperAssemblyNameV8)) {  	var fvi = FileVersionInfo.GetVersionInfo (assembly.Location);  	var version = new Version (fvi.FileVersion);  	if (version.Major == 8) {  		switch (version.Minor) {  		case 0:  			return ReSharperVersion.Version8;  		case 1:  			return ReSharperVersion.Version81;  		case 2:  			return ReSharperVersion.Version82;  		default:  			return ReSharperVersion.Version82;  		}  	}  	return ReSharperVersion.Unknown;  }  
Magic Number,Vim.VisualStudio.Implementation.ReSharper,ResharperVersionUtility,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ReSharper\ResharperVersionutility.cs,DetectFromAssembly,The following statement contains a magic number: if (assembly.FullName.StartsWith (ResharperAssemblyNameV8)) {  	var fvi = FileVersionInfo.GetVersionInfo (assembly.Location);  	var version = new Version (fvi.FileVersion);  	if (version.Major == 8) {  		switch (version.Minor) {  		case 0:  			return ReSharperVersion.Version8;  		case 1:  			return ReSharperVersion.Version81;  		case 2:  			return ReSharperVersion.Version82;  		default:  			return ReSharperVersion.Version82;  		}  	}  	return ReSharperVersion.Unknown;  }  
Magic Number,Vim.VisualStudio.Implementation.ReSharper,ResharperVersionUtility,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ReSharper\ResharperVersionutility.cs,DetectFromAssembly,The following statement contains a magic number: if (version.Major == 8) {  	switch (version.Minor) {  	case 0:  		return ReSharperVersion.Version8;  	case 1:  		return ReSharperVersion.Version81;  	case 2:  		return ReSharperVersion.Version82;  	default:  		return ReSharperVersion.Version82;  	}  }  
Magic Number,Vim.VisualStudio.Implementation.ReSharper,ResharperVersionUtility,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ReSharper\ResharperVersionutility.cs,DetectFromAssembly,The following statement contains a magic number: if (version.Major == 8) {  	switch (version.Minor) {  	case 0:  		return ReSharperVersion.Version8;  	case 1:  		return ReSharperVersion.Version81;  	case 2:  		return ReSharperVersion.Version82;  	default:  		return ReSharperVersion.Version82;  	}  }  
Magic Number,Vim.VisualStudio.Implementation.ReSharper,ResharperVersionUtility,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ReSharper\ResharperVersionutility.cs,DetectFromAssembly,The following statement contains a magic number: switch (version.Minor) {  case 0:  	return ReSharperVersion.Version8;  case 1:  	return ReSharperVersion.Version81;  case 2:  	return ReSharperVersion.Version82;  default:  	return ReSharperVersion.Version82;  }  
Magic Number,Vim.VisualStudio.Implementation.ReSharper,ResharperVersionUtility,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ReSharper\ResharperVersionutility.cs,DetectFromAssembly,The following statement contains a magic number: if (assembly.FullName.StartsWith (ResharperPlatform6AssemblyName)) {  	FileVersionInfo fvi = FileVersionInfo.GetVersionInfo (assembly.Location);  	var version = new Version (fvi.FileVersion);  	// Starting with ReSharper 9' the assembly we detect is part of the "ReSharper Platform"  	switch (version.Major) {  	case 6:  		return ReSharperVersion.Version9;  	case 102:  		return ReSharperVersion.Version91;  	case 103:  		return ReSharperVersion.Version92;  	case 104:  		return ReSharperVersion.Version10;  	default:  		return ReSharperVersion.Version10;  	}  }  
Magic Number,Vim.VisualStudio.Implementation.ReSharper,ResharperVersionUtility,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ReSharper\ResharperVersionutility.cs,DetectFromAssembly,The following statement contains a magic number: if (assembly.FullName.StartsWith (ResharperPlatform6AssemblyName)) {  	FileVersionInfo fvi = FileVersionInfo.GetVersionInfo (assembly.Location);  	var version = new Version (fvi.FileVersion);  	// Starting with ReSharper 9' the assembly we detect is part of the "ReSharper Platform"  	switch (version.Major) {  	case 6:  		return ReSharperVersion.Version9;  	case 102:  		return ReSharperVersion.Version91;  	case 103:  		return ReSharperVersion.Version92;  	case 104:  		return ReSharperVersion.Version10;  	default:  		return ReSharperVersion.Version10;  	}  }  
Magic Number,Vim.VisualStudio.Implementation.ReSharper,ResharperVersionUtility,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ReSharper\ResharperVersionutility.cs,DetectFromAssembly,The following statement contains a magic number: if (assembly.FullName.StartsWith (ResharperPlatform6AssemblyName)) {  	FileVersionInfo fvi = FileVersionInfo.GetVersionInfo (assembly.Location);  	var version = new Version (fvi.FileVersion);  	// Starting with ReSharper 9' the assembly we detect is part of the "ReSharper Platform"  	switch (version.Major) {  	case 6:  		return ReSharperVersion.Version9;  	case 102:  		return ReSharperVersion.Version91;  	case 103:  		return ReSharperVersion.Version92;  	case 104:  		return ReSharperVersion.Version10;  	default:  		return ReSharperVersion.Version10;  	}  }  
Magic Number,Vim.VisualStudio.Implementation.ReSharper,ResharperVersionUtility,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ReSharper\ResharperVersionutility.cs,DetectFromAssembly,The following statement contains a magic number: if (assembly.FullName.StartsWith (ResharperPlatform6AssemblyName)) {  	FileVersionInfo fvi = FileVersionInfo.GetVersionInfo (assembly.Location);  	var version = new Version (fvi.FileVersion);  	// Starting with ReSharper 9' the assembly we detect is part of the "ReSharper Platform"  	switch (version.Major) {  	case 6:  		return ReSharperVersion.Version9;  	case 102:  		return ReSharperVersion.Version91;  	case 103:  		return ReSharperVersion.Version92;  	case 104:  		return ReSharperVersion.Version10;  	default:  		return ReSharperVersion.Version10;  	}  }  
Magic Number,Vim.VisualStudio.Implementation.ReSharper,ResharperVersionUtility,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ReSharper\ResharperVersionutility.cs,DetectFromAssembly,The following statement contains a magic number: switch (version.Major) {  case 6:  	return ReSharperVersion.Version9;  case 102:  	return ReSharperVersion.Version91;  case 103:  	return ReSharperVersion.Version92;  case 104:  	return ReSharperVersion.Version10;  default:  	return ReSharperVersion.Version10;  }  
Magic Number,Vim.VisualStudio.Implementation.ReSharper,ResharperVersionUtility,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ReSharper\ResharperVersionutility.cs,DetectFromAssembly,The following statement contains a magic number: switch (version.Major) {  case 6:  	return ReSharperVersion.Version9;  case 102:  	return ReSharperVersion.Version91;  case 103:  	return ReSharperVersion.Version92;  case 104:  	return ReSharperVersion.Version10;  default:  	return ReSharperVersion.Version10;  }  
Magic Number,Vim.VisualStudio.Implementation.ReSharper,ResharperVersionUtility,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ReSharper\ResharperVersionutility.cs,DetectFromAssembly,The following statement contains a magic number: switch (version.Major) {  case 6:  	return ReSharperVersion.Version9;  case 102:  	return ReSharperVersion.Version91;  case 103:  	return ReSharperVersion.Version92;  case 104:  	return ReSharperVersion.Version10;  default:  	return ReSharperVersion.Version10;  }  
Magic Number,Vim.VisualStudio.Implementation.ReSharper,ResharperVersionUtility,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\ReSharper\ResharperVersionutility.cs,DetectFromAssembly,The following statement contains a magic number: switch (version.Major) {  case 6:  	return ReSharperVersion.Version9;  case 102:  	return ReSharperVersion.Version91;  case 103:  	return ReSharperVersion.Version92;  case 104:  	return ReSharperVersion.Version10;  default:  	return ReSharperVersion.Version10;  }  
Magic Number,Vim.VisualStudio.Implementation.Settings,SettingSerializer,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Settings\SettingSerializer.cs,TryConvertToCommandKeyBindings,The following statement contains a magic number: if (items.Count % 4 != 0) {  	return false;  }  
Magic Number,Vim.VisualStudio.Implementation.Settings,SettingSerializer,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Settings\SettingSerializer.cs,TryConvertToCommandKeyBindings,The following statement contains a magic number: for (int i = 0; i < items.Count; i += 4) {  	Guid group;  	uint id;  	KeyBinding keyBinding;  	if (!Guid.TryParse (items [i]' out group) || !UInt32.TryParse (items [i + 1]' out id) || !KeyBinding.TryParse (items [i + 3]' out keyBinding)) {  		return false;  	}  	var commandId = new CommandId (group' id);  	list.Add (new CommandKeyBinding (commandId' items [i + 2]' keyBinding));  }  
Magic Number,Vim.VisualStudio.Implementation.Settings,SettingSerializer,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Settings\SettingSerializer.cs,TryConvertToCommandKeyBindings,The following statement contains a magic number: for (int i = 0; i < items.Count; i += 4) {  	Guid group;  	uint id;  	KeyBinding keyBinding;  	if (!Guid.TryParse (items [i]' out group) || !UInt32.TryParse (items [i + 1]' out id) || !KeyBinding.TryParse (items [i + 3]' out keyBinding)) {  		return false;  	}  	var commandId = new CommandId (group' id);  	list.Add (new CommandKeyBinding (commandId' items [i + 2]' keyBinding));  }  
Magic Number,Vim.VisualStudio.Implementation.Settings,SettingSerializer,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Settings\SettingSerializer.cs,TryConvertToCommandKeyBindings,The following statement contains a magic number: for (int i = 0; i < items.Count; i += 4) {  	Guid group;  	uint id;  	KeyBinding keyBinding;  	if (!Guid.TryParse (items [i]' out group) || !UInt32.TryParse (items [i + 1]' out id) || !KeyBinding.TryParse (items [i + 3]' out keyBinding)) {  		return false;  	}  	var commandId = new CommandId (group' id);  	list.Add (new CommandKeyBinding (commandId' items [i + 2]' keyBinding));  }  
Magic Number,Vim.VisualStudio.Implementation.Settings,SettingSerializer,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Settings\SettingSerializer.cs,TryConvertToCommandKeyBindings,The following statement contains a magic number: i += 4
Magic Number,Vim.VisualStudio.Implementation.Settings,SettingSerializer,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Settings\SettingSerializer.cs,TryConvertToCommandKeyBindings,The following statement contains a magic number: if (!Guid.TryParse (items [i]' out group) || !UInt32.TryParse (items [i + 1]' out id) || !KeyBinding.TryParse (items [i + 3]' out keyBinding)) {  	return false;  }  
Magic Number,Vim.VisualStudio.Implementation.Settings,SettingSerializer,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Settings\SettingSerializer.cs,TryConvertToCommandKeyBindings,The following statement contains a magic number: list.Add (new CommandKeyBinding (commandId' items [i + 2]' keyBinding));  
Missing Default,Vim.VisualStudio,KeyBinding,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\KeyBinding.cs,TryConvertVsSpecificKey,The following switch statement is missing a default case: switch (keystroke.ToLower ()) {  case "num +":  	keyInput = KeyInputUtil.VimKeyToKeyInput (VimKey.KeypadPlus);  	break;  case "num /":  	keyInput = KeyInputUtil.VimKeyToKeyInput (VimKey.KeypadDivide);  	break;  case "num *":  	keyInput = KeyInputUtil.VimKeyToKeyInput (VimKey.KeypadMultiply);  	break;  case "num -":  	keyInput = KeyInputUtil.VimKeyToKeyInput (VimKey.KeypadMinus);  	break;  }  
Missing Default,Vim.VisualStudio,OleCommandUtil,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\OleCommandUtil.cs,TryConvert,The following switch statement is missing a default case: switch (cmdId) {  case VSConstants.VSStd97CmdID.SingleChar:  	var obj = Marshal.GetObjectForNativeVariant (variantIn);  	var c = (char)(ushort)obj;  	ki = KeyInputUtil.CharToKeyInput (c);  	kind = EditCommandKind.UserInput;  	isRawText = true;  	break;  case VSConstants.VSStd97CmdID.Escape:  	ki = KeyInputUtil.EscapeKey;  	kind = EditCommandKind.UserInput;  	break;  case VSConstants.VSStd97CmdID.Delete:  	ki = KeyInputUtil.VimKeyToKeyInput (VimKey.Delete);  	kind = EditCommandKind.UserInput;  	break;  case VSConstants.VSStd97CmdID.F1Help:  	ki = KeyInputUtil.VimKeyToKeyInput (VimKey.F1);  	kind = EditCommandKind.UserInput;  	break;  case VSConstants.VSStd97CmdID.Undo:  	ki = KeyInput.DefaultValue;  	kind = EditCommandKind.Undo;  	break;  case VSConstants.VSStd97CmdID.Redo:  	ki = KeyInput.DefaultValue;  	kind = EditCommandKind.Redo;  	break;  case VSConstants.VSStd97CmdID.MultiLevelUndo:  	// This occurs when the undo button is pressed.  If it's just simply pressed we get   	// a IntPtr.Zero 'variantIn' value and can proceed with Vim undo.  Else user selected  	// a very specific undo point and we shouldn't mess with it  	if (variantIn == IntPtr.Zero) {  		ki = KeyInput.DefaultValue;  		kind = EditCommandKind.Undo;  	}  	break;  case VSConstants.VSStd97CmdID.MultiLevelRedo:  	// This occurs when the redo button is pressed.  If it's just simply pressed we get   	// a IntPtr.Zero 'variantIn' value and can proceed with Vim redo .  Else user selected  	// a very specific redo point and we shouldn't mess with it  	if (variantIn == IntPtr.Zero) {  		ki = KeyInput.DefaultValue;  		kind = EditCommandKind.Redo;  	}  	break;  case VSConstants.VSStd97CmdID.GotoDecl:  case VSConstants.VSStd97CmdID.GotoDefn:  	ki = KeyInput.DefaultValue;  	kind = EditCommandKind.GoToDefinition;  	break;  case VSConstants.VSStd97CmdID.Paste:  	ki = KeyInput.DefaultValue;  	kind = EditCommandKind.Paste;  	break;  }  
Missing Default,Vim.VisualStudio,OleCommandUtil,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\OleCommandUtil.cs,TryConvert,The following switch statement is missing a default case: switch (keyInput.Key) {  case VimKey.Enter:  	cmdId = VSConstants.VSStd2KCmdID.RETURN;  	break;  case VimKey.Escape:  	cmdId = VSConstants.VSStd2KCmdID.CANCEL;  	break;  case VimKey.Delete:  	cmdId = VSConstants.VSStd2KCmdID.DELETE;  	break;  case VimKey.Back:  	cmdId = VSConstants.VSStd2KCmdID.BACKSPACE;  	break;  case VimKey.Up:  	cmdId = simulateStandardKeyBindings && hasShift ? VSConstants.VSStd2KCmdID.UP_EXT : VSConstants.VSStd2KCmdID.UP;  	break;  case VimKey.Down:  	cmdId = simulateStandardKeyBindings && hasShift ? VSConstants.VSStd2KCmdID.DOWN_EXT : VSConstants.VSStd2KCmdID.DOWN;  	break;  case VimKey.Left:  	cmdId = simulateStandardKeyBindings && hasShift ? VSConstants.VSStd2KCmdID.LEFT_EXT : VSConstants.VSStd2KCmdID.LEFT;  	break;  case VimKey.Right:  	cmdId = simulateStandardKeyBindings && hasShift ? VSConstants.VSStd2KCmdID.RIGHT_EXT : VSConstants.VSStd2KCmdID.RIGHT;  	break;  case VimKey.Tab:  	cmdId = simulateStandardKeyBindings && hasShift ? VSConstants.VSStd2KCmdID.BACKTAB : VSConstants.VSStd2KCmdID.TAB;  	break;  case VimKey.PageUp:  	cmdId = simulateStandardKeyBindings && hasShift ? VSConstants.VSStd2KCmdID.PAGEUP_EXT : VSConstants.VSStd2KCmdID.PAGEUP;  	break;  case VimKey.PageDown:  	cmdId = simulateStandardKeyBindings && hasShift ? VSConstants.VSStd2KCmdID.PAGEDN_EXT : VSConstants.VSStd2KCmdID.PAGEDN;  	break;  case VimKey.Insert:  	cmdId = VSConstants.VSStd2KCmdID.TOGGLE_OVERTYPE_MODE;  	break;  }  
Missing Default,Vim.VisualStudio,VsCommandTarget,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\VsCommandTarget.cs,QueryStatus,The following switch statement is missing a default case: switch (action) {  case CommandStatus.Enable:  	prgCmds [0].cmdf = (uint)(OLECMDF.OLECMDF_ENABLED | OLECMDF.OLECMDF_SUPPORTED);  	return NativeMethods.S_OK;  case CommandStatus.Disable:  	prgCmds [0].cmdf = (uint)OLECMDF.OLECMDF_SUPPORTED;  	return NativeMethods.S_OK;  case CommandStatus.PassOn:  	return _nextCommandTarget.QueryStatus (pguidCmdGroup' cCmds' prgCmds' pCmdText);  }  
Missing Default,Vim.VisualStudio.Implementation.Misc,KeyBindingService,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\Misc\KeyBindingService.cs,FixKeyMappingIssue,The following switch statement is missing a default case: switch ((VSConstants.VSStd2KCmdID)commandId.Id) {  case VSConstants.VSStd2KCmdID.RETURN:  	if (!command.GetBindings ().Any ()) {  		command.SafeSetBindings (KeyBinding.Parse (globalScopeName + "::Enter"));  	}  	break;  case VSConstants.VSStd2KCmdID.BACKSPACE:  	if (!command.GetBindings ().Any ()) {  		command.SafeSetBindings (KeyBinding.Parse (globalScopeName + "::Bkspce"));  	}  	break;  }  
Missing Default,Vim.VisualStudio.Implementation.OptionPages,KeyBindingHandledByOption,F:\newReposMay17\jaredpar_VsVim\Src\VsVimShared\Implementation\OptionPages\KeyBindingHandledByOption.cs,KeyBindingHandledByOption,The following switch statement is missing a default case: switch (group.Key) {  case "Debug":  	cleanedUpCommands.Add ("Debugging");  	break;  case "Refactor":  	cleanedUpCommands.Add ("Refactoring");  	break;  case "Test":  	cleanedUpCommands.Add ("Testing");  	break;  case "TestResults":  	cleanedUpCommands.Add ("Test Results");  	break;  }  
