Implementation smell,Namespace,Class,File,Method,Description
Long Method,Bardock.Utils.Extensions,CharExtensions,C:\repos\bardock_DotNet.Utils\src\Bardock.Utils\Extensions\CharExtensions.cs,FoldDiacritical,The method has 1133 lines of code.
Long Parameter List,Bardock.Utils.Extensions,IQueryableExtensions,C:\repos\bardock_DotNet.Utils\src\Bardock.Utils\Extensions\IQueryableExtensions.cs,WhereBetween,The method has 5 parameters. Parameters: source' dateExp' fromDate' toDate' removeTime
Long Parameter List,Bardock.Utils.Extensions,DateExtensions,C:\repos\bardock_DotNet.Utils\src\Bardock.Utils\Extensions\DateExtensions.cs,Clone,The method has 9 parameters. Parameters: d' year' month' day' hour' minute' second' millisecond' kind
Long Identifier,Bardock.Utils.Extensions,IQueryableExtensions,C:\repos\bardock_DotNet.Utils\src\Bardock.Utils\Extensions\IQueryableExtensions.cs,Search,The length of the parameter _x_tolower_contains_search_tolower is 34.
Long Statement,Bardock.Utils.Extensions,IQueryableExtensions,C:\repos\bardock_DotNet.Utils\src\Bardock.Utils\Extensions\IQueryableExtensions.cs,Search,The length of the statement  "                        Expression.Call(searchExpression.Body' _StringToLowerMethod)' _StringContainsMethod' Expression.Constant(searchTerm.ToLower()) " is 126.
Magic Number,Bardock.Utils.Extensions,PartialApplyExpressionExtensions,C:\repos\bardock_DotNet.Utils\src\Bardock.Utils\Extensions\Expressions\PartialApplyExpressionExtensions.cs,PartialApply,The following statement contains a magic number: return Expression.Lambda<Func<A1' A2' R>>(                  new PartialApplyExpressionVisitor<A3>(expr' arg3' expr.Parameters.Last()).Visit()'                  expr.Parameters.Take(2));
Magic Number,Bardock.Utils.Extensions,PartialApplyExpressionExtensions,C:\repos\bardock_DotNet.Utils\src\Bardock.Utils\Extensions\Expressions\PartialApplyExpressionExtensions.cs,PartialApplyLast,The following statement contains a magic number: return Expression.Lambda<Action<A1' A2>>(                  new PartialApplyExpressionVisitor<A3>(expr' arg3' expr.Parameters.Last()).Visit()'                  expr.Parameters.Take(2));
Magic Number,Bardock.Utils.Extensions,LongExtensions,C:\repos\bardock_DotNet.Utils\src\Bardock.Utils\Extensions\LongExtensions.cs,ToHumanFileSize,The following statement contains a magic number: while (len >= 1024 && order + 1 < sizes.Length)              {                  order = order + 1;                  len = len / 1024;              }
Magic Number,Bardock.Utils.Extensions,LongExtensions,C:\repos\bardock_DotNet.Utils\src\Bardock.Utils\Extensions\LongExtensions.cs,ToHumanFileSize,The following statement contains a magic number: while (len >= 1024 && order + 1 < sizes.Length)              {                  order = order + 1;                  len = len / 1024;              }
Magic Number,Bardock.Utils.Extensions,StreamExtensions,C:\repos\bardock_DotNet.Utils\src\Bardock.Utils\Extensions\StreamExtensions.cs,ReadAllBytes,The following statement contains a magic number: byte[] buffer = new byte[16 * 1024];
Magic Number,Bardock.Utils.Extensions,StreamExtensions,C:\repos\bardock_DotNet.Utils\src\Bardock.Utils\Extensions\StreamExtensions.cs,ReadAllBytes,The following statement contains a magic number: byte[] buffer = new byte[16 * 1024];
Magic Number,Bardock.Utils.Extensions,NumberBaseExtensions,C:\repos\bardock_DotNet.Utils\src\Bardock.Utils\Extensions\NumberBaseExtensions.cs,ConvertBase,The following statement contains a magic number: const int BitsInLong = 64;
Magic Number,Bardock.Utils.Extensions,NumberBaseExtensions,C:\repos\bardock_DotNet.Utils\src\Bardock.Utils\Extensions\NumberBaseExtensions.cs,ConvertBase,The following statement contains a magic number: if (numBase < 2 || numBase > Digits.Length)                  throw new ArgumentException("The radix must be >= 2 and <= " + Digits.Length.ToString());
Magic Number,Bardock.Utils.Extensions,StringNormalizeExtensions,C:\repos\bardock_DotNet.Utils\src\Bardock.Utils\Extensions\StringNormalizeExtensions.cs,SEONormalize,The following statement contains a magic number: for (int i = 0; i < len && i < maxLength; i++)              {                  char c = title[i];                  if (c.IsAlphaNumeric())                  {                      sb.Append(c.ToLower());                      prevdash = false;                  }                  else if (c.In('´'' '’'))                  {                      sb.Append('\'');                      prevdash = false;                  }                  else if (c.In(' '' '''' '.'' '/'' '\\'' '-'' '_'' '='))                  {                      if (!prevdash && sb.Length > 0)                      {                          sb.Append('-');                          prevdash = true;                      }                  }                  else if ((int)c >= 128)                  {                      var fc = c.FoldDiacritical().ToLower();                      if (fc.IsValidUriPathSegment())                      {                          sb.Append(fc);                          prevdash = false;                      }                  }              }
