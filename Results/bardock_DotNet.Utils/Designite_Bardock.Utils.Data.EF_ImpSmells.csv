Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,Bardock.Utils.Data.EF,DbContextBase,F:\newReposMay17\bardock_DotNet.Utils\src\Bardock.Utils.Data.EF\DbContextBase.cs,DbContextBase,The method has 5 parameters.
Long Parameter List,Bardock.Utils.Data.EF,DbContextBase,F:\newReposMay17\bardock_DotNet.Utils\src\Bardock.Utils.Data.EF\DbContextBase.cs,DbContextBase,The method has 6 parameters.
Long Parameter List,Bardock.Utils.Data.EF,DbContextBase,F:\newReposMay17\bardock_DotNet.Utils\src\Bardock.Utils.Data.EF\DbContextBase.cs,DbContextBase,The method has 7 parameters.
Long Parameter List,Bardock.Utils.Data.EF,DbContextBase,F:\newReposMay17\bardock_DotNet.Utils\src\Bardock.Utils.Data.EF\DbContextBase.cs,DbContextBase,The method has 7 parameters.
Long Parameter List,Bardock.Utils.Data.EF,DbContextBase,F:\newReposMay17\bardock_DotNet.Utils\src\Bardock.Utils.Data.EF\DbContextBase.cs,DbContextBase,The method has 7 parameters.
Long Parameter List,Bardock.Utils.Data.EF,DbContextBase,F:\newReposMay17\bardock_DotNet.Utils\src\Bardock.Utils.Data.EF\DbContextBase.cs,DbContextBase,The method has 8 parameters.
Long Parameter List,Bardock.Utils.Data.EF,DbContextBase,F:\newReposMay17\bardock_DotNet.Utils\src\Bardock.Utils.Data.EF\DbContextBase.cs,Init,The method has 5 parameters.
Long Statement,Bardock.Utils.Data.EF,DbContextBase,F:\newReposMay17\bardock_DotNet.Utils\src\Bardock.Utils.Data.EF\DbContextBase.cs,SetupDbSetTables,The length of the statement  "	foreach (var p in this.GetType ().GetProperties ().Where (prop => prop.PropertyType.IsAssignableToGenericType (typeof(IDbSet<>))).Select (prop => new { " is 151.
Long Statement,Bardock.Utils.Data.EF,DbContextExtensions,F:\newReposMay17\bardock_DotNet.Utils\src\Bardock.Utils.Data.EF\DbContextExtensions.cs,DetachAll,The length of the statement  "	foreach (var entity in db.ChangeTracker.Entries ().Where (e => e.State == EntityState.Added || e.State == EntityState.Modified || e.State == EntityState.Deleted)) { " is 164.
Long Statement,Bardock.Utils.Data.EF,EntityTypeConfiguration,F:\newReposMay17\bardock_DotNet.Utils\src\Bardock.Utils.Data.EF\DbModelBuilderExtensions.cs,GetToTableMethod,The length of the statement  "	return _typedConfig.GetType ().GetMethods ().Single (x => x.Name == "ToTable" && x.GetParameters ().Count () == paramsCount); " is 125.
Long Statement,Bardock.Utils.Data.EF,EntityTypeConfigurationExtensions,F:\newReposMay17\bardock_DotNet.Utils\src\Bardock.Utils.Data.EF\EntityTypeConfigurationExtensions.cs,HasIndex,The length of the statement  "	var fieldsProperties = fields.Select (x => (MemberExpression)(x.Body.RemoveConvert ())).Select (x => (PropertyInfo)x.Member).ToList (); " is 135.
Long Statement,Bardock.Utils.Data.EF,EntityTypeConfigurationExtensions,F:\newReposMay17\bardock_DotNet.Utils\src\Bardock.Utils.Data.EF\EntityTypeConfigurationExtensions.cs,HasIndex,The length of the statement  "			Priority = x.PropertyType == prop.PropertyType ? 1 : // check if required overload is: Property<T>(Expression<Func<TStructuralType' T>> propertyExpression) where T : struct " is 172.
Long Statement,Bardock.Utils.Data.EF,EntityTypeConfigurationExtensions,F:\newReposMay17\bardock_DotNet.Utils\src\Bardock.Utils.Data.EF\EntityTypeConfigurationExtensions.cs,HasIndex,The length of the statement  "			x.PropertyType.IsGenericParameter (nullable: false) && prop.PropertyType.IsValueType (nullable: false) ? 2 : // check if required overload is: Property<T>(Expression<Func<TStructuralType' T?>> propertyExpression) where T : struct " is 229.
Long Statement,Bardock.Utils.Data.EF,EntityTypeConfigurationExtensions,F:\newReposMay17\bardock_DotNet.Utils\src\Bardock.Utils.Data.EF\EntityTypeConfigurationExtensions.cs,HasIndex,The length of the statement  "			propertyMethod = propertyMethod.MakeGenericMethod (prop.PropertyType.GetNullableUnderlyingType () ?? prop.PropertyType); " is 120.
Magic Number,Bardock.Utils.Data.EF,EntityTypeConfigurationExtensions,F:\newReposMay17\bardock_DotNet.Utils\src\Bardock.Utils.Data.EF\EntityTypeConfigurationExtensions.cs,HasIndex,The following statement contains a magic number: foreach (var prop in fieldsProperties) {  	var propertyMethod = config.GetType ().GetMethods ().Where (x => x.Name == "Property").Select (x => new {  		Method = x'  		PropertyType = GetPropertyTypeOfPropertyMethod (x)  	}).Select (x => new {  		Method = x.Method'  		Priority = x.PropertyType == prop.PropertyType ? 1 : // check if required overload is: Property<T>(Expression<Func<TStructuralType' T>> propertyExpression) where T : struct  		x.PropertyType.IsGenericParameter (nullable: false) && prop.PropertyType.IsValueType (nullable: false) ? 2 : // check if required overload is: Property<T>(Expression<Func<TStructuralType' T?>> propertyExpression) where T : struct  		x.PropertyType.IsGenericParameter (nullable: true) && prop.PropertyType.IsValueType (nullable: true) ? 3 : 0  	}).Where (x => x.Priority != 0).OrderBy (x => x.Priority).Select (x => x.Method).First ();  	if (propertyMethod.IsGenericMethod)  		propertyMethod = propertyMethod.MakeGenericMethod (prop.PropertyType.GetNullableUnderlyingType () ?? prop.PropertyType);  	var propertyConfig = propertyMethod.Invoke (config' new[] {  		prop.ToExpression<TEntity> ().ToLambda ()  	}) as PrimitivePropertyConfiguration;  	propertyConfig.HasColumnAnnotation ("Index"' new IndexAnnotation (new IndexAttribute (name' i + 1) {  		IsUnique = isUnique  	}));  	;  	i++;  }  
Magic Number,Bardock.Utils.Data.EF,EntityTypeConfigurationExtensions,F:\newReposMay17\bardock_DotNet.Utils\src\Bardock.Utils.Data.EF\EntityTypeConfigurationExtensions.cs,HasIndex,The following statement contains a magic number: foreach (var prop in fieldsProperties) {  	var propertyMethod = config.GetType ().GetMethods ().Where (x => x.Name == "Property").Select (x => new {  		Method = x'  		PropertyType = GetPropertyTypeOfPropertyMethod (x)  	}).Select (x => new {  		Method = x.Method'  		Priority = x.PropertyType == prop.PropertyType ? 1 : // check if required overload is: Property<T>(Expression<Func<TStructuralType' T>> propertyExpression) where T : struct  		x.PropertyType.IsGenericParameter (nullable: false) && prop.PropertyType.IsValueType (nullable: false) ? 2 : // check if required overload is: Property<T>(Expression<Func<TStructuralType' T?>> propertyExpression) where T : struct  		x.PropertyType.IsGenericParameter (nullable: true) && prop.PropertyType.IsValueType (nullable: true) ? 3 : 0  	}).Where (x => x.Priority != 0).OrderBy (x => x.Priority).Select (x => x.Method).First ();  	if (propertyMethod.IsGenericMethod)  		propertyMethod = propertyMethod.MakeGenericMethod (prop.PropertyType.GetNullableUnderlyingType () ?? prop.PropertyType);  	var propertyConfig = propertyMethod.Invoke (config' new[] {  		prop.ToExpression<TEntity> ().ToLambda ()  	}) as PrimitivePropertyConfiguration;  	propertyConfig.HasColumnAnnotation ("Index"' new IndexAnnotation (new IndexAttribute (name' i + 1) {  		IsUnique = isUnique  	}));  	;  	i++;  }  
