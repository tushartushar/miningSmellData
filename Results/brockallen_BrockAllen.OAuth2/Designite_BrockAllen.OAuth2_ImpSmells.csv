Implementation smell,Namespace,Class,File,Method,Description
Complex Method,BrockAllen.OAuth2,OAuth2Client,F:\newReposMay17\brockallen_BrockAllen.OAuth2\BrockAllen.OAuth2\OAuth2Client.cs,RegisterProvider,Cyclomatic complexity of the method is 13
Long Parameter List,BrockAllen.OAuth2,OAuth2Client,F:\newReposMay17\brockallen_BrockAllen.OAuth2\BrockAllen.OAuth2\OAuth2Client.cs,RegisterProvider,The method has 5 parameters.
Long Parameter List,BrockAllen.OAuth2,Provider,F:\newReposMay17\brockallen_BrockAllen.OAuth2\BrockAllen.OAuth2\Provider.cs,Provider,The method has 8 parameters.
Long Statement,BrockAllen.OAuth2,Provider,F:\newReposMay17\brockallen_BrockAllen.OAuth2\BrockAllen.OAuth2\Provider.cs,GetRedirect,The length of the statement  "	var authorizationUrl = String.Format ("{0}?client_id={1}&redirect_uri={2}&state={3}&response_type=code&scope={4}"' url' client' redirect' state' scope); " is 152.
Long Statement,BrockAllen.OAuth2,OAuthAreaRegistration,F:\newReposMay17\brockallen_BrockAllen.OAuth2\BrockAllen.OAuth2\OAuthAreaRegistration.cs,RegisterArea,The length of the statement  "				var clientID = provider.Where (x => x.key.Equals ("clientID"' StringComparison.OrdinalIgnoreCase)).Select (x => x.value).SingleOrDefault (); " is 140.
Long Statement,BrockAllen.OAuth2,OAuthAreaRegistration,F:\newReposMay17\brockallen_BrockAllen.OAuth2\BrockAllen.OAuth2\OAuthAreaRegistration.cs,RegisterArea,The length of the statement  "				var clientSecret = provider.Where (x => x.key.Equals ("clientSecret"' StringComparison.OrdinalIgnoreCase)).Select (x => x.value).SingleOrDefault (); " is 148.
Long Statement,BrockAllen.OAuth2,OAuthAreaRegistration,F:\newReposMay17\brockallen_BrockAllen.OAuth2\BrockAllen.OAuth2\OAuthAreaRegistration.cs,RegisterArea,The length of the statement  "				var scope = provider.Where (k => k.key.Equals ("scope"' StringComparison.OrdinalIgnoreCase)).Select (x => x.value).SingleOrDefault (); " is 134.
Empty Catch Block,BrockAllen.OAuth2,OAuthAreaRegistration,F:\newReposMay17\brockallen_BrockAllen.OAuth2\BrockAllen.OAuth2\OAuthAreaRegistration.cs,RegisterArea,The method has an empty catch block.
Magic Number,BrockAllen.OAuth2,OAuthAreaRegistration,F:\newReposMay17\brockallen_BrockAllen.OAuth2\BrockAllen.OAuth2\OAuthAreaRegistration.cs,RegisterArea,The following statement contains a magic number: if (OAuth2Client.AutoRegisterOAuthCallbackUrl) {  	context.MapRoute ("OAuth2Client-CodeCallback"' OAuth2Client.OAuthCallbackUrl' new {  		controller = "OAuth2Callback"'  		action = "Callback"  	});  	var settings = ConfigurationManager.AppSettings;  	var providers = from v in (from string q in settings.Keys  	where q.StartsWith ("oauth2:")  	let parts = q.Split (':')  	where parts.Length == 3  	select new {  		provider = parts [1]'  		key = parts [2]'  		value = settings [q]  	})  	group v by v.provider;  	foreach (var provider in providers) {  		try {  			var type = (ProviderType)Enum.Parse (typeof(ProviderType)' provider.Key' true);  			var clientID = provider.Where (x => x.key.Equals ("clientID"' StringComparison.OrdinalIgnoreCase)).Select (x => x.value).SingleOrDefault ();  			var clientSecret = provider.Where (x => x.key.Equals ("clientSecret"' StringComparison.OrdinalIgnoreCase)).Select (x => x.value).SingleOrDefault ();  			var scope = provider.Where (k => k.key.Equals ("scope"' StringComparison.OrdinalIgnoreCase)).Select (x => x.value).SingleOrDefault ();  			if (!String.IsNullOrWhiteSpace (clientID) && !String.IsNullOrWhiteSpace (clientSecret)) {  				OAuth2Client.Instance.RegisterProvider (type' clientID' clientSecret' scope);  			}  		} catch {  			//Not adding  		}  	}  }  
Magic Number,BrockAllen.OAuth2,OAuthAreaRegistration,F:\newReposMay17\brockallen_BrockAllen.OAuth2\BrockAllen.OAuth2\OAuthAreaRegistration.cs,RegisterArea,The following statement contains a magic number: if (OAuth2Client.AutoRegisterOAuthCallbackUrl) {  	context.MapRoute ("OAuth2Client-CodeCallback"' OAuth2Client.OAuthCallbackUrl' new {  		controller = "OAuth2Callback"'  		action = "Callback"  	});  	var settings = ConfigurationManager.AppSettings;  	var providers = from v in (from string q in settings.Keys  	where q.StartsWith ("oauth2:")  	let parts = q.Split (':')  	where parts.Length == 3  	select new {  		provider = parts [1]'  		key = parts [2]'  		value = settings [q]  	})  	group v by v.provider;  	foreach (var provider in providers) {  		try {  			var type = (ProviderType)Enum.Parse (typeof(ProviderType)' provider.Key' true);  			var clientID = provider.Where (x => x.key.Equals ("clientID"' StringComparison.OrdinalIgnoreCase)).Select (x => x.value).SingleOrDefault ();  			var clientSecret = provider.Where (x => x.key.Equals ("clientSecret"' StringComparison.OrdinalIgnoreCase)).Select (x => x.value).SingleOrDefault ();  			var scope = provider.Where (k => k.key.Equals ("scope"' StringComparison.OrdinalIgnoreCase)).Select (x => x.value).SingleOrDefault ();  			if (!String.IsNullOrWhiteSpace (clientID) && !String.IsNullOrWhiteSpace (clientSecret)) {  				OAuth2Client.Instance.RegisterProvider (type' clientID' clientSecret' scope);  			}  		} catch {  			//Not adding  		}  	}  }  
Missing Default,BrockAllen.OAuth2,OAuth2Client,F:\newReposMay17\brockallen_BrockAllen.OAuth2\BrockAllen.OAuth2\OAuth2Client.cs,RegisterProvider,The following switch statement is missing a default case: switch (providerType) {  case ProviderType.Google:  	provider = new GoogleProvider (clientID' clientSecret' scope' additionalParameters);  	break;  case ProviderType.Live:  	provider = new LiveProvider (clientID' clientSecret' scope' additionalParameters);  	break;  case ProviderType.Facebook:  	provider = new FacebookProvider (clientID' clientSecret' scope' additionalParameters);  	break;  case ProviderType.LinkedIn:  	provider = new LinkedInProvider (clientID' clientSecret' scope' additionalParameters);  	break;  }  
