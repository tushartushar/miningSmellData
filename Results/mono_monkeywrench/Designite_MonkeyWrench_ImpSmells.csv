Implementation smell,Namespace,Class,File,Method,Description
Long Method,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,LoadConfiguration,The method has 125 lines of code.
Complex Method,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,LoadConfiguration,Cyclomatic complexity of the method is 9
Complex Method,NDesk.Options,Option,C:\repos\mono_monkeywrench\MonkeyWrench\Options.cs,ParsePrototype,Cyclomatic complexity of the method is 9
Complex Method,NDesk.Options,OptionSet,C:\repos\mono_monkeywrench\MonkeyWrench\Options.cs,WriteOptionDescriptions,Cyclomatic complexity of the method is 10
Long Parameter List,NDesk.Options,OptionSet,C:\repos\mono_monkeywrench\MonkeyWrench\Options.cs,GetOptionParts,The method has 5 parameters. Parameters: argument' flag' name' sep' value
Long Statement,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,ShowHelp,The length of the statement  "			Console.WriteLine ("{0} usage is: {0} [options]"' Path.GetFileName (System.Reflection.Assembly.GetEntryAssembly ().Location)); " is 126.
Long Statement,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,LoadConfiguration,The length of the statement  "				ForceFullUpdate = Boolean.Parse (xml.SelectSingleNode ("/MonkeyWrench/Configuration/ForceFullUpdate").GetNodeValue (ForceFullUpdate.ToString ())); " is 146.
Long Statement,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,LoadConfiguration,The length of the statement  "				WebServicePassword = xml.SelectSingleNode ("/MonkeyWrench/Configuration/WebServicePassword").GetNodeValue (WebServicePassword); " is 127.
Long Statement,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,LoadConfiguration,The length of the statement  "				DatabasePort = Int32.Parse(xml.SelectSingleNode ("/MonkeyWrench/Configuration/DatabasePort").GetNodeValue (DatabasePort.ToString ())); " is 134.
Long Statement,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,LoadConfiguration,The length of the statement  "				DatabasePassword = xml.SelectSingleNode ("/MonkeyWrench/Configuration/DatabasePassword").GetNodeValue (DatabasePassword); " is 121.
Long Statement,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,LoadConfiguration,The length of the statement  "				StoreFilesInDB = Boolean.Parse (xml.SelectSingleNode ("MonkeyWrench/Configuration/StoreFilesInDb").GetNodeValue (StoreFilesInDB.ToString ())); " is 142.
Long Statement,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,LoadConfiguration,The length of the statement  "				ConnectionRetryDuration = int.Parse (xml.SelectSingleNode ("MonkeyWrench/Configuration/ConnectionRetryDuration").GetNodeValue (ConnectionRetryDuration.ToString ())); " is 165.
Long Statement,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,LoadConfiguration,The length of the statement  "				LockingAlgorithm = xml.SelectSingleNode ("MonkeyWrench/Configuration/LockingAlgorithm").GetNodeValue (LockingAlgorithm); " is 120.
Long Statement,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,LoadConfiguration,The length of the statement  "				SchedulerAccount = xml.SelectSingleNode ("MonkeyWrench/Configuration/SchedulerAccount").GetNodeValue (SchedulerAccount); " is 120.
Long Statement,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,LoadConfiguration,The length of the statement  "				SchedulerPassword = xml.SelectSingleNode ("MonkeyWrench/Configuration/SchedulerPassword").GetNodeValue (SchedulerPassword); " is 123.
Long Statement,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,LoadConfiguration,The length of the statement  "				ChildProcessAlgorithm = xml.SelectSingleNode ("MonkeyWrench/Configuration/ChildProcessAlgorithm").GetNodeValue (ChildProcessAlgorithm); " is 135.
Long Statement,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,LoadConfiguration,The length of the statement  "				AllowedCommitReporterIPs = xml.SelectSingleNode ("MonkeyWrench/Configuration/AllowedCommitReporterIPs").GetNodeValue (AllowedCommitReporterIPs); " is 144.
Long Statement,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,LoadConfiguration,The length of the statement  "				UploadPort = int.Parse (xml.SelectSingleNode ("MonkeyWrench/Configuration/UploadPort").GetNodeValue (UploadPort.ToString ())); " is 126.
Long Statement,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,LoadConfiguration,The length of the statement  "				AllowAnonymousAccess = bool.Parse(xml.SelectSingleNode("MonkeyWrench/Configuration/AllowAnonymousAccess").GetNodeValue(AllowAnonymousAccess.ToString())); " is 153.
Long Statement,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,LoadConfiguration,The length of the statement  "				AutomaticScheduler = Boolean.Parse (xml.SelectSingleNode ("MonkeyWrench/Configuration/AutomaticScheduler").GetNodeValue (AutomaticScheduler.ToString ())); " is 154.
Long Statement,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,LoadConfiguration,The length of the statement  "				AutomaticSchedulerInterval = int.Parse (xml.SelectSingleNode ("MonkeyWrench/Configuration/AutomaticSchedulerInterval").GetNodeValue (AutomaticSchedulerInterval.ToString ())); " is 174.
Long Statement,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,LoadConfiguration,The length of the statement  "				AllowPasswordLogin = bool.Parse (xml.SelectSingleNode ("MonkeyWrench/Configuration/AllowPasswordLogin").GetNodeValue (AllowPasswordLogin.ToString ())); " is 151.
Long Statement,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,LoadConfiguration,The length of the statement  "				ProtectedMessage = xml.SelectSingleNode ("MonkeyWrench/Configuration/ProtectedMessage").GetNodeValue (ProtectedMessage); " is 120.
Long Statement,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,LoadConfiguration,The length of the statement  "				OauthClientSecret = xml.SelectSingleNode ("MonkeyWrench/Configuration/OauthClientSecret").GetNodeValue (OauthClientSecret); " is 123.
Long Statement,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,LoadConfiguration,The length of the statement  "				GitHubOauthClientId = xml.SelectSingleNode("MonkeyWrench/Configuration/GitHubOauthClientId").GetNodeValue(GitHubOauthClientId); " is 127.
Long Statement,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,LoadConfiguration,The length of the statement  "				GitHubOauthClientSecret = xml.SelectSingleNode("MonkeyWrench/Configuration/GitHubOauthClientSecret").GetNodeValue(GitHubOauthClientSecret); " is 139.
Long Statement,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,LoadConfiguration,The length of the statement  "				GitHubOauthRedirect = xml.SelectSingleNode("MonkeyWrench/Configuration/GitHubOauthRedirect").GetNodeValue(GitHubOauthRedirect); " is 127.
Long Statement,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,LoadConfiguration,The length of the statement  "						if (!LoadConfiguration (arguments' Path.Combine (Environment.GetFolderPath (Environment.SpecialFolder.MyDocuments)' "MonkeyWrench.xml"))) { " is 139.
Long Statement,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,LoadConfiguration,The length of the statement  "						if (!LoadConfiguration (arguments' Path.Combine (Environment.GetEnvironmentVariable ("HOME")' Path.Combine (Path.Combine (".config"' "MonkeyWrench")' "MonkeyWrench.xml")))) { " is 174.
Long Statement,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,GetDataRevisionDir,The length of the statement  "			return Path.Combine (Path.Combine (RevDataDirectory' lane_id.ToString ())' revision.Length > 8 ? revision.Substring (0' 8) : revision); " is 135.
Long Statement,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,GetSchedulerRepositoryCacheDirectory,The length of the statement  "			return Path.Combine (Path.Combine (DataDirectory' "SchedulerCache")' repository.Replace (':'' '_').Replace ('/'' '_').Replace ('\\'' '_')); " is 139.
Long Statement,MonkeyWrench,FileUtilities,C:\repos\mono_monkeywrench\MonkeyWrench\FileUtilities.cs,GZCompressGZ,The length of the statement  "				Console.WriteLine ("GZCompress There was an exception while trying to compress the file '{0}': {1}\n{2}"' filename' ex.Message' ex.StackTrace); " is 143.
Long Statement,MonkeyWrench,FileUtilities,C:\repos\mono_monkeywrench\MonkeyWrench\FileUtilities.cs,TryDeleteDirectoryRecursive,The length of the statement  "				log.ErrorFormat ("TryDeleteDirectoryRecursive ({0}): Could not delete directory recursively: {1}"' directory' ex.Message); " is 122.
Long Statement,MonkeyWrench,JobWindows,C:\repos\mono_monkeywrench\MonkeyWrench\JobWindows.cs,Start,The length of the statement  "			string mutex_name = @"Local\MonkeyWrench-suspended-mutex-" + Process.GetCurrentProcess ().Id.ToString () + "-" + Interlocked.Increment (ref mutex_counter).ToString (); " is 167.
Long Statement,MonkeyWrench,Lock,C:\repos\mono_monkeywrench\MonkeyWrench\Lock.cs,Create,The length of the statement  "					result.file = File.Open (Path.Combine (Path.GetTempPath ()' name + ".lock")' FileMode.Create' FileAccess.ReadWrite' FileShare.Read); " is 132.
Long Statement,MonkeyWrench,IProcessHelper,C:\repos\mono_monkeywrench\MonkeyWrench\ProcessHelper.cs,GetChildrenImplPgrep,The length of the statement  "					foreach (string line in children.Split (new char [] { '\n'' '\r'' ' '' '\t' }' StringSplitOptions.RemoveEmptyEntries)) { " is 120.
Long Statement,MonkeyWrench,ProcessHelperLinux,C:\repos\mono_monkeywrench\MonkeyWrench\ProcessHelperLinux.cs,RenderStackTraceWithGdb,The length of the statement  "			log.WriteLine (string.Format ("\n * Fetching stack trace for process {0} (name '{1}') * \n"' pid' GetProcessName (pid))); " is 121.
Long Statement,MonkeyWrench,ProcessHelperLinux,C:\repos\mono_monkeywrench\MonkeyWrench\ProcessHelperLinux.cs,RenderStackTraceWithGdb,The length of the statement  "				gdb.StartInfo.Arguments = string.Format ("-ex attach {0} --ex \"info target\" --ex \"info threads\" --ex \"thread apply all bt\" --batch"' pid); " is 144.
Long Statement,MonkeyWrench,ProcessHelperMac,C:\repos\mono_monkeywrench\MonkeyWrench\ProcessHelperMac.cs,RenderStackTraceWithGdb,The length of the statement  "			log.WriteLine (string.Format ("\n * Fetching stack trace for process {0} (name '{1}') * \n"' pid' GetProcessName (pid))); " is 121.
Long Statement,MonkeyWrench,ProcessHelperMac,C:\repos\mono_monkeywrench\MonkeyWrench\ProcessHelperMac.cs,RenderStackTraceWithGdb,The length of the statement  "							throw new ApplicationException (string.Format ("The 'gdb' process didn't exit in 30 seconds."' dbg.StartInfo.FileName)); " is 120.
Long Statement,MonkeyWrench,ProcessReader,C:\repos\mono_monkeywrench\MonkeyWrench\ProcessReader.cs,Setup,The length of the statement  "						if (timestamp && !line.StartsWith("@MonkeyWrench:") && !line.StartsWith("@Moonbuilder:")) { line = "[" + DateTime.Now.ToString("h:mm:ss") + "] " + line; } " is 154.
Long Statement,MonkeyWrench,ProcessReader,C:\repos\mono_monkeywrench\MonkeyWrench\ProcessReader.cs,Setup,The length of the statement  "						if (timestamp && !line.StartsWith("@MonkeyWrench:") && !line.StartsWith("@Moonbuilder:")) { line = "[" + DateTime.Now.ToString("h:mm:ss") + "] " + line; } " is 154.
Complex Conditional,NDesk.Options,OptionSet,C:\repos\mono_monkeywrench\MonkeyWrench\Options.cs,ParseBool,The conditional expression  "n.Length >= 1 && (n [n.Length-1] == '+' || n [n.Length-1] == '-') &&  					this.options.TryGetValue (n.Substring (0' n.Length-1)' out p)"  is complex.
Empty Catch Block,MonkeyWrench,Async,C:\repos\mono_monkeywrench\MonkeyWrench\Async.cs,Execute,The method has an empty catch block.
Empty Catch Block,MonkeyWrench,FileUtilities,C:\repos\mono_monkeywrench\MonkeyWrench\FileUtilities.cs,TryDeleteFile,The method has an empty catch block.
Empty Catch Block,MonkeyWrench,ProcessHelperMac,C:\repos\mono_monkeywrench\MonkeyWrench\ProcessHelperMac.cs,RenderStackTraceWithGdb,The method has an empty catch block.
Magic Number,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,ExecuteSuspendedProcessHack,The following statement contains a magic number: if (arguments.Length < 3 || arguments [0] != "/respawn")  				return;
Magic Number,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,ExecuteSuspendedProcessHack,The following statement contains a magic number: string respawn_filename = arguments [2];
Magic Number,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,ExecuteSuspendedProcessHack,The following statement contains a magic number: for (int i = 3; i < arguments.Length; i++) {  				if (i > 3)  					respawn_arguments += " ";  				if (arguments [i].IndexOf (' ') >= 0) {  					respawn_arguments += "\"" + arguments [i] + "\"";  				} else {  					respawn_arguments += arguments [i];  				}  			}
Magic Number,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,ExecuteSuspendedProcessHack,The following statement contains a magic number: for (int i = 3; i < arguments.Length; i++) {  				if (i > 3)  					respawn_arguments += " ";  				if (arguments [i].IndexOf (' ') >= 0) {  					respawn_arguments += "\"" + arguments [i] + "\"";  				} else {  					respawn_arguments += arguments [i];  				}  			}
Magic Number,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,setupLog4Net,The following statement contains a magic number: if (string.IsNullOrEmpty (LogFile)) {  				var cappender = new ConsoleAppender ();  				appender = cappender;    				cappender.Layout = patternLayout;  				cappender.ActivateOptions ();  			} else {  				var cappender = new RollingFileAppender ();  				appender = cappender;    				cappender.AppendToFile = true;  				cappender.File = Path.Combine(Directory.GetCurrentDirectory()' LogFile);  				cappender.Layout = patternLayout;  				cappender.MaxSizeRollBackups = 10;  				cappender.RollingStyle = RollingFileAppender.RollingMode.Size;  				cappender.MaximumFileSize = "1GB";  				cappender.StaticLogFileName = true;  				cappender.LockingModel = new FileAppender.MinimalLock();  				cappender.ActivateOptions ();  			}
Magic Number,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,GetDataRevisionDir,The following statement contains a magic number: return Path.Combine (Path.Combine (RevDataDirectory' lane_id.ToString ())' revision.Length > 8 ? revision.Substring (0' 8) : revision);
Magic Number,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,GetDataRevisionDir,The following statement contains a magic number: return Path.Combine (Path.Combine (RevDataDirectory' lane_id.ToString ())' revision.Length > 8 ? revision.Substring (0' 8) : revision);
Magic Number,MonkeyWrench,Configuration,C:\repos\mono_monkeywrench\MonkeyWrench\Configuration.cs,GetPlatform,The following statement contains a magic number: if (string.IsNullOrEmpty (Platform)) {  				switch (Environment.OSVersion.Platform) {  				case PlatformID.Win32NT:  				case PlatformID.Win32S:  				case PlatformID.Win32Windows:  				case PlatformID.WinCE:  					return MonkeyWrench.Platform.Windows;  				case PlatformID.MacOSX:  					return MonkeyWrench.Platform.Mac;  				case PlatformID.Unix:  				case (PlatformID) 128:  				default:  					// from here: http://stackoverflow.com/q/10138040/183422  					// Well' there are chances MacOSX is reported as Unix instead of MacOSX.  					// Instead of platform check' we'll do a feature checks (Mac specific root folders)  					if (Directory.Exists("/Applications")  					    & Directory.Exists("/System")  					    & Directory.Exists("/Users")  					    & Directory.Exists("/Volumes"))  						return MonkeyWrench.Platform.Mac;  					else  						return MonkeyWrench.Platform.Linux;  				}  			} else {  				switch (Platform.ToLowerInvariant ()) {  				case "windows":  					return MonkeyWrench.Platform.Windows;  				case "mac":  					return MonkeyWrench.Platform.Mac;  				case "linux":  				default:  					return MonkeyWrench.Platform.Linux;  				}  			}
Magic Number,MonkeyWrench,FileUtilities,C:\repos\mono_monkeywrench\MonkeyWrench\FileUtilities.cs,GZCompressGZ,The following statement contains a magic number: try {  				File.Copy (filename' input); // We need to make a copy since gzip will delete the original file.  				using (Process p = new Process ()) {  					p.StartInfo.FileName = "gzip";  					p.StartInfo.Arguments = input;  					p.Start ();  					if (!p.WaitForExit (1000 * 60 /* 1 minute*/)) {  						Console.WriteLine ("GZCompress: gzip didn't finish in time' killing it.");  						p.Kill ();  						return null;  					}  				}  			} catch (Exception ex) {  				Console.WriteLine ("GZCompress There was an exception while trying to compress the file '{0}': {1}\n{2}"' filename' ex.Message' ex.StackTrace);  				return null;  			} finally {  				TryDeleteFile (input);  			}
Magic Number,MonkeyWrench,FileUtilities,C:\repos\mono_monkeywrench\MonkeyWrench\FileUtilities.cs,GZCompressGZ,The following statement contains a magic number: try {  				File.Copy (filename' input); // We need to make a copy since gzip will delete the original file.  				using (Process p = new Process ()) {  					p.StartInfo.FileName = "gzip";  					p.StartInfo.Arguments = input;  					p.Start ();  					if (!p.WaitForExit (1000 * 60 /* 1 minute*/)) {  						Console.WriteLine ("GZCompress: gzip didn't finish in time' killing it.");  						p.Kill ();  						return null;  					}  				}  			} catch (Exception ex) {  				Console.WriteLine ("GZCompress There was an exception while trying to compress the file '{0}': {1}\n{2}"' filename' ex.Message' ex.StackTrace);  				return null;  			} finally {  				TryDeleteFile (input);  			}
Magic Number,MonkeyWrench,FileUtilities,C:\repos\mono_monkeywrench\MonkeyWrench\FileUtilities.cs,GZUncompress,The following statement contains a magic number: if (!filename.EndsWith (".gz")) {  				outfile = filename;  				infile = filename + ".gz";  				TryDeleteFile (infile);  				File.Move (outfile' infile);  				filename = infile;  			} else {  				outfile = filename.Substring (0' filename.Length - 3);  				infile = filename;  			}
Magic Number,MonkeyWrench,FileUtilities,C:\repos\mono_monkeywrench\MonkeyWrench\FileUtilities.cs,GZUncompress,The following statement contains a magic number: using (FileStream infs = new FileStream (infile' FileMode.Open' FileAccess.Read' FileShare.Read)) {  				using (GZipStream gz = new GZipStream (infs' CompressionMode.Decompress)) {  					using (FileStream outfs = new FileStream (outfile' FileMode.Create' FileAccess.Write' FileShare.Read)) {  						byte [] buffer = new byte [1024];  						int bytes_read;  						while ((bytes_read = gz.Read (buffer' 0' buffer.Length)) > 0) {  							outfs.Write (buffer' 0' bytes_read);  						}  					}  				}  			}
Magic Number,MonkeyWrench,FileUtilities,C:\repos\mono_monkeywrench\MonkeyWrench\FileUtilities.cs,GZCompressManaged,The following statement contains a magic number: try {  				outfile = Path.GetTempFileName ();    				using (FileStream infs = new FileStream (filename' FileMode.Open' FileAccess.Read' FileShare.Read)) {  					using (FileStream outfs = new FileStream (outfile' FileMode.Open' FileAccess.Write' FileShare.Read)) {  						using (GZipStream gz = new GZipStream (outfs' CompressionMode.Compress)) {  							byte [] buffer = new byte [1024];  							int bytes_read;  							while ((bytes_read = infs.Read (buffer' 0' buffer.Length)) > 0) {  								gz.Write (buffer' 0' bytes_read);  							}  						}  					}  				}    				return outfile;  			} catch (Exception ex) {  				log.ErrorFormat ("Failed to compress file: {0} {1}"' filename' ex);  				FileUtilities.TryDeleteFile (outfile);  				return null;  			}
Magic Number,MonkeyWrench,FileUtilities,C:\repos\mono_monkeywrench\MonkeyWrench\FileUtilities.cs,GlobToRegExp,The following statement contains a magic number: for (int pos = 0; pos < carr.Length; pos++) {  				switch (carr [pos]) {  				case '?':  					sb.Append ('.');  					break;  				case '*':  					sb.Append (".*");  					break;  				case '#':  					if (bDigit) {  						sb.Append (@"\d{1}");  					} else {  						sb.Append (@"^\d{1}");  						bDigit = true;  					}  					break;  				case '[':  					StringBuilder gsb = ConvertGroupSubexpression (carr' ref pos);  					if (gsb.Length > 2) {  						sb.Append (gsb);  					}  					break;  				case '.':  					sb.Append ("[.]");  					break;  				default:  					sb.Append (carr [pos]);  					break;  				}  			}
Magic Number,MonkeyWrench,FileUtilities,C:\repos\mono_monkeywrench\MonkeyWrench\FileUtilities.cs,CreateFilename,The following statement contains a magic number: path = Path.Combine (path' md5.Substring (0' 2));
Magic Number,MonkeyWrench,FileUtilities,C:\repos\mono_monkeywrench\MonkeyWrench\FileUtilities.cs,CreateFilename,The following statement contains a magic number: path = Path.Combine (path' md5.Substring (2' 2));
Magic Number,MonkeyWrench,FileUtilities,C:\repos\mono_monkeywrench\MonkeyWrench\FileUtilities.cs,CreateFilename,The following statement contains a magic number: path = Path.Combine (path' md5.Substring (2' 2));
Magic Number,MonkeyWrench,FileUtilities,C:\repos\mono_monkeywrench\MonkeyWrench\FileUtilities.cs,MD5BytesToString,The following statement contains a magic number: StringBuilder result = new StringBuilder (16);
Magic Number,MonkeyWrench,IProcessHelper,C:\repos\mono_monkeywrench\MonkeyWrench\ProcessHelper.cs,GetChildrenImplPS,The following statement contains a magic number: using (Process ps = new Process ()) {  				ps.StartInfo.FileName = "ps";  				ps.StartInfo.Arguments = "-eo ppid'pid";  				ps.StartInfo.UseShellExecute = false;  				ps.StartInfo.RedirectStandardOutput = true;  				ps.Start ();  				stdout = ps.StandardOutput.ReadToEnd ();    				if (!ps.WaitForExit (1000))  					throw new ApplicationException (string.Format ("ps didn't finish in a reasonable amount of time (1 second)."));    				if (ps.ExitCode == 0 && !string.IsNullOrEmpty (stdout.Trim ())) {  					List<int> result = null;  					foreach (string line in stdout.Split (new char [] { '\n'' '\r' }' StringSplitOptions.RemoveEmptyEntries)) {  						string l = line.Trim ();  						int space = l.IndexOf (' ');  						if (space > 0) {  							string parent = l.Substring (0' space);  							string process = l.Substring (space + 1);  							int parent_id' process_id;    							if (int.TryParse (parent' out parent_id) && int.TryParse (process' out process_id)) {  								if (parent_id == pid) {  									if (result == null)  										result = new List<int> ();  									result.Add (process_id);  								}  							}  						}  					}  					return result;  				}  			}
Magic Number,MonkeyWrench,IProcessHelper,C:\repos\mono_monkeywrench\MonkeyWrench\ProcessHelper.cs,GetChildrenImplPgrep,The following statement contains a magic number: using (Process pgrep = new Process ()) {  				pgrep.StartInfo.FileName = "pgrep";  				pgrep.StartInfo.Arguments = "-P " + pid;  				pgrep.StartInfo.UseShellExecute = false;  				pgrep.StartInfo.RedirectStandardOutput = true;  				pgrep.Start ();  				children = pgrep.StandardOutput.ReadToEnd ();    				if (!pgrep.WaitForExit (1000))  					throw new ApplicationException (string.Format ("pgrep didn't finish in a reasonable amount of time (1 second)."));    				if (pgrep.ExitCode == 0 && !string.IsNullOrEmpty (children.Trim ())) {  					List<int> result = new List<int> ();  					foreach (string line in children.Split (new char [] { '\n'' '\r'' ' '' '\t' }' StringSplitOptions.RemoveEmptyEntries)) {  						result.Add (int.Parse (line));  					}  					return result;  				}  			}
Magic Number,MonkeyWrench,ProcessHelperLinux,C:\repos\mono_monkeywrench\MonkeyWrench\ProcessHelperLinux.cs,PrintProcessesImplPS,The following statement contains a magic number: using (var ps = new Job ()) {  				ps.StartInfo.FileName = "ps";  				ps.StartInfo.Arguments = "aux";    				var reader = new ProcessReader (log);  				reader.Setup (ps);  				ps.Start ();  				reader.Start ();    				try {  					if (!ps.WaitForExit (1000 * 30 /* 30 seconds */))  						throw new ApplicationException (string.Format ("The 'ps' process didn't exit in 30 seconds."));  				} finally {  					reader.Join ();  				}  			}
Magic Number,MonkeyWrench,ProcessHelperLinux,C:\repos\mono_monkeywrench\MonkeyWrench\ProcessHelperLinux.cs,PrintProcessesImplPS,The following statement contains a magic number: using (var ps = new Job ()) {  				ps.StartInfo.FileName = "ps";  				ps.StartInfo.Arguments = "aux";    				var reader = new ProcessReader (log);  				reader.Setup (ps);  				ps.Start ();  				reader.Start ();    				try {  					if (!ps.WaitForExit (1000 * 30 /* 30 seconds */))  						throw new ApplicationException (string.Format ("The 'ps' process didn't exit in 30 seconds."));  				} finally {  					reader.Join ();  				}  			}
Magic Number,MonkeyWrench,ProcessHelperLinux,C:\repos\mono_monkeywrench\MonkeyWrench\ProcessHelperLinux.cs,RenderStackTraceWithGdb,The following statement contains a magic number: using (var gdb = new Job ()) {  				gdb.StartInfo.FileName = "gdb";  				gdb.StartInfo.Arguments = string.Format ("-ex attach {0} --ex \"info target\" --ex \"info threads\" --ex \"thread apply all bt\" --batch"' pid);    				var reader = new ProcessReader (log);  				reader.Setup (gdb);  				gdb.Start ();  				reader.Start ();    				try {  					if (!gdb.WaitForExit (1000 * 30 /* 30 seconds */))  						throw new ApplicationException (string.Format ("The 'gdb' process didn't exit in 30 seconds."));  				} finally {  					reader.Join ();  				}  			}
Magic Number,MonkeyWrench,ProcessHelperLinux,C:\repos\mono_monkeywrench\MonkeyWrench\ProcessHelperLinux.cs,RenderStackTraceWithGdb,The following statement contains a magic number: using (var gdb = new Job ()) {  				gdb.StartInfo.FileName = "gdb";  				gdb.StartInfo.Arguments = string.Format ("-ex attach {0} --ex \"info target\" --ex \"info threads\" --ex \"thread apply all bt\" --batch"' pid);    				var reader = new ProcessReader (log);  				reader.Setup (gdb);  				gdb.Start ();  				reader.Start ();    				try {  					if (!gdb.WaitForExit (1000 * 30 /* 30 seconds */))  						throw new ApplicationException (string.Format ("The 'gdb' process didn't exit in 30 seconds."));  				} finally {  					reader.Join ();  				}  			}
Magic Number,MonkeyWrench,ProcessHelperLinux,C:\repos\mono_monkeywrench\MonkeyWrench\ProcessHelperLinux.cs,KillImpl,The following statement contains a magic number: using (Process kill = new Process ()) {  				kill.StartInfo.FileName = "kill";  				kill.StartInfo.Arguments = "-9 ";  				foreach (int pid in pids) {  					kill.StartInfo.Arguments += pid.ToString () + " ";  				}    				log.WriteLine (string.Format ("\n * Killing the processes {0} * "' kill.StartInfo.Arguments.Substring (3)));    				kill.StartInfo.UseShellExecute = false;  				kill.Start ();    				if (!kill.WaitForExit (1000 * 15 /* 15 seconds */))  					throw new ApplicationException (string.Format ("The 'kill' process didn't exit in 15 seconds."));  			}
Magic Number,MonkeyWrench,ProcessHelperLinux,C:\repos\mono_monkeywrench\MonkeyWrench\ProcessHelperLinux.cs,KillImpl,The following statement contains a magic number: using (Process kill = new Process ()) {  				kill.StartInfo.FileName = "kill";  				kill.StartInfo.Arguments = "-9 ";  				foreach (int pid in pids) {  					kill.StartInfo.Arguments += pid.ToString () + " ";  				}    				log.WriteLine (string.Format ("\n * Killing the processes {0} * "' kill.StartInfo.Arguments.Substring (3)));    				kill.StartInfo.UseShellExecute = false;  				kill.Start ();    				if (!kill.WaitForExit (1000 * 15 /* 15 seconds */))  					throw new ApplicationException (string.Format ("The 'kill' process didn't exit in 15 seconds."));  			}
Magic Number,MonkeyWrench,ProcessHelperLinux,C:\repos\mono_monkeywrench\MonkeyWrench\ProcessHelperLinux.cs,KillImpl,The following statement contains a magic number: using (Process kill = new Process ()) {  				kill.StartInfo.FileName = "kill";  				kill.StartInfo.Arguments = "-9 ";  				foreach (int pid in pids) {  					kill.StartInfo.Arguments += pid.ToString () + " ";  				}    				log.WriteLine (string.Format ("\n * Killing the processes {0} * "' kill.StartInfo.Arguments.Substring (3)));    				kill.StartInfo.UseShellExecute = false;  				kill.Start ();    				if (!kill.WaitForExit (1000 * 15 /* 15 seconds */))  					throw new ApplicationException (string.Format ("The 'kill' process didn't exit in 15 seconds."));  			}
Magic Number,MonkeyWrench,ProcessHelperMac,C:\repos\mono_monkeywrench\MonkeyWrench\ProcessHelperMac.cs,RenderStackTraceWithGdb,The following statement contains a magic number: try {  				bool using_lldb = false;  				string debugger;    				if (File.Exists ("/usr/bin/gdb")) {  					using_lldb = false;  					debugger = "/usr/bin/gdb";  				} else if (File.Exists ("/usr/bin/lldb")) {  					using_lldb = true;  					debugger = "/usr/bin/lldb";  				} else {  					using_lldb = false; // lets hope "gdb" is somewhere.  					debugger = "gdb";  				}    				var commands = new StringBuilder ();  				using (var dbg = new Job ()) {  					dbg.StartInfo.UseShellExecute = false;  					dbg.StartInfo.FileName = debugger;  					if (using_lldb) {  						commands.AppendFormat ("process attach --pid {0}\n"' pid);  						commands.Append ("thread list\n");  						commands.Append ("thread backtrace all\n");  						commands.Append ("detach\n");  						commands.Append ("quit\n");  						dbg.StartInfo.Arguments = "--source \"" + template + "\"";  					} else {  						commands.AppendFormat ("attach {0}\n"' pid);  						commands.Append ("info target\n");  						commands.Append ("info threads\n");  						commands.Append ("thread apply all bt\n");  						dbg.StartInfo.Arguments = "-batch -x \"" + template + "\"";  					}  					File.WriteAllText (template' commands.ToString ());    					var reader = new ProcessReader (log);  					reader.Setup (dbg);  					dbg.Start ();  					reader.Start ();    					try {  						if (!dbg.WaitForExit (1000 * 30 /* 30 seconds */))  							throw new ApplicationException (string.Format ("The 'gdb' process didn't exit in 30 seconds."' dbg.StartInfo.FileName));  					} finally {  						reader.Join ();  					}  				}  			} finally {  				try {  					File.Delete (template);  				} catch {  				}  			}
Magic Number,MonkeyWrench,ProcessHelperMac,C:\repos\mono_monkeywrench\MonkeyWrench\ProcessHelperMac.cs,RenderStackTraceWithGdb,The following statement contains a magic number: try {  				bool using_lldb = false;  				string debugger;    				if (File.Exists ("/usr/bin/gdb")) {  					using_lldb = false;  					debugger = "/usr/bin/gdb";  				} else if (File.Exists ("/usr/bin/lldb")) {  					using_lldb = true;  					debugger = "/usr/bin/lldb";  				} else {  					using_lldb = false; // lets hope "gdb" is somewhere.  					debugger = "gdb";  				}    				var commands = new StringBuilder ();  				using (var dbg = new Job ()) {  					dbg.StartInfo.UseShellExecute = false;  					dbg.StartInfo.FileName = debugger;  					if (using_lldb) {  						commands.AppendFormat ("process attach --pid {0}\n"' pid);  						commands.Append ("thread list\n");  						commands.Append ("thread backtrace all\n");  						commands.Append ("detach\n");  						commands.Append ("quit\n");  						dbg.StartInfo.Arguments = "--source \"" + template + "\"";  					} else {  						commands.AppendFormat ("attach {0}\n"' pid);  						commands.Append ("info target\n");  						commands.Append ("info threads\n");  						commands.Append ("thread apply all bt\n");  						dbg.StartInfo.Arguments = "-batch -x \"" + template + "\"";  					}  					File.WriteAllText (template' commands.ToString ());    					var reader = new ProcessReader (log);  					reader.Setup (dbg);  					dbg.Start ();  					reader.Start ();    					try {  						if (!dbg.WaitForExit (1000 * 30 /* 30 seconds */))  							throw new ApplicationException (string.Format ("The 'gdb' process didn't exit in 30 seconds."' dbg.StartInfo.FileName));  					} finally {  						reader.Join ();  					}  				}  			} finally {  				try {  					File.Delete (template);  				} catch {  				}  			}
Magic Number,MonkeyWrench,ProcessReader,C:\repos\mono_monkeywrench\MonkeyWrench\ProcessReader.cs,Join,The following statement contains a magic number: if (!stdout_thread.Join (TimeSpan.FromSeconds (15))) {  				log.Error ("Waited 15s for stdout thread to finish' but it didn't");  			}
Magic Number,MonkeyWrench,ProcessReader,C:\repos\mono_monkeywrench\MonkeyWrench\ProcessReader.cs,Join,The following statement contains a magic number: if (!stderr_thread.Join (TimeSpan.FromSeconds (15))) {  				log.Error ("Waited 15s for stderr thread to finish' but it didn't");  			}
Magic Number,NDesk.Options,OptionSet,C:\repos\mono_monkeywrench\MonkeyWrench\Options.cs,Add,The following statement contains a magic number: Option p = new ActionOption (prototype' description' 2' (v) => action (v [0]' v [1]));
Missing Default,NDesk.Options,OptionSet,C:\repos\mono_monkeywrench\MonkeyWrench\Options.cs,Parse,The following switch statement is missing a default case: switch (p.OptionValueType) {  					case OptionValueType.None:  						c.OptionValues.Add (n);  						c.Option.Invoke (c);  						break;  					case OptionValueType.Optional:  					case OptionValueType.Required:   						ParseValue (v' c);  						break;  				}
