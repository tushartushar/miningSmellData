Implementation smell,Namespace,Class,File,Method,Description
Long Statement,MonkeyWrench.Web.JSON,RecentRevWorks,C:\repos\mono_monkeywrench\MonkeyWrench.Web.JSON\RecentRevWorks.ashx.cs,ProcessRequest,The length of the statement  "					SELECT rw.id' lane' host.host' revision' rw.state' rw.createdtime' rw.assignedtime' rw.startedtime' rw.endtime' workhost.host " is 125.
Long Statement,MonkeyWrench.Web.JSON,Utils,C:\repos\mono_monkeywrench\MonkeyWrench.Web.JSON\Utils.cs,isAuthorized,The length of the statement  "			using (var cmd = db.CreateCommand (@"SELECT 1 FROM person WHERE login = @username AND password = @password AND password != ''")) { " is 130.
Magic Number,MonkeyWrench.Web.JSON,Global,C:\repos\mono_monkeywrench\MonkeyWrench.Web.JSON\Global.asax.cs,Application_BeginRequest,The following statement contains a magic number: using (var db = new DB ()) {  				if (!Utils.isAuthorized (db' Request ["username"]' Request ["password"])) {  					Response.StatusCode = 403;  					Response.ContentType = "text/plain";  					Response.Write ("Not authorized.");  					CompleteRequest ();  					return;  				}  			}
Magic Number,MonkeyWrench.Web.JSON,Global,C:\repos\mono_monkeywrench\MonkeyWrench.Web.JSON\Global.asax.cs,Application_Error,The following statement contains a magic number: if (inner is HttpException && (inner as HttpException).GetHttpCode () == 404) {  				Response.StatusCode = 404;  				Response.Write ("Not found.");  			} else if (inner is UnauthorizedException) {  				Response.StatusCode = 503;  				Response.Write (ex.Message);  			} else {  				log.ErrorFormat ("{0}: {1}"' Request.Url.AbsoluteUri' ex);    				Response.StatusCode = 500;  				Response.Write ("Internal server error");  			}
Magic Number,MonkeyWrench.Web.JSON,Global,C:\repos\mono_monkeywrench\MonkeyWrench.Web.JSON\Global.asax.cs,Application_Error,The following statement contains a magic number: if (inner is HttpException && (inner as HttpException).GetHttpCode () == 404) {  				Response.StatusCode = 404;  				Response.Write ("Not found.");  			} else if (inner is UnauthorizedException) {  				Response.StatusCode = 503;  				Response.Write (ex.Message);  			} else {  				log.ErrorFormat ("{0}: {1}"' Request.Url.AbsoluteUri' ex);    				Response.StatusCode = 500;  				Response.Write ("Internal server error");  			}
Magic Number,MonkeyWrench.Web.JSON,Global,C:\repos\mono_monkeywrench\MonkeyWrench.Web.JSON\Global.asax.cs,Application_Error,The following statement contains a magic number: if (inner is HttpException && (inner as HttpException).GetHttpCode () == 404) {  				Response.StatusCode = 404;  				Response.Write ("Not found.");  			} else if (inner is UnauthorizedException) {  				Response.StatusCode = 503;  				Response.Write (ex.Message);  			} else {  				log.ErrorFormat ("{0}: {1}"' Request.Url.AbsoluteUri' ex);    				Response.StatusCode = 500;  				Response.Write ("Internal server error");  			}
Magic Number,MonkeyWrench.Web.JSON,Global,C:\repos\mono_monkeywrench\MonkeyWrench.Web.JSON\Global.asax.cs,Application_Error,The following statement contains a magic number: if (inner is HttpException && (inner as HttpException).GetHttpCode () == 404) {  				Response.StatusCode = 404;  				Response.Write ("Not found.");  			} else if (inner is UnauthorizedException) {  				Response.StatusCode = 503;  				Response.Write (ex.Message);  			} else {  				log.ErrorFormat ("{0}: {1}"' Request.Url.AbsoluteUri' ex);    				Response.StatusCode = 500;  				Response.Write ("Internal server error");  			}
Magic Number,MonkeyWrench.Web.JSON,RecentRevWorks,C:\repos\mono_monkeywrench\MonkeyWrench.Web.JSON\RecentRevWorks.ashx.cs,dateTimeToMilliseconds,The following statement contains a magic number: return t == null ? null : (ulong?)((t.Value - new DateTime (1970' 1' 1' 0' 0' 0' DateTimeKind.Utc)).TotalMilliseconds);
Magic Number,MonkeyWrench.Web.JSON,RecentRevWorks,C:\repos\mono_monkeywrench\MonkeyWrench.Web.JSON\RecentRevWorks.ashx.cs,ProcessRequest,The following statement contains a magic number: if (lane_id == null) {  				context.Response.StatusCode = 400;  				context.Response.ContentType = "text/plain";  				context.Response.Write ("lane_id GET parameter is required.");  				return;  			}
Magic Number,MonkeyWrench.Web.JSON,RecentRevWorks,C:\repos\mono_monkeywrench\MonkeyWrench.Web.JSON\RecentRevWorks.ashx.cs,ProcessRequest,The following statement contains a magic number: using (var db = new DB ())  			using (var cmd = db.CreateCommand ()) {  				DB.CreateParameter (cmd' "nlimit"' LIMIT);  				DB.CreateParameter (cmd' "lane_id"' (int) lane_id.Value);    				cmd.CommandText = @"SELECT 1 FROM lane WHERE id = @lane_id";  				if (cmd.ExecuteScalar () == null) {  					context.Response.StatusCode = 404;  					context.Response.ContentType = "text/plain";  					context.Response.Write ("No such lane.");  					return;  				}    				cmd.CommandText = @"  					SELECT rw.id' lane' host.host' revision' rw.state' rw.createdtime' rw.assignedtime' rw.startedtime' rw.endtime' workhost.host  					FROM revisionwork AS rw  					INNER JOIN lane ON lane.id = rw.lane_id  					INNER JOIN host ON host.id = rw.host_id  					LEFT OUTER JOIN host AS workhost ON workhost.id = rw.workhost_id  					INNER JOIN revision ON revision.id = rw.revision_id  					WHERE lane.id = @lane_id AND createdtime IS NOT NULL  					ORDER BY rw.createdtime DESC  					LIMIT @nlimit;  				";    				using (var reader = cmd.ExecuteReader ()) {  					var commits = new JArray ();  					while (reader.Read ()) {  						var commit = new JObject ();  						commit ["id"] = reader.GetInt32 (0);  						commit ["lane"] = reader.GetString (1);  						commit ["host"] = reader.GetString (2);  						commit ["revision"] = reader.GetString (3);  						commit ["status"] = reader.GetInt32 (4);  						commit ["createdtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(5));  						commit ["assignedtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(6));  						commit ["startedtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(7));  						commit ["endtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(8));  						commit ["assignedhost"] = reader.IsDBNull(9) ? null : reader.GetString (9);  						commits.Add (commit);  					}  					context.Response.StatusCode = 200;  					context.Response.ContentType = "application/json";  					context.Response.Write (commits.ToString ());  				}  			}
Magic Number,MonkeyWrench.Web.JSON,RecentRevWorks,C:\repos\mono_monkeywrench\MonkeyWrench.Web.JSON\RecentRevWorks.ashx.cs,ProcessRequest,The following statement contains a magic number: using (var db = new DB ())  			using (var cmd = db.CreateCommand ()) {  				DB.CreateParameter (cmd' "nlimit"' LIMIT);  				DB.CreateParameter (cmd' "lane_id"' (int) lane_id.Value);    				cmd.CommandText = @"SELECT 1 FROM lane WHERE id = @lane_id";  				if (cmd.ExecuteScalar () == null) {  					context.Response.StatusCode = 404;  					context.Response.ContentType = "text/plain";  					context.Response.Write ("No such lane.");  					return;  				}    				cmd.CommandText = @"  					SELECT rw.id' lane' host.host' revision' rw.state' rw.createdtime' rw.assignedtime' rw.startedtime' rw.endtime' workhost.host  					FROM revisionwork AS rw  					INNER JOIN lane ON lane.id = rw.lane_id  					INNER JOIN host ON host.id = rw.host_id  					LEFT OUTER JOIN host AS workhost ON workhost.id = rw.workhost_id  					INNER JOIN revision ON revision.id = rw.revision_id  					WHERE lane.id = @lane_id AND createdtime IS NOT NULL  					ORDER BY rw.createdtime DESC  					LIMIT @nlimit;  				";    				using (var reader = cmd.ExecuteReader ()) {  					var commits = new JArray ();  					while (reader.Read ()) {  						var commit = new JObject ();  						commit ["id"] = reader.GetInt32 (0);  						commit ["lane"] = reader.GetString (1);  						commit ["host"] = reader.GetString (2);  						commit ["revision"] = reader.GetString (3);  						commit ["status"] = reader.GetInt32 (4);  						commit ["createdtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(5));  						commit ["assignedtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(6));  						commit ["startedtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(7));  						commit ["endtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(8));  						commit ["assignedhost"] = reader.IsDBNull(9) ? null : reader.GetString (9);  						commits.Add (commit);  					}  					context.Response.StatusCode = 200;  					context.Response.ContentType = "application/json";  					context.Response.Write (commits.ToString ());  				}  			}
Magic Number,MonkeyWrench.Web.JSON,RecentRevWorks,C:\repos\mono_monkeywrench\MonkeyWrench.Web.JSON\RecentRevWorks.ashx.cs,ProcessRequest,The following statement contains a magic number: using (var db = new DB ())  			using (var cmd = db.CreateCommand ()) {  				DB.CreateParameter (cmd' "nlimit"' LIMIT);  				DB.CreateParameter (cmd' "lane_id"' (int) lane_id.Value);    				cmd.CommandText = @"SELECT 1 FROM lane WHERE id = @lane_id";  				if (cmd.ExecuteScalar () == null) {  					context.Response.StatusCode = 404;  					context.Response.ContentType = "text/plain";  					context.Response.Write ("No such lane.");  					return;  				}    				cmd.CommandText = @"  					SELECT rw.id' lane' host.host' revision' rw.state' rw.createdtime' rw.assignedtime' rw.startedtime' rw.endtime' workhost.host  					FROM revisionwork AS rw  					INNER JOIN lane ON lane.id = rw.lane_id  					INNER JOIN host ON host.id = rw.host_id  					LEFT OUTER JOIN host AS workhost ON workhost.id = rw.workhost_id  					INNER JOIN revision ON revision.id = rw.revision_id  					WHERE lane.id = @lane_id AND createdtime IS NOT NULL  					ORDER BY rw.createdtime DESC  					LIMIT @nlimit;  				";    				using (var reader = cmd.ExecuteReader ()) {  					var commits = new JArray ();  					while (reader.Read ()) {  						var commit = new JObject ();  						commit ["id"] = reader.GetInt32 (0);  						commit ["lane"] = reader.GetString (1);  						commit ["host"] = reader.GetString (2);  						commit ["revision"] = reader.GetString (3);  						commit ["status"] = reader.GetInt32 (4);  						commit ["createdtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(5));  						commit ["assignedtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(6));  						commit ["startedtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(7));  						commit ["endtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(8));  						commit ["assignedhost"] = reader.IsDBNull(9) ? null : reader.GetString (9);  						commits.Add (commit);  					}  					context.Response.StatusCode = 200;  					context.Response.ContentType = "application/json";  					context.Response.Write (commits.ToString ());  				}  			}
Magic Number,MonkeyWrench.Web.JSON,RecentRevWorks,C:\repos\mono_monkeywrench\MonkeyWrench.Web.JSON\RecentRevWorks.ashx.cs,ProcessRequest,The following statement contains a magic number: using (var db = new DB ())  			using (var cmd = db.CreateCommand ()) {  				DB.CreateParameter (cmd' "nlimit"' LIMIT);  				DB.CreateParameter (cmd' "lane_id"' (int) lane_id.Value);    				cmd.CommandText = @"SELECT 1 FROM lane WHERE id = @lane_id";  				if (cmd.ExecuteScalar () == null) {  					context.Response.StatusCode = 404;  					context.Response.ContentType = "text/plain";  					context.Response.Write ("No such lane.");  					return;  				}    				cmd.CommandText = @"  					SELECT rw.id' lane' host.host' revision' rw.state' rw.createdtime' rw.assignedtime' rw.startedtime' rw.endtime' workhost.host  					FROM revisionwork AS rw  					INNER JOIN lane ON lane.id = rw.lane_id  					INNER JOIN host ON host.id = rw.host_id  					LEFT OUTER JOIN host AS workhost ON workhost.id = rw.workhost_id  					INNER JOIN revision ON revision.id = rw.revision_id  					WHERE lane.id = @lane_id AND createdtime IS NOT NULL  					ORDER BY rw.createdtime DESC  					LIMIT @nlimit;  				";    				using (var reader = cmd.ExecuteReader ()) {  					var commits = new JArray ();  					while (reader.Read ()) {  						var commit = new JObject ();  						commit ["id"] = reader.GetInt32 (0);  						commit ["lane"] = reader.GetString (1);  						commit ["host"] = reader.GetString (2);  						commit ["revision"] = reader.GetString (3);  						commit ["status"] = reader.GetInt32 (4);  						commit ["createdtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(5));  						commit ["assignedtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(6));  						commit ["startedtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(7));  						commit ["endtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(8));  						commit ["assignedhost"] = reader.IsDBNull(9) ? null : reader.GetString (9);  						commits.Add (commit);  					}  					context.Response.StatusCode = 200;  					context.Response.ContentType = "application/json";  					context.Response.Write (commits.ToString ());  				}  			}
Magic Number,MonkeyWrench.Web.JSON,RecentRevWorks,C:\repos\mono_monkeywrench\MonkeyWrench.Web.JSON\RecentRevWorks.ashx.cs,ProcessRequest,The following statement contains a magic number: using (var db = new DB ())  			using (var cmd = db.CreateCommand ()) {  				DB.CreateParameter (cmd' "nlimit"' LIMIT);  				DB.CreateParameter (cmd' "lane_id"' (int) lane_id.Value);    				cmd.CommandText = @"SELECT 1 FROM lane WHERE id = @lane_id";  				if (cmd.ExecuteScalar () == null) {  					context.Response.StatusCode = 404;  					context.Response.ContentType = "text/plain";  					context.Response.Write ("No such lane.");  					return;  				}    				cmd.CommandText = @"  					SELECT rw.id' lane' host.host' revision' rw.state' rw.createdtime' rw.assignedtime' rw.startedtime' rw.endtime' workhost.host  					FROM revisionwork AS rw  					INNER JOIN lane ON lane.id = rw.lane_id  					INNER JOIN host ON host.id = rw.host_id  					LEFT OUTER JOIN host AS workhost ON workhost.id = rw.workhost_id  					INNER JOIN revision ON revision.id = rw.revision_id  					WHERE lane.id = @lane_id AND createdtime IS NOT NULL  					ORDER BY rw.createdtime DESC  					LIMIT @nlimit;  				";    				using (var reader = cmd.ExecuteReader ()) {  					var commits = new JArray ();  					while (reader.Read ()) {  						var commit = new JObject ();  						commit ["id"] = reader.GetInt32 (0);  						commit ["lane"] = reader.GetString (1);  						commit ["host"] = reader.GetString (2);  						commit ["revision"] = reader.GetString (3);  						commit ["status"] = reader.GetInt32 (4);  						commit ["createdtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(5));  						commit ["assignedtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(6));  						commit ["startedtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(7));  						commit ["endtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(8));  						commit ["assignedhost"] = reader.IsDBNull(9) ? null : reader.GetString (9);  						commits.Add (commit);  					}  					context.Response.StatusCode = 200;  					context.Response.ContentType = "application/json";  					context.Response.Write (commits.ToString ());  				}  			}
Magic Number,MonkeyWrench.Web.JSON,RecentRevWorks,C:\repos\mono_monkeywrench\MonkeyWrench.Web.JSON\RecentRevWorks.ashx.cs,ProcessRequest,The following statement contains a magic number: using (var db = new DB ())  			using (var cmd = db.CreateCommand ()) {  				DB.CreateParameter (cmd' "nlimit"' LIMIT);  				DB.CreateParameter (cmd' "lane_id"' (int) lane_id.Value);    				cmd.CommandText = @"SELECT 1 FROM lane WHERE id = @lane_id";  				if (cmd.ExecuteScalar () == null) {  					context.Response.StatusCode = 404;  					context.Response.ContentType = "text/plain";  					context.Response.Write ("No such lane.");  					return;  				}    				cmd.CommandText = @"  					SELECT rw.id' lane' host.host' revision' rw.state' rw.createdtime' rw.assignedtime' rw.startedtime' rw.endtime' workhost.host  					FROM revisionwork AS rw  					INNER JOIN lane ON lane.id = rw.lane_id  					INNER JOIN host ON host.id = rw.host_id  					LEFT OUTER JOIN host AS workhost ON workhost.id = rw.workhost_id  					INNER JOIN revision ON revision.id = rw.revision_id  					WHERE lane.id = @lane_id AND createdtime IS NOT NULL  					ORDER BY rw.createdtime DESC  					LIMIT @nlimit;  				";    				using (var reader = cmd.ExecuteReader ()) {  					var commits = new JArray ();  					while (reader.Read ()) {  						var commit = new JObject ();  						commit ["id"] = reader.GetInt32 (0);  						commit ["lane"] = reader.GetString (1);  						commit ["host"] = reader.GetString (2);  						commit ["revision"] = reader.GetString (3);  						commit ["status"] = reader.GetInt32 (4);  						commit ["createdtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(5));  						commit ["assignedtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(6));  						commit ["startedtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(7));  						commit ["endtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(8));  						commit ["assignedhost"] = reader.IsDBNull(9) ? null : reader.GetString (9);  						commits.Add (commit);  					}  					context.Response.StatusCode = 200;  					context.Response.ContentType = "application/json";  					context.Response.Write (commits.ToString ());  				}  			}
Magic Number,MonkeyWrench.Web.JSON,RecentRevWorks,C:\repos\mono_monkeywrench\MonkeyWrench.Web.JSON\RecentRevWorks.ashx.cs,ProcessRequest,The following statement contains a magic number: using (var db = new DB ())  			using (var cmd = db.CreateCommand ()) {  				DB.CreateParameter (cmd' "nlimit"' LIMIT);  				DB.CreateParameter (cmd' "lane_id"' (int) lane_id.Value);    				cmd.CommandText = @"SELECT 1 FROM lane WHERE id = @lane_id";  				if (cmd.ExecuteScalar () == null) {  					context.Response.StatusCode = 404;  					context.Response.ContentType = "text/plain";  					context.Response.Write ("No such lane.");  					return;  				}    				cmd.CommandText = @"  					SELECT rw.id' lane' host.host' revision' rw.state' rw.createdtime' rw.assignedtime' rw.startedtime' rw.endtime' workhost.host  					FROM revisionwork AS rw  					INNER JOIN lane ON lane.id = rw.lane_id  					INNER JOIN host ON host.id = rw.host_id  					LEFT OUTER JOIN host AS workhost ON workhost.id = rw.workhost_id  					INNER JOIN revision ON revision.id = rw.revision_id  					WHERE lane.id = @lane_id AND createdtime IS NOT NULL  					ORDER BY rw.createdtime DESC  					LIMIT @nlimit;  				";    				using (var reader = cmd.ExecuteReader ()) {  					var commits = new JArray ();  					while (reader.Read ()) {  						var commit = new JObject ();  						commit ["id"] = reader.GetInt32 (0);  						commit ["lane"] = reader.GetString (1);  						commit ["host"] = reader.GetString (2);  						commit ["revision"] = reader.GetString (3);  						commit ["status"] = reader.GetInt32 (4);  						commit ["createdtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(5));  						commit ["assignedtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(6));  						commit ["startedtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(7));  						commit ["endtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(8));  						commit ["assignedhost"] = reader.IsDBNull(9) ? null : reader.GetString (9);  						commits.Add (commit);  					}  					context.Response.StatusCode = 200;  					context.Response.ContentType = "application/json";  					context.Response.Write (commits.ToString ());  				}  			}
Magic Number,MonkeyWrench.Web.JSON,RecentRevWorks,C:\repos\mono_monkeywrench\MonkeyWrench.Web.JSON\RecentRevWorks.ashx.cs,ProcessRequest,The following statement contains a magic number: using (var db = new DB ())  			using (var cmd = db.CreateCommand ()) {  				DB.CreateParameter (cmd' "nlimit"' LIMIT);  				DB.CreateParameter (cmd' "lane_id"' (int) lane_id.Value);    				cmd.CommandText = @"SELECT 1 FROM lane WHERE id = @lane_id";  				if (cmd.ExecuteScalar () == null) {  					context.Response.StatusCode = 404;  					context.Response.ContentType = "text/plain";  					context.Response.Write ("No such lane.");  					return;  				}    				cmd.CommandText = @"  					SELECT rw.id' lane' host.host' revision' rw.state' rw.createdtime' rw.assignedtime' rw.startedtime' rw.endtime' workhost.host  					FROM revisionwork AS rw  					INNER JOIN lane ON lane.id = rw.lane_id  					INNER JOIN host ON host.id = rw.host_id  					LEFT OUTER JOIN host AS workhost ON workhost.id = rw.workhost_id  					INNER JOIN revision ON revision.id = rw.revision_id  					WHERE lane.id = @lane_id AND createdtime IS NOT NULL  					ORDER BY rw.createdtime DESC  					LIMIT @nlimit;  				";    				using (var reader = cmd.ExecuteReader ()) {  					var commits = new JArray ();  					while (reader.Read ()) {  						var commit = new JObject ();  						commit ["id"] = reader.GetInt32 (0);  						commit ["lane"] = reader.GetString (1);  						commit ["host"] = reader.GetString (2);  						commit ["revision"] = reader.GetString (3);  						commit ["status"] = reader.GetInt32 (4);  						commit ["createdtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(5));  						commit ["assignedtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(6));  						commit ["startedtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(7));  						commit ["endtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(8));  						commit ["assignedhost"] = reader.IsDBNull(9) ? null : reader.GetString (9);  						commits.Add (commit);  					}  					context.Response.StatusCode = 200;  					context.Response.ContentType = "application/json";  					context.Response.Write (commits.ToString ());  				}  			}
Magic Number,MonkeyWrench.Web.JSON,RecentRevWorks,C:\repos\mono_monkeywrench\MonkeyWrench.Web.JSON\RecentRevWorks.ashx.cs,ProcessRequest,The following statement contains a magic number: using (var db = new DB ())  			using (var cmd = db.CreateCommand ()) {  				DB.CreateParameter (cmd' "nlimit"' LIMIT);  				DB.CreateParameter (cmd' "lane_id"' (int) lane_id.Value);    				cmd.CommandText = @"SELECT 1 FROM lane WHERE id = @lane_id";  				if (cmd.ExecuteScalar () == null) {  					context.Response.StatusCode = 404;  					context.Response.ContentType = "text/plain";  					context.Response.Write ("No such lane.");  					return;  				}    				cmd.CommandText = @"  					SELECT rw.id' lane' host.host' revision' rw.state' rw.createdtime' rw.assignedtime' rw.startedtime' rw.endtime' workhost.host  					FROM revisionwork AS rw  					INNER JOIN lane ON lane.id = rw.lane_id  					INNER JOIN host ON host.id = rw.host_id  					LEFT OUTER JOIN host AS workhost ON workhost.id = rw.workhost_id  					INNER JOIN revision ON revision.id = rw.revision_id  					WHERE lane.id = @lane_id AND createdtime IS NOT NULL  					ORDER BY rw.createdtime DESC  					LIMIT @nlimit;  				";    				using (var reader = cmd.ExecuteReader ()) {  					var commits = new JArray ();  					while (reader.Read ()) {  						var commit = new JObject ();  						commit ["id"] = reader.GetInt32 (0);  						commit ["lane"] = reader.GetString (1);  						commit ["host"] = reader.GetString (2);  						commit ["revision"] = reader.GetString (3);  						commit ["status"] = reader.GetInt32 (4);  						commit ["createdtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(5));  						commit ["assignedtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(6));  						commit ["startedtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(7));  						commit ["endtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(8));  						commit ["assignedhost"] = reader.IsDBNull(9) ? null : reader.GetString (9);  						commits.Add (commit);  					}  					context.Response.StatusCode = 200;  					context.Response.ContentType = "application/json";  					context.Response.Write (commits.ToString ());  				}  			}
Magic Number,MonkeyWrench.Web.JSON,RecentRevWorks,C:\repos\mono_monkeywrench\MonkeyWrench.Web.JSON\RecentRevWorks.ashx.cs,ProcessRequest,The following statement contains a magic number: using (var db = new DB ())  			using (var cmd = db.CreateCommand ()) {  				DB.CreateParameter (cmd' "nlimit"' LIMIT);  				DB.CreateParameter (cmd' "lane_id"' (int) lane_id.Value);    				cmd.CommandText = @"SELECT 1 FROM lane WHERE id = @lane_id";  				if (cmd.ExecuteScalar () == null) {  					context.Response.StatusCode = 404;  					context.Response.ContentType = "text/plain";  					context.Response.Write ("No such lane.");  					return;  				}    				cmd.CommandText = @"  					SELECT rw.id' lane' host.host' revision' rw.state' rw.createdtime' rw.assignedtime' rw.startedtime' rw.endtime' workhost.host  					FROM revisionwork AS rw  					INNER JOIN lane ON lane.id = rw.lane_id  					INNER JOIN host ON host.id = rw.host_id  					LEFT OUTER JOIN host AS workhost ON workhost.id = rw.workhost_id  					INNER JOIN revision ON revision.id = rw.revision_id  					WHERE lane.id = @lane_id AND createdtime IS NOT NULL  					ORDER BY rw.createdtime DESC  					LIMIT @nlimit;  				";    				using (var reader = cmd.ExecuteReader ()) {  					var commits = new JArray ();  					while (reader.Read ()) {  						var commit = new JObject ();  						commit ["id"] = reader.GetInt32 (0);  						commit ["lane"] = reader.GetString (1);  						commit ["host"] = reader.GetString (2);  						commit ["revision"] = reader.GetString (3);  						commit ["status"] = reader.GetInt32 (4);  						commit ["createdtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(5));  						commit ["assignedtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(6));  						commit ["startedtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(7));  						commit ["endtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(8));  						commit ["assignedhost"] = reader.IsDBNull(9) ? null : reader.GetString (9);  						commits.Add (commit);  					}  					context.Response.StatusCode = 200;  					context.Response.ContentType = "application/json";  					context.Response.Write (commits.ToString ());  				}  			}
Magic Number,MonkeyWrench.Web.JSON,RecentRevWorks,C:\repos\mono_monkeywrench\MonkeyWrench.Web.JSON\RecentRevWorks.ashx.cs,ProcessRequest,The following statement contains a magic number: using (var db = new DB ())  			using (var cmd = db.CreateCommand ()) {  				DB.CreateParameter (cmd' "nlimit"' LIMIT);  				DB.CreateParameter (cmd' "lane_id"' (int) lane_id.Value);    				cmd.CommandText = @"SELECT 1 FROM lane WHERE id = @lane_id";  				if (cmd.ExecuteScalar () == null) {  					context.Response.StatusCode = 404;  					context.Response.ContentType = "text/plain";  					context.Response.Write ("No such lane.");  					return;  				}    				cmd.CommandText = @"  					SELECT rw.id' lane' host.host' revision' rw.state' rw.createdtime' rw.assignedtime' rw.startedtime' rw.endtime' workhost.host  					FROM revisionwork AS rw  					INNER JOIN lane ON lane.id = rw.lane_id  					INNER JOIN host ON host.id = rw.host_id  					LEFT OUTER JOIN host AS workhost ON workhost.id = rw.workhost_id  					INNER JOIN revision ON revision.id = rw.revision_id  					WHERE lane.id = @lane_id AND createdtime IS NOT NULL  					ORDER BY rw.createdtime DESC  					LIMIT @nlimit;  				";    				using (var reader = cmd.ExecuteReader ()) {  					var commits = new JArray ();  					while (reader.Read ()) {  						var commit = new JObject ();  						commit ["id"] = reader.GetInt32 (0);  						commit ["lane"] = reader.GetString (1);  						commit ["host"] = reader.GetString (2);  						commit ["revision"] = reader.GetString (3);  						commit ["status"] = reader.GetInt32 (4);  						commit ["createdtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(5));  						commit ["assignedtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(6));  						commit ["startedtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(7));  						commit ["endtime"] = dateTimeToMilliseconds(reader.GetDateTimeOrNull(8));  						commit ["assignedhost"] = reader.IsDBNull(9) ? null : reader.GetString (9);  						commits.Add (commit);  					}  					context.Response.StatusCode = 200;  					context.Response.ContentType = "application/json";  					context.Response.Write (commits.ToString ());  				}  			}
Magic Number,MonkeyWrench.Web.JSON,Lanes,C:\repos\mono_monkeywrench\MonkeyWrench.Web.JSON\Lanes.ashx.cs,ProcessRequest,The following statement contains a magic number: using (var db = new DB ())  			using (var cmd = db.CreateCommand (@"SELECT id' lane FROM lane WHERE enabled;"))  			using (var reader = cmd.ExecuteReader ()) {  				var results = new JArray ();  				while (reader.Read ()) {  					var lane = new JObject ();  					lane ["id"] = reader.GetInt32 (0);  					lane ["name"] = reader.GetString (1);  					results.Add (lane);  				}    				context.Response.StatusCode = 200;  				context.Response.ContentType = "application/json";  				context.Response.Write (results.ToString ());  			}
