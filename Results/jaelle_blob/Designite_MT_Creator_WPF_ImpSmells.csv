Implementation smell,Namespace,Class,File,Method,Description
Long Method,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,RefreshScene,The method has 134 lines of code.
Long Method,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Export,The method has 216 lines of code.
Complex Method,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Draggables_MouseMove,Cyclomatic complexity of the method is 16
Complex Method,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,RefreshScene,Cyclomatic complexity of the method is 14
Complex Method,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,findElement,Cyclomatic complexity of the method is 13
Complex Method,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,savedGestures,Cyclomatic complexity of the method is 8
Complex Method,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Export,Cyclomatic complexity of the method is 25
Complex Method,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,gestureWriter,Cyclomatic complexity of the method is 9
Complex Method,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Properties_Click,Cyclomatic complexity of the method is 17
Long Parameter List,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,RefreshScene,The method has 6 parameters.
Long Parameter List,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,UpdateScene,The method has 6 parameters.
Long Statement,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Draggables_MouseMove,The length of the statement  "				if ((isMouseDragging == false) && ((Math.Abs (e.GetPosition (scene).X - startPoint.X) > SystemParameters.MinimumHorizontalDragDistance) || (Math.Abs (e.GetPosition (scene).Y - startPoint.Y) > SystemParameters.MinimumVerticalDragDistance))) " is 239.
Long Statement,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Draggables_MouseMove,The length of the statement  "				if ((isMouseDragging == false) && ((Math.Abs (e.GetPosition (scene).X - startPoint.X) > SystemParameters.MinimumHorizontalDragDistance) || (Math.Abs (e.GetPosition (scene).Y - startPoint.Y) > SystemParameters.MinimumVerticalDragDistance))) " is 239.
Long Statement,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Draggables_MouseMove,The length of the statement  "				if ((isMouseDragging == false) && ((Math.Abs (e.GetPosition (scene).X - startPoint.X) > SystemParameters.MinimumHorizontalDragDistance) || (Math.Abs (e.GetPosition (scene).Y - startPoint.Y) > SystemParameters.MinimumVerticalDragDistance))) " is 239.
Long Statement,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Export,The length of the statement  "				writer.Write ("<TextBox Name=\"" + elementName + imageNum + gestureName + "_Scene" + "\" Text=\"" + elm.linksTo + "\" Visibility=\"Hidden\" />"); " is 145.
Long Statement,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Export,The length of the statement  "			writer.Write ("<StackPanel Name=\"" + elementName + videoNum + "Container" + gestureName + "\" Background=\"Black\" Width=\"" + elm.width + "\" Height=\"" + (elm.height + 30) + "\" IsManipulationEnabled=\"" + isManipulationEnabled + "\">"); " is 240.
Long Statement,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Export,The length of the statement  "			writer.Write ("<Image Source=\"icons\\pause.png\" Width=\"30\" Height=\"30\" HorizontalAlignment=\"Left\" Visibility=\"Collapsed\" />"); " is 136.
Long Statement,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Export,The length of the statement  "			writer.Write (" Width=\"" + elm.width + "\" Height=\"" + elm.height + "\"" + " FontFamily=\"" + elm.ff.ToString () + "\"" + " FontSize=\"" + elm.fontSize + "\"" + " Foreground=\"" + (Color)elm.fontColor.Color + "\">"); " is 218.
Long Statement,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Export,The length of the statement  "				writer.Write ("<TextBox Name=\"" + elementName + textNum + gestureName + "_Scene" + "\" Text=\"" + elm.linksTo + "\" Visibility=\"Hidden\" />"); " is 144.
Long Statement,MT_Creator_WPF,addImage,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\addImage.xaml.cs,Browse_Click,The length of the statement  "	dlg.Filter = "JPG Images(.jpg)|*.jpg|PNG Images(.png|*.png|JPEG Images(.jpeg)|*.jpeg|GIF Images(.gif)|*.gif|BMP Images(.bmp)|*.bmp"; " is 132.
Long Statement,MT_Creator_WPF,Adorners,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Adorners.cs,HandleBR,The length of the statement  "	UpdateElm ((int)adornedElement.Height' (int)adornedElement.Width' (int)Canvas.GetLeft (adornedElement)' (int)Canvas.GetTop (adornedElement)); " is 141.
Long Statement,MT_Creator_WPF,Adorners,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Adorners.cs,HandleTR,The length of the statement  "	UpdateElm ((int)height_new' (int)adornedElement.Width' (int)(Canvas.GetTop (adornedElement))' (int)(top_old - (height_new - height_old))); " is 138.
Long Statement,MT_Creator_WPF,Adorners,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Adorners.cs,HandleTL,The length of the statement  "	UpdateElm ((int)height_new' (int)adornedElement.Width' (int)Canvas.GetTop (adornedElement)' (int)(top_old - (height_new - height_old))); " is 136.
Long Statement,MT_Creator_WPF,Adorners,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Adorners.cs,HandleBL,The length of the statement  "	UpdateElm ((int)adornedElement.Height' (int)width_new' (int)(left_old - (width_new - width_old))' (int)Canvas.GetTop (adornedElement)); " is 135.
Long Statement,MT_Creator_WPF,Adorners,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Adorners.cs,ArrangeOverride,The length of the statement  "	br.Arrange (new Rect (desiredWidth - adornerWidth / 2' desiredHeight - adornerHeight / 2' adornerWidth' adornerHeight)); " is 120.
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Window1,The following statement contains a magic number: if (applicationPath.Substring (0' 6) == "file:\\") {  	applicationPath = applicationPath.Remove (0' 6);  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Window1,The following statement contains a magic number: if (applicationPath.Substring (0' 6) == "file:\\") {  	applicationPath = applicationPath.Remove (0' 6);  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Window1,The following statement contains a magic number: applicationPath = applicationPath.Remove (0' 6);  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Window1,The following statement contains a magic number: fontSize = 10;  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,OnStartup,The following statement contains a magic number: if (applicationPath.Substring (0' 6) == "file:\\") {  	applicationPath = applicationPath.Remove (0' 6);  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,OnStartup,The following statement contains a magic number: if (applicationPath.Substring (0' 6) == "file:\\") {  	applicationPath = applicationPath.Remove (0' 6);  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,OnStartup,The following statement contains a magic number: applicationPath = applicationPath.Remove (0' 6);  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Click_Load,The following statement contains a magic number: if (result == true) {  	//Clear the scene.  	scene.Children.Clear ();  	myScene.Clear ();  	selectedElement = null;  	// Open document  	string filename = dlg.FileName;  	string dirname = System.IO.Path.GetDirectoryName (filename);  	StreamReader lfile = new StreamReader (filename);  	string line;  	string bg;  	int index1' index2;  	while ((line = lfile.ReadLine ()) != null) {  		if (line.Contains ("Background=\"")) {  			index1 = line.IndexOf ("Background=\"");  			index2 = line.IndexOf ('"'' index1 + 12);  			bg = line.Substring (index1 + 12' index2 - index1 - 12);  			BrushConverter fromHex = new BrushConverter ();  			bgColor = (SolidColorBrush)(fromHex.ConvertFrom (bg));  			scene.Background = bgColor;  		}  		if (line.Contains ("Image Name")) {  			processImage (line' dirname);  			curType = (int)TYPE.IMAGE;  		}  		if (line.Contains ("MediaElement Name")) {  			processMedia (line' dirname);  			curType = (int)TYPE.VIDEO;  		}  		if (line.Contains ("TextBlock Name")) {  			processText (line);  			curType = (int)TYPE.TEXT;  		}  	}  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Click_Load,The following statement contains a magic number: if (result == true) {  	//Clear the scene.  	scene.Children.Clear ();  	myScene.Clear ();  	selectedElement = null;  	// Open document  	string filename = dlg.FileName;  	string dirname = System.IO.Path.GetDirectoryName (filename);  	StreamReader lfile = new StreamReader (filename);  	string line;  	string bg;  	int index1' index2;  	while ((line = lfile.ReadLine ()) != null) {  		if (line.Contains ("Background=\"")) {  			index1 = line.IndexOf ("Background=\"");  			index2 = line.IndexOf ('"'' index1 + 12);  			bg = line.Substring (index1 + 12' index2 - index1 - 12);  			BrushConverter fromHex = new BrushConverter ();  			bgColor = (SolidColorBrush)(fromHex.ConvertFrom (bg));  			scene.Background = bgColor;  		}  		if (line.Contains ("Image Name")) {  			processImage (line' dirname);  			curType = (int)TYPE.IMAGE;  		}  		if (line.Contains ("MediaElement Name")) {  			processMedia (line' dirname);  			curType = (int)TYPE.VIDEO;  		}  		if (line.Contains ("TextBlock Name")) {  			processText (line);  			curType = (int)TYPE.TEXT;  		}  	}  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Click_Load,The following statement contains a magic number: if (result == true) {  	//Clear the scene.  	scene.Children.Clear ();  	myScene.Clear ();  	selectedElement = null;  	// Open document  	string filename = dlg.FileName;  	string dirname = System.IO.Path.GetDirectoryName (filename);  	StreamReader lfile = new StreamReader (filename);  	string line;  	string bg;  	int index1' index2;  	while ((line = lfile.ReadLine ()) != null) {  		if (line.Contains ("Background=\"")) {  			index1 = line.IndexOf ("Background=\"");  			index2 = line.IndexOf ('"'' index1 + 12);  			bg = line.Substring (index1 + 12' index2 - index1 - 12);  			BrushConverter fromHex = new BrushConverter ();  			bgColor = (SolidColorBrush)(fromHex.ConvertFrom (bg));  			scene.Background = bgColor;  		}  		if (line.Contains ("Image Name")) {  			processImage (line' dirname);  			curType = (int)TYPE.IMAGE;  		}  		if (line.Contains ("MediaElement Name")) {  			processMedia (line' dirname);  			curType = (int)TYPE.VIDEO;  		}  		if (line.Contains ("TextBlock Name")) {  			processText (line);  			curType = (int)TYPE.TEXT;  		}  	}  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Click_Load,The following statement contains a magic number: while ((line = lfile.ReadLine ()) != null) {  	if (line.Contains ("Background=\"")) {  		index1 = line.IndexOf ("Background=\"");  		index2 = line.IndexOf ('"'' index1 + 12);  		bg = line.Substring (index1 + 12' index2 - index1 - 12);  		BrushConverter fromHex = new BrushConverter ();  		bgColor = (SolidColorBrush)(fromHex.ConvertFrom (bg));  		scene.Background = bgColor;  	}  	if (line.Contains ("Image Name")) {  		processImage (line' dirname);  		curType = (int)TYPE.IMAGE;  	}  	if (line.Contains ("MediaElement Name")) {  		processMedia (line' dirname);  		curType = (int)TYPE.VIDEO;  	}  	if (line.Contains ("TextBlock Name")) {  		processText (line);  		curType = (int)TYPE.TEXT;  	}  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Click_Load,The following statement contains a magic number: while ((line = lfile.ReadLine ()) != null) {  	if (line.Contains ("Background=\"")) {  		index1 = line.IndexOf ("Background=\"");  		index2 = line.IndexOf ('"'' index1 + 12);  		bg = line.Substring (index1 + 12' index2 - index1 - 12);  		BrushConverter fromHex = new BrushConverter ();  		bgColor = (SolidColorBrush)(fromHex.ConvertFrom (bg));  		scene.Background = bgColor;  	}  	if (line.Contains ("Image Name")) {  		processImage (line' dirname);  		curType = (int)TYPE.IMAGE;  	}  	if (line.Contains ("MediaElement Name")) {  		processMedia (line' dirname);  		curType = (int)TYPE.VIDEO;  	}  	if (line.Contains ("TextBlock Name")) {  		processText (line);  		curType = (int)TYPE.TEXT;  	}  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Click_Load,The following statement contains a magic number: while ((line = lfile.ReadLine ()) != null) {  	if (line.Contains ("Background=\"")) {  		index1 = line.IndexOf ("Background=\"");  		index2 = line.IndexOf ('"'' index1 + 12);  		bg = line.Substring (index1 + 12' index2 - index1 - 12);  		BrushConverter fromHex = new BrushConverter ();  		bgColor = (SolidColorBrush)(fromHex.ConvertFrom (bg));  		scene.Background = bgColor;  	}  	if (line.Contains ("Image Name")) {  		processImage (line' dirname);  		curType = (int)TYPE.IMAGE;  	}  	if (line.Contains ("MediaElement Name")) {  		processMedia (line' dirname);  		curType = (int)TYPE.VIDEO;  	}  	if (line.Contains ("TextBlock Name")) {  		processText (line);  		curType = (int)TYPE.TEXT;  	}  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Click_Load,The following statement contains a magic number: if (line.Contains ("Background=\"")) {  	index1 = line.IndexOf ("Background=\"");  	index2 = line.IndexOf ('"'' index1 + 12);  	bg = line.Substring (index1 + 12' index2 - index1 - 12);  	BrushConverter fromHex = new BrushConverter ();  	bgColor = (SolidColorBrush)(fromHex.ConvertFrom (bg));  	scene.Background = bgColor;  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Click_Load,The following statement contains a magic number: if (line.Contains ("Background=\"")) {  	index1 = line.IndexOf ("Background=\"");  	index2 = line.IndexOf ('"'' index1 + 12);  	bg = line.Substring (index1 + 12' index2 - index1 - 12);  	BrushConverter fromHex = new BrushConverter ();  	bgColor = (SolidColorBrush)(fromHex.ConvertFrom (bg));  	scene.Background = bgColor;  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Click_Load,The following statement contains a magic number: if (line.Contains ("Background=\"")) {  	index1 = line.IndexOf ("Background=\"");  	index2 = line.IndexOf ('"'' index1 + 12);  	bg = line.Substring (index1 + 12' index2 - index1 - 12);  	BrushConverter fromHex = new BrushConverter ();  	bgColor = (SolidColorBrush)(fromHex.ConvertFrom (bg));  	scene.Background = bgColor;  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Click_Load,The following statement contains a magic number: index2 = line.IndexOf ('"'' index1 + 12);  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Click_Load,The following statement contains a magic number: bg = line.Substring (index1 + 12' index2 - index1 - 12);  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Click_Load,The following statement contains a magic number: bg = line.Substring (index1 + 12' index2 - index1 - 12);  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,savedGestures,The following statement contains a magic number: savedGestures [2] = false;  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,savedGestures,The following statement contains a magic number: if (name == "All") {  	savedGestures [0] = true;  	savedGestures [1] = true;  	savedGestures [2] = true;  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,savedGestures,The following statement contains a magic number: savedGestures [2] = true;  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,savedGestures,The following statement contains a magic number: if (name == "TranslateScale") {  	savedGestures [0] = true;  	savedGestures [2] = true;  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,savedGestures,The following statement contains a magic number: savedGestures [2] = true;  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,savedGestures,The following statement contains a magic number: if (name == "RotateScale") {  	savedGestures [1] = true;  	savedGestures [2] = true;  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,savedGestures,The following statement contains a magic number: savedGestures [2] = true;  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,savedGestures,The following statement contains a magic number: if (name == "Scale") {  	savedGestures [2] = true;  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,savedGestures,The following statement contains a magic number: savedGestures [2] = true;  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,processText,The following statement contains a magic number: index2 += 14;  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,processText,The following statement contains a magic number: if (line.Contains ("_Click_Scene")) {  	index1 = line.IndexOf ("_Click_Scene\" Text=\"");  	index2 = line.IndexOf ('"'' index1 + 20);  	linksTo = line.Substring (index1 + 20' index2 - index1 - 20);  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,processText,The following statement contains a magic number: if (line.Contains ("_Click_Scene")) {  	index1 = line.IndexOf ("_Click_Scene\" Text=\"");  	index2 = line.IndexOf ('"'' index1 + 20);  	linksTo = line.Substring (index1 + 20' index2 - index1 - 20);  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,processText,The following statement contains a magic number: if (line.Contains ("_Click_Scene")) {  	index1 = line.IndexOf ("_Click_Scene\" Text=\"");  	index2 = line.IndexOf ('"'' index1 + 20);  	linksTo = line.Substring (index1 + 20' index2 - index1 - 20);  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,processText,The following statement contains a magic number: index2 = line.IndexOf ('"'' index1 + 20);  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,processText,The following statement contains a magic number: linksTo = line.Substring (index1 + 20' index2 - index1 - 20);  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,processText,The following statement contains a magic number: linksTo = line.Substring (index1 + 20' index2 - index1 - 20);  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,processMedia,The following statement contains a magic number: index2 += 17;  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,processMedia,The following statement contains a magic number: filename = line.Substring (index2 + 24' length - 23);  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,processMedia,The following statement contains a magic number: filename = line.Substring (index2 + 24' length - 23);  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,processMedia,The following statement contains a magic number: index2 += 14;  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,processAudio,The following statement contains a magic number: filename = line.Substring (index1 + 28' length - 27);  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,processAudio,The following statement contains a magic number: filename = line.Substring (index1 + 28' length - 27);  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,processImage,The following statement contains a magic number: filename = line.Substring (index1 + 28' length - 27);  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,processImage,The following statement contains a magic number: filename = line.Substring (index1 + 28' length - 27);  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,processImage,The following statement contains a magic number: index2 += 14;  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,processImage,The following statement contains a magic number: if (line.Contains ("_Click_Scene")) {  	index1 = line.IndexOf ("_Click_Scene\" Text=\"");  	index2 = line.IndexOf ('"'' index1 + 20);  	linksTo = line.Substring (index1 + 20' index2 - index1 - 20);  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,processImage,The following statement contains a magic number: if (line.Contains ("_Click_Scene")) {  	index1 = line.IndexOf ("_Click_Scene\" Text=\"");  	index2 = line.IndexOf ('"'' index1 + 20);  	linksTo = line.Substring (index1 + 20' index2 - index1 - 20);  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,processImage,The following statement contains a magic number: if (line.Contains ("_Click_Scene")) {  	index1 = line.IndexOf ("_Click_Scene\" Text=\"");  	index2 = line.IndexOf ('"'' index1 + 20);  	linksTo = line.Substring (index1 + 20' index2 - index1 - 20);  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,processImage,The following statement contains a magic number: index2 = line.IndexOf ('"'' index1 + 20);  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,processImage,The following statement contains a magic number: linksTo = line.Substring (index1 + 20' index2 - index1 - 20);  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,processImage,The following statement contains a magic number: linksTo = line.Substring (index1 + 20' index2 - index1 - 20);  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Export,The following statement contains a magic number: foreach (sElements elm in myScene) {  	Boolean isManipulationEnabled = true;  	if (elm.media == (int)TYPE.IMAGE) {  		//get source name  		sourceName = elm.fileName;  		if (File.Exists (elm.fileName.ToString ())) {  			sourceName = System.IO.Path.GetFileName (elm.fileName).ToString ();  		}  		else {  			Console.WriteLine ("File does not exist!");  		}  		if (imageNum < 10) {  			elementName = "Image00";  		}  		else if (imageNum < 100) {  			elementName = "Image0";  		}  		else {  			elementName = "Image";  		}  		//set gestures  		//see what gestures are assigned to the object and set the name  		//if there are no gestures assigned' set the name to None' and  		//      isManipulationEnabled to false  		gestureName = gestureWriter (elm.gesturesAllowed' elm.linksTo);  		if (gestureName == "_None" || gestureName == "_Click") {  			isManipulationEnabled = false;  		}  		writer.Write ("<Image Name=\"");  		writer.Write (elementName + imageNum + gestureName);  		imageNum++;  		writer.Write ("\" ");  		writer.Write ("Source=\"pack://siteoforigin:'''/tmp/images/");  		writer.Write (sourceName);  		writer.Write ("\" ");  		writer.Write ("Width=\"" + elm.width + "\" Height=\"" + elm.height + "\"");  		writer.Write (" IsManipulationEnabled=\"" + isManipulationEnabled + "\">");  		//Add matrix manipulation structure  		writer.Write ("<Image.RenderTransform>");  		writer.Write ("<MatrixTransform>");  		writer.Write ("<MatrixTransform.Matrix>");  		writer.Write ("<Matrix OffsetX=\"" + elm.coords.X + "\" OffsetY=\"" + elm.coords.Y + "\" M11=\"1\" M22=\"1\" />");  		writer.Write ("</MatrixTransform.Matrix>");  		writer.Write ("</MatrixTransform>");  		writer.Write ("</Image.RenderTransform>");  		writer.Write ("</Image>");  		if (gestureName == "_Click") {  			writer.Write ("<TextBox Name=\"" + elementName + imageNum + gestureName + "_Scene" + "\" Text=\"" + elm.linksTo + "\" Visibility=\"Hidden\" />");  		}  		writer.Write ("\n");  		//copy image to presentation directory  		if (!System.IO.Directory.Exists (imageTargetPath)) {  			System.IO.Directory.CreateDirectory (imageTargetPath);  		}  		targetFile = System.IO.Path.Combine (imageTargetPath' sourceName).ToString ();  		Console.WriteLine (elm.fileName);  		if (File.Exists (elm.fileName)) {  			System.IO.File.Copy (elm.fileName' targetFile' true);  		}  	}  	if (elm.media == (int)TYPE.VIDEO) {  		Console.WriteLine (elm.coords.ToString ());  		//get source name  		sourceName = System.IO.Path.GetFileName (elm.fileName).ToString ();  		if (videoNum < 10) {  			elementName = "Video00";  		}  		else if (videoNum < 100) {  			elementName = "Video0";  		}  		else {  			elementName = "Video";  		}  		//set gestures  		//see what gestures are assigned to the object and set the name  		//if there are no gestures assigned' set the name to None' and  		//      isManipulationEnabled to false  		//if the gesture is _Click' set the isManipulationEnabled variable  		//      to false  		//_All' _Rotate' _Translate' _Scale' _RotateTranslate' _RotateScale' _TranslateScale' _Click  		gestureName = gestureWriter (elm.gesturesAllowed' elm.linksTo);  		if (gestureName == "_Click" || gestureName == "_None") {  			isManipulationEnabled = false;  		}  		writer.Write ("<StackPanel Name=\"" + elementName + videoNum + "Container" + gestureName + "\" Background=\"Black\" Width=\"" + elm.width + "\" Height=\"" + (elm.height + 30) + "\" IsManipulationEnabled=\"" + isManipulationEnabled + "\">");  		writer.Write ("<MediaElement Name=\"");  		writer.Write (elementName + videoNum + gestureName);  		videoNum++;  		writer.Write ("\" ");  		writer.Write ("Source=\"pack://siteoforigin:'''/tmp/video/");  		writer.Write (sourceName);  		writer.Write ("\" ");  		writer.Write ("Width=\"" + elm.width + "\" Height=\"" + elm.height + "\"");  		writer.Write ("LoadedBehavior=\"Manual\" UnloadedBehavior=\"Stop\" ScrubbingEnabled=\"True\" />");  		writer.Write ("<StackPanel Orientation=\"Horizontal\" Background=\"Gray\">");  		writer.Write ("<Image Source=\"icons\\play.png\" Width=\"30\" Height=\"30\" HorizontalAlignment=\"Left\" />");  		writer.Write ("<Image Source=\"icons\\pause.png\" Width=\"30\" Height=\"30\" HorizontalAlignment=\"Left\" Visibility=\"Collapsed\" />");  		writer.Write ("<Image Source=\"icons\\stop.png\" Width=\"30\" Height=\"30\" HorizontalAlignment=\"Left\" />");  		writer.Write ("</StackPanel>");  		writer.Write ("<StackPanel.RenderTransform>");  		writer.Write ("<MatrixTransform>");  		writer.Write ("<MatrixTransform.Matrix>");  		writer.Write ("<Matrix OffsetX=\"" + elm.coords.X + "\" OffsetY=\"" + elm.coords.Y + "\" M11=\"1\" M22=\"1\" />");  		writer.Write ("</MatrixTransform.Matrix>");  		writer.Write ("</MatrixTransform>");  		writer.Write ("</StackPanel.RenderTransform>");  		writer.Write ("</StackPanel>\n");  		//copy video to presentation directory  		if (!System.IO.Directory.Exists (videoTargetPath)) {  			System.IO.Directory.CreateDirectory (videoTargetPath);  		}  		targetFile = System.IO.Path.Combine (videoTargetPath' sourceName).ToString ();  		if (File.Exists (elm.fileName)) {  			System.IO.File.Copy (elm.fileName' targetFile' true);  		}  	}  	if (elm.media == (int)TYPE.TEXT) {  		if (textNum < 10) {  			elementName = "Text00";  		}  		else if (textNum < 100) {  			elementName = "Text0";  		}  		else {  			elementName = "Text";  		}  		//set gestures  		//TODO: see what gestures are assigned to the object and set the name  		//TODO: if there are no gestures assigned' set the name to None' and  		//      isManipulationEnabled to false  		gestureName = gestureWriter (elm.gesturesAllowed' elm.linksTo);  		if (gestureName == "_Click" || gestureName == "_None") {  			isManipulationEnabled = false;  		}  		writer.Write ("<TextBlock Name=\"");  		writer.Write (elementName + textNum + gestureName);  		writer.Write ("\" ");  		writer.Write ("IsManipulationEnabled=\"" + isManipulationEnabled + "\" TextWrapping=\"Wrap\" Margin=\"0'0'0'20\"");  		writer.Write (" Width=\"" + elm.width + "\" Height=\"" + elm.height + "\"" + " FontFamily=\"" + elm.ff.ToString () + "\"" + " FontSize=\"" + elm.fontSize + "\"" + " Foreground=\"" + (Color)elm.fontColor.Color + "\">");  		writer.Write (elm.fileName);  		textNum++;  		//matrix manipulation stuff  		writer.Write ("<TextBlock.RenderTransform>");  		writer.Write ("<MatrixTransform>");  		writer.Write ("<MatrixTransform.Matrix>");  		writer.Write ("<Matrix OffsetX =\"" + elm.coords.X + "\" OffsetY=\"" + elm.coords.Y + "\" M11=\"1\" M22=\"1\" />");  		writer.Write ("</MatrixTransform.Matrix>");  		writer.Write ("</MatrixTransform>");  		writer.Write ("</TextBlock.RenderTransform>");  		writer.Write ("</TextBlock>");  		if (gestureName == "_Click") {  			writer.Write ("<TextBox Name=\"" + elementName + textNum + gestureName + "_Scene" + "\" Text=\"" + elm.linksTo + "\" Visibility=\"Hidden\" />");  		}  		writer.Write ("\n");  	}  	if (elm.media == (int)TYPE.AUDIO) {  		sourceName = System.IO.Path.GetFileName (elm.fileName).ToString ();  		writer.Write ("<MediaElement Name=\"");  		writer.Write ("Audio");  		writer.Write ("\" ");  		writer.Write ("Source=\"pack://siteoforigin:'''/tmp/audio/");  		writer.Write (sourceName);  		writer.Write ("\" LoadedBehavior=\"Manual\" UnloadedBehavior=\"Stop\" />\n");  		//copy audio to presentation directory  		if (!System.IO.Directory.Exists (audioTargetPath)) {  			System.IO.Directory.CreateDirectory (audioTargetPath);  		}  		targetFile = System.IO.Path.Combine (audioTargetPath' sourceName).ToString ();  		if (File.Exists (elm.fileName)) {  			System.IO.File.Copy (elm.fileName' targetFile' true);  		}  	}  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Export,The following statement contains a magic number: foreach (sElements elm in myScene) {  	Boolean isManipulationEnabled = true;  	if (elm.media == (int)TYPE.IMAGE) {  		//get source name  		sourceName = elm.fileName;  		if (File.Exists (elm.fileName.ToString ())) {  			sourceName = System.IO.Path.GetFileName (elm.fileName).ToString ();  		}  		else {  			Console.WriteLine ("File does not exist!");  		}  		if (imageNum < 10) {  			elementName = "Image00";  		}  		else if (imageNum < 100) {  			elementName = "Image0";  		}  		else {  			elementName = "Image";  		}  		//set gestures  		//see what gestures are assigned to the object and set the name  		//if there are no gestures assigned' set the name to None' and  		//      isManipulationEnabled to false  		gestureName = gestureWriter (elm.gesturesAllowed' elm.linksTo);  		if (gestureName == "_None" || gestureName == "_Click") {  			isManipulationEnabled = false;  		}  		writer.Write ("<Image Name=\"");  		writer.Write (elementName + imageNum + gestureName);  		imageNum++;  		writer.Write ("\" ");  		writer.Write ("Source=\"pack://siteoforigin:'''/tmp/images/");  		writer.Write (sourceName);  		writer.Write ("\" ");  		writer.Write ("Width=\"" + elm.width + "\" Height=\"" + elm.height + "\"");  		writer.Write (" IsManipulationEnabled=\"" + isManipulationEnabled + "\">");  		//Add matrix manipulation structure  		writer.Write ("<Image.RenderTransform>");  		writer.Write ("<MatrixTransform>");  		writer.Write ("<MatrixTransform.Matrix>");  		writer.Write ("<Matrix OffsetX=\"" + elm.coords.X + "\" OffsetY=\"" + elm.coords.Y + "\" M11=\"1\" M22=\"1\" />");  		writer.Write ("</MatrixTransform.Matrix>");  		writer.Write ("</MatrixTransform>");  		writer.Write ("</Image.RenderTransform>");  		writer.Write ("</Image>");  		if (gestureName == "_Click") {  			writer.Write ("<TextBox Name=\"" + elementName + imageNum + gestureName + "_Scene" + "\" Text=\"" + elm.linksTo + "\" Visibility=\"Hidden\" />");  		}  		writer.Write ("\n");  		//copy image to presentation directory  		if (!System.IO.Directory.Exists (imageTargetPath)) {  			System.IO.Directory.CreateDirectory (imageTargetPath);  		}  		targetFile = System.IO.Path.Combine (imageTargetPath' sourceName).ToString ();  		Console.WriteLine (elm.fileName);  		if (File.Exists (elm.fileName)) {  			System.IO.File.Copy (elm.fileName' targetFile' true);  		}  	}  	if (elm.media == (int)TYPE.VIDEO) {  		Console.WriteLine (elm.coords.ToString ());  		//get source name  		sourceName = System.IO.Path.GetFileName (elm.fileName).ToString ();  		if (videoNum < 10) {  			elementName = "Video00";  		}  		else if (videoNum < 100) {  			elementName = "Video0";  		}  		else {  			elementName = "Video";  		}  		//set gestures  		//see what gestures are assigned to the object and set the name  		//if there are no gestures assigned' set the name to None' and  		//      isManipulationEnabled to false  		//if the gesture is _Click' set the isManipulationEnabled variable  		//      to false  		//_All' _Rotate' _Translate' _Scale' _RotateTranslate' _RotateScale' _TranslateScale' _Click  		gestureName = gestureWriter (elm.gesturesAllowed' elm.linksTo);  		if (gestureName == "_Click" || gestureName == "_None") {  			isManipulationEnabled = false;  		}  		writer.Write ("<StackPanel Name=\"" + elementName + videoNum + "Container" + gestureName + "\" Background=\"Black\" Width=\"" + elm.width + "\" Height=\"" + (elm.height + 30) + "\" IsManipulationEnabled=\"" + isManipulationEnabled + "\">");  		writer.Write ("<MediaElement Name=\"");  		writer.Write (elementName + videoNum + gestureName);  		videoNum++;  		writer.Write ("\" ");  		writer.Write ("Source=\"pack://siteoforigin:'''/tmp/video/");  		writer.Write (sourceName);  		writer.Write ("\" ");  		writer.Write ("Width=\"" + elm.width + "\" Height=\"" + elm.height + "\"");  		writer.Write ("LoadedBehavior=\"Manual\" UnloadedBehavior=\"Stop\" ScrubbingEnabled=\"True\" />");  		writer.Write ("<StackPanel Orientation=\"Horizontal\" Background=\"Gray\">");  		writer.Write ("<Image Source=\"icons\\play.png\" Width=\"30\" Height=\"30\" HorizontalAlignment=\"Left\" />");  		writer.Write ("<Image Source=\"icons\\pause.png\" Width=\"30\" Height=\"30\" HorizontalAlignment=\"Left\" Visibility=\"Collapsed\" />");  		writer.Write ("<Image Source=\"icons\\stop.png\" Width=\"30\" Height=\"30\" HorizontalAlignment=\"Left\" />");  		writer.Write ("</StackPanel>");  		writer.Write ("<StackPanel.RenderTransform>");  		writer.Write ("<MatrixTransform>");  		writer.Write ("<MatrixTransform.Matrix>");  		writer.Write ("<Matrix OffsetX=\"" + elm.coords.X + "\" OffsetY=\"" + elm.coords.Y + "\" M11=\"1\" M22=\"1\" />");  		writer.Write ("</MatrixTransform.Matrix>");  		writer.Write ("</MatrixTransform>");  		writer.Write ("</StackPanel.RenderTransform>");  		writer.Write ("</StackPanel>\n");  		//copy video to presentation directory  		if (!System.IO.Directory.Exists (videoTargetPath)) {  			System.IO.Directory.CreateDirectory (videoTargetPath);  		}  		targetFile = System.IO.Path.Combine (videoTargetPath' sourceName).ToString ();  		if (File.Exists (elm.fileName)) {  			System.IO.File.Copy (elm.fileName' targetFile' true);  		}  	}  	if (elm.media == (int)TYPE.TEXT) {  		if (textNum < 10) {  			elementName = "Text00";  		}  		else if (textNum < 100) {  			elementName = "Text0";  		}  		else {  			elementName = "Text";  		}  		//set gestures  		//TODO: see what gestures are assigned to the object and set the name  		//TODO: if there are no gestures assigned' set the name to None' and  		//      isManipulationEnabled to false  		gestureName = gestureWriter (elm.gesturesAllowed' elm.linksTo);  		if (gestureName == "_Click" || gestureName == "_None") {  			isManipulationEnabled = false;  		}  		writer.Write ("<TextBlock Name=\"");  		writer.Write (elementName + textNum + gestureName);  		writer.Write ("\" ");  		writer.Write ("IsManipulationEnabled=\"" + isManipulationEnabled + "\" TextWrapping=\"Wrap\" Margin=\"0'0'0'20\"");  		writer.Write (" Width=\"" + elm.width + "\" Height=\"" + elm.height + "\"" + " FontFamily=\"" + elm.ff.ToString () + "\"" + " FontSize=\"" + elm.fontSize + "\"" + " Foreground=\"" + (Color)elm.fontColor.Color + "\">");  		writer.Write (elm.fileName);  		textNum++;  		//matrix manipulation stuff  		writer.Write ("<TextBlock.RenderTransform>");  		writer.Write ("<MatrixTransform>");  		writer.Write ("<MatrixTransform.Matrix>");  		writer.Write ("<Matrix OffsetX =\"" + elm.coords.X + "\" OffsetY=\"" + elm.coords.Y + "\" M11=\"1\" M22=\"1\" />");  		writer.Write ("</MatrixTransform.Matrix>");  		writer.Write ("</MatrixTransform>");  		writer.Write ("</TextBlock.RenderTransform>");  		writer.Write ("</TextBlock>");  		if (gestureName == "_Click") {  			writer.Write ("<TextBox Name=\"" + elementName + textNum + gestureName + "_Scene" + "\" Text=\"" + elm.linksTo + "\" Visibility=\"Hidden\" />");  		}  		writer.Write ("\n");  	}  	if (elm.media == (int)TYPE.AUDIO) {  		sourceName = System.IO.Path.GetFileName (elm.fileName).ToString ();  		writer.Write ("<MediaElement Name=\"");  		writer.Write ("Audio");  		writer.Write ("\" ");  		writer.Write ("Source=\"pack://siteoforigin:'''/tmp/audio/");  		writer.Write (sourceName);  		writer.Write ("\" LoadedBehavior=\"Manual\" UnloadedBehavior=\"Stop\" />\n");  		//copy audio to presentation directory  		if (!System.IO.Directory.Exists (audioTargetPath)) {  			System.IO.Directory.CreateDirectory (audioTargetPath);  		}  		targetFile = System.IO.Path.Combine (audioTargetPath' sourceName).ToString ();  		if (File.Exists (elm.fileName)) {  			System.IO.File.Copy (elm.fileName' targetFile' true);  		}  	}  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Export,The following statement contains a magic number: foreach (sElements elm in myScene) {  	Boolean isManipulationEnabled = true;  	if (elm.media == (int)TYPE.IMAGE) {  		//get source name  		sourceName = elm.fileName;  		if (File.Exists (elm.fileName.ToString ())) {  			sourceName = System.IO.Path.GetFileName (elm.fileName).ToString ();  		}  		else {  			Console.WriteLine ("File does not exist!");  		}  		if (imageNum < 10) {  			elementName = "Image00";  		}  		else if (imageNum < 100) {  			elementName = "Image0";  		}  		else {  			elementName = "Image";  		}  		//set gestures  		//see what gestures are assigned to the object and set the name  		//if there are no gestures assigned' set the name to None' and  		//      isManipulationEnabled to false  		gestureName = gestureWriter (elm.gesturesAllowed' elm.linksTo);  		if (gestureName == "_None" || gestureName == "_Click") {  			isManipulationEnabled = false;  		}  		writer.Write ("<Image Name=\"");  		writer.Write (elementName + imageNum + gestureName);  		imageNum++;  		writer.Write ("\" ");  		writer.Write ("Source=\"pack://siteoforigin:'''/tmp/images/");  		writer.Write (sourceName);  		writer.Write ("\" ");  		writer.Write ("Width=\"" + elm.width + "\" Height=\"" + elm.height + "\"");  		writer.Write (" IsManipulationEnabled=\"" + isManipulationEnabled + "\">");  		//Add matrix manipulation structure  		writer.Write ("<Image.RenderTransform>");  		writer.Write ("<MatrixTransform>");  		writer.Write ("<MatrixTransform.Matrix>");  		writer.Write ("<Matrix OffsetX=\"" + elm.coords.X + "\" OffsetY=\"" + elm.coords.Y + "\" M11=\"1\" M22=\"1\" />");  		writer.Write ("</MatrixTransform.Matrix>");  		writer.Write ("</MatrixTransform>");  		writer.Write ("</Image.RenderTransform>");  		writer.Write ("</Image>");  		if (gestureName == "_Click") {  			writer.Write ("<TextBox Name=\"" + elementName + imageNum + gestureName + "_Scene" + "\" Text=\"" + elm.linksTo + "\" Visibility=\"Hidden\" />");  		}  		writer.Write ("\n");  		//copy image to presentation directory  		if (!System.IO.Directory.Exists (imageTargetPath)) {  			System.IO.Directory.CreateDirectory (imageTargetPath);  		}  		targetFile = System.IO.Path.Combine (imageTargetPath' sourceName).ToString ();  		Console.WriteLine (elm.fileName);  		if (File.Exists (elm.fileName)) {  			System.IO.File.Copy (elm.fileName' targetFile' true);  		}  	}  	if (elm.media == (int)TYPE.VIDEO) {  		Console.WriteLine (elm.coords.ToString ());  		//get source name  		sourceName = System.IO.Path.GetFileName (elm.fileName).ToString ();  		if (videoNum < 10) {  			elementName = "Video00";  		}  		else if (videoNum < 100) {  			elementName = "Video0";  		}  		else {  			elementName = "Video";  		}  		//set gestures  		//see what gestures are assigned to the object and set the name  		//if there are no gestures assigned' set the name to None' and  		//      isManipulationEnabled to false  		//if the gesture is _Click' set the isManipulationEnabled variable  		//      to false  		//_All' _Rotate' _Translate' _Scale' _RotateTranslate' _RotateScale' _TranslateScale' _Click  		gestureName = gestureWriter (elm.gesturesAllowed' elm.linksTo);  		if (gestureName == "_Click" || gestureName == "_None") {  			isManipulationEnabled = false;  		}  		writer.Write ("<StackPanel Name=\"" + elementName + videoNum + "Container" + gestureName + "\" Background=\"Black\" Width=\"" + elm.width + "\" Height=\"" + (elm.height + 30) + "\" IsManipulationEnabled=\"" + isManipulationEnabled + "\">");  		writer.Write ("<MediaElement Name=\"");  		writer.Write (elementName + videoNum + gestureName);  		videoNum++;  		writer.Write ("\" ");  		writer.Write ("Source=\"pack://siteoforigin:'''/tmp/video/");  		writer.Write (sourceName);  		writer.Write ("\" ");  		writer.Write ("Width=\"" + elm.width + "\" Height=\"" + elm.height + "\"");  		writer.Write ("LoadedBehavior=\"Manual\" UnloadedBehavior=\"Stop\" ScrubbingEnabled=\"True\" />");  		writer.Write ("<StackPanel Orientation=\"Horizontal\" Background=\"Gray\">");  		writer.Write ("<Image Source=\"icons\\play.png\" Width=\"30\" Height=\"30\" HorizontalAlignment=\"Left\" />");  		writer.Write ("<Image Source=\"icons\\pause.png\" Width=\"30\" Height=\"30\" HorizontalAlignment=\"Left\" Visibility=\"Collapsed\" />");  		writer.Write ("<Image Source=\"icons\\stop.png\" Width=\"30\" Height=\"30\" HorizontalAlignment=\"Left\" />");  		writer.Write ("</StackPanel>");  		writer.Write ("<StackPanel.RenderTransform>");  		writer.Write ("<MatrixTransform>");  		writer.Write ("<MatrixTransform.Matrix>");  		writer.Write ("<Matrix OffsetX=\"" + elm.coords.X + "\" OffsetY=\"" + elm.coords.Y + "\" M11=\"1\" M22=\"1\" />");  		writer.Write ("</MatrixTransform.Matrix>");  		writer.Write ("</MatrixTransform>");  		writer.Write ("</StackPanel.RenderTransform>");  		writer.Write ("</StackPanel>\n");  		//copy video to presentation directory  		if (!System.IO.Directory.Exists (videoTargetPath)) {  			System.IO.Directory.CreateDirectory (videoTargetPath);  		}  		targetFile = System.IO.Path.Combine (videoTargetPath' sourceName).ToString ();  		if (File.Exists (elm.fileName)) {  			System.IO.File.Copy (elm.fileName' targetFile' true);  		}  	}  	if (elm.media == (int)TYPE.TEXT) {  		if (textNum < 10) {  			elementName = "Text00";  		}  		else if (textNum < 100) {  			elementName = "Text0";  		}  		else {  			elementName = "Text";  		}  		//set gestures  		//TODO: see what gestures are assigned to the object and set the name  		//TODO: if there are no gestures assigned' set the name to None' and  		//      isManipulationEnabled to false  		gestureName = gestureWriter (elm.gesturesAllowed' elm.linksTo);  		if (gestureName == "_Click" || gestureName == "_None") {  			isManipulationEnabled = false;  		}  		writer.Write ("<TextBlock Name=\"");  		writer.Write (elementName + textNum + gestureName);  		writer.Write ("\" ");  		writer.Write ("IsManipulationEnabled=\"" + isManipulationEnabled + "\" TextWrapping=\"Wrap\" Margin=\"0'0'0'20\"");  		writer.Write (" Width=\"" + elm.width + "\" Height=\"" + elm.height + "\"" + " FontFamily=\"" + elm.ff.ToString () + "\"" + " FontSize=\"" + elm.fontSize + "\"" + " Foreground=\"" + (Color)elm.fontColor.Color + "\">");  		writer.Write (elm.fileName);  		textNum++;  		//matrix manipulation stuff  		writer.Write ("<TextBlock.RenderTransform>");  		writer.Write ("<MatrixTransform>");  		writer.Write ("<MatrixTransform.Matrix>");  		writer.Write ("<Matrix OffsetX =\"" + elm.coords.X + "\" OffsetY=\"" + elm.coords.Y + "\" M11=\"1\" M22=\"1\" />");  		writer.Write ("</MatrixTransform.Matrix>");  		writer.Write ("</MatrixTransform>");  		writer.Write ("</TextBlock.RenderTransform>");  		writer.Write ("</TextBlock>");  		if (gestureName == "_Click") {  			writer.Write ("<TextBox Name=\"" + elementName + textNum + gestureName + "_Scene" + "\" Text=\"" + elm.linksTo + "\" Visibility=\"Hidden\" />");  		}  		writer.Write ("\n");  	}  	if (elm.media == (int)TYPE.AUDIO) {  		sourceName = System.IO.Path.GetFileName (elm.fileName).ToString ();  		writer.Write ("<MediaElement Name=\"");  		writer.Write ("Audio");  		writer.Write ("\" ");  		writer.Write ("Source=\"pack://siteoforigin:'''/tmp/audio/");  		writer.Write (sourceName);  		writer.Write ("\" LoadedBehavior=\"Manual\" UnloadedBehavior=\"Stop\" />\n");  		//copy audio to presentation directory  		if (!System.IO.Directory.Exists (audioTargetPath)) {  			System.IO.Directory.CreateDirectory (audioTargetPath);  		}  		targetFile = System.IO.Path.Combine (audioTargetPath' sourceName).ToString ();  		if (File.Exists (elm.fileName)) {  			System.IO.File.Copy (elm.fileName' targetFile' true);  		}  	}  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Export,The following statement contains a magic number: foreach (sElements elm in myScene) {  	Boolean isManipulationEnabled = true;  	if (elm.media == (int)TYPE.IMAGE) {  		//get source name  		sourceName = elm.fileName;  		if (File.Exists (elm.fileName.ToString ())) {  			sourceName = System.IO.Path.GetFileName (elm.fileName).ToString ();  		}  		else {  			Console.WriteLine ("File does not exist!");  		}  		if (imageNum < 10) {  			elementName = "Image00";  		}  		else if (imageNum < 100) {  			elementName = "Image0";  		}  		else {  			elementName = "Image";  		}  		//set gestures  		//see what gestures are assigned to the object and set the name  		//if there are no gestures assigned' set the name to None' and  		//      isManipulationEnabled to false  		gestureName = gestureWriter (elm.gesturesAllowed' elm.linksTo);  		if (gestureName == "_None" || gestureName == "_Click") {  			isManipulationEnabled = false;  		}  		writer.Write ("<Image Name=\"");  		writer.Write (elementName + imageNum + gestureName);  		imageNum++;  		writer.Write ("\" ");  		writer.Write ("Source=\"pack://siteoforigin:'''/tmp/images/");  		writer.Write (sourceName);  		writer.Write ("\" ");  		writer.Write ("Width=\"" + elm.width + "\" Height=\"" + elm.height + "\"");  		writer.Write (" IsManipulationEnabled=\"" + isManipulationEnabled + "\">");  		//Add matrix manipulation structure  		writer.Write ("<Image.RenderTransform>");  		writer.Write ("<MatrixTransform>");  		writer.Write ("<MatrixTransform.Matrix>");  		writer.Write ("<Matrix OffsetX=\"" + elm.coords.X + "\" OffsetY=\"" + elm.coords.Y + "\" M11=\"1\" M22=\"1\" />");  		writer.Write ("</MatrixTransform.Matrix>");  		writer.Write ("</MatrixTransform>");  		writer.Write ("</Image.RenderTransform>");  		writer.Write ("</Image>");  		if (gestureName == "_Click") {  			writer.Write ("<TextBox Name=\"" + elementName + imageNum + gestureName + "_Scene" + "\" Text=\"" + elm.linksTo + "\" Visibility=\"Hidden\" />");  		}  		writer.Write ("\n");  		//copy image to presentation directory  		if (!System.IO.Directory.Exists (imageTargetPath)) {  			System.IO.Directory.CreateDirectory (imageTargetPath);  		}  		targetFile = System.IO.Path.Combine (imageTargetPath' sourceName).ToString ();  		Console.WriteLine (elm.fileName);  		if (File.Exists (elm.fileName)) {  			System.IO.File.Copy (elm.fileName' targetFile' true);  		}  	}  	if (elm.media == (int)TYPE.VIDEO) {  		Console.WriteLine (elm.coords.ToString ());  		//get source name  		sourceName = System.IO.Path.GetFileName (elm.fileName).ToString ();  		if (videoNum < 10) {  			elementName = "Video00";  		}  		else if (videoNum < 100) {  			elementName = "Video0";  		}  		else {  			elementName = "Video";  		}  		//set gestures  		//see what gestures are assigned to the object and set the name  		//if there are no gestures assigned' set the name to None' and  		//      isManipulationEnabled to false  		//if the gesture is _Click' set the isManipulationEnabled variable  		//      to false  		//_All' _Rotate' _Translate' _Scale' _RotateTranslate' _RotateScale' _TranslateScale' _Click  		gestureName = gestureWriter (elm.gesturesAllowed' elm.linksTo);  		if (gestureName == "_Click" || gestureName == "_None") {  			isManipulationEnabled = false;  		}  		writer.Write ("<StackPanel Name=\"" + elementName + videoNum + "Container" + gestureName + "\" Background=\"Black\" Width=\"" + elm.width + "\" Height=\"" + (elm.height + 30) + "\" IsManipulationEnabled=\"" + isManipulationEnabled + "\">");  		writer.Write ("<MediaElement Name=\"");  		writer.Write (elementName + videoNum + gestureName);  		videoNum++;  		writer.Write ("\" ");  		writer.Write ("Source=\"pack://siteoforigin:'''/tmp/video/");  		writer.Write (sourceName);  		writer.Write ("\" ");  		writer.Write ("Width=\"" + elm.width + "\" Height=\"" + elm.height + "\"");  		writer.Write ("LoadedBehavior=\"Manual\" UnloadedBehavior=\"Stop\" ScrubbingEnabled=\"True\" />");  		writer.Write ("<StackPanel Orientation=\"Horizontal\" Background=\"Gray\">");  		writer.Write ("<Image Source=\"icons\\play.png\" Width=\"30\" Height=\"30\" HorizontalAlignment=\"Left\" />");  		writer.Write ("<Image Source=\"icons\\pause.png\" Width=\"30\" Height=\"30\" HorizontalAlignment=\"Left\" Visibility=\"Collapsed\" />");  		writer.Write ("<Image Source=\"icons\\stop.png\" Width=\"30\" Height=\"30\" HorizontalAlignment=\"Left\" />");  		writer.Write ("</StackPanel>");  		writer.Write ("<StackPanel.RenderTransform>");  		writer.Write ("<MatrixTransform>");  		writer.Write ("<MatrixTransform.Matrix>");  		writer.Write ("<Matrix OffsetX=\"" + elm.coords.X + "\" OffsetY=\"" + elm.coords.Y + "\" M11=\"1\" M22=\"1\" />");  		writer.Write ("</MatrixTransform.Matrix>");  		writer.Write ("</MatrixTransform>");  		writer.Write ("</StackPanel.RenderTransform>");  		writer.Write ("</StackPanel>\n");  		//copy video to presentation directory  		if (!System.IO.Directory.Exists (videoTargetPath)) {  			System.IO.Directory.CreateDirectory (videoTargetPath);  		}  		targetFile = System.IO.Path.Combine (videoTargetPath' sourceName).ToString ();  		if (File.Exists (elm.fileName)) {  			System.IO.File.Copy (elm.fileName' targetFile' true);  		}  	}  	if (elm.media == (int)TYPE.TEXT) {  		if (textNum < 10) {  			elementName = "Text00";  		}  		else if (textNum < 100) {  			elementName = "Text0";  		}  		else {  			elementName = "Text";  		}  		//set gestures  		//TODO: see what gestures are assigned to the object and set the name  		//TODO: if there are no gestures assigned' set the name to None' and  		//      isManipulationEnabled to false  		gestureName = gestureWriter (elm.gesturesAllowed' elm.linksTo);  		if (gestureName == "_Click" || gestureName == "_None") {  			isManipulationEnabled = false;  		}  		writer.Write ("<TextBlock Name=\"");  		writer.Write (elementName + textNum + gestureName);  		writer.Write ("\" ");  		writer.Write ("IsManipulationEnabled=\"" + isManipulationEnabled + "\" TextWrapping=\"Wrap\" Margin=\"0'0'0'20\"");  		writer.Write (" Width=\"" + elm.width + "\" Height=\"" + elm.height + "\"" + " FontFamily=\"" + elm.ff.ToString () + "\"" + " FontSize=\"" + elm.fontSize + "\"" + " Foreground=\"" + (Color)elm.fontColor.Color + "\">");  		writer.Write (elm.fileName);  		textNum++;  		//matrix manipulation stuff  		writer.Write ("<TextBlock.RenderTransform>");  		writer.Write ("<MatrixTransform>");  		writer.Write ("<MatrixTransform.Matrix>");  		writer.Write ("<Matrix OffsetX =\"" + elm.coords.X + "\" OffsetY=\"" + elm.coords.Y + "\" M11=\"1\" M22=\"1\" />");  		writer.Write ("</MatrixTransform.Matrix>");  		writer.Write ("</MatrixTransform>");  		writer.Write ("</TextBlock.RenderTransform>");  		writer.Write ("</TextBlock>");  		if (gestureName == "_Click") {  			writer.Write ("<TextBox Name=\"" + elementName + textNum + gestureName + "_Scene" + "\" Text=\"" + elm.linksTo + "\" Visibility=\"Hidden\" />");  		}  		writer.Write ("\n");  	}  	if (elm.media == (int)TYPE.AUDIO) {  		sourceName = System.IO.Path.GetFileName (elm.fileName).ToString ();  		writer.Write ("<MediaElement Name=\"");  		writer.Write ("Audio");  		writer.Write ("\" ");  		writer.Write ("Source=\"pack://siteoforigin:'''/tmp/audio/");  		writer.Write (sourceName);  		writer.Write ("\" LoadedBehavior=\"Manual\" UnloadedBehavior=\"Stop\" />\n");  		//copy audio to presentation directory  		if (!System.IO.Directory.Exists (audioTargetPath)) {  			System.IO.Directory.CreateDirectory (audioTargetPath);  		}  		targetFile = System.IO.Path.Combine (audioTargetPath' sourceName).ToString ();  		if (File.Exists (elm.fileName)) {  			System.IO.File.Copy (elm.fileName' targetFile' true);  		}  	}  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Export,The following statement contains a magic number: foreach (sElements elm in myScene) {  	Boolean isManipulationEnabled = true;  	if (elm.media == (int)TYPE.IMAGE) {  		//get source name  		sourceName = elm.fileName;  		if (File.Exists (elm.fileName.ToString ())) {  			sourceName = System.IO.Path.GetFileName (elm.fileName).ToString ();  		}  		else {  			Console.WriteLine ("File does not exist!");  		}  		if (imageNum < 10) {  			elementName = "Image00";  		}  		else if (imageNum < 100) {  			elementName = "Image0";  		}  		else {  			elementName = "Image";  		}  		//set gestures  		//see what gestures are assigned to the object and set the name  		//if there are no gestures assigned' set the name to None' and  		//      isManipulationEnabled to false  		gestureName = gestureWriter (elm.gesturesAllowed' elm.linksTo);  		if (gestureName == "_None" || gestureName == "_Click") {  			isManipulationEnabled = false;  		}  		writer.Write ("<Image Name=\"");  		writer.Write (elementName + imageNum + gestureName);  		imageNum++;  		writer.Write ("\" ");  		writer.Write ("Source=\"pack://siteoforigin:'''/tmp/images/");  		writer.Write (sourceName);  		writer.Write ("\" ");  		writer.Write ("Width=\"" + elm.width + "\" Height=\"" + elm.height + "\"");  		writer.Write (" IsManipulationEnabled=\"" + isManipulationEnabled + "\">");  		//Add matrix manipulation structure  		writer.Write ("<Image.RenderTransform>");  		writer.Write ("<MatrixTransform>");  		writer.Write ("<MatrixTransform.Matrix>");  		writer.Write ("<Matrix OffsetX=\"" + elm.coords.X + "\" OffsetY=\"" + elm.coords.Y + "\" M11=\"1\" M22=\"1\" />");  		writer.Write ("</MatrixTransform.Matrix>");  		writer.Write ("</MatrixTransform>");  		writer.Write ("</Image.RenderTransform>");  		writer.Write ("</Image>");  		if (gestureName == "_Click") {  			writer.Write ("<TextBox Name=\"" + elementName + imageNum + gestureName + "_Scene" + "\" Text=\"" + elm.linksTo + "\" Visibility=\"Hidden\" />");  		}  		writer.Write ("\n");  		//copy image to presentation directory  		if (!System.IO.Directory.Exists (imageTargetPath)) {  			System.IO.Directory.CreateDirectory (imageTargetPath);  		}  		targetFile = System.IO.Path.Combine (imageTargetPath' sourceName).ToString ();  		Console.WriteLine (elm.fileName);  		if (File.Exists (elm.fileName)) {  			System.IO.File.Copy (elm.fileName' targetFile' true);  		}  	}  	if (elm.media == (int)TYPE.VIDEO) {  		Console.WriteLine (elm.coords.ToString ());  		//get source name  		sourceName = System.IO.Path.GetFileName (elm.fileName).ToString ();  		if (videoNum < 10) {  			elementName = "Video00";  		}  		else if (videoNum < 100) {  			elementName = "Video0";  		}  		else {  			elementName = "Video";  		}  		//set gestures  		//see what gestures are assigned to the object and set the name  		//if there are no gestures assigned' set the name to None' and  		//      isManipulationEnabled to false  		//if the gesture is _Click' set the isManipulationEnabled variable  		//      to false  		//_All' _Rotate' _Translate' _Scale' _RotateTranslate' _RotateScale' _TranslateScale' _Click  		gestureName = gestureWriter (elm.gesturesAllowed' elm.linksTo);  		if (gestureName == "_Click" || gestureName == "_None") {  			isManipulationEnabled = false;  		}  		writer.Write ("<StackPanel Name=\"" + elementName + videoNum + "Container" + gestureName + "\" Background=\"Black\" Width=\"" + elm.width + "\" Height=\"" + (elm.height + 30) + "\" IsManipulationEnabled=\"" + isManipulationEnabled + "\">");  		writer.Write ("<MediaElement Name=\"");  		writer.Write (elementName + videoNum + gestureName);  		videoNum++;  		writer.Write ("\" ");  		writer.Write ("Source=\"pack://siteoforigin:'''/tmp/video/");  		writer.Write (sourceName);  		writer.Write ("\" ");  		writer.Write ("Width=\"" + elm.width + "\" Height=\"" + elm.height + "\"");  		writer.Write ("LoadedBehavior=\"Manual\" UnloadedBehavior=\"Stop\" ScrubbingEnabled=\"True\" />");  		writer.Write ("<StackPanel Orientation=\"Horizontal\" Background=\"Gray\">");  		writer.Write ("<Image Source=\"icons\\play.png\" Width=\"30\" Height=\"30\" HorizontalAlignment=\"Left\" />");  		writer.Write ("<Image Source=\"icons\\pause.png\" Width=\"30\" Height=\"30\" HorizontalAlignment=\"Left\" Visibility=\"Collapsed\" />");  		writer.Write ("<Image Source=\"icons\\stop.png\" Width=\"30\" Height=\"30\" HorizontalAlignment=\"Left\" />");  		writer.Write ("</StackPanel>");  		writer.Write ("<StackPanel.RenderTransform>");  		writer.Write ("<MatrixTransform>");  		writer.Write ("<MatrixTransform.Matrix>");  		writer.Write ("<Matrix OffsetX=\"" + elm.coords.X + "\" OffsetY=\"" + elm.coords.Y + "\" M11=\"1\" M22=\"1\" />");  		writer.Write ("</MatrixTransform.Matrix>");  		writer.Write ("</MatrixTransform>");  		writer.Write ("</StackPanel.RenderTransform>");  		writer.Write ("</StackPanel>\n");  		//copy video to presentation directory  		if (!System.IO.Directory.Exists (videoTargetPath)) {  			System.IO.Directory.CreateDirectory (videoTargetPath);  		}  		targetFile = System.IO.Path.Combine (videoTargetPath' sourceName).ToString ();  		if (File.Exists (elm.fileName)) {  			System.IO.File.Copy (elm.fileName' targetFile' true);  		}  	}  	if (elm.media == (int)TYPE.TEXT) {  		if (textNum < 10) {  			elementName = "Text00";  		}  		else if (textNum < 100) {  			elementName = "Text0";  		}  		else {  			elementName = "Text";  		}  		//set gestures  		//TODO: see what gestures are assigned to the object and set the name  		//TODO: if there are no gestures assigned' set the name to None' and  		//      isManipulationEnabled to false  		gestureName = gestureWriter (elm.gesturesAllowed' elm.linksTo);  		if (gestureName == "_Click" || gestureName == "_None") {  			isManipulationEnabled = false;  		}  		writer.Write ("<TextBlock Name=\"");  		writer.Write (elementName + textNum + gestureName);  		writer.Write ("\" ");  		writer.Write ("IsManipulationEnabled=\"" + isManipulationEnabled + "\" TextWrapping=\"Wrap\" Margin=\"0'0'0'20\"");  		writer.Write (" Width=\"" + elm.width + "\" Height=\"" + elm.height + "\"" + " FontFamily=\"" + elm.ff.ToString () + "\"" + " FontSize=\"" + elm.fontSize + "\"" + " Foreground=\"" + (Color)elm.fontColor.Color + "\">");  		writer.Write (elm.fileName);  		textNum++;  		//matrix manipulation stuff  		writer.Write ("<TextBlock.RenderTransform>");  		writer.Write ("<MatrixTransform>");  		writer.Write ("<MatrixTransform.Matrix>");  		writer.Write ("<Matrix OffsetX =\"" + elm.coords.X + "\" OffsetY=\"" + elm.coords.Y + "\" M11=\"1\" M22=\"1\" />");  		writer.Write ("</MatrixTransform.Matrix>");  		writer.Write ("</MatrixTransform>");  		writer.Write ("</TextBlock.RenderTransform>");  		writer.Write ("</TextBlock>");  		if (gestureName == "_Click") {  			writer.Write ("<TextBox Name=\"" + elementName + textNum + gestureName + "_Scene" + "\" Text=\"" + elm.linksTo + "\" Visibility=\"Hidden\" />");  		}  		writer.Write ("\n");  	}  	if (elm.media == (int)TYPE.AUDIO) {  		sourceName = System.IO.Path.GetFileName (elm.fileName).ToString ();  		writer.Write ("<MediaElement Name=\"");  		writer.Write ("Audio");  		writer.Write ("\" ");  		writer.Write ("Source=\"pack://siteoforigin:'''/tmp/audio/");  		writer.Write (sourceName);  		writer.Write ("\" LoadedBehavior=\"Manual\" UnloadedBehavior=\"Stop\" />\n");  		//copy audio to presentation directory  		if (!System.IO.Directory.Exists (audioTargetPath)) {  			System.IO.Directory.CreateDirectory (audioTargetPath);  		}  		targetFile = System.IO.Path.Combine (audioTargetPath' sourceName).ToString ();  		if (File.Exists (elm.fileName)) {  			System.IO.File.Copy (elm.fileName' targetFile' true);  		}  	}  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Export,The following statement contains a magic number: foreach (sElements elm in myScene) {  	Boolean isManipulationEnabled = true;  	if (elm.media == (int)TYPE.IMAGE) {  		//get source name  		sourceName = elm.fileName;  		if (File.Exists (elm.fileName.ToString ())) {  			sourceName = System.IO.Path.GetFileName (elm.fileName).ToString ();  		}  		else {  			Console.WriteLine ("File does not exist!");  		}  		if (imageNum < 10) {  			elementName = "Image00";  		}  		else if (imageNum < 100) {  			elementName = "Image0";  		}  		else {  			elementName = "Image";  		}  		//set gestures  		//see what gestures are assigned to the object and set the name  		//if there are no gestures assigned' set the name to None' and  		//      isManipulationEnabled to false  		gestureName = gestureWriter (elm.gesturesAllowed' elm.linksTo);  		if (gestureName == "_None" || gestureName == "_Click") {  			isManipulationEnabled = false;  		}  		writer.Write ("<Image Name=\"");  		writer.Write (elementName + imageNum + gestureName);  		imageNum++;  		writer.Write ("\" ");  		writer.Write ("Source=\"pack://siteoforigin:'''/tmp/images/");  		writer.Write (sourceName);  		writer.Write ("\" ");  		writer.Write ("Width=\"" + elm.width + "\" Height=\"" + elm.height + "\"");  		writer.Write (" IsManipulationEnabled=\"" + isManipulationEnabled + "\">");  		//Add matrix manipulation structure  		writer.Write ("<Image.RenderTransform>");  		writer.Write ("<MatrixTransform>");  		writer.Write ("<MatrixTransform.Matrix>");  		writer.Write ("<Matrix OffsetX=\"" + elm.coords.X + "\" OffsetY=\"" + elm.coords.Y + "\" M11=\"1\" M22=\"1\" />");  		writer.Write ("</MatrixTransform.Matrix>");  		writer.Write ("</MatrixTransform>");  		writer.Write ("</Image.RenderTransform>");  		writer.Write ("</Image>");  		if (gestureName == "_Click") {  			writer.Write ("<TextBox Name=\"" + elementName + imageNum + gestureName + "_Scene" + "\" Text=\"" + elm.linksTo + "\" Visibility=\"Hidden\" />");  		}  		writer.Write ("\n");  		//copy image to presentation directory  		if (!System.IO.Directory.Exists (imageTargetPath)) {  			System.IO.Directory.CreateDirectory (imageTargetPath);  		}  		targetFile = System.IO.Path.Combine (imageTargetPath' sourceName).ToString ();  		Console.WriteLine (elm.fileName);  		if (File.Exists (elm.fileName)) {  			System.IO.File.Copy (elm.fileName' targetFile' true);  		}  	}  	if (elm.media == (int)TYPE.VIDEO) {  		Console.WriteLine (elm.coords.ToString ());  		//get source name  		sourceName = System.IO.Path.GetFileName (elm.fileName).ToString ();  		if (videoNum < 10) {  			elementName = "Video00";  		}  		else if (videoNum < 100) {  			elementName = "Video0";  		}  		else {  			elementName = "Video";  		}  		//set gestures  		//see what gestures are assigned to the object and set the name  		//if there are no gestures assigned' set the name to None' and  		//      isManipulationEnabled to false  		//if the gesture is _Click' set the isManipulationEnabled variable  		//      to false  		//_All' _Rotate' _Translate' _Scale' _RotateTranslate' _RotateScale' _TranslateScale' _Click  		gestureName = gestureWriter (elm.gesturesAllowed' elm.linksTo);  		if (gestureName == "_Click" || gestureName == "_None") {  			isManipulationEnabled = false;  		}  		writer.Write ("<StackPanel Name=\"" + elementName + videoNum + "Container" + gestureName + "\" Background=\"Black\" Width=\"" + elm.width + "\" Height=\"" + (elm.height + 30) + "\" IsManipulationEnabled=\"" + isManipulationEnabled + "\">");  		writer.Write ("<MediaElement Name=\"");  		writer.Write (elementName + videoNum + gestureName);  		videoNum++;  		writer.Write ("\" ");  		writer.Write ("Source=\"pack://siteoforigin:'''/tmp/video/");  		writer.Write (sourceName);  		writer.Write ("\" ");  		writer.Write ("Width=\"" + elm.width + "\" Height=\"" + elm.height + "\"");  		writer.Write ("LoadedBehavior=\"Manual\" UnloadedBehavior=\"Stop\" ScrubbingEnabled=\"True\" />");  		writer.Write ("<StackPanel Orientation=\"Horizontal\" Background=\"Gray\">");  		writer.Write ("<Image Source=\"icons\\play.png\" Width=\"30\" Height=\"30\" HorizontalAlignment=\"Left\" />");  		writer.Write ("<Image Source=\"icons\\pause.png\" Width=\"30\" Height=\"30\" HorizontalAlignment=\"Left\" Visibility=\"Collapsed\" />");  		writer.Write ("<Image Source=\"icons\\stop.png\" Width=\"30\" Height=\"30\" HorizontalAlignment=\"Left\" />");  		writer.Write ("</StackPanel>");  		writer.Write ("<StackPanel.RenderTransform>");  		writer.Write ("<MatrixTransform>");  		writer.Write ("<MatrixTransform.Matrix>");  		writer.Write ("<Matrix OffsetX=\"" + elm.coords.X + "\" OffsetY=\"" + elm.coords.Y + "\" M11=\"1\" M22=\"1\" />");  		writer.Write ("</MatrixTransform.Matrix>");  		writer.Write ("</MatrixTransform>");  		writer.Write ("</StackPanel.RenderTransform>");  		writer.Write ("</StackPanel>\n");  		//copy video to presentation directory  		if (!System.IO.Directory.Exists (videoTargetPath)) {  			System.IO.Directory.CreateDirectory (videoTargetPath);  		}  		targetFile = System.IO.Path.Combine (videoTargetPath' sourceName).ToString ();  		if (File.Exists (elm.fileName)) {  			System.IO.File.Copy (elm.fileName' targetFile' true);  		}  	}  	if (elm.media == (int)TYPE.TEXT) {  		if (textNum < 10) {  			elementName = "Text00";  		}  		else if (textNum < 100) {  			elementName = "Text0";  		}  		else {  			elementName = "Text";  		}  		//set gestures  		//TODO: see what gestures are assigned to the object and set the name  		//TODO: if there are no gestures assigned' set the name to None' and  		//      isManipulationEnabled to false  		gestureName = gestureWriter (elm.gesturesAllowed' elm.linksTo);  		if (gestureName == "_Click" || gestureName == "_None") {  			isManipulationEnabled = false;  		}  		writer.Write ("<TextBlock Name=\"");  		writer.Write (elementName + textNum + gestureName);  		writer.Write ("\" ");  		writer.Write ("IsManipulationEnabled=\"" + isManipulationEnabled + "\" TextWrapping=\"Wrap\" Margin=\"0'0'0'20\"");  		writer.Write (" Width=\"" + elm.width + "\" Height=\"" + elm.height + "\"" + " FontFamily=\"" + elm.ff.ToString () + "\"" + " FontSize=\"" + elm.fontSize + "\"" + " Foreground=\"" + (Color)elm.fontColor.Color + "\">");  		writer.Write (elm.fileName);  		textNum++;  		//matrix manipulation stuff  		writer.Write ("<TextBlock.RenderTransform>");  		writer.Write ("<MatrixTransform>");  		writer.Write ("<MatrixTransform.Matrix>");  		writer.Write ("<Matrix OffsetX =\"" + elm.coords.X + "\" OffsetY=\"" + elm.coords.Y + "\" M11=\"1\" M22=\"1\" />");  		writer.Write ("</MatrixTransform.Matrix>");  		writer.Write ("</MatrixTransform>");  		writer.Write ("</TextBlock.RenderTransform>");  		writer.Write ("</TextBlock>");  		if (gestureName == "_Click") {  			writer.Write ("<TextBox Name=\"" + elementName + textNum + gestureName + "_Scene" + "\" Text=\"" + elm.linksTo + "\" Visibility=\"Hidden\" />");  		}  		writer.Write ("\n");  	}  	if (elm.media == (int)TYPE.AUDIO) {  		sourceName = System.IO.Path.GetFileName (elm.fileName).ToString ();  		writer.Write ("<MediaElement Name=\"");  		writer.Write ("Audio");  		writer.Write ("\" ");  		writer.Write ("Source=\"pack://siteoforigin:'''/tmp/audio/");  		writer.Write (sourceName);  		writer.Write ("\" LoadedBehavior=\"Manual\" UnloadedBehavior=\"Stop\" />\n");  		//copy audio to presentation directory  		if (!System.IO.Directory.Exists (audioTargetPath)) {  			System.IO.Directory.CreateDirectory (audioTargetPath);  		}  		targetFile = System.IO.Path.Combine (audioTargetPath' sourceName).ToString ();  		if (File.Exists (elm.fileName)) {  			System.IO.File.Copy (elm.fileName' targetFile' true);  		}  	}  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Export,The following statement contains a magic number: foreach (sElements elm in myScene) {  	Boolean isManipulationEnabled = true;  	if (elm.media == (int)TYPE.IMAGE) {  		//get source name  		sourceName = elm.fileName;  		if (File.Exists (elm.fileName.ToString ())) {  			sourceName = System.IO.Path.GetFileName (elm.fileName).ToString ();  		}  		else {  			Console.WriteLine ("File does not exist!");  		}  		if (imageNum < 10) {  			elementName = "Image00";  		}  		else if (imageNum < 100) {  			elementName = "Image0";  		}  		else {  			elementName = "Image";  		}  		//set gestures  		//see what gestures are assigned to the object and set the name  		//if there are no gestures assigned' set the name to None' and  		//      isManipulationEnabled to false  		gestureName = gestureWriter (elm.gesturesAllowed' elm.linksTo);  		if (gestureName == "_None" || gestureName == "_Click") {  			isManipulationEnabled = false;  		}  		writer.Write ("<Image Name=\"");  		writer.Write (elementName + imageNum + gestureName);  		imageNum++;  		writer.Write ("\" ");  		writer.Write ("Source=\"pack://siteoforigin:'''/tmp/images/");  		writer.Write (sourceName);  		writer.Write ("\" ");  		writer.Write ("Width=\"" + elm.width + "\" Height=\"" + elm.height + "\"");  		writer.Write (" IsManipulationEnabled=\"" + isManipulationEnabled + "\">");  		//Add matrix manipulation structure  		writer.Write ("<Image.RenderTransform>");  		writer.Write ("<MatrixTransform>");  		writer.Write ("<MatrixTransform.Matrix>");  		writer.Write ("<Matrix OffsetX=\"" + elm.coords.X + "\" OffsetY=\"" + elm.coords.Y + "\" M11=\"1\" M22=\"1\" />");  		writer.Write ("</MatrixTransform.Matrix>");  		writer.Write ("</MatrixTransform>");  		writer.Write ("</Image.RenderTransform>");  		writer.Write ("</Image>");  		if (gestureName == "_Click") {  			writer.Write ("<TextBox Name=\"" + elementName + imageNum + gestureName + "_Scene" + "\" Text=\"" + elm.linksTo + "\" Visibility=\"Hidden\" />");  		}  		writer.Write ("\n");  		//copy image to presentation directory  		if (!System.IO.Directory.Exists (imageTargetPath)) {  			System.IO.Directory.CreateDirectory (imageTargetPath);  		}  		targetFile = System.IO.Path.Combine (imageTargetPath' sourceName).ToString ();  		Console.WriteLine (elm.fileName);  		if (File.Exists (elm.fileName)) {  			System.IO.File.Copy (elm.fileName' targetFile' true);  		}  	}  	if (elm.media == (int)TYPE.VIDEO) {  		Console.WriteLine (elm.coords.ToString ());  		//get source name  		sourceName = System.IO.Path.GetFileName (elm.fileName).ToString ();  		if (videoNum < 10) {  			elementName = "Video00";  		}  		else if (videoNum < 100) {  			elementName = "Video0";  		}  		else {  			elementName = "Video";  		}  		//set gestures  		//see what gestures are assigned to the object and set the name  		//if there are no gestures assigned' set the name to None' and  		//      isManipulationEnabled to false  		//if the gesture is _Click' set the isManipulationEnabled variable  		//      to false  		//_All' _Rotate' _Translate' _Scale' _RotateTranslate' _RotateScale' _TranslateScale' _Click  		gestureName = gestureWriter (elm.gesturesAllowed' elm.linksTo);  		if (gestureName == "_Click" || gestureName == "_None") {  			isManipulationEnabled = false;  		}  		writer.Write ("<StackPanel Name=\"" + elementName + videoNum + "Container" + gestureName + "\" Background=\"Black\" Width=\"" + elm.width + "\" Height=\"" + (elm.height + 30) + "\" IsManipulationEnabled=\"" + isManipulationEnabled + "\">");  		writer.Write ("<MediaElement Name=\"");  		writer.Write (elementName + videoNum + gestureName);  		videoNum++;  		writer.Write ("\" ");  		writer.Write ("Source=\"pack://siteoforigin:'''/tmp/video/");  		writer.Write (sourceName);  		writer.Write ("\" ");  		writer.Write ("Width=\"" + elm.width + "\" Height=\"" + elm.height + "\"");  		writer.Write ("LoadedBehavior=\"Manual\" UnloadedBehavior=\"Stop\" ScrubbingEnabled=\"True\" />");  		writer.Write ("<StackPanel Orientation=\"Horizontal\" Background=\"Gray\">");  		writer.Write ("<Image Source=\"icons\\play.png\" Width=\"30\" Height=\"30\" HorizontalAlignment=\"Left\" />");  		writer.Write ("<Image Source=\"icons\\pause.png\" Width=\"30\" Height=\"30\" HorizontalAlignment=\"Left\" Visibility=\"Collapsed\" />");  		writer.Write ("<Image Source=\"icons\\stop.png\" Width=\"30\" Height=\"30\" HorizontalAlignment=\"Left\" />");  		writer.Write ("</StackPanel>");  		writer.Write ("<StackPanel.RenderTransform>");  		writer.Write ("<MatrixTransform>");  		writer.Write ("<MatrixTransform.Matrix>");  		writer.Write ("<Matrix OffsetX=\"" + elm.coords.X + "\" OffsetY=\"" + elm.coords.Y + "\" M11=\"1\" M22=\"1\" />");  		writer.Write ("</MatrixTransform.Matrix>");  		writer.Write ("</MatrixTransform>");  		writer.Write ("</StackPanel.RenderTransform>");  		writer.Write ("</StackPanel>\n");  		//copy video to presentation directory  		if (!System.IO.Directory.Exists (videoTargetPath)) {  			System.IO.Directory.CreateDirectory (videoTargetPath);  		}  		targetFile = System.IO.Path.Combine (videoTargetPath' sourceName).ToString ();  		if (File.Exists (elm.fileName)) {  			System.IO.File.Copy (elm.fileName' targetFile' true);  		}  	}  	if (elm.media == (int)TYPE.TEXT) {  		if (textNum < 10) {  			elementName = "Text00";  		}  		else if (textNum < 100) {  			elementName = "Text0";  		}  		else {  			elementName = "Text";  		}  		//set gestures  		//TODO: see what gestures are assigned to the object and set the name  		//TODO: if there are no gestures assigned' set the name to None' and  		//      isManipulationEnabled to false  		gestureName = gestureWriter (elm.gesturesAllowed' elm.linksTo);  		if (gestureName == "_Click" || gestureName == "_None") {  			isManipulationEnabled = false;  		}  		writer.Write ("<TextBlock Name=\"");  		writer.Write (elementName + textNum + gestureName);  		writer.Write ("\" ");  		writer.Write ("IsManipulationEnabled=\"" + isManipulationEnabled + "\" TextWrapping=\"Wrap\" Margin=\"0'0'0'20\"");  		writer.Write (" Width=\"" + elm.width + "\" Height=\"" + elm.height + "\"" + " FontFamily=\"" + elm.ff.ToString () + "\"" + " FontSize=\"" + elm.fontSize + "\"" + " Foreground=\"" + (Color)elm.fontColor.Color + "\">");  		writer.Write (elm.fileName);  		textNum++;  		//matrix manipulation stuff  		writer.Write ("<TextBlock.RenderTransform>");  		writer.Write ("<MatrixTransform>");  		writer.Write ("<MatrixTransform.Matrix>");  		writer.Write ("<Matrix OffsetX =\"" + elm.coords.X + "\" OffsetY=\"" + elm.coords.Y + "\" M11=\"1\" M22=\"1\" />");  		writer.Write ("</MatrixTransform.Matrix>");  		writer.Write ("</MatrixTransform>");  		writer.Write ("</TextBlock.RenderTransform>");  		writer.Write ("</TextBlock>");  		if (gestureName == "_Click") {  			writer.Write ("<TextBox Name=\"" + elementName + textNum + gestureName + "_Scene" + "\" Text=\"" + elm.linksTo + "\" Visibility=\"Hidden\" />");  		}  		writer.Write ("\n");  	}  	if (elm.media == (int)TYPE.AUDIO) {  		sourceName = System.IO.Path.GetFileName (elm.fileName).ToString ();  		writer.Write ("<MediaElement Name=\"");  		writer.Write ("Audio");  		writer.Write ("\" ");  		writer.Write ("Source=\"pack://siteoforigin:'''/tmp/audio/");  		writer.Write (sourceName);  		writer.Write ("\" LoadedBehavior=\"Manual\" UnloadedBehavior=\"Stop\" />\n");  		//copy audio to presentation directory  		if (!System.IO.Directory.Exists (audioTargetPath)) {  			System.IO.Directory.CreateDirectory (audioTargetPath);  		}  		targetFile = System.IO.Path.Combine (audioTargetPath' sourceName).ToString ();  		if (File.Exists (elm.fileName)) {  			System.IO.File.Copy (elm.fileName' targetFile' true);  		}  	}  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Export,The following statement contains a magic number: if (elm.media == (int)TYPE.IMAGE) {  	//get source name  	sourceName = elm.fileName;  	if (File.Exists (elm.fileName.ToString ())) {  		sourceName = System.IO.Path.GetFileName (elm.fileName).ToString ();  	}  	else {  		Console.WriteLine ("File does not exist!");  	}  	if (imageNum < 10) {  		elementName = "Image00";  	}  	else if (imageNum < 100) {  		elementName = "Image0";  	}  	else {  		elementName = "Image";  	}  	//set gestures  	//see what gestures are assigned to the object and set the name  	//if there are no gestures assigned' set the name to None' and  	//      isManipulationEnabled to false  	gestureName = gestureWriter (elm.gesturesAllowed' elm.linksTo);  	if (gestureName == "_None" || gestureName == "_Click") {  		isManipulationEnabled = false;  	}  	writer.Write ("<Image Name=\"");  	writer.Write (elementName + imageNum + gestureName);  	imageNum++;  	writer.Write ("\" ");  	writer.Write ("Source=\"pack://siteoforigin:'''/tmp/images/");  	writer.Write (sourceName);  	writer.Write ("\" ");  	writer.Write ("Width=\"" + elm.width + "\" Height=\"" + elm.height + "\"");  	writer.Write (" IsManipulationEnabled=\"" + isManipulationEnabled + "\">");  	//Add matrix manipulation structure  	writer.Write ("<Image.RenderTransform>");  	writer.Write ("<MatrixTransform>");  	writer.Write ("<MatrixTransform.Matrix>");  	writer.Write ("<Matrix OffsetX=\"" + elm.coords.X + "\" OffsetY=\"" + elm.coords.Y + "\" M11=\"1\" M22=\"1\" />");  	writer.Write ("</MatrixTransform.Matrix>");  	writer.Write ("</MatrixTransform>");  	writer.Write ("</Image.RenderTransform>");  	writer.Write ("</Image>");  	if (gestureName == "_Click") {  		writer.Write ("<TextBox Name=\"" + elementName + imageNum + gestureName + "_Scene" + "\" Text=\"" + elm.linksTo + "\" Visibility=\"Hidden\" />");  	}  	writer.Write ("\n");  	//copy image to presentation directory  	if (!System.IO.Directory.Exists (imageTargetPath)) {  		System.IO.Directory.CreateDirectory (imageTargetPath);  	}  	targetFile = System.IO.Path.Combine (imageTargetPath' sourceName).ToString ();  	Console.WriteLine (elm.fileName);  	if (File.Exists (elm.fileName)) {  		System.IO.File.Copy (elm.fileName' targetFile' true);  	}  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Export,The following statement contains a magic number: if (elm.media == (int)TYPE.IMAGE) {  	//get source name  	sourceName = elm.fileName;  	if (File.Exists (elm.fileName.ToString ())) {  		sourceName = System.IO.Path.GetFileName (elm.fileName).ToString ();  	}  	else {  		Console.WriteLine ("File does not exist!");  	}  	if (imageNum < 10) {  		elementName = "Image00";  	}  	else if (imageNum < 100) {  		elementName = "Image0";  	}  	else {  		elementName = "Image";  	}  	//set gestures  	//see what gestures are assigned to the object and set the name  	//if there are no gestures assigned' set the name to None' and  	//      isManipulationEnabled to false  	gestureName = gestureWriter (elm.gesturesAllowed' elm.linksTo);  	if (gestureName == "_None" || gestureName == "_Click") {  		isManipulationEnabled = false;  	}  	writer.Write ("<Image Name=\"");  	writer.Write (elementName + imageNum + gestureName);  	imageNum++;  	writer.Write ("\" ");  	writer.Write ("Source=\"pack://siteoforigin:'''/tmp/images/");  	writer.Write (sourceName);  	writer.Write ("\" ");  	writer.Write ("Width=\"" + elm.width + "\" Height=\"" + elm.height + "\"");  	writer.Write (" IsManipulationEnabled=\"" + isManipulationEnabled + "\">");  	//Add matrix manipulation structure  	writer.Write ("<Image.RenderTransform>");  	writer.Write ("<MatrixTransform>");  	writer.Write ("<MatrixTransform.Matrix>");  	writer.Write ("<Matrix OffsetX=\"" + elm.coords.X + "\" OffsetY=\"" + elm.coords.Y + "\" M11=\"1\" M22=\"1\" />");  	writer.Write ("</MatrixTransform.Matrix>");  	writer.Write ("</MatrixTransform>");  	writer.Write ("</Image.RenderTransform>");  	writer.Write ("</Image>");  	if (gestureName == "_Click") {  		writer.Write ("<TextBox Name=\"" + elementName + imageNum + gestureName + "_Scene" + "\" Text=\"" + elm.linksTo + "\" Visibility=\"Hidden\" />");  	}  	writer.Write ("\n");  	//copy image to presentation directory  	if (!System.IO.Directory.Exists (imageTargetPath)) {  		System.IO.Directory.CreateDirectory (imageTargetPath);  	}  	targetFile = System.IO.Path.Combine (imageTargetPath' sourceName).ToString ();  	Console.WriteLine (elm.fileName);  	if (File.Exists (elm.fileName)) {  		System.IO.File.Copy (elm.fileName' targetFile' true);  	}  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Export,The following statement contains a magic number: if (imageNum < 10) {  	elementName = "Image00";  }  else if (imageNum < 100) {  	elementName = "Image0";  }  else {  	elementName = "Image";  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Export,The following statement contains a magic number: if (imageNum < 10) {  	elementName = "Image00";  }  else if (imageNum < 100) {  	elementName = "Image0";  }  else {  	elementName = "Image";  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Export,The following statement contains a magic number: if (imageNum < 100) {  	elementName = "Image0";  }  else {  	elementName = "Image";  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Export,The following statement contains a magic number: if (elm.media == (int)TYPE.VIDEO) {  	Console.WriteLine (elm.coords.ToString ());  	//get source name  	sourceName = System.IO.Path.GetFileName (elm.fileName).ToString ();  	if (videoNum < 10) {  		elementName = "Video00";  	}  	else if (videoNum < 100) {  		elementName = "Video0";  	}  	else {  		elementName = "Video";  	}  	//set gestures  	//see what gestures are assigned to the object and set the name  	//if there are no gestures assigned' set the name to None' and  	//      isManipulationEnabled to false  	//if the gesture is _Click' set the isManipulationEnabled variable  	//      to false  	//_All' _Rotate' _Translate' _Scale' _RotateTranslate' _RotateScale' _TranslateScale' _Click  	gestureName = gestureWriter (elm.gesturesAllowed' elm.linksTo);  	if (gestureName == "_Click" || gestureName == "_None") {  		isManipulationEnabled = false;  	}  	writer.Write ("<StackPanel Name=\"" + elementName + videoNum + "Container" + gestureName + "\" Background=\"Black\" Width=\"" + elm.width + "\" Height=\"" + (elm.height + 30) + "\" IsManipulationEnabled=\"" + isManipulationEnabled + "\">");  	writer.Write ("<MediaElement Name=\"");  	writer.Write (elementName + videoNum + gestureName);  	videoNum++;  	writer.Write ("\" ");  	writer.Write ("Source=\"pack://siteoforigin:'''/tmp/video/");  	writer.Write (sourceName);  	writer.Write ("\" ");  	writer.Write ("Width=\"" + elm.width + "\" Height=\"" + elm.height + "\"");  	writer.Write ("LoadedBehavior=\"Manual\" UnloadedBehavior=\"Stop\" ScrubbingEnabled=\"True\" />");  	writer.Write ("<StackPanel Orientation=\"Horizontal\" Background=\"Gray\">");  	writer.Write ("<Image Source=\"icons\\play.png\" Width=\"30\" Height=\"30\" HorizontalAlignment=\"Left\" />");  	writer.Write ("<Image Source=\"icons\\pause.png\" Width=\"30\" Height=\"30\" HorizontalAlignment=\"Left\" Visibility=\"Collapsed\" />");  	writer.Write ("<Image Source=\"icons\\stop.png\" Width=\"30\" Height=\"30\" HorizontalAlignment=\"Left\" />");  	writer.Write ("</StackPanel>");  	writer.Write ("<StackPanel.RenderTransform>");  	writer.Write ("<MatrixTransform>");  	writer.Write ("<MatrixTransform.Matrix>");  	writer.Write ("<Matrix OffsetX=\"" + elm.coords.X + "\" OffsetY=\"" + elm.coords.Y + "\" M11=\"1\" M22=\"1\" />");  	writer.Write ("</MatrixTransform.Matrix>");  	writer.Write ("</MatrixTransform>");  	writer.Write ("</StackPanel.RenderTransform>");  	writer.Write ("</StackPanel>\n");  	//copy video to presentation directory  	if (!System.IO.Directory.Exists (videoTargetPath)) {  		System.IO.Directory.CreateDirectory (videoTargetPath);  	}  	targetFile = System.IO.Path.Combine (videoTargetPath' sourceName).ToString ();  	if (File.Exists (elm.fileName)) {  		System.IO.File.Copy (elm.fileName' targetFile' true);  	}  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Export,The following statement contains a magic number: if (elm.media == (int)TYPE.VIDEO) {  	Console.WriteLine (elm.coords.ToString ());  	//get source name  	sourceName = System.IO.Path.GetFileName (elm.fileName).ToString ();  	if (videoNum < 10) {  		elementName = "Video00";  	}  	else if (videoNum < 100) {  		elementName = "Video0";  	}  	else {  		elementName = "Video";  	}  	//set gestures  	//see what gestures are assigned to the object and set the name  	//if there are no gestures assigned' set the name to None' and  	//      isManipulationEnabled to false  	//if the gesture is _Click' set the isManipulationEnabled variable  	//      to false  	//_All' _Rotate' _Translate' _Scale' _RotateTranslate' _RotateScale' _TranslateScale' _Click  	gestureName = gestureWriter (elm.gesturesAllowed' elm.linksTo);  	if (gestureName == "_Click" || gestureName == "_None") {  		isManipulationEnabled = false;  	}  	writer.Write ("<StackPanel Name=\"" + elementName + videoNum + "Container" + gestureName + "\" Background=\"Black\" Width=\"" + elm.width + "\" Height=\"" + (elm.height + 30) + "\" IsManipulationEnabled=\"" + isManipulationEnabled + "\">");  	writer.Write ("<MediaElement Name=\"");  	writer.Write (elementName + videoNum + gestureName);  	videoNum++;  	writer.Write ("\" ");  	writer.Write ("Source=\"pack://siteoforigin:'''/tmp/video/");  	writer.Write (sourceName);  	writer.Write ("\" ");  	writer.Write ("Width=\"" + elm.width + "\" Height=\"" + elm.height + "\"");  	writer.Write ("LoadedBehavior=\"Manual\" UnloadedBehavior=\"Stop\" ScrubbingEnabled=\"True\" />");  	writer.Write ("<StackPanel Orientation=\"Horizontal\" Background=\"Gray\">");  	writer.Write ("<Image Source=\"icons\\play.png\" Width=\"30\" Height=\"30\" HorizontalAlignment=\"Left\" />");  	writer.Write ("<Image Source=\"icons\\pause.png\" Width=\"30\" Height=\"30\" HorizontalAlignment=\"Left\" Visibility=\"Collapsed\" />");  	writer.Write ("<Image Source=\"icons\\stop.png\" Width=\"30\" Height=\"30\" HorizontalAlignment=\"Left\" />");  	writer.Write ("</StackPanel>");  	writer.Write ("<StackPanel.RenderTransform>");  	writer.Write ("<MatrixTransform>");  	writer.Write ("<MatrixTransform.Matrix>");  	writer.Write ("<Matrix OffsetX=\"" + elm.coords.X + "\" OffsetY=\"" + elm.coords.Y + "\" M11=\"1\" M22=\"1\" />");  	writer.Write ("</MatrixTransform.Matrix>");  	writer.Write ("</MatrixTransform>");  	writer.Write ("</StackPanel.RenderTransform>");  	writer.Write ("</StackPanel>\n");  	//copy video to presentation directory  	if (!System.IO.Directory.Exists (videoTargetPath)) {  		System.IO.Directory.CreateDirectory (videoTargetPath);  	}  	targetFile = System.IO.Path.Combine (videoTargetPath' sourceName).ToString ();  	if (File.Exists (elm.fileName)) {  		System.IO.File.Copy (elm.fileName' targetFile' true);  	}  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Export,The following statement contains a magic number: if (elm.media == (int)TYPE.VIDEO) {  	Console.WriteLine (elm.coords.ToString ());  	//get source name  	sourceName = System.IO.Path.GetFileName (elm.fileName).ToString ();  	if (videoNum < 10) {  		elementName = "Video00";  	}  	else if (videoNum < 100) {  		elementName = "Video0";  	}  	else {  		elementName = "Video";  	}  	//set gestures  	//see what gestures are assigned to the object and set the name  	//if there are no gestures assigned' set the name to None' and  	//      isManipulationEnabled to false  	//if the gesture is _Click' set the isManipulationEnabled variable  	//      to false  	//_All' _Rotate' _Translate' _Scale' _RotateTranslate' _RotateScale' _TranslateScale' _Click  	gestureName = gestureWriter (elm.gesturesAllowed' elm.linksTo);  	if (gestureName == "_Click" || gestureName == "_None") {  		isManipulationEnabled = false;  	}  	writer.Write ("<StackPanel Name=\"" + elementName + videoNum + "Container" + gestureName + "\" Background=\"Black\" Width=\"" + elm.width + "\" Height=\"" + (elm.height + 30) + "\" IsManipulationEnabled=\"" + isManipulationEnabled + "\">");  	writer.Write ("<MediaElement Name=\"");  	writer.Write (elementName + videoNum + gestureName);  	videoNum++;  	writer.Write ("\" ");  	writer.Write ("Source=\"pack://siteoforigin:'''/tmp/video/");  	writer.Write (sourceName);  	writer.Write ("\" ");  	writer.Write ("Width=\"" + elm.width + "\" Height=\"" + elm.height + "\"");  	writer.Write ("LoadedBehavior=\"Manual\" UnloadedBehavior=\"Stop\" ScrubbingEnabled=\"True\" />");  	writer.Write ("<StackPanel Orientation=\"Horizontal\" Background=\"Gray\">");  	writer.Write ("<Image Source=\"icons\\play.png\" Width=\"30\" Height=\"30\" HorizontalAlignment=\"Left\" />");  	writer.Write ("<Image Source=\"icons\\pause.png\" Width=\"30\" Height=\"30\" HorizontalAlignment=\"Left\" Visibility=\"Collapsed\" />");  	writer.Write ("<Image Source=\"icons\\stop.png\" Width=\"30\" Height=\"30\" HorizontalAlignment=\"Left\" />");  	writer.Write ("</StackPanel>");  	writer.Write ("<StackPanel.RenderTransform>");  	writer.Write ("<MatrixTransform>");  	writer.Write ("<MatrixTransform.Matrix>");  	writer.Write ("<Matrix OffsetX=\"" + elm.coords.X + "\" OffsetY=\"" + elm.coords.Y + "\" M11=\"1\" M22=\"1\" />");  	writer.Write ("</MatrixTransform.Matrix>");  	writer.Write ("</MatrixTransform>");  	writer.Write ("</StackPanel.RenderTransform>");  	writer.Write ("</StackPanel>\n");  	//copy video to presentation directory  	if (!System.IO.Directory.Exists (videoTargetPath)) {  		System.IO.Directory.CreateDirectory (videoTargetPath);  	}  	targetFile = System.IO.Path.Combine (videoTargetPath' sourceName).ToString ();  	if (File.Exists (elm.fileName)) {  		System.IO.File.Copy (elm.fileName' targetFile' true);  	}  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Export,The following statement contains a magic number: if (videoNum < 10) {  	elementName = "Video00";  }  else if (videoNum < 100) {  	elementName = "Video0";  }  else {  	elementName = "Video";  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Export,The following statement contains a magic number: if (videoNum < 10) {  	elementName = "Video00";  }  else if (videoNum < 100) {  	elementName = "Video0";  }  else {  	elementName = "Video";  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Export,The following statement contains a magic number: if (videoNum < 100) {  	elementName = "Video0";  }  else {  	elementName = "Video";  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Export,The following statement contains a magic number: writer.Write ("<StackPanel Name=\"" + elementName + videoNum + "Container" + gestureName + "\" Background=\"Black\" Width=\"" + elm.width + "\" Height=\"" + (elm.height + 30) + "\" IsManipulationEnabled=\"" + isManipulationEnabled + "\">");  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Export,The following statement contains a magic number: if (elm.media == (int)TYPE.TEXT) {  	if (textNum < 10) {  		elementName = "Text00";  	}  	else if (textNum < 100) {  		elementName = "Text0";  	}  	else {  		elementName = "Text";  	}  	//set gestures  	//TODO: see what gestures are assigned to the object and set the name  	//TODO: if there are no gestures assigned' set the name to None' and  	//      isManipulationEnabled to false  	gestureName = gestureWriter (elm.gesturesAllowed' elm.linksTo);  	if (gestureName == "_Click" || gestureName == "_None") {  		isManipulationEnabled = false;  	}  	writer.Write ("<TextBlock Name=\"");  	writer.Write (elementName + textNum + gestureName);  	writer.Write ("\" ");  	writer.Write ("IsManipulationEnabled=\"" + isManipulationEnabled + "\" TextWrapping=\"Wrap\" Margin=\"0'0'0'20\"");  	writer.Write (" Width=\"" + elm.width + "\" Height=\"" + elm.height + "\"" + " FontFamily=\"" + elm.ff.ToString () + "\"" + " FontSize=\"" + elm.fontSize + "\"" + " Foreground=\"" + (Color)elm.fontColor.Color + "\">");  	writer.Write (elm.fileName);  	textNum++;  	//matrix manipulation stuff  	writer.Write ("<TextBlock.RenderTransform>");  	writer.Write ("<MatrixTransform>");  	writer.Write ("<MatrixTransform.Matrix>");  	writer.Write ("<Matrix OffsetX =\"" + elm.coords.X + "\" OffsetY=\"" + elm.coords.Y + "\" M11=\"1\" M22=\"1\" />");  	writer.Write ("</MatrixTransform.Matrix>");  	writer.Write ("</MatrixTransform>");  	writer.Write ("</TextBlock.RenderTransform>");  	writer.Write ("</TextBlock>");  	if (gestureName == "_Click") {  		writer.Write ("<TextBox Name=\"" + elementName + textNum + gestureName + "_Scene" + "\" Text=\"" + elm.linksTo + "\" Visibility=\"Hidden\" />");  	}  	writer.Write ("\n");  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Export,The following statement contains a magic number: if (elm.media == (int)TYPE.TEXT) {  	if (textNum < 10) {  		elementName = "Text00";  	}  	else if (textNum < 100) {  		elementName = "Text0";  	}  	else {  		elementName = "Text";  	}  	//set gestures  	//TODO: see what gestures are assigned to the object and set the name  	//TODO: if there are no gestures assigned' set the name to None' and  	//      isManipulationEnabled to false  	gestureName = gestureWriter (elm.gesturesAllowed' elm.linksTo);  	if (gestureName == "_Click" || gestureName == "_None") {  		isManipulationEnabled = false;  	}  	writer.Write ("<TextBlock Name=\"");  	writer.Write (elementName + textNum + gestureName);  	writer.Write ("\" ");  	writer.Write ("IsManipulationEnabled=\"" + isManipulationEnabled + "\" TextWrapping=\"Wrap\" Margin=\"0'0'0'20\"");  	writer.Write (" Width=\"" + elm.width + "\" Height=\"" + elm.height + "\"" + " FontFamily=\"" + elm.ff.ToString () + "\"" + " FontSize=\"" + elm.fontSize + "\"" + " Foreground=\"" + (Color)elm.fontColor.Color + "\">");  	writer.Write (elm.fileName);  	textNum++;  	//matrix manipulation stuff  	writer.Write ("<TextBlock.RenderTransform>");  	writer.Write ("<MatrixTransform>");  	writer.Write ("<MatrixTransform.Matrix>");  	writer.Write ("<Matrix OffsetX =\"" + elm.coords.X + "\" OffsetY=\"" + elm.coords.Y + "\" M11=\"1\" M22=\"1\" />");  	writer.Write ("</MatrixTransform.Matrix>");  	writer.Write ("</MatrixTransform>");  	writer.Write ("</TextBlock.RenderTransform>");  	writer.Write ("</TextBlock>");  	if (gestureName == "_Click") {  		writer.Write ("<TextBox Name=\"" + elementName + textNum + gestureName + "_Scene" + "\" Text=\"" + elm.linksTo + "\" Visibility=\"Hidden\" />");  	}  	writer.Write ("\n");  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Export,The following statement contains a magic number: if (textNum < 10) {  	elementName = "Text00";  }  else if (textNum < 100) {  	elementName = "Text0";  }  else {  	elementName = "Text";  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Export,The following statement contains a magic number: if (textNum < 10) {  	elementName = "Text00";  }  else if (textNum < 100) {  	elementName = "Text0";  }  else {  	elementName = "Text";  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Export,The following statement contains a magic number: if (textNum < 100) {  	elementName = "Text0";  }  else {  	elementName = "Text";  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,gestureWriter,The following statement contains a magic number: if (gestures [0] == true && gestures [1] == false && gestures [2] == false) {  	return "_Translate";  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,gestureWriter,The following statement contains a magic number: if (gestures [0] == true && gestures [1] == true && gestures [2] == false) {  	return "_TranslateRotate";  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,gestureWriter,The following statement contains a magic number: if (gestures [0] == true && gestures [1] == false && gestures [2] == true) {  	return "_TranslateScale";  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,gestureWriter,The following statement contains a magic number: if (gestures [0] == false && gestures [1] == true && gestures [2] == false) {  	return "_Rotate";  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,gestureWriter,The following statement contains a magic number: if (gestures [0] == false && gestures [1] == true && gestures [2] == true) {  	return "_RotateScale";  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,gestureWriter,The following statement contains a magic number: if (gestures [0] == false && gestures [1] == false && gestures [2] == true) {  	return "_Scale";  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,gestureWriter,The following statement contains a magic number: if (gestures [0] == true && gestures [1] == true && gestures [2] == true) {  	return "_All";  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,gestureWriter,The following statement contains a magic number: if (gestures [0] == false && gestures [1] == false && gestures [2] == false) {  	return "_None";  }  else  	return "ERROR";  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Properties_Click,The following statement contains a magic number: if (curType == (int)TYPE.TEXT) {  	loc = findElement ((int)TYPE.TEXT);  	updateText uTxt = new updateText (this);  	uTxt.WidthT.Text = myScene [loc].width.ToString ();  	uTxt.HeightT.Text = myScene [loc].height.ToString ();  	uTxt.textBox1.Text = myScene [loc].fileName.ToString ();  	if (myScene [loc].linksTo != null) {  		uTxt.textBox2.Text = myScene [loc].linksTo.ToString ();  	}  	if (myScene [loc].gesturesAllowed [0]) {  		uTxt.checkBox1.IsChecked = true;  	}  	if (myScene [loc].gesturesAllowed [1]) {  		uTxt.checkBox2.IsChecked = true;  	}  	if (myScene [loc].gesturesAllowed [2]) {  		uTxt.checkBox3.IsChecked = true;  	}  	uTxt.ShowDialog ();  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Properties_Click,The following statement contains a magic number: if (myScene [loc].gesturesAllowed [2]) {  	uTxt.checkBox3.IsChecked = true;  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Properties_Click,The following statement contains a magic number: if (curType == (int)TYPE.IMAGE) {  	loc = findElement ((int)TYPE.IMAGE);  	updateImage uImg = new updateImage (this);  	uImg.WidthT.Text = myScene [loc].width.ToString ();  	uImg.HeightT.Text = myScene [loc].height.ToString ();  	if (myScene [loc].linksTo != null) {  		uImg.textBox1.Text = myScene [loc].linksTo.ToString ();  	}  	if (myScene [loc].gesturesAllowed [0]) {  		uImg.checkBox1.IsChecked = true;  	}  	if (myScene [loc].gesturesAllowed [1]) {  		uImg.checkBox2.IsChecked = true;  	}  	if (myScene [loc].gesturesAllowed [2]) {  		uImg.checkBox3.IsChecked = true;  	}  	uImg.ShowDialog ();  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Properties_Click,The following statement contains a magic number: if (myScene [loc].gesturesAllowed [2]) {  	uImg.checkBox3.IsChecked = true;  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Properties_Click,The following statement contains a magic number: if (curType == (int)TYPE.VIDEO) {  	loc = findElement ((int)TYPE.VIDEO);  	updateImage uImg = new updateImage (this);  	uImg.WidthT.Text = myScene [loc].width.ToString ();  	uImg.HeightT.Text = myScene [loc].height.ToString ();  	if (myScene [loc].linksTo != null) {  		uImg.textBox1.Text = myScene [loc].linksTo.ToString ();  	}  	if (myScene [loc].gesturesAllowed [0]) {  		uImg.checkBox1.IsChecked = true;  	}  	if (myScene [loc].gesturesAllowed [1]) {  		uImg.checkBox2.IsChecked = true;  	}  	if (myScene [loc].gesturesAllowed [2]) {  		uImg.checkBox3.IsChecked = true;  	}  	uImg.ShowDialog ();  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,Properties_Click,The following statement contains a magic number: if (myScene [loc].gesturesAllowed [2]) {  	uImg.checkBox3.IsChecked = true;  }  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,UpdateScene,The following statement contains a magic number: myScene [loc].gesturesAllowed [2] = allowedGestures [2];  
Magic Number,MT_Creator_WPF,Window1,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Window1.xaml.cs,UpdateScene,The following statement contains a magic number: myScene [loc].gesturesAllowed [2] = allowedGestures [2];  
Magic Number,MT_Creator_WPF,addImage,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\addImage.xaml.cs,Load_Click,The following statement contains a magic number: gesturesAllowed [2] = (bool)checkBox3.IsChecked;  
Magic Number,MT_Creator_WPF,addSound,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\addSound.xaml.cs,Load_Click,The following statement contains a magic number: w_Cur.RefreshScene (SoundFile.Text' 3' 0' 0' gesturesAllowed' null);  
Magic Number,MT_Creator_WPF,addText,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\addText.xaml.cs,Load_Click,The following statement contains a magic number: gesturesAllowed [2] = (bool)checkBox3.IsChecked;  
Magic Number,MT_Creator_WPF,addVid,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\addVid.xaml.cs,Load_Click,The following statement contains a magic number: gesturesAllowed [2] = (bool)checkBox3.IsChecked;  
Magic Number,MT_Creator_WPF,addVid,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\addVid.xaml.cs,Load_Click,The following statement contains a magic number: w_Cur.RefreshScene (VidFile.Text' 2' -1' -1' gesturesAllowed' null);  
Magic Number,MT_Creator_WPF,Adorners,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Adorners.cs,MakeAdorner,The following statement contains a magic number: tmb.Height = tmb.Width = 15;  
Magic Number,MT_Creator_WPF,Adorners,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Adorners.cs,MakeAdorner,The following statement contains a magic number: tmb.Opacity = .8;  
Magic Number,MT_Creator_WPF,Adorners,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Adorners.cs,ArrangeOverride,The following statement contains a magic number: tl.Arrange (new Rect (-adornerWidth / 2' -adornerHeight / 2' adornerWidth' adornerHeight));  
Magic Number,MT_Creator_WPF,Adorners,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Adorners.cs,ArrangeOverride,The following statement contains a magic number: tl.Arrange (new Rect (-adornerWidth / 2' -adornerHeight / 2' adornerWidth' adornerHeight));  
Magic Number,MT_Creator_WPF,Adorners,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Adorners.cs,ArrangeOverride,The following statement contains a magic number: tr.Arrange (new Rect (desiredWidth - adornerWidth / 2' -adornerHeight / 2' adornerWidth' adornerHeight));  
Magic Number,MT_Creator_WPF,Adorners,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Adorners.cs,ArrangeOverride,The following statement contains a magic number: tr.Arrange (new Rect (desiredWidth - adornerWidth / 2' -adornerHeight / 2' adornerWidth' adornerHeight));  
Magic Number,MT_Creator_WPF,Adorners,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Adorners.cs,ArrangeOverride,The following statement contains a magic number: bl.Arrange (new Rect (-adornerWidth / 2' desiredHeight - adornerHeight / 2' adornerWidth' adornerHeight));  
Magic Number,MT_Creator_WPF,Adorners,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Adorners.cs,ArrangeOverride,The following statement contains a magic number: bl.Arrange (new Rect (-adornerWidth / 2' desiredHeight - adornerHeight / 2' adornerWidth' adornerHeight));  
Magic Number,MT_Creator_WPF,Adorners,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Adorners.cs,ArrangeOverride,The following statement contains a magic number: br.Arrange (new Rect (desiredWidth - adornerWidth / 2' desiredHeight - adornerHeight / 2' adornerWidth' adornerHeight));  
Magic Number,MT_Creator_WPF,Adorners,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\Adorners.cs,ArrangeOverride,The following statement contains a magic number: br.Arrange (new Rect (desiredWidth - adornerWidth / 2' desiredHeight - adornerHeight / 2' adornerWidth' adornerHeight));  
Magic Number,MT_Creator_WPF,fontChooser,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\fontChooser.xaml.cs,fontChooser,The following statement contains a magic number: t_Cur.textBox1.FontSize = 12;  
Magic Number,MT_Creator_WPF,fontChooser,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\fontChooser.xaml.cs,slider1_ValueChanged,The following statement contains a magic number: textBlock1.FontSize = (int)((slider1.Value + 1) * 10);  
Magic Number,MT_Creator_WPF,updateImage,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\updateImage.xaml.cs,Update_Click,The following statement contains a magic number: gesturesAllowed [2] = (bool)checkBox3.IsChecked;  
Magic Number,MT_Creator_WPF,updateText,C:\repos\jaelle_blob\creator\MT_Creator_WPF\Backup\MT_Creator_WPF\updateText.xaml.cs,Load_Click,The following statement contains a magic number: gesturesAllowed [2] = (bool)checkBox3.IsChecked;  
