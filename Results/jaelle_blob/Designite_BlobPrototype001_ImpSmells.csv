Implementation smell,Namespace,Class,File,Method,Description
Long Method,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,LoadXAML,The method has 108 lines of code.
Long Method,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,setupObjects,The method has 122 lines of code.
Long Method,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,PlaybackSession,The method has 123 lines of code.
Complex Method,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,LoadXAML,Cyclomatic complexity of the method is 21
Complex Method,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,setupObjects,Cyclomatic complexity of the method is 20
Complex Method,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,initManipulationDelta,Cyclomatic complexity of the method is 10
Complex Method,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,PlaybackSession,Cyclomatic complexity of the method is 42
Long Statement,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,setupObjects,The length of the statement  "	scene.ManipulationInertiaStarting += new EventHandler<ManipulationInertiaStartingEventArgs> (scene_ManipulationInertiaStarting); " is 128.
Long Statement,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,setupObjects,The length of the statement  "			currControl.ManipulationStarting += new EventHandler<ManipulationStartingEventArgs> (initManipulationRotationTranslation); " is 122.
Long Statement,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,initTouchUp,The length of the statement  "	TextBox sceneToLoadContainer = LogicalTreeHelper.FindLogicalNode ((DependencyObject)scene' (itemTouched.Name + "_Scene")) as TextBox; " is 133.
Magic Number,BlobPrototype001,App,C:\repos\jaelle_blob\viewer\BlobPrototype001\App.xaml.cs,OnStartup,The following statement contains a magic number: if (applicationPath.Substring (0' 6) == "file:\\") {  	applicationPath = applicationPath.Remove (0' 6);  }  
Magic Number,BlobPrototype001,App,C:\repos\jaelle_blob\viewer\BlobPrototype001\App.xaml.cs,OnStartup,The following statement contains a magic number: if (applicationPath.Substring (0' 6) == "file:\\") {  	applicationPath = applicationPath.Remove (0' 6);  }  
Magic Number,BlobPrototype001,App,C:\repos\jaelle_blob\viewer\BlobPrototype001\App.xaml.cs,OnStartup,The following statement contains a magic number: applicationPath = applicationPath.Remove (0' 6);  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (applicationPath.Substring (0' 6) == "file:\\") {  	applicationPath = applicationPath.Remove (0' 6);  }  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: if (applicationPath.Substring (0' 6) == "file:\\") {  	applicationPath = applicationPath.Remove (0' 6);  }  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: applicationPath = applicationPath.Remove (0' 6);  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: rotateIcon.Width = 50;  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: rotateIcon.Height = 50;  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: zoomIcon.Width = 50;  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: zoomIcon.Height = 50;  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: panIcon.Width = 50;  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: panIcon.Height = 50;  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: soundIcon.Width = 50;  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,MainWindow,The following statement contains a magic number: soundIcon.Height = 50;  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,setupObjects,The following statement contains a magic number: foreach (Object obj in LogicalTreeHelper.GetChildren (scene)) {  	String objectType = obj.GetType ().ToString ();  	DependencyObject depObj = obj as DependencyObject;  	UIElement currControl = new UIElement ();  	String objectName = "";  	if (objectType == "System.Windows.Controls.Image") {  		Image currImage = obj as Image;  		objectName = currImage.Name;  		currControl = currImage;  	}  	else if (objectType == "System.Windows.Shapes.Ellipse" || objectType == "System.Windows.Shapes.Rectangle") {  		Shape currShape = obj as Shape;  		objectName = currShape.Name;  		currControl = currShape;  	}  	else if (objectType == "System.Windows.Controls.StackPanel") {  		StackPanel panel = obj as StackPanel;  		MediaElement currVideo = panel.Children [0] as MediaElement;  		if (panel.Children.Count > 1) {  			StackPanel buttons = panel.Children [1] as StackPanel;  			Image playButton = buttons.Children [0] as Image;  			Image pauseButton = buttons.Children [1] as Image;  			Image stopButton = buttons.Children [2] as Image;  			playButton.MouseUp += startMedia;  			pauseButton.MouseUp += pauseMedia;  			stopButton.MouseUp += stopMedia;  			objectName = currVideo.Name;  			currControl = currVideo;  		}  		//MediaElement currVideo = panel.Children[0] as MediaElement;  		objectName = panel.Name;  		currControl = panel;  	}  	else if (objectType == "System.Windows.Controls.TextBlock") {  		TextBlock currText = obj as TextBlock;  		objectName = currText.Name;  		currControl = currText;  	}  	else if (objectType == "System.Windows.Controls.MediaElement") {  		DependencyObject parent = LogicalTreeHelper.GetParent ((DependencyObject)obj);  		if (parent.ToString () == "System.Windows.Controls.Canvas") {  			soundFile = obj as MediaElement;  			if (!soundIconAdded) {  				iconMenu.Items.Add (soundIconMenuItem);  				soundIconMenuItem.Click += new RoutedEventHandler (soundIconMenuItem_Click);  				soundIconAdded = true;  			}  		}  	}  	//attach neccessary event  handlers  	if (!objectName.Contains ("None") || !objectName.Contains ("Click")) {  		currControl.ManipulationDelta += new EventHandler<ManipulationDeltaEventArgs> (initManipulationDelta);  		currControl.ManipulationCompleted += new EventHandler<ManipulationCompletedEventArgs> (initManipulationCompleted);  	}  	if (objectName.Contains ("All")) {  		currControl.ManipulationStarting += new EventHandler<ManipulationStartingEventArgs> (initManipulationAll);  		currControl.TouchDown += new EventHandler<TouchEventArgs> (addRotateIcon);  		currControl.TouchUp += new EventHandler<TouchEventArgs> (removeRotateIcon);  		currControl.TouchDown += new EventHandler<TouchEventArgs> (addZoomIcon);  		currControl.TouchUp += new EventHandler<TouchEventArgs> (removeZoomIcon);  		currControl.TouchDown += new EventHandler<TouchEventArgs> (addPanIcon);  		currControl.TouchUp += new EventHandler<TouchEventArgs> (removePanIcon);  		currControl.TouchDown += new EventHandler<TouchEventArgs> (bringToFront);  	}  	if (objectName.Contains ("Rotate")) {  		currControl.ManipulationStarting += new EventHandler<ManipulationStartingEventArgs> (initManipulationRotation);  		currControl.TouchDown += new EventHandler<TouchEventArgs> (addRotateIcon);  		currControl.TouchUp += new EventHandler<TouchEventArgs> (removeRotateIcon);  		currControl.TouchDown += new EventHandler<TouchEventArgs> (bringToFront);  	}  	if (objectName.Contains ("Translate")) {  		currControl.ManipulationStarting += new EventHandler<ManipulationStartingEventArgs> (initManipulationTranslation);  		currControl.TouchDown += new EventHandler<TouchEventArgs> (addPanIcon);  		currControl.TouchUp += new EventHandler<TouchEventArgs> (removePanIcon);  		currControl.TouchDown += new EventHandler<TouchEventArgs> (bringToFront);  	}  	if (objectName.Contains ("Scale")) {  		currControl.ManipulationStarting += new EventHandler<ManipulationStartingEventArgs> (initManipulationScale);  		currControl.TouchDown += new EventHandler<TouchEventArgs> (addZoomIcon);  		currControl.TouchUp += new EventHandler<TouchEventArgs> (removeZoomIcon);  		currControl.TouchDown += new EventHandler<TouchEventArgs> (bringToFront);  	}  	if (objectName.Contains ("RotateTranslate")) {  		currControl.ManipulationStarting += new EventHandler<ManipulationStartingEventArgs> (initManipulationRotationTranslation);  		currControl.TouchDown += new EventHandler<TouchEventArgs> (addRotateIcon);  		currControl.TouchUp += new EventHandler<TouchEventArgs> (removeRotateIcon);  		currControl.TouchDown += new EventHandler<TouchEventArgs> (addPanIcon);  		currControl.TouchUp += new EventHandler<TouchEventArgs> (removePanIcon);  		currControl.TouchDown += new EventHandler<TouchEventArgs> (bringToFront);  	}  	if (objectName.Contains ("RotateScale")) {  		currControl.ManipulationStarting += new EventHandler<ManipulationStartingEventArgs> (initManipulationRotationScale);  		currControl.TouchDown += new EventHandler<TouchEventArgs> (addZoomIcon);  		currControl.TouchUp += new EventHandler<TouchEventArgs> (removeZoomIcon);  		currControl.TouchDown += new EventHandler<TouchEventArgs> (addRotateIcon);  		currControl.TouchUp += new EventHandler<TouchEventArgs> (removeRotateIcon);  		currControl.TouchDown += new EventHandler<TouchEventArgs> (bringToFront);  	}  	if (objectName.Contains ("TranslateScale")) {  		currControl.ManipulationStarting += new EventHandler<ManipulationStartingEventArgs> (initManipulationTranslationScale);  		currControl.TouchDown += new EventHandler<TouchEventArgs> (addZoomIcon);  		currControl.TouchUp += new EventHandler<TouchEventArgs> (removeZoomIcon);  		currControl.TouchDown += new EventHandler<TouchEventArgs> (addPanIcon);  		currControl.TouchUp += new EventHandler<TouchEventArgs> (removePanIcon);  		currControl.TouchDown += new EventHandler<TouchEventArgs> (bringToFront);  	}  	if (objectName.Contains ("Click")) {  		currControl.TouchUp += new EventHandler<TouchEventArgs> (initTouchUp);  	}  }  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,setupObjects,The following statement contains a magic number: if (objectType == "System.Windows.Controls.Image") {  	Image currImage = obj as Image;  	objectName = currImage.Name;  	currControl = currImage;  }  else if (objectType == "System.Windows.Shapes.Ellipse" || objectType == "System.Windows.Shapes.Rectangle") {  	Shape currShape = obj as Shape;  	objectName = currShape.Name;  	currControl = currShape;  }  else if (objectType == "System.Windows.Controls.StackPanel") {  	StackPanel panel = obj as StackPanel;  	MediaElement currVideo = panel.Children [0] as MediaElement;  	if (panel.Children.Count > 1) {  		StackPanel buttons = panel.Children [1] as StackPanel;  		Image playButton = buttons.Children [0] as Image;  		Image pauseButton = buttons.Children [1] as Image;  		Image stopButton = buttons.Children [2] as Image;  		playButton.MouseUp += startMedia;  		pauseButton.MouseUp += pauseMedia;  		stopButton.MouseUp += stopMedia;  		objectName = currVideo.Name;  		currControl = currVideo;  	}  	//MediaElement currVideo = panel.Children[0] as MediaElement;  	objectName = panel.Name;  	currControl = panel;  }  else if (objectType == "System.Windows.Controls.TextBlock") {  	TextBlock currText = obj as TextBlock;  	objectName = currText.Name;  	currControl = currText;  }  else if (objectType == "System.Windows.Controls.MediaElement") {  	DependencyObject parent = LogicalTreeHelper.GetParent ((DependencyObject)obj);  	if (parent.ToString () == "System.Windows.Controls.Canvas") {  		soundFile = obj as MediaElement;  		if (!soundIconAdded) {  			iconMenu.Items.Add (soundIconMenuItem);  			soundIconMenuItem.Click += new RoutedEventHandler (soundIconMenuItem_Click);  			soundIconAdded = true;  		}  	}  }  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,setupObjects,The following statement contains a magic number: if (objectType == "System.Windows.Shapes.Ellipse" || objectType == "System.Windows.Shapes.Rectangle") {  	Shape currShape = obj as Shape;  	objectName = currShape.Name;  	currControl = currShape;  }  else if (objectType == "System.Windows.Controls.StackPanel") {  	StackPanel panel = obj as StackPanel;  	MediaElement currVideo = panel.Children [0] as MediaElement;  	if (panel.Children.Count > 1) {  		StackPanel buttons = panel.Children [1] as StackPanel;  		Image playButton = buttons.Children [0] as Image;  		Image pauseButton = buttons.Children [1] as Image;  		Image stopButton = buttons.Children [2] as Image;  		playButton.MouseUp += startMedia;  		pauseButton.MouseUp += pauseMedia;  		stopButton.MouseUp += stopMedia;  		objectName = currVideo.Name;  		currControl = currVideo;  	}  	//MediaElement currVideo = panel.Children[0] as MediaElement;  	objectName = panel.Name;  	currControl = panel;  }  else if (objectType == "System.Windows.Controls.TextBlock") {  	TextBlock currText = obj as TextBlock;  	objectName = currText.Name;  	currControl = currText;  }  else if (objectType == "System.Windows.Controls.MediaElement") {  	DependencyObject parent = LogicalTreeHelper.GetParent ((DependencyObject)obj);  	if (parent.ToString () == "System.Windows.Controls.Canvas") {  		soundFile = obj as MediaElement;  		if (!soundIconAdded) {  			iconMenu.Items.Add (soundIconMenuItem);  			soundIconMenuItem.Click += new RoutedEventHandler (soundIconMenuItem_Click);  			soundIconAdded = true;  		}  	}  }  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,setupObjects,The following statement contains a magic number: if (objectType == "System.Windows.Controls.StackPanel") {  	StackPanel panel = obj as StackPanel;  	MediaElement currVideo = panel.Children [0] as MediaElement;  	if (panel.Children.Count > 1) {  		StackPanel buttons = panel.Children [1] as StackPanel;  		Image playButton = buttons.Children [0] as Image;  		Image pauseButton = buttons.Children [1] as Image;  		Image stopButton = buttons.Children [2] as Image;  		playButton.MouseUp += startMedia;  		pauseButton.MouseUp += pauseMedia;  		stopButton.MouseUp += stopMedia;  		objectName = currVideo.Name;  		currControl = currVideo;  	}  	//MediaElement currVideo = panel.Children[0] as MediaElement;  	objectName = panel.Name;  	currControl = panel;  }  else if (objectType == "System.Windows.Controls.TextBlock") {  	TextBlock currText = obj as TextBlock;  	objectName = currText.Name;  	currControl = currText;  }  else if (objectType == "System.Windows.Controls.MediaElement") {  	DependencyObject parent = LogicalTreeHelper.GetParent ((DependencyObject)obj);  	if (parent.ToString () == "System.Windows.Controls.Canvas") {  		soundFile = obj as MediaElement;  		if (!soundIconAdded) {  			iconMenu.Items.Add (soundIconMenuItem);  			soundIconMenuItem.Click += new RoutedEventHandler (soundIconMenuItem_Click);  			soundIconAdded = true;  		}  	}  }  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,setupObjects,The following statement contains a magic number: if (panel.Children.Count > 1) {  	StackPanel buttons = panel.Children [1] as StackPanel;  	Image playButton = buttons.Children [0] as Image;  	Image pauseButton = buttons.Children [1] as Image;  	Image stopButton = buttons.Children [2] as Image;  	playButton.MouseUp += startMedia;  	pauseButton.MouseUp += pauseMedia;  	stopButton.MouseUp += stopMedia;  	objectName = currVideo.Name;  	currControl = currVideo;  }  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,soundIconMenuItem_Click,The following statement contains a magic number: if (!soundPlaying) {  	soundFile.Play ();  	Image soundIcon = new Image ();  	BitmapImage soundIconSource = new BitmapImage ();  	soundIconSource.BeginInit ();  	soundIconSource.UriSource = new Uri ("icons/stop.png"' UriKind.Relative);  	soundIconSource.EndInit ();  	soundIcon.Source = soundIconSource;  	soundIcon.Width = 50;  	soundIcon.Height = 50;  	soundIconMenuItem.Icon = soundIcon;  	soundPlaying = true;  }  else {  	soundFile.Stop ();  	Image soundIcon = new Image ();  	BitmapImage soundIconSource = new BitmapImage ();  	soundIconSource.BeginInit ();  	soundIconSource.UriSource = new Uri ("icons/play.png"' UriKind.Relative);  	soundIconSource.EndInit ();  	soundIcon.Source = soundIconSource;  	soundIcon.Width = 50;  	soundIcon.Height = 50;  	soundIconMenuItem.Icon = soundIcon;  	soundPlaying = false;  }  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,soundIconMenuItem_Click,The following statement contains a magic number: if (!soundPlaying) {  	soundFile.Play ();  	Image soundIcon = new Image ();  	BitmapImage soundIconSource = new BitmapImage ();  	soundIconSource.BeginInit ();  	soundIconSource.UriSource = new Uri ("icons/stop.png"' UriKind.Relative);  	soundIconSource.EndInit ();  	soundIcon.Source = soundIconSource;  	soundIcon.Width = 50;  	soundIcon.Height = 50;  	soundIconMenuItem.Icon = soundIcon;  	soundPlaying = true;  }  else {  	soundFile.Stop ();  	Image soundIcon = new Image ();  	BitmapImage soundIconSource = new BitmapImage ();  	soundIconSource.BeginInit ();  	soundIconSource.UriSource = new Uri ("icons/play.png"' UriKind.Relative);  	soundIconSource.EndInit ();  	soundIcon.Source = soundIconSource;  	soundIcon.Width = 50;  	soundIcon.Height = 50;  	soundIconMenuItem.Icon = soundIcon;  	soundPlaying = false;  }  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,soundIconMenuItem_Click,The following statement contains a magic number: if (!soundPlaying) {  	soundFile.Play ();  	Image soundIcon = new Image ();  	BitmapImage soundIconSource = new BitmapImage ();  	soundIconSource.BeginInit ();  	soundIconSource.UriSource = new Uri ("icons/stop.png"' UriKind.Relative);  	soundIconSource.EndInit ();  	soundIcon.Source = soundIconSource;  	soundIcon.Width = 50;  	soundIcon.Height = 50;  	soundIconMenuItem.Icon = soundIcon;  	soundPlaying = true;  }  else {  	soundFile.Stop ();  	Image soundIcon = new Image ();  	BitmapImage soundIconSource = new BitmapImage ();  	soundIconSource.BeginInit ();  	soundIconSource.UriSource = new Uri ("icons/play.png"' UriKind.Relative);  	soundIconSource.EndInit ();  	soundIcon.Source = soundIconSource;  	soundIcon.Width = 50;  	soundIcon.Height = 50;  	soundIconMenuItem.Icon = soundIcon;  	soundPlaying = false;  }  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,soundIconMenuItem_Click,The following statement contains a magic number: if (!soundPlaying) {  	soundFile.Play ();  	Image soundIcon = new Image ();  	BitmapImage soundIconSource = new BitmapImage ();  	soundIconSource.BeginInit ();  	soundIconSource.UriSource = new Uri ("icons/stop.png"' UriKind.Relative);  	soundIconSource.EndInit ();  	soundIcon.Source = soundIconSource;  	soundIcon.Width = 50;  	soundIcon.Height = 50;  	soundIconMenuItem.Icon = soundIcon;  	soundPlaying = true;  }  else {  	soundFile.Stop ();  	Image soundIcon = new Image ();  	BitmapImage soundIconSource = new BitmapImage ();  	soundIconSource.BeginInit ();  	soundIconSource.UriSource = new Uri ("icons/play.png"' UriKind.Relative);  	soundIconSource.EndInit ();  	soundIcon.Source = soundIconSource;  	soundIcon.Width = 50;  	soundIcon.Height = 50;  	soundIconMenuItem.Icon = soundIcon;  	soundPlaying = false;  }  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,soundIconMenuItem_Click,The following statement contains a magic number: soundIcon.Width = 50;  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,soundIconMenuItem_Click,The following statement contains a magic number: soundIcon.Height = 50;  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,soundIconMenuItem_Click,The following statement contains a magic number: soundIcon.Width = 50;  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,soundIconMenuItem_Click,The following statement contains a magic number: soundIcon.Height = 50;  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,IncreaseFriction,The following statement contains a magic number: DecelerationTranslation = DecelerationTranslation + DecelerationTranslation * 0.1;  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,IncreaseFriction,The following statement contains a magic number: DecelerationExpansion = DecelerationExpansion + DecelerationExpansion * 0.1;  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,IncreaseFriction,The following statement contains a magic number: DecelerationRotation = DecelerationRotation + DecelerationRotation * 0.1;  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,DecreaseFriction,The following statement contains a magic number: DecelerationTranslation = DecelerationTranslation - DecelerationTranslation * 0.1;  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,DecreaseFriction,The following statement contains a magic number: DecelerationExpansion = DecelerationExpansion - DecelerationExpansion * 0.1;  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,DecreaseFriction,The following statement contains a magic number: DecelerationRotation = DecelerationRotation - DecelerationRotation * 0.1;  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,scene_ManipulationInertiaStarting,The following statement contains a magic number: e.TranslationBehavior.DesiredDeceleration = DecelerationTranslation * 96 / (1000.0 * 1000.0);  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,scene_ManipulationInertiaStarting,The following statement contains a magic number: e.TranslationBehavior.DesiredDeceleration = DecelerationTranslation * 96 / (1000.0 * 1000.0);  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,scene_ManipulationInertiaStarting,The following statement contains a magic number: e.TranslationBehavior.DesiredDeceleration = DecelerationTranslation * 96 / (1000.0 * 1000.0);  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,scene_ManipulationInertiaStarting,The following statement contains a magic number: e.ExpansionBehavior.DesiredDeceleration = DecelerationExpansion * 96 / (1000.0 * 1000.0);  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,scene_ManipulationInertiaStarting,The following statement contains a magic number: e.ExpansionBehavior.DesiredDeceleration = DecelerationExpansion * 96 / (1000.0 * 1000.0);  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,scene_ManipulationInertiaStarting,The following statement contains a magic number: e.ExpansionBehavior.DesiredDeceleration = DecelerationExpansion * 96 / (1000.0 * 1000.0);  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,scene_ManipulationInertiaStarting,The following statement contains a magic number: e.RotationBehavior.DesiredDeceleration = DecelerationRotation * 360 / (1000.0 * 1000.0);  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,scene_ManipulationInertiaStarting,The following statement contains a magic number: e.RotationBehavior.DesiredDeceleration = DecelerationRotation * 360 / (1000.0 * 1000.0);  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,scene_ManipulationInertiaStarting,The following statement contains a magic number: e.RotationBehavior.DesiredDeceleration = DecelerationRotation * 360 / (1000.0 * 1000.0);  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,initManipulationDelta,The following statement contains a magic number: if (element != null) {  	ManipulationDelta deltaManipulation = e.DeltaManipulation;  	Matrix matrix = ((MatrixTransform)element.RenderTransform).Matrix;  	Point center = new Point (element.ActualWidth / 2' element.ActualHeight / 2);  	center = matrix.Transform (center);  	//Zoom  	if (!noScale) {  		if (deltaManipulation.Scale.X != 1 && deltaManipulation.Scale.Y != 1) {  			eventsNode.AppendChild (scaleNode);  			scaleNode.SetAttribute ("Element"' element.Name);  			scaleNode.SetAttribute ("X"' deltaManipulation.Scale.X.ToString ());  			scaleNode.SetAttribute ("Y"' deltaManipulation.Scale.Y.ToString ());  			scaleNode.SetAttribute ("CenterX"' center.X.ToString ());  			scaleNode.SetAttribute ("CenterY"' center.Y.ToString ());  		}  		matrix.ScaleAt (deltaManipulation.Scale.X' deltaManipulation.Scale.Y' center.X' center.Y);  	}  	// Rotate  	if (!noRotate) {  		if (deltaManipulation.Rotation != 0) {  			eventsNode.AppendChild (rotateNode);  			rotateNode.SetAttribute ("Element"' element.Name);  			rotateNode.SetAttribute ("Rotation"' deltaManipulation.Rotation.ToString ());  			rotateNode.SetAttribute ("CenterX"' center.X.ToString ());  			rotateNode.SetAttribute ("CenterY"' center.Y.ToString ());  		}  		matrix.RotateAt (deltaManipulation.Rotation' center.X' center.Y);  	}  	//Pan  	if (!noTranslate) {  		if (deltaManipulation.Translation.X != 0 && deltaManipulation.Translation.Y != 0) {  			eventsNode.AppendChild (translateNode);  			translateNode.SetAttribute ("Element"' element.Name);  			translateNode.SetAttribute ("X"' deltaManipulation.Translation.X.ToString ());  			translateNode.SetAttribute ("Y"' deltaManipulation.Translation.Y.ToString ());  		}  		matrix.Translate (deltaManipulation.Translation.X' deltaManipulation.Translation.Y);  	}  	xmlDoc.Save (recordingFilename);  	//((MatrixTransform)element.RenderTransform).Matrix = matrix;  	element.RenderTransform = new MatrixTransform (matrix);  	if (e.IsInertial) {  		Rect containingRect = new Rect (((FrameworkElement)e.ManipulationContainer).RenderSize);  		Rect shapeBounds = element.RenderTransform.TransformBounds (new Rect (element.RenderSize));  		if (!containingRect.Contains (shapeBounds)) {  			//let us know if we go outside the boundaries  			e.ReportBoundaryFeedback (e.DeltaManipulation);  			e.Complete ();  		}  	}  	e.Handled = true;  }  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,initManipulationDelta,The following statement contains a magic number: if (element != null) {  	ManipulationDelta deltaManipulation = e.DeltaManipulation;  	Matrix matrix = ((MatrixTransform)element.RenderTransform).Matrix;  	Point center = new Point (element.ActualWidth / 2' element.ActualHeight / 2);  	center = matrix.Transform (center);  	//Zoom  	if (!noScale) {  		if (deltaManipulation.Scale.X != 1 && deltaManipulation.Scale.Y != 1) {  			eventsNode.AppendChild (scaleNode);  			scaleNode.SetAttribute ("Element"' element.Name);  			scaleNode.SetAttribute ("X"' deltaManipulation.Scale.X.ToString ());  			scaleNode.SetAttribute ("Y"' deltaManipulation.Scale.Y.ToString ());  			scaleNode.SetAttribute ("CenterX"' center.X.ToString ());  			scaleNode.SetAttribute ("CenterY"' center.Y.ToString ());  		}  		matrix.ScaleAt (deltaManipulation.Scale.X' deltaManipulation.Scale.Y' center.X' center.Y);  	}  	// Rotate  	if (!noRotate) {  		if (deltaManipulation.Rotation != 0) {  			eventsNode.AppendChild (rotateNode);  			rotateNode.SetAttribute ("Element"' element.Name);  			rotateNode.SetAttribute ("Rotation"' deltaManipulation.Rotation.ToString ());  			rotateNode.SetAttribute ("CenterX"' center.X.ToString ());  			rotateNode.SetAttribute ("CenterY"' center.Y.ToString ());  		}  		matrix.RotateAt (deltaManipulation.Rotation' center.X' center.Y);  	}  	//Pan  	if (!noTranslate) {  		if (deltaManipulation.Translation.X != 0 && deltaManipulation.Translation.Y != 0) {  			eventsNode.AppendChild (translateNode);  			translateNode.SetAttribute ("Element"' element.Name);  			translateNode.SetAttribute ("X"' deltaManipulation.Translation.X.ToString ());  			translateNode.SetAttribute ("Y"' deltaManipulation.Translation.Y.ToString ());  		}  		matrix.Translate (deltaManipulation.Translation.X' deltaManipulation.Translation.Y);  	}  	xmlDoc.Save (recordingFilename);  	//((MatrixTransform)element.RenderTransform).Matrix = matrix;  	element.RenderTransform = new MatrixTransform (matrix);  	if (e.IsInertial) {  		Rect containingRect = new Rect (((FrameworkElement)e.ManipulationContainer).RenderSize);  		Rect shapeBounds = element.RenderTransform.TransformBounds (new Rect (element.RenderSize));  		if (!containingRect.Contains (shapeBounds)) {  			//let us know if we go outside the boundaries  			e.ReportBoundaryFeedback (e.DeltaManipulation);  			e.Complete ();  		}  	}  	e.Handled = true;  }  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,PlaybackSession,The following statement contains a magic number: if (result == true) {  	filename = dialogBox.FileName;  	if (File.Exists (filename)) {  		XmlDocument xmlDoc = new XmlDocument ();  		//load xml file  		xmlDoc.Load (filename);  		XmlElement session = xmlDoc.DocumentElement;  		XmlNodeList sceneNodes = session.GetElementsByTagName ("Scene");  		//begin playback  		playback = true;  		//load scenes listed in xml file  		foreach (XmlNode currScene in sceneNodes) {  			XmlElement sceneNode = currScene as XmlElement;  			String scenePath = currScene.Attributes.GetNamedItem ("FilePath").Value;  			StreamReader mysr = new StreamReader (scenePath);  			LoadXAML (scenePath);  			//InkCanvas sessionScene = LogicalTreeHelper.FindLogicalNode(rootObject' "scene") as InkCanvas;  			//perform events on scene  			XmlNode eventNode = sceneNode.GetElementsByTagName ("Events").Item (0);  			XmlNodeList events;  			if (eventNode.HasChildNodes) {  				events = eventNode.ChildNodes;  			}  			else {  				continue;  			}  			foreach (XmlNode mtEvent in events) {  				String mtAction = mtEvent.Name;  				if (mtAction == "InkStroke") {  					//get points  					XmlNodeList mtInkPoints = mtEvent.ChildNodes;  					StylusPoint defaultPoint;  					StylusPointCollection defaultPoints = new StylusPointCollection ();  					Stroke mtStroke;  					XmlElement inkPoint = mtInkPoints [0] as XmlElement;  					String xVal = inkPoint.Attributes.GetNamedItem ("X").Value;  					String yVal = inkPoint.Attributes.GetNamedItem ("Y").Value;  					Double X = Convert.ToDouble (xVal);  					Double Y = Convert.ToDouble (yVal);  					defaultPoint = new StylusPoint (X' Y);  					defaultPoints.Add (defaultPoint);  					mtStroke = new Stroke (defaultPoints);  					scene.Strokes.Add (mtStroke);  					for (int i = 1; i < mtInkPoints.Count; i++) {  						inkPoint = mtInkPoints [i] as XmlElement;  						xVal = inkPoint.Attributes.GetNamedItem ("X").Value;  						yVal = inkPoint.Attributes.GetNamedItem ("Y").Value;  						X = Convert.ToDouble (xVal);  						Y = Convert.ToDouble (yVal);  						//draw ink stroke one section at a time  						mtStroke.StylusPoints.Add (new StylusPoint (X' Y));  						//scene.Strokes.Remove(mtStroke);  						//scene.Strokes.Add(mtStroke);  						Refresh (scene);  					}  				}  				else {  					XmlAttributeCollection attributes = mtEvent.Attributes;  					Double X' Y' CenterX' CenterY' Rotation;  					String elementName = attributes.GetNamedItem ("Element").Value;  					// objects = LogicalTreeHelper.GetChildren(scene);  					Object mtElement = LogicalTreeHelper.FindLogicalNode (mtViewbox' elementName);  					String objectType = mtElement.GetType ().ToString ();  					UIElement currControl = new UIElement ();  					switch (objectType) {  					case "System.Windows.Controls.Image":  						currControl = mtElement as Image;  						break;  					case "System.Windows.Controls.StackPanel":  						currControl = mtElement as StackPanel;  						break;  					case "System.Windows.Controls.MediaElement":  						currControl = mtElement as MediaElement;  						break;  					case "System.Windows.Controls.TextBlock":  						currControl = mtElement as TextBlock;  						break;  					case "System.Windows.Shapes.Ellipse":  						currControl = mtElement as Ellipse;  						break;  					case "System.Windows.Shapes.Rectangle":  						currControl = mtElement as Rectangle;  						break;  					}  					Matrix matrix = ((MatrixTransform)currControl.RenderTransform).Matrix;  					switch (mtAction) {  					case "Rotate":  						Rotation = Convert.ToDouble (attributes.GetNamedItem ("Rotation").Value);  						CenterX = Convert.ToDouble (attributes.GetNamedItem ("CenterX").Value);  						CenterY = Convert.ToDouble (attributes.GetNamedItem ("CenterY").Value);  						matrix.RotateAt (Rotation' CenterX' CenterY);  						break;  					case "Scale":  						CenterX = Convert.ToDouble (attributes.GetNamedItem ("CenterX").Value);  						CenterY = Convert.ToDouble (attributes.GetNamedItem ("CenterY").Value);  						X = Convert.ToDouble (attributes.GetNamedItem ("X").Value);  						Y = Convert.ToDouble (attributes.GetNamedItem ("Y").Value);  						matrix.ScaleAt (X' Y' CenterX' CenterY);  						break;  					case "Translate":  						X = Convert.ToDouble (attributes.GetNamedItem ("X").Value);  						Y = Convert.ToDouble (attributes.GetNamedItem ("Y").Value);  						matrix.Translate (X' Y);  						break;  					}  					currControl.RenderTransform = new MatrixTransform (matrix);  					bringElementToFront (currControl);  					//currControl  					Refresh (currControl);  				}  				System.Threading.Thread.Sleep (50);  			}  		}  		//apply each action to the scene  	}  }  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,PlaybackSession,The following statement contains a magic number: if (File.Exists (filename)) {  	XmlDocument xmlDoc = new XmlDocument ();  	//load xml file  	xmlDoc.Load (filename);  	XmlElement session = xmlDoc.DocumentElement;  	XmlNodeList sceneNodes = session.GetElementsByTagName ("Scene");  	//begin playback  	playback = true;  	//load scenes listed in xml file  	foreach (XmlNode currScene in sceneNodes) {  		XmlElement sceneNode = currScene as XmlElement;  		String scenePath = currScene.Attributes.GetNamedItem ("FilePath").Value;  		StreamReader mysr = new StreamReader (scenePath);  		LoadXAML (scenePath);  		//InkCanvas sessionScene = LogicalTreeHelper.FindLogicalNode(rootObject' "scene") as InkCanvas;  		//perform events on scene  		XmlNode eventNode = sceneNode.GetElementsByTagName ("Events").Item (0);  		XmlNodeList events;  		if (eventNode.HasChildNodes) {  			events = eventNode.ChildNodes;  		}  		else {  			continue;  		}  		foreach (XmlNode mtEvent in events) {  			String mtAction = mtEvent.Name;  			if (mtAction == "InkStroke") {  				//get points  				XmlNodeList mtInkPoints = mtEvent.ChildNodes;  				StylusPoint defaultPoint;  				StylusPointCollection defaultPoints = new StylusPointCollection ();  				Stroke mtStroke;  				XmlElement inkPoint = mtInkPoints [0] as XmlElement;  				String xVal = inkPoint.Attributes.GetNamedItem ("X").Value;  				String yVal = inkPoint.Attributes.GetNamedItem ("Y").Value;  				Double X = Convert.ToDouble (xVal);  				Double Y = Convert.ToDouble (yVal);  				defaultPoint = new StylusPoint (X' Y);  				defaultPoints.Add (defaultPoint);  				mtStroke = new Stroke (defaultPoints);  				scene.Strokes.Add (mtStroke);  				for (int i = 1; i < mtInkPoints.Count; i++) {  					inkPoint = mtInkPoints [i] as XmlElement;  					xVal = inkPoint.Attributes.GetNamedItem ("X").Value;  					yVal = inkPoint.Attributes.GetNamedItem ("Y").Value;  					X = Convert.ToDouble (xVal);  					Y = Convert.ToDouble (yVal);  					//draw ink stroke one section at a time  					mtStroke.StylusPoints.Add (new StylusPoint (X' Y));  					//scene.Strokes.Remove(mtStroke);  					//scene.Strokes.Add(mtStroke);  					Refresh (scene);  				}  			}  			else {  				XmlAttributeCollection attributes = mtEvent.Attributes;  				Double X' Y' CenterX' CenterY' Rotation;  				String elementName = attributes.GetNamedItem ("Element").Value;  				// objects = LogicalTreeHelper.GetChildren(scene);  				Object mtElement = LogicalTreeHelper.FindLogicalNode (mtViewbox' elementName);  				String objectType = mtElement.GetType ().ToString ();  				UIElement currControl = new UIElement ();  				switch (objectType) {  				case "System.Windows.Controls.Image":  					currControl = mtElement as Image;  					break;  				case "System.Windows.Controls.StackPanel":  					currControl = mtElement as StackPanel;  					break;  				case "System.Windows.Controls.MediaElement":  					currControl = mtElement as MediaElement;  					break;  				case "System.Windows.Controls.TextBlock":  					currControl = mtElement as TextBlock;  					break;  				case "System.Windows.Shapes.Ellipse":  					currControl = mtElement as Ellipse;  					break;  				case "System.Windows.Shapes.Rectangle":  					currControl = mtElement as Rectangle;  					break;  				}  				Matrix matrix = ((MatrixTransform)currControl.RenderTransform).Matrix;  				switch (mtAction) {  				case "Rotate":  					Rotation = Convert.ToDouble (attributes.GetNamedItem ("Rotation").Value);  					CenterX = Convert.ToDouble (attributes.GetNamedItem ("CenterX").Value);  					CenterY = Convert.ToDouble (attributes.GetNamedItem ("CenterY").Value);  					matrix.RotateAt (Rotation' CenterX' CenterY);  					break;  				case "Scale":  					CenterX = Convert.ToDouble (attributes.GetNamedItem ("CenterX").Value);  					CenterY = Convert.ToDouble (attributes.GetNamedItem ("CenterY").Value);  					X = Convert.ToDouble (attributes.GetNamedItem ("X").Value);  					Y = Convert.ToDouble (attributes.GetNamedItem ("Y").Value);  					matrix.ScaleAt (X' Y' CenterX' CenterY);  					break;  				case "Translate":  					X = Convert.ToDouble (attributes.GetNamedItem ("X").Value);  					Y = Convert.ToDouble (attributes.GetNamedItem ("Y").Value);  					matrix.Translate (X' Y);  					break;  				}  				currControl.RenderTransform = new MatrixTransform (matrix);  				bringElementToFront (currControl);  				//currControl  				Refresh (currControl);  			}  			System.Threading.Thread.Sleep (50);  		}  	}  	//apply each action to the scene  }  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,PlaybackSession,The following statement contains a magic number: foreach (XmlNode currScene in sceneNodes) {  	XmlElement sceneNode = currScene as XmlElement;  	String scenePath = currScene.Attributes.GetNamedItem ("FilePath").Value;  	StreamReader mysr = new StreamReader (scenePath);  	LoadXAML (scenePath);  	//InkCanvas sessionScene = LogicalTreeHelper.FindLogicalNode(rootObject' "scene") as InkCanvas;  	//perform events on scene  	XmlNode eventNode = sceneNode.GetElementsByTagName ("Events").Item (0);  	XmlNodeList events;  	if (eventNode.HasChildNodes) {  		events = eventNode.ChildNodes;  	}  	else {  		continue;  	}  	foreach (XmlNode mtEvent in events) {  		String mtAction = mtEvent.Name;  		if (mtAction == "InkStroke") {  			//get points  			XmlNodeList mtInkPoints = mtEvent.ChildNodes;  			StylusPoint defaultPoint;  			StylusPointCollection defaultPoints = new StylusPointCollection ();  			Stroke mtStroke;  			XmlElement inkPoint = mtInkPoints [0] as XmlElement;  			String xVal = inkPoint.Attributes.GetNamedItem ("X").Value;  			String yVal = inkPoint.Attributes.GetNamedItem ("Y").Value;  			Double X = Convert.ToDouble (xVal);  			Double Y = Convert.ToDouble (yVal);  			defaultPoint = new StylusPoint (X' Y);  			defaultPoints.Add (defaultPoint);  			mtStroke = new Stroke (defaultPoints);  			scene.Strokes.Add (mtStroke);  			for (int i = 1; i < mtInkPoints.Count; i++) {  				inkPoint = mtInkPoints [i] as XmlElement;  				xVal = inkPoint.Attributes.GetNamedItem ("X").Value;  				yVal = inkPoint.Attributes.GetNamedItem ("Y").Value;  				X = Convert.ToDouble (xVal);  				Y = Convert.ToDouble (yVal);  				//draw ink stroke one section at a time  				mtStroke.StylusPoints.Add (new StylusPoint (X' Y));  				//scene.Strokes.Remove(mtStroke);  				//scene.Strokes.Add(mtStroke);  				Refresh (scene);  			}  		}  		else {  			XmlAttributeCollection attributes = mtEvent.Attributes;  			Double X' Y' CenterX' CenterY' Rotation;  			String elementName = attributes.GetNamedItem ("Element").Value;  			// objects = LogicalTreeHelper.GetChildren(scene);  			Object mtElement = LogicalTreeHelper.FindLogicalNode (mtViewbox' elementName);  			String objectType = mtElement.GetType ().ToString ();  			UIElement currControl = new UIElement ();  			switch (objectType) {  			case "System.Windows.Controls.Image":  				currControl = mtElement as Image;  				break;  			case "System.Windows.Controls.StackPanel":  				currControl = mtElement as StackPanel;  				break;  			case "System.Windows.Controls.MediaElement":  				currControl = mtElement as MediaElement;  				break;  			case "System.Windows.Controls.TextBlock":  				currControl = mtElement as TextBlock;  				break;  			case "System.Windows.Shapes.Ellipse":  				currControl = mtElement as Ellipse;  				break;  			case "System.Windows.Shapes.Rectangle":  				currControl = mtElement as Rectangle;  				break;  			}  			Matrix matrix = ((MatrixTransform)currControl.RenderTransform).Matrix;  			switch (mtAction) {  			case "Rotate":  				Rotation = Convert.ToDouble (attributes.GetNamedItem ("Rotation").Value);  				CenterX = Convert.ToDouble (attributes.GetNamedItem ("CenterX").Value);  				CenterY = Convert.ToDouble (attributes.GetNamedItem ("CenterY").Value);  				matrix.RotateAt (Rotation' CenterX' CenterY);  				break;  			case "Scale":  				CenterX = Convert.ToDouble (attributes.GetNamedItem ("CenterX").Value);  				CenterY = Convert.ToDouble (attributes.GetNamedItem ("CenterY").Value);  				X = Convert.ToDouble (attributes.GetNamedItem ("X").Value);  				Y = Convert.ToDouble (attributes.GetNamedItem ("Y").Value);  				matrix.ScaleAt (X' Y' CenterX' CenterY);  				break;  			case "Translate":  				X = Convert.ToDouble (attributes.GetNamedItem ("X").Value);  				Y = Convert.ToDouble (attributes.GetNamedItem ("Y").Value);  				matrix.Translate (X' Y);  				break;  			}  			currControl.RenderTransform = new MatrixTransform (matrix);  			bringElementToFront (currControl);  			//currControl  			Refresh (currControl);  		}  		System.Threading.Thread.Sleep (50);  	}  }  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,PlaybackSession,The following statement contains a magic number: foreach (XmlNode mtEvent in events) {  	String mtAction = mtEvent.Name;  	if (mtAction == "InkStroke") {  		//get points  		XmlNodeList mtInkPoints = mtEvent.ChildNodes;  		StylusPoint defaultPoint;  		StylusPointCollection defaultPoints = new StylusPointCollection ();  		Stroke mtStroke;  		XmlElement inkPoint = mtInkPoints [0] as XmlElement;  		String xVal = inkPoint.Attributes.GetNamedItem ("X").Value;  		String yVal = inkPoint.Attributes.GetNamedItem ("Y").Value;  		Double X = Convert.ToDouble (xVal);  		Double Y = Convert.ToDouble (yVal);  		defaultPoint = new StylusPoint (X' Y);  		defaultPoints.Add (defaultPoint);  		mtStroke = new Stroke (defaultPoints);  		scene.Strokes.Add (mtStroke);  		for (int i = 1; i < mtInkPoints.Count; i++) {  			inkPoint = mtInkPoints [i] as XmlElement;  			xVal = inkPoint.Attributes.GetNamedItem ("X").Value;  			yVal = inkPoint.Attributes.GetNamedItem ("Y").Value;  			X = Convert.ToDouble (xVal);  			Y = Convert.ToDouble (yVal);  			//draw ink stroke one section at a time  			mtStroke.StylusPoints.Add (new StylusPoint (X' Y));  			//scene.Strokes.Remove(mtStroke);  			//scene.Strokes.Add(mtStroke);  			Refresh (scene);  		}  	}  	else {  		XmlAttributeCollection attributes = mtEvent.Attributes;  		Double X' Y' CenterX' CenterY' Rotation;  		String elementName = attributes.GetNamedItem ("Element").Value;  		// objects = LogicalTreeHelper.GetChildren(scene);  		Object mtElement = LogicalTreeHelper.FindLogicalNode (mtViewbox' elementName);  		String objectType = mtElement.GetType ().ToString ();  		UIElement currControl = new UIElement ();  		switch (objectType) {  		case "System.Windows.Controls.Image":  			currControl = mtElement as Image;  			break;  		case "System.Windows.Controls.StackPanel":  			currControl = mtElement as StackPanel;  			break;  		case "System.Windows.Controls.MediaElement":  			currControl = mtElement as MediaElement;  			break;  		case "System.Windows.Controls.TextBlock":  			currControl = mtElement as TextBlock;  			break;  		case "System.Windows.Shapes.Ellipse":  			currControl = mtElement as Ellipse;  			break;  		case "System.Windows.Shapes.Rectangle":  			currControl = mtElement as Rectangle;  			break;  		}  		Matrix matrix = ((MatrixTransform)currControl.RenderTransform).Matrix;  		switch (mtAction) {  		case "Rotate":  			Rotation = Convert.ToDouble (attributes.GetNamedItem ("Rotation").Value);  			CenterX = Convert.ToDouble (attributes.GetNamedItem ("CenterX").Value);  			CenterY = Convert.ToDouble (attributes.GetNamedItem ("CenterY").Value);  			matrix.RotateAt (Rotation' CenterX' CenterY);  			break;  		case "Scale":  			CenterX = Convert.ToDouble (attributes.GetNamedItem ("CenterX").Value);  			CenterY = Convert.ToDouble (attributes.GetNamedItem ("CenterY").Value);  			X = Convert.ToDouble (attributes.GetNamedItem ("X").Value);  			Y = Convert.ToDouble (attributes.GetNamedItem ("Y").Value);  			matrix.ScaleAt (X' Y' CenterX' CenterY);  			break;  		case "Translate":  			X = Convert.ToDouble (attributes.GetNamedItem ("X").Value);  			Y = Convert.ToDouble (attributes.GetNamedItem ("Y").Value);  			matrix.Translate (X' Y);  			break;  		}  		currControl.RenderTransform = new MatrixTransform (matrix);  		bringElementToFront (currControl);  		//currControl  		Refresh (currControl);  	}  	System.Threading.Thread.Sleep (50);  }  
Magic Number,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,PlaybackSession,The following statement contains a magic number: System.Threading.Thread.Sleep (50);  
Missing Default,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,PlaybackSession,The following switch statement is missing a default case: switch (objectType) {  case "System.Windows.Controls.Image":  	currControl = mtElement as Image;  	break;  case "System.Windows.Controls.StackPanel":  	currControl = mtElement as StackPanel;  	break;  case "System.Windows.Controls.MediaElement":  	currControl = mtElement as MediaElement;  	break;  case "System.Windows.Controls.TextBlock":  	currControl = mtElement as TextBlock;  	break;  case "System.Windows.Shapes.Ellipse":  	currControl = mtElement as Ellipse;  	break;  case "System.Windows.Shapes.Rectangle":  	currControl = mtElement as Rectangle;  	break;  }  
Missing Default,BlobPrototype001,MainWindow,C:\repos\jaelle_blob\viewer\BlobPrototype001\MainWindow.xaml.cs,PlaybackSession,The following switch statement is missing a default case: switch (mtAction) {  case "Rotate":  	Rotation = Convert.ToDouble (attributes.GetNamedItem ("Rotation").Value);  	CenterX = Convert.ToDouble (attributes.GetNamedItem ("CenterX").Value);  	CenterY = Convert.ToDouble (attributes.GetNamedItem ("CenterY").Value);  	matrix.RotateAt (Rotation' CenterX' CenterY);  	break;  case "Scale":  	CenterX = Convert.ToDouble (attributes.GetNamedItem ("CenterX").Value);  	CenterY = Convert.ToDouble (attributes.GetNamedItem ("CenterY").Value);  	X = Convert.ToDouble (attributes.GetNamedItem ("X").Value);  	Y = Convert.ToDouble (attributes.GetNamedItem ("Y").Value);  	matrix.ScaleAt (X' Y' CenterX' CenterY);  	break;  case "Translate":  	X = Convert.ToDouble (attributes.GetNamedItem ("X").Value);  	Y = Convert.ToDouble (attributes.GetNamedItem ("Y").Value);  	matrix.Translate (X' Y);  	break;  }  
