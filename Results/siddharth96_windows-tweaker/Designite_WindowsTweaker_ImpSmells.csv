Implementation smell,Namespace,Class,File,Method,Description
Long Method,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadExplorerTab,The method has 117 lines of code.
Long Method,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromExplorer,The method has 111 lines of code.
Long Method,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadSystemTab,The method has 108 lines of code.
Long Method,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadFeaturesTab,The method has 112 lines of code.
Complex Method,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromExplorer,Cyclomatic complexity of the method is 8
Complex Method,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,AddToContextMenu,Cyclomatic complexity of the method is 8
Long Parameter List,WindowsTweaker,InfoBox,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\InfoBox.xaml.cs,InfoBox,The method has 5 parameters. Parameters: msg' okText' cancelText' caption' dialogType
Long Parameter List,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,WindowProc,The method has 5 parameters. Parameters: hwnd' msg' wParam' lParam' handled
Long Parameter List,WindowsTweaker.AppTasks,UiRegistryHandler,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\UIRegistryHandler.cs,SetCheckedState,The method has 5 parameters. Parameters: chk' registryKey' valueName' inverse' nullAsTrue
Long Parameter List,WindowsTweaker.AppTasks,UiRegistryHandler,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\UIRegistryHandler.cs,SetValueFromString,The method has 6 parameters. Parameters: iud' registryKey' valueName' defaultValStr' maxVal' minVal
Long Statement,WindowsTweaker,About,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\About.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Documents.Hyperlink)(target)).Click += new System.Windows.RoutedEventHandler(this.OnLikeOnFacebookClick); " is 122.
Long Statement,WindowsTweaker,OpenWith,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\OpenWith.xaml.cs,Connect,The length of the statement  "            ((System.ComponentModel.BackgroundWorker)(target)).RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(this.OnRunWorkerCompleted); " is 157.
Long Statement,WindowsTweaker,OpenWith,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\OpenWith.xaml.cs,Connect,The length of the statement  "            ((System.ComponentModel.BackgroundWorker)(target)).DoWork += new System.ComponentModel.DoWorkEventHandler(this.OnDoWork); " is 121.
Long Statement,WindowsTweaker,OpenWith,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\OpenWith.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.Image)(target)).PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.OnMoreInfoImageMouseDown); " is 142.
Long Statement,WindowsTweaker,ReportError,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\ReportError.xaml.cs,Connect,The length of the statement  "            ((System.ComponentModel.BackgroundWorker)(target)).RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(this.OnReportErrorWorkerCompleted); " is 165.
Long Statement,WindowsTweaker,ReportError,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\ReportError.xaml.cs,Connect,The length of the statement  "            ((System.ComponentModel.BackgroundWorker)(target)).DoWork += new System.ComponentModel.DoWorkEventHandler(this.OnReportErrorDoWork); " is 132.
Long Statement,WindowsTweaker,StartupManager,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\StartupManager.xaml.cs,Connect,The length of the statement  "            ((WindowsTweaker.StartupManager)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.OnWindowClosing); " is 120.
Long Statement,WindowsTweaker,StartupManager,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\StartupManager.xaml.cs,Connect,The length of the statement  "            ((System.ComponentModel.BackgroundWorker)(target)).RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(this.OnRunWorkerCompleted); " is 157.
Long Statement,WindowsTweaker,StartupManager,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\StartupManager.xaml.cs,Connect,The length of the statement  "            ((System.ComponentModel.BackgroundWorker)(target)).DoWork += new System.ComponentModel.DoWorkEventHandler(this.OnDoWork); " is 121.
Long Statement,WindowsTweaker,StartupManager,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\StartupManager.xaml.cs,Connect,The length of the statement  "            ((System.Windows.Controls.Image)(target)).PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.OnMoreInfoImageMouseDown); " is 142.
Long Statement,WindowsTweaker,App,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\App.xaml.cs,SetLanguageDictionary,The length of the statement  "            ResourceDictionary resourceDictionary = resourceDictionaries.FirstOrDefault(x => x.Source.OriginalString == requestedCulture); " is 126.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadLogonTab,The length of the statement  "            using (RegistryKey hklmBootAnimation = _hklm.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Authentication\LogonUI\BootAnimation")) { " is 143.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromLogon,The length of the statement  "            using (RegistryKey hklmBootAnimation = _hklm.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Authentication\LogonUI\BootAnimation")) { " is 143.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadRestrictionsTab,The length of the statement  "            using (RegistryKey hkcuExAdvanced = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced")) { " is 121.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromRestrictions,The length of the statement  "            using (RegistryKey hkcuExAdvanced = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced")) { " is 121.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadExplorerTab,The length of the statement  "                rbtnShowDriveLetterAfterName.IsEnabled = rbtnHideDriveLetter.IsEnabled = rbtnShowDriveLetterBeforeName.IsEnabled = false; " is 121.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadExplorerTab,The length of the statement  "            using (RegistryKey hkcuExAdvanced = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced")) { " is 121.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadExplorerTab,The length of the statement  "            using (RegistryKey hklmNamespace = _hklm.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace")) { " is 129.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadExplorerTab,The length of the statement  "            using (RegistryKey hklmNamespace = _hklm.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace")) { " is 132.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadExplorerTab,The length of the statement  "            RegistryKey hklmCPNamespace = _hklm.OpenSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\ControlPanel\NameSpace"); " is 125.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadExplorerTab,The length of the statement  "                using (RegistryKey hkcuStartScreen = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\StartPage")) { " is 123.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadExplorerTab,The length of the statement  "                using (RegistryKey hkcuEdgeUi = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\ImmersiveShell\EdgeUi")) { " is 121.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromExplorer,The length of the statement  "            using (RegistryKey hkcuExAdvanced = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced")) { " is 121.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromExplorer,The length of the statement  "            using (RegistryKey hklmNamespace = _hklm.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Desktop\NameSpace")) { " is 129.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromExplorer,The length of the statement  "            using (RegistryKey hklmNamespace = _hklm.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\MyComputer\NameSpace")) { " is 132.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromExplorer,The length of the statement  "                using (RegistryKey hkcuStartScreen = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\StartPage")) { " is 123.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromExplorer,The length of the statement  "                using (RegistryKey hkcuEdgeUi = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\ImmersiveShell\EdgeUi")) { " is 121.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadDisplayTab,The length of the statement  "                    _selectionColor = rgb.Length == 3 ? Color.FromRgb(Byte.Parse(rgb[0])' Byte.Parse(rgb[1])' Byte.Parse(rgb[2])) : _defaultSelectionColor; " is 135.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadDisplayTab,The length of the statement  "            using (RegistryKey hklmShellIcons = _hklm.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Icons")) { " is 124.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromDisplay,The length of the statement  "            using (RegistryKey hklmShellIcons = _hklm.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Icons")) { " is 124.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadPlacesTab,The length of the statement  "                using (RegistryKey hkcuExAdvanced = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced")) { " is 121.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromPlaces,The length of the statement  "                using (RegistryKey hkcuExAdvanced = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced")) { " is 121.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromRightClick,The length of the statement  "            using (RegistryKey hklmExAdvanced = _hklm.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced")) { " is 121.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,AddToContextMenu,The length of the statement  "                string msg = GetResourceString("UnableToIndentify") + " \"" + shrtCtPath + "\"" + " " + GetResourceString("AsValidFilePath") + "." + " is 132.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,DeleteItemFromContextMenu,The length of the statement  "            _message.Success(GetResourceString("SuccessfullyDeleted") + " " + fileItem.Tag + " " + GetResourceString("FromRightClick")); " is 124.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,HideFolder,The length of the statement  "            _message.Success(GetResourceString("SuccessfullyHidden") + " " + folderName + " " + GetResourceString("WithSysAttribs")); " is 121.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,HideFile,The length of the statement  "                fileList.Select(Path.GetFileName).ToList().SentenceJoin(GetResourceString("And")) + " " + GetResourceString("WithSysAttribs")); " is 127.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UnhideFile,The length of the statement  "            _message.Success(fileNameList.SentenceJoin(GetResourceString("And")) + " " + verb + " " + GetResourceString("NowVisible")); " is 123.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,OnButtonBrowseSpecialFolderParentClick,The length of the statement  "                _message.Success(cmboBxSpecialFolderNames.SelectionBoxItem + " " + GetResourceString("CreatedSuccessFullyAt") + " " + parentPath); " is 130.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadFeaturesTab,The length of the statement  "                RegistryKey hkcuAutoplayHandlers = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\AutoplayHandlers"); " is 126.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadFeaturesTab,The length of the statement  "            using (RegistryKey hklmAutoUpdate = _hklm.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update")) { " is 129.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromFeatures,The length of the statement  "                RegistryKey hkcuAutoplayHandlers = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\AutoplayHandlers"); " is 126.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromFeatures,The length of the statement  "            using (RegistryKey hklmAutoUpdate = _hklm.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update")) { " is 129.
Long Statement,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,OnUpdateCheckBackgroundWorkerCompleted,The length of the statement  "            string msg = GetResourceString("NewVersionAvailable") + " " + tweakerUpdate.Version + " " + GetResourceString("IsAvailableForDw") + " " + " is 137.
Long Statement,WindowsTweaker.AppTasks,SendToTask,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\SendToTask.cs,GetSendToFolderPath,The length of the statement  "                _cachedSendToPath = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + @"\Microsoft\Windows\SendTo"; " is 120.
Long Statement,WindowsTweaker.AppTasks,SendToTask,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\SendToTask.cs,Delete,The length of the statement  "                ? _window.FindResource("SureToDelete") + " \"" + sendToListItems[0].Name + "\" " + _window.FindResource("FromSendToMenu") " is 121.
Long Statement,WindowsTweaker.AppTasks,SendToTask,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\SendToTask.cs,Delete,The length of the statement  "                : _window.FindResource("SureToDeleteMultiple") + " " + sendToListItems.Length + " " + _window.FindResource("FromSendToMenuMultiple"); " is 133.
Long Statement,WindowsTweaker.AppTasks,StartupManagerTask,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\StartupManagerTask.cs,LoadStartupItems,The length of the statement  "            using (RegistryKey hklmRunDisabled = Registry.LocalMachine.OpenSubKey(@"Software\Microsoft\Windows\CurrentVersion\Run-")) { " is 123.
Long Statement,WindowsTweaker.AppTasks,StartupManagerTask,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\StartupManagerTask.cs,LoadStartupItems,The length of the statement  "                using (RegistryKey hklmWowRun = Registry.LocalMachine.OpenSubKey(@"Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Run")) { " is 129.
Long Statement,WindowsTweaker.Resources,WindowDictionary,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\Resources\WindowDictionary.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/WindowsTweaker;component/resources/windowdictionary.xaml"' System.UriKind.Relative); " is 130.
Long Statement,WindowsTweaker.Resources,WindowDictionary,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\Resources\WindowDictionary.cs,Connect,The length of the statement  "            ((System.Windows.Controls.Grid)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.OnTitlebarDoubleClick); " is 131.
Long Statement,WindowsTweaker.Resources,WindowDictionary,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\Resources\WindowDictionary.cs,Connect,The length of the statement  "            ((System.Windows.Controls.Grid)(target)).MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.OnTitleBarMouseLeftButtonDown); " is 149.
Long Statement,WindowsTweaker.Resources,WindowDictionary,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\Resources\WindowDictionary.cs,Connect,The length of the statement  "            ((System.Windows.Shapes.Rectangle)(target)).MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.OnWindowResizeInitiateWE); " is 147.
Long Statement,WindowsTweaker.Resources,WindowDictionary,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\Resources\WindowDictionary.cs,Connect,The length of the statement  "            ((System.Windows.Shapes.Rectangle)(target)).MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.OnWindowResizeEnd); " is 138.
Long Statement,WindowsTweaker.Resources,WindowDictionary,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\Resources\WindowDictionary.cs,Connect,The length of the statement  "            ((System.Windows.Shapes.Rectangle)(target)).MouseMove += new System.Windows.Input.MouseEventHandler(this.OnWindowResizing); " is 123.
Long Statement,WindowsTweaker.Resources,WindowDictionary,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\Resources\WindowDictionary.cs,Connect,The length of the statement  "            ((System.Windows.Shapes.Rectangle)(target)).MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.OnWindowResizeInitiateNS); " is 147.
Long Statement,WindowsTweaker.Resources,WindowDictionary,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\Resources\WindowDictionary.cs,Connect,The length of the statement  "            ((System.Windows.Shapes.Rectangle)(target)).MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.OnWindowResizeEnd); " is 138.
Long Statement,WindowsTweaker.Resources,WindowDictionary,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\Resources\WindowDictionary.cs,Connect,The length of the statement  "            ((System.Windows.Shapes.Rectangle)(target)).MouseMove += new System.Windows.Input.MouseEventHandler(this.OnWindowResizing); " is 123.
Long Statement,WindowsTweaker.Search,SearchItemEqualityComparer,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\Search\SearchItemEqualityComparer.cs,GetHashCode,The length of the statement  "            return obj.MainNavItem.GetHashCode() ^ obj.SubTab.GetHashCode() ^ obj.SubTabControl.GetHashCode() ^ obj.UiElement.GetHashCode(); " is 128.
Empty Catch Block,WindowsTweaker,App,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\App.xaml.cs,SetUiCulture,The method has an empty catch block.
Empty Catch Block,WindowsTweaker,App,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\App.xaml.cs,SetUiCulture,The method has an empty catch block.
Empty Catch Block,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,GetLatestVersionInfo,The method has an empty catch block.
Empty Catch Block,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,GetLatestVersionInfo,The method has an empty catch block.
Empty Catch Block,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,GetLatestVersionInfo,The method has an empty catch block.
Empty Catch Block,WindowsTweaker.AppTasks,CreateFileTask,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\CreateFileTask.cs,Create,The method has an empty catch block.
Empty Catch Block,WindowsTweaker.AppTasks,CreateFileTask,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\CreateFileTask.cs,Create,The method has an empty catch block.
Empty Catch Block,WindowsTweaker.AppTasks,ConfigHandler,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\ConfigHandler.cs,UpdateConfig,The method has an empty catch block.
Empty Catch Block,WindowsTweaker.AppTasks,ConfigHandler,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\ConfigHandler.cs,UpdateConfig,The method has an empty catch block.
Empty Catch Block,WindowsTweaker.AppTasks,ConfigHandler,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\ConfigHandler.cs,UpdateConfig,The method has an empty catch block.
Empty Catch Block,WindowsTweaker.AppTasks,ConfigHandler,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\ConfigHandler.cs,ReadConfig,The method has an empty catch block.
Empty Catch Block,WindowsTweaker.AppTasks,ConfigHandler,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\ConfigHandler.cs,ReadConfig,The method has an empty catch block.
Empty Catch Block,WindowsTweaker.AppTasks,ConfigHandler,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\ConfigHandler.cs,ReadConfig,The method has an empty catch block.
Empty Catch Block,WindowsTweaker.AppTasks,ConfigHandler,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\ConfigHandler.cs,ReadConfig,The method has an empty catch block.
Empty Catch Block,WindowsTweaker.AppTasks,UpdateCheckTask,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\UpdateCheckTask.cs,GetUpdateInfoFile,The method has an empty catch block.
Empty Catch Block,WindowsTweaker.AppTasks,UpdateCheckTask,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\UpdateCheckTask.cs,GetUpdateInfoFile,The method has an empty catch block.
Empty Catch Block,WindowsTweaker.AppTasks,UpdateCheckTask,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\UpdateCheckTask.cs,GetUpdateInfoFile,The method has an empty catch block.
Empty Catch Block,WindowsTweaker.AppTasks,UpdateCheckTask,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\UpdateCheckTask.cs,ReadTweakerUpdateInfo,The method has an empty catch block.
Empty Catch Block,WindowsTweaker.AppTasks,Utils,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\Utils.cs,GetConfigFilePath,The method has an empty catch block.
Magic Number,WindowsTweaker,About,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\About.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.txtVersion = ((System.Windows.Controls.TextBlock)(target));              return;              case 2:                            #line 26 "..\..\..\About.xaml"              ((System.Windows.Documents.Hyperlink)(target)).Click += new System.Windows.RoutedEventHandler(this.OnVisitUsLinkClick);                            #line default              #line hidden              return;              case 3:                            #line 31 "..\..\..\About.xaml"              ((System.Windows.Documents.Hyperlink)(target)).Click += new System.Windows.RoutedEventHandler(this.OnLikeOnFacebookClick);                            #line default              #line hidden              return;              case 4:                            #line 36 "..\..\..\About.xaml"              ((System.Windows.Documents.Hyperlink)(target)).Click += new System.Windows.RoutedEventHandler(this.OnViewSourceClick);                            #line default              #line hidden              return;              }
Magic Number,WindowsTweaker,About,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\About.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.txtVersion = ((System.Windows.Controls.TextBlock)(target));              return;              case 2:                            #line 26 "..\..\..\About.xaml"              ((System.Windows.Documents.Hyperlink)(target)).Click += new System.Windows.RoutedEventHandler(this.OnVisitUsLinkClick);                            #line default              #line hidden              return;              case 3:                            #line 31 "..\..\..\About.xaml"              ((System.Windows.Documents.Hyperlink)(target)).Click += new System.Windows.RoutedEventHandler(this.OnLikeOnFacebookClick);                            #line default              #line hidden              return;              case 4:                            #line 36 "..\..\..\About.xaml"              ((System.Windows.Documents.Hyperlink)(target)).Click += new System.Windows.RoutedEventHandler(this.OnViewSourceClick);                            #line default              #line hidden              return;              }
Magic Number,WindowsTweaker,About,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\About.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.txtVersion = ((System.Windows.Controls.TextBlock)(target));              return;              case 2:                            #line 26 "..\..\..\About.xaml"              ((System.Windows.Documents.Hyperlink)(target)).Click += new System.Windows.RoutedEventHandler(this.OnVisitUsLinkClick);                            #line default              #line hidden              return;              case 3:                            #line 31 "..\..\..\About.xaml"              ((System.Windows.Documents.Hyperlink)(target)).Click += new System.Windows.RoutedEventHandler(this.OnLikeOnFacebookClick);                            #line default              #line hidden              return;              case 4:                            #line 36 "..\..\..\About.xaml"              ((System.Windows.Documents.Hyperlink)(target)).Click += new System.Windows.RoutedEventHandler(this.OnViewSourceClick);                            #line default              #line hidden              return;              }
Magic Number,WindowsTweaker,InfoBox,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\InfoBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.infoBoxWindow = ((WindowsTweaker.InfoBox)(target));              return;              case 2:              this.imgInfoBox = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.txtMsg = ((System.Windows.Controls.TextBlock)(target));              return;              case 4:              this.btnOk = ((System.Windows.Controls.Button)(target));                            #line 25 "..\..\..\InfoBox.xaml"              this.btnOk.Click += new System.Windows.RoutedEventHandler(this.OnOkButtonClick);                            #line default              #line hidden              return;              case 5:              this.btnCancel = ((System.Windows.Controls.Button)(target));                            #line 27 "..\..\..\InfoBox.xaml"              this.btnCancel.Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClick);                            #line default              #line hidden              return;              }
Magic Number,WindowsTweaker,InfoBox,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\InfoBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.infoBoxWindow = ((WindowsTweaker.InfoBox)(target));              return;              case 2:              this.imgInfoBox = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.txtMsg = ((System.Windows.Controls.TextBlock)(target));              return;              case 4:              this.btnOk = ((System.Windows.Controls.Button)(target));                            #line 25 "..\..\..\InfoBox.xaml"              this.btnOk.Click += new System.Windows.RoutedEventHandler(this.OnOkButtonClick);                            #line default              #line hidden              return;              case 5:              this.btnCancel = ((System.Windows.Controls.Button)(target));                            #line 27 "..\..\..\InfoBox.xaml"              this.btnCancel.Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClick);                            #line default              #line hidden              return;              }
Magic Number,WindowsTweaker,InfoBox,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\InfoBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.infoBoxWindow = ((WindowsTweaker.InfoBox)(target));              return;              case 2:              this.imgInfoBox = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.txtMsg = ((System.Windows.Controls.TextBlock)(target));              return;              case 4:              this.btnOk = ((System.Windows.Controls.Button)(target));                            #line 25 "..\..\..\InfoBox.xaml"              this.btnOk.Click += new System.Windows.RoutedEventHandler(this.OnOkButtonClick);                            #line default              #line hidden              return;              case 5:              this.btnCancel = ((System.Windows.Controls.Button)(target));                            #line 27 "..\..\..\InfoBox.xaml"              this.btnCancel.Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClick);                            #line default              #line hidden              return;              }
Magic Number,WindowsTweaker,InfoBox,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\InfoBox.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.infoBoxWindow = ((WindowsTweaker.InfoBox)(target));              return;              case 2:              this.imgInfoBox = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.txtMsg = ((System.Windows.Controls.TextBlock)(target));              return;              case 4:              this.btnOk = ((System.Windows.Controls.Button)(target));                            #line 25 "..\..\..\InfoBox.xaml"              this.btnOk.Click += new System.Windows.RoutedEventHandler(this.OnOkButtonClick);                            #line default              #line hidden              return;              case 5:              this.btnCancel = ((System.Windows.Controls.Button)(target));                            #line 27 "..\..\..\InfoBox.xaml"              this.btnCancel.Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClick);                            #line default              #line hidden              return;              }
Magic Number,WindowsTweaker,MoreInfo,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MoreInfo.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.imgProgramIcon = ((System.Windows.Controls.Image)(target));              return;              case 2:              this.txtAppTitle = ((System.Windows.Controls.TextBlock)(target));              return;              case 3:              this.txtAppFileName = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.txtAppFilePath = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,WindowsTweaker,MoreInfo,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MoreInfo.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.imgProgramIcon = ((System.Windows.Controls.Image)(target));              return;              case 2:              this.txtAppTitle = ((System.Windows.Controls.TextBlock)(target));              return;              case 3:              this.txtAppFileName = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.txtAppFilePath = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,WindowsTweaker,MoreInfo,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MoreInfo.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:              this.imgProgramIcon = ((System.Windows.Controls.Image)(target));              return;              case 2:              this.txtAppTitle = ((System.Windows.Controls.TextBlock)(target));              return;              case 3:              this.txtAppFileName = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.txtAppFilePath = ((System.Windows.Controls.TextBox)(target));              return;              }
Magic Number,WindowsTweaker,OpenWith,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\OpenWith.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\OpenWith.xaml"              ((WindowsTweaker.OpenWith)(target)).Loaded += new System.Windows.RoutedEventHandler(this.OnWindowLoaded);                            #line default              #line hidden                            #line 9 "..\..\..\OpenWith.xaml"              ((WindowsTweaker.OpenWith)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.OnWindowClosing);                            #line default              #line hidden              return;              case 2:                            #line 12 "..\..\..\OpenWith.xaml"              ((System.ComponentModel.BackgroundWorker)(target)).RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(this.OnRunWorkerCompleted);                            #line default              #line hidden                            #line 13 "..\..\..\OpenWith.xaml"              ((System.ComponentModel.BackgroundWorker)(target)).DoWork += new System.ComponentModel.DoWorkEventHandler(this.OnDoWork);                            #line default              #line hidden              return;              case 5:              this.txtLoading = ((System.Windows.Controls.TextBlock)(target));              return;              case 6:              this.lstOpenWithBox = ((System.Windows.Controls.ListBox)(target));              return;              }
Magic Number,WindowsTweaker,OpenWith,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\OpenWith.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\OpenWith.xaml"              ((WindowsTweaker.OpenWith)(target)).Loaded += new System.Windows.RoutedEventHandler(this.OnWindowLoaded);                            #line default              #line hidden                            #line 9 "..\..\..\OpenWith.xaml"              ((WindowsTweaker.OpenWith)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.OnWindowClosing);                            #line default              #line hidden              return;              case 2:                            #line 12 "..\..\..\OpenWith.xaml"              ((System.ComponentModel.BackgroundWorker)(target)).RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(this.OnRunWorkerCompleted);                            #line default              #line hidden                            #line 13 "..\..\..\OpenWith.xaml"              ((System.ComponentModel.BackgroundWorker)(target)).DoWork += new System.ComponentModel.DoWorkEventHandler(this.OnDoWork);                            #line default              #line hidden              return;              case 5:              this.txtLoading = ((System.Windows.Controls.TextBlock)(target));              return;              case 6:              this.lstOpenWithBox = ((System.Windows.Controls.ListBox)(target));              return;              }
Magic Number,WindowsTweaker,OpenWith,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\OpenWith.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\OpenWith.xaml"              ((WindowsTweaker.OpenWith)(target)).Loaded += new System.Windows.RoutedEventHandler(this.OnWindowLoaded);                            #line default              #line hidden                            #line 9 "..\..\..\OpenWith.xaml"              ((WindowsTweaker.OpenWith)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.OnWindowClosing);                            #line default              #line hidden              return;              case 2:                            #line 12 "..\..\..\OpenWith.xaml"              ((System.ComponentModel.BackgroundWorker)(target)).RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(this.OnRunWorkerCompleted);                            #line default              #line hidden                            #line 13 "..\..\..\OpenWith.xaml"              ((System.ComponentModel.BackgroundWorker)(target)).DoWork += new System.ComponentModel.DoWorkEventHandler(this.OnDoWork);                            #line default              #line hidden              return;              case 5:              this.txtLoading = ((System.Windows.Controls.TextBlock)(target));              return;              case 6:              this.lstOpenWithBox = ((System.Windows.Controls.ListBox)(target));              return;              }
Magic Number,WindowsTweaker,OpenWith,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\OpenWith.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 3:                            #line 52 "..\..\..\OpenWith.xaml"              ((WPFSpark.ToggleSwitch)(target)).Checked += new System.Windows.RoutedEventHandler(this.OnToggleButtonChecked);                            #line default              #line hidden                            #line 53 "..\..\..\OpenWith.xaml"              ((WPFSpark.ToggleSwitch)(target)).Unchecked += new System.Windows.RoutedEventHandler(this.OnToggleButtonUnchecked);                            #line default              #line hidden              break;              case 4:                            #line 113 "..\..\..\OpenWith.xaml"              ((System.Windows.Controls.Image)(target)).PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.OnMoreInfoImageMouseDown);                            #line default              #line hidden              break;              case 7:              eventSetter = new System.Windows.EventSetter();              eventSetter.Event = System.Windows.UIElement.PreviewMouseLeftButtonDownEvent;                            #line 127 "..\..\..\OpenWith.xaml"              eventSetter.Handler = new System.Windows.Input.MouseButtonEventHandler(this.OnMoreInfoImageMouseDown);                            #line default              #line hidden              ((System.Windows.Style)(target)).Setters.Add(eventSetter);              eventSetter = new System.Windows.EventSetter();              eventSetter.Event = System.Windows.UIElement.PreviewTouchDownEvent;                            #line 128 "..\..\..\OpenWith.xaml"              eventSetter.Handler = new System.EventHandler<System.Windows.Input.TouchEventArgs>(this.OnMoreInfoImageTouched);                            #line default              #line hidden              ((System.Windows.Style)(target)).Setters.Add(eventSetter);              break;              }
Magic Number,WindowsTweaker,OpenWith,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\OpenWith.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 3:                            #line 52 "..\..\..\OpenWith.xaml"              ((WPFSpark.ToggleSwitch)(target)).Checked += new System.Windows.RoutedEventHandler(this.OnToggleButtonChecked);                            #line default              #line hidden                            #line 53 "..\..\..\OpenWith.xaml"              ((WPFSpark.ToggleSwitch)(target)).Unchecked += new System.Windows.RoutedEventHandler(this.OnToggleButtonUnchecked);                            #line default              #line hidden              break;              case 4:                            #line 113 "..\..\..\OpenWith.xaml"              ((System.Windows.Controls.Image)(target)).PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.OnMoreInfoImageMouseDown);                            #line default              #line hidden              break;              case 7:              eventSetter = new System.Windows.EventSetter();              eventSetter.Event = System.Windows.UIElement.PreviewMouseLeftButtonDownEvent;                            #line 127 "..\..\..\OpenWith.xaml"              eventSetter.Handler = new System.Windows.Input.MouseButtonEventHandler(this.OnMoreInfoImageMouseDown);                            #line default              #line hidden              ((System.Windows.Style)(target)).Setters.Add(eventSetter);              eventSetter = new System.Windows.EventSetter();              eventSetter.Event = System.Windows.UIElement.PreviewTouchDownEvent;                            #line 128 "..\..\..\OpenWith.xaml"              eventSetter.Handler = new System.EventHandler<System.Windows.Input.TouchEventArgs>(this.OnMoreInfoImageTouched);                            #line default              #line hidden              ((System.Windows.Style)(target)).Setters.Add(eventSetter);              break;              }
Magic Number,WindowsTweaker,OpenWith,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\OpenWith.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 3:                            #line 52 "..\..\..\OpenWith.xaml"              ((WPFSpark.ToggleSwitch)(target)).Checked += new System.Windows.RoutedEventHandler(this.OnToggleButtonChecked);                            #line default              #line hidden                            #line 53 "..\..\..\OpenWith.xaml"              ((WPFSpark.ToggleSwitch)(target)).Unchecked += new System.Windows.RoutedEventHandler(this.OnToggleButtonUnchecked);                            #line default              #line hidden              break;              case 4:                            #line 113 "..\..\..\OpenWith.xaml"              ((System.Windows.Controls.Image)(target)).PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.OnMoreInfoImageMouseDown);                            #line default              #line hidden              break;              case 7:              eventSetter = new System.Windows.EventSetter();              eventSetter.Event = System.Windows.UIElement.PreviewMouseLeftButtonDownEvent;                            #line 127 "..\..\..\OpenWith.xaml"              eventSetter.Handler = new System.Windows.Input.MouseButtonEventHandler(this.OnMoreInfoImageMouseDown);                            #line default              #line hidden              ((System.Windows.Style)(target)).Setters.Add(eventSetter);              eventSetter = new System.Windows.EventSetter();              eventSetter.Event = System.Windows.UIElement.PreviewTouchDownEvent;                            #line 128 "..\..\..\OpenWith.xaml"              eventSetter.Handler = new System.EventHandler<System.Windows.Input.TouchEventArgs>(this.OnMoreInfoImageTouched);                            #line default              #line hidden              ((System.Windows.Style)(target)).Setters.Add(eventSetter);              break;              }
Magic Number,WindowsTweaker,ReportError,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\ReportError.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 9 "..\..\..\ReportError.xaml"              ((System.ComponentModel.BackgroundWorker)(target)).RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(this.OnReportErrorWorkerCompleted);                            #line default              #line hidden                            #line 10 "..\..\..\ReportError.xaml"              ((System.ComponentModel.BackgroundWorker)(target)).DoWork += new System.ComponentModel.DoWorkEventHandler(this.OnReportErrorDoWork);                            #line default              #line hidden              return;              case 2:              this.txtErrorMsg = ((System.Windows.Controls.TextBlock)(target));              return;              case 3:              this.progressBar = ((System.Windows.Controls.ProgressBar)(target));              return;              case 4:              this.btnReportError = ((System.Windows.Controls.Button)(target));                            #line 23 "..\..\..\ReportError.xaml"              this.btnReportError.Click += new System.Windows.RoutedEventHandler(this.OnReportErrorButtonClick);                            #line default              #line hidden              return;              case 5:                            #line 25 "..\..\..\ReportError.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnButtonCancelClick);                            #line default              #line hidden              return;              }
Magic Number,WindowsTweaker,ReportError,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\ReportError.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 9 "..\..\..\ReportError.xaml"              ((System.ComponentModel.BackgroundWorker)(target)).RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(this.OnReportErrorWorkerCompleted);                            #line default              #line hidden                            #line 10 "..\..\..\ReportError.xaml"              ((System.ComponentModel.BackgroundWorker)(target)).DoWork += new System.ComponentModel.DoWorkEventHandler(this.OnReportErrorDoWork);                            #line default              #line hidden              return;              case 2:              this.txtErrorMsg = ((System.Windows.Controls.TextBlock)(target));              return;              case 3:              this.progressBar = ((System.Windows.Controls.ProgressBar)(target));              return;              case 4:              this.btnReportError = ((System.Windows.Controls.Button)(target));                            #line 23 "..\..\..\ReportError.xaml"              this.btnReportError.Click += new System.Windows.RoutedEventHandler(this.OnReportErrorButtonClick);                            #line default              #line hidden              return;              case 5:                            #line 25 "..\..\..\ReportError.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnButtonCancelClick);                            #line default              #line hidden              return;              }
Magic Number,WindowsTweaker,ReportError,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\ReportError.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 9 "..\..\..\ReportError.xaml"              ((System.ComponentModel.BackgroundWorker)(target)).RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(this.OnReportErrorWorkerCompleted);                            #line default              #line hidden                            #line 10 "..\..\..\ReportError.xaml"              ((System.ComponentModel.BackgroundWorker)(target)).DoWork += new System.ComponentModel.DoWorkEventHandler(this.OnReportErrorDoWork);                            #line default              #line hidden              return;              case 2:              this.txtErrorMsg = ((System.Windows.Controls.TextBlock)(target));              return;              case 3:              this.progressBar = ((System.Windows.Controls.ProgressBar)(target));              return;              case 4:              this.btnReportError = ((System.Windows.Controls.Button)(target));                            #line 23 "..\..\..\ReportError.xaml"              this.btnReportError.Click += new System.Windows.RoutedEventHandler(this.OnReportErrorButtonClick);                            #line default              #line hidden              return;              case 5:                            #line 25 "..\..\..\ReportError.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnButtonCancelClick);                            #line default              #line hidden              return;              }
Magic Number,WindowsTweaker,ReportError,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\ReportError.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 9 "..\..\..\ReportError.xaml"              ((System.ComponentModel.BackgroundWorker)(target)).RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(this.OnReportErrorWorkerCompleted);                            #line default              #line hidden                            #line 10 "..\..\..\ReportError.xaml"              ((System.ComponentModel.BackgroundWorker)(target)).DoWork += new System.ComponentModel.DoWorkEventHandler(this.OnReportErrorDoWork);                            #line default              #line hidden              return;              case 2:              this.txtErrorMsg = ((System.Windows.Controls.TextBlock)(target));              return;              case 3:              this.progressBar = ((System.Windows.Controls.ProgressBar)(target));              return;              case 4:              this.btnReportError = ((System.Windows.Controls.Button)(target));                            #line 23 "..\..\..\ReportError.xaml"              this.btnReportError.Click += new System.Windows.RoutedEventHandler(this.OnReportErrorButtonClick);                            #line default              #line hidden              return;              case 5:                            #line 25 "..\..\..\ReportError.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnButtonCancelClick);                            #line default              #line hidden              return;              }
Magic Number,WindowsTweaker,StartupManager,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\StartupManager.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\StartupManager.xaml"              ((WindowsTweaker.StartupManager)(target)).Loaded += new System.Windows.RoutedEventHandler(this.OnWindowLoaded);                            #line default              #line hidden                            #line 8 "..\..\..\StartupManager.xaml"              ((WindowsTweaker.StartupManager)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.OnWindowClosing);                            #line default              #line hidden              return;              case 2:                            #line 11 "..\..\..\StartupManager.xaml"              ((System.ComponentModel.BackgroundWorker)(target)).RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(this.OnRunWorkerCompleted);                            #line default              #line hidden                            #line 12 "..\..\..\StartupManager.xaml"              ((System.ComponentModel.BackgroundWorker)(target)).DoWork += new System.ComponentModel.DoWorkEventHandler(this.OnDoWork);                            #line default              #line hidden              return;              case 5:              this.txtLoading = ((System.Windows.Controls.TextBlock)(target));              return;              case 6:              this.lstStartupItems = ((System.Windows.Controls.ListBox)(target));              return;              }
Magic Number,WindowsTweaker,StartupManager,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\StartupManager.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\StartupManager.xaml"              ((WindowsTweaker.StartupManager)(target)).Loaded += new System.Windows.RoutedEventHandler(this.OnWindowLoaded);                            #line default              #line hidden                            #line 8 "..\..\..\StartupManager.xaml"              ((WindowsTweaker.StartupManager)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.OnWindowClosing);                            #line default              #line hidden              return;              case 2:                            #line 11 "..\..\..\StartupManager.xaml"              ((System.ComponentModel.BackgroundWorker)(target)).RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(this.OnRunWorkerCompleted);                            #line default              #line hidden                            #line 12 "..\..\..\StartupManager.xaml"              ((System.ComponentModel.BackgroundWorker)(target)).DoWork += new System.ComponentModel.DoWorkEventHandler(this.OnDoWork);                            #line default              #line hidden              return;              case 5:              this.txtLoading = ((System.Windows.Controls.TextBlock)(target));              return;              case 6:              this.lstStartupItems = ((System.Windows.Controls.ListBox)(target));              return;              }
Magic Number,WindowsTweaker,StartupManager,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\StartupManager.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\StartupManager.xaml"              ((WindowsTweaker.StartupManager)(target)).Loaded += new System.Windows.RoutedEventHandler(this.OnWindowLoaded);                            #line default              #line hidden                            #line 8 "..\..\..\StartupManager.xaml"              ((WindowsTweaker.StartupManager)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.OnWindowClosing);                            #line default              #line hidden              return;              case 2:                            #line 11 "..\..\..\StartupManager.xaml"              ((System.ComponentModel.BackgroundWorker)(target)).RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(this.OnRunWorkerCompleted);                            #line default              #line hidden                            #line 12 "..\..\..\StartupManager.xaml"              ((System.ComponentModel.BackgroundWorker)(target)).DoWork += new System.ComponentModel.DoWorkEventHandler(this.OnDoWork);                            #line default              #line hidden              return;              case 5:              this.txtLoading = ((System.Windows.Controls.TextBlock)(target));              return;              case 6:              this.lstStartupItems = ((System.Windows.Controls.ListBox)(target));              return;              }
Magic Number,WindowsTweaker,StartupManager,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\StartupManager.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 3:                            #line 51 "..\..\..\StartupManager.xaml"              ((WPFSpark.ToggleSwitch)(target)).Checked += new System.Windows.RoutedEventHandler(this.OnToggleButtonChecked);                            #line default              #line hidden                            #line 52 "..\..\..\StartupManager.xaml"              ((WPFSpark.ToggleSwitch)(target)).Unchecked += new System.Windows.RoutedEventHandler(this.OnToggleButtonUnchecked);                            #line default              #line hidden              break;              case 4:                            #line 112 "..\..\..\StartupManager.xaml"              ((System.Windows.Controls.Image)(target)).PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.OnMoreInfoImageMouseDown);                            #line default              #line hidden              break;              case 7:              eventSetter = new System.Windows.EventSetter();              eventSetter.Event = System.Windows.UIElement.PreviewMouseLeftButtonDownEvent;                            #line 127 "..\..\..\StartupManager.xaml"              eventSetter.Handler = new System.Windows.Input.MouseButtonEventHandler(this.OnMoreInfoImageMouseDown);                            #line default              #line hidden              ((System.Windows.Style)(target)).Setters.Add(eventSetter);              eventSetter = new System.Windows.EventSetter();              eventSetter.Event = System.Windows.UIElement.PreviewTouchDownEvent;                            #line 128 "..\..\..\StartupManager.xaml"              eventSetter.Handler = new System.EventHandler<System.Windows.Input.TouchEventArgs>(this.OnMoreInfoImageTouched);                            #line default              #line hidden              ((System.Windows.Style)(target)).Setters.Add(eventSetter);              break;              }
Magic Number,WindowsTweaker,StartupManager,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\StartupManager.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 3:                            #line 51 "..\..\..\StartupManager.xaml"              ((WPFSpark.ToggleSwitch)(target)).Checked += new System.Windows.RoutedEventHandler(this.OnToggleButtonChecked);                            #line default              #line hidden                            #line 52 "..\..\..\StartupManager.xaml"              ((WPFSpark.ToggleSwitch)(target)).Unchecked += new System.Windows.RoutedEventHandler(this.OnToggleButtonUnchecked);                            #line default              #line hidden              break;              case 4:                            #line 112 "..\..\..\StartupManager.xaml"              ((System.Windows.Controls.Image)(target)).PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.OnMoreInfoImageMouseDown);                            #line default              #line hidden              break;              case 7:              eventSetter = new System.Windows.EventSetter();              eventSetter.Event = System.Windows.UIElement.PreviewMouseLeftButtonDownEvent;                            #line 127 "..\..\..\StartupManager.xaml"              eventSetter.Handler = new System.Windows.Input.MouseButtonEventHandler(this.OnMoreInfoImageMouseDown);                            #line default              #line hidden              ((System.Windows.Style)(target)).Setters.Add(eventSetter);              eventSetter = new System.Windows.EventSetter();              eventSetter.Event = System.Windows.UIElement.PreviewTouchDownEvent;                            #line 128 "..\..\..\StartupManager.xaml"              eventSetter.Handler = new System.EventHandler<System.Windows.Input.TouchEventArgs>(this.OnMoreInfoImageTouched);                            #line default              #line hidden              ((System.Windows.Style)(target)).Setters.Add(eventSetter);              break;              }
Magic Number,WindowsTweaker,StartupManager,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\StartupManager.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 3:                            #line 51 "..\..\..\StartupManager.xaml"              ((WPFSpark.ToggleSwitch)(target)).Checked += new System.Windows.RoutedEventHandler(this.OnToggleButtonChecked);                            #line default              #line hidden                            #line 52 "..\..\..\StartupManager.xaml"              ((WPFSpark.ToggleSwitch)(target)).Unchecked += new System.Windows.RoutedEventHandler(this.OnToggleButtonUnchecked);                            #line default              #line hidden              break;              case 4:                            #line 112 "..\..\..\StartupManager.xaml"              ((System.Windows.Controls.Image)(target)).PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.OnMoreInfoImageMouseDown);                            #line default              #line hidden              break;              case 7:              eventSetter = new System.Windows.EventSetter();              eventSetter.Event = System.Windows.UIElement.PreviewMouseLeftButtonDownEvent;                            #line 127 "..\..\..\StartupManager.xaml"              eventSetter.Handler = new System.Windows.Input.MouseButtonEventHandler(this.OnMoreInfoImageMouseDown);                            #line default              #line hidden              ((System.Windows.Style)(target)).Setters.Add(eventSetter);              eventSetter = new System.Windows.EventSetter();              eventSetter.Event = System.Windows.UIElement.PreviewTouchDownEvent;                            #line 128 "..\..\..\StartupManager.xaml"              eventSetter.Handler = new System.EventHandler<System.Windows.Input.TouchEventArgs>(this.OnMoreInfoImageTouched);                            #line default              #line hidden              ((System.Windows.Style)(target)).Setters.Add(eventSetter);              break;              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadExplorerTab,The following statement contains a magic number: if (_windowsOs < WindowsVer.Windows.Blue) {                  using (RegistryKey hkcuCvExplorer = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer")) {                      int showDriveLetterVal = (int)hkcuCvExplorer.GetValue(Constants.ShowDriveLetters' 0);                      switch (showDriveLetterVal) {                          case 0:                              rbtnShowDriveLetterAfterName.IsChecked = true;                              break;                            case 2:                              rbtnHideDriveLetter.IsChecked = true;                              break;                            case 4:                              rbtnShowDriveLetterBeforeName.IsChecked = true;                              break;                            default:                              rbtnShowDriveLetterAfterName.IsChecked = true;                              break;                      }                  }              } else {                  rbtnShowDriveLetterAfterName.IsEnabled = rbtnHideDriveLetter.IsEnabled = rbtnShowDriveLetterBeforeName.IsEnabled = false;                  txtDriveLetterDisplay.Text += " " + GetResourceString("OnlyWin8AndBelow");              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadExplorerTab,The following statement contains a magic number: if (_windowsOs < WindowsVer.Windows.Blue) {                  using (RegistryKey hkcuCvExplorer = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer")) {                      int showDriveLetterVal = (int)hkcuCvExplorer.GetValue(Constants.ShowDriveLetters' 0);                      switch (showDriveLetterVal) {                          case 0:                              rbtnShowDriveLetterAfterName.IsChecked = true;                              break;                            case 2:                              rbtnHideDriveLetter.IsChecked = true;                              break;                            case 4:                              rbtnShowDriveLetterBeforeName.IsChecked = true;                              break;                            default:                              rbtnShowDriveLetterAfterName.IsChecked = true;                              break;                      }                  }              } else {                  rbtnShowDriveLetterAfterName.IsEnabled = rbtnHideDriveLetter.IsEnabled = rbtnShowDriveLetterBeforeName.IsEnabled = false;                  txtDriveLetterDisplay.Text += " " + GetResourceString("OnlyWin8AndBelow");              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromExplorer,The following statement contains a magic number: if (_windowsOs < WindowsVer.Windows.Blue) {                  using (RegistryKey hkcuCvExplorer = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer")) {                      int val = 0;                      if (rbtnShowDriveLetterAfterName.IsChecked == true) {                          val = 0;                      } else if (rbtnHideDriveLetter.IsChecked == true) {                          val = 2;                      } else if (rbtnShowDriveLetterBeforeName.IsChecked == true) {                          val = 4;                      } else {                          val = 0;                      }                      hkcuCvExplorer.SetValue(Constants.ShowDriveLetters' val);                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromExplorer,The following statement contains a magic number: if (_windowsOs < WindowsVer.Windows.Blue) {                  using (RegistryKey hkcuCvExplorer = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer")) {                      int val = 0;                      if (rbtnShowDriveLetterAfterName.IsChecked == true) {                          val = 0;                      } else if (rbtnHideDriveLetter.IsChecked == true) {                          val = 2;                      } else if (rbtnShowDriveLetterBeforeName.IsChecked == true) {                          val = 4;                      } else {                          val = 0;                      }                      hkcuCvExplorer.SetValue(Constants.ShowDriveLetters' val);                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromExplorer,The following statement contains a magic number: using (RegistryKey hkcuExAdvanced = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced")) {                  // Advanced                  hkcuExAdvanced.SetValue(chkShowMenuBar' Constants.AlwaysShowMenu);                  hkcuExAdvanced.SetValue(chkHideExtension' Constants.HideFileExt);                  hkcuExAdvanced.SetValue(chkSelectItems' Constants.AutoChkSelect);                    int val = chkShowHiddenFilesFolders.IsChecked == true ? 1 : 2;                  hkcuExAdvanced.SetValue(Constants.Hidden' val);                    hkcuExAdvanced.SetValue(chkRestoreFoldersAtLogin' Constants.PersistBrowsers);                  hkcuExAdvanced.SetValue(chkShowOSfiles' Constants.SuperHidden);                  hkcuExAdvanced.SetValue(chkShowNtfsInColor' Constants.CompressedColor);                    // Properties                  hkcuExAdvanced.SetValue(chkHideSecurity' Constants.NoSecurityTab);                  hkcuExAdvanced.SetValue(chkShowHideCustomize' Constants.NoCustomizeTab);              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadSystemTab,The following statement contains a magic number: using (RegistryKey hkcuDesktop = _hkcu.CreateSubKey(@"Control Panel\Desktop")) {                  //Shutdown Configuration                  string val;                  try {                      val = (string) hkcuDesktop.GetValue(Constants.AutoEndTasks);                      rbtnShutdownImmediately.IsChecked = Utils.StringToBool(val);                  }                  catch (InvalidCastException) {                      rbtnShutdownImmediately.Visibility = Visibility.Collapsed;                  }                    try {                      val = (string) hkcuDesktop.GetValue(Constants.WaitToKillAppTimeout);                  }                  catch (InvalidCastException) {                      val = Utils.RepairAsStringFromInt(hkcuDesktop' Constants.WaitToKillAppTimeout);                  }                  if (!String.IsNullOrEmpty(val)) {                      try {                          nudAppKillTimeout.Value = (int) Double.Parse(val);                      }                      catch (InvalidCastException) {                          nudAppKillTimeout.Value = 4000;                      }                      catch (FormatException) {                          // Even if there's a format exception' then set it to default                          // Exception can happen' if there's a alpanumeric string as value o_O                          nudAppKillTimeout.Value = 4000;                      }                      rbtnShutdownAfterWaiting.IsChecked = !rbtnShutdownImmediately.IsChecked;                  }                  else {                      if (rbtnShutdownImmediately.IsChecked != true)                          rbtnShutdownAfterWaiting.IsChecked = true;                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadSystemTab,The following statement contains a magic number: using (RegistryKey hkcuDesktop = _hkcu.CreateSubKey(@"Control Panel\Desktop")) {                  //Shutdown Configuration                  string val;                  try {                      val = (string) hkcuDesktop.GetValue(Constants.AutoEndTasks);                      rbtnShutdownImmediately.IsChecked = Utils.StringToBool(val);                  }                  catch (InvalidCastException) {                      rbtnShutdownImmediately.Visibility = Visibility.Collapsed;                  }                    try {                      val = (string) hkcuDesktop.GetValue(Constants.WaitToKillAppTimeout);                  }                  catch (InvalidCastException) {                      val = Utils.RepairAsStringFromInt(hkcuDesktop' Constants.WaitToKillAppTimeout);                  }                  if (!String.IsNullOrEmpty(val)) {                      try {                          nudAppKillTimeout.Value = (int) Double.Parse(val);                      }                      catch (InvalidCastException) {                          nudAppKillTimeout.Value = 4000;                      }                      catch (FormatException) {                          // Even if there's a format exception' then set it to default                          // Exception can happen' if there's a alpanumeric string as value o_O                          nudAppKillTimeout.Value = 4000;                      }                      rbtnShutdownAfterWaiting.IsChecked = !rbtnShutdownImmediately.IsChecked;                  }                  else {                      if (rbtnShutdownImmediately.IsChecked != true)                          rbtnShutdownAfterWaiting.IsChecked = true;                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromSystem,The following statement contains a magic number: using (RegistryKey hklmWinInstaller = _hklm.CreateSubKey(@"Software\Policies\Microsoft\Windows\Installer")) {                  // Windows Installer                  if (chkDisableWinInstaller.IsChecked == true) {                      hklmWinInstaller.SetValue(Constants.DisableMsi' 2);                  } else {                      hklmWinInstaller.DeleteValue(Constants.DisableMsi' false);                  }                    if (chkElevatedInstall.IsChecked == true) {                      hklmWinInstaller.SetValue(Constants.AlwaysInstallElevated' 1);                  } else {                      hklmWinInstaller.DeleteValue(Constants.AlwaysInstallElevated' false);                  }                    if (chkDisableSysRestoreInstall.IsChecked == true) {                      hklmWinInstaller.SetValue(Constants.LimitSystemRestore' 1);                  } else {                      hklmWinInstaller.DeleteValue(Constants.LimitSystemRestore' false);                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadDisplayTab,The following statement contains a magic number: using (RegistryKey hkcuDesktop = _hkcu.CreateSubKey(@"Control Panel\Desktop")) {                  chkShowWindowDrag.SetCheckedStateFromString(hkcuDesktop' Constants.DragFullWin);                  chkWindowVersion.SetCheckedState(hkcuDesktop' Constants.PaintDesktopVer);                    // Alt-Tab                  iudAltTabRow.SetValueFromString(hkcuDesktop' Constants.SwitchCols' "7"' 15' 1);                  iudNumAltTabRow.SetValueFromString(hkcuDesktop' Constants.SwitchRows' "3"' 10' 2);              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadDisplayTab,The following statement contains a magic number: using (RegistryKey hkcuDesktop = _hkcu.CreateSubKey(@"Control Panel\Desktop")) {                  chkShowWindowDrag.SetCheckedStateFromString(hkcuDesktop' Constants.DragFullWin);                  chkWindowVersion.SetCheckedState(hkcuDesktop' Constants.PaintDesktopVer);                    // Alt-Tab                  iudAltTabRow.SetValueFromString(hkcuDesktop' Constants.SwitchCols' "7"' 15' 1);                  iudNumAltTabRow.SetValueFromString(hkcuDesktop' Constants.SwitchRows' "3"' 10' 2);              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadDisplayTab,The following statement contains a magic number: using (RegistryKey hkcuDesktop = _hkcu.CreateSubKey(@"Control Panel\Desktop")) {                  chkShowWindowDrag.SetCheckedStateFromString(hkcuDesktop' Constants.DragFullWin);                  chkWindowVersion.SetCheckedState(hkcuDesktop' Constants.PaintDesktopVer);                    // Alt-Tab                  iudAltTabRow.SetValueFromString(hkcuDesktop' Constants.SwitchCols' "7"' 15' 1);                  iudNumAltTabRow.SetValueFromString(hkcuDesktop' Constants.SwitchRows' "3"' 10' 2);              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadDisplayTab,The following statement contains a magic number: using (RegistryKey hkcuColors = _hkcu.CreateSubKey(@"Control Panel\Colors")) {                  string val = (string) hkcuColors.GetValue(Constants.SelectionColor);                  if (!String.IsNullOrEmpty(val)) {                      string[] rgb = val.Split(' ');                      _selectionColor = rgb.Length == 3 ? Color.FromRgb(Byte.Parse(rgb[0])' Byte.Parse(rgb[1])' Byte.Parse(rgb[2])) : _defaultSelectionColor;                  } else {                      _selectionColor = _defaultSelectionColor;                  }                  rectSelectionColor.Fill = new SolidColorBrush(_selectionColor);              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadDisplayTab,The following statement contains a magic number: using (RegistryKey hkcuColors = _hkcu.CreateSubKey(@"Control Panel\Colors")) {                  string val = (string) hkcuColors.GetValue(Constants.SelectionColor);                  if (!String.IsNullOrEmpty(val)) {                      string[] rgb = val.Split(' ');                      _selectionColor = rgb.Length == 3 ? Color.FromRgb(Byte.Parse(rgb[0])' Byte.Parse(rgb[1])' Byte.Parse(rgb[2])) : _defaultSelectionColor;                  } else {                      _selectionColor = _defaultSelectionColor;                  }                  rectSelectionColor.Fill = new SolidColorBrush(_selectionColor);              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadPlacesTab,The following statement contains a magic number: if (_windowsOs <= WindowsVer.Windows.Seven) {                  using (RegistryKey hkcuExAdvanced = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced")) {                      int val = (int) hkcuExAdvanced.GetValue(Constants.StartPowerBtnAction' 2);                      switch (val) {                          case 2:                              cmboBxPowerBtnAction.SelectedIndex = 0;                              break;                          case 64:                              cmboBxPowerBtnAction.SelectedIndex = 1;                              break;                          case 16:                              cmboBxPowerBtnAction.SelectedIndex = 2;                              break;                          case 4:                              cmboBxPowerBtnAction.SelectedIndex = 3;                              break;                          case 512:                              cmboBxPowerBtnAction.SelectedIndex = 4;                              break;                          case 1:                              cmboBxPowerBtnAction.SelectedIndex = 5;                              break;                          case 256:                              cmboBxPowerBtnAction.SelectedIndex = 6;                              break;                      }                  }              } else {                  lblPowerBtnAction.Text += " " + GetResourceString("Only7AndBelow");                  cmboBxPowerBtnAction.IsEnabled = false;              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadPlacesTab,The following statement contains a magic number: if (_windowsOs <= WindowsVer.Windows.Seven) {                  using (RegistryKey hkcuExAdvanced = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced")) {                      int val = (int) hkcuExAdvanced.GetValue(Constants.StartPowerBtnAction' 2);                      switch (val) {                          case 2:                              cmboBxPowerBtnAction.SelectedIndex = 0;                              break;                          case 64:                              cmboBxPowerBtnAction.SelectedIndex = 1;                              break;                          case 16:                              cmboBxPowerBtnAction.SelectedIndex = 2;                              break;                          case 4:                              cmboBxPowerBtnAction.SelectedIndex = 3;                              break;                          case 512:                              cmboBxPowerBtnAction.SelectedIndex = 4;                              break;                          case 1:                              cmboBxPowerBtnAction.SelectedIndex = 5;                              break;                          case 256:                              cmboBxPowerBtnAction.SelectedIndex = 6;                              break;                      }                  }              } else {                  lblPowerBtnAction.Text += " " + GetResourceString("Only7AndBelow");                  cmboBxPowerBtnAction.IsEnabled = false;              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadPlacesTab,The following statement contains a magic number: if (_windowsOs <= WindowsVer.Windows.Seven) {                  using (RegistryKey hkcuExAdvanced = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced")) {                      int val = (int) hkcuExAdvanced.GetValue(Constants.StartPowerBtnAction' 2);                      switch (val) {                          case 2:                              cmboBxPowerBtnAction.SelectedIndex = 0;                              break;                          case 64:                              cmboBxPowerBtnAction.SelectedIndex = 1;                              break;                          case 16:                              cmboBxPowerBtnAction.SelectedIndex = 2;                              break;                          case 4:                              cmboBxPowerBtnAction.SelectedIndex = 3;                              break;                          case 512:                              cmboBxPowerBtnAction.SelectedIndex = 4;                              break;                          case 1:                              cmboBxPowerBtnAction.SelectedIndex = 5;                              break;                          case 256:                              cmboBxPowerBtnAction.SelectedIndex = 6;                              break;                      }                  }              } else {                  lblPowerBtnAction.Text += " " + GetResourceString("Only7AndBelow");                  cmboBxPowerBtnAction.IsEnabled = false;              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadPlacesTab,The following statement contains a magic number: if (_windowsOs <= WindowsVer.Windows.Seven) {                  using (RegistryKey hkcuExAdvanced = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced")) {                      int val = (int) hkcuExAdvanced.GetValue(Constants.StartPowerBtnAction' 2);                      switch (val) {                          case 2:                              cmboBxPowerBtnAction.SelectedIndex = 0;                              break;                          case 64:                              cmboBxPowerBtnAction.SelectedIndex = 1;                              break;                          case 16:                              cmboBxPowerBtnAction.SelectedIndex = 2;                              break;                          case 4:                              cmboBxPowerBtnAction.SelectedIndex = 3;                              break;                          case 512:                              cmboBxPowerBtnAction.SelectedIndex = 4;                              break;                          case 1:                              cmboBxPowerBtnAction.SelectedIndex = 5;                              break;                          case 256:                              cmboBxPowerBtnAction.SelectedIndex = 6;                              break;                      }                  }              } else {                  lblPowerBtnAction.Text += " " + GetResourceString("Only7AndBelow");                  cmboBxPowerBtnAction.IsEnabled = false;              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadPlacesTab,The following statement contains a magic number: if (_windowsOs <= WindowsVer.Windows.Seven) {                  using (RegistryKey hkcuExAdvanced = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced")) {                      int val = (int) hkcuExAdvanced.GetValue(Constants.StartPowerBtnAction' 2);                      switch (val) {                          case 2:                              cmboBxPowerBtnAction.SelectedIndex = 0;                              break;                          case 64:                              cmboBxPowerBtnAction.SelectedIndex = 1;                              break;                          case 16:                              cmboBxPowerBtnAction.SelectedIndex = 2;                              break;                          case 4:                              cmboBxPowerBtnAction.SelectedIndex = 3;                              break;                          case 512:                              cmboBxPowerBtnAction.SelectedIndex = 4;                              break;                          case 1:                              cmboBxPowerBtnAction.SelectedIndex = 5;                              break;                          case 256:                              cmboBxPowerBtnAction.SelectedIndex = 6;                              break;                      }                  }              } else {                  lblPowerBtnAction.Text += " " + GetResourceString("Only7AndBelow");                  cmboBxPowerBtnAction.IsEnabled = false;              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadPlacesTab,The following statement contains a magic number: if (_windowsOs <= WindowsVer.Windows.Seven) {                  using (RegistryKey hkcuExAdvanced = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced")) {                      int val = (int) hkcuExAdvanced.GetValue(Constants.StartPowerBtnAction' 2);                      switch (val) {                          case 2:                              cmboBxPowerBtnAction.SelectedIndex = 0;                              break;                          case 64:                              cmboBxPowerBtnAction.SelectedIndex = 1;                              break;                          case 16:                              cmboBxPowerBtnAction.SelectedIndex = 2;                              break;                          case 4:                              cmboBxPowerBtnAction.SelectedIndex = 3;                              break;                          case 512:                              cmboBxPowerBtnAction.SelectedIndex = 4;                              break;                          case 1:                              cmboBxPowerBtnAction.SelectedIndex = 5;                              break;                          case 256:                              cmboBxPowerBtnAction.SelectedIndex = 6;                              break;                      }                  }              } else {                  lblPowerBtnAction.Text += " " + GetResourceString("Only7AndBelow");                  cmboBxPowerBtnAction.IsEnabled = false;              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadPlacesTab,The following statement contains a magic number: if (_windowsOs <= WindowsVer.Windows.Seven) {                  using (RegistryKey hkcuExAdvanced = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced")) {                      int val = (int) hkcuExAdvanced.GetValue(Constants.StartPowerBtnAction' 2);                      switch (val) {                          case 2:                              cmboBxPowerBtnAction.SelectedIndex = 0;                              break;                          case 64:                              cmboBxPowerBtnAction.SelectedIndex = 1;                              break;                          case 16:                              cmboBxPowerBtnAction.SelectedIndex = 2;                              break;                          case 4:                              cmboBxPowerBtnAction.SelectedIndex = 3;                              break;                          case 512:                              cmboBxPowerBtnAction.SelectedIndex = 4;                              break;                          case 1:                              cmboBxPowerBtnAction.SelectedIndex = 5;                              break;                          case 256:                              cmboBxPowerBtnAction.SelectedIndex = 6;                              break;                      }                  }              } else {                  lblPowerBtnAction.Text += " " + GetResourceString("Only7AndBelow");                  cmboBxPowerBtnAction.IsEnabled = false;              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadPlacesTab,The following statement contains a magic number: if (_windowsOs <= WindowsVer.Windows.Seven) {                  using (RegistryKey hkcuExAdvanced = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced")) {                      int val = (int) hkcuExAdvanced.GetValue(Constants.StartPowerBtnAction' 2);                      switch (val) {                          case 2:                              cmboBxPowerBtnAction.SelectedIndex = 0;                              break;                          case 64:                              cmboBxPowerBtnAction.SelectedIndex = 1;                              break;                          case 16:                              cmboBxPowerBtnAction.SelectedIndex = 2;                              break;                          case 4:                              cmboBxPowerBtnAction.SelectedIndex = 3;                              break;                          case 512:                              cmboBxPowerBtnAction.SelectedIndex = 4;                              break;                          case 1:                              cmboBxPowerBtnAction.SelectedIndex = 5;                              break;                          case 256:                              cmboBxPowerBtnAction.SelectedIndex = 6;                              break;                      }                  }              } else {                  lblPowerBtnAction.Text += " " + GetResourceString("Only7AndBelow");                  cmboBxPowerBtnAction.IsEnabled = false;              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadPlacesTab,The following statement contains a magic number: if (_windowsOs <= WindowsVer.Windows.Seven) {                  using (RegistryKey hkcuExAdvanced = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced")) {                      int val = (int) hkcuExAdvanced.GetValue(Constants.StartPowerBtnAction' 2);                      switch (val) {                          case 2:                              cmboBxPowerBtnAction.SelectedIndex = 0;                              break;                          case 64:                              cmboBxPowerBtnAction.SelectedIndex = 1;                              break;                          case 16:                              cmboBxPowerBtnAction.SelectedIndex = 2;                              break;                          case 4:                              cmboBxPowerBtnAction.SelectedIndex = 3;                              break;                          case 512:                              cmboBxPowerBtnAction.SelectedIndex = 4;                              break;                          case 1:                              cmboBxPowerBtnAction.SelectedIndex = 5;                              break;                          case 256:                              cmboBxPowerBtnAction.SelectedIndex = 6;                              break;                      }                  }              } else {                  lblPowerBtnAction.Text += " " + GetResourceString("Only7AndBelow");                  cmboBxPowerBtnAction.IsEnabled = false;              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadPlacesTab,The following statement contains a magic number: if (_windowsOs <= WindowsVer.Windows.Seven) {                  using (RegistryKey hkcuExAdvanced = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced")) {                      int val = (int) hkcuExAdvanced.GetValue(Constants.StartPowerBtnAction' 2);                      switch (val) {                          case 2:                              cmboBxPowerBtnAction.SelectedIndex = 0;                              break;                          case 64:                              cmboBxPowerBtnAction.SelectedIndex = 1;                              break;                          case 16:                              cmboBxPowerBtnAction.SelectedIndex = 2;                              break;                          case 4:                              cmboBxPowerBtnAction.SelectedIndex = 3;                              break;                          case 512:                              cmboBxPowerBtnAction.SelectedIndex = 4;                              break;                          case 1:                              cmboBxPowerBtnAction.SelectedIndex = 5;                              break;                          case 256:                              cmboBxPowerBtnAction.SelectedIndex = 6;                              break;                      }                  }              } else {                  lblPowerBtnAction.Text += " " + GetResourceString("Only7AndBelow");                  cmboBxPowerBtnAction.IsEnabled = false;              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadPlacesTab,The following statement contains a magic number: if (_windowsOs <= WindowsVer.Windows.Seven) {                  using (RegistryKey hkcuExAdvanced = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced")) {                      int val = (int) hkcuExAdvanced.GetValue(Constants.StartPowerBtnAction' 2);                      switch (val) {                          case 2:                              cmboBxPowerBtnAction.SelectedIndex = 0;                              break;                          case 64:                              cmboBxPowerBtnAction.SelectedIndex = 1;                              break;                          case 16:                              cmboBxPowerBtnAction.SelectedIndex = 2;                              break;                          case 4:                              cmboBxPowerBtnAction.SelectedIndex = 3;                              break;                          case 512:                              cmboBxPowerBtnAction.SelectedIndex = 4;                              break;                          case 1:                              cmboBxPowerBtnAction.SelectedIndex = 5;                              break;                          case 256:                              cmboBxPowerBtnAction.SelectedIndex = 6;                              break;                      }                  }              } else {                  lblPowerBtnAction.Text += " " + GetResourceString("Only7AndBelow");                  cmboBxPowerBtnAction.IsEnabled = false;              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadPlacesTab,The following statement contains a magic number: if (_windowsOs <= WindowsVer.Windows.Seven) {                  using (RegistryKey hkcuExAdvanced = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced")) {                      int val = (int) hkcuExAdvanced.GetValue(Constants.StartPowerBtnAction' 2);                      switch (val) {                          case 2:                              cmboBxPowerBtnAction.SelectedIndex = 0;                              break;                          case 64:                              cmboBxPowerBtnAction.SelectedIndex = 1;                              break;                          case 16:                              cmboBxPowerBtnAction.SelectedIndex = 2;                              break;                          case 4:                              cmboBxPowerBtnAction.SelectedIndex = 3;                              break;                          case 512:                              cmboBxPowerBtnAction.SelectedIndex = 4;                              break;                          case 1:                              cmboBxPowerBtnAction.SelectedIndex = 5;                              break;                          case 256:                              cmboBxPowerBtnAction.SelectedIndex = 6;                              break;                      }                  }              } else {                  lblPowerBtnAction.Text += " " + GetResourceString("Only7AndBelow");                  cmboBxPowerBtnAction.IsEnabled = false;              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromPlaces,The following statement contains a magic number: if (_windowsOs <= WindowsVer.Windows.Seven) {                  int val = cmboBxPowerBtnAction.SelectedIndex;                  using (RegistryKey hkcuExAdvanced = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced")) {                      switch (val) {                          case 0:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 2);                              break;                          case 1:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 64);                              break;                          case 2:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 16);                              break;                          case 3:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 4);                              break;                          case 4:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 512);                              break;                          case 5:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 1);                              break;                          case 6:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 256);                              break;                      }                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromPlaces,The following statement contains a magic number: if (_windowsOs <= WindowsVer.Windows.Seven) {                  int val = cmboBxPowerBtnAction.SelectedIndex;                  using (RegistryKey hkcuExAdvanced = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced")) {                      switch (val) {                          case 0:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 2);                              break;                          case 1:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 64);                              break;                          case 2:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 16);                              break;                          case 3:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 4);                              break;                          case 4:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 512);                              break;                          case 5:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 1);                              break;                          case 6:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 256);                              break;                      }                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromPlaces,The following statement contains a magic number: if (_windowsOs <= WindowsVer.Windows.Seven) {                  int val = cmboBxPowerBtnAction.SelectedIndex;                  using (RegistryKey hkcuExAdvanced = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced")) {                      switch (val) {                          case 0:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 2);                              break;                          case 1:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 64);                              break;                          case 2:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 16);                              break;                          case 3:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 4);                              break;                          case 4:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 512);                              break;                          case 5:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 1);                              break;                          case 6:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 256);                              break;                      }                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromPlaces,The following statement contains a magic number: if (_windowsOs <= WindowsVer.Windows.Seven) {                  int val = cmboBxPowerBtnAction.SelectedIndex;                  using (RegistryKey hkcuExAdvanced = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced")) {                      switch (val) {                          case 0:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 2);                              break;                          case 1:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 64);                              break;                          case 2:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 16);                              break;                          case 3:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 4);                              break;                          case 4:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 512);                              break;                          case 5:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 1);                              break;                          case 6:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 256);                              break;                      }                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromPlaces,The following statement contains a magic number: if (_windowsOs <= WindowsVer.Windows.Seven) {                  int val = cmboBxPowerBtnAction.SelectedIndex;                  using (RegistryKey hkcuExAdvanced = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced")) {                      switch (val) {                          case 0:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 2);                              break;                          case 1:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 64);                              break;                          case 2:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 16);                              break;                          case 3:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 4);                              break;                          case 4:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 512);                              break;                          case 5:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 1);                              break;                          case 6:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 256);                              break;                      }                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromPlaces,The following statement contains a magic number: if (_windowsOs <= WindowsVer.Windows.Seven) {                  int val = cmboBxPowerBtnAction.SelectedIndex;                  using (RegistryKey hkcuExAdvanced = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced")) {                      switch (val) {                          case 0:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 2);                              break;                          case 1:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 64);                              break;                          case 2:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 16);                              break;                          case 3:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 4);                              break;                          case 4:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 512);                              break;                          case 5:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 1);                              break;                          case 6:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 256);                              break;                      }                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromPlaces,The following statement contains a magic number: if (_windowsOs <= WindowsVer.Windows.Seven) {                  int val = cmboBxPowerBtnAction.SelectedIndex;                  using (RegistryKey hkcuExAdvanced = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced")) {                      switch (val) {                          case 0:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 2);                              break;                          case 1:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 64);                              break;                          case 2:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 16);                              break;                          case 3:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 4);                              break;                          case 4:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 512);                              break;                          case 5:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 1);                              break;                          case 6:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 256);                              break;                      }                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromPlaces,The following statement contains a magic number: if (_windowsOs <= WindowsVer.Windows.Seven) {                  int val = cmboBxPowerBtnAction.SelectedIndex;                  using (RegistryKey hkcuExAdvanced = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced")) {                      switch (val) {                          case 0:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 2);                              break;                          case 1:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 64);                              break;                          case 2:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 16);                              break;                          case 3:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 4);                              break;                          case 4:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 512);                              break;                          case 5:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 1);                              break;                          case 6:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 256);                              break;                      }                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromPlaces,The following statement contains a magic number: if (_windowsOs <= WindowsVer.Windows.Seven) {                  int val = cmboBxPowerBtnAction.SelectedIndex;                  using (RegistryKey hkcuExAdvanced = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced")) {                      switch (val) {                          case 0:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 2);                              break;                          case 1:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 64);                              break;                          case 2:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 16);                              break;                          case 3:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 4);                              break;                          case 4:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 512);                              break;                          case 5:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 1);                              break;                          case 6:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 256);                              break;                      }                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromPlaces,The following statement contains a magic number: if (_windowsOs <= WindowsVer.Windows.Seven) {                  int val = cmboBxPowerBtnAction.SelectedIndex;                  using (RegistryKey hkcuExAdvanced = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced")) {                      switch (val) {                          case 0:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 2);                              break;                          case 1:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 64);                              break;                          case 2:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 16);                              break;                          case 3:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 4);                              break;                          case 4:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 512);                              break;                          case 5:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 1);                              break;                          case 6:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 256);                              break;                      }                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromPlaces,The following statement contains a magic number: if (_windowsOs <= WindowsVer.Windows.Seven) {                  int val = cmboBxPowerBtnAction.SelectedIndex;                  using (RegistryKey hkcuExAdvanced = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced")) {                      switch (val) {                          case 0:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 2);                              break;                          case 1:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 64);                              break;                          case 2:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 16);                              break;                          case 3:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 4);                              break;                          case 4:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 512);                              break;                          case 5:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 1);                              break;                          case 6:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 256);                              break;                      }                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,OnScheduleShutdownButtonClick,The following statement contains a magic number: if (selectedDateTime.HasValue) {                  string param = null;                  switch (cmboBxShutdownAction.SelectedIndex) {                      case 0: param = "/s";                          break;                      case 1: param = "/r";                          break;                  }                  DateTime nowTime = DateTime.Now;                  TimeSpan gap = selectedDateTime.Value.Subtract(nowTime);                  long timeout = (gap.Days * 86400) + (gap.Hours * 3600) + (gap.Minutes * 60) + gap.Seconds;                  if (timeout >= 0) {                      string shutdwnComd = String.Format("shutdown {0} /t {1}"' param' timeout);                      ProcessWrapper.ExecuteDosCmd(shutdwnComd);                      _message.Success(GetResourceString("ShutdownScheduled") + " " + selectedDateTime.Value.ToString("MMMM d' yyyy ")                           + " " + GetResourceString("At") + " " + selectedDateTime.Value.ToString("hh:mm tt"));                  }                  else {                      _message.Error(GetResourceString("InvalidTimeout"));                  }              }              else {                  _message.Error(GetResourceString("SelectDate"));              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,OnScheduleShutdownButtonClick,The following statement contains a magic number: if (selectedDateTime.HasValue) {                  string param = null;                  switch (cmboBxShutdownAction.SelectedIndex) {                      case 0: param = "/s";                          break;                      case 1: param = "/r";                          break;                  }                  DateTime nowTime = DateTime.Now;                  TimeSpan gap = selectedDateTime.Value.Subtract(nowTime);                  long timeout = (gap.Days * 86400) + (gap.Hours * 3600) + (gap.Minutes * 60) + gap.Seconds;                  if (timeout >= 0) {                      string shutdwnComd = String.Format("shutdown {0} /t {1}"' param' timeout);                      ProcessWrapper.ExecuteDosCmd(shutdwnComd);                      _message.Success(GetResourceString("ShutdownScheduled") + " " + selectedDateTime.Value.ToString("MMMM d' yyyy ")                           + " " + GetResourceString("At") + " " + selectedDateTime.Value.ToString("hh:mm tt"));                  }                  else {                      _message.Error(GetResourceString("InvalidTimeout"));                  }              }              else {                  _message.Error(GetResourceString("SelectDate"));              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,OnScheduleShutdownButtonClick,The following statement contains a magic number: if (selectedDateTime.HasValue) {                  string param = null;                  switch (cmboBxShutdownAction.SelectedIndex) {                      case 0: param = "/s";                          break;                      case 1: param = "/r";                          break;                  }                  DateTime nowTime = DateTime.Now;                  TimeSpan gap = selectedDateTime.Value.Subtract(nowTime);                  long timeout = (gap.Days * 86400) + (gap.Hours * 3600) + (gap.Minutes * 60) + gap.Seconds;                  if (timeout >= 0) {                      string shutdwnComd = String.Format("shutdown {0} /t {1}"' param' timeout);                      ProcessWrapper.ExecuteDosCmd(shutdwnComd);                      _message.Success(GetResourceString("ShutdownScheduled") + " " + selectedDateTime.Value.ToString("MMMM d' yyyy ")                           + " " + GetResourceString("At") + " " + selectedDateTime.Value.ToString("hh:mm tt"));                  }                  else {                      _message.Error(GetResourceString("InvalidTimeout"));                  }              }              else {                  _message.Error(GetResourceString("SelectDate"));              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadFeaturesTab,The following statement contains a magic number: using (RegistryKey hkcuExplorer = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Policies\Explorer")) {                  // Windows DVD Burner                  chkWinDvdBurner.SetCheckedState(hkcuExplorer' Constants.NoDvdBurning' true' true);                                    // AutoPlay                  RegistryKey hkcuAutoplayHandlers = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\AutoplayHandlers");                  RegistryKey hklmCdRom = _hklm.CreateSubKey(@"SYSTEM\CurrentControlSet\services\cdrom");                    int? driveAutoRunVal' disableAutoPlayVal' autoRunVal;                  try {                      driveAutoRunVal = (int?) hkcuExplorer.GetValue(Constants.NoDriveAutoPlay);                  }                  catch (InvalidCastException) {                      driveAutoRunVal = Utils.RepairAsNullableIntFromString(hkcuExplorer' Constants.NoDriveAutoPlay);                  }                  try {                      disableAutoPlayVal = (int?) hkcuAutoplayHandlers.GetValue(Constants.DisableAutoplay);                  }                  catch (InvalidCastException) {                      disableAutoPlayVal = Utils.RepairAsNullableIntFromString(hkcuAutoplayHandlers' Constants.DisableAutoplay);                  }                  try {                      autoRunVal = (int?) hklmCdRom.GetValue(Constants.AutoRun);                  }                  catch (InvalidCastException) {                      autoRunVal = Utils.RepairAsNullableIntFromString(hklmCdRom' Constants.AutoRun);                  }                  if (driveAutoRunVal.HasValue && disableAutoPlayVal.HasValue && autoRunVal.HasValue) {                      if (disableAutoPlayVal == 1 || autoRunVal == 0) {                          rbtnDisableAutoPlay.IsChecked = true;                      } else {                          switch (driveAutoRunVal) {                              case 145:                                  rbtnEnableAutoPlay.IsChecked = true;                                  break;                              case 181:                                  rbtnEnableCdUsbAutoPlay.IsChecked = true;                                  break;                              case 255:                                  rbtnDisableAutoPlay.IsChecked = true;                                  break;                          }                      }                  } else if (!driveAutoRunVal.HasValue && disableAutoPlayVal.HasValue && autoRunVal.HasValue) {                      if (disableAutoPlayVal == 1 || autoRunVal == 0) {                          rbtnDisableAutoPlay.IsChecked = true;                      } else {                          rbtnEnableAutoPlay.IsChecked = true;                      }                  } else if (!driveAutoRunVal.HasValue && !disableAutoPlayVal.HasValue && autoRunVal.HasValue) {                      if (autoRunVal == 1) {                          rbtnEnableAutoPlay.IsChecked = true;                      } else {                          rbtnDisableAutoPlay.IsChecked = true;                      }                  }                  hkcuAutoplayHandlers.Close();                  hklmCdRom.Close();              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadFeaturesTab,The following statement contains a magic number: using (RegistryKey hkcuExplorer = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Policies\Explorer")) {                  // Windows DVD Burner                  chkWinDvdBurner.SetCheckedState(hkcuExplorer' Constants.NoDvdBurning' true' true);                                    // AutoPlay                  RegistryKey hkcuAutoplayHandlers = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\AutoplayHandlers");                  RegistryKey hklmCdRom = _hklm.CreateSubKey(@"SYSTEM\CurrentControlSet\services\cdrom");                    int? driveAutoRunVal' disableAutoPlayVal' autoRunVal;                  try {                      driveAutoRunVal = (int?) hkcuExplorer.GetValue(Constants.NoDriveAutoPlay);                  }                  catch (InvalidCastException) {                      driveAutoRunVal = Utils.RepairAsNullableIntFromString(hkcuExplorer' Constants.NoDriveAutoPlay);                  }                  try {                      disableAutoPlayVal = (int?) hkcuAutoplayHandlers.GetValue(Constants.DisableAutoplay);                  }                  catch (InvalidCastException) {                      disableAutoPlayVal = Utils.RepairAsNullableIntFromString(hkcuAutoplayHandlers' Constants.DisableAutoplay);                  }                  try {                      autoRunVal = (int?) hklmCdRom.GetValue(Constants.AutoRun);                  }                  catch (InvalidCastException) {                      autoRunVal = Utils.RepairAsNullableIntFromString(hklmCdRom' Constants.AutoRun);                  }                  if (driveAutoRunVal.HasValue && disableAutoPlayVal.HasValue && autoRunVal.HasValue) {                      if (disableAutoPlayVal == 1 || autoRunVal == 0) {                          rbtnDisableAutoPlay.IsChecked = true;                      } else {                          switch (driveAutoRunVal) {                              case 145:                                  rbtnEnableAutoPlay.IsChecked = true;                                  break;                              case 181:                                  rbtnEnableCdUsbAutoPlay.IsChecked = true;                                  break;                              case 255:                                  rbtnDisableAutoPlay.IsChecked = true;                                  break;                          }                      }                  } else if (!driveAutoRunVal.HasValue && disableAutoPlayVal.HasValue && autoRunVal.HasValue) {                      if (disableAutoPlayVal == 1 || autoRunVal == 0) {                          rbtnDisableAutoPlay.IsChecked = true;                      } else {                          rbtnEnableAutoPlay.IsChecked = true;                      }                  } else if (!driveAutoRunVal.HasValue && !disableAutoPlayVal.HasValue && autoRunVal.HasValue) {                      if (autoRunVal == 1) {                          rbtnEnableAutoPlay.IsChecked = true;                      } else {                          rbtnDisableAutoPlay.IsChecked = true;                      }                  }                  hkcuAutoplayHandlers.Close();                  hklmCdRom.Close();              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadFeaturesTab,The following statement contains a magic number: using (RegistryKey hkcuExplorer = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Policies\Explorer")) {                  // Windows DVD Burner                  chkWinDvdBurner.SetCheckedState(hkcuExplorer' Constants.NoDvdBurning' true' true);                                    // AutoPlay                  RegistryKey hkcuAutoplayHandlers = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\AutoplayHandlers");                  RegistryKey hklmCdRom = _hklm.CreateSubKey(@"SYSTEM\CurrentControlSet\services\cdrom");                    int? driveAutoRunVal' disableAutoPlayVal' autoRunVal;                  try {                      driveAutoRunVal = (int?) hkcuExplorer.GetValue(Constants.NoDriveAutoPlay);                  }                  catch (InvalidCastException) {                      driveAutoRunVal = Utils.RepairAsNullableIntFromString(hkcuExplorer' Constants.NoDriveAutoPlay);                  }                  try {                      disableAutoPlayVal = (int?) hkcuAutoplayHandlers.GetValue(Constants.DisableAutoplay);                  }                  catch (InvalidCastException) {                      disableAutoPlayVal = Utils.RepairAsNullableIntFromString(hkcuAutoplayHandlers' Constants.DisableAutoplay);                  }                  try {                      autoRunVal = (int?) hklmCdRom.GetValue(Constants.AutoRun);                  }                  catch (InvalidCastException) {                      autoRunVal = Utils.RepairAsNullableIntFromString(hklmCdRom' Constants.AutoRun);                  }                  if (driveAutoRunVal.HasValue && disableAutoPlayVal.HasValue && autoRunVal.HasValue) {                      if (disableAutoPlayVal == 1 || autoRunVal == 0) {                          rbtnDisableAutoPlay.IsChecked = true;                      } else {                          switch (driveAutoRunVal) {                              case 145:                                  rbtnEnableAutoPlay.IsChecked = true;                                  break;                              case 181:                                  rbtnEnableCdUsbAutoPlay.IsChecked = true;                                  break;                              case 255:                                  rbtnDisableAutoPlay.IsChecked = true;                                  break;                          }                      }                  } else if (!driveAutoRunVal.HasValue && disableAutoPlayVal.HasValue && autoRunVal.HasValue) {                      if (disableAutoPlayVal == 1 || autoRunVal == 0) {                          rbtnDisableAutoPlay.IsChecked = true;                      } else {                          rbtnEnableAutoPlay.IsChecked = true;                      }                  } else if (!driveAutoRunVal.HasValue && !disableAutoPlayVal.HasValue && autoRunVal.HasValue) {                      if (autoRunVal == 1) {                          rbtnEnableAutoPlay.IsChecked = true;                      } else {                          rbtnDisableAutoPlay.IsChecked = true;                      }                  }                  hkcuAutoplayHandlers.Close();                  hklmCdRom.Close();              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadFeaturesTab,The following statement contains a magic number: using (RegistryKey hklmAutoUpdate = _hklm.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update")) {                  chkRecommenedUpdates.SetCheckedState(hklmAutoUpdate' Constants.IncludeRecommendedUpdates);                  chkAllowAllInstallUpdate.SetCheckedState(hklmAutoUpdate' Constants.ElevateNonAdmins);                  chkNotifyNewMSSw.SetCheckedState(hklmAutoUpdate' Constants.EnableFeaturedSoftware);                  int? autoUpdateVal = (int?) hklmAutoUpdate.GetValue(Constants.AutoUpdateOptions);                  switch (autoUpdateVal) {                      case 1:                          cmboBxWinUpdate.SelectedIndex = 3;                          break;                      case 2:                          cmboBxWinUpdate.SelectedIndex = 2;                          break;                      case 3:                          cmboBxWinUpdate.SelectedIndex = 1;                          break;                      case 4:                          cmboBxWinUpdate.SelectedIndex = 0;                          break;                      default:                          if (!cmboBxWinUpdate.Items.Contains(Constants.DefaultWindowsUpdateText)) {                              cmboBxWinUpdate.Items.Add(Constants.DefaultWindowsUpdateText);                              cmboBxWinUpdate.SelectedItem = Constants.DefaultWindowsUpdateText;                          }                          break;                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadFeaturesTab,The following statement contains a magic number: using (RegistryKey hklmAutoUpdate = _hklm.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update")) {                  chkRecommenedUpdates.SetCheckedState(hklmAutoUpdate' Constants.IncludeRecommendedUpdates);                  chkAllowAllInstallUpdate.SetCheckedState(hklmAutoUpdate' Constants.ElevateNonAdmins);                  chkNotifyNewMSSw.SetCheckedState(hklmAutoUpdate' Constants.EnableFeaturedSoftware);                  int? autoUpdateVal = (int?) hklmAutoUpdate.GetValue(Constants.AutoUpdateOptions);                  switch (autoUpdateVal) {                      case 1:                          cmboBxWinUpdate.SelectedIndex = 3;                          break;                      case 2:                          cmboBxWinUpdate.SelectedIndex = 2;                          break;                      case 3:                          cmboBxWinUpdate.SelectedIndex = 1;                          break;                      case 4:                          cmboBxWinUpdate.SelectedIndex = 0;                          break;                      default:                          if (!cmboBxWinUpdate.Items.Contains(Constants.DefaultWindowsUpdateText)) {                              cmboBxWinUpdate.Items.Add(Constants.DefaultWindowsUpdateText);                              cmboBxWinUpdate.SelectedItem = Constants.DefaultWindowsUpdateText;                          }                          break;                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadFeaturesTab,The following statement contains a magic number: using (RegistryKey hklmAutoUpdate = _hklm.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update")) {                  chkRecommenedUpdates.SetCheckedState(hklmAutoUpdate' Constants.IncludeRecommendedUpdates);                  chkAllowAllInstallUpdate.SetCheckedState(hklmAutoUpdate' Constants.ElevateNonAdmins);                  chkNotifyNewMSSw.SetCheckedState(hklmAutoUpdate' Constants.EnableFeaturedSoftware);                  int? autoUpdateVal = (int?) hklmAutoUpdate.GetValue(Constants.AutoUpdateOptions);                  switch (autoUpdateVal) {                      case 1:                          cmboBxWinUpdate.SelectedIndex = 3;                          break;                      case 2:                          cmboBxWinUpdate.SelectedIndex = 2;                          break;                      case 3:                          cmboBxWinUpdate.SelectedIndex = 1;                          break;                      case 4:                          cmboBxWinUpdate.SelectedIndex = 0;                          break;                      default:                          if (!cmboBxWinUpdate.Items.Contains(Constants.DefaultWindowsUpdateText)) {                              cmboBxWinUpdate.Items.Add(Constants.DefaultWindowsUpdateText);                              cmboBxWinUpdate.SelectedItem = Constants.DefaultWindowsUpdateText;                          }                          break;                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadFeaturesTab,The following statement contains a magic number: using (RegistryKey hklmAutoUpdate = _hklm.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update")) {                  chkRecommenedUpdates.SetCheckedState(hklmAutoUpdate' Constants.IncludeRecommendedUpdates);                  chkAllowAllInstallUpdate.SetCheckedState(hklmAutoUpdate' Constants.ElevateNonAdmins);                  chkNotifyNewMSSw.SetCheckedState(hklmAutoUpdate' Constants.EnableFeaturedSoftware);                  int? autoUpdateVal = (int?) hklmAutoUpdate.GetValue(Constants.AutoUpdateOptions);                  switch (autoUpdateVal) {                      case 1:                          cmboBxWinUpdate.SelectedIndex = 3;                          break;                      case 2:                          cmboBxWinUpdate.SelectedIndex = 2;                          break;                      case 3:                          cmboBxWinUpdate.SelectedIndex = 1;                          break;                      case 4:                          cmboBxWinUpdate.SelectedIndex = 0;                          break;                      default:                          if (!cmboBxWinUpdate.Items.Contains(Constants.DefaultWindowsUpdateText)) {                              cmboBxWinUpdate.Items.Add(Constants.DefaultWindowsUpdateText);                              cmboBxWinUpdate.SelectedItem = Constants.DefaultWindowsUpdateText;                          }                          break;                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadFeaturesTab,The following statement contains a magic number: using (RegistryKey hklmAutoUpdate = _hklm.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update")) {                  chkRecommenedUpdates.SetCheckedState(hklmAutoUpdate' Constants.IncludeRecommendedUpdates);                  chkAllowAllInstallUpdate.SetCheckedState(hklmAutoUpdate' Constants.ElevateNonAdmins);                  chkNotifyNewMSSw.SetCheckedState(hklmAutoUpdate' Constants.EnableFeaturedSoftware);                  int? autoUpdateVal = (int?) hklmAutoUpdate.GetValue(Constants.AutoUpdateOptions);                  switch (autoUpdateVal) {                      case 1:                          cmboBxWinUpdate.SelectedIndex = 3;                          break;                      case 2:                          cmboBxWinUpdate.SelectedIndex = 2;                          break;                      case 3:                          cmboBxWinUpdate.SelectedIndex = 1;                          break;                      case 4:                          cmboBxWinUpdate.SelectedIndex = 0;                          break;                      default:                          if (!cmboBxWinUpdate.Items.Contains(Constants.DefaultWindowsUpdateText)) {                              cmboBxWinUpdate.Items.Add(Constants.DefaultWindowsUpdateText);                              cmboBxWinUpdate.SelectedItem = Constants.DefaultWindowsUpdateText;                          }                          break;                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromFeatures,The following statement contains a magic number: using (RegistryKey hkcuExplorer = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Policies\Explorer")) {                  // Windows DVD Burner                  if (chkWinDvdBurner.HasUserInteracted()) {                      if (chkWinDvdBurner.IsChecked == true) {                          if (hkcuExplorer.GetValue(Constants.NoDvdBurning) != null) {                              hkcuExplorer.DeleteValue(Constants.NoDvdBurning);                          }                      }                      else {                          hkcuExplorer.SetValue(Constants.NoDvdBurning' 1);                      }                  }                  // AutoPlay                  RegistryKey hkcuAutoplayHandlers = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\AutoplayHandlers");                  RegistryKey hklmCdRom = _hklm.CreateSubKey(@"SYSTEM\CurrentControlSet\services\cdrom");                  if (rbtnEnableAutoPlay.IsChecked == true) {                      hkcuExplorer.SetValue(Constants.NoDriveAutoPlay' 145);                      hkcuAutoplayHandlers.SetValue(Constants.DisableAutoplay' 0);                      hklmCdRom.SetValue(Constants.AutoRun' 1);                  } else if (rbtnEnableCdUsbAutoPlay.IsChecked == true) {                      hkcuExplorer.SetValue(Constants.NoDriveAutoPlay' 181);                      hkcuAutoplayHandlers.SetValue(Constants.DisableAutoplay' 0);                      hklmCdRom.SetValue(Constants.AutoRun' 1);                  } else if (rbtnDisableAutoPlay.IsChecked == true) {                      hkcuExplorer.SetValue(Constants.NoDriveAutoPlay' 255);                      hkcuAutoplayHandlers.SetValue(Constants.DisableAutoplay' 1);                      hklmCdRom.SetValue(Constants.AutoRun' 0);                  }                  hkcuAutoplayHandlers.Close();                  hklmCdRom.Close();              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromFeatures,The following statement contains a magic number: using (RegistryKey hkcuExplorer = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Policies\Explorer")) {                  // Windows DVD Burner                  if (chkWinDvdBurner.HasUserInteracted()) {                      if (chkWinDvdBurner.IsChecked == true) {                          if (hkcuExplorer.GetValue(Constants.NoDvdBurning) != null) {                              hkcuExplorer.DeleteValue(Constants.NoDvdBurning);                          }                      }                      else {                          hkcuExplorer.SetValue(Constants.NoDvdBurning' 1);                      }                  }                  // AutoPlay                  RegistryKey hkcuAutoplayHandlers = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\AutoplayHandlers");                  RegistryKey hklmCdRom = _hklm.CreateSubKey(@"SYSTEM\CurrentControlSet\services\cdrom");                  if (rbtnEnableAutoPlay.IsChecked == true) {                      hkcuExplorer.SetValue(Constants.NoDriveAutoPlay' 145);                      hkcuAutoplayHandlers.SetValue(Constants.DisableAutoplay' 0);                      hklmCdRom.SetValue(Constants.AutoRun' 1);                  } else if (rbtnEnableCdUsbAutoPlay.IsChecked == true) {                      hkcuExplorer.SetValue(Constants.NoDriveAutoPlay' 181);                      hkcuAutoplayHandlers.SetValue(Constants.DisableAutoplay' 0);                      hklmCdRom.SetValue(Constants.AutoRun' 1);                  } else if (rbtnDisableAutoPlay.IsChecked == true) {                      hkcuExplorer.SetValue(Constants.NoDriveAutoPlay' 255);                      hkcuAutoplayHandlers.SetValue(Constants.DisableAutoplay' 1);                      hklmCdRom.SetValue(Constants.AutoRun' 0);                  }                  hkcuAutoplayHandlers.Close();                  hklmCdRom.Close();              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromFeatures,The following statement contains a magic number: using (RegistryKey hkcuExplorer = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Policies\Explorer")) {                  // Windows DVD Burner                  if (chkWinDvdBurner.HasUserInteracted()) {                      if (chkWinDvdBurner.IsChecked == true) {                          if (hkcuExplorer.GetValue(Constants.NoDvdBurning) != null) {                              hkcuExplorer.DeleteValue(Constants.NoDvdBurning);                          }                      }                      else {                          hkcuExplorer.SetValue(Constants.NoDvdBurning' 1);                      }                  }                  // AutoPlay                  RegistryKey hkcuAutoplayHandlers = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\Explorer\AutoplayHandlers");                  RegistryKey hklmCdRom = _hklm.CreateSubKey(@"SYSTEM\CurrentControlSet\services\cdrom");                  if (rbtnEnableAutoPlay.IsChecked == true) {                      hkcuExplorer.SetValue(Constants.NoDriveAutoPlay' 145);                      hkcuAutoplayHandlers.SetValue(Constants.DisableAutoplay' 0);                      hklmCdRom.SetValue(Constants.AutoRun' 1);                  } else if (rbtnEnableCdUsbAutoPlay.IsChecked == true) {                      hkcuExplorer.SetValue(Constants.NoDriveAutoPlay' 181);                      hkcuAutoplayHandlers.SetValue(Constants.DisableAutoplay' 0);                      hklmCdRom.SetValue(Constants.AutoRun' 1);                  } else if (rbtnDisableAutoPlay.IsChecked == true) {                      hkcuExplorer.SetValue(Constants.NoDriveAutoPlay' 255);                      hkcuAutoplayHandlers.SetValue(Constants.DisableAutoplay' 1);                      hklmCdRom.SetValue(Constants.AutoRun' 0);                  }                  hkcuAutoplayHandlers.Close();                  hklmCdRom.Close();              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromFeatures,The following statement contains a magic number: using (RegistryKey hklmAutoUpdate = _hklm.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update")) {                  hklmAutoUpdate.SetValue(chkRecommenedUpdates' Constants.IncludeRecommendedUpdates);                  hklmAutoUpdate.SetValue(chkAllowAllInstallUpdate' Constants.ElevateNonAdmins);                  hklmAutoUpdate.SetValue(chkNotifyNewMSSw' Constants.EnableFeaturedSoftware);                  switch (cmboBxWinUpdate.SelectedIndex) {                      case 0: hklmAutoUpdate.SetValue(Constants.AutoUpdateOptions' 4);                          break;                      case 1: hklmAutoUpdate.SetValue(Constants.AutoUpdateOptions' 3);                          break;                      case 2: hklmAutoUpdate.SetValue(Constants.AutoUpdateOptions' 2);                          break;                      case 3: hklmAutoUpdate.SetValue(Constants.AutoUpdateOptions' 1);                          break;                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromFeatures,The following statement contains a magic number: using (RegistryKey hklmAutoUpdate = _hklm.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update")) {                  hklmAutoUpdate.SetValue(chkRecommenedUpdates' Constants.IncludeRecommendedUpdates);                  hklmAutoUpdate.SetValue(chkAllowAllInstallUpdate' Constants.ElevateNonAdmins);                  hklmAutoUpdate.SetValue(chkNotifyNewMSSw' Constants.EnableFeaturedSoftware);                  switch (cmboBxWinUpdate.SelectedIndex) {                      case 0: hklmAutoUpdate.SetValue(Constants.AutoUpdateOptions' 4);                          break;                      case 1: hklmAutoUpdate.SetValue(Constants.AutoUpdateOptions' 3);                          break;                      case 2: hklmAutoUpdate.SetValue(Constants.AutoUpdateOptions' 2);                          break;                      case 3: hklmAutoUpdate.SetValue(Constants.AutoUpdateOptions' 1);                          break;                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromFeatures,The following statement contains a magic number: using (RegistryKey hklmAutoUpdate = _hklm.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update")) {                  hklmAutoUpdate.SetValue(chkRecommenedUpdates' Constants.IncludeRecommendedUpdates);                  hklmAutoUpdate.SetValue(chkAllowAllInstallUpdate' Constants.ElevateNonAdmins);                  hklmAutoUpdate.SetValue(chkNotifyNewMSSw' Constants.EnableFeaturedSoftware);                  switch (cmboBxWinUpdate.SelectedIndex) {                      case 0: hklmAutoUpdate.SetValue(Constants.AutoUpdateOptions' 4);                          break;                      case 1: hklmAutoUpdate.SetValue(Constants.AutoUpdateOptions' 3);                          break;                      case 2: hklmAutoUpdate.SetValue(Constants.AutoUpdateOptions' 2);                          break;                      case 3: hklmAutoUpdate.SetValue(Constants.AutoUpdateOptions' 1);                          break;                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromFeatures,The following statement contains a magic number: using (RegistryKey hklmAutoUpdate = _hklm.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update")) {                  hklmAutoUpdate.SetValue(chkRecommenedUpdates' Constants.IncludeRecommendedUpdates);                  hklmAutoUpdate.SetValue(chkAllowAllInstallUpdate' Constants.ElevateNonAdmins);                  hklmAutoUpdate.SetValue(chkNotifyNewMSSw' Constants.EnableFeaturedSoftware);                  switch (cmboBxWinUpdate.SelectedIndex) {                      case 0: hklmAutoUpdate.SetValue(Constants.AutoUpdateOptions' 4);                          break;                      case 1: hklmAutoUpdate.SetValue(Constants.AutoUpdateOptions' 3);                          break;                      case 2: hklmAutoUpdate.SetValue(Constants.AutoUpdateOptions' 2);                          break;                      case 3: hklmAutoUpdate.SetValue(Constants.AutoUpdateOptions' 1);                          break;                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromFeatures,The following statement contains a magic number: using (RegistryKey hklmAutoUpdate = _hklm.CreateSubKey(@"Software\Microsoft\Windows\CurrentVersion\WindowsUpdate\Auto Update")) {                  hklmAutoUpdate.SetValue(chkRecommenedUpdates' Constants.IncludeRecommendedUpdates);                  hklmAutoUpdate.SetValue(chkAllowAllInstallUpdate' Constants.ElevateNonAdmins);                  hklmAutoUpdate.SetValue(chkNotifyNewMSSw' Constants.EnableFeaturedSoftware);                  switch (cmboBxWinUpdate.SelectedIndex) {                      case 0: hklmAutoUpdate.SetValue(Constants.AutoUpdateOptions' 4);                          break;                      case 1: hklmAutoUpdate.SetValue(Constants.AutoUpdateOptions' 3);                          break;                      case 2: hklmAutoUpdate.SetValue(Constants.AutoUpdateOptions' 2);                          break;                      case 3: hklmAutoUpdate.SetValue(Constants.AutoUpdateOptions' 1);                          break;                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadMaintenanceTab,The following statement contains a magic number: using (RegistryKey hkcuWinErrReporting = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\Windows Error Reporting")) {                  chkHideErrReporting.SetCheckedState(hkcuWinErrReporting' Constants.DontShowUi);                  using (RegistryKey hkcuConsent = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\Windows Error Reporting\Consent")) {                      int? defaultConsentVal = (int?) hkcuConsent.GetValue(Constants.DefaultConsent);                      int? disabledVal = (int?) hkcuWinErrReporting.GetValue(Constants.Disabled);                      if (defaultConsentVal == null && disabledVal == null) {                          cmboBxErrReportTye.SelectedIndex = 1;                      } else if (disabledVal == 0 || disabledVal == null) {                          switch (defaultConsentVal) {                              case 1:                                  cmboBxErrReportTye.SelectedIndex = 0;                                  break;                              case 2:                                  cmboBxErrReportTye.SelectedIndex = 1;                                  break;                              case 3:                                  cmboBxErrReportTye.SelectedIndex = 2;                                  break;                              default:                                  cmboBxErrReportTye.SelectedIndex = 0;                                  break;                          }                      } else if(disabledVal == 1) {                          cmboBxErrReportTye.SelectedIndex = 3;                      }                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadMaintenanceTab,The following statement contains a magic number: using (RegistryKey hkcuWinErrReporting = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\Windows Error Reporting")) {                  chkHideErrReporting.SetCheckedState(hkcuWinErrReporting' Constants.DontShowUi);                  using (RegistryKey hkcuConsent = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\Windows Error Reporting\Consent")) {                      int? defaultConsentVal = (int?) hkcuConsent.GetValue(Constants.DefaultConsent);                      int? disabledVal = (int?) hkcuWinErrReporting.GetValue(Constants.Disabled);                      if (defaultConsentVal == null && disabledVal == null) {                          cmboBxErrReportTye.SelectedIndex = 1;                      } else if (disabledVal == 0 || disabledVal == null) {                          switch (defaultConsentVal) {                              case 1:                                  cmboBxErrReportTye.SelectedIndex = 0;                                  break;                              case 2:                                  cmboBxErrReportTye.SelectedIndex = 1;                                  break;                              case 3:                                  cmboBxErrReportTye.SelectedIndex = 2;                                  break;                              default:                                  cmboBxErrReportTye.SelectedIndex = 0;                                  break;                          }                      } else if(disabledVal == 1) {                          cmboBxErrReportTye.SelectedIndex = 3;                      }                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadMaintenanceTab,The following statement contains a magic number: using (RegistryKey hkcuWinErrReporting = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\Windows Error Reporting")) {                  chkHideErrReporting.SetCheckedState(hkcuWinErrReporting' Constants.DontShowUi);                  using (RegistryKey hkcuConsent = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\Windows Error Reporting\Consent")) {                      int? defaultConsentVal = (int?) hkcuConsent.GetValue(Constants.DefaultConsent);                      int? disabledVal = (int?) hkcuWinErrReporting.GetValue(Constants.Disabled);                      if (defaultConsentVal == null && disabledVal == null) {                          cmboBxErrReportTye.SelectedIndex = 1;                      } else if (disabledVal == 0 || disabledVal == null) {                          switch (defaultConsentVal) {                              case 1:                                  cmboBxErrReportTye.SelectedIndex = 0;                                  break;                              case 2:                                  cmboBxErrReportTye.SelectedIndex = 1;                                  break;                              case 3:                                  cmboBxErrReportTye.SelectedIndex = 2;                                  break;                              default:                                  cmboBxErrReportTye.SelectedIndex = 0;                                  break;                          }                      } else if(disabledVal == 1) {                          cmboBxErrReportTye.SelectedIndex = 3;                      }                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadMaintenanceTab,The following statement contains a magic number: using (RegistryKey hkcuWinErrReporting = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\Windows Error Reporting")) {                  chkHideErrReporting.SetCheckedState(hkcuWinErrReporting' Constants.DontShowUi);                  using (RegistryKey hkcuConsent = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\Windows Error Reporting\Consent")) {                      int? defaultConsentVal = (int?) hkcuConsent.GetValue(Constants.DefaultConsent);                      int? disabledVal = (int?) hkcuWinErrReporting.GetValue(Constants.Disabled);                      if (defaultConsentVal == null && disabledVal == null) {                          cmboBxErrReportTye.SelectedIndex = 1;                      } else if (disabledVal == 0 || disabledVal == null) {                          switch (defaultConsentVal) {                              case 1:                                  cmboBxErrReportTye.SelectedIndex = 0;                                  break;                              case 2:                                  cmboBxErrReportTye.SelectedIndex = 1;                                  break;                              case 3:                                  cmboBxErrReportTye.SelectedIndex = 2;                                  break;                              default:                                  cmboBxErrReportTye.SelectedIndex = 0;                                  break;                          }                      } else if(disabledVal == 1) {                          cmboBxErrReportTye.SelectedIndex = 3;                      }                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateSettingsFromMaintenance,The following statement contains a magic number: using (RegistryKey hkcuWinErrReporting = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\Windows Error Reporting")) {                  hkcuWinErrReporting.SetValue(chkHideErrReporting' Constants.DontShowUi);                  using (RegistryKey hkcuConsent = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\Windows Error Reporting\Consent")) {                      switch (cmboBxErrReportTye.SelectedIndex) {                          case 0:                              hkcuWinErrReporting.SetValue(Constants.Disabled' 0);                              hkcuConsent.SetValue(Constants.DefaultConsent' 1);                              break;                          case 1:                              hkcuWinErrReporting.SetValue(Constants.Disabled' 0);                              hkcuConsent.SetValue(Constants.DefaultConsent' 2);                              break;                          case 2:                              hkcuWinErrReporting.SetValue(Constants.Disabled' 0);                              hkcuConsent.SetValue(Constants.DefaultConsent' 3);                              break;                          case 3:                              hkcuWinErrReporting.SetValue(Constants.Disabled' 1);                              break;                      }                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateSettingsFromMaintenance,The following statement contains a magic number: using (RegistryKey hkcuWinErrReporting = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\Windows Error Reporting")) {                  hkcuWinErrReporting.SetValue(chkHideErrReporting' Constants.DontShowUi);                  using (RegistryKey hkcuConsent = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\Windows Error Reporting\Consent")) {                      switch (cmboBxErrReportTye.SelectedIndex) {                          case 0:                              hkcuWinErrReporting.SetValue(Constants.Disabled' 0);                              hkcuConsent.SetValue(Constants.DefaultConsent' 1);                              break;                          case 1:                              hkcuWinErrReporting.SetValue(Constants.Disabled' 0);                              hkcuConsent.SetValue(Constants.DefaultConsent' 2);                              break;                          case 2:                              hkcuWinErrReporting.SetValue(Constants.Disabled' 0);                              hkcuConsent.SetValue(Constants.DefaultConsent' 3);                              break;                          case 3:                              hkcuWinErrReporting.SetValue(Constants.Disabled' 1);                              break;                      }                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateSettingsFromMaintenance,The following statement contains a magic number: using (RegistryKey hkcuWinErrReporting = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\Windows Error Reporting")) {                  hkcuWinErrReporting.SetValue(chkHideErrReporting' Constants.DontShowUi);                  using (RegistryKey hkcuConsent = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\Windows Error Reporting\Consent")) {                      switch (cmboBxErrReportTye.SelectedIndex) {                          case 0:                              hkcuWinErrReporting.SetValue(Constants.Disabled' 0);                              hkcuConsent.SetValue(Constants.DefaultConsent' 1);                              break;                          case 1:                              hkcuWinErrReporting.SetValue(Constants.Disabled' 0);                              hkcuConsent.SetValue(Constants.DefaultConsent' 2);                              break;                          case 2:                              hkcuWinErrReporting.SetValue(Constants.Disabled' 0);                              hkcuConsent.SetValue(Constants.DefaultConsent' 3);                              break;                          case 3:                              hkcuWinErrReporting.SetValue(Constants.Disabled' 1);                              break;                      }                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateSettingsFromMaintenance,The following statement contains a magic number: using (RegistryKey hkcuWinErrReporting = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\Windows Error Reporting")) {                  hkcuWinErrReporting.SetValue(chkHideErrReporting' Constants.DontShowUi);                  using (RegistryKey hkcuConsent = _hkcu.CreateSubKey(@"Software\Microsoft\Windows\Windows Error Reporting\Consent")) {                      switch (cmboBxErrReportTye.SelectedIndex) {                          case 0:                              hkcuWinErrReporting.SetValue(Constants.Disabled' 0);                              hkcuConsent.SetValue(Constants.DefaultConsent' 1);                              break;                          case 1:                              hkcuWinErrReporting.SetValue(Constants.Disabled' 0);                              hkcuConsent.SetValue(Constants.DefaultConsent' 2);                              break;                          case 2:                              hkcuWinErrReporting.SetValue(Constants.Disabled' 0);                              hkcuConsent.SetValue(Constants.DefaultConsent' 3);                              break;                          case 3:                              hkcuWinErrReporting.SetValue(Constants.Disabled' 1);                              break;                      }                  }              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,Search,The following statement contains a magic number: if (searchTxt.Length < 3) {                  _message.Error(GetResourceString("Min3Chars"));                  lstSearchResults.ItemsSource = null;                  return;              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,Search,The following statement contains a magic number: if (searchTxt.Length > 100) {                  searchTxt = searchTxt.Substring(0' 100);              }
Magic Number,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,Search,The following statement contains a magic number: if (searchTxt.Length > 100) {                  searchTxt = searchTxt.Substring(0' 100);              }
Magic Number,WindowsTweaker.AppTasks,ColorPickerDialog,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\ColorPickerDialog.cs,CreateColourPickerDockPanel,The following statement contains a magic number: DockPanel dockPanel = new DockPanel()              {                  HorizontalAlignment = HorizontalAlignment.Left'                  VerticalAlignment = VerticalAlignment.Top'                  Margin = new Thickness(4)'              };
Magic Number,WindowsTweaker.AppTasks,ColorPickerDialog,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\ColorPickerDialog.cs,CreateColourPickerDockPanel,The following statement contains a magic number: dockPanel.Children.Add(new ColorCanvas() { SelectedColor = SelectedColour' Margin = new Thickness(4) });
Magic Number,WindowsTweaker.AppTasks,ColorPickerDialog,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\ColorPickerDialog.cs,CreateColourPickerDockPanel,The following statement contains a magic number: dockPanel.Children.Add(new Button()              {                  IsDefault = true'                  Padding = new Thickness(16' 4' 16' 4)'                  Margin = new Thickness(4)'                  Content = "Select Color"'                  HorizontalAlignment = HorizontalAlignment.Center              });
Magic Number,WindowsTweaker.AppTasks,ColorPickerDialog,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\ColorPickerDialog.cs,CreateColourPickerDockPanel,The following statement contains a magic number: dockPanel.Children.Add(new Button()              {                  IsDefault = true'                  Padding = new Thickness(16' 4' 16' 4)'                  Margin = new Thickness(4)'                  Content = "Select Color"'                  HorizontalAlignment = HorizontalAlignment.Center              });
Magic Number,WindowsTweaker.AppTasks,ColorPickerDialog,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\ColorPickerDialog.cs,CreateColourPickerDockPanel,The following statement contains a magic number: dockPanel.Children.Add(new Button()              {                  IsDefault = true'                  Padding = new Thickness(16' 4' 16' 4)'                  Margin = new Thickness(4)'                  Content = "Select Color"'                  HorizontalAlignment = HorizontalAlignment.Center              });
Magic Number,WindowsTweaker.AppTasks,ColorPickerDialog,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\ColorPickerDialog.cs,CreateColourPickerDockPanel,The following statement contains a magic number: dockPanel.Children.Add(new Button()              {                  IsDefault = true'                  Padding = new Thickness(16' 4' 16' 4)'                  Margin = new Thickness(4)'                  Content = "Select Color"'                  HorizontalAlignment = HorizontalAlignment.Center              });
Magic Number,WindowsTweaker.AppTasks,ColorPickerDialog,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\ColorPickerDialog.cs,CreateColourPickerDockPanel,The following statement contains a magic number: dockPanel.Children.Add(new Button()              {                  IsDefault = true'                  Padding = new Thickness(16' 4' 16' 4)'                  Margin = new Thickness(4)'                  Content = "Select Color"'                  HorizontalAlignment = HorizontalAlignment.Center              });
Magic Number,WindowsTweaker.AppTasks,ConfigHandler,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\ConfigHandler.cs,SetLastUpdateChkVal,The following statement contains a magic number: ticks /= 10000000;
Magic Number,WindowsTweaker.AppTasks,RightClickAddDeleteTask,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\RightClickAddDeleteTask.cs,All,The following statement contains a magic number: using (RegistryKey hkcrDirShell = Registry.ClassesRoot.OpenSubKey(@"Directory\Background\Shell")) {                  if (hkcrDirShell == null)                     return null;                  foreach (string subKeyName in hkcrDirShell.GetSubKeyNames()) {                      if (subKeyName.Equals("cmd"' StringComparison.InvariantCultureIgnoreCase))                          continue;                                            RegistryKey regKey = hkcrDirShell.OpenSubKey(subKeyName + @"\command");                      if (regKey == null) continue;                      string val = regKey.GetValue("") as string;                      if (String.IsNullOrEmpty(val)) continue;                        if (val.ToLower().Contains(Constants.InternetExplorer)) {                          val = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ProgramFiles)'                              @"Internet Explorer\" + Constants.InternetExplorer);                      } else if (val.Contains(" ")) {                          string[] valSplit = val.Split(' ');                          if (valSplit.Length == 2) {                              val = valSplit[0];                          }                      }                      if (!File.Exists(val))                          continue;                      System.Drawing.Icon icon = System.Drawing.Icon.ExtractAssociatedIcon(val);                      ImageSource imgSource = System.Windows.Interop.Imaging.CreateBitmapSourceFromHIcon(                          icon.Handle' new Int32Rect(0' 0' icon.Width' icon.Height)' BitmapSizeOptions.FromEmptyOptions());                      FileItem fileItem = new FileItem(val' imgSource' subKeyName);                      fileItem.Name = subKeyName;                      rightClickListItems.Add(fileItem);                  }              }
Magic Number,WindowsTweaker.AppTasks,UpdateCheckTask,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\UpdateCheckTask.cs,IsTimeToCheck,The following statement contains a magic number: ticks /= 10000000;
Magic Number,WindowsTweaker.AppTasks,Utils,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\Utils.cs,SentenceJoin,The following statement contains a magic number: switch (lenLst) {                  case 1:                      return lst[0];                  case 2:                      return lst[0] + " " + separator + " " + lst[1];                  default:                      return String.Join("' "' lst.Take(lenLst - 1)) + " " + separator + " " + lst[lenLst - 1];              }
Magic Number,WindowsTweaker.AppTasks,WindowsVer,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\WindowsVer.cs,_getName,The following statement contains a magic number: if (ver.Major == 5 && ver.Minor == 1)                  return Windows.Xp;
Magic Number,WindowsTweaker.AppTasks,WindowsVer,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\WindowsVer.cs,_getName,The following statement contains a magic number: if (ver.Major != 6) return Windows.Other;
Magic Number,WindowsTweaker.AppTasks,WindowsVer,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\WindowsVer.cs,_getName,The following statement contains a magic number: switch (ver.Minor) {                  case 0:                      return Windows.Vista;                    case 1:                      return Windows.Seven;                    case 2:                      return Windows.Eight;                    case 3:                      return Windows.Blue;              }
Magic Number,WindowsTweaker.AppTasks,WindowsVer,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\WindowsVer.cs,_getName,The following statement contains a magic number: switch (ver.Minor) {                  case 0:                      return Windows.Vista;                    case 1:                      return Windows.Seven;                    case 2:                      return Windows.Eight;                    case 3:                      return Windows.Blue;              }
Magic Number,WindowsTweaker.AppTasks,WindowsVer,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\WindowsVer.cs,InternalCheckIsWow64,The following statement contains a magic number: if ((Environment.OSVersion.Version.Major == 5 && Environment.OSVersion.Version.Minor >= 1) ||                  Environment.OSVersion.Version.Major >= 6) {                  using (Process p = Process.GetCurrentProcess()) {                      bool retVal;                      if (!IsWow64Process(p.Handle' out retVal)) {                          return false;                      }                      return retVal;                  }              } else {                  return false;              }
Magic Number,WindowsTweaker.AppTasks,WindowsVer,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\WindowsVer.cs,InternalCheckIsWow64,The following statement contains a magic number: if ((Environment.OSVersion.Version.Major == 5 && Environment.OSVersion.Version.Minor >= 1) ||                  Environment.OSVersion.Version.Major >= 6) {                  using (Process p = Process.GetCurrentProcess()) {                      bool retVal;                      if (!IsWow64Process(p.Handle' out retVal)) {                          return false;                      }                      return retVal;                  }              } else {                  return false;              }
Magic Number,WindowsTweaker.AppTasks,WindowsVer,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\WindowsVer.cs,Is64BitOs,The following statement contains a magic number: return IntPtr.Size == 8 || InternalCheckIsWow64();
Magic Number,WindowsTweaker.Resources,WindowDictionary,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\Resources\WindowDictionary.cs,OnWindowResizing,The following statement contains a magic number: if (isResizing) {                  rect.CaptureMouse();                  if (resizeType == ResizeType.Width) {                      double width = e.GetPosition(win).X + 5;                      if (width > 0) win.Width = width;                  }                  if (resizeType == ResizeType.Height) {                      double height = e.GetPosition(win).Y + 5;                      if (height > 0) win.Height = height;                  }              }
Magic Number,WindowsTweaker.Resources,WindowDictionary,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\Resources\WindowDictionary.cs,OnWindowResizing,The following statement contains a magic number: if (isResizing) {                  rect.CaptureMouse();                  if (resizeType == ResizeType.Width) {                      double width = e.GetPosition(win).X + 5;                      if (width > 0) win.Width = width;                  }                  if (resizeType == ResizeType.Height) {                      double height = e.GetPosition(win).Y + 5;                      if (height > 0) win.Height = height;                  }              }
Magic Number,WindowsTweaker.Resources,WindowDictionary,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\Resources\WindowDictionary.cs,OnTitlebarDoubleClick,The following statement contains a magic number: if (e.ChangedButton == MouseButton.Left && e.ClickCount == 2) {                  Window win = (Window)                      ((FrameworkElement)sender).TemplatedParent;                  if (win.WindowState == WindowState.Normal)                      win.WindowState = WindowState.Maximized;                  else                      win.WindowState = WindowState.Normal;              }
Magic Number,WindowsTweaker.Resources,WindowDictionary,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\Resources\WindowDictionary.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 89 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Controls.Grid)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.OnTitlebarDoubleClick);                            #line default              #line hidden                            #line 89 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Controls.Grid)(target)).MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.OnTitleBarMouseLeftButtonDown);                            #line default              #line hidden              break;              case 2:                            #line 99 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnMinimizeButtonClick);                            #line default              #line hidden              break;              case 3:                            #line 101 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnMaximizeButtonClick);                            #line default              #line hidden              break;              case 4:                            #line 103 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnButtonCloseClick);                            #line default              #line hidden              break;              case 5:                            #line 114 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.OnWindowResizeInitiateWE);                            #line default              #line hidden                            #line 115 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.OnWindowResizeEnd);                            #line default              #line hidden                            #line 115 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseMove += new System.Windows.Input.MouseEventHandler(this.OnWindowResizing);                            #line default              #line hidden              break;              case 6:                            #line 117 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.OnWindowResizeInitiateNS);                            #line default              #line hidden                            #line 118 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.OnWindowResizeEnd);                            #line default              #line hidden                            #line 118 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseMove += new System.Windows.Input.MouseEventHandler(this.OnWindowResizing);                            #line default              #line hidden              break;              }
Magic Number,WindowsTweaker.Resources,WindowDictionary,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\Resources\WindowDictionary.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 89 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Controls.Grid)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.OnTitlebarDoubleClick);                            #line default              #line hidden                            #line 89 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Controls.Grid)(target)).MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.OnTitleBarMouseLeftButtonDown);                            #line default              #line hidden              break;              case 2:                            #line 99 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnMinimizeButtonClick);                            #line default              #line hidden              break;              case 3:                            #line 101 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnMaximizeButtonClick);                            #line default              #line hidden              break;              case 4:                            #line 103 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnButtonCloseClick);                            #line default              #line hidden              break;              case 5:                            #line 114 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.OnWindowResizeInitiateWE);                            #line default              #line hidden                            #line 115 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.OnWindowResizeEnd);                            #line default              #line hidden                            #line 115 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseMove += new System.Windows.Input.MouseEventHandler(this.OnWindowResizing);                            #line default              #line hidden              break;              case 6:                            #line 117 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.OnWindowResizeInitiateNS);                            #line default              #line hidden                            #line 118 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.OnWindowResizeEnd);                            #line default              #line hidden                            #line 118 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseMove += new System.Windows.Input.MouseEventHandler(this.OnWindowResizing);                            #line default              #line hidden              break;              }
Magic Number,WindowsTweaker.Resources,WindowDictionary,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\Resources\WindowDictionary.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 89 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Controls.Grid)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.OnTitlebarDoubleClick);                            #line default              #line hidden                            #line 89 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Controls.Grid)(target)).MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.OnTitleBarMouseLeftButtonDown);                            #line default              #line hidden              break;              case 2:                            #line 99 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnMinimizeButtonClick);                            #line default              #line hidden              break;              case 3:                            #line 101 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnMaximizeButtonClick);                            #line default              #line hidden              break;              case 4:                            #line 103 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnButtonCloseClick);                            #line default              #line hidden              break;              case 5:                            #line 114 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.OnWindowResizeInitiateWE);                            #line default              #line hidden                            #line 115 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.OnWindowResizeEnd);                            #line default              #line hidden                            #line 115 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseMove += new System.Windows.Input.MouseEventHandler(this.OnWindowResizing);                            #line default              #line hidden              break;              case 6:                            #line 117 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.OnWindowResizeInitiateNS);                            #line default              #line hidden                            #line 118 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.OnWindowResizeEnd);                            #line default              #line hidden                            #line 118 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseMove += new System.Windows.Input.MouseEventHandler(this.OnWindowResizing);                            #line default              #line hidden              break;              }
Magic Number,WindowsTweaker.Resources,WindowDictionary,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\Resources\WindowDictionary.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 89 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Controls.Grid)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.OnTitlebarDoubleClick);                            #line default              #line hidden                            #line 89 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Controls.Grid)(target)).MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.OnTitleBarMouseLeftButtonDown);                            #line default              #line hidden              break;              case 2:                            #line 99 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnMinimizeButtonClick);                            #line default              #line hidden              break;              case 3:                            #line 101 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnMaximizeButtonClick);                            #line default              #line hidden              break;              case 4:                            #line 103 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnButtonCloseClick);                            #line default              #line hidden              break;              case 5:                            #line 114 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.OnWindowResizeInitiateWE);                            #line default              #line hidden                            #line 115 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.OnWindowResizeEnd);                            #line default              #line hidden                            #line 115 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseMove += new System.Windows.Input.MouseEventHandler(this.OnWindowResizing);                            #line default              #line hidden              break;              case 6:                            #line 117 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.OnWindowResizeInitiateNS);                            #line default              #line hidden                            #line 118 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.OnWindowResizeEnd);                            #line default              #line hidden                            #line 118 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseMove += new System.Windows.Input.MouseEventHandler(this.OnWindowResizing);                            #line default              #line hidden              break;              }
Magic Number,WindowsTweaker.Resources,WindowDictionary,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\Resources\WindowDictionary.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 89 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Controls.Grid)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.OnTitlebarDoubleClick);                            #line default              #line hidden                            #line 89 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Controls.Grid)(target)).MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.OnTitleBarMouseLeftButtonDown);                            #line default              #line hidden              break;              case 2:                            #line 99 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnMinimizeButtonClick);                            #line default              #line hidden              break;              case 3:                            #line 101 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnMaximizeButtonClick);                            #line default              #line hidden              break;              case 4:                            #line 103 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnButtonCloseClick);                            #line default              #line hidden              break;              case 5:                            #line 114 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.OnWindowResizeInitiateWE);                            #line default              #line hidden                            #line 115 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.OnWindowResizeEnd);                            #line default              #line hidden                            #line 115 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseMove += new System.Windows.Input.MouseEventHandler(this.OnWindowResizing);                            #line default              #line hidden              break;              case 6:                            #line 117 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.OnWindowResizeInitiateNS);                            #line default              #line hidden                            #line 118 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.OnWindowResizeEnd);                            #line default              #line hidden                            #line 118 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseMove += new System.Windows.Input.MouseEventHandler(this.OnWindowResizing);                            #line default              #line hidden              break;              }
Missing Default,WindowsTweaker,About,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\About.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.txtVersion = ((System.Windows.Controls.TextBlock)(target));              return;              case 2:                            #line 26 "..\..\..\About.xaml"              ((System.Windows.Documents.Hyperlink)(target)).Click += new System.Windows.RoutedEventHandler(this.OnVisitUsLinkClick);                            #line default              #line hidden              return;              case 3:                            #line 31 "..\..\..\About.xaml"              ((System.Windows.Documents.Hyperlink)(target)).Click += new System.Windows.RoutedEventHandler(this.OnLikeOnFacebookClick);                            #line default              #line hidden              return;              case 4:                            #line 36 "..\..\..\About.xaml"              ((System.Windows.Documents.Hyperlink)(target)).Click += new System.Windows.RoutedEventHandler(this.OnViewSourceClick);                            #line default              #line hidden              return;              }
Missing Default,WindowsTweaker,InfoBox,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\InfoBox.xaml.cs,InfoBox,The following switch statement is missing a default case: switch (dialogType) {                  case DialogType.Error:                      imgInfoBox.Source = SystemIcons.Error.ToBitmap().ToImageSource();                      break;                  case DialogType.Information:                      imgInfoBox.Source = SystemIcons.Information.ToBitmap().ToImageSource();                      break;                  case DialogType.Question:                      imgInfoBox.Source = SystemIcons.Question.ToBitmap().ToImageSource();                      break;                  case DialogType.Warning:                      imgInfoBox.Source = SystemIcons.Warning.ToBitmap().ToImageSource();                      break;              }
Missing Default,WindowsTweaker,InfoBox,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\InfoBox.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.infoBoxWindow = ((WindowsTweaker.InfoBox)(target));              return;              case 2:              this.imgInfoBox = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.txtMsg = ((System.Windows.Controls.TextBlock)(target));              return;              case 4:              this.btnOk = ((System.Windows.Controls.Button)(target));                            #line 25 "..\..\..\InfoBox.xaml"              this.btnOk.Click += new System.Windows.RoutedEventHandler(this.OnOkButtonClick);                            #line default              #line hidden              return;              case 5:              this.btnCancel = ((System.Windows.Controls.Button)(target));                            #line 27 "..\..\..\InfoBox.xaml"              this.btnCancel.Click += new System.Windows.RoutedEventHandler(this.OnCancelButtonClick);                            #line default              #line hidden              return;              }
Missing Default,WindowsTweaker,MoreInfo,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MoreInfo.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.imgProgramIcon = ((System.Windows.Controls.Image)(target));              return;              case 2:              this.txtAppTitle = ((System.Windows.Controls.TextBlock)(target));              return;              case 3:              this.txtAppFileName = ((System.Windows.Controls.TextBox)(target));              return;              case 4:              this.txtAppFilePath = ((System.Windows.Controls.TextBox)(target));              return;              }
Missing Default,WindowsTweaker,OpenWith,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\OpenWith.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 7 "..\..\..\OpenWith.xaml"              ((WindowsTweaker.OpenWith)(target)).Loaded += new System.Windows.RoutedEventHandler(this.OnWindowLoaded);                            #line default              #line hidden                            #line 9 "..\..\..\OpenWith.xaml"              ((WindowsTweaker.OpenWith)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.OnWindowClosing);                            #line default              #line hidden              return;              case 2:                            #line 12 "..\..\..\OpenWith.xaml"              ((System.ComponentModel.BackgroundWorker)(target)).RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(this.OnRunWorkerCompleted);                            #line default              #line hidden                            #line 13 "..\..\..\OpenWith.xaml"              ((System.ComponentModel.BackgroundWorker)(target)).DoWork += new System.ComponentModel.DoWorkEventHandler(this.OnDoWork);                            #line default              #line hidden              return;              case 5:              this.txtLoading = ((System.Windows.Controls.TextBlock)(target));              return;              case 6:              this.lstOpenWithBox = ((System.Windows.Controls.ListBox)(target));              return;              }
Missing Default,WindowsTweaker,OpenWith,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\OpenWith.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 3:                            #line 52 "..\..\..\OpenWith.xaml"              ((WPFSpark.ToggleSwitch)(target)).Checked += new System.Windows.RoutedEventHandler(this.OnToggleButtonChecked);                            #line default              #line hidden                            #line 53 "..\..\..\OpenWith.xaml"              ((WPFSpark.ToggleSwitch)(target)).Unchecked += new System.Windows.RoutedEventHandler(this.OnToggleButtonUnchecked);                            #line default              #line hidden              break;              case 4:                            #line 113 "..\..\..\OpenWith.xaml"              ((System.Windows.Controls.Image)(target)).PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.OnMoreInfoImageMouseDown);                            #line default              #line hidden              break;              case 7:              eventSetter = new System.Windows.EventSetter();              eventSetter.Event = System.Windows.UIElement.PreviewMouseLeftButtonDownEvent;                            #line 127 "..\..\..\OpenWith.xaml"              eventSetter.Handler = new System.Windows.Input.MouseButtonEventHandler(this.OnMoreInfoImageMouseDown);                            #line default              #line hidden              ((System.Windows.Style)(target)).Setters.Add(eventSetter);              eventSetter = new System.Windows.EventSetter();              eventSetter.Event = System.Windows.UIElement.PreviewTouchDownEvent;                            #line 128 "..\..\..\OpenWith.xaml"              eventSetter.Handler = new System.EventHandler<System.Windows.Input.TouchEventArgs>(this.OnMoreInfoImageTouched);                            #line default              #line hidden              ((System.Windows.Style)(target)).Setters.Add(eventSetter);              break;              }
Missing Default,WindowsTweaker,ReportError,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\ReportError.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 9 "..\..\..\ReportError.xaml"              ((System.ComponentModel.BackgroundWorker)(target)).RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(this.OnReportErrorWorkerCompleted);                            #line default              #line hidden                            #line 10 "..\..\..\ReportError.xaml"              ((System.ComponentModel.BackgroundWorker)(target)).DoWork += new System.ComponentModel.DoWorkEventHandler(this.OnReportErrorDoWork);                            #line default              #line hidden              return;              case 2:              this.txtErrorMsg = ((System.Windows.Controls.TextBlock)(target));              return;              case 3:              this.progressBar = ((System.Windows.Controls.ProgressBar)(target));              return;              case 4:              this.btnReportError = ((System.Windows.Controls.Button)(target));                            #line 23 "..\..\..\ReportError.xaml"              this.btnReportError.Click += new System.Windows.RoutedEventHandler(this.OnReportErrorButtonClick);                            #line default              #line hidden              return;              case 5:                            #line 25 "..\..\..\ReportError.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnButtonCancelClick);                            #line default              #line hidden              return;              }
Missing Default,WindowsTweaker,Splash,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\Splash.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:              this.txtAppVersion = ((System.Windows.Controls.TextBlock)(target));              return;              }
Missing Default,WindowsTweaker,StartupManager,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\StartupManager.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 8 "..\..\..\StartupManager.xaml"              ((WindowsTweaker.StartupManager)(target)).Loaded += new System.Windows.RoutedEventHandler(this.OnWindowLoaded);                            #line default              #line hidden                            #line 8 "..\..\..\StartupManager.xaml"              ((WindowsTweaker.StartupManager)(target)).Closing += new System.ComponentModel.CancelEventHandler(this.OnWindowClosing);                            #line default              #line hidden              return;              case 2:                            #line 11 "..\..\..\StartupManager.xaml"              ((System.ComponentModel.BackgroundWorker)(target)).RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(this.OnRunWorkerCompleted);                            #line default              #line hidden                            #line 12 "..\..\..\StartupManager.xaml"              ((System.ComponentModel.BackgroundWorker)(target)).DoWork += new System.ComponentModel.DoWorkEventHandler(this.OnDoWork);                            #line default              #line hidden              return;              case 5:              this.txtLoading = ((System.Windows.Controls.TextBlock)(target));              return;              case 6:              this.lstStartupItems = ((System.Windows.Controls.ListBox)(target));              return;              }
Missing Default,WindowsTweaker,StartupManager,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\StartupManager.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 3:                            #line 51 "..\..\..\StartupManager.xaml"              ((WPFSpark.ToggleSwitch)(target)).Checked += new System.Windows.RoutedEventHandler(this.OnToggleButtonChecked);                            #line default              #line hidden                            #line 52 "..\..\..\StartupManager.xaml"              ((WPFSpark.ToggleSwitch)(target)).Unchecked += new System.Windows.RoutedEventHandler(this.OnToggleButtonUnchecked);                            #line default              #line hidden              break;              case 4:                            #line 112 "..\..\..\StartupManager.xaml"              ((System.Windows.Controls.Image)(target)).PreviewMouseDown += new System.Windows.Input.MouseButtonEventHandler(this.OnMoreInfoImageMouseDown);                            #line default              #line hidden              break;              case 7:              eventSetter = new System.Windows.EventSetter();              eventSetter.Event = System.Windows.UIElement.PreviewMouseLeftButtonDownEvent;                            #line 127 "..\..\..\StartupManager.xaml"              eventSetter.Handler = new System.Windows.Input.MouseButtonEventHandler(this.OnMoreInfoImageMouseDown);                            #line default              #line hidden              ((System.Windows.Style)(target)).Setters.Add(eventSetter);              eventSetter = new System.Windows.EventSetter();              eventSetter.Event = System.Windows.UIElement.PreviewTouchDownEvent;                            #line 128 "..\..\..\StartupManager.xaml"              eventSetter.Handler = new System.EventHandler<System.Windows.Input.TouchEventArgs>(this.OnMoreInfoImageTouched);                            #line default              #line hidden              ((System.Windows.Style)(target)).Setters.Add(eventSetter);              break;              }
Missing Default,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,WindowProc,The following switch statement is missing a default case: switch (msg) {                  case 0x0024:                      WmGetMinMaxInfo(hwnd' lParam);                      handled = true;                      break;              }
Missing Default,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadTab,The following switch statement is missing a default case: switch (tagVal) {                  case Constants.Explorer:                      LoadExplorerTab();                      break;                    case Constants.System:                      LoadSystemTab();                      break;                    case Constants.Display:                      LoadDisplayTab();                      break;                    case Constants.RightClick:                      LoadRightClickTab();                      break;                    case Constants.Places:                      LoadPlacesTab();                      break;                    case Constants.Tasks:                      LoadTaskTab();                      break;                    case Constants.Features:                      LoadFeaturesTab();                      break;                    case Constants.Logon:                      LoadLogonTab();                      break;                    case Constants.Restrictions:                      LoadRestrictionsTab();                      break;                    case Constants.Maintenance:                      LoadMaintenanceTab();                      break;                    case Constants.Utilities:                      break;              }
Missing Default,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,SaveSettings,The following switch statement is missing a default case: switch (userInteractedTab.Key) {                      case Constants.Explorer:                          UpdateRegistryFromExplorer();                          break;                      case Constants.System:                          UpdateRegistryFromSystem();                          break;                      case Constants.Display:                          UpdateRegistryFromDisplay();                          break;                      case Constants.Places:                          UpdateRegistryFromPlaces();                          break;                      case Constants.RightClick:                          UpdateRegistryFromRightClick();                          break;                      case Constants.Features:                          UpdateRegistryFromFeatures();                          break;                      case Constants.Logon:                          UpdateRegistryFromLogon();                          break;                      case Constants.Restrictions:                          UpdateRegistryFromRestrictions();                          break;                      case Constants.Maintenance:                          UpdateSettingsFromMaintenance();                          break;                  }
Missing Default,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadPlacesTab,The following switch statement is missing a default case: switch (val) {                          case 2:                              cmboBxPowerBtnAction.SelectedIndex = 0;                              break;                          case 64:                              cmboBxPowerBtnAction.SelectedIndex = 1;                              break;                          case 16:                              cmboBxPowerBtnAction.SelectedIndex = 2;                              break;                          case 4:                              cmboBxPowerBtnAction.SelectedIndex = 3;                              break;                          case 512:                              cmboBxPowerBtnAction.SelectedIndex = 4;                              break;                          case 1:                              cmboBxPowerBtnAction.SelectedIndex = 5;                              break;                          case 256:                              cmboBxPowerBtnAction.SelectedIndex = 6;                              break;                      }
Missing Default,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromPlaces,The following switch statement is missing a default case: switch (val) {                          case 0:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 2);                              break;                          case 1:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 64);                              break;                          case 2:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 16);                              break;                          case 3:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 4);                              break;                          case 4:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 512);                              break;                          case 5:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 1);                              break;                          case 6:                              hkcuExAdvanced.SetValue(Constants.StartPowerBtnAction' 256);                              break;                      }
Missing Default,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,OnAddToOpenWithBtnClick,The following switch statement is missing a default case: switch (status) {                      case OpenWithTask.AddStatus.Success:                          _message.Success(GetResourceString("AddedToOpenWith"));                          break;                      case OpenWithTask.AddStatus.AlreadyPresent:                          _message.Success(GetResourceString("FileAlreadyPresentInOpenWith"));                          break;                      case OpenWithTask.AddStatus.Failed:                          _message.Error(GetResourceString("FailedToAddToOpenWith"));                          break;                  }
Missing Default,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,OnAddToStartupBtnClick,The following switch statement is missing a default case: switch (status) {                      case StartupManagerTask.AddStatus.Success:                          _message.Success(GetResourceString("AddedToStartup"));                          break;                      case StartupManagerTask.AddStatus.AlreadyPresent:                          _message.Error(GetResourceString("FilePresentInStartup"));                          break;                      case StartupManagerTask.AddStatus.Failed:                          _message.Error(GetResourceString("FailedToAddToStartup"));                          break;                  }
Missing Default,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,OnScheduleShutdownButtonClick,The following switch statement is missing a default case: switch (cmboBxShutdownAction.SelectedIndex) {                      case 0: param = "/s";                          break;                      case 1: param = "/r";                          break;                  }
Missing Default,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,OnButtonHideFileFolderClick,The following switch statement is missing a default case: switch (cmboxHideSelection.SelectedIndex) {                  case 0:                      HideFile();                      break;                  case 1:                      HideFolder();                      break;              }
Missing Default,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,OnButtonUnhideFileFolderClick,The following switch statement is missing a default case: switch (cmboxUnHideSelection.SelectedIndex) {                  case 0:                      UnhideFile();                      break;                  case 1:                      UnhideFolder();                      break;              }
Missing Default,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,LoadFeaturesTab,The following switch statement is missing a default case: switch (driveAutoRunVal) {                              case 145:                                  rbtnEnableAutoPlay.IsChecked = true;                                  break;                              case 181:                                  rbtnEnableCdUsbAutoPlay.IsChecked = true;                                  break;                              case 255:                                  rbtnDisableAutoPlay.IsChecked = true;                                  break;                          }
Missing Default,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateRegistryFromFeatures,The following switch statement is missing a default case: switch (cmboBxWinUpdate.SelectedIndex) {                      case 0: hklmAutoUpdate.SetValue(Constants.AutoUpdateOptions' 4);                          break;                      case 1: hklmAutoUpdate.SetValue(Constants.AutoUpdateOptions' 3);                          break;                      case 2: hklmAutoUpdate.SetValue(Constants.AutoUpdateOptions' 2);                          break;                      case 3: hklmAutoUpdate.SetValue(Constants.AutoUpdateOptions' 1);                          break;                  }
Missing Default,WindowsTweaker,MainWindow,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\MainWindow.xaml.cs,UpdateSettingsFromMaintenance,The following switch statement is missing a default case: switch (cmboBxErrReportTye.SelectedIndex) {                          case 0:                              hkcuWinErrReporting.SetValue(Constants.Disabled' 0);                              hkcuConsent.SetValue(Constants.DefaultConsent' 1);                              break;                          case 1:                              hkcuWinErrReporting.SetValue(Constants.Disabled' 0);                              hkcuConsent.SetValue(Constants.DefaultConsent' 2);                              break;                          case 2:                              hkcuWinErrReporting.SetValue(Constants.Disabled' 0);                              hkcuConsent.SetValue(Constants.DefaultConsent' 3);                              break;                          case 3:                              hkcuWinErrReporting.SetValue(Constants.Disabled' 1);                              break;                      }
Missing Default,WindowsTweaker.AppTasks,WindowsVer,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\AppTasks\WindowsVer.cs,_getName,The following switch statement is missing a default case: switch (ver.Minor) {                  case 0:                      return Windows.Vista;                    case 1:                      return Windows.Seven;                    case 2:                      return Windows.Eight;                    case 3:                      return Windows.Blue;              }
Missing Default,WindowsTweaker.Resources,WindowDictionary,C:\repos\siddharth96_windows-tweaker\WindowsTweaker\Resources\WindowDictionary.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 89 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Controls.Grid)(target)).MouseDown += new System.Windows.Input.MouseButtonEventHandler(this.OnTitlebarDoubleClick);                            #line default              #line hidden                            #line 89 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Controls.Grid)(target)).MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.OnTitleBarMouseLeftButtonDown);                            #line default              #line hidden              break;              case 2:                            #line 99 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnMinimizeButtonClick);                            #line default              #line hidden              break;              case 3:                            #line 101 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnMaximizeButtonClick);                            #line default              #line hidden              break;              case 4:                            #line 103 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Controls.Button)(target)).Click += new System.Windows.RoutedEventHandler(this.OnButtonCloseClick);                            #line default              #line hidden              break;              case 5:                            #line 114 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.OnWindowResizeInitiateWE);                            #line default              #line hidden                            #line 115 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.OnWindowResizeEnd);                            #line default              #line hidden                            #line 115 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseMove += new System.Windows.Input.MouseEventHandler(this.OnWindowResizing);                            #line default              #line hidden              break;              case 6:                            #line 117 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseLeftButtonDown += new System.Windows.Input.MouseButtonEventHandler(this.OnWindowResizeInitiateNS);                            #line default              #line hidden                            #line 118 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseLeftButtonUp += new System.Windows.Input.MouseButtonEventHandler(this.OnWindowResizeEnd);                            #line default              #line hidden                            #line 118 "..\..\..\..\Resources\WindowDictionary.xaml"              ((System.Windows.Shapes.Rectangle)(target)).MouseMove += new System.Windows.Input.MouseEventHandler(this.OnWindowResizing);                            #line default              #line hidden              break;              }
