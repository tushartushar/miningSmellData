Implementation smell,Namespace,Class,File,Method,Description
Long Statement,PipeWrench.Lib.MessageHandlers,DefaultMessageHandler,C:\repos\nterry_PipeWrench\PipeWrench\Lib\MessageHandlers\DefaultMessageHandler.cs,ReceiveMessageFromServiceBinding,The length of the statement  "		sender.ServiceDispatchFail (1' string.Format ("An active tunnel does not exist for remote client {0}:{1}"' remoteBinding.Key' remoteBinding.Value)); " is 148.
Long Statement,PipeWrench.Lib.MessageHandlers,DefaultMessageHandler,C:\repos\nterry_PipeWrench\PipeWrench\Lib\MessageHandlers\DefaultMessageHandler.cs,ReceiveTunnelCreationRequestFromServiceBinding,The length of the statement  "		var message = string.Format ("Tunnel with remote binding {0}:{1} already exists."' remoteBinding.Key' remoteBinding.Value); " is 123.
Long Statement,PipeWrench.Lib.ServiceBindings,LocalServiceBinding,C:\repos\nterry_PipeWrench\PipeWrench\Lib\ServiceBindings\LocalServiceBinding.cs,MessageRecieved,The length of the statement  "	foreach (var linkedTunnel in _linkedTunnels.Where (linkedTunnel => linkedTunnel.RemoteBinding.Equals (remoteBinding))) { " is 120.
Long Statement,PipeWrench.Lib.Tunnels,Tunnel,C:\repos\nterry_PipeWrench\PipeWrench\Lib\Tunnels\Tunnel.cs,DequeueMessage,The length of the statement  "		Logger.Info (string.Format ("TunnelId={0} TunnelName={1} Message=\"Message available to send. Preparing and sending message with id {2}\""' GetId ()' FriendlyName' message.Id)); " is 177.
Long Statement,PipeWrench.Lib.Tunnels,Tunnel,C:\repos\nterry_PipeWrench\PipeWrench\Lib\Tunnels\Tunnel.cs,SendHeartbeat,The length of the statement  "			//Logger.Info(string.Format("TunnelId={0} TunnelName={1} Message=\"Heartbeat has already been sent to {2}:{3} in the last {4} seconds. Aborting.\""' GetId()' FriendlyName' remoteIp' remotePort' HeartbeatTimeout / 1000)); " is 220.
Long Statement,PipeWrench.Lib.Tunnels,Tunnel,C:\repos\nterry_PipeWrench\PipeWrench\Lib\Tunnels\Tunnel.cs,SendHeartbeat,The length of the statement  "		Logger.Info (string.Format ("TunnelId={0} TunnelName={1} Message=\"Locking available mutex to send heartbeat to remote client {2}:{3}\""' GetId ()' FriendlyName' remoteIp' remotePort)); " is 185.
Long Statement,PipeWrench.Lib.Tunnels,Tunnel,C:\repos\nterry_PipeWrench\PipeWrench\Lib\Tunnels\Tunnel.cs,SendHeartbeat,The length of the statement  "		Logger.Info (string.Format ("TunnelId={0} TunnelName={1} Message=\"Releasing mutex for heartbeat\""' GetId ()' FriendlyName)); " is 126.
Long Statement,PipeWrench,Test,C:\repos\nterry_PipeWrench\PipeWrench\Program.cs,MessageReceived,The length of the statement  "	Console.WriteLine (string.Format ("Received {0} byte(s) from remote {1}:{2}"' data.Count ()' remoteBinding.Key' remoteBinding.Value)); " is 134.
Magic Number,PipeWrench.Lib.Util,ExtensionMethods,C:\repos\nterry_PipeWrench\PipeWrench\Lib\Util\ExtensionMethods.cs,NextLong,The following statement contains a magic number: do {  	var buf = new byte[8];  	random.NextBytes (buf);  	ulongRand = (ulong)BitConverter.ToInt64 (buf' 0);  }  while (ulongRand > ulong.MaxValue - ((ulong.MaxValue % uRange) + 1) % uRange);  
Magic Number,PipeWrench.Lib.MessageHandlers,DefaultMessageHandler,C:\repos\nterry_PipeWrench\PipeWrench\Lib\MessageHandlers\DefaultMessageHandler.cs,ReceiveTunnelCreationRequestFromServiceBinding,The following statement contains a magic number: if (tunnel == null) {  	try {  		var t = TunnelManager.CreateTunnel (friendlyName' remoteBinding);  		sender.TunnelCreationSucceed (t);  	}  	catch (Exception ex) {  		Logger.ErrorFormat ("Failed to create tunnel. Error was: {0}"' ex.Message);  		sender.TunnelCreationFail (2' ex.Message);  	}  }  else {  	var message = string.Format ("Tunnel with remote binding {0}:{1} already exists."' remoteBinding.Key' remoteBinding.Value);  	Logger.Error (message);  	sender.TunnelCreationFail (2' message);  }  
Magic Number,PipeWrench.Lib.MessageHandlers,DefaultMessageHandler,C:\repos\nterry_PipeWrench\PipeWrench\Lib\MessageHandlers\DefaultMessageHandler.cs,ReceiveTunnelCreationRequestFromServiceBinding,The following statement contains a magic number: if (tunnel == null) {  	try {  		var t = TunnelManager.CreateTunnel (friendlyName' remoteBinding);  		sender.TunnelCreationSucceed (t);  	}  	catch (Exception ex) {  		Logger.ErrorFormat ("Failed to create tunnel. Error was: {0}"' ex.Message);  		sender.TunnelCreationFail (2' ex.Message);  	}  }  else {  	var message = string.Format ("Tunnel with remote binding {0}:{1} already exists."' remoteBinding.Key' remoteBinding.Value);  	Logger.Error (message);  	sender.TunnelCreationFail (2' message);  }  
Magic Number,PipeWrench.Lib.MessageHandlers,DefaultMessageHandler,C:\repos\nterry_PipeWrench\PipeWrench\Lib\MessageHandlers\DefaultMessageHandler.cs,ReceiveTunnelCreationRequestFromServiceBinding,The following statement contains a magic number: try {  	var t = TunnelManager.CreateTunnel (friendlyName' remoteBinding);  	sender.TunnelCreationSucceed (t);  }  catch (Exception ex) {  	Logger.ErrorFormat ("Failed to create tunnel. Error was: {0}"' ex.Message);  	sender.TunnelCreationFail (2' ex.Message);  }  
Magic Number,PipeWrench.Lib.MessageHandlers,DefaultMessageHandler,C:\repos\nterry_PipeWrench\PipeWrench\Lib\MessageHandlers\DefaultMessageHandler.cs,ReceiveTunnelCreationRequestFromServiceBinding,The following statement contains a magic number: sender.TunnelCreationFail (2' ex.Message);  
Magic Number,PipeWrench.Lib.MessageHandlers,DefaultMessageHandler,C:\repos\nterry_PipeWrench\PipeWrench\Lib\MessageHandlers\DefaultMessageHandler.cs,ReceiveTunnelCreationRequestFromServiceBinding,The following statement contains a magic number: sender.TunnelCreationFail (2' message);  
Magic Number,PipeWrench.Lib.MessageHandlers,DefaultMessageHandler,C:\repos\nterry_PipeWrench\PipeWrench\Lib\MessageHandlers\DefaultMessageHandler.cs,MessageReceiveThread,The following statement contains a magic number: while (exitFlag == false) {  	if (SockLib.BytesAvailable (_recvSocket) > 0) {  		if (SockLib.ReceiveMessage (_recvSocket' _recvBuffer) > 0) {  			//TODO: Apparently' you cannot get ip and/or port address of a udp socket... need to write values to payload...  			//var remoteIp = SockLib.GetRemoteIpAddress(_recvSocket);  			//var remotePort = SockLib.GetRemotePort(_recvSocket);  			Buffer.FinalizeBuffer (_recvBuffer);  			MessageRecieved (new KeyValuePair<string' int> ("127.0.0.1"' 1025)' Buffer.GetBuffer (_recvBuffer));  		}  	}  }  
Magic Number,PipeWrench.Lib.MessageHandlers,DefaultMessageHandler,C:\repos\nterry_PipeWrench\PipeWrench\Lib\MessageHandlers\DefaultMessageHandler.cs,MessageReceiveThread,The following statement contains a magic number: if (SockLib.BytesAvailable (_recvSocket) > 0) {  	if (SockLib.ReceiveMessage (_recvSocket' _recvBuffer) > 0) {  		//TODO: Apparently' you cannot get ip and/or port address of a udp socket... need to write values to payload...  		//var remoteIp = SockLib.GetRemoteIpAddress(_recvSocket);  		//var remotePort = SockLib.GetRemotePort(_recvSocket);  		Buffer.FinalizeBuffer (_recvBuffer);  		MessageRecieved (new KeyValuePair<string' int> ("127.0.0.1"' 1025)' Buffer.GetBuffer (_recvBuffer));  	}  }  
Magic Number,PipeWrench.Lib.MessageHandlers,DefaultMessageHandler,C:\repos\nterry_PipeWrench\PipeWrench\Lib\MessageHandlers\DefaultMessageHandler.cs,MessageReceiveThread,The following statement contains a magic number: if (SockLib.ReceiveMessage (_recvSocket' _recvBuffer) > 0) {  	//TODO: Apparently' you cannot get ip and/or port address of a udp socket... need to write values to payload...  	//var remoteIp = SockLib.GetRemoteIpAddress(_recvSocket);  	//var remotePort = SockLib.GetRemotePort(_recvSocket);  	Buffer.FinalizeBuffer (_recvBuffer);  	MessageRecieved (new KeyValuePair<string' int> ("127.0.0.1"' 1025)' Buffer.GetBuffer (_recvBuffer));  }  
Magic Number,PipeWrench.Lib.MessageHandlers,DefaultMessageHandler,C:\repos\nterry_PipeWrench\PipeWrench\Lib\MessageHandlers\DefaultMessageHandler.cs,MessageReceiveThread,The following statement contains a magic number: MessageRecieved (new KeyValuePair<string' int> ("127.0.0.1"' 1025)' Buffer.GetBuffer (_recvBuffer));  
Magic Number,PipeWrench,Test,C:\repos\nterry_PipeWrench\PipeWrench\Program.cs,Test,The following statement contains a magic number: serviceBinding.CreateTunnel ("Awesome"' new KeyValuePair<string' int> ("127.0.0.1"' 1025));  
Missing Default,PipeWrench.Lib.Util,ExtensionMethods,C:\repos\nterry_PipeWrench\PipeWrench\Lib\Util\ExtensionMethods.cs,GetStr,The following switch statement is missing a default case: switch (ipAddress.AddressFamily) {  case AddressFamily.InterNetwork:  	sb.AppendFormat ("{0}."' octet);  	break;  case AddressFamily.InterNetworkV6:  	sb.AppendFormat ("{0}:"' octet);  	break;  }  
