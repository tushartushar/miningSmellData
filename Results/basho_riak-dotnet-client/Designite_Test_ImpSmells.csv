Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Test.Unit.CRDT,UpdateMapTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\UpdateMapTests.cs,VerifyUpdates,Cyclomatic complexity of the method is 10
Complex Method,Test.Unit.TS,GetTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\GetTests.cs,Should_Parse_Resp,Cyclomatic complexity of the method is 8
Long Identifier,Test.Integration.KV,BucketTypePropertiesTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\KV\BucketTypePropertiesTests.cs,Can_Store_And_Fetch_BucketType_Properties,The length of the parameter storeBucketTypePropertiesResponse is 33.
Long Statement,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_Head,The length of the statement  "            byte[] want = new byte[] { 131' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5' 102' 97' 108' 115' 101' 106 }; " is 121.
Magic Number,Test.Integration.CRDT,UpdateAndFetchHllTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\CRDT\UpdateAndFetchHllTests.cs,Fetching_A_Hll_Produces_Expected_Values,The following statement contains a magic number: Assert.AreEqual(2' response.Cardinality);
Magic Number,Test.Integration.CRDT,UpdateAndFetchHllTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\CRDT\UpdateAndFetchHllTests.cs,Can_Update_A_Hll,The following statement contains a magic number: var update = new UpdateHll.Builder(adds)                  .WithBucketType(BucketType)                  .WithBucket(Bucket)                  .WithKey(key)                  .WithReturnBody(true)                  .WithTimeout(TimeSpan.FromMilliseconds(20000))                  .Build();
Magic Number,Test.Integration.CRDT,UpdateAndFetchHllTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\CRDT\UpdateAndFetchHllTests.cs,Can_Update_A_Hll,The following statement contains a magic number: Assert.AreEqual(3' response.Cardinality);
Magic Number,Test.Integration.CRDT,UpdateAndFetchHllTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\CRDT\UpdateAndFetchHllTests.cs,SaveHll,The following statement contains a magic number: var updateBuilder = new UpdateHll.Builder(DefaultAdds)                  .WithBucketType(BucketType)                  .WithBucket(Bucket)                  .WithTimeout(TimeSpan.FromMilliseconds(20000));
Magic Number,Test.Integration.CRDT,UpdateAndFetchGSetTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\CRDT\UpdateAndFetchGSetTests.cs,Can_Update_A_GSet,The following statement contains a magic number: var update = new UpdateGSet.Builder(adds)                  .WithBucketType(BucketType)                  .WithBucket(Bucket)                  .WithKey(key)                  .WithContext(resp.Context)                  .WithReturnBody(true)                  .WithTimeout(TimeSpan.FromMilliseconds(20000))                  .Build();
Magic Number,Test.Integration.CRDT,UpdateAndFetchGSetTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\CRDT\UpdateAndFetchGSetTests.cs,SaveGSet,The following statement contains a magic number: var updateBuilder = new UpdateGSet.Builder(DefaultAdds)                  .WithBucketType(BucketType)                  .WithBucket(Bucket)                  .WithTimeout(TimeSpan.FromMilliseconds(20000));
Magic Number,Test.Integration.CRDT,UpdateAndFetchSetTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\CRDT\UpdateAndFetchSetTests.cs,Can_Update_A_Set,The following statement contains a magic number: var update = new UpdateSet.Builder(adds' removes)                  .WithBucketType(BucketType)                  .WithBucket(Bucket)                  .WithKey(key)                  .WithContext(resp.Context)                  .WithReturnBody(true)                  .WithTimeout(TimeSpan.FromMilliseconds(20000))                  .Build();
Magic Number,Test.Integration.CRDT,UpdateAndFetchSetTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\CRDT\UpdateAndFetchSetTests.cs,SaveSet,The following statement contains a magic number: var updateBuilder = new UpdateSet.Builder(DefaultAdds' null)                  .WithBucketType(BucketType)                  .WithBucket(Bucket)                  .WithTimeout(TimeSpan.FromMilliseconds(20000));
Magic Number,Test.Integration.CRDT,UpdateAndFetchCounterTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\CRDT\UpdateAndFetchCounterTests.cs,Can_Update_A_Counter,The following statement contains a magic number: var update = new UpdateCounter.Builder(DefaultIncrement)                  .WithBucketType(BucketType)                  .WithBucket(Bucket)                  .WithKey(key)                  .WithReturnBody(true)                  .WithTimeout(TimeSpan.FromMilliseconds(20000))                  .Build();
Magic Number,Test.Integration.CRDT,UpdateAndFetchCounterTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\CRDT\UpdateAndFetchCounterTests.cs,Can_Update_A_Counter,The following statement contains a magic number: Assert.AreEqual(20' response.Value);
Magic Number,Test.Integration.CRDT,UpdateAndFetchCounterTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\CRDT\UpdateAndFetchCounterTests.cs,SaveCounter,The following statement contains a magic number: var updateBuilder = new UpdateCounter.Builder(DefaultIncrement)                  .WithBucketType(BucketType)                  .WithBucket(Bucket)                  .WithTimeout(TimeSpan.FromMilliseconds(20000));
Magic Number,Test.Integration.CRDT,UpdateAndFetchMapTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\CRDT\UpdateAndFetchMapTests.cs,Fetching_A_Map_Produces_Expected_Values,The following statement contains a magic number: Assert.AreEqual(2' map2.Counters["counter_1"]);
Magic Number,Test.Integration.CRDT,UpdateAndFetchMapTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\CRDT\UpdateAndFetchMapTests.cs,Fetching_A_Map_Produces_Expected_Values,The following statement contains a magic number: Assert.AreEqual(3' map3.Counters["counter_1"]);
Magic Number,Test.Integration.CRDT,UpdateAndFetchMapTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\CRDT\UpdateAndFetchMapTests.cs,Can_Remove_Data_From_A_Map,The following statement contains a magic number: var update = new UpdateMap.Builder(mapOp)                  .WithBucketType(BucketType)                  .WithBucket(Bucket)                  .WithKey(key)                  .WithContext(r.Context)                  .WithReturnBody(true)                  .WithTimeout(TimeSpan.FromMilliseconds(20000))                  .Build();
Magic Number,Test.Integration.CRDT,UpdateAndFetchMapTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\CRDT\UpdateAndFetchMapTests.cs,SaveMap,The following statement contains a magic number: map_2.IncrementCounter("counter_1"' 2)                  .AddToSet("set_1"' "value_1")                  .SetRegister("register_1"' "register_value_1")                  .SetFlag("flag_1"' true);
Magic Number,Test.Integration.CRDT,UpdateAndFetchMapTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\CRDT\UpdateAndFetchMapTests.cs,SaveMap,The following statement contains a magic number: map_3.IncrementCounter("counter_1"' 3);
Magic Number,Test.Integration.CRDT,UpdateAndFetchMapTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\CRDT\UpdateAndFetchMapTests.cs,SaveMap,The following statement contains a magic number: var updateBuilder = new UpdateMap.Builder(mapOp)                  .WithBucketType(BucketType)                  .WithBucket(Bucket)                  .WithReturnBody(true)                  .WithTimeout(TimeSpan.FromMilliseconds(20000));
Magic Number,Test.Integration.KV,BucketTypePropertiesTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\KV\BucketTypePropertiesTests.cs,Setup,The following statement contains a magic number: RiakMinVersion(2' 0' 0);
Magic Number,Test.Integration.KV,BucketTypePropertiesTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\KV\BucketTypePropertiesTests.cs,Should_Not_Store_For_Default_BucketType,The following statement contains a magic number: RiakBucketProperties props = new RiakBucketProperties().SetHllPrecision(16);
Magic Number,Test.Integration.KV,BucketTypePropertiesTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\KV\BucketTypePropertiesTests.cs,Can_Fetch_BucketType_Properties,The following statement contains a magic number: Assert.AreEqual(3' (int)properties.NVal);
Magic Number,Test.Integration.KV,BucketTypePropertiesTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\KV\BucketTypePropertiesTests.cs,Can_Store_And_Fetch_BucketType_Properties,The following statement contains a magic number: var nval4Props = new RiakBucketProperties().SetNVal(new NVal(4));
Magic Number,Test.Integration.KV,BucketTypePropertiesTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\KV\BucketTypePropertiesTests.cs,Can_Store_And_Fetch_BucketType_Properties,The following statement contains a magic number: Assert.AreEqual(4' (int)fetchResponse.Value.NVal);
Magic Number,Test.Integration.KV,BucketTypePropertiesTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\KV\BucketTypePropertiesTests.cs,Can_Store_And_Fetch_BucketType_Properties,The following statement contains a magic number: var nval3Props = new RiakBucketProperties().SetNVal(new NVal(3));
Magic Number,Test.Integration.KV,FetchPreflistTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\KV\FetchPreflistTests.cs,Can_Fetch_Preflist,The following statement contains a magic number: RiakMinVersion(2' 1' 0);
Magic Number,Test.Integration.KV,FetchPreflistTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\KV\FetchPreflistTests.cs,Can_Fetch_Preflist,The following statement contains a magic number: Assert.AreEqual(3' response.Value.Count());
Magic Number,Test.Integration.TS,TimeseriesTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\TS\TimeseriesTests.cs,Query_Table_Description,The following statement contains a magic number: Assert.True(columnCount >= 5 && columnCount <= 8);
Magic Number,Test.Integration.TS,TimeseriesTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\TS\TimeseriesTests.cs,Query_Table_Description,The following statement contains a magic number: Assert.True(columnCount >= 5 && columnCount <= 8);
Magic Number,Test.Integration.TS,TimeseriesTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\TS\TimeseriesTests.cs,List_Keys_In_Table,The following statement contains a magic number: Assert.AreEqual(4' i);
Magic Number,Test.Integration.TS,TimeseriesTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\TS\TimeseriesTests.cs,Test_List_Key_With_Blob_Key_Cell,The following statement contains a magic number: Row testRow = new Row(                  new List<Cell>                  {                      new Cell(new byte[] { 0x0' 0x1' 0x2' 0x3' 0x4' 0x5' 0x6' 0x7 }' ColumnType.Blob)'                      new Cell(1443806900000' true)                  });
Magic Number,Test.Integration.TS,TimeseriesTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\TS\TimeseriesTests.cs,Test_List_Key_With_Blob_Key_Cell,The following statement contains a magic number: Assert.AreEqual(2' keyCells.Count);
Magic Number,Test.Integration.TS,TimeseriesTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Integration\TS\TimeseriesTests.cs,Test_List_Key_With_Blob_Key_Cell,The following statement contains a magic number: Assert.AreEqual(2' getCells.Length);
Magic Number,Test.Unit.CRDT,FetchHllTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\FetchHllTests.cs,Should_Build_DtFetchReq_Correctly,The following statement contains a magic number: var fetch = new FetchHll.Builder()                  .WithBucketType(BucketType)                  .WithBucket(Bucket)                  .WithKey(Key)                  .WithR((Quorum)1)                  .WithPR((Quorum)2)                  .WithNotFoundOK(true)                  .WithBasicQuorum(true)                  .WithTimeout(TimeSpan.FromMilliseconds(20000))                  .Build();
Magic Number,Test.Unit.CRDT,FetchHllTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\FetchHllTests.cs,Should_Build_DtFetchReq_Correctly,The following statement contains a magic number: var fetch = new FetchHll.Builder()                  .WithBucketType(BucketType)                  .WithBucket(Bucket)                  .WithKey(Key)                  .WithR((Quorum)1)                  .WithPR((Quorum)2)                  .WithNotFoundOK(true)                  .WithBasicQuorum(true)                  .WithTimeout(TimeSpan.FromMilliseconds(20000))                  .Build();
Magic Number,Test.Unit.CRDT,FetchHllTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\FetchHllTests.cs,Should_Build_DtFetchReq_Correctly,The following statement contains a magic number: Assert.AreEqual(2' protobuf.pr);
Magic Number,Test.Unit.CRDT,FetchHllTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\FetchHllTests.cs,Should_Build_DtFetchReq_Correctly,The following statement contains a magic number: Assert.AreEqual(20000' protobuf.timeout);
Magic Number,Test.Unit.CRDT,FetchHllTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\FetchHllTests.cs,Should_Construct_HllResponse_From_DtFetchResp,The following statement contains a magic number: value.hll_value = 42;
Magic Number,Test.Unit.CRDT,FetchHllTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\FetchHllTests.cs,Should_Construct_HllResponse_From_DtFetchResp,The following statement contains a magic number: Assert.AreEqual(42' fetch.Response.Value);
Magic Number,Test.Unit.CRDT,FetchSetTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\FetchSetTests.cs,Should_Build_DtFetchReq_Correctly,The following statement contains a magic number: var fetch = new FetchSet.Builder()                  .WithBucketType(BucketType)                  .WithBucket(Bucket)                  .WithKey(Key)                  .WithR((Quorum)1)                  .WithPR((Quorum)2)                  .WithNotFoundOK(true)                  .WithBasicQuorum(true)                  .WithTimeout(TimeSpan.FromMilliseconds(20000))                  .Build();
Magic Number,Test.Unit.CRDT,FetchSetTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\FetchSetTests.cs,Should_Build_DtFetchReq_Correctly,The following statement contains a magic number: var fetch = new FetchSet.Builder()                  .WithBucketType(BucketType)                  .WithBucket(Bucket)                  .WithKey(Key)                  .WithR((Quorum)1)                  .WithPR((Quorum)2)                  .WithNotFoundOK(true)                  .WithBasicQuorum(true)                  .WithTimeout(TimeSpan.FromMilliseconds(20000))                  .Build();
Magic Number,Test.Unit.CRDT,FetchSetTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\FetchSetTests.cs,Should_Build_DtFetchReq_Correctly,The following statement contains a magic number: Assert.AreEqual(2' protobuf.pr);
Magic Number,Test.Unit.CRDT,FetchSetTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\FetchSetTests.cs,Should_Build_DtFetchReq_Correctly,The following statement contains a magic number: Assert.AreEqual(20000' protobuf.timeout);
Magic Number,Test.Unit.CRDT,FetchMapTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\FetchMapTests.cs,Should_Build_DtFetchReq_Correctly,The following statement contains a magic number: var fetch = new FetchMap.Builder()                  .WithBucketType(BucketType)                  .WithBucket(Bucket)                  .WithKey(Key)                  .WithR((Quorum)1)                  .WithPR((Quorum)2)                  .WithNotFoundOK(true)                  .WithBasicQuorum(true)                  .WithTimeout(TimeSpan.FromMilliseconds(20000))                  .Build();
Magic Number,Test.Unit.CRDT,FetchMapTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\FetchMapTests.cs,Should_Build_DtFetchReq_Correctly,The following statement contains a magic number: var fetch = new FetchMap.Builder()                  .WithBucketType(BucketType)                  .WithBucket(Bucket)                  .WithKey(Key)                  .WithR((Quorum)1)                  .WithPR((Quorum)2)                  .WithNotFoundOK(true)                  .WithBasicQuorum(true)                  .WithTimeout(TimeSpan.FromMilliseconds(20000))                  .Build();
Magic Number,Test.Unit.CRDT,FetchMapTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\FetchMapTests.cs,Should_Build_DtFetchReq_Correctly,The following statement contains a magic number: Assert.AreEqual(2' protobuf.pr);
Magic Number,Test.Unit.CRDT,FetchMapTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\FetchMapTests.cs,Should_Build_DtFetchReq_Correctly,The following statement contains a magic number: Assert.AreEqual(20000' protobuf.timeout);
Magic Number,Test.Unit.CRDT,FetchMapTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\FetchMapTests.cs,Should_Construct_MapResponse_From_DtFetchResp,The following statement contains a magic number: Func<IEnumerable<MapEntry>> createMapEntries = () =>              {                  var mapEntries = new List<MapEntry>();                    var mapField = new MapField();                  mapField.type = MapField.MapFieldType.COUNTER;                  mapField.name = new RiakString("counter_1");                  var mapEntry = new MapEntry();                  mapEntry.field = mapField;                  mapEntry.counter_value = 50;                  mapEntries.Add(mapEntry);                    mapField = new MapField();                  mapField.type = MapField.MapFieldType.SET;                  mapField.name = new RiakString("set_1");                  mapEntry = new MapEntry();                  mapEntry.field = mapField;                  mapEntry.set_value.Add(RiakString.ToBytes("value_1"));                  mapEntry.set_value.Add(RiakString.ToBytes("value_2"));                  mapEntries.Add(mapEntry);                    mapField = new MapField();                  mapField.type = MapField.MapFieldType.REGISTER;                  mapField.name = new RiakString("register_1");                  mapEntry = new MapEntry();                  mapEntry.field = mapField;                  mapEntry.register_value = RiakString.ToBytes("1234");                  mapEntries.Add(mapEntry);                    mapField = new MapField();                  mapField.type = MapField.MapFieldType.FLAG;                  mapField.name = new RiakString("flag_1");                  mapEntry = new MapEntry();                  mapEntry.field = mapField;                  mapEntry.flag_value = true;                  mapEntries.Add(mapEntry);                    return mapEntries;              };
Magic Number,Test.Unit.CRDT,FetchMapTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\FetchMapTests.cs,Should_Construct_MapResponse_From_DtFetchResp,The following statement contains a magic number: Action<Map> verifyMap = (map) =>              {                  Assert.AreEqual(50' map.Counters["counter_1"]);                  Assert.AreEqual(RiakString.ToBytes("value_1")' map.Sets["set_1"][0]);                  Assert.AreEqual(RiakString.ToBytes("value_2")' map.Sets["set_1"][1]);                  Assert.AreEqual(RiakString.ToBytes("1234")' map.Registers["register_1"]);                  Assert.IsTrue(map.Flags["flag_1"]);              };
Magic Number,Test.Unit.CRDT,FetchCounterTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\FetchCounterTests.cs,Should_Build_DtFetchReq_Correctly,The following statement contains a magic number: var fetch = new FetchCounter.Builder()                  .WithBucketType(BucketType)                  .WithBucket(Bucket)                  .WithKey(Key)                  .WithR((Quorum)1)                  .WithPR((Quorum)2)                  .WithNotFoundOK(true)                  .WithBasicQuorum(true)                  .WithTimeout(TimeSpan.FromMilliseconds(20000))                  .Build();
Magic Number,Test.Unit.CRDT,FetchCounterTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\FetchCounterTests.cs,Should_Build_DtFetchReq_Correctly,The following statement contains a magic number: var fetch = new FetchCounter.Builder()                  .WithBucketType(BucketType)                  .WithBucket(Bucket)                  .WithKey(Key)                  .WithR((Quorum)1)                  .WithPR((Quorum)2)                  .WithNotFoundOK(true)                  .WithBasicQuorum(true)                  .WithTimeout(TimeSpan.FromMilliseconds(20000))                  .Build();
Magic Number,Test.Unit.CRDT,FetchCounterTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\FetchCounterTests.cs,Should_Build_DtFetchReq_Correctly,The following statement contains a magic number: Assert.AreEqual(2' protobuf.pr);
Magic Number,Test.Unit.CRDT,FetchCounterTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\FetchCounterTests.cs,Should_Build_DtFetchReq_Correctly,The following statement contains a magic number: Assert.AreEqual(20000' protobuf.timeout);
Magic Number,Test.Unit.CRDT,FetchCounterTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\FetchCounterTests.cs,Should_Construct_CounterResponse_From_DtFetchResp,The following statement contains a magic number: value.counter_value = 42;
Magic Number,Test.Unit.CRDT,FetchCounterTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\FetchCounterTests.cs,Should_Construct_CounterResponse_From_DtFetchResp,The following statement contains a magic number: Assert.AreEqual(42' fetch.Response.Value);
Magic Number,Test.Unit.CRDT,UpdateHllTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\UpdateHllTests.cs,Should_Build_DtUpdateReq_Correctly,The following statement contains a magic number: var q2 = new Quorum(2);
Magic Number,Test.Unit.CRDT,UpdateHllTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\UpdateHllTests.cs,Should_Build_DtUpdateReq_Correctly,The following statement contains a magic number: var q3 = new Quorum(3);
Magic Number,Test.Unit.CRDT,UpdateHllTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\UpdateHllTests.cs,Should_Build_DtUpdateReq_Correctly,The following statement contains a magic number: updateHllCommandBuilder                  .WithBucketType(BucketType)                  .WithBucket(Bucket)                  .WithKey(Key)                  .WithW(q3)                  .WithPW(q1)                  .WithDW(q2)                  .WithReturnBody(true)                  .WithTimeout(TimeSpan.FromSeconds(20));
Magic Number,Test.Unit.CRDT,UpdateHllTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\UpdateHllTests.cs,Should_Build_DtUpdateReq_Correctly,The following statement contains a magic number: Assert.AreEqual(20000' protobuf.timeout);
Magic Number,Test.Unit.CRDT,UpdateHllTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\UpdateHllTests.cs,Should_Construct_HllResponse_From_DtUpdateResp,The following statement contains a magic number: updateResp.hll_value = 42;
Magic Number,Test.Unit.CRDT,UpdateHllTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\UpdateHllTests.cs,Should_Construct_HllResponse_From_DtUpdateResp,The following statement contains a magic number: Assert.AreEqual(42' response.Value);
Magic Number,Test.Unit.CRDT,UpdateGSetTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\UpdateGSetTests.cs,Should_Build_DtUpdateReq_Correctly,The following statement contains a magic number: var q2 = new Quorum(2);
Magic Number,Test.Unit.CRDT,UpdateGSetTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\UpdateGSetTests.cs,Should_Build_DtUpdateReq_Correctly,The following statement contains a magic number: var q3 = new Quorum(3);
Magic Number,Test.Unit.CRDT,UpdateGSetTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\UpdateGSetTests.cs,Should_Build_DtUpdateReq_Correctly,The following statement contains a magic number: updateSetCommandBuilder                  .WithBucketType(BucketType)                  .WithBucket(Bucket)                  .WithKey(Key)                  .WithW(q3)                  .WithPW(q1)                  .WithDW(q2)                  .WithReturnBody(true)                  .WithIncludeContext(false)                  .WithContext(Context)                  .WithTimeout(TimeSpan.FromSeconds(20));
Magic Number,Test.Unit.CRDT,UpdateGSetTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\UpdateGSetTests.cs,Should_Build_DtUpdateReq_Correctly,The following statement contains a magic number: Assert.AreEqual(20000' protobuf.timeout);
Magic Number,Test.Unit.CRDT,UpdateSetTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\UpdateSetTests.cs,Should_Build_DtUpdateReq_Correctly,The following statement contains a magic number: var q2 = new Quorum(2);
Magic Number,Test.Unit.CRDT,UpdateSetTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\UpdateSetTests.cs,Should_Build_DtUpdateReq_Correctly,The following statement contains a magic number: var q3 = new Quorum(3);
Magic Number,Test.Unit.CRDT,UpdateSetTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\UpdateSetTests.cs,Should_Build_DtUpdateReq_Correctly,The following statement contains a magic number: updateSetCommandBuilder                  .WithBucketType(BucketType)                  .WithBucket(Bucket)                  .WithKey(Key)                  .WithW(q3)                  .WithPW(q1)                  .WithDW(q2)                  .WithReturnBody(true)                  .WithIncludeContext(false)                  .WithContext(Context)                  .WithTimeout(TimeSpan.FromSeconds(20));
Magic Number,Test.Unit.CRDT,UpdateSetTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\UpdateSetTests.cs,Should_Build_DtUpdateReq_Correctly,The following statement contains a magic number: Assert.AreEqual(20000' protobuf.timeout);
Magic Number,Test.Unit.CRDT,UpdateCounterTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\UpdateCounterTests.cs,Should_Build_DtUpdateReq_Correctly,The following statement contains a magic number: var q2 = new Quorum(2);
Magic Number,Test.Unit.CRDT,UpdateCounterTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\UpdateCounterTests.cs,Should_Build_DtUpdateReq_Correctly,The following statement contains a magic number: var q3 = new Quorum(3);
Magic Number,Test.Unit.CRDT,UpdateCounterTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\UpdateCounterTests.cs,Should_Build_DtUpdateReq_Correctly,The following statement contains a magic number: updateCounterCommandBuilder                  .WithBucketType(BucketType)                  .WithBucket(Bucket)                  .WithKey(Key)                  .WithW(q3)                  .WithPW(q1)                  .WithDW(q2)                  .WithReturnBody(true)                  .WithIncludeContext(false)                  .WithTimeout(TimeSpan.FromSeconds(20));
Magic Number,Test.Unit.CRDT,UpdateCounterTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\UpdateCounterTests.cs,Should_Build_DtUpdateReq_Correctly,The following statement contains a magic number: Assert.AreEqual(20000' protobuf.timeout);
Magic Number,Test.Unit.CRDT,UpdateMapTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\UpdateMapTests.cs,Should_Build_DtUpdateReq_Correctly,The following statement contains a magic number: var mapOp = new UpdateMap.MapOperation()                  .IncrementCounter("counter_1"' 50)                  .RemoveCounter("counter_2")                  .AddToSet("set_1"' "set_value_1")                  .RemoveFromSet("set_2"' "set_value_2")                  .RemoveSet("set_3")                  .SetRegister("register_1"' "register_value_1")                  .RemoveRegister("register_2")                  .SetFlag("flag_1"' true)                  .RemoveFlag("flag_2")                  .RemoveMap("map_3");
Magic Number,Test.Unit.CRDT,UpdateMapTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\UpdateMapTests.cs,Should_Build_DtUpdateReq_Correctly,The following statement contains a magic number: mapOp.Map("map_2").IncrementCounter("counter_1"' 50)                  .RemoveCounter("counter_2")                  .AddToSet("set_1"' "set_value_1")                  .RemoveFromSet("set_2"' "set_value_2")                  .RemoveSet("set_3")                  .SetRegister("register_1"' "register_value_1")                  .RemoveRegister("register_2")                  .SetFlag("flag_1"' true)                  .RemoveFlag("flag_2")                  .RemoveMap("map_3");
Magic Number,Test.Unit.CRDT,UpdateMapTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\UpdateMapTests.cs,Should_Build_DtUpdateReq_Correctly,The following statement contains a magic number: var q2 = new Quorum(2);
Magic Number,Test.Unit.CRDT,UpdateMapTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\UpdateMapTests.cs,Should_Build_DtUpdateReq_Correctly,The following statement contains a magic number: var q3 = new Quorum(3);
Magic Number,Test.Unit.CRDT,UpdateMapTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\UpdateMapTests.cs,Should_Build_DtUpdateReq_Correctly,The following statement contains a magic number: updateMapCommandBuilder                  .WithBucketType(BucketType)                  .WithBucket(Bucket)                  .WithKey(Key)                  .WithContext(Context)                  .WithW(q3)                  .WithPW(q1)                  .WithDW(q2)                  .WithReturnBody(true)                  .WithIncludeContext(false)                  .WithTimeout(TimeSpan.FromSeconds(20));
Magic Number,Test.Unit.CRDT,UpdateMapTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\UpdateMapTests.cs,Should_Build_DtUpdateReq_Correctly,The following statement contains a magic number: Assert.AreEqual(20000' protobuf.timeout);
Magic Number,Test.Unit.CRDT,UpdateMapTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\UpdateMapTests.cs,Should_Construct_MapResponse_From_DtUpdateResp,The following statement contains a magic number: Func<IEnumerable<MapEntry>> createMapEntries = () =>              {                  var mapEntries = new List<MapEntry>();                    var mapField = new MapField();                  mapField.type = MapField.MapFieldType.COUNTER;                  mapField.name = new RiakString("counter_1");                  var mapEntry = new MapEntry();                  mapEntry.field = mapField;                  mapEntry.counter_value = 50;                  mapEntries.Add(mapEntry);                    mapField = new MapField();                  mapField.type = MapField.MapFieldType.SET;                  mapField.name = new RiakString("set_1");                  mapEntry = new MapEntry();                  mapEntry.field = mapField;                  mapEntry.set_value.Add(RiakString.ToBytes("value_1"));                  mapEntry.set_value.Add(RiakString.ToBytes("value_2"));                  mapEntries.Add(mapEntry);                    mapField = new MapField();                  mapField.type = MapField.MapFieldType.REGISTER;                  mapField.name = new RiakString("register_1");                  mapEntry = new MapEntry();                  mapEntry.field = mapField;                  mapEntry.register_value = RiakString.ToBytes("1234");                  mapEntries.Add(mapEntry);                    mapField = new MapField();                  mapField.type = MapField.MapFieldType.FLAG;                  mapField.name = new RiakString("flag_1");                  mapEntry = new MapEntry();                  mapEntry.field = mapField;                  mapEntry.flag_value = true;                  mapEntries.Add(mapEntry);                    return mapEntries;              };
Magic Number,Test.Unit.CRDT,UpdateMapTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\UpdateMapTests.cs,Should_Construct_MapResponse_From_DtUpdateResp,The following statement contains a magic number: Action<Map> verifyMap = (map) =>              {                  Assert.AreEqual(50' map.Counters["counter_1"]);                  Assert.AreEqual(RiakString.ToBytes("value_1")' map.Sets["set_1"][0]);                  Assert.AreEqual(RiakString.ToBytes("value_2")' map.Sets["set_1"][1]);                  Assert.AreEqual(RiakString.ToBytes("1234")' map.Registers["register_1"]);                  Assert.IsTrue(map.Flags["flag_1"]);              };
Magic Number,Test.Unit.CRDT,UpdateMapTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\UpdateMapTests.cs,VerifyRemoves,The following statement contains a magic number: Assert.AreEqual(5' mapFields.Count);
Magic Number,Test.Unit.CRDT,UpdateMapTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\CRDT\UpdateMapTests.cs,VerifyUpdates,The following statement contains a magic number: switch (update.field.type)                  {                      case MapField.MapFieldType.COUNTER:                          Assert.AreEqual(Encoding.UTF8.GetBytes("counter_1")' update.field.name);                          Assert.AreEqual(50' update.counter_op.increment);                          counterIncremented = true;                          break;                      case MapField.MapFieldType.SET:                          if (!EnumerableUtil.IsNullOrEmpty(update.set_op.adds))                          {                              Assert.AreEqual(Encoding.UTF8.GetBytes("set_1")' update.field.name);                              Assert.AreEqual(Encoding.UTF8.GetBytes("set_value_1")' update.set_op.adds[0]);                              setAddedTo = true;                          }                          else                          {                              Assert.AreEqual(Encoding.UTF8.GetBytes("set_2")' update.field.name);                              Assert.AreEqual(Encoding.UTF8.GetBytes("set_value_2")' update.set_op.removes[0]);                              setRemovedFrom = true;                          }                            break;                      case MapField.MapFieldType.MAP:                          if (expectMapUpdate)                          {                              Assert.AreEqual(Encoding.UTF8.GetBytes("map_2")' update.field.name);                              mapAdded = true;                              mapUpdate = update;                          }                            break;                      case MapField.MapFieldType.REGISTER:                          Assert.AreEqual(Encoding.UTF8.GetBytes("register_1")' update.field.name);                          Assert.AreEqual(Encoding.UTF8.GetBytes("register_value_1")' update.register_op);                          registerSet = true;                          break;                      case MapField.MapFieldType.FLAG:                          Assert.AreEqual(Encoding.UTF8.GetBytes("flag_1")' update.field.name);                          Assert.AreEqual(MapUpdate.FlagOp.ENABLE' update.flag_op);                          flagSet = true;                          break;                      default:                          break;                  }
Magic Number,Test.Unit.Erlang,OtpInputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpInputStreamTests.cs,Read_Throws_At_End,The following statement contains a magic number: byte[] inbuf = { 0' 1' 2' 3 };
Magic Number,Test.Unit.Erlang,OtpInputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpInputStreamTests.cs,Read_Throws_At_End,The following statement contains a magic number: byte[] inbuf = { 0' 1' 2' 3 };
Magic Number,Test.Unit.Erlang,OtpInputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpInputStreamTests.cs,Read_Zero_Throws_At_End,The following statement contains a magic number: byte[] inbuf = { 0' 1' 2' 3 };
Magic Number,Test.Unit.Erlang,OtpInputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpInputStreamTests.cs,Read_Zero_Throws_At_End,The following statement contains a magic number: byte[] inbuf = { 0' 1' 2' 3 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_Byte,The following statement contains a magic number: byte want = 123;
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_Atom,The following statement contains a magic number: byte[] want = { 131' 100' 0' 18' 102' 114' 97' 122' 122' 108' 101' 100' 97' 122' 122' 108' 101' 45' 49' 50' 51' 52 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_Atom,The following statement contains a magic number: byte[] want = { 131' 100' 0' 18' 102' 114' 97' 122' 122' 108' 101' 100' 97' 122' 122' 108' 101' 45' 49' 50' 51' 52 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_Atom,The following statement contains a magic number: byte[] want = { 131' 100' 0' 18' 102' 114' 97' 122' 122' 108' 101' 100' 97' 122' 122' 108' 101' 45' 49' 50' 51' 52 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_Atom,The following statement contains a magic number: byte[] want = { 131' 100' 0' 18' 102' 114' 97' 122' 122' 108' 101' 100' 97' 122' 122' 108' 101' 45' 49' 50' 51' 52 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_Atom,The following statement contains a magic number: byte[] want = { 131' 100' 0' 18' 102' 114' 97' 122' 122' 108' 101' 100' 97' 122' 122' 108' 101' 45' 49' 50' 51' 52 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_Atom,The following statement contains a magic number: byte[] want = { 131' 100' 0' 18' 102' 114' 97' 122' 122' 108' 101' 100' 97' 122' 122' 108' 101' 45' 49' 50' 51' 52 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_Atom,The following statement contains a magic number: byte[] want = { 131' 100' 0' 18' 102' 114' 97' 122' 122' 108' 101' 100' 97' 122' 122' 108' 101' 45' 49' 50' 51' 52 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_Atom,The following statement contains a magic number: byte[] want = { 131' 100' 0' 18' 102' 114' 97' 122' 122' 108' 101' 100' 97' 122' 122' 108' 101' 45' 49' 50' 51' 52 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_Atom,The following statement contains a magic number: byte[] want = { 131' 100' 0' 18' 102' 114' 97' 122' 122' 108' 101' 100' 97' 122' 122' 108' 101' 45' 49' 50' 51' 52 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_Atom,The following statement contains a magic number: byte[] want = { 131' 100' 0' 18' 102' 114' 97' 122' 122' 108' 101' 100' 97' 122' 122' 108' 101' 45' 49' 50' 51' 52 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_Atom,The following statement contains a magic number: byte[] want = { 131' 100' 0' 18' 102' 114' 97' 122' 122' 108' 101' 100' 97' 122' 122' 108' 101' 45' 49' 50' 51' 52 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_Atom,The following statement contains a magic number: byte[] want = { 131' 100' 0' 18' 102' 114' 97' 122' 122' 108' 101' 100' 97' 122' 122' 108' 101' 45' 49' 50' 51' 52 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_Atom,The following statement contains a magic number: byte[] want = { 131' 100' 0' 18' 102' 114' 97' 122' 122' 108' 101' 100' 97' 122' 122' 108' 101' 45' 49' 50' 51' 52 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_Atom,The following statement contains a magic number: byte[] want = { 131' 100' 0' 18' 102' 114' 97' 122' 122' 108' 101' 100' 97' 122' 122' 108' 101' 45' 49' 50' 51' 52 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_Atom,The following statement contains a magic number: byte[] want = { 131' 100' 0' 18' 102' 114' 97' 122' 122' 108' 101' 100' 97' 122' 122' 108' 101' 45' 49' 50' 51' 52 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_Atom,The following statement contains a magic number: byte[] want = { 131' 100' 0' 18' 102' 114' 97' 122' 122' 108' 101' 100' 97' 122' 122' 108' 101' 45' 49' 50' 51' 52 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_Atom,The following statement contains a magic number: byte[] want = { 131' 100' 0' 18' 102' 114' 97' 122' 122' 108' 101' 100' 97' 122' 122' 108' 101' 45' 49' 50' 51' 52 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_Atom,The following statement contains a magic number: byte[] want = { 131' 100' 0' 18' 102' 114' 97' 122' 122' 108' 101' 100' 97' 122' 122' 108' 101' 45' 49' 50' 51' 52 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_Atom,The following statement contains a magic number: byte[] want = { 131' 100' 0' 18' 102' 114' 97' 122' 122' 108' 101' 100' 97' 122' 122' 108' 101' 45' 49' 50' 51' 52 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_Atom,The following statement contains a magic number: byte[] want = { 131' 100' 0' 18' 102' 114' 97' 122' 122' 108' 101' 100' 97' 122' 122' 108' 101' 45' 49' 50' 51' 52 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_Atom,The following statement contains a magic number: byte[] want = { 131' 100' 0' 18' 102' 114' 97' 122' 122' 108' 101' 100' 97' 122' 122' 108' 101' 45' 49' 50' 51' 52 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_Binary,The following statement contains a magic number: byte[] rnd = new byte[65536];
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_Head,The following statement contains a magic number: byte[] want = new byte[] { 131' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5' 102' 97' 108' 115' 101' 106 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_Head,The following statement contains a magic number: byte[] want = new byte[] { 131' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5' 102' 97' 108' 115' 101' 106 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_Head,The following statement contains a magic number: byte[] want = new byte[] { 131' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5' 102' 97' 108' 115' 101' 106 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_Head,The following statement contains a magic number: byte[] want = new byte[] { 131' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5' 102' 97' 108' 115' 101' 106 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_Head,The following statement contains a magic number: byte[] want = new byte[] { 131' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5' 102' 97' 108' 115' 101' 106 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_Head,The following statement contains a magic number: byte[] want = new byte[] { 131' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5' 102' 97' 108' 115' 101' 106 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_Head,The following statement contains a magic number: byte[] want = new byte[] { 131' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5' 102' 97' 108' 115' 101' 106 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_Head,The following statement contains a magic number: byte[] want = new byte[] { 131' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5' 102' 97' 108' 115' 101' 106 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_Head,The following statement contains a magic number: byte[] want = new byte[] { 131' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5' 102' 97' 108' 115' 101' 106 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_Head,The following statement contains a magic number: byte[] want = new byte[] { 131' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5' 102' 97' 108' 115' 101' 106 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_Head,The following statement contains a magic number: byte[] want = new byte[] { 131' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5' 102' 97' 108' 115' 101' 106 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_Head,The following statement contains a magic number: byte[] want = new byte[] { 131' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5' 102' 97' 108' 115' 101' 106 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_Head,The following statement contains a magic number: byte[] want = new byte[] { 131' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5' 102' 97' 108' 115' 101' 106 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_Head,The following statement contains a magic number: byte[] want = new byte[] { 131' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5' 102' 97' 108' 115' 101' 106 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_Head,The following statement contains a magic number: byte[] want = new byte[] { 131' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5' 102' 97' 108' 115' 101' 106 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_Head,The following statement contains a magic number: byte[] want = new byte[] { 131' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5' 102' 97' 108' 115' 101' 106 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_Head,The following statement contains a magic number: byte[] want = new byte[] { 131' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5' 102' 97' 108' 115' 101' 106 };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_Head,The following statement contains a magic number: os.WriteListHead(2);
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: byte[] want = new byte[]              {                  131' 108' 0' 0' 0' 2' 104' 2' 100' 0' 4' 116' 114' 117' 101' 100' 0' 5'                   102' 97' 108' 115' 101' 108' 0' 0' 0' 2' 100' 0' 4' 116' 114' 117' 101'                   100' 0' 5' 102' 97' 108' 115' 101' 106' 106              };
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: os.WriteListHead(2);
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: os.WriteTupleHead(2);
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,Write_List_And_Tuple,The following statement contains a magic number: os.WriteListHead(2);
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,BuildBinBuffer,The following statement contains a magic number: int totalLen = src.Length + 5;
Magic Number,Test.Unit.Erlang,OtpOutputStreamTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\OtpOutputStreamTests.cs,BuildBinBuffer,The following statement contains a magic number: Buffer.BlockCopy(src' 0' dst' 5' src.Length);
Magic Number,Test.Unit.Erlang,TtbErrorDecoderTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\TtbErrorDecoderTests.cs,Can_Parse_RpbErrorResp_In_2_Tuple_With_String,The following statement contains a magic number: os.WriteTupleHead(2);
Magic Number,Test.Unit.Erlang,TtbErrorDecoderTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\TtbErrorDecoderTests.cs,Can_Parse_RpbErrorResp_In_2_Tuple_With_Code,The following statement contains a magic number: os.WriteTupleHead(2);
Magic Number,Test.Unit.Erlang,TtbErrorDecoderTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\Erlang\TtbErrorDecoderTests.cs,Can_Parse_RpbErrorResp_In_3_Tuple,The following statement contains a magic number: os.WriteTupleHead(3);
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,StoreTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\StoreTests.cs,Should_Build_TTB_Req,The following statement contains a magic number: byte[] want =              {                  131' 104' 4' // 4-tuple                      100' 0' 8' 116' 115' 112' 117' 116' 114' 101' 113'                      109' 0' 0' 0' 10' 71' 101' 111' 67' 104' 101' 99' 107' 105' 110'                      106' // empty columns                      108' 0' 0' 0' 2' // 2-list                          104' 6' // 6-tuple (row)                              100' 0' 5' 102' 97' 108' 115' 101' // false atom                              /*                              4> f(Bin)' Bin = <<131'70'64'40'174'20'128'0'0'0>>' binary_to_term(Bin).                              12.34000015258789                              */                              70' 64' 40' 174' 20' 128' 0' 0' 0' // 12.34 float as double' note that this is how .NET calcs it' NOT erl                              97' 32' // small int                              110' 6' 0' 185' 134' 44' 95' 81' 1' // smallbig 1449000732345                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                              109' 0' 0' 0' 6' 102' 111' 111' 98' 97' 114' // binary                          104' 6' // 6-tuple (row)                              100' 0' 4' 116' 114' 117' 101'  // true atom                              70' 64' 76' 99' 215' 0' 0' 0' 0' // 56.78 float as double                              97' 54' // small int                              110' 6' 0' 65' 154' 44' 95' 81' 1' // smallbig 1449000737345                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                              109' 0' 0' 0' 6' 98' 97' 122' 98' 97' 116' // binary                      106 // 2-list end              };
Magic Number,Test.Unit.TS,GetTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\GetTests.cs,Should_Build_Req,The following statement contains a magic number: Assert.True(pb.key[2].sint64_valueSpecified);
Magic Number,Test.Unit.TS,GetTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\GetTests.cs,Should_Build_Req,The following statement contains a magic number: Assert.AreEqual(Cells0[2].Value' pb.key[2].sint64_value);
Magic Number,Test.Unit.TS,GetTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\GetTests.cs,Should_Build_Req,The following statement contains a magic number: Assert.AreEqual(Cells0[2].Value' pb.key[2].sint64_value);
Magic Number,Test.Unit.TS,GetTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\GetTests.cs,Should_Build_Req,The following statement contains a magic number: var dt = Cells0[3].ValueAsDateTime;
Magic Number,Test.Unit.TS,GetTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\GetTests.cs,Should_Build_Req,The following statement contains a magic number: Assert.True(pb.key[3].timestamp_valueSpecified);
Magic Number,Test.Unit.TS,GetTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\GetTests.cs,Should_Build_Req,The following statement contains a magic number: Assert.AreEqual(DateTimeUtil.ToUnixTimeMillis(dt)' pb.key[3].timestamp_value);
Magic Number,Test.Unit.TS,GetTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\GetTests.cs,Should_Build_Req,The following statement contains a magic number: var bytes = Cells0[4].ValueAsBytes;
Magic Number,Test.Unit.TS,GetTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\GetTests.cs,Should_Build_Req,The following statement contains a magic number: Assert.True(pb.key[4].varchar_valueSpecified);
Magic Number,Test.Unit.TS,GetTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\GetTests.cs,Should_Build_Req,The following statement contains a magic number: CollectionAssert.AreEqual(bytes' pb.key[4].varchar_value);
Magic Number,Test.Unit.TS,GetTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\GetTests.cs,Should_Build_Req,The following statement contains a magic number: bytes = Cells0[5].ValueAsBytes;
Magic Number,Test.Unit.TS,GetTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\GetTests.cs,Should_Build_Req,The following statement contains a magic number: Assert.True(pb.key[5].varchar_valueSpecified);
Magic Number,Test.Unit.TS,GetTests,D:\research\architectureSmells\repos\basho_riak-dotnet-client\src\Test\Unit\TS\GetTests.cs,Should_Build_Req,The following statement contains a magic number: CollectionAssert.AreEqual(bytes' pb.key[5].varchar_value);
