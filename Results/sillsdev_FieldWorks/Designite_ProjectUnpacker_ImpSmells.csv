Implementation smell,Namespace,Class,File,Method,Description
Magic Number,SIL.FieldWorks.Test.ProjectUnpacker,Unpacker,C:\repos\sillsdev_FieldWorks\Src\ProjectUnpacker\Unpacker.cs,UnpackFile,The following statement contains a magic number: try  			{  				// Read the binary data from the resource file and unpack it  				ResourceManager resources =  					new ResourceManager("SIL.FieldWorks.Test.ProjectUnpacker." + packedProject'  					System.Reflection.Assembly.GetExecutingAssembly());    				string replacePart = MiscUtils.IsUnix ? unpackLocation :  					unpackLocation.Substring(0' unpackLocation.IndexOf('\\'' 4));  				using (var resourceStream = new MemoryStream((byte[])resources.GetObject(packedProject)))  				{  					using (var zipStream = new ZipInputStream(resourceStream))  					{  						ZipEntry zipEntry;  						while ((zipEntry = zipStream.GetNextEntry()) != null)  						{  							if (zipEntry.IsDirectory)  								continue; // We'll create directories for the files when they are read    							// create directory  							string directoryName = Path.GetDirectoryName(zipEntry.Name);  							DirectoryInfo currDir = Directory.CreateDirectory(Path.Combine(unpackLocation' directoryName));  							string pathname = Path.Combine(currDir.FullName' Path.GetFileName(zipEntry.Name));  							if (File.Exists(pathname))  								continue;    							using (MemoryStream entryStream = new MemoryStream((int)zipEntry.Size))  							{  								int size;  								byte[] data = new byte[2048];  								while (true)  								{  									size = zipStream.Read(data' 0' data.Length);  									if (size > 0)  										// fileStreamWriter.Write(data' 0' size);  										entryStream.Write(data' 0' size);  									else  										break;  								}    								// Because Paratext .ssf files contain a full hard-coded path  								// to the project' we need to change the path that is contained  								// in the file in the zip to be the location to which we are  								// actually unpacking.    								entryStream.Position = 0;  								using (var streamReader = new StreamReader(entryStream))  								{  									using (var streamWriter = new StreamWriter(pathname))  									{  										for (var lineIn = streamReader.ReadLine(); lineIn != null; lineIn = streamReader.ReadLine())  											streamWriter.WriteLine(lineIn.Replace(@"C:\~IWTEST~"' replacePart));  									}  								}  							}  						}  					}  				}  			}  			catch(Exception e)  			{  				Console.Error.WriteLine("Got exception: {0} while unpacking {1}"'  					e.Message' packedProject);  				throw;  			}
Magic Number,SIL.FieldWorks.Test.ProjectUnpacker,Unpacker,C:\repos\sillsdev_FieldWorks\Src\ProjectUnpacker\Unpacker.cs,UnpackFile,The following statement contains a magic number: try  			{  				// Read the binary data from the resource file and unpack it  				ResourceManager resources =  					new ResourceManager("SIL.FieldWorks.Test.ProjectUnpacker." + packedProject'  					System.Reflection.Assembly.GetExecutingAssembly());    				string replacePart = MiscUtils.IsUnix ? unpackLocation :  					unpackLocation.Substring(0' unpackLocation.IndexOf('\\'' 4));  				using (var resourceStream = new MemoryStream((byte[])resources.GetObject(packedProject)))  				{  					using (var zipStream = new ZipInputStream(resourceStream))  					{  						ZipEntry zipEntry;  						while ((zipEntry = zipStream.GetNextEntry()) != null)  						{  							if (zipEntry.IsDirectory)  								continue; // We'll create directories for the files when they are read    							// create directory  							string directoryName = Path.GetDirectoryName(zipEntry.Name);  							DirectoryInfo currDir = Directory.CreateDirectory(Path.Combine(unpackLocation' directoryName));  							string pathname = Path.Combine(currDir.FullName' Path.GetFileName(zipEntry.Name));  							if (File.Exists(pathname))  								continue;    							using (MemoryStream entryStream = new MemoryStream((int)zipEntry.Size))  							{  								int size;  								byte[] data = new byte[2048];  								while (true)  								{  									size = zipStream.Read(data' 0' data.Length);  									if (size > 0)  										// fileStreamWriter.Write(data' 0' size);  										entryStream.Write(data' 0' size);  									else  										break;  								}    								// Because Paratext .ssf files contain a full hard-coded path  								// to the project' we need to change the path that is contained  								// in the file in the zip to be the location to which we are  								// actually unpacking.    								entryStream.Position = 0;  								using (var streamReader = new StreamReader(entryStream))  								{  									using (var streamWriter = new StreamWriter(pathname))  									{  										for (var lineIn = streamReader.ReadLine(); lineIn != null; lineIn = streamReader.ReadLine())  											streamWriter.WriteLine(lineIn.Replace(@"C:\~IWTEST~"' replacePart));  									}  								}  							}  						}  					}  				}  			}  			catch(Exception e)  			{  				Console.Error.WriteLine("Got exception: {0} while unpacking {1}"'  					e.Message' packedProject);  				throw;  			}
