Implementation smell,Namespace,Class,File,Method,Description
Long Method,SIL.FieldWorks.FixData,HomographFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\HomographFixer.cs,FinalFixerInitialization,The method has 101 lines of code.
Long Method,SIL.FieldWorks.FixData,SequenceFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\SequenceFixer.cs,FixElement,The method has 101 lines of code.
Long Method,SIL.FieldWorks.FixData,OriginalFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\FwDataFixer.cs,FixElement,The method has 105 lines of code.
Complex Method,SIL.FieldWorks.FixData,BasicCustomPropertyFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\BasicCustomPropertyFixer.cs,InspectAdditionalFieldsElement,Cyclomatic complexity of the method is 8
Complex Method,SIL.FieldWorks.FixData,GrammaticalSenseFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\GrammaticalSenseFixer.cs,FinalFixerInitialization,Cyclomatic complexity of the method is 10
Complex Method,SIL.FieldWorks.FixData,HomographFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\HomographFixer.cs,FinalFixerInitialization,Cyclomatic complexity of the method is 17
Complex Method,SIL.FieldWorks.FixData,SequenceFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\SequenceFixer.cs,FinalFixerInitialization,Cyclomatic complexity of the method is 9
Complex Method,SIL.FieldWorks.FixData,OriginalFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\FwDataFixer.cs,FixElement,Cyclomatic complexity of the method is 18
Long Parameter List,SIL.FieldWorks.FixData,SequenceFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\SequenceFixer.cs,AdjustBadSegmentReferenceAndReport,The method has 5 parameters. Parameters: rt' guid' guidOwner' className' errorLogger
Long Parameter List,SIL.FieldWorks.FixData,FwDataFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\FwDataFixer.cs,FixGenericDate,The method has 5 parameters. Parameters: fieldName' rt' className' guid' errorLogger
Long Statement,SIL.FieldWorks.FixData,CustomPropertyFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\CustomPropertyFixer.cs,InspectAdditionalFieldsElement,The length of the statement  "				// Using the name of the attribute followed by the class will allow the same name to be used on different types i.e. LexEntry and LexSense " is 138.
Long Statement,SIL.FieldWorks.FixData,CustomPropertyFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\CustomPropertyFixer.cs,FixElement,The length of the statement  "				logger(String.Format(Strings.ksRemovingUndefinedCustomProperty' kvp.Key.Substring(0' kvp.Key.LastIndexOf('_'))' className' guid)' true); " is 136.
Long Statement,SIL.FieldWorks.FixData,HomographFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\HomographFixer.cs,FinalFixerInitialization,The length of the statement  "			base.FinalFixerInitialization(owners' guids' parentToOwnedObjsur' rtElementsToDelete); // Sets base class member variables " is 122.
Long Statement,SIL.FieldWorks.FixData,HomographFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\HomographFixer.cs,GetStringInHomographWritingSystem,The length of the statement  "			var alternateFormElement =  rtForm.Elements("AUni").FirstOrDefault(form => form.Attribute("ws") != null && form.Attribute("ws").Value == m_homographWs); " is 152.
Long Statement,SIL.FieldWorks.FixData,MorphBundleFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\MorphBundleFixer.cs,FixMsa,The length of the statement  "			if (senseGuid != null && m_senseToMsa.TryGetValue(senseGuid' out senseMsaGuid) && m_guids.Contains(new Guid(senseMsaGuid))) " is 123.
Long Statement,SIL.FieldWorks.FixData,MorphBundleFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\MorphBundleFixer.cs,FixMorph,The length of the statement  "			if (senseGuid != null && m_owners.TryGetValue(new Guid(senseGuid)' out entryGuid) && m_entrys.TryGetValue(entryGuid.ToString()' out entryElt)) " is 142.
Long Statement,SIL.FieldWorks.FixData,SequenceFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\SequenceFixer.cs,FinalFixerInitialization,The length of the statement  "			base.FinalFixerInitialization(owners' guids' parentToOwnedObjsur' rtElementsToDelete); // Sets base class member variables " is 122.
Long Statement,SIL.FieldWorks.FixData,FixErrorsDlg,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\FixErrorsDlg.cs,InitializeComponent,The length of the statement  "			System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FixErrorsDlg)); " is 132.
Long Statement,SIL.FieldWorks.FixData,FwDataFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\FwDataFixer.cs,FixErrorsAndSave,The length of the statement  "			// 20 is not a magic number' but it's comfortably larger than any iteration we expect (maximum ownership chain depth + 1). " is 122.
Long Statement,SIL.FieldWorks.FixData,FwDataFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\FwDataFixer.cs,FixGenericDate,The length of the statement  "			foreach (var xeGenDate in rt.Descendants(fieldName).ToList()) // ToList because we may modify things and mess up iterator. " is 122.
Long Statement,SIL.FieldWorks.FixData,FwDataFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\FwDataFixer.cs,FixDuplicateWritingSystems,The length of the statement  "						errorLogger(string.Format(Strings.ksRemovingDuplicateAlternative' list[i + 1]' kvp.Key.Name.LocalName' guid' list[i])' true); " is 125.
Long Statement,SIL.FieldWorks.FixData,OriginalFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\FwDataFixer.cs,FixElement,The length of the statement  "						errorLogger(String.Format(Strings.ksRemovingLinkToNonexistingObject' guidObj' className' guid' objsur.Parent.Name)' true); " is 122.
Long Statement,SIL.FieldWorks.FixData,OriginalFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\FwDataFixer.cs,FixElement,The length of the statement  "								errorLogger(String.Format(Strings.ksRemovingMultipleOwnershipLink' guidObj' className' guid' objsur.Parent.Name)' true); " is 120.
Long Statement,SIL.FieldWorks.FixData,WriteAllObjectsUtility,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\WriteAllObjectsUtility.cs,OnSelection,The length of the statement  "			_utilityDlg.WhenDescription = "Run this whenever you want to write out all CmObjects in the system. This will fix S/R failures if basic attributes were somehow lost in the fwdata file."; " is 186.
Complex Conditional,SIL.FieldWorks.FixData,HomographFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\HomographFixer.cs,FinalFixerInitialization,The conditional expression  "int.TryParse(oldHn' out index) && index > 0 && index <= orderedGuids.Length &&  							orderedGuids[index - 1] == Guid.Empty"  is complex.
Empty Catch Block,SIL.FieldWorks.FixData,ErrorFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\ErrorFixer.cs,Process,The method has an empty catch block.
Magic Number,SIL.FieldWorks.FixData,SequenceFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\SequenceFixer.cs,HoldsLessThanTwoInSequence,The following statement contains a magic number: return xeProperty == null || xeProperty.Descendants("objsur").Count() < 2;
Magic Number,SIL.FieldWorks.FixData,FwDataFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\FwDataFixer.cs,FwDataFixer,The following statement contains a magic number: m_progress.Maximum = 1000;
Magic Number,SIL.FieldWorks.FixData,FwDataFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\FwDataFixer.cs,InitializeFixers,The following statement contains a magic number: using (XmlReader xrdr = XmlReader.Create(filename))  			{  				xrdr.MoveToContent();  				if (xrdr.Name != "languageproject")  					throw new Exception(String.Format("Unexpected outer element (expected <Lists>): {0}"' xrdr.Name));  				xrdr.Read();  				xrdr.MoveToContent();  				if (xrdr.Name == "AdditionalFields")  				{  					string customsNode = xrdr.ReadOuterXml();  					XElement additionalFieldsElem = XElement.Parse(customsNode);  					// Give each fixer a chance to gather data on defined custom fields.  					foreach (var fixer in m_rtLevelFixers)  						fixer.InspectAdditionalFieldsElement(additionalFieldsElem);  					xrdr.ReadToFollowing("rt");  				}  				while (xrdr.Name == "rt")  				{  					string rtXml = xrdr.ReadOuterXml();  					XElement rt = XElement.Parse(rtXml);  					StoreGuidInfoAndOwnership(rt' errorLogger);  					// Give each fixer a chance to gather data on the first pass'  					// if it needs two passes to fix its sort of problem.  					foreach (var fixer in m_rtLevelFixers)  						fixer.InspectElement(rt);  					xrdr.MoveToContent();  					++m_crt;  					if (m_progress.Position == m_progress.Maximum)  						m_progress.Position = 0;  					if ((m_crt % 1000) == 0)  						m_progress.Step(1);  				}  				foreach (var fixer in m_rtLevelFixers)  					fixer.FinalFixerInitialization(m_owners' m_guids' m_parentToOwnedObjsur' m_rtElementsToDelete);  				xrdr.Close();  			}
Magic Number,SIL.FieldWorks.FixData,FwDataFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\FwDataFixer.cs,FixErrorsAndSave,The following statement contains a magic number: for (int repeatCount = 0; repeatCount < 20; ++repeatCount)  			{  				outfile = m_filename + "-x" + repeatCount;  				if (repeatCount > 0)  				{  					InitializeFixers(infile);  					filesToDelete.Add(infile);  				}  				using (XmlWriter xw = XmlWriter.Create(outfile' settings))  				{  					xw.WriteStartDocument();    					using (XmlReader xrdr = XmlReader.Create(infile))  					{  						xrdr.MoveToContent();  						if (xrdr.Name != "languageproject")  							throw new Exception(String.Format("Unexpected outer element (expected <Lists>): {0}"' xrdr.Name));  						xw.WriteStartElement("languageproject");  						xw.WriteAttributes(xrdr' false);  						xrdr.Read();  						xrdr.MoveToContent();  						if (xrdr.Name == "AdditionalFields")  						{  							string sXml = xrdr.ReadOuterXml();  							var xe = XElement.Parse(sXml);  							xe.WriteTo(xw);  							xrdr.MoveToContent();  						}  						while (xrdr.Name == "rt")  						{  							var rtXml = xrdr.ReadOuterXml();  							var rt = XElement.Parse(rtXml);  							// set flag to false if we don't want to write out this rt element' i.e. delete it!  							// N.B.: Any deleting of owned objects requires two passes' so that the reference  							// to the object being deleted can be cleaned up too!  							var guid = rt.Attribute("guid").Value;  							if (!m_rtElementsToDelete.Contains(guid))  							{  								var fwrite = true;  								foreach (var fixer in m_rtLevelFixers)  								{  									if (!fixer.FixElement(rt' errorLogger))  										fwrite = false;  								}  								if (fwrite)  									rt.WriteTo(xw);  							}  							else  							{  								var className = rt.Attribute("class").Value;  								var errorMessage = String.Format(Strings.ksUnusedRtElement' className' guid);  								errorLogger(errorMessage' true);  							}  							xrdr.MoveToContent();  							m_progress.Step(1);  						}  						xrdr.Close();  					}  					xw.WriteEndDocument();  					xw.Close();  				}  				var newErrorCount = errorCounter();  				if (newErrorCount == currentErrorCount)  					break;	// If no errors were fixed on this pass' we can quit.  				currentErrorCount = newErrorCount;  				infile = outfile;  			}
Missing Default,SIL.FieldWorks.FixData,DuplicateStyleFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\DuplicateStyleFixer.cs,FixElement,The following switch statement is missing a default case: switch (xaClass)  			{  				case "StStyle":  					var guid = rt.Attribute("guid").Value;  					if (!m_deletedGuids.Contains(guid))  						return true; // keep it as far as we're concerned.  					var name = rt.Element("Name").Element("Uni").Value; // none can be null or we wouldn't have listed it for deletion  					errorLogger(String.Format(Strings.ksRemovingDuplicateStyle' name)' true);  					return false; // This element must go away!  				case "LangProject":  				case "Scripture":  					var styles = rt.Element("Styles");  					if (styles == null)  						return true;  					// Removing these here prevents additional error messages about missing objects' since the  					// targets of these objsurs are no longer present.  					foreach (var objsur in styles.Elements().ToArray()) // ToArray so as not to modify collection we're iterating over  					{  						var surGuid = objsur.Attribute("guid").Value;  						if (m_deletedGuids.Contains(surGuid))  							objsur.Remove();  					}  					break;  			}
Missing Default,SIL.FieldWorks.FixData,MorphBundleFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\MorphBundleFixer.cs,InspectElement,The following switch statement is missing a default case: switch (className)  			{  				case "LexSense":  					var msaGuid = ChildSurrogateGuid(rt' "MorphoSyntaxAnalysis");  					if (msaGuid == null)  						break; // we can't use this sense to help fix MSAs  					m_senseToMsa[guid] = msaGuid;  					break;  				case "LexEntry":  					m_entrys[guid] = rt;  					break;  			}
Missing Default,SIL.FieldWorks.FixData,MorphBundleFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\MorphBundleFixer.cs,FixElement,The following switch statement is missing a default case: switch (className)  			{  				case "WfiMorphBundle":  					FixMsa(rt' logger' guidString);  					FixMorph(rt' logger' guidString);  					break;  			}
Missing Default,SIL.FieldWorks.FixData,OriginalFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\FwDataFixer.cs,FixElement,The following switch statement is missing a default case: switch (objsur.Parent.Name.LocalName)  							{  								case "Msa":  								case "Morph":  									continue;  							}
Missing Default,SIL.FieldWorks.FixData,OriginalFixer,C:\repos\sillsdev_FieldWorks\Src\Utilities\FixFwDataDll\FwDataFixer.cs,FixElement,The following switch statement is missing a default case: switch (className)  				{  					case "RnGenericRec":  						FixGenericDate("DateOfEvent"' rt' className' guid' errorLogger);  						break;  					case "CmPerson":  						FixGenericDate("DateOfBirth"' rt' className' guid' errorLogger);  						FixGenericDate("DateOfDeath"' rt' className' guid' errorLogger);  						break;  				}
